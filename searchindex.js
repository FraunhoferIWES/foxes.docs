Search.setIndex({"titles": ["foxes.algorithms.Downwind", "foxes.algorithms.Downwind.__init__", "foxes.algorithms.Downwind.all_models", "foxes.algorithms.Downwind.calc_farm", "foxes.algorithms.Downwind.calc_points", "foxes.algorithms.Downwind.finalize", "foxes.algorithms.Downwind.get_model", "foxes.algorithms.Downwind.init_states", "foxes.algorithms.Downwind.initialize", "foxes.algorithms.Iterative", "foxes.algorithms.Iterative.__init__", "foxes.algorithms.Iterative.calc_farm", "foxes.algorithms.Iterative.get_model", "foxes.algorithms.Iterative.iterations", "foxes.algorithms.Iterative.set_urelax", "foxes.algorithms.Iterative.urelax", "foxes.algorithms.Sequential", "foxes.algorithms.Sequential.__init__", "foxes.algorithms.Sequential.__iter__", "foxes.algorithms.Sequential.__next__", "foxes.algorithms.Sequential.calc_farm", "foxes.algorithms.Sequential.calc_points", "foxes.algorithms.Sequential.counter", "foxes.algorithms.Sequential.cur_farm_results", "foxes.algorithms.Sequential.cur_point_results", "foxes.algorithms.Sequential.farm_results", "foxes.algorithms.Sequential.fdata", "foxes.algorithms.Sequential.get_model", "foxes.algorithms.Sequential.index", "foxes.algorithms.Sequential.iterating", "foxes.algorithms.Sequential.mdata", "foxes.algorithms.Sequential.pdata", "foxes.algorithms.Sequential.point_results", "foxes.algorithms.Sequential.size", "foxes.algorithms.Sequential.weight", "foxes.algorithms.downwind.models.CalcOrder", "foxes.algorithms.downwind.models.CalcOrder.calculate", "foxes.algorithms.downwind.models.CalcOrder.initialize", "foxes.algorithms.downwind.models.CalcOrder.output_farm_vars", "foxes.algorithms.downwind.models.CalcOrder.sub_models", "foxes.algorithms.downwind.models.FarmWakesCalculation", "foxes.algorithms.downwind.models.FarmWakesCalculation.__init__", "foxes.algorithms.downwind.models.FarmWakesCalculation.calculate", "foxes.algorithms.downwind.models.FarmWakesCalculation.initialize", "foxes.algorithms.downwind.models.FarmWakesCalculation.output_farm_vars", "foxes.algorithms.downwind.models.FarmWakesCalculation.sub_models", "foxes.algorithms.downwind.models.PointWakesCalculation", "foxes.algorithms.downwind.models.PointWakesCalculation.__init__", "foxes.algorithms.downwind.models.PointWakesCalculation.calculate", "foxes.algorithms.downwind.models.PointWakesCalculation.contribute_to_wake_deltas", "foxes.algorithms.downwind.models.PointWakesCalculation.initialize", "foxes.algorithms.downwind.models.PointWakesCalculation.output_point_vars", "foxes.algorithms.downwind.models.PointWakesCalculation.sub_models", "foxes.algorithms.downwind.models.SetAmbFarmResults", "foxes.algorithms.downwind.models.SetAmbFarmResults.__init__", "foxes.algorithms.downwind.models.SetAmbFarmResults.calculate", "foxes.algorithms.downwind.models.SetAmbFarmResults.output_farm_vars", "foxes.algorithms.downwind.models.SetAmbPointResults", "foxes.algorithms.downwind.models.SetAmbPointResults.__init__", "foxes.algorithms.downwind.models.SetAmbPointResults.calculate", "foxes.algorithms.downwind.models.SetAmbPointResults.initialize", "foxes.algorithms.downwind.models.SetAmbPointResults.output_point_vars", "foxes.algorithms.iterative.ConvCrit", "foxes.algorithms.iterative.ConvCrit.__init__", "foxes.algorithms.iterative.ConvCrit.check_converged", "foxes.algorithms.iterative.ConvCrit.get_deltas", "foxes.algorithms.iterative.ConvCritList", "foxes.algorithms.iterative.ConvCritList.__init__", "foxes.algorithms.iterative.ConvCritList.add_crit", "foxes.algorithms.iterative.ConvCritList.check_converged", "foxes.algorithms.iterative.ConvCritList.get_deltas", "foxes.algorithms.iterative.ConvVarDelta", "foxes.algorithms.iterative.ConvVarDelta.__init__", "foxes.algorithms.iterative.ConvVarDelta.check_converged", "foxes.algorithms.iterative.ConvVarDelta.get_deltas", "foxes.algorithms.iterative.DefaultConv", "foxes.algorithms.iterative.DefaultConv.__init__", "foxes.algorithms.iterative.models.FarmWakesCalculation", "foxes.algorithms.iterative.models.FarmWakesCalculation.__init__", "foxes.algorithms.iterative.models.FarmWakesCalculation.calculate", "foxes.algorithms.iterative.models.FarmWakesCalculation.initialize", "foxes.algorithms.iterative.models.FarmWakesCalculation.output_farm_vars", "foxes.algorithms.iterative.models.FarmWakesCalculation.sub_models", "foxes.algorithms.iterative.models.URelax", "foxes.algorithms.iterative.models.URelax.__init__", "foxes.algorithms.iterative.models.URelax.calculate", "foxes.algorithms.iterative.models.URelax.output_farm_vars", "foxes.algorithms.sequential.SequentialPlugin", "foxes.algorithms.sequential.SequentialPlugin.__init__", "foxes.algorithms.sequential.SequentialPlugin.finalize", "foxes.algorithms.sequential.SequentialPlugin.initialize", "foxes.algorithms.sequential.SequentialPlugin.update", "foxes.algorithms.sequential.models.SeqState", "foxes.algorithms.sequential.models.SeqState.__init__", "foxes.algorithms.sequential.models.SeqState.calculate", "foxes.algorithms.sequential.models.SeqState.counter", "foxes.algorithms.sequential.models.SeqState.index", "foxes.algorithms.sequential.models.SeqState.initialize", "foxes.algorithms.sequential.models.SeqState.output_point_vars", "foxes.algorithms.sequential.models.SeqState.size", "foxes.algorithms.sequential.models.SeqState.sub_models", "foxes.algorithms.sequential.models.SeqState.weights", "foxes.core.Algorithm", "foxes.core.Algorithm.__init__", "foxes.core.Algorithm.chunked", "foxes.core.Algorithm.del_model_data", "foxes.core.Algorithm.finalize", "foxes.core.Algorithm.get_model_data", "foxes.core.Algorithm.get_models_data", "foxes.core.Algorithm.get_models_idata", "foxes.core.Algorithm.idata_mem", "foxes.core.Algorithm.initialize", "foxes.core.Algorithm.new", "foxes.core.Algorithm.new_point_data", "foxes.core.Algorithm.print", "foxes.core.Algorithm.store_model_data", "foxes.core.Algorithm.update_n_turbines", "foxes.core.Data", "foxes.core.Data.__init__", "foxes.core.Data.add", "foxes.core.Data.from_points", "foxes.core.Data.n_points", "foxes.core.Data.n_states", "foxes.core.Data.n_turbines", "foxes.core.Data.states_i0", "foxes.core.DataCalcModel", "foxes.core.DataCalcModel.calculate", "foxes.core.DataCalcModel.run_calculation", "foxes.core.ExtendedStates", "foxes.core.ExtendedStates.__init__", "foxes.core.ExtendedStates.append", "foxes.core.ExtendedStates.calculate", "foxes.core.ExtendedStates.index", "foxes.core.ExtendedStates.output_point_vars", "foxes.core.ExtendedStates.size", "foxes.core.ExtendedStates.sub_models", "foxes.core.ExtendedStates.weights", "foxes.core.FarmController", "foxes.core.FarmController.__init__", "foxes.core.FarmController.calculate", "foxes.core.FarmController.collect_models", "foxes.core.FarmController.finalize", "foxes.core.FarmController.initialize", "foxes.core.FarmController.load_data", "foxes.core.FarmController.output_farm_vars", "foxes.core.FarmController.set_pars", "foxes.core.FarmController.sub_models", "foxes.core.FarmDataModel", "foxes.core.FarmDataModel.__init__", "foxes.core.FarmDataModel.calculate", "foxes.core.FarmDataModel.output_farm_vars", "foxes.core.FarmDataModel.run_calculation", "foxes.core.FarmDataModelList", "foxes.core.FarmDataModelList.__init__", "foxes.core.FarmDataModelList.append", "foxes.core.FarmDataModelList.calculate", "foxes.core.FarmDataModelList.insert", "foxes.core.FarmDataModelList.output_farm_vars", "foxes.core.FarmDataModelList.sub_models", "foxes.core.FarmModel", "foxes.core.Model", "foxes.core.Model.__init__", "foxes.core.Model.__repr__", "foxes.core.Model.data_to_store", "foxes.core.Model.finalize", "foxes.core.Model.from_data_or_store", "foxes.core.Model.get_data", "foxes.core.Model.initialize", "foxes.core.Model.initialized", "foxes.core.Model.load_data", "foxes.core.Model.model_id", "foxes.core.Model.sub_models", "foxes.core.Model.var", "foxes.core.PartialWakesModel", "foxes.core.PartialWakesModel.__init__", "foxes.core.PartialWakesModel.contribute_to_wake_deltas", "foxes.core.PartialWakesModel.evaluate_results", "foxes.core.PartialWakesModel.initialize", "foxes.core.PartialWakesModel.new", "foxes.core.PartialWakesModel.new_wake_deltas", "foxes.core.PartialWakesModel.sub_models", "foxes.core.PointDataModel", "foxes.core.PointDataModel.calculate", "foxes.core.PointDataModel.output_point_vars", "foxes.core.PointDataModel.run_calculation", "foxes.core.PointDataModelList", "foxes.core.PointDataModelList.__init__", "foxes.core.PointDataModelList.append", "foxes.core.PointDataModelList.calculate", "foxes.core.PointDataModelList.output_point_vars", "foxes.core.PointDataModelList.sub_models", "foxes.core.RotorModel", "foxes.core.RotorModel.__init__", "foxes.core.RotorModel.calculate", "foxes.core.RotorModel.design_points", "foxes.core.RotorModel.eval_rpoint_results", "foxes.core.RotorModel.get_rotor_points", "foxes.core.RotorModel.n_rotor_points", "foxes.core.RotorModel.new", "foxes.core.RotorModel.output_farm_vars", "foxes.core.RotorModel.rotor_point_weights", "foxes.core.States", "foxes.core.States.index", "foxes.core.States.load_data", "foxes.core.States.output_point_vars", "foxes.core.States.size", "foxes.core.States.weights", "foxes.core.Turbine", "foxes.core.Turbine.__init__", "foxes.core.Turbine.add_model", "foxes.core.Turbine.insert_model", "foxes.core.TurbineModel", "foxes.core.TurbineModel.calculate", "foxes.core.TurbineModel.new", "foxes.core.TurbineType", "foxes.core.TurbineType.__init__", "foxes.core.TurbineType.new", "foxes.core.VerticalProfile", "foxes.core.VerticalProfile.calculate", "foxes.core.VerticalProfile.input_vars", "foxes.core.VerticalProfile.new", "foxes.core.WakeFrame", "foxes.core.WakeFrame.calc_centreline_integral", "foxes.core.WakeFrame.calc_order", "foxes.core.WakeFrame.get_centreline_points", "foxes.core.WakeFrame.get_wake_coos", "foxes.core.WakeFrame.get_wake_modelling_data", "foxes.core.WakeFrame.new", "foxes.core.WakeModel", "foxes.core.WakeModel.contribute_to_wake_deltas", "foxes.core.WakeModel.finalize_wake_deltas", "foxes.core.WakeModel.init_wake_deltas", "foxes.core.WakeModel.new", "foxes.core.WakeSuperposition", "foxes.core.WakeSuperposition.calc_final_wake_delta", "foxes.core.WakeSuperposition.calc_wakes_plus_wake", "foxes.core.WindFarm", "foxes.core.WindFarm.__init__", "foxes.core.WindFarm.add_turbine", "foxes.core.WindFarm.n_turbines", "foxes.core.WindFarm.turbine_names", "foxes.data.StaticData", "foxes.data.StaticData.__init__", "foxes.data.parse_Pct_file_name", "foxes.data.parse_Pct_two_files", "foxes.constants.AMB_RPOINT_RESULTS", "foxes.constants.DTYPE", "foxes.constants.DTYPE.T", "foxes.constants.DTYPE.__abs__", "foxes.constants.DTYPE.__add__", "foxes.constants.DTYPE.__and__", "foxes.constants.DTYPE.__array__", "foxes.constants.DTYPE.__array_interface__", "foxes.constants.DTYPE.__array_priority__", "foxes.constants.DTYPE.__array_struct__", "foxes.constants.DTYPE.__array_wrap__", "foxes.constants.DTYPE.__bool__", "foxes.constants.DTYPE.__class_getitem__", "foxes.constants.DTYPE.__divmod__", "foxes.constants.DTYPE.__eq__", "foxes.constants.DTYPE.__float__", "foxes.constants.DTYPE.__floordiv__", "foxes.constants.DTYPE.__format__", "foxes.constants.DTYPE.__ge__", "foxes.constants.DTYPE.__getitem__", "foxes.constants.DTYPE.__gt__", "foxes.constants.DTYPE.__hash__", "foxes.constants.DTYPE.__int__", "foxes.constants.DTYPE.__invert__", "foxes.constants.DTYPE.__le__", "foxes.constants.DTYPE.__lshift__", "foxes.constants.DTYPE.__lt__", "foxes.constants.DTYPE.__mod__", "foxes.constants.DTYPE.__mul__", "foxes.constants.DTYPE.__ne__", "foxes.constants.DTYPE.__neg__", "foxes.constants.DTYPE.__new__", "foxes.constants.DTYPE.__or__", "foxes.constants.DTYPE.__pos__", "foxes.constants.DTYPE.__pow__", "foxes.constants.DTYPE.__radd__", "foxes.constants.DTYPE.__rand__", "foxes.constants.DTYPE.__rdivmod__", "foxes.constants.DTYPE.__reduce__", "foxes.constants.DTYPE.__repr__", "foxes.constants.DTYPE.__rfloordiv__", "foxes.constants.DTYPE.__rlshift__", "foxes.constants.DTYPE.__rmod__", "foxes.constants.DTYPE.__rmul__", "foxes.constants.DTYPE.__ror__", "foxes.constants.DTYPE.__rpow__", "foxes.constants.DTYPE.__rrshift__", "foxes.constants.DTYPE.__rshift__", "foxes.constants.DTYPE.__rsub__", "foxes.constants.DTYPE.__rtruediv__", "foxes.constants.DTYPE.__rxor__", "foxes.constants.DTYPE.__sizeof__", "foxes.constants.DTYPE.__str__", "foxes.constants.DTYPE.__sub__", "foxes.constants.DTYPE.__truediv__", "foxes.constants.DTYPE.__xor__", "foxes.constants.DTYPE.all", "foxes.constants.DTYPE.any", "foxes.constants.DTYPE.argmax", "foxes.constants.DTYPE.argmin", "foxes.constants.DTYPE.argsort", "foxes.constants.DTYPE.as_integer_ratio", "foxes.constants.DTYPE.astype", "foxes.constants.DTYPE.base", "foxes.constants.DTYPE.byteswap", "foxes.constants.DTYPE.choose", "foxes.constants.DTYPE.clip", "foxes.constants.DTYPE.compress", "foxes.constants.DTYPE.conj", "foxes.constants.DTYPE.conjugate", "foxes.constants.DTYPE.copy", "foxes.constants.DTYPE.cumprod", "foxes.constants.DTYPE.cumsum", "foxes.constants.DTYPE.data", "foxes.constants.DTYPE.diagonal", "foxes.constants.DTYPE.dtype", "foxes.constants.DTYPE.dump", "foxes.constants.DTYPE.dumps", "foxes.constants.DTYPE.fill", "foxes.constants.DTYPE.flags", "foxes.constants.DTYPE.flat", "foxes.constants.DTYPE.flatten", "foxes.constants.DTYPE.getfield", "foxes.constants.DTYPE.imag", "foxes.constants.DTYPE.is_integer", "foxes.constants.DTYPE.item", "foxes.constants.DTYPE.itemset", "foxes.constants.DTYPE.itemsize", "foxes.constants.DTYPE.max", "foxes.constants.DTYPE.mean", "foxes.constants.DTYPE.min", "foxes.constants.DTYPE.nbytes", "foxes.constants.DTYPE.ndim", "foxes.constants.DTYPE.newbyteorder", "foxes.constants.DTYPE.nonzero", "foxes.constants.DTYPE.prod", "foxes.constants.DTYPE.ptp", "foxes.constants.DTYPE.put", "foxes.constants.DTYPE.ravel", "foxes.constants.DTYPE.real", "foxes.constants.DTYPE.repeat", "foxes.constants.DTYPE.reshape", "foxes.constants.DTYPE.resize", "foxes.constants.DTYPE.round", "foxes.constants.DTYPE.searchsorted", "foxes.constants.DTYPE.setfield", "foxes.constants.DTYPE.setflags", "foxes.constants.DTYPE.shape", "foxes.constants.DTYPE.size", "foxes.constants.DTYPE.sort", "foxes.constants.DTYPE.squeeze", "foxes.constants.DTYPE.std", "foxes.constants.DTYPE.strides", "foxes.constants.DTYPE.sum", "foxes.constants.DTYPE.swapaxes", "foxes.constants.DTYPE.take", "foxes.constants.DTYPE.tobytes", "foxes.constants.DTYPE.tofile", "foxes.constants.DTYPE.tolist", "foxes.constants.DTYPE.tostring", "foxes.constants.DTYPE.trace", "foxes.constants.DTYPE.transpose", "foxes.constants.DTYPE.var", "foxes.constants.DTYPE.view", "foxes.constants.FARM", "foxes.constants.GW", "foxes.constants.ITYPE", "foxes.constants.ITYPE.__abs__", "foxes.constants.ITYPE.__add__", "foxes.constants.ITYPE.__and__", "foxes.constants.ITYPE.__bool__", "foxes.constants.ITYPE.__class_getitem__", "foxes.constants.ITYPE.__divmod__", "foxes.constants.ITYPE.__eq__", "foxes.constants.ITYPE.__float__", "foxes.constants.ITYPE.__floordiv__", "foxes.constants.ITYPE.__ge__", "foxes.constants.ITYPE.__gt__", "foxes.constants.ITYPE.__hash__", "foxes.constants.ITYPE.__index__", "foxes.constants.ITYPE.__int__", "foxes.constants.ITYPE.__invert__", "foxes.constants.ITYPE.__le__", "foxes.constants.ITYPE.__lshift__", "foxes.constants.ITYPE.__lt__", "foxes.constants.ITYPE.__mod__", "foxes.constants.ITYPE.__mul__", "foxes.constants.ITYPE.__ne__", "foxes.constants.ITYPE.__neg__", "foxes.constants.ITYPE.__new__", "foxes.constants.ITYPE.__or__", "foxes.constants.ITYPE.__pos__", "foxes.constants.ITYPE.__pow__", "foxes.constants.ITYPE.__radd__", "foxes.constants.ITYPE.__rand__", "foxes.constants.ITYPE.__rdivmod__", "foxes.constants.ITYPE.__repr__", "foxes.constants.ITYPE.__rfloordiv__", "foxes.constants.ITYPE.__rlshift__", "foxes.constants.ITYPE.__rmod__", "foxes.constants.ITYPE.__rmul__", "foxes.constants.ITYPE.__ror__", "foxes.constants.ITYPE.__rpow__", "foxes.constants.ITYPE.__rrshift__", "foxes.constants.ITYPE.__rshift__", "foxes.constants.ITYPE.__rsub__", "foxes.constants.ITYPE.__rtruediv__", "foxes.constants.ITYPE.__rxor__", "foxes.constants.ITYPE.__str__", "foxes.constants.ITYPE.__sub__", "foxes.constants.ITYPE.__truediv__", "foxes.constants.ITYPE.__xor__", "foxes.constants.ITYPE.bit_count", "foxes.constants.ITYPE.denominator", "foxes.constants.ITYPE.is_integer", "foxes.constants.ITYPE.numerator", "foxes.constants.KAPPA", "foxes.constants.MW", "foxes.constants.POINT", "foxes.constants.POINTS", "foxes.constants.POP", "foxes.constants.P_UNITS", "foxes.constants.RPOINT", "foxes.constants.RPOINTS", "foxes.constants.RWEIGHTS", "foxes.constants.STATE", "foxes.constants.STATES_SEL", "foxes.constants.STATE_POINT", "foxes.constants.STATE_SOURCE_TURBINE", "foxes.constants.STATE_TURBINE", "foxes.constants.TMODELS", "foxes.constants.TMODEL_SELS", "foxes.constants.TNAME", "foxes.constants.TURBINE", "foxes.constants.TW", "foxes.constants.VALID", "foxes.constants.VARS", "foxes.constants.W", "foxes.constants.XYH", "foxes.constants.kW", "foxes.variables.AMB_CAP", "foxes.variables.AMB_CT", "foxes.variables.AMB_P", "foxes.variables.AMB_REWS", "foxes.variables.AMB_REWS2", "foxes.variables.AMB_REWS3", "foxes.variables.AMB_RHO", "foxes.variables.AMB_T", "foxes.variables.AMB_TI", "foxes.variables.AMB_WD", "foxes.variables.AMB_WS", "foxes.variables.AMB_YAW", "foxes.variables.AMB_YAWM", "foxes.variables.AMB_YLD", "foxes.variables.CAP", "foxes.variables.CT", "foxes.variables.D", "foxes.variables.EFF", "foxes.variables.H", "foxes.variables.K", "foxes.variables.KB", "foxes.variables.KTI", "foxes.variables.MAX_P", "foxes.variables.MOL", "foxes.variables.ORDER", "foxes.variables.P", "foxes.variables.PA_ALPHA", "foxes.variables.PA_BETA", "foxes.variables.REWS", "foxes.variables.REWS2", "foxes.variables.REWS3", "foxes.variables.RHO", "foxes.variables.SHEAR", "foxes.variables.T", "foxes.variables.TI", "foxes.variables.TXYH", "foxes.variables.WD", "foxes.variables.WEIGHT", "foxes.variables.WS", "foxes.variables.X", "foxes.variables.Y", "foxes.variables.YAW", "foxes.variables.YAWM", "foxes.variables.YLD", "foxes.variables.Z0", "foxes.variables.amb2var", "foxes.variables.var2amb", "foxes.input.farm_layout.add_from_csv", "foxes.input.farm_layout.add_from_df", "foxes.input.farm_layout.add_from_file", "foxes.input.farm_layout.add_from_json", "foxes.input.farm_layout.add_grid", "foxes.input.farm_layout.add_row", "foxes.input.states.FieldDataNC", "foxes.input.states.FieldDataNC.__init__", "foxes.input.states.FieldDataNC.calculate", "foxes.input.states.FieldDataNC.index", "foxes.input.states.FieldDataNC.load_data", "foxes.input.states.FieldDataNC.output_point_vars", "foxes.input.states.FieldDataNC.size", "foxes.input.states.FieldDataNC.weights", "foxes.input.states.MultiHeightStates", "foxes.input.states.MultiHeightStates.RDICT", "foxes.input.states.MultiHeightStates.__init__", "foxes.input.states.MultiHeightStates.calculate", "foxes.input.states.MultiHeightStates.finalize", "foxes.input.states.MultiHeightStates.index", "foxes.input.states.MultiHeightStates.load_data", "foxes.input.states.MultiHeightStates.output_point_vars", "foxes.input.states.MultiHeightStates.reset", "foxes.input.states.MultiHeightStates.size", "foxes.input.states.MultiHeightStates.weights", "foxes.input.states.MultiHeightTimeseries", "foxes.input.states.MultiHeightTimeseries.RDICT", "foxes.input.states.ScanWS", "foxes.input.states.ScanWS.__init__", "foxes.input.states.ScanWS.calculate", "foxes.input.states.ScanWS.load_data", "foxes.input.states.ScanWS.output_point_vars", "foxes.input.states.ScanWS.size", "foxes.input.states.ScanWS.weights", "foxes.input.states.SingleStateStates", "foxes.input.states.SingleStateStates.__init__", "foxes.input.states.SingleStateStates.calculate", "foxes.input.states.SingleStateStates.initialize", "foxes.input.states.SingleStateStates.output_point_vars", "foxes.input.states.SingleStateStates.size", "foxes.input.states.SingleStateStates.sub_models", "foxes.input.states.SingleStateStates.weights", "foxes.input.states.StatesTable", "foxes.input.states.StatesTable.RDICT", "foxes.input.states.StatesTable.__init__", "foxes.input.states.StatesTable.calculate", "foxes.input.states.StatesTable.finalize", "foxes.input.states.StatesTable.index", "foxes.input.states.StatesTable.initialize", "foxes.input.states.StatesTable.load_data", "foxes.input.states.StatesTable.output_point_vars", "foxes.input.states.StatesTable.reset", "foxes.input.states.StatesTable.size", "foxes.input.states.StatesTable.sub_models", "foxes.input.states.StatesTable.weights", "foxes.input.states.Timeseries", "foxes.input.states.Timeseries.RDICT", "foxes.input.states.create_random_abl_states", "foxes.input.windio.read_case", "foxes.models.farm_controllers.BasicFarmController", "foxes.models.farm_models.Turbine2FarmModel", "foxes.models.farm_models.Turbine2FarmModel.__init__", "foxes.models.farm_models.Turbine2FarmModel.__repr__", "foxes.models.farm_models.Turbine2FarmModel.calculate", "foxes.models.farm_models.Turbine2FarmModel.output_farm_vars", "foxes.models.farm_models.Turbine2FarmModel.sub_models", "foxes.models.model_book.Dict", "foxes.models.model_book.Dict.__getitem__", "foxes.models.model_book.Dict.__init__", "foxes.models.model_book.ModelBook", "foxes.models.model_book.ModelBook.__getitem__", "foxes.models.model_book.ModelBook.__init__", "foxes.models.model_book.ModelBook.finalize", "foxes.models.model_book.ModelBook.get", "foxes.models.model_book.ModelBook.print_toc", "foxes.models.partial_wakes.Mapped", "foxes.models.partial_wakes.Mapped.__init__", "foxes.models.partial_wakes.Mapped.contribute_to_wake_deltas", "foxes.models.partial_wakes.Mapped.evaluate_results", "foxes.models.partial_wakes.Mapped.initialize", "foxes.models.partial_wakes.Mapped.new_wake_deltas", "foxes.models.partial_wakes.Mapped.sub_models", "foxes.models.partial_wakes.PartialAxiwake", "foxes.models.partial_wakes.PartialAxiwake.__init__", "foxes.models.partial_wakes.PartialAxiwake.__repr__", "foxes.models.partial_wakes.PartialAxiwake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake.evaluate_results", "foxes.models.partial_wakes.PartialAxiwake.initialize", "foxes.models.partial_wakes.PartialAxiwake.new_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake.sub_models", "foxes.models.partial_wakes.PartialDistSlicedWake", "foxes.models.partial_wakes.PartialDistSlicedWake.__init__", "foxes.models.partial_wakes.PartialDistSlicedWake.__repr__", "foxes.models.partial_wakes.PartialDistSlicedWake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake.evaluate_results", "foxes.models.partial_wakes.PartialDistSlicedWake.initialize", "foxes.models.partial_wakes.PartialDistSlicedWake.new_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake.sub_models", "foxes.models.partial_wakes.PartialGrid", "foxes.models.partial_wakes.PartialGrid.__init__", "foxes.models.partial_wakes.PartialGrid.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat", "foxes.models.partial_wakes.PartialTopHat.__init__", "foxes.models.partial_wakes.PartialTopHat.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat.evaluate_results", "foxes.models.partial_wakes.PartialTopHat.initialize", "foxes.models.partial_wakes.PartialTopHat.new_wake_deltas", "foxes.models.partial_wakes.PartialTopHat.sub_models", "foxes.models.partial_wakes.RotorPoints", "foxes.models.partial_wakes.RotorPoints.__init__", "foxes.models.partial_wakes.RotorPoints.contribute_to_wake_deltas", "foxes.models.partial_wakes.RotorPoints.evaluate_results", "foxes.models.partial_wakes.RotorPoints.get_wake_points", "foxes.models.partial_wakes.RotorPoints.new_wake_deltas", "foxes.models.point_models.SetUniformData", "foxes.models.point_models.SetUniformData.__init__", "foxes.models.point_models.SetUniformData.calculate", "foxes.models.point_models.SetUniformData.load_data", "foxes.models.point_models.SetUniformData.output_point_vars", "foxes.models.point_models.TKE2TI", "foxes.models.point_models.TKE2TI.calculate", "foxes.models.point_models.TKE2TI.output_point_vars", "foxes.models.point_models.WakeDeltas", "foxes.models.point_models.WakeDeltas.__init__", "foxes.models.point_models.WakeDeltas.calculate", "foxes.models.point_models.WakeDeltas.output_point_vars", "foxes.models.rotor_models.CentreRotor", "foxes.models.rotor_models.CentreRotor.design_points", "foxes.models.rotor_models.CentreRotor.eval_rpoint_results", "foxes.models.rotor_models.CentreRotor.get_rotor_points", "foxes.models.rotor_models.CentreRotor.n_rotor_points", "foxes.models.rotor_models.CentreRotor.rotor_point_weights", "foxes.models.rotor_models.GridRotor", "foxes.models.rotor_models.GridRotor.__init__", "foxes.models.rotor_models.GridRotor.__repr__", "foxes.models.rotor_models.GridRotor.design_points", "foxes.models.rotor_models.GridRotor.initialize", "foxes.models.rotor_models.GridRotor.n_rotor_points", "foxes.models.rotor_models.GridRotor.rotor_point_weights", "foxes.models.rotor_models.LevelRotor", "foxes.models.rotor_models.LevelRotor.__init__", "foxes.models.rotor_models.LevelRotor.__repr__", "foxes.models.rotor_models.LevelRotor.design_points", "foxes.models.rotor_models.LevelRotor.initialize", "foxes.models.rotor_models.LevelRotor.n_rotor_points", "foxes.models.rotor_models.LevelRotor.rotor_point_weights", "foxes.models.turbine_models.Calculator", "foxes.models.turbine_models.Calculator.__init__", "foxes.models.turbine_models.Calculator.calculate", "foxes.models.turbine_models.Calculator.output_farm_vars", "foxes.models.turbine_models.LookupTable", "foxes.models.turbine_models.LookupTable.__init__", "foxes.models.turbine_models.LookupTable.calculate", "foxes.models.turbine_models.LookupTable.load_data", "foxes.models.turbine_models.LookupTable.output_farm_vars", "foxes.models.turbine_models.PowerMask", "foxes.models.turbine_models.PowerMask.__init__", "foxes.models.turbine_models.PowerMask.calculate", "foxes.models.turbine_models.PowerMask.initialize", "foxes.models.turbine_models.PowerMask.output_farm_vars", "foxes.models.turbine_models.PowerMask.update_P_ct", "foxes.models.turbine_models.RotorCentreCalc", "foxes.models.turbine_models.RotorCentreCalc.__init__", "foxes.models.turbine_models.RotorCentreCalc.calculate", "foxes.models.turbine_models.RotorCentreCalc.initialize", "foxes.models.turbine_models.RotorCentreCalc.output_farm_vars", "foxes.models.turbine_models.RotorCentreCalc.sub_models", "foxes.models.turbine_models.SectorManagement", "foxes.models.turbine_models.SectorManagement.__init__", "foxes.models.turbine_models.SectorManagement.calculate", "foxes.models.turbine_models.SectorManagement.initialize", "foxes.models.turbine_models.SectorManagement.output_farm_vars", "foxes.models.turbine_models.SetFarmVars", "foxes.models.turbine_models.SetFarmVars.__init__", "foxes.models.turbine_models.SetFarmVars.add_var", "foxes.models.turbine_models.SetFarmVars.calculate", "foxes.models.turbine_models.SetFarmVars.load_data", "foxes.models.turbine_models.SetFarmVars.output_farm_vars", "foxes.models.turbine_models.SetFarmVars.reset", "foxes.models.turbine_models.SetXYHD", "foxes.models.turbine_models.SetXYHD.__init__", "foxes.models.turbine_models.SetXYHD.calculate", "foxes.models.turbine_models.SetXYHD.output_farm_vars", "foxes.models.turbine_models.TableFactors", "foxes.models.turbine_models.TableFactors.__init__", "foxes.models.turbine_models.TableFactors.calculate", "foxes.models.turbine_models.TableFactors.initialize", "foxes.models.turbine_models.TableFactors.output_farm_vars", "foxes.models.turbine_models.Thrust2Ct", "foxes.models.turbine_models.Thrust2Ct.__init__", "foxes.models.turbine_models.Thrust2Ct.calculate", "foxes.models.turbine_models.Thrust2Ct.output_farm_vars", "foxes.models.turbine_models.YAW2YAWM", "foxes.models.turbine_models.YAW2YAWM.calculate", "foxes.models.turbine_models.YAW2YAWM.output_farm_vars", "foxes.models.turbine_models.YAWM2YAW", "foxes.models.turbine_models.YAWM2YAW.calculate", "foxes.models.turbine_models.YAWM2YAW.output_farm_vars", "foxes.models.turbine_models.kTI", "foxes.models.turbine_models.kTI.__init__", "foxes.models.turbine_models.kTI.__repr__", "foxes.models.turbine_models.kTI.calculate", "foxes.models.turbine_models.kTI.output_farm_vars", "foxes.models.turbine_types.CpCtFile", "foxes.models.turbine_types.CpCtFile.__init__", "foxes.models.turbine_types.CpCtFromTwo", "foxes.models.turbine_types.CpCtFromTwo.__init__", "foxes.models.turbine_types.NullType", "foxes.models.turbine_types.NullType.calculate", "foxes.models.turbine_types.NullType.output_farm_vars", "foxes.models.turbine_types.PCtFile", "foxes.models.turbine_types.PCtFile.__init__", "foxes.models.turbine_types.PCtFile.calculate", "foxes.models.turbine_types.PCtFile.finalize", "foxes.models.turbine_types.PCtFile.load_data", "foxes.models.turbine_types.PCtFile.output_farm_vars", "foxes.models.turbine_types.PCtFromTwo", "foxes.models.turbine_types.PCtFromTwo.__init__", "foxes.models.turbine_types.PCtFromTwo.calculate", "foxes.models.turbine_types.PCtFromTwo.finalize", "foxes.models.turbine_types.PCtFromTwo.load_data", "foxes.models.turbine_types.PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsRho2PCtFromTwo", "foxes.models.turbine_types.WsRho2PCtFromTwo.__init__", "foxes.models.turbine_types.WsRho2PCtFromTwo.calculate", "foxes.models.turbine_types.WsRho2PCtFromTwo.finalize", "foxes.models.turbine_types.WsRho2PCtFromTwo.load_data", "foxes.models.turbine_types.WsRho2PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsTI2PCtFromTwo", "foxes.models.turbine_types.WsTI2PCtFromTwo.__init__", "foxes.models.turbine_types.WsTI2PCtFromTwo.calculate", "foxes.models.turbine_types.WsTI2PCtFromTwo.finalize", "foxes.models.turbine_types.WsTI2PCtFromTwo.load_data", "foxes.models.turbine_types.WsTI2PCtFromTwo.output_farm_vars", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.__init__", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogStableWsProfile", "foxes.models.vertical_profiles.ABLLogStableWsProfile.__init__", "foxes.models.vertical_profiles.ABLLogStableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogStableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.__init__", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogWsProfile", "foxes.models.vertical_profiles.ABLLogWsProfile.__init__", "foxes.models.vertical_profiles.ABLLogWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogWsProfile.input_vars", "foxes.models.vertical_profiles.DataProfile", "foxes.models.vertical_profiles.DataProfile.__init__", "foxes.models.vertical_profiles.DataProfile.calculate", "foxes.models.vertical_profiles.DataProfile.input_vars", "foxes.models.vertical_profiles.ShearedProfile", "foxes.models.vertical_profiles.ShearedProfile.calculate", "foxes.models.vertical_profiles.ShearedProfile.input_vars", "foxes.models.vertical_profiles.UniformProfile", "foxes.models.vertical_profiles.UniformProfile.__init__", "foxes.models.vertical_profiles.UniformProfile.calculate", "foxes.models.vertical_profiles.UniformProfile.input_vars", "foxes.models.wake_frames.FarmOrder", "foxes.models.wake_frames.FarmOrder.__init__", "foxes.models.wake_frames.FarmOrder.calc_order", "foxes.models.wake_frames.FarmOrder.get_centreline_points", "foxes.models.wake_frames.FarmOrder.get_wake_coos", "foxes.models.wake_frames.FarmOrder.sub_models", "foxes.models.wake_frames.RotorWD", "foxes.models.wake_frames.RotorWD.__init__", "foxes.models.wake_frames.RotorWD.calc_order", "foxes.models.wake_frames.RotorWD.get_centreline_points", "foxes.models.wake_frames.RotorWD.get_wake_coos", "foxes.models.wake_frames.SeqDynamicWakes", "foxes.models.wake_frames.SeqDynamicWakes.__init__", "foxes.models.wake_frames.SeqDynamicWakes.calc_order", "foxes.models.wake_frames.SeqDynamicWakes.get_centreline_points", "foxes.models.wake_frames.SeqDynamicWakes.get_wake_coos", "foxes.models.wake_frames.SeqDynamicWakes.get_wake_modelling_data", "foxes.models.wake_frames.SeqDynamicWakes.initialize", "foxes.models.wake_frames.Streamlines", "foxes.models.wake_frames.Streamlines.__init__", "foxes.models.wake_frames.Streamlines.__repr__", "foxes.models.wake_frames.Streamlines.calc_order", "foxes.models.wake_frames.Streamlines.get_centreline_points", "foxes.models.wake_frames.Streamlines.get_wake_coos", "foxes.models.wake_frames.Streamlines.initialize", "foxes.models.wake_frames.Timelines", "foxes.models.wake_frames.Timelines.__init__", "foxes.models.wake_frames.Timelines.calc_order", "foxes.models.wake_frames.Timelines.get_centreline_points", "foxes.models.wake_frames.Timelines.get_wake_coos", "foxes.models.wake_frames.Timelines.initialize", "foxes.models.wake_frames.YawedWakes", "foxes.models.wake_frames.YawedWakes.__init__", "foxes.models.wake_frames.YawedWakes.calc_order", "foxes.models.wake_frames.YawedWakes.get_centreline_points", "foxes.models.wake_frames.YawedWakes.get_wake_coos", "foxes.models.wake_frames.YawedWakes.sub_models", "foxes.models.wake_models.AxisymmetricWakeModel", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel", "foxes.models.wake_models.DistSlicedWakeModel.__init__", "foxes.models.wake_models.DistSlicedWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel.contribute_to_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.finalize_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.initialize", "foxes.models.wake_models.DistSlicedWakeModel.sub_models", "foxes.models.wake_models.GaussianWakeModel", "foxes.models.wake_models.GaussianWakeModel.calc_amplitude_sigma_spsel", "foxes.models.wake_models.GaussianWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.TopHatWakeModel", "foxes.models.wake_models.TopHatWakeModel.__init__", "foxes.models.wake_models.TopHatWakeModel.calc_centreline_wake_deltas", "foxes.models.wake_models.TopHatWakeModel.calc_wake_radius", "foxes.models.wake_models.TopHatWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.induction.RankineHalfBody", "foxes.models.wake_models.induction.RankineHalfBody.__init__", "foxes.models.wake_models.induction.RankineHalfBody.contribute_to_wake_deltas", "foxes.models.wake_models.induction.RankineHalfBody.finalize_wake_deltas", "foxes.models.wake_models.induction.RankineHalfBody.init_wake_deltas", "foxes.models.wake_models.ti.CrespoHernandezTIWake", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__init__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__repr__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_wake_radius", "foxes.models.wake_models.ti.CrespoHernandezTIWake.init_wake_deltas", "foxes.models.wake_models.ti.IECTIWake", "foxes.models.wake_models.ti.IECTIWake.__init__", "foxes.models.wake_models.ti.IECTIWake.__repr__", "foxes.models.wake_models.ti.IECTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.IECTIWake.calc_wake_radius", "foxes.models.wake_models.ti.IECTIWake.init_wake_deltas", "foxes.models.wake_models.wind.Bastankhah2014", "foxes.models.wake_models.wind.Bastankhah2014.__init__", "foxes.models.wake_models.wind.Bastankhah2014.__repr__", "foxes.models.wake_models.wind.Bastankhah2014.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.Bastankhah2014.init_wake_deltas", "foxes.models.wake_models.wind.Bastankhah2016", "foxes.models.wake_models.wind.Bastankhah2016.__init__", "foxes.models.wake_models.wind.Bastankhah2016.__repr__", "foxes.models.wake_models.wind.Bastankhah2016.calc_wakes_spsel_x_yz", "foxes.models.wake_models.wind.Bastankhah2016.init_wake_deltas", "foxes.models.wake_models.wind.Bastankhah2016Model", "foxes.models.wake_models.wind.Bastankhah2016Model.AMPL_FAR", "foxes.models.wake_models.wind.Bastankhah2016Model.AMPL_NEAR", "foxes.models.wake_models.wind.Bastankhah2016Model.CHECK", "foxes.models.wake_models.wind.Bastankhah2016Model.DELTA_FAR", "foxes.models.wake_models.wind.Bastankhah2016Model.DELTA_NEAR", "foxes.models.wake_models.wind.Bastankhah2016Model.MDATA_KEY", "foxes.models.wake_models.wind.Bastankhah2016Model.NEAR", "foxes.models.wake_models.wind.Bastankhah2016Model.PARS", "foxes.models.wake_models.wind.Bastankhah2016Model.R_PC", "foxes.models.wake_models.wind.Bastankhah2016Model.R_PC_S", "foxes.models.wake_models.wind.Bastankhah2016Model.SIGMA_Y_FAR", "foxes.models.wake_models.wind.Bastankhah2016Model.SIGMA_Z_FAR", "foxes.models.wake_models.wind.Bastankhah2016Model.SP_SEL", "foxes.models.wake_models.wind.Bastankhah2016Model.X0", "foxes.models.wake_models.wind.Bastankhah2016Model.__init__", "foxes.models.wake_models.wind.Bastankhah2016Model.calc_data", "foxes.models.wake_models.wind.Bastankhah2016Model.clean", "foxes.models.wake_models.wind.Bastankhah2016Model.get_data", "foxes.models.wake_models.wind.Bastankhah2016Model.has_data", "foxes.models.wake_models.wind.Bastankhah2016Model.pars", "foxes.models.wake_models.wind.JensenWake", "foxes.models.wake_models.wind.JensenWake.__init__", "foxes.models.wake_models.wind.JensenWake.__repr__", "foxes.models.wake_models.wind.JensenWake.calc_centreline_wake_deltas", "foxes.models.wake_models.wind.JensenWake.calc_wake_radius", "foxes.models.wake_models.wind.JensenWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWake", "foxes.models.wake_models.wind.TurbOParkWake.__init__", "foxes.models.wake_models.wind.TurbOParkWake.__repr__", "foxes.models.wake_models.wind.TurbOParkWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWakeIX", "foxes.models.wake_models.wind.TurbOParkWakeIX.__init__", "foxes.models.wake_models.wind.TurbOParkWakeIX.__repr__", "foxes.models.wake_models.wind.TurbOParkWakeIX.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWakeIX.finalize", "foxes.models.wake_models.wind.TurbOParkWakeIX.init_wake_deltas", "foxes.models.wake_superpositions.TILinear", "foxes.models.wake_superpositions.TILinear.__init__", "foxes.models.wake_superpositions.TILinear.calc_final_wake_delta", "foxes.models.wake_superpositions.TILinear.calc_wakes_plus_wake", "foxes.models.wake_superpositions.TIMax", "foxes.models.wake_superpositions.TIMax.__init__", "foxes.models.wake_superpositions.TIMax.calc_final_wake_delta", "foxes.models.wake_superpositions.TIMax.calc_wakes_plus_wake", "foxes.models.wake_superpositions.TIPow", "foxes.models.wake_superpositions.TIPow.__init__", "foxes.models.wake_superpositions.TIPow.calc_final_wake_delta", "foxes.models.wake_superpositions.TIPow.calc_wakes_plus_wake", "foxes.models.wake_superpositions.TIQuadratic", "foxes.models.wake_superpositions.TIQuadratic.__init__", "foxes.models.wake_superpositions.TIQuadratic.calc_final_wake_delta", "foxes.models.wake_superpositions.TIQuadratic.calc_wakes_plus_wake", "foxes.models.wake_superpositions.WSLinear", "foxes.models.wake_superpositions.WSLinear.__init__", "foxes.models.wake_superpositions.WSLinear.calc_final_wake_delta", "foxes.models.wake_superpositions.WSLinear.calc_wakes_plus_wake", "foxes.models.wake_superpositions.WSLinear.input_farm_vars", "foxes.models.wake_superpositions.WSMax", "foxes.models.wake_superpositions.WSMax.__init__", "foxes.models.wake_superpositions.WSMax.calc_final_wake_delta", "foxes.models.wake_superpositions.WSMax.calc_wakes_plus_wake", "foxes.models.wake_superpositions.WSMax.input_farm_vars", "foxes.models.wake_superpositions.WSPow", "foxes.models.wake_superpositions.WSPow.__init__", "foxes.models.wake_superpositions.WSPow.calc_final_wake_delta", "foxes.models.wake_superpositions.WSPow.calc_wakes_plus_wake", "foxes.models.wake_superpositions.WSPow.input_farm_vars", "foxes.models.wake_superpositions.WSProduct", "foxes.models.wake_superpositions.WSProduct.__init__", "foxes.models.wake_superpositions.WSProduct.calc_final_wake_delta", "foxes.models.wake_superpositions.WSProduct.calc_wakes_plus_wake", "foxes.models.wake_superpositions.WSProduct.input_farm_vars", "foxes.models.wake_superpositions.WSQuadratic", "foxes.models.wake_superpositions.WSQuadratic.__init__", "foxes.models.wake_superpositions.WSQuadratic.calc_final_wake_delta", "foxes.models.wake_superpositions.WSQuadratic.calc_wakes_plus_wake", "foxes.models.wake_superpositions.WSQuadratic.input_farm_vars", "foxes.output.Animator", "foxes.output.Animator.__init__", "foxes.output.Animator.add_generator", "foxes.output.Animator.animate", "foxes.output.Animator.generators", "foxes.output.FarmLayoutOutput", "foxes.output.FarmLayoutOutput.__init__", "foxes.output.FarmLayoutOutput.get_figure", "foxes.output.FarmLayoutOutput.get_layout_data", "foxes.output.FarmLayoutOutput.get_layout_dict", "foxes.output.FarmLayoutOutput.write_csv", "foxes.output.FarmLayoutOutput.write_json", "foxes.output.FarmLayoutOutput.write_plot", "foxes.output.FarmLayoutOutput.write_xyh", "foxes.output.FarmResultsEval", "foxes.output.FarmResultsEval.__init__", "foxes.output.FarmResultsEval.add_capacity", "foxes.output.FarmResultsEval.add_efficiency", "foxes.output.FarmResultsEval.calc_farm_efficiency", "foxes.output.FarmResultsEval.calc_farm_mean", "foxes.output.FarmResultsEval.calc_farm_sum", "foxes.output.FarmResultsEval.calc_farm_yield", "foxes.output.FarmResultsEval.calc_mean_farm_power", "foxes.output.FarmResultsEval.calc_states_mean", "foxes.output.FarmResultsEval.calc_states_std", "foxes.output.FarmResultsEval.calc_states_sum", "foxes.output.FarmResultsEval.calc_turbine_mean", "foxes.output.FarmResultsEval.calc_turbine_sum", "foxes.output.FarmResultsEval.calc_turbine_yield", "foxes.output.FarmResultsEval.gen_stdata", "foxes.output.FarmResultsEval.reduce_all", "foxes.output.FarmResultsEval.reduce_states", "foxes.output.FarmResultsEval.reduce_turbines", "foxes.output.FarmResultsEval.weinsum", "foxes.output.FlowPlots2D", "foxes.output.FlowPlots2D.gen_states_fig_xy", "foxes.output.FlowPlots2D.gen_states_fig_xz", "foxes.output.FlowPlots2D.gen_states_fig_yz", "foxes.output.FlowPlots2D.get_mean_fig_xy", "foxes.output.FlowPlots2D.get_mean_fig_xz", "foxes.output.FlowPlots2D.get_mean_fig_yz", "foxes.output.Output", "foxes.output.Output.__init__", "foxes.output.Output.get_fpath", "foxes.output.Output.new", "foxes.output.Output.print_models", "foxes.output.Output.write", "foxes.output.PointCalculator", "foxes.output.PointCalculator.__init__", "foxes.output.PointCalculator.calculate", "foxes.output.ResultsWriter", "foxes.output.ResultsWriter.__init__", "foxes.output.ResultsWriter.write_csv", "foxes.output.ResultsWriter.write_nc", "foxes.output.RosePlotOutput", "foxes.output.RosePlotOutput.__init__", "foxes.output.RosePlotOutput.get_data", "foxes.output.RosePlotOutput.get_data_info", "foxes.output.RosePlotOutput.get_figure", "foxes.output.RosePlotOutput.write_figure", "foxes.output.SeqFlowAnimationPlugin", "foxes.output.SeqFlowAnimationPlugin.__init__", "foxes.output.SeqFlowAnimationPlugin.gen_images", "foxes.output.SeqFlowAnimationPlugin.initialize", "foxes.output.SeqFlowAnimationPlugin.update", "foxes.output.SliceData", "foxes.output.SliceData.__init__", "foxes.output.SliceData.get_mean_data_xy", "foxes.output.SliceData.get_mean_data_xz", "foxes.output.SliceData.get_mean_data_yz", "foxes.output.SliceData.get_states_data_xy", "foxes.output.SliceData.get_states_data_xz", "foxes.output.SliceData.get_states_data_yz", "foxes.output.StateTurbineMap", "foxes.output.StateTurbineMap.__init__", "foxes.output.StateTurbineMap.plot_map", "foxes.output.StatesRosePlotOutput", "foxes.output.StatesRosePlotOutput.__init__", "foxes.output.TurbineTypeCurves", "foxes.output.TurbineTypeCurves.__init__", "foxes.output.TurbineTypeCurves.plot_curves", "foxes.output.flow_plots_2d.get_fig", "foxes.utils.DataBook", "foxes.utils.DataBook.__init__", "foxes.utils.DataBook.add_data_package", "foxes.utils.DataBook.add_data_package_file", "foxes.utils.DataBook.add_file", "foxes.utils.DataBook.add_files", "foxes.utils.DataBook.get_file_path", "foxes.utils.DataBook.toc", "foxes.utils.PandasFileHelper", "foxes.utils.PandasFileHelper.DATA_FILE_FORMATS", "foxes.utils.PandasFileHelper.DEFAULT_FORMAT_DICT", "foxes.utils.PandasFileHelper.DEFAULT_READING_PARAMETERS", "foxes.utils.PandasFileHelper.DEFAULT_WRITING_PARAMETERS", "foxes.utils.PandasFileHelper.read_file", "foxes.utils.PandasFileHelper.write_file", "foxes.utils.abl.neutral.calc_ws", "foxes.utils.abl.neutral.logz", "foxes.utils.abl.neutral.ustar", "foxes.utils.abl.sheared.calc_ws", "foxes.utils.abl.stable.calc_ws", "foxes.utils.abl.stable.lgz", "foxes.utils.abl.stable.logz", "foxes.utils.abl.stable.psi", "foxes.utils.abl.stable.ustar", "foxes.utils.abl.unstable.calc_ws", "foxes.utils.abl.unstable.logz", "foxes.utils.abl.unstable.psi", "foxes.utils.abl.unstable.ustar", "foxes.utils.all_subclasses", "foxes.utils.cubic_roots", "foxes.utils.delta_wd", "foxes.utils.exec_python", "foxes.utils.geom2d.AreaGeometry", "foxes.utils.geom2d.AreaGeometry.add_to_figure", "foxes.utils.geom2d.AreaGeometry.inverse", "foxes.utils.geom2d.AreaGeometry.p_max", "foxes.utils.geom2d.AreaGeometry.p_min", "foxes.utils.geom2d.AreaGeometry.points_distance", "foxes.utils.geom2d.AreaGeometry.points_inside", "foxes.utils.geom2d.AreaIntersection", "foxes.utils.geom2d.AreaIntersection.__new__", "foxes.utils.geom2d.AreaUnion", "foxes.utils.geom2d.AreaUnion.__init__", "foxes.utils.geom2d.AreaUnion.add_to_figure", "foxes.utils.geom2d.AreaUnion.inverse", "foxes.utils.geom2d.AreaUnion.p_max", "foxes.utils.geom2d.AreaUnion.p_min", "foxes.utils.geom2d.AreaUnion.points_distance", "foxes.utils.geom2d.AreaUnion.points_inside", "foxes.utils.geom2d.Circle", "foxes.utils.geom2d.Circle.__init__", "foxes.utils.geom2d.Circle.add_to_figure", "foxes.utils.geom2d.Circle.p_max", "foxes.utils.geom2d.Circle.p_min", "foxes.utils.geom2d.Circle.points_distance", "foxes.utils.geom2d.Circle.points_inside", "foxes.utils.geom2d.ClosedPolygon", "foxes.utils.geom2d.ClosedPolygon.__init__", "foxes.utils.geom2d.ClosedPolygon.add_to_figure", "foxes.utils.geom2d.ClosedPolygon.p_max", "foxes.utils.geom2d.ClosedPolygon.p_min", "foxes.utils.geom2d.ClosedPolygon.points_distance", "foxes.utils.geom2d.ClosedPolygon.points_inside", "foxes.utils.geom2d.HalfPlane", "foxes.utils.geom2d.HalfPlane.__init__", "foxes.utils.geom2d.HalfPlane.add_to_figure", "foxes.utils.geom2d.HalfPlane.inverse", "foxes.utils.geom2d.HalfPlane.p_max", "foxes.utils.geom2d.HalfPlane.p_min", "foxes.utils.geom2d.HalfPlane.points_distance", "foxes.utils.geom2d.HalfPlane.points_inside", "foxes.utils.geom2d.InvertedAreaGeometry", "foxes.utils.geom2d.InvertedAreaGeometry.__init__", "foxes.utils.geom2d.InvertedAreaGeometry.add_to_figure", "foxes.utils.geom2d.InvertedAreaGeometry.inverse", "foxes.utils.geom2d.InvertedAreaGeometry.p_max", "foxes.utils.geom2d.InvertedAreaGeometry.p_min", "foxes.utils.geom2d.InvertedAreaGeometry.points_distance", "foxes.utils.geom2d.InvertedAreaGeometry.points_inside", "foxes.utils.import_module", "foxes.opt.constraints.AreaGeometryConstraint", "foxes.opt.constraints.AreaGeometryConstraint.__init__", "foxes.opt.constraints.AreaGeometryConstraint.__str__", "foxes.opt.constraints.AreaGeometryConstraint.ana_deriv", "foxes.opt.constraints.AreaGeometryConstraint.calc_individual", "foxes.opt.constraints.AreaGeometryConstraint.calc_population", "foxes.opt.constraints.AreaGeometryConstraint.component_names", "foxes.opt.constraints.AreaGeometryConstraint.finalize", "foxes.opt.constraints.AreaGeometryConstraint.finalize_individual", "foxes.opt.constraints.AreaGeometryConstraint.finalize_population", "foxes.opt.constraints.AreaGeometryConstraint.initialize", "foxes.opt.constraints.AreaGeometryConstraint.initialized", "foxes.opt.constraints.AreaGeometryConstraint.n_components", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.var_names_float", "foxes.opt.constraints.AreaGeometryConstraint.var_names_int", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_float", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_int", "foxes.opt.constraints.FarmBoundaryConstraint", "foxes.opt.constraints.FarmBoundaryConstraint.__init__", "foxes.opt.constraints.MinDistConstraint", "foxes.opt.constraints.MinDistConstraint.__init__", "foxes.opt.constraints.MinDistConstraint.calc_individual", "foxes.opt.constraints.MinDistConstraint.calc_population", "foxes.opt.constraints.MinDistConstraint.initialize", "foxes.opt.constraints.MinDistConstraint.n_components", "foxes.opt.constraints.MinDistConstraint.vardeps_float", "foxes.opt.core.FarmConstraint", "foxes.opt.core.FarmConstraint.__init__", "foxes.opt.core.FarmConstraint.add_to_layout_figure", "foxes.opt.core.FarmConstraint.calc_individual", "foxes.opt.core.FarmConstraint.calc_population", "foxes.opt.core.FarmConstraint.farm", "foxes.opt.core.FarmConstraint.n_components", "foxes.opt.core.FarmConstraint.n_sel_turbines", "foxes.opt.core.FarmConstraint.print_models", "foxes.opt.core.FarmConstraint.sel_turbines", "foxes.opt.core.FarmConstraint.vardeps_float", "foxes.opt.core.FarmObjective", "foxes.opt.core.FarmObjective.__init__", "foxes.opt.core.FarmObjective.add_to_layout_figure", "foxes.opt.core.FarmObjective.farm", "foxes.opt.core.FarmObjective.n_sel_turbines", "foxes.opt.core.FarmObjective.print_models", "foxes.opt.core.FarmObjective.sel_turbines", "foxes.opt.core.FarmOptProblem", "foxes.opt.core.FarmOptProblem.INT_INF", "foxes.opt.core.FarmOptProblem.__init__", "foxes.opt.core.FarmOptProblem.add_constraint", "foxes.opt.core.FarmOptProblem.add_objective", "foxes.opt.core.FarmOptProblem.add_to_layout_figure", "foxes.opt.core.FarmOptProblem.all_turbines", "foxes.opt.core.FarmOptProblem.apply_individual", "foxes.opt.core.FarmOptProblem.apply_population", "foxes.opt.core.FarmOptProblem.calc_gradients", "foxes.opt.core.FarmOptProblem.check_constraints_individual", "foxes.opt.core.FarmOptProblem.check_constraints_population", "foxes.opt.core.FarmOptProblem.constraints_tol", "foxes.opt.core.FarmOptProblem.counter", "foxes.opt.core.FarmOptProblem.evaluate_individual", "foxes.opt.core.FarmOptProblem.evaluate_population", "foxes.opt.core.FarmOptProblem.farm", "foxes.opt.core.FarmOptProblem.finalize_individual", "foxes.opt.core.FarmOptProblem.finalize_population", "foxes.opt.core.FarmOptProblem.get_gradients", "foxes.opt.core.FarmOptProblem.initial_values_float", "foxes.opt.core.FarmOptProblem.initial_values_int", "foxes.opt.core.FarmOptProblem.initialize", "foxes.opt.core.FarmOptProblem.max_values_constraints", "foxes.opt.core.FarmOptProblem.max_values_float", "foxes.opt.core.FarmOptProblem.max_values_int", "foxes.opt.core.FarmOptProblem.maximize_objs", "foxes.opt.core.FarmOptProblem.min_values_constraints", "foxes.opt.core.FarmOptProblem.min_values_float", "foxes.opt.core.FarmOptProblem.min_values_int", "foxes.opt.core.FarmOptProblem.n_constraints", "foxes.opt.core.FarmOptProblem.n_objectives", "foxes.opt.core.FarmOptProblem.n_sel_turbines", "foxes.opt.core.FarmOptProblem.n_vars_float", "foxes.opt.core.FarmOptProblem.n_vars_int", "foxes.opt.core.FarmOptProblem.parse_tvar", "foxes.opt.core.FarmOptProblem.sel_turbines", "foxes.opt.core.FarmOptProblem.tvar", "foxes.opt.core.FarmOptProblem.update_problem_individual", "foxes.opt.core.FarmOptProblem.update_problem_population", "foxes.opt.core.FarmOptProblem.var_names_float", "foxes.opt.core.FarmOptProblem.var_names_int", "foxes.opt.core.FarmVarsProblem", "foxes.opt.core.FarmVarsProblem.initialize", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_individual", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_population", "foxes.opt.core.FarmVarsProblem.update_problem_individual", "foxes.opt.core.FarmVarsProblem.update_problem_population", "foxes.opt.core.PopStates", "foxes.opt.core.PopStates.__init__", "foxes.opt.core.PopStates.calculate", "foxes.opt.core.PopStates.initialize", "foxes.opt.core.PopStates.load_data", "foxes.opt.core.PopStates.output_point_vars", "foxes.opt.core.PopStates.size", "foxes.opt.core.PopStates.weights", "foxes.opt.objectives.FarmVarObjective", "foxes.opt.objectives.FarmVarObjective.__init__", "foxes.opt.objectives.FarmVarObjective.calc_individual", "foxes.opt.objectives.FarmVarObjective.calc_population", "foxes.opt.objectives.FarmVarObjective.finalize_individual", "foxes.opt.objectives.FarmVarObjective.initialize", "foxes.opt.objectives.FarmVarObjective.maximize", "foxes.opt.objectives.FarmVarObjective.n_components", "foxes.opt.objectives.FarmVarObjective.vardeps_float", "foxes.opt.objectives.MaxFarmPower", "foxes.opt.objectives.MaxFarmPower.__init__", "foxes.opt.objectives.MaxNTurbines", "foxes.opt.objectives.MaxNTurbines.__init__", "foxes.opt.objectives.MaxNTurbines.calc_individual", "foxes.opt.objectives.MaxNTurbines.calc_population", "foxes.opt.objectives.MaxNTurbines.maximize", "foxes.opt.objectives.MaxNTurbines.n_components", "foxes.opt.objectives.MinimalMaxTI", "foxes.opt.objectives.MinimalMaxTI.__init__", "foxes.opt.problems.OptFarmVars", "foxes.opt.problems.OptFarmVars.__init__", "foxes.opt.problems.OptFarmVars.add_var", "foxes.opt.problems.OptFarmVars.initial_values_float", "foxes.opt.problems.OptFarmVars.initial_values_int", "foxes.opt.problems.OptFarmVars.initialize", "foxes.opt.problems.OptFarmVars.max_values_float", "foxes.opt.problems.OptFarmVars.max_values_int", "foxes.opt.problems.OptFarmVars.min_values_float", "foxes.opt.problems.OptFarmVars.min_values_int", "foxes.opt.problems.OptFarmVars.opt2farm_vars_individual", "foxes.opt.problems.OptFarmVars.opt2farm_vars_population", "foxes.opt.problems.OptFarmVars.var_names_float", "foxes.opt.problems.OptFarmVars.var_names_int", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_population", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.get_bounds", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Valid", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.cdist", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.Objective", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.cdist", "foxes.opt.problems.layout.geom_layouts.GeomLayout", "foxes.opt.problems.layout.geom_layouts.GeomLayout.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayout.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayout.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.var_names_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_int", "foxes.opt.problems.layout.FarmLayoutOptProblem", "foxes.opt.problems.layout.FarmLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.initialize", "foxes.opt.problems.layout.FarmLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.FarmLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_int", "foxes.opt.problems.layout.RegularLayoutOptProblem", "foxes.opt.problems.layout.RegularLayoutOptProblem.ANGLE", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegularLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegularLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegularLayoutOptProblem.var_names_float", "foxes.utils.read_shp", "foxes.utils.read_shp_polygons", "foxes.utils.runners.DaskRunner", "foxes.utils.runners.DaskRunner.__init__", "foxes.utils.runners.DaskRunner.finalize", "foxes.utils.runners.DaskRunner.initialize", "foxes.utils.runners.DaskRunner.is_distributed", "foxes.utils.runners.DaskRunner.print", "foxes.utils.runners.DaskRunner.run", "foxes.utils.runners.DefaultRunner", "foxes.utils.runners.DefaultRunner.run", "foxes.utils.runners.Runner", "foxes.utils.runners.Runner.__init__", "foxes.utils.runners.Runner.finalize", "foxes.utils.runners.Runner.initialize", "foxes.utils.runners.Runner.initialized", "foxes.utils.runners.Runner.run", "foxes.utils.show_plotly_fig", "foxes.utils.shp2csv", "foxes.utils.shp2geom2d", "foxes.utils.two_circles.area", "foxes.utils.two_circles.calc_area", "foxes.utils.uv2wd", "foxes.utils.wd2uv", "foxes.utils.wd2wdvec", "foxes.utils.wdvec2wd", "foxes.utils.write_nc", "API", "foxes.algorithms", "Downwind algorithm", "Iterative algorithm", "Sequential algorithm", "foxes.constants", "foxes.core", "foxes", "foxes.input", "foxes.models", "foxes.opt", "foxes.opt.problems", "foxes.opt.problems.layout.geom_layouts", "foxes.output", "foxes.utils", "foxes.utils.abl.neutral", "foxes.variables", "foxes.models.wake_models", "Citation", "Examples", "History", "Welcome to FOXES", "Installation", "Blockage modelling", "Static data", "Heterogeneous flow", "Layout optimization", "The model book", "Multi-height wind data", "Overview - how to setup foxes", "Power mask", "Wind sector management", "Dynamic wakes 2", "Single row of turbines", "Dynamic wakes 1", "Timeseries data", "Wind rose data", "Yawed rotor wakes"], "terms": {"class": [0, 9, 11, 16, 35, 40, 46, 53, 57, 62, 66, 71, 75, 77, 83, 87, 92, 102, 112, 117, 125, 128, 137, 147, 152, 159, 160, 173, 178, 181, 185, 191, 198, 201, 207, 211, 213, 214, 216, 217, 220, 221, 227, 228, 232, 233, 236, 241, 498, 506, 517, 519, 526, 534, 547, 551, 552, 558, 561, 565, 567, 568, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 696, 697, 698, 699, 702, 703, 708, 709, 714, 715, 720, 721, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 914, 919, 928, 948, 955, 958, 961, 962, 964, 965, 968, 974, 979, 980, 987, 990, 992, 996, 1004, 1024, 1027, 1028, 1035, 1037, 1045, 1052, 1059, 1067, 1076, 1097, 1099, 1106, 1117, 1124, 1133, 1143, 1166, 1167, 1172, 1180, 1189, 1191, 1197, 1199, 1204, 1213, 1214, 1218, 1219, 1223, 1224, 1228, 1229, 1234, 1239, 1244, 1245, 1250, 1251, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1341, 1347, 1352, 1363, 1372, 1380, 1387, 1389, 1405, 1407, 1408, 1409, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1422, 1425, 1429, 1432, 1437, 1439, 1442], "fox": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1407, 1408, 1409, 1423, 1424, 1425, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "algorithm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 124, 126, 127, 131, 133, 136, 139, 140, 141, 142, 143, 144, 149, 150, 151, 155, 157, 163, 164, 165, 166, 167, 169, 174, 175, 176, 177, 179, 182, 184, 188, 189, 193, 195, 196, 199, 203, 204, 206, 212, 222, 223, 224, 225, 226, 229, 230, 231, 234, 235, 500, 502, 503, 505, 509, 510, 512, 513, 516, 521, 522, 523, 525, 528, 529, 530, 533, 537, 538, 540, 541, 542, 546, 550, 555, 556, 564, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 580, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 608, 609, 610, 612, 613, 616, 617, 620, 621, 628, 635, 640, 641, 644, 645, 646, 649, 650, 651, 655, 656, 657, 661, 662, 663, 667, 668, 669, 673, 674, 677, 678, 679, 682, 683, 685, 686, 688, 689, 693, 694, 700, 701, 704, 705, 706, 707, 710, 711, 712, 713, 716, 717, 718, 719, 722, 723, 724, 725, 753, 755, 756, 757, 761, 762, 763, 764, 766, 767, 768, 769, 770, 774, 775, 776, 777, 780, 781, 782, 783, 786, 787, 788, 791, 792, 795, 796, 797, 798, 801, 802, 805, 806, 807, 810, 811, 812, 816, 817, 818, 822, 823, 824, 828, 829, 833, 834, 851, 859, 860, 861, 865, 866, 870, 871, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 893, 896, 897, 898, 901, 902, 903, 906, 907, 908, 911, 912, 913, 930, 942, 961, 962, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 1124, 1126, 1174, 1175, 1176, 1177, 1179, 1348, 1369, 1405, 1411, 1414, 1418, 1425, 1428, 1430, 1431, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "downwind": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 1406, 1408, 1409, 1425, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "core": [0, 1, 2, 4, 6, 12, 16, 17, 21, 26, 27, 30, 31, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 64, 69, 73, 77, 79, 80, 81, 82, 83, 85, 86, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 495, 496, 497, 498, 500, 502, 503, 505, 506, 509, 510, 512, 513, 516, 519, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 534, 536, 537, 538, 540, 541, 542, 546, 550, 551, 552, 553, 555, 556, 557, 561, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 624, 628, 631, 635, 638, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 667, 668, 669, 671, 673, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 699, 700, 701, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 730, 734, 738, 742, 746, 749, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 798, 799, 801, 802, 805, 806, 807, 808, 810, 811, 812, 816, 817, 818, 822, 823, 824, 828, 829, 833, 834, 835, 851, 853, 854, 859, 860, 861, 865, 866, 870, 871, 872, 873, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 930, 942, 990, 1076, 1099, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1191, 1199, 1239, 1290, 1294, 1304, 1314, 1324, 1338, 1347, 1348, 1363, 1369, 1405, 1407, 1408, 1409, 1412, 1413, 1414, 1416, 1417, 1422, 1425], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 433, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1088, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1114, 1117, 1118, 1119, 1122, 1124, 1126, 1129, 1131, 1132, 1146, 1159, 1161, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1425, 1426, 1427, 1442], "The": [0, 1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 246, 324, 328, 332, 336, 337, 338, 344, 353, 370, 371, 421, 422, 439, 442, 443, 444, 446, 447, 451, 452, 453, 454, 455, 456, 457, 460, 461, 463, 467, 468, 469, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 555, 556, 558, 560, 561, 564, 565, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 580, 582, 583, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 733, 734, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 850, 851, 853, 854, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1290, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1386, 1388, 1394, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1407, 1410, 1412, 1414, 1416, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1433, 1434, 1435, 1436, 1438, 1439, 1440, 1441, 1442], "turbin": [0, 1, 3, 4, 9, 11, 16, 20, 21, 35, 46, 48, 49, 102, 116, 117, 123, 137, 138, 139, 140, 145, 159, 166, 173, 175, 176, 193, 195, 207, 208, 209, 210, 211, 212, 213, 214, 216, 221, 222, 223, 224, 225, 226, 229, 235, 236, 238, 239, 240, 243, 244, 433, 434, 435, 436, 437, 438, 456, 457, 469, 480, 486, 487, 492, 493, 494, 495, 496, 497, 551, 552, 553, 555, 561, 563, 567, 569, 570, 574, 577, 578, 582, 585, 586, 590, 592, 593, 595, 596, 600, 602, 603, 620, 638, 639, 640, 642, 644, 647, 649, 653, 655, 659, 660, 661, 664, 667, 671, 673, 675, 677, 680, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 700, 702, 704, 708, 710, 714, 716, 720, 722, 753, 755, 756, 757, 759, 761, 762, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 778, 780, 781, 782, 784, 786, 787, 788, 791, 792, 795, 796, 801, 802, 805, 806, 807, 808, 810, 813, 816, 817, 822, 823, 825, 828, 830, 833, 835, 851, 854, 859, 860, 865, 870, 876, 880, 884, 888, 892, 897, 902, 907, 912, 921, 926, 928, 930, 933, 934, 935, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 963, 966, 967, 968, 970, 972, 973, 981, 982, 983, 987, 990, 992, 994, 1076, 1077, 1097, 1099, 1100, 1106, 1107, 1113, 1115, 1117, 1118, 1121, 1123, 1124, 1126, 1130, 1156, 1159, 1160, 1161, 1166, 1180, 1181, 1189, 1190, 1191, 1197, 1198, 1199, 1201, 1214, 1218, 1219, 1223, 1224, 1228, 1229, 1234, 1245, 1256, 1275, 1276, 1281, 1287, 1294, 1295, 1304, 1305, 1314, 1315, 1338, 1347, 1363, 1369, 1406, 1407, 1408, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1421, 1424, 1425, 1426, 1428, 1429, 1430, 1431, 1433, 1434, 1435, 1436, 1437, 1439, 1440, 1441, 1442], "ar": [0, 35, 38, 40, 44, 46, 49, 51, 53, 56, 57, 61, 77, 81, 83, 86, 87, 92, 98, 102, 125, 128, 133, 137, 144, 147, 150, 152, 157, 159, 181, 183, 185, 189, 191, 192, 194, 195, 199, 201, 204, 211, 214, 221, 229, 230, 231, 233, 338, 492, 498, 503, 506, 513, 517, 519, 523, 526, 530, 534, 542, 547, 551, 552, 556, 567, 568, 574, 575, 582, 583, 591, 594, 601, 606, 610, 611, 613, 614, 617, 618, 619, 620, 624, 625, 627, 631, 632, 634, 638, 639, 641, 642, 646, 647, 651, 653, 654, 657, 659, 660, 663, 664, 669, 671, 674, 675, 676, 679, 680, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 701, 702, 707, 708, 713, 714, 719, 720, 725, 796, 797, 808, 810, 811, 812, 818, 824, 829, 834, 861, 866, 872, 889, 893, 894, 898, 899, 903, 904, 908, 909, 913, 926, 944, 945, 946, 960, 966, 967, 1028, 1034, 1035, 1037, 1044, 1045, 1051, 1052, 1058, 1059, 1066, 1067, 1074, 1076, 1097, 1099, 1106, 1124, 1130, 1133, 1134, 1135, 1143, 1166, 1172, 1177, 1199, 1201, 1213, 1218, 1223, 1228, 1234, 1239, 1241, 1242, 1243, 1244, 1250, 1255, 1293, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1398, 1409, 1413, 1414, 1416, 1417, 1419, 1422, 1424, 1425, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1438, 1439, 1440, 1441, 1442], "evalu": [0, 16, 35, 46, 47, 62, 65, 66, 70, 71, 74, 75, 166, 175, 176, 179, 191, 195, 218, 221, 223, 225, 226, 229, 230, 231, 234, 235, 569, 570, 572, 574, 575, 577, 578, 580, 582, 585, 586, 588, 592, 595, 596, 598, 602, 603, 605, 618, 620, 624, 631, 728, 732, 736, 740, 744, 747, 751, 753, 755, 757, 759, 761, 763, 764, 766, 768, 769, 771, 774, 776, 778, 780, 782, 784, 786, 788, 790, 791, 792, 795, 796, 797, 801, 802, 805, 806, 807, 810, 811, 812, 816, 817, 818, 822, 823, 824, 828, 829, 833, 834, 851, 859, 860, 861, 865, 866, 870, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 896, 897, 901, 902, 906, 907, 911, 912, 928, 990, 1011, 1012, 1014, 1015, 1016, 1017, 1020, 1021, 1027, 1124, 1138, 1139, 1166, 1199, 1294, 1295, 1304, 1314, 1324, 1338, 1347, 1363, 1407, 1408, 1409, 1414, 1416, 1417, 1418, 1423, 1425, 1426, 1434, 1436, 1437, 1438, 1439, 1440], "onc": [0, 574, 1427, 1430, 1431, 1437, 1438, 1439, 1442], "order": [0, 35, 166, 221, 223, 246, 338, 371, 469, 551, 714, 720, 753, 755, 759, 761, 764, 766, 771, 774, 778, 780, 784, 786, 1133, 1143, 1406, 1407, 1414, 1421, 1428, 1431, 1435, 1436, 1437, 1438, 1439], "i": [0, 9, 16, 22, 35, 36, 40, 42, 46, 48, 53, 55, 57, 59, 77, 79, 83, 85, 92, 94, 95, 102, 125, 126, 127, 128, 131, 137, 139, 143, 147, 149, 151, 152, 155, 159, 160, 166, 169, 173, 181, 182, 184, 185, 188, 191, 194, 195, 201, 203, 207, 211, 212, 214, 217, 221, 223, 226, 228, 233, 246, 257, 306, 329, 338, 371, 376, 384, 419, 492, 494, 498, 500, 502, 506, 509, 512, 517, 519, 521, 522, 526, 528, 534, 537, 541, 547, 549, 551, 552, 555, 567, 568, 574, 575, 582, 583, 590, 591, 593, 594, 600, 601, 606, 607, 608, 609, 611, 612, 614, 616, 618, 619, 620, 624, 625, 627, 631, 634, 638, 639, 640, 642, 644, 645, 647, 649, 653, 655, 659, 661, 664, 667, 668, 671, 673, 675, 677, 680, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 700, 702, 703, 704, 706, 708, 709, 710, 712, 714, 716, 718, 720, 721, 722, 724, 726, 730, 734, 738, 742, 746, 749, 753, 755, 759, 761, 764, 766, 769, 771, 774, 778, 780, 784, 786, 790, 791, 792, 793, 795, 800, 801, 802, 803, 805, 807, 808, 813, 816, 819, 820, 822, 825, 828, 830, 833, 835, 856, 859, 862, 865, 867, 870, 873, 877, 881, 885, 889, 894, 899, 904, 909, 935, 955, 965, 989, 994, 1027, 1033, 1034, 1043, 1044, 1050, 1051, 1057, 1058, 1065, 1066, 1073, 1074, 1124, 1143, 1154, 1155, 1162, 1163, 1166, 1170, 1171, 1172, 1174, 1176, 1180, 1199, 1255, 1293, 1294, 1304, 1314, 1324, 1338, 1347, 1359, 1360, 1363, 1380, 1385, 1409, 1414, 1415, 1421, 1422, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "calcul": [0, 3, 4, 9, 11, 16, 17, 19, 20, 21, 35, 36, 37, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 59, 60, 61, 64, 69, 73, 77, 79, 80, 81, 83, 85, 86, 92, 94, 97, 98, 101, 102, 117, 118, 125, 126, 127, 128, 131, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 155, 157, 159, 164, 167, 169, 175, 176, 177, 179, 181, 182, 184, 185, 188, 189, 191, 192, 193, 195, 196, 199, 201, 203, 204, 206, 211, 212, 214, 217, 218, 219, 221, 222, 223, 224, 225, 228, 229, 230, 231, 233, 234, 235, 449, 450, 474, 475, 498, 500, 502, 503, 505, 506, 509, 510, 512, 513, 516, 517, 519, 521, 522, 523, 525, 526, 528, 529, 530, 533, 534, 537, 538, 540, 541, 542, 546, 547, 551, 552, 555, 556, 564, 569, 570, 571, 572, 574, 577, 578, 579, 580, 585, 586, 587, 588, 592, 595, 596, 597, 598, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 624, 625, 628, 631, 632, 635, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 667, 668, 669, 671, 673, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 728, 729, 730, 732, 733, 734, 736, 737, 738, 740, 741, 742, 744, 745, 746, 747, 748, 749, 751, 752, 753, 755, 756, 757, 759, 761, 762, 763, 764, 766, 767, 768, 770, 771, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 786, 787, 788, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 822, 823, 824, 825, 828, 829, 830, 833, 834, 835, 851, 856, 859, 860, 861, 862, 865, 866, 867, 870, 871, 872, 873, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 919, 920, 928, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 947, 961, 962, 963, 968, 969, 979, 980, 991, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1025, 1026, 1028, 1033, 1035, 1037, 1043, 1045, 1050, 1052, 1057, 1059, 1065, 1067, 1073, 1076, 1079, 1080, 1081, 1097, 1099, 1101, 1102, 1106, 1109, 1110, 1117, 1124, 1133, 1143, 1162, 1163, 1166, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1179, 1180, 1182, 1183, 1189, 1191, 1193, 1194, 1197, 1199, 1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1244, 1246, 1247, 1250, 1252, 1253, 1255, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1293, 1294, 1304, 1314, 1324, 1338, 1347, 1359, 1360, 1363, 1398, 1399, 1400, 1401, 1402, 1403, 1405, 1406, 1407, 1408, 1409, 1411, 1414, 1415, 1418, 1419, 1420, 1421, 1422, 1425, 1426, 1428, 1430, 1431, 1432, 1433, 1434, 1435, 1438, 1439, 1440, 1441, 1442], "provid": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 143, 147, 152, 159, 160, 166, 169, 173, 181, 185, 191, 201, 203, 211, 214, 217, 221, 228, 233, 498, 502, 506, 512, 517, 519, 522, 526, 534, 541, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 609, 611, 614, 618, 624, 631, 638, 642, 645, 647, 653, 659, 664, 668, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 706, 708, 712, 714, 718, 720, 724, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 798, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 955, 989, 994, 1172, 1176, 1412, 1414, 1425, 1429, 1430, 1431, 1432, 1433, 1434, 1437, 1438, 1440], "turbineord": 0, "object": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 108, 109, 113, 120, 125, 128, 137, 143, 147, 152, 159, 160, 163, 165, 166, 169, 170, 173, 175, 176, 181, 185, 191, 201, 203, 211, 214, 217, 221, 228, 233, 246, 276, 296, 338, 371, 394, 498, 502, 506, 512, 517, 519, 522, 526, 534, 541, 547, 550, 551, 552, 561, 565, 567, 569, 570, 574, 577, 578, 582, 585, 586, 590, 592, 593, 595, 596, 600, 602, 603, 606, 609, 611, 614, 618, 624, 631, 638, 642, 645, 647, 653, 659, 664, 668, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 706, 708, 712, 714, 718, 720, 724, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 798, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 914, 915, 921, 943, 949, 950, 951, 952, 953, 954, 968, 972, 990, 995, 1027, 1029, 1039, 1047, 1054, 1061, 1069, 1076, 1083, 1086, 1097, 1099, 1106, 1117, 1118, 1124, 1127, 1128, 1133, 1138, 1139, 1141, 1142, 1143, 1146, 1150, 1155, 1166, 1167, 1172, 1176, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1204, 1213, 1218, 1223, 1228, 1232, 1234, 1239, 1244, 1250, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1300, 1304, 1310, 1314, 1320, 1324, 1331, 1338, 1339, 1341, 1347, 1349, 1352, 1363, 1370, 1372, 1397, 1412, 1414, 1416, 1429, 1430, 1431, 1432, 1435, 1436, 1437, 1438, 1440, 1441, 1442], "state": [0, 1, 2, 3, 4, 7, 9, 11, 16, 17, 20, 21, 48, 49, 92, 93, 96, 99, 101, 102, 103, 113, 117, 122, 124, 128, 129, 132, 134, 136, 139, 166, 175, 176, 191, 193, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 222, 224, 225, 226, 229, 235, 430, 431, 432, 433, 434, 482, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 569, 570, 577, 578, 585, 586, 592, 595, 596, 602, 603, 606, 607, 618, 620, 638, 639, 640, 644, 649, 655, 661, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 756, 757, 762, 763, 767, 768, 769, 775, 776, 778, 781, 782, 787, 788, 791, 792, 795, 796, 801, 802, 805, 806, 807, 810, 816, 817, 822, 823, 828, 833, 851, 854, 859, 860, 865, 870, 876, 880, 884, 888, 892, 897, 902, 907, 912, 919, 920, 921, 928, 933, 934, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 963, 966, 979, 981, 982, 983, 984, 985, 986, 987, 990, 991, 995, 1169, 1172, 1173, 1178, 1179, 1181, 1190, 1198, 1201, 1210, 1345, 1358, 1376, 1406, 1409, 1410, 1411, 1414, 1415, 1418, 1421, 1425, 1426, 1428, 1430, 1431, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "ambient": [0, 1, 3, 4, 16, 17, 20, 21, 53, 57, 176, 191, 192, 193, 195, 201, 230, 234, 245, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 490, 491, 498, 570, 578, 586, 596, 603, 614, 615, 618, 620, 624, 625, 631, 632, 797, 811, 813, 814, 873, 874, 875, 877, 878, 879, 881, 882, 883, 885, 886, 887, 889, 890, 891, 894, 895, 896, 899, 900, 901, 906, 909, 910, 911, 928, 930, 936, 942, 1407, 1410, 1413, 1414, 1421, 1425, 1426, 1428, 1433, 1434, 1435, 1437, 1438, 1439, 1440, 1441], "wake_model": [0, 1, 46, 47, 173, 174, 222, 561, 567, 568, 574, 575, 582, 583, 590, 591, 593, 594, 600, 601, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 1428, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "list": [0, 1, 2, 9, 16, 17, 35, 38, 39, 40, 44, 45, 46, 47, 49, 51, 52, 53, 56, 57, 61, 66, 67, 71, 72, 77, 81, 82, 83, 86, 92, 96, 98, 100, 102, 117, 118, 125, 127, 128, 129, 130, 132, 133, 135, 137, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 171, 173, 174, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 201, 202, 204, 207, 208, 209, 210, 211, 214, 217, 219, 221, 222, 228, 233, 236, 238, 240, 241, 371, 384, 492, 496, 497, 498, 499, 501, 503, 506, 508, 511, 513, 514, 517, 519, 523, 526, 530, 532, 534, 536, 539, 542, 543, 545, 547, 551, 552, 556, 557, 566, 567, 568, 573, 574, 575, 581, 582, 583, 589, 590, 591, 593, 594, 599, 600, 601, 606, 607, 610, 611, 613, 614, 615, 617, 618, 624, 625, 631, 632, 638, 639, 641, 642, 643, 646, 647, 651, 653, 657, 658, 659, 660, 663, 664, 669, 671, 674, 675, 676, 679, 680, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 701, 702, 707, 708, 713, 714, 719, 720, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 748, 749, 752, 753, 758, 759, 764, 771, 778, 784, 789, 790, 793, 799, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 893, 894, 898, 899, 903, 904, 908, 909, 913, 914, 916, 918, 930, 933, 934, 937, 939, 940, 941, 943, 963, 966, 967, 970, 972, 973, 981, 982, 983, 984, 985, 986, 994, 996, 998, 1001, 1003, 1004, 1024, 1027, 1036, 1037, 1038, 1076, 1077, 1079, 1080, 1081, 1082, 1093, 1094, 1097, 1099, 1100, 1101, 1102, 1106, 1107, 1109, 1110, 1115, 1117, 1118, 1123, 1126, 1133, 1143, 1160, 1164, 1165, 1167, 1172, 1177, 1180, 1181, 1182, 1183, 1189, 1190, 1191, 1193, 1194, 1197, 1198, 1201, 1211, 1212, 1215, 1216, 1220, 1221, 1225, 1226, 1230, 1231, 1236, 1237, 1246, 1247, 1252, 1253, 1255, 1258, 1259, 1265, 1266, 1271, 1272, 1277, 1278, 1283, 1284, 1293, 1303, 1313, 1323, 1336, 1337, 1346, 1361, 1362, 1377, 1379, 1405, 1408, 1409, 1411, 1412, 1413, 1418, 1425, 1428, 1429, 1432, 1435], "wakemodel": [0, 46, 47, 49, 173, 174, 222, 228, 229, 230, 231, 232, 561, 568, 575, 583, 591, 594, 601, 793, 808, 1411, 1422], "wake": [0, 1, 3, 4, 20, 21, 35, 40, 46, 47, 48, 49, 77, 166, 173, 174, 175, 176, 178, 179, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 464, 471, 472, 490, 561, 567, 568, 569, 570, 572, 574, 575, 577, 578, 580, 582, 583, 585, 586, 588, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 614, 690, 753, 754, 756, 757, 759, 762, 763, 764, 767, 768, 769, 771, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 850, 851, 854, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 1027, 1294, 1304, 1407, 1408, 1411, 1414, 1416, 1417, 1421, 1422, 1424, 1425, 1426, 1428, 1430, 1431, 1434, 1435, 1438, 1440, 1441], "model": [0, 1, 2, 3, 4, 6, 9, 12, 16, 17, 20, 21, 27, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 115, 117, 125, 126, 127, 128, 129, 130, 131, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 435, 436, 471, 472, 492, 498, 500, 502, 503, 506, 509, 510, 512, 513, 517, 519, 521, 522, 523, 526, 528, 529, 530, 532, 534, 537, 538, 540, 541, 542, 545, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 928, 948, 955, 958, 959, 961, 964, 968, 979, 987, 990, 992, 993, 994, 1076, 1097, 1099, 1106, 1114, 1117, 1122, 1166, 1167, 1172, 1174, 1175, 1176, 1177, 1180, 1189, 1191, 1197, 1201, 1405, 1410, 1411, 1412, 1415, 1419, 1421, 1424, 1425, 1426, 1429, 1430, 1431, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "appli": [0, 1, 49, 83, 229, 230, 231, 234, 235, 796, 797, 810, 811, 812, 818, 824, 829, 834, 861, 866, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 896, 897, 901, 902, 906, 907, 911, 912, 935, 1124, 1131, 1132, 1166, 1199, 1201, 1255, 1293, 1294, 1296, 1297, 1304, 1306, 1307, 1314, 1316, 1317, 1324, 1326, 1327, 1338, 1347, 1363, 1407, 1408, 1414, 1425, 1428, 1431, 1437, 1439, 1442], "all": [0, 1, 2, 3, 4, 9, 16, 20, 21, 35, 36, 39, 40, 42, 45, 46, 48, 52, 53, 55, 57, 59, 77, 79, 82, 83, 85, 92, 94, 100, 101, 102, 125, 126, 128, 131, 135, 136, 137, 139, 143, 146, 147, 149, 152, 155, 158, 159, 160, 169, 171, 173, 174, 180, 181, 182, 185, 188, 190, 191, 195, 201, 203, 206, 211, 212, 214, 217, 221, 223, 228, 233, 234, 236, 240, 246, 301, 338, 371, 498, 499, 500, 502, 505, 506, 509, 512, 516, 517, 519, 521, 522, 525, 526, 528, 532, 533, 534, 537, 541, 545, 546, 547, 551, 552, 555, 557, 561, 567, 573, 574, 581, 582, 589, 590, 593, 599, 600, 604, 606, 608, 609, 611, 612, 614, 616, 618, 620, 624, 631, 638, 639, 640, 642, 644, 645, 647, 649, 653, 655, 658, 659, 661, 664, 667, 668, 670, 671, 673, 675, 677, 680, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 730, 734, 738, 742, 746, 749, 753, 755, 758, 759, 761, 764, 766, 771, 774, 778, 780, 784, 786, 789, 790, 793, 798, 799, 800, 803, 808, 813, 819, 825, 830, 835, 852, 856, 862, 867, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 894, 896, 899, 901, 904, 906, 909, 911, 919, 921, 928, 947, 948, 955, 959, 961, 963, 964, 966, 967, 968, 970, 972, 973, 979, 981, 982, 983, 984, 985, 986, 987, 990, 992, 1024, 1027, 1076, 1079, 1080, 1081, 1095, 1096, 1097, 1099, 1101, 1102, 1105, 1106, 1109, 1110, 1114, 1116, 1117, 1122, 1124, 1126, 1130, 1133, 1139, 1143, 1154, 1155, 1166, 1172, 1174, 1176, 1179, 1180, 1181, 1182, 1183, 1188, 1189, 1190, 1191, 1193, 1194, 1197, 1198, 1199, 1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1243, 1244, 1246, 1247, 1250, 1252, 1253, 1255, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1293, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1379, 1399, 1405, 1411, 1412, 1413, 1414, 1419, 1423, 1425, 1427, 1429, 1430, 1431, 1432, 1433, 1434, 1437, 1438, 1439, 1441], "rotor_model": [0, 1, 561, 574, 575, 582, 583, 591, 593, 594, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 1428, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1439, 1440, 1441, 1442], "rotormodel": [0, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 561, 574, 575, 582, 583, 591, 593, 594, 618, 624, 631, 1411, 1414], "rotor": [0, 1, 137, 139, 147, 148, 173, 191, 193, 194, 195, 196, 197, 198, 200, 207, 208, 214, 215, 245, 427, 428, 429, 448, 449, 450, 461, 473, 474, 475, 480, 492, 561, 574, 575, 582, 583, 590, 591, 593, 594, 600, 604, 618, 619, 620, 621, 622, 623, 624, 627, 629, 630, 631, 632, 634, 636, 637, 653, 654, 665, 671, 672, 759, 904, 919, 920, 921, 1076, 1077, 1201, 1214, 1410, 1411, 1414, 1421, 1424, 1425, 1426, 1428, 1431, 1434, 1437, 1439, 1440], "wake_fram": [0, 1, 173, 174, 561, 568, 574, 575, 583, 590, 591, 593, 594, 600, 601, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 1428, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1439, 1440, 1441, 1442], "wakefram": [0, 173, 174, 221, 222, 223, 224, 225, 226, 227, 561, 568, 575, 583, 591, 594, 601, 753, 754, 759, 764, 771, 778, 784, 785, 1411, 1414], "frame": [0, 1, 35, 173, 174, 194, 221, 222, 224, 225, 227, 229, 506, 561, 568, 575, 583, 591, 594, 601, 606, 607, 619, 627, 634, 753, 754, 756, 757, 759, 762, 763, 764, 767, 768, 771, 775, 776, 778, 781, 782, 784, 785, 787, 788, 796, 810, 835, 1378, 1407, 1411, 1414, 1422, 1425, 1428, 1430, 1434, 1437, 1439, 1442], "partial_wakes_model": [0, 1, 1428, 1430, 1431, 1433, 1435, 1436, 1437, 1439, 1440, 1441, 1442], "partialwakesmodel": [0, 173, 174, 175, 176, 177, 178, 179, 180, 567, 574, 582, 593, 600, 1411, 1414], "partial": [0, 1, 173, 178, 561, 567, 568, 574, 582, 590, 593, 600, 790, 793, 1411, 1414, 1422, 1428, 1434, 1437, 1439], "farm_control": [0, 1, 551, 561, 1432], "farmcontrol": [0, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 551, 561, 1411, 1414], "farm": [0, 1, 3, 4, 9, 11, 16, 17, 20, 21, 23, 25, 26, 36, 40, 42, 48, 49, 53, 55, 59, 64, 69, 73, 77, 79, 85, 91, 94, 102, 103, 116, 131, 137, 139, 140, 147, 149, 152, 155, 159, 166, 173, 175, 176, 179, 182, 188, 191, 193, 195, 196, 207, 208, 212, 222, 223, 224, 225, 226, 229, 230, 231, 234, 235, 236, 237, 239, 369, 492, 493, 494, 495, 496, 497, 500, 509, 521, 528, 537, 550, 551, 552, 555, 561, 567, 569, 570, 572, 574, 577, 578, 580, 582, 585, 586, 588, 590, 592, 593, 595, 596, 598, 600, 602, 603, 604, 605, 608, 612, 616, 620, 621, 638, 639, 640, 644, 649, 655, 661, 664, 667, 671, 673, 677, 682, 685, 688, 691, 693, 700, 704, 710, 716, 722, 753, 755, 756, 757, 761, 762, 763, 766, 767, 768, 769, 774, 775, 776, 780, 781, 782, 784, 785, 786, 787, 788, 791, 792, 795, 796, 797, 801, 802, 805, 806, 807, 808, 810, 811, 812, 813, 814, 816, 817, 818, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 851, 856, 857, 859, 860, 861, 865, 866, 870, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 896, 897, 901, 902, 906, 907, 911, 912, 919, 920, 921, 922, 923, 928, 929, 930, 931, 932, 935, 936, 948, 949, 950, 951, 952, 953, 954, 961, 962, 964, 965, 968, 969, 970, 972, 973, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 1076, 1097, 1099, 1106, 1111, 1117, 1120, 1124, 1140, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171, 1174, 1180, 1189, 1191, 1197, 1199, 1201, 1209, 1210, 1294, 1304, 1314, 1324, 1338, 1344, 1345, 1347, 1357, 1358, 1359, 1360, 1363, 1375, 1376, 1405, 1406, 1407, 1408, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1418, 1423, 1425, 1426, 1428, 1430, 1431, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "control": [0, 1, 551, 561, 1414, 1428, 1437, 1439], "n_state": [0, 4, 16, 17, 21, 36, 42, 48, 49, 55, 59, 79, 85, 94, 101, 113, 117, 120, 122, 131, 136, 137, 139, 149, 155, 166, 175, 176, 182, 188, 193, 195, 196, 206, 207, 208, 209, 210, 212, 222, 223, 224, 225, 226, 229, 230, 231, 234, 235, 500, 505, 509, 516, 521, 525, 528, 533, 537, 546, 549, 555, 569, 570, 577, 578, 585, 586, 592, 595, 596, 602, 603, 604, 608, 612, 616, 620, 621, 638, 639, 640, 644, 649, 655, 661, 666, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 755, 756, 757, 761, 762, 763, 766, 767, 768, 769, 774, 775, 776, 780, 781, 782, 786, 787, 788, 791, 792, 795, 796, 797, 801, 802, 805, 806, 807, 810, 811, 812, 816, 817, 818, 822, 823, 824, 828, 829, 833, 834, 851, 854, 859, 860, 861, 865, 866, 870, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 896, 897, 901, 902, 906, 907, 911, 912, 963, 995, 1124, 1126, 1166, 1168, 1169, 1172, 1174, 1179, 1199, 1209, 1210, 1338, 1344, 1345, 1347, 1357, 1358, 1363, 1375, 1376, 1413, 1415, 1428, 1437, 1438, 1439], "int": [0, 1, 9, 10, 13, 22, 28, 33, 37, 43, 50, 60, 64, 69, 73, 80, 95, 97, 99, 102, 103, 114, 121, 122, 123, 124, 134, 141, 142, 143, 156, 164, 167, 169, 170, 175, 176, 177, 193, 195, 197, 203, 205, 207, 208, 210, 238, 239, 246, 267, 371, 385, 417, 492, 494, 495, 496, 497, 499, 502, 504, 506, 508, 510, 512, 514, 515, 522, 524, 529, 531, 534, 536, 538, 540, 541, 543, 544, 564, 569, 570, 571, 574, 575, 577, 578, 579, 583, 585, 586, 587, 591, 592, 595, 596, 597, 602, 603, 609, 620, 622, 624, 625, 628, 629, 631, 632, 635, 636, 645, 650, 656, 662, 668, 678, 705, 706, 711, 712, 717, 718, 723, 724, 743, 770, 771, 772, 777, 783, 798, 871, 917, 919, 920, 921, 926, 930, 931, 942, 943, 949, 950, 951, 952, 953, 954, 963, 966, 967, 970, 972, 973, 981, 982, 983, 984, 985, 986, 995, 1027, 1076, 1077, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1106, 1107, 1109, 1110, 1112, 1113, 1115, 1117, 1118, 1121, 1123, 1124, 1126, 1127, 1128, 1133, 1134, 1135, 1137, 1141, 1142, 1143, 1145, 1146, 1149, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1166, 1167, 1169, 1172, 1173, 1175, 1176, 1178, 1180, 1182, 1183, 1184, 1185, 1187, 1189, 1191, 1193, 1194, 1196, 1197, 1199, 1201, 1203, 1204, 1206, 1208, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1256, 1258, 1259, 1260, 1262, 1263, 1265, 1266, 1268, 1269, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1283, 1284, 1286, 1287, 1290, 1294, 1295, 1300, 1304, 1305, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1320, 1324, 1325, 1330, 1331, 1333, 1335, 1337, 1338, 1339, 1341, 1345, 1347, 1348, 1349, 1351, 1352, 1354, 1356, 1358, 1362, 1363, 1370, 1372, 1376, 1379, 1380, 1381, 1396, 1400, 1401, 1402, 1403, 1404, 1410, 1429], "number": [0, 9, 10, 13, 16, 33, 92, 99, 102, 116, 117, 121, 122, 123, 128, 134, 191, 197, 201, 205, 236, 239, 246, 257, 306, 329, 337, 353, 371, 376, 417, 419, 497, 498, 504, 506, 515, 517, 519, 524, 526, 531, 534, 544, 547, 574, 575, 618, 622, 624, 625, 629, 631, 632, 636, 675, 785, 804, 808, 809, 814, 820, 825, 826, 831, 835, 850, 857, 862, 863, 867, 868, 921, 926, 949, 950, 951, 952, 953, 954, 970, 972, 973, 995, 1076, 1088, 1089, 1090, 1097, 1099, 1104, 1106, 1112, 1117, 1124, 1154, 1155, 1157, 1158, 1166, 1169, 1172, 1178, 1180, 1187, 1189, 1191, 1196, 1197, 1199, 1210, 1213, 1214, 1217, 1218, 1219, 1222, 1223, 1224, 1227, 1228, 1233, 1234, 1238, 1239, 1244, 1245, 1249, 1250, 1254, 1255, 1256, 1262, 1263, 1268, 1269, 1274, 1275, 1276, 1280, 1281, 1286, 1287, 1290, 1293, 1294, 1295, 1304, 1305, 1314, 1315, 1324, 1325, 1338, 1345, 1347, 1348, 1358, 1363, 1376, 1381, 1415, 1417, 1423, 1431, 1432, 1434], "classmethod": [0, 6, 9, 12, 16, 27, 102, 112, 117, 120, 173, 178, 191, 198, 211, 213, 214, 216, 217, 220, 221, 227, 228, 232, 567, 574, 582, 590, 593, 600, 618, 624, 631, 638, 642, 647, 652, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 919, 928, 948, 955, 958, 959, 961, 964, 968, 971, 979, 987, 990, 992, 1004, 1009, 1010, 1027, 1076, 1097, 1099, 1106, 1114, 1117, 1122, 1124, 1159, 1161, 1166, 1180, 1189, 1191, 1197, 1199, 1338, 1347, 1363, 1380, 1384], "get_model": [0, 6, 9, 12, 16, 27], "name": [0, 3, 4, 6, 9, 12, 16, 17, 20, 21, 27, 35, 38, 39, 40, 44, 45, 46, 49, 51, 52, 53, 56, 57, 61, 62, 63, 66, 67, 71, 72, 77, 81, 83, 86, 92, 98, 100, 102, 110, 112, 117, 118, 119, 120, 125, 128, 133, 135, 137, 138, 144, 145, 146, 147, 150, 152, 157, 158, 159, 160, 163, 165, 172, 173, 178, 179, 180, 181, 183, 185, 189, 190, 191, 193, 198, 199, 201, 204, 207, 208, 211, 213, 214, 215, 216, 217, 219, 220, 221, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 243, 244, 437, 492, 495, 496, 497, 498, 499, 503, 506, 508, 513, 517, 519, 523, 526, 527, 530, 532, 534, 536, 542, 545, 547, 549, 551, 552, 556, 557, 558, 560, 561, 565, 566, 567, 568, 572, 573, 574, 580, 582, 588, 589, 590, 593, 598, 599, 600, 605, 606, 607, 610, 611, 613, 614, 617, 618, 624, 625, 631, 632, 638, 641, 642, 643, 646, 647, 651, 653, 654, 657, 658, 659, 660, 663, 664, 666, 669, 671, 674, 675, 679, 680, 681, 683, 684, 686, 687, 689, 690, 691, 694, 695, 696, 697, 698, 699, 701, 702, 703, 707, 708, 709, 713, 714, 715, 719, 720, 721, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 748, 749, 752, 753, 758, 759, 764, 771, 778, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 802, 803, 804, 805, 807, 808, 810, 811, 812, 813, 814, 816, 818, 819, 820, 822, 824, 825, 826, 829, 830, 831, 833, 834, 835, 856, 857, 859, 861, 862, 863, 866, 867, 868, 872, 873, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 919, 921, 928, 943, 944, 945, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 966, 967, 968, 970, 971, 972, 973, 979, 981, 982, 983, 984, 985, 986, 987, 990, 992, 994, 995, 996, 999, 1002, 1027, 1075, 1076, 1077, 1082, 1091, 1092, 1093, 1094, 1097, 1098, 1099, 1100, 1106, 1107, 1114, 1117, 1118, 1122, 1124, 1126, 1159, 1161, 1164, 1165, 1166, 1167, 1168, 1169, 1172, 1177, 1180, 1181, 1189, 1190, 1191, 1192, 1197, 1198, 1199, 1201, 1209, 1210, 1211, 1212, 1213, 1214, 1218, 1219, 1223, 1224, 1228, 1229, 1234, 1235, 1239, 1244, 1245, 1250, 1251, 1256, 1257, 1263, 1264, 1269, 1270, 1275, 1276, 1281, 1282, 1287, 1288, 1290, 1291, 1294, 1303, 1304, 1313, 1314, 1323, 1324, 1336, 1337, 1338, 1344, 1345, 1346, 1347, 1348, 1357, 1358, 1361, 1362, 1363, 1369, 1375, 1376, 1377, 1379, 1410, 1412, 1419, 1425, 1427, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1440], "get": [0, 6, 9, 12, 16, 26, 27, 30, 31, 35, 40, 46, 53, 57, 62, 65, 66, 70, 71, 74, 75, 77, 83, 92, 102, 107, 117, 124, 125, 128, 137, 147, 152, 159, 160, 165, 173, 181, 185, 191, 201, 211, 214, 217, 221, 224, 228, 233, 241, 246, 320, 371, 498, 506, 517, 519, 526, 534, 547, 551, 552, 561, 565, 567, 574, 582, 590, 593, 600, 604, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 756, 759, 762, 764, 767, 771, 775, 778, 781, 784, 787, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 919, 928, 948, 955, 957, 961, 964, 968, 970, 979, 987, 990, 992, 996, 1002, 1003, 1028, 1030, 1035, 1037, 1040, 1045, 1052, 1059, 1062, 1067, 1070, 1076, 1078, 1095, 1096, 1097, 1099, 1105, 1106, 1116, 1117, 1124, 1136, 1147, 1151, 1161, 1166, 1172, 1180, 1188, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1425, 1429], "specif": [0, 6, 9, 12, 16, 27, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 172, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 338, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172, 1407, 1408, 1409, 1419, 1426, 1440], "mbook": [0, 1, 16, 17, 102, 103, 550, 990, 991, 992, 993, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "constructor": [0, 1, 9, 10, 16, 17, 35, 40, 41, 46, 47, 53, 54, 57, 58, 62, 63, 66, 67, 71, 72, 75, 76, 77, 78, 83, 84, 87, 88, 92, 93, 102, 103, 112, 117, 118, 125, 128, 129, 137, 138, 147, 148, 152, 153, 159, 160, 161, 173, 174, 181, 185, 186, 191, 192, 198, 201, 207, 208, 211, 213, 214, 215, 216, 217, 221, 227, 228, 232, 233, 236, 237, 241, 242, 498, 499, 506, 508, 517, 519, 520, 526, 527, 534, 536, 547, 551, 552, 553, 558, 560, 561, 563, 567, 568, 574, 575, 582, 583, 590, 591, 593, 594, 600, 601, 606, 607, 611, 614, 615, 618, 624, 625, 631, 632, 638, 639, 642, 643, 647, 648, 653, 654, 659, 660, 664, 665, 671, 672, 675, 676, 680, 681, 684, 687, 690, 691, 695, 696, 697, 698, 699, 702, 703, 708, 709, 714, 715, 720, 721, 726, 727, 730, 731, 734, 735, 738, 739, 742, 743, 746, 749, 750, 753, 754, 759, 760, 764, 765, 771, 772, 778, 779, 784, 785, 790, 793, 794, 800, 803, 804, 808, 809, 813, 814, 819, 820, 825, 826, 830, 831, 835, 850, 856, 857, 862, 863, 867, 868, 873, 874, 877, 878, 881, 882, 885, 886, 889, 890, 894, 895, 899, 900, 904, 905, 909, 910, 914, 915, 919, 920, 928, 929, 948, 955, 956, 958, 961, 962, 964, 965, 968, 969, 974, 975, 979, 980, 987, 988, 990, 991, 992, 993, 996, 997, 1035, 1036, 1037, 1038, 1052, 1053, 1059, 1060, 1067, 1068, 1076, 1077, 1097, 1098, 1099, 1100, 1106, 1107, 1124, 1126, 1166, 1172, 1173, 1180, 1181, 1189, 1190, 1191, 1192, 1197, 1198, 1199, 1200, 1213, 1214, 1218, 1219, 1223, 1224, 1228, 1229, 1244, 1245, 1250, 1251, 1256, 1257, 1263, 1264, 1269, 1270, 1275, 1276, 1281, 1282, 1287, 1288, 1294, 1295, 1304, 1305, 1314, 1315, 1324, 1325, 1338, 1363, 1369, 1380, 1381, 1432, 1440], "init_st": [0, 7, 9, 16], "initi": [0, 7, 8, 9, 16, 18, 35, 37, 40, 43, 46, 50, 53, 57, 60, 77, 80, 83, 87, 90, 92, 97, 102, 111, 118, 120, 125, 127, 128, 137, 142, 145, 147, 152, 159, 160, 167, 168, 173, 177, 179, 181, 185, 191, 201, 211, 214, 217, 221, 228, 231, 233, 498, 499, 506, 517, 519, 526, 529, 534, 540, 547, 551, 552, 567, 571, 572, 574, 579, 580, 582, 587, 588, 590, 593, 597, 598, 600, 605, 606, 611, 614, 618, 624, 628, 631, 635, 638, 642, 647, 650, 653, 656, 659, 662, 664, 671, 675, 678, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 770, 771, 777, 778, 783, 784, 790, 793, 798, 800, 803, 808, 812, 813, 818, 819, 824, 825, 829, 830, 834, 835, 856, 861, 862, 866, 867, 872, 873, 877, 881, 885, 889, 894, 899, 904, 909, 974, 977, 1027, 1076, 1086, 1087, 1097, 1099, 1103, 1106, 1117, 1124, 1144, 1145, 1146, 1166, 1167, 1172, 1175, 1180, 1185, 1189, 1191, 1197, 1199, 1201, 1202, 1203, 1204, 1213, 1218, 1223, 1228, 1232, 1234, 1235, 1239, 1240, 1244, 1248, 1250, 1256, 1260, 1263, 1269, 1275, 1281, 1287, 1290, 1291, 1294, 1299, 1300, 1304, 1309, 1310, 1314, 1319, 1320, 1324, 1329, 1330, 1331, 1338, 1340, 1341, 1347, 1350, 1351, 1352, 1363, 1371, 1372, 1380, 1383, 1387, 1389, 1390, 1392, 1393, 1425, 1428, 1431, 1433, 1437, 1439], "need": [0, 7, 9, 16, 166, 217, 219, 226, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 748, 749, 752, 769, 889, 893, 894, 898, 899, 903, 904, 908, 909, 913, 1425, 1428, 1431, 1433, 1435, 1436, 1441], "all_model": [0, 2, 9, 16], "with_stat": [0, 2, 9, 16], "true": [0, 2, 3, 4, 9, 11, 16, 29, 64, 69, 73, 166, 168, 195, 222, 241, 246, 329, 371, 419, 495, 499, 549, 620, 624, 625, 631, 632, 671, 672, 854, 868, 943, 949, 950, 951, 952, 953, 954, 996, 1002, 1027, 1033, 1034, 1043, 1044, 1045, 1047, 1050, 1051, 1052, 1054, 1057, 1058, 1059, 1061, 1065, 1066, 1073, 1074, 1087, 1130, 1191, 1192, 1298, 1308, 1318, 1328, 1379, 1381, 1430, 1431, 1433, 1435, 1437, 1439, 1440, 1441], "return": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 162, 173, 181, 185, 191, 201, 211, 214, 217, 221, 226, 228, 233, 246, 249, 250, 251, 255, 258, 259, 261, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 306, 329, 371, 373, 374, 377, 378, 380, 381, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 498, 506, 517, 519, 526, 534, 547, 551, 552, 554, 567, 574, 576, 582, 584, 590, 593, 600, 606, 611, 614, 618, 624, 626, 631, 633, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 692, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 769, 771, 773, 778, 784, 790, 793, 800, 803, 808, 813, 815, 819, 821, 825, 827, 830, 832, 835, 856, 858, 862, 864, 867, 869, 873, 877, 881, 885, 889, 894, 899, 904, 909, 919, 938, 943, 949, 950, 951, 968, 990, 995, 1028, 1035, 1037, 1045, 1052, 1059, 1067, 1076, 1097, 1099, 1106, 1117, 1172, 1180, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1241, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1419, 1425, 1438], "calc_farm": [0, 3, 9, 11, 16, 20, 1124, 1126, 1425, 1428, 1430, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "calc_paramet": [0, 3, 4, 20, 21], "persist": [0, 3, 20], "final": [0, 3, 4, 5, 9, 11, 16, 20, 21, 35, 40, 46, 53, 57, 77, 83, 87, 89, 92, 102, 106, 125, 128, 137, 141, 145, 147, 152, 159, 160, 164, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 230, 233, 234, 498, 506, 510, 517, 519, 526, 534, 538, 547, 551, 552, 561, 564, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 705, 708, 711, 714, 717, 720, 723, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 797, 800, 803, 808, 811, 813, 819, 825, 830, 835, 856, 862, 867, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 890, 891, 894, 895, 896, 899, 900, 901, 904, 905, 906, 909, 910, 911, 974, 1076, 1083, 1084, 1085, 1097, 1099, 1106, 1117, 1124, 1141, 1142, 1166, 1172, 1180, 1184, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1339, 1347, 1349, 1363, 1370, 1380, 1382, 1387, 1389, 1391, 1425, 1431, 1436, 1439, 1441], "data": [0, 1, 3, 4, 9, 11, 16, 20, 21, 26, 30, 31, 35, 36, 40, 42, 46, 48, 49, 53, 55, 57, 59, 77, 79, 83, 85, 87, 89, 90, 91, 92, 94, 97, 102, 103, 105, 107, 108, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 137, 139, 143, 147, 149, 151, 152, 155, 159, 160, 163, 165, 166, 167, 169, 173, 175, 176, 179, 181, 182, 184, 185, 188, 191, 193, 195, 196, 201, 203, 207, 211, 212, 214, 217, 218, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 235, 241, 242, 243, 244, 246, 318, 320, 338, 371, 492, 493, 494, 495, 498, 499, 500, 502, 506, 508, 509, 512, 517, 519, 521, 522, 526, 527, 528, 534, 536, 537, 541, 547, 549, 551, 552, 555, 567, 569, 570, 572, 574, 577, 578, 580, 582, 585, 586, 588, 590, 592, 593, 595, 596, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 616, 618, 620, 621, 624, 631, 638, 640, 642, 643, 644, 645, 647, 649, 652, 653, 655, 659, 660, 661, 664, 666, 667, 668, 671, 672, 673, 675, 676, 677, 680, 682, 684, 685, 687, 688, 690, 691, 693, 695, 696, 697, 698, 699, 700, 702, 703, 704, 706, 708, 709, 710, 712, 714, 715, 716, 718, 720, 721, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 743, 744, 746, 747, 749, 751, 753, 755, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 774, 775, 776, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 851, 852, 853, 854, 856, 857, 859, 860, 861, 862, 865, 866, 867, 870, 872, 873, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 891, 892, 894, 896, 897, 899, 901, 902, 904, 906, 907, 909, 911, 912, 919, 920, 928, 933, 934, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 948, 952, 953, 954, 955, 960, 961, 964, 965, 966, 967, 968, 970, 972, 973, 974, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 990, 992, 995, 996, 997, 1003, 1004, 1009, 1010, 1013, 1019, 1023, 1076, 1084, 1085, 1097, 1099, 1106, 1117, 1124, 1141, 1142, 1162, 1163, 1166, 1170, 1171, 1172, 1174, 1176, 1180, 1184, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1339, 1347, 1349, 1359, 1360, 1363, 1370, 1378, 1407, 1408, 1410, 1411, 1412, 1413, 1414, 1418, 1419, 1420, 1421, 1424, 1425, 1426, 1428, 1430, 1431, 1434, 1435, 1436, 1437, 1438, 1439, 1442], "calc_point": [0, 4, 9, 16, 21, 963, 981, 982, 983, 984, 985, 986, 1425, 1428, 1438], "farm_result": [0, 3, 4, 9, 11, 16, 20, 21, 25, 919, 920, 928, 929, 948, 961, 962, 964, 965, 979, 980, 987, 988, 1428, 1430, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "point": [0, 1, 4, 9, 14, 16, 17, 21, 24, 31, 32, 46, 48, 49, 57, 59, 91, 94, 102, 113, 117, 120, 121, 128, 129, 131, 166, 175, 176, 179, 181, 182, 185, 188, 191, 193, 194, 195, 196, 197, 200, 221, 224, 225, 226, 229, 230, 231, 234, 235, 245, 246, 306, 329, 423, 424, 427, 428, 429, 432, 496, 497, 500, 509, 521, 528, 537, 561, 569, 570, 572, 574, 575, 577, 578, 580, 585, 586, 588, 592, 595, 596, 598, 600, 602, 603, 604, 605, 608, 612, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 630, 631, 632, 634, 636, 637, 753, 756, 757, 759, 762, 763, 764, 765, 767, 768, 769, 771, 772, 775, 776, 778, 779, 781, 782, 784, 787, 788, 791, 792, 795, 796, 797, 801, 802, 805, 806, 807, 810, 811, 812, 816, 817, 818, 822, 823, 824, 828, 829, 833, 834, 851, 859, 860, 861, 865, 866, 870, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 896, 897, 901, 902, 906, 907, 911, 912, 949, 950, 951, 952, 953, 954, 961, 962, 963, 968, 969, 970, 972, 973, 978, 979, 980, 990, 991, 1028, 1031, 1032, 1033, 1034, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1065, 1066, 1067, 1071, 1072, 1073, 1074, 1124, 1126, 1174, 1255, 1293, 1294, 1295, 1298, 1304, 1305, 1308, 1314, 1315, 1318, 1324, 1325, 1328, 1348, 1379, 1398, 1399, 1406, 1407, 1410, 1411, 1414, 1417, 1418, 1419, 1425, 1428, 1429, 1430, 1431, 1433, 1434, 1436, 1437, 1438, 1439, 1440, 1441], "point_model": [0, 4, 9, 21, 128, 129, 561, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 1432], "none": [0, 1, 4, 9, 10, 16, 17, 35, 40, 46, 47, 48, 53, 57, 62, 63, 64, 66, 67, 69, 71, 72, 73, 77, 78, 83, 87, 91, 92, 96, 102, 103, 108, 113, 117, 124, 125, 127, 128, 132, 137, 139, 147, 152, 159, 160, 165, 166, 173, 174, 176, 181, 185, 188, 191, 193, 195, 201, 202, 207, 208, 209, 210, 211, 214, 215, 217, 221, 222, 226, 228, 233, 236, 237, 246, 279, 290, 371, 397, 407, 492, 494, 496, 497, 498, 499, 501, 506, 508, 511, 514, 517, 519, 520, 526, 527, 534, 536, 539, 543, 547, 551, 552, 558, 560, 561, 563, 565, 566, 567, 568, 570, 574, 575, 578, 582, 583, 586, 590, 591, 593, 594, 596, 600, 601, 603, 606, 611, 614, 618, 620, 624, 631, 638, 642, 647, 653, 659, 660, 664, 671, 675, 680, 684, 687, 690, 691, 695, 697, 699, 702, 703, 708, 709, 714, 715, 720, 721, 726, 730, 734, 738, 742, 743, 746, 749, 753, 759, 764, 765, 769, 771, 778, 779, 784, 785, 790, 793, 800, 803, 808, 813, 814, 819, 825, 826, 830, 831, 856, 857, 862, 867, 873, 877, 881, 885, 889, 890, 894, 895, 899, 900, 904, 905, 909, 910, 914, 915, 919, 920, 921, 924, 925, 926, 927, 928, 930, 935, 942, 943, 948, 949, 950, 951, 952, 953, 954, 955, 956, 963, 964, 965, 966, 967, 968, 970, 972, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 994, 995, 996, 997, 1002, 1025, 1027, 1045, 1047, 1052, 1054, 1059, 1061, 1075, 1076, 1077, 1079, 1080, 1081, 1097, 1099, 1100, 1101, 1102, 1106, 1107, 1109, 1110, 1117, 1118, 1124, 1126, 1127, 1128, 1133, 1143, 1166, 1172, 1180, 1181, 1182, 1183, 1189, 1190, 1191, 1193, 1194, 1197, 1198, 1199, 1201, 1213, 1214, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1244, 1245, 1246, 1247, 1250, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1291, 1293, 1294, 1295, 1298, 1304, 1305, 1308, 1314, 1315, 1318, 1324, 1325, 1328, 1338, 1347, 1348, 1363, 1379, 1380, 1381, 1419, 1428, 1430, 1432, 1433, 1437, 1438, 1439, 1442], "given": [0, 4, 9, 16, 21, 207, 208, 221, 224, 338, 519, 565, 638, 664, 691, 714, 720, 753, 756, 759, 762, 764, 767, 771, 775, 778, 781, 784, 785, 787, 813, 814, 825, 826, 830, 831, 856, 857, 928, 930, 935, 942, 947, 961, 996, 1002, 1011, 1014, 1015, 1020, 1075, 1076, 1084, 1085, 1097, 1099, 1106, 1117, 1124, 1134, 1135, 1141, 1142, 1166, 1180, 1184, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1241, 1242, 1244, 1250, 1255, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1293, 1294, 1304, 1314, 1324, 1338, 1339, 1347, 1349, 1363, 1370, 1380, 1386, 1387, 1388, 1389, 1394, 1413, 1414, 1415, 1418, 1419, 1420, 1425, 1436], "set": [0, 4, 9, 14, 16, 21, 92, 93, 125, 137, 145, 207, 208, 214, 549, 551, 606, 664, 671, 921, 1027, 1404, 1414, 1425, 1427, 1428, 1429, 1435, 1436, 1440, 1441, 1442], "clear_mem": [0, 5, 9, 16, 102, 106, 1439], "fals": [0, 3, 4, 5, 9, 16, 17, 35, 40, 46, 53, 57, 77, 83, 92, 97, 102, 106, 115, 117, 124, 125, 128, 137, 147, 148, 152, 159, 160, 165, 166, 167, 173, 181, 185, 191, 193, 195, 201, 211, 214, 217, 221, 228, 233, 246, 329, 492, 498, 499, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 615, 618, 620, 624, 631, 638, 642, 647, 653, 659, 664, 665, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 727, 730, 731, 734, 735, 738, 739, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 814, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 890, 894, 895, 899, 900, 904, 909, 910, 919, 920, 921, 928, 930, 936, 942, 949, 950, 951, 952, 953, 954, 961, 963, 964, 966, 967, 970, 972, 973, 981, 982, 983, 984, 985, 986, 995, 1027, 1028, 1029, 1033, 1035, 1037, 1039, 1043, 1045, 1050, 1052, 1057, 1059, 1065, 1067, 1069, 1073, 1077, 1133, 1143, 1172, 1201, 1379, 1397, 1419, 1425, 1430], "print": [0, 9, 16, 102, 114, 561, 566, 919, 921, 928, 948, 955, 959, 961, 964, 968, 979, 987, 990, 992, 1027, 1076, 1097, 1099, 1106, 1114, 1117, 1122, 1180, 1189, 1191, 1197, 1380, 1385, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1437, 1438, 1439, 1440, 1441, 1442], "arg": [0, 9, 10, 16, 17, 20, 102, 112, 114, 191, 198, 211, 213, 214, 216, 221, 227, 228, 232, 493, 494, 558, 560, 561, 565, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 727, 730, 731, 734, 735, 738, 739, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 919, 928, 938, 948, 955, 958, 961, 963, 964, 968, 979, 987, 990, 992, 1199, 1200, 1239, 1240, 1380, 1385, 1386, 1387, 1388, 1389, 1394, 1397, 1413, 1419], "vlim": [0, 9, 16, 102, 114], "1": [0, 1, 9, 16, 83, 84, 102, 114, 194, 195, 236, 238, 246, 257, 306, 325, 329, 371, 376, 417, 418, 419, 426, 492, 494, 495, 496, 497, 499, 549, 619, 620, 627, 634, 695, 696, 698, 703, 709, 714, 715, 721, 813, 819, 863, 914, 917, 919, 921, 928, 930, 931, 966, 967, 994, 1025, 1027, 1084, 1085, 1124, 1141, 1146, 1166, 1167, 1181, 1184, 1199, 1204, 1228, 1229, 1255, 1256, 1257, 1269, 1270, 1293, 1294, 1300, 1304, 1310, 1314, 1320, 1324, 1331, 1338, 1339, 1341, 1347, 1348, 1349, 1352, 1363, 1370, 1372, 1381, 1396, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1410, 1419, 1422, 1424, 1426, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1440, 1441, 1442], "kwarg": [0, 3, 4, 9, 10, 11, 16, 17, 20, 21, 102, 112, 114, 173, 178, 191, 198, 211, 213, 214, 216, 217, 220, 221, 227, 228, 232, 246, 276, 371, 394, 493, 494, 558, 560, 561, 565, 567, 574, 582, 583, 590, 591, 593, 600, 618, 624, 631, 638, 639, 642, 643, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 727, 730, 731, 734, 735, 738, 739, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 914, 917, 919, 921, 926, 928, 935, 948, 949, 950, 951, 952, 953, 954, 955, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 992, 994, 1004, 1009, 1010, 1076, 1077, 1097, 1098, 1099, 1100, 1106, 1107, 1108, 1117, 1118, 1119, 1124, 1126, 1129, 1166, 1167, 1180, 1181, 1189, 1190, 1191, 1192, 1197, 1198, 1199, 1200, 1204, 1214, 1218, 1219, 1223, 1224, 1229, 1234, 1235, 1239, 1240, 1245, 1250, 1251, 1255, 1293, 1338, 1341, 1347, 1348, 1352, 1363, 1369, 1372, 1378, 1379, 1380, 1385, 1386, 1387, 1388, 1389, 1394, 1397, 1404, 1419], "function": [0, 9, 16, 36, 42, 48, 55, 59, 79, 85, 94, 102, 114, 125, 126, 127, 131, 139, 149, 151, 152, 155, 175, 176, 182, 184, 185, 188, 195, 212, 223, 500, 506, 508, 509, 514, 521, 528, 534, 536, 537, 543, 555, 569, 570, 577, 578, 585, 586, 592, 595, 596, 602, 603, 608, 612, 616, 620, 638, 639, 640, 644, 649, 655, 661, 667, 673, 677, 682, 685, 688, 690, 693, 700, 704, 710, 716, 722, 755, 761, 766, 774, 780, 786, 955, 956, 960, 981, 982, 983, 984, 985, 986, 995, 1015, 1018, 1020, 1022, 1025, 1027, 1076, 1088, 1095, 1096, 1097, 1099, 1104, 1105, 1106, 1112, 1116, 1117, 1118, 1124, 1133, 1138, 1139, 1141, 1142, 1143, 1154, 1155, 1162, 1163, 1166, 1170, 1171, 1174, 1180, 1181, 1187, 1188, 1189, 1190, 1191, 1192, 1196, 1197, 1198, 1199, 1213, 1217, 1218, 1222, 1223, 1227, 1228, 1233, 1234, 1238, 1239, 1244, 1249, 1250, 1254, 1255, 1256, 1262, 1263, 1268, 1269, 1274, 1275, 1280, 1281, 1286, 1287, 1290, 1293, 1294, 1304, 1314, 1324, 1338, 1339, 1347, 1349, 1359, 1360, 1363, 1370, 1380, 1386, 1387, 1388, 1389, 1394, 1398, 1405, 1411, 1412, 1413, 1414, 1415, 1418, 1419, 1420, 1425, 1429, 1431, 1432, 1437, 1441], "base": [0, 9, 11, 16, 35, 36, 40, 42, 46, 48, 53, 55, 57, 59, 62, 77, 79, 83, 85, 87, 89, 90, 91, 92, 94, 102, 114, 125, 126, 128, 129, 131, 137, 139, 140, 147, 149, 152, 155, 159, 160, 170, 173, 181, 182, 185, 188, 191, 201, 211, 212, 214, 217, 221, 223, 228, 233, 246, 308, 371, 492, 496, 497, 498, 500, 506, 509, 517, 519, 521, 526, 528, 534, 537, 547, 551, 552, 555, 561, 567, 574, 582, 590, 593, 600, 606, 608, 611, 612, 614, 616, 618, 624, 631, 638, 640, 642, 644, 647, 649, 653, 655, 659, 661, 664, 667, 671, 673, 675, 677, 680, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 700, 702, 704, 708, 710, 714, 716, 720, 722, 726, 730, 734, 738, 742, 746, 749, 753, 755, 759, 761, 764, 766, 771, 774, 778, 780, 784, 786, 790, 793, 800, 803, 808, 813, 819, 820, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 955, 962, 965, 974, 977, 978, 980, 996, 1013, 1019, 1023, 1024, 1028, 1067, 1106, 1117, 1124, 1133, 1166, 1172, 1174, 1180, 1214, 1219, 1224, 1229, 1239, 1245, 1251, 1290, 1389, 1405, 1408, 1409, 1411, 1414, 1415, 1418, 1419, 1420, 1422, 1425, 1427, 1433, 1434, 1436, 1437, 1439, 1440, 1441, 1442], "verbos": [0, 1, 9, 16, 35, 37, 40, 43, 46, 50, 53, 57, 60, 62, 64, 66, 69, 71, 73, 75, 77, 80, 83, 92, 97, 102, 103, 114, 125, 128, 137, 141, 142, 143, 147, 152, 159, 160, 164, 167, 169, 173, 177, 181, 185, 191, 201, 203, 211, 214, 217, 221, 228, 233, 236, 238, 492, 494, 495, 496, 497, 498, 499, 502, 506, 510, 512, 514, 517, 519, 522, 526, 529, 534, 538, 540, 541, 543, 547, 551, 552, 561, 564, 567, 571, 574, 579, 582, 587, 590, 593, 597, 600, 606, 609, 611, 614, 618, 624, 628, 631, 635, 638, 642, 645, 647, 650, 653, 656, 659, 662, 664, 668, 671, 675, 678, 680, 684, 687, 690, 695, 697, 699, 702, 705, 706, 708, 711, 712, 714, 717, 718, 720, 723, 724, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 770, 771, 777, 778, 783, 784, 790, 793, 798, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 871, 873, 877, 881, 885, 889, 894, 899, 904, 909, 914, 917, 928, 930, 931, 966, 967, 981, 982, 983, 984, 985, 986, 1076, 1083, 1084, 1085, 1086, 1097, 1099, 1103, 1106, 1117, 1124, 1127, 1128, 1133, 1134, 1135, 1141, 1142, 1143, 1146, 1166, 1167, 1172, 1175, 1176, 1180, 1184, 1185, 1189, 1191, 1197, 1199, 1204, 1213, 1218, 1223, 1228, 1232, 1234, 1239, 1241, 1242, 1244, 1248, 1250, 1256, 1260, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1300, 1304, 1310, 1314, 1320, 1324, 1331, 1338, 1339, 1341, 1347, 1349, 1352, 1363, 1370, 1372, 1380, 1381, 1385, 1396, 1404, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "chunk": [0, 1, 3, 4, 9, 16, 17, 20, 21, 35, 36, 40, 42, 46, 48, 53, 55, 57, 59, 77, 79, 83, 85, 92, 94, 102, 103, 104, 117, 124, 125, 126, 128, 131, 137, 139, 143, 147, 149, 152, 155, 159, 160, 169, 173, 181, 182, 185, 188, 191, 201, 203, 211, 212, 214, 217, 221, 223, 228, 233, 498, 500, 502, 506, 509, 512, 517, 519, 521, 522, 526, 528, 534, 537, 541, 547, 551, 552, 555, 567, 574, 582, 590, 593, 600, 606, 608, 609, 611, 612, 614, 616, 618, 624, 631, 638, 640, 642, 644, 645, 647, 649, 653, 655, 659, 661, 664, 667, 668, 671, 673, 675, 677, 680, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 730, 734, 738, 742, 746, 749, 753, 755, 759, 761, 764, 766, 771, 774, 778, 780, 784, 786, 790, 793, 798, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172, 1174, 1176, 1406, 1409, 1425, 1428, 1430, 1433, 1435, 1436, 1437, 1439, 1440, 1441, 1442], "d": [0, 9, 16, 26, 30, 31, 102, 104, 207, 208, 214, 215, 243, 244, 246, 325, 371, 461, 699, 813, 814, 919, 920, 1027, 1076, 1077, 1099, 1100, 1213, 1214, 1255, 1293, 1294, 1295, 1298, 1304, 1305, 1308, 1314, 1315, 1318, 1324, 1325, 1328, 1398, 1399, 1404, 1419, 1421, 1428, 1431, 1437, 1439], "properti": [0, 9, 13, 15, 16, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 46, 53, 57, 77, 83, 92, 95, 102, 110, 117, 121, 122, 123, 125, 128, 137, 147, 152, 159, 160, 168, 170, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 236, 239, 240, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 855, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 914, 918, 1027, 1076, 1082, 1087, 1089, 1090, 1093, 1094, 1097, 1099, 1106, 1111, 1113, 1115, 1117, 1120, 1121, 1123, 1124, 1130, 1136, 1137, 1140, 1147, 1150, 1151, 1154, 1155, 1156, 1157, 1158, 1160, 1166, 1172, 1180, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1380, 1387, 1389, 1393], "idata_mem": [0, 9, 16, 102, 110], "current": [0, 9, 13, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 64, 69, 73, 87, 90, 91, 92, 95, 102, 110, 338, 974, 977, 978, 1124, 1137, 1166, 1199, 1338, 1347, 1363, 1414, 1434, 1436], "idata": [0, 5, 9, 16, 102, 106, 108, 109, 110, 115, 143, 169, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176, 1425], "memori": [0, 3, 4, 5, 9, 16, 20, 21, 102, 106, 107, 110, 143, 169, 203, 246, 296, 371, 498, 499, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176, 1255, 1293, 1425, 1440], "store_model_data": [0, 9, 16, 102, 115], "forc": [0, 3, 4, 9, 16, 20, 21, 53, 83, 92, 97, 102, 115, 125, 128, 147, 152, 159, 160, 167, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 338, 498, 506, 517, 519, 552, 606, 611, 614, 618, 638, 642, 664, 671, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 784, 808, 835, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1414, 1427], "store": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 105, 115, 118, 120, 125, 128, 137, 138, 143, 147, 152, 159, 160, 163, 165, 169, 173, 181, 185, 191, 193, 201, 203, 211, 214, 217, 221, 228, 233, 498, 502, 506, 512, 517, 519, 522, 526, 534, 541, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 609, 611, 614, 618, 624, 631, 638, 642, 645, 647, 653, 659, 664, 668, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 706, 708, 712, 714, 718, 720, 724, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 798, 800, 803, 808, 813, 819, 825, 830, 835, 851, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172, 1176, 1255, 1293, 1432], "get_model_data": [0, 9, 16, 102, 107], "from": [0, 9, 16, 35, 40, 46, 47, 49, 53, 57, 77, 83, 92, 102, 107, 108, 117, 120, 125, 128, 129, 137, 147, 152, 159, 160, 163, 165, 166, 173, 174, 175, 181, 185, 191, 193, 196, 201, 211, 214, 217, 221, 222, 226, 228, 233, 241, 242, 243, 244, 246, 251, 255, 257, 338, 371, 376, 449, 450, 474, 475, 490, 491, 494, 495, 498, 499, 506, 508, 517, 519, 526, 534, 536, 547, 549, 551, 552, 567, 568, 569, 574, 575, 577, 582, 583, 585, 590, 591, 592, 593, 594, 595, 600, 601, 602, 606, 607, 611, 614, 618, 621, 624, 631, 638, 642, 643, 647, 653, 659, 660, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 754, 759, 764, 765, 769, 771, 778, 779, 784, 785, 790, 793, 798, 800, 803, 808, 813, 814, 819, 825, 830, 835, 856, 862, 863, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 914, 919, 920, 960, 963, 970, 972, 973, 981, 982, 983, 984, 985, 986, 990, 994, 996, 997, 998, 999, 1024, 1027, 1075, 1124, 1127, 1128, 1159, 1166, 1172, 1199, 1255, 1293, 1338, 1347, 1363, 1379, 1400, 1401, 1402, 1403, 1412, 1413, 1414, 1418, 1419, 1421, 1422, 1425, 1427, 1428, 1430, 1431, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1442], "del_model_data": [0, 9, 16, 102, 105], "remov": [0, 9, 16, 102, 105, 664, 670, 1425, 1427, 1435], "update_n_turbin": [0, 9, 16, 102, 116], "reset": [0, 9, 16, 102, 116, 506, 514, 517, 534, 543, 547, 664, 670, 1433, 1435, 1437], "accord": [0, 9, 16, 102, 116, 173, 176, 494, 567, 570, 574, 578, 582, 586, 590, 593, 596, 600, 603, 631, 632, 738, 1004, 1009, 1010, 1432, 1436], "self": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 116, 125, 128, 137, 143, 147, 152, 159, 160, 162, 166, 169, 173, 181, 185, 191, 201, 203, 211, 214, 217, 221, 228, 233, 246, 248, 249, 250, 256, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 498, 502, 506, 512, 517, 519, 522, 526, 534, 541, 547, 551, 552, 554, 567, 574, 576, 582, 584, 590, 593, 600, 606, 609, 611, 614, 618, 624, 625, 626, 631, 633, 638, 642, 645, 647, 653, 659, 664, 668, 671, 675, 680, 684, 687, 690, 692, 695, 697, 699, 702, 706, 708, 712, 714, 718, 720, 724, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 773, 778, 784, 790, 793, 798, 800, 803, 808, 813, 815, 819, 821, 825, 827, 830, 832, 835, 856, 858, 862, 864, 867, 869, 873, 877, 881, 885, 889, 894, 899, 904, 909, 926, 1149, 1153, 1172, 1176, 1206, 1208, 1234, 1235, 1239, 1240, 1290, 1291, 1298, 1308, 1318, 1328, 1333, 1335, 1354, 1356, 1387, 1389, 1390], "get_models_idata": [0, 9, 16, 102, 109], "get_models_data": [0, 9, 16, 102, 108], "creat": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 108, 113, 117, 120, 125, 128, 137, 143, 147, 152, 159, 160, 169, 172, 173, 175, 176, 179, 181, 185, 191, 201, 203, 211, 214, 217, 221, 228, 233, 246, 276, 371, 394, 498, 502, 506, 512, 517, 519, 522, 526, 534, 541, 547, 549, 551, 552, 565, 567, 569, 570, 572, 574, 577, 578, 580, 582, 585, 586, 588, 590, 592, 593, 595, 596, 598, 600, 602, 603, 605, 606, 609, 611, 614, 618, 624, 631, 638, 642, 645, 647, 653, 659, 664, 668, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 706, 708, 712, 714, 718, 720, 724, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 914, 917, 919, 921, 948, 968, 972, 974, 979, 981, 982, 983, 984, 985, 986, 987, 990, 992, 995, 1172, 1176, 1201, 1413, 1418, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "xarrai": [0, 3, 4, 9, 11, 16, 17, 20, 21, 23, 24, 25, 32, 35, 40, 46, 53, 57, 64, 69, 73, 77, 83, 91, 92, 102, 108, 113, 117, 118, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 201, 211, 214, 498, 499, 506, 517, 519, 526, 534, 547, 551, 552, 606, 611, 614, 618, 624, 631, 638, 642, 643, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 919, 920, 928, 929, 961, 962, 963, 965, 969, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 1027, 1172, 1404, 1411, 1425, 1428, 1431, 1437, 1438, 1439], "input": [0, 9, 16, 102, 108, 126, 127, 151, 184, 217, 218, 219, 371, 417, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 638, 639, 642, 643, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 751, 752, 893, 898, 903, 908, 913, 1027, 1255, 1293, 1396, 1405, 1414, 1421, 1425, 1428, 1429, 1430, 1431, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "new_point_data": [0, 9, 16, 102, 113], "states_indic": [0, 9, 16, 102, 113], "contain": [0, 9, 16, 102, 113, 117, 118, 120, 561, 996, 998, 999, 1143, 1379, 1411, 1412, 1413, 1414, 1415, 1419, 1430, 1431, 1432, 1434, 1435, 1438, 1440], "onli": [0, 9, 16, 102, 113, 222, 257, 376, 492, 574, 753, 800, 801, 803, 806, 813, 817, 819, 823, 825, 828, 856, 860, 862, 865, 867, 868, 870, 970, 972, 973, 1025, 1133, 1255, 1293, 1425, 1427, 1429, 1431, 1432, 1438, 1439, 1440, 1442], "new": [0, 9, 16, 102, 112, 173, 178, 179, 191, 198, 211, 213, 214, 216, 217, 220, 221, 227, 228, 232, 235, 246, 257, 276, 329, 338, 371, 376, 394, 419, 567, 572, 574, 580, 582, 588, 590, 593, 598, 600, 605, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 876, 880, 884, 888, 892, 897, 902, 907, 912, 919, 928, 948, 955, 958, 961, 964, 968, 979, 981, 982, 983, 984, 985, 986, 987, 990, 992, 1027, 1091, 1092, 1124, 1131, 1132, 1166, 1199, 1294, 1296, 1297, 1304, 1306, 1307, 1314, 1316, 1317, 1324, 1326, 1327, 1338, 1347, 1363, 1425, 1427, 1431, 1432], "algo_typ": [0, 9, 16, 102, 112], "run": [0, 1, 9, 16, 19, 29, 35, 40, 46, 53, 57, 77, 83, 92, 102, 103, 112, 125, 128, 137, 139, 147, 148, 152, 159, 160, 163, 173, 178, 181, 185, 191, 198, 201, 211, 213, 214, 216, 217, 218, 220, 221, 227, 228, 232, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 665, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 747, 749, 751, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 893, 894, 898, 899, 903, 904, 908, 909, 913, 919, 928, 948, 955, 958, 961, 964, 968, 979, 987, 990, 992, 1124, 1126, 1162, 1163, 1170, 1171, 1172, 1348, 1359, 1360, 1380, 1381, 1386, 1387, 1388, 1389, 1394, 1411, 1414, 1415, 1425, 1428, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441], "time": [0, 9, 16, 102, 112, 173, 178, 191, 198, 211, 213, 214, 216, 217, 220, 221, 227, 228, 232, 499, 567, 574, 582, 590, 593, 600, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 919, 928, 942, 948, 955, 958, 961, 964, 968, 979, 987, 990, 992, 1172, 1255, 1293, 1415, 1425, 1427, 1429, 1430, 1433, 1434, 1435, 1437, 1439, 1440, 1441], "factori": [0, 9, 16, 102, 112, 173, 178, 191, 198, 211, 213, 214, 216, 217, 220, 221, 227, 228, 232, 567, 574, 582, 590, 593, 600, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 919, 928, 948, 955, 958, 961, 964, 968, 979, 987, 990, 992], "__repr__": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 162, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 246, 284, 371, 401, 498, 506, 517, 519, 526, 534, 547, 551, 552, 554, 567, 574, 576, 582, 584, 590, 593, 600, 606, 611, 614, 618, 624, 626, 631, 633, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 692, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 773, 778, 784, 790, 793, 800, 803, 808, 813, 815, 819, 821, 825, 827, 830, 832, 835, 856, 858, 862, 864, 867, 869, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172], "repr": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 162, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 246, 284, 371, 401, 498, 506, 517, 519, 526, 534, 547, 551, 552, 554, 567, 574, 576, 582, 584, 590, 593, 600, 606, 611, 614, 618, 624, 626, 631, 633, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 692, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 773, 778, 784, 790, 793, 800, 803, 808, 813, 815, 819, 821, 825, 827, 830, 832, 835, 856, 858, 862, 864, 867, 869, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1027, 1172], "model_id": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 170, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172], "uniqu": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 170, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172], "id": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 170, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 492, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1027, 1172, 1426], "type": [0, 9, 16, 35, 40, 46, 53, 57, 71, 72, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 170, 173, 181, 185, 191, 201, 207, 208, 211, 214, 216, 217, 221, 228, 233, 246, 257, 276, 338, 371, 376, 394, 498, 506, 517, 519, 526, 534, 547, 551, 552, 561, 563, 565, 566, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 798, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 992, 994, 1027, 1172, 1201, 1234, 1235, 1239, 1240, 1255, 1290, 1291, 1293, 1387, 1389, 1390, 1410, 1411, 1414, 1418, 1425, 1428, 1429, 1430, 1431, 1432, 1434, 1435, 1437, 1438, 1439, 1440, 1442], "var": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 127, 128, 137, 147, 152, 159, 160, 172, 173, 176, 181, 185, 191, 201, 211, 214, 217, 219, 221, 228, 233, 246, 367, 371, 441, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 570, 574, 578, 582, 586, 590, 593, 596, 600, 603, 606, 611, 614, 615, 618, 624, 631, 638, 642, 647, 653, 654, 659, 664, 666, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 748, 749, 752, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 928, 933, 934, 937, 938, 939, 940, 941, 947, 948, 949, 950, 951, 952, 953, 954, 968, 970, 972, 973, 990, 995, 1027, 1076, 1079, 1097, 1099, 1106, 1117, 1124, 1143, 1159, 1161, 1166, 1167, 1168, 1169, 1172, 1180, 1189, 1191, 1197, 1199, 1209, 1210, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1255, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1293, 1338, 1344, 1345, 1347, 1357, 1358, 1363, 1375, 1376, 1410, 1437], "v": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 172, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172, 1255, 1293, 1400, 1401], "variabl": [0, 3, 4, 9, 11, 14, 16, 20, 21, 35, 36, 38, 40, 42, 44, 46, 48, 49, 51, 53, 55, 56, 57, 59, 61, 71, 72, 77, 79, 81, 83, 84, 85, 86, 92, 94, 98, 102, 125, 126, 127, 128, 131, 133, 137, 139, 144, 147, 149, 150, 151, 152, 155, 157, 159, 160, 166, 172, 173, 179, 181, 182, 183, 184, 185, 188, 189, 191, 192, 193, 195, 199, 201, 204, 211, 212, 214, 217, 219, 221, 222, 226, 228, 229, 230, 231, 233, 234, 235, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 498, 499, 500, 503, 506, 508, 509, 513, 517, 519, 521, 523, 526, 527, 528, 530, 534, 536, 537, 542, 547, 549, 551, 552, 555, 556, 567, 572, 574, 580, 582, 588, 590, 593, 598, 600, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 624, 625, 631, 632, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 653, 654, 655, 657, 659, 660, 661, 663, 664, 666, 667, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 707, 708, 709, 710, 713, 714, 715, 716, 719, 720, 721, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 743, 745, 746, 748, 749, 750, 752, 753, 759, 760, 764, 769, 771, 778, 784, 785, 790, 791, 792, 793, 794, 795, 796, 797, 800, 802, 803, 804, 805, 807, 808, 810, 811, 812, 813, 814, 816, 818, 819, 820, 822, 824, 825, 826, 829, 830, 831, 833, 834, 835, 856, 857, 859, 861, 862, 863, 866, 867, 868, 872, 873, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 921, 928, 933, 934, 937, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 960, 963, 964, 966, 967, 968, 970, 971, 972, 973, 979, 981, 982, 983, 984, 985, 986, 987, 989, 990, 992, 994, 995, 1076, 1079, 1080, 1081, 1084, 1085, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1101, 1102, 1105, 1106, 1109, 1110, 1116, 1117, 1124, 1127, 1128, 1131, 1132, 1133, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1177, 1180, 1181, 1182, 1183, 1184, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1198, 1199, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1244, 1246, 1247, 1250, 1252, 1253, 1255, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1293, 1294, 1296, 1297, 1299, 1301, 1302, 1303, 1304, 1306, 1307, 1309, 1311, 1312, 1313, 1314, 1316, 1317, 1319, 1321, 1322, 1323, 1324, 1326, 1327, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1405, 1408, 1410, 1413, 1414, 1415, 1416, 1425, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "flag": [0, 2, 3, 4, 9, 11, 16, 17, 20, 21, 29, 35, 40, 46, 53, 57, 64, 69, 73, 77, 83, 92, 102, 125, 128, 137, 139, 147, 148, 152, 159, 160, 168, 173, 181, 185, 191, 201, 211, 214, 217, 221, 222, 228, 233, 246, 324, 371, 495, 498, 499, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 625, 631, 632, 638, 642, 647, 653, 659, 664, 665, 671, 672, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 727, 730, 731, 734, 735, 738, 739, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 814, 819, 825, 830, 835, 856, 862, 867, 868, 873, 877, 881, 885, 889, 890, 894, 895, 899, 900, 904, 909, 910, 919, 920, 921, 930, 936, 942, 943, 949, 950, 951, 952, 953, 954, 963, 966, 970, 972, 973, 981, 982, 983, 984, 985, 986, 995, 1002, 1033, 1043, 1050, 1057, 1065, 1073, 1076, 1087, 1097, 1099, 1106, 1117, 1124, 1130, 1133, 1138, 1143, 1150, 1166, 1172, 1180, 1186, 1189, 1191, 1195, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1261, 1263, 1267, 1269, 1273, 1275, 1279, 1281, 1285, 1287, 1289, 1290, 1292, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1380, 1381, 1387, 1389, 1393, 1427, 1431], "sub_model": [0, 9, 16, 35, 39, 40, 45, 46, 52, 53, 57, 77, 82, 83, 92, 100, 102, 125, 128, 135, 137, 146, 147, 152, 158, 159, 160, 171, 173, 180, 181, 185, 190, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 532, 534, 545, 547, 551, 552, 557, 567, 573, 574, 581, 582, 589, 590, 593, 599, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 658, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 758, 759, 764, 771, 778, 784, 789, 790, 793, 799, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172, 1425], "sub": [0, 9, 16, 35, 39, 40, 45, 46, 52, 53, 57, 77, 82, 83, 92, 100, 102, 125, 128, 135, 137, 146, 147, 152, 158, 159, 160, 171, 173, 180, 181, 185, 190, 191, 201, 211, 214, 217, 221, 228, 233, 338, 498, 506, 517, 519, 526, 532, 534, 545, 547, 551, 552, 557, 567, 573, 574, 581, 582, 589, 590, 593, 599, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 658, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 758, 759, 764, 771, 778, 784, 789, 790, 793, 799, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1167, 1172, 1201, 1415, 1425, 1431], "load_data": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 143, 147, 152, 159, 160, 169, 173, 181, 185, 191, 201, 203, 211, 214, 217, 221, 228, 233, 498, 502, 506, 512, 517, 519, 522, 526, 534, 541, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 609, 611, 614, 618, 624, 631, 638, 642, 645, 647, 653, 659, 664, 668, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 706, 708, 712, 714, 718, 720, 724, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172, 1176, 1425], "algo": [0, 9, 16, 35, 36, 37, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 59, 60, 61, 62, 64, 66, 69, 71, 73, 75, 77, 79, 80, 81, 83, 85, 86, 87, 89, 90, 91, 92, 94, 97, 98, 101, 102, 117, 124, 125, 126, 127, 128, 131, 133, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 155, 157, 159, 160, 163, 164, 165, 166, 167, 169, 173, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 191, 193, 195, 196, 199, 201, 203, 204, 206, 211, 212, 214, 217, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 235, 498, 500, 502, 503, 505, 506, 509, 510, 512, 513, 514, 516, 517, 519, 521, 522, 523, 525, 526, 528, 529, 530, 533, 534, 537, 538, 540, 541, 542, 543, 546, 547, 550, 551, 552, 555, 556, 561, 564, 567, 569, 570, 571, 572, 574, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 592, 593, 595, 596, 597, 598, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 624, 628, 631, 635, 638, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 653, 655, 656, 657, 659, 661, 662, 663, 664, 667, 668, 669, 671, 673, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 730, 734, 738, 742, 746, 749, 753, 755, 756, 757, 759, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 786, 787, 788, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 822, 823, 824, 825, 828, 829, 830, 833, 834, 835, 851, 856, 859, 860, 861, 862, 865, 866, 867, 870, 871, 872, 873, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 928, 930, 942, 948, 961, 962, 963, 974, 977, 978, 979, 980, 1124, 1126, 1162, 1163, 1166, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1179, 1199, 1338, 1347, 1348, 1359, 1360, 1363, 1369, 1428, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "0": [0, 1, 9, 16, 35, 37, 40, 43, 46, 50, 53, 57, 60, 62, 64, 66, 69, 71, 73, 75, 77, 80, 83, 84, 92, 97, 102, 103, 125, 128, 137, 141, 142, 143, 147, 152, 159, 160, 164, 167, 169, 173, 177, 181, 185, 191, 194, 201, 203, 211, 214, 217, 221, 228, 233, 238, 246, 251, 256, 306, 329, 371, 375, 421, 426, 492, 494, 495, 496, 497, 498, 502, 506, 507, 510, 512, 514, 517, 518, 519, 522, 526, 529, 534, 535, 538, 540, 541, 543, 547, 548, 549, 551, 552, 561, 564, 567, 571, 574, 579, 582, 587, 590, 593, 597, 600, 606, 609, 611, 614, 618, 619, 624, 627, 628, 631, 634, 635, 638, 642, 645, 647, 648, 650, 653, 656, 659, 660, 662, 664, 668, 671, 675, 678, 680, 684, 687, 690, 695, 697, 699, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 770, 771, 772, 777, 778, 779, 783, 784, 785, 790, 793, 798, 800, 803, 804, 808, 809, 813, 814, 819, 820, 825, 826, 830, 831, 835, 850, 856, 857, 862, 863, 867, 868, 871, 873, 877, 881, 885, 889, 894, 899, 904, 909, 917, 921, 930, 931, 948, 950, 951, 953, 954, 961, 963, 966, 967, 981, 982, 983, 984, 985, 986, 994, 1011, 1013, 1015, 1019, 1020, 1023, 1025, 1027, 1076, 1083, 1084, 1085, 1086, 1097, 1099, 1103, 1106, 1117, 1124, 1127, 1128, 1133, 1134, 1135, 1141, 1142, 1143, 1146, 1166, 1167, 1172, 1175, 1176, 1180, 1181, 1184, 1185, 1189, 1191, 1197, 1199, 1204, 1213, 1218, 1223, 1228, 1232, 1234, 1239, 1241, 1242, 1244, 1248, 1250, 1255, 1256, 1260, 1263, 1269, 1270, 1275, 1281, 1287, 1290, 1293, 1294, 1300, 1304, 1310, 1314, 1320, 1324, 1331, 1338, 1339, 1341, 1347, 1349, 1352, 1363, 1370, 1372, 1380, 1381, 1396, 1401, 1402, 1404, 1410, 1419, 1420, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "load": [0, 3, 4, 9, 16, 20, 21, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 143, 147, 152, 159, 160, 169, 173, 181, 185, 191, 201, 203, 211, 214, 217, 221, 228, 233, 498, 499, 502, 506, 512, 517, 519, 522, 526, 534, 541, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 609, 611, 614, 618, 624, 631, 638, 642, 645, 647, 653, 659, 664, 668, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 706, 708, 712, 714, 718, 720, 724, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 798, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172, 1176, 1425, 1426, 1430], "subject": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 143, 147, 152, 159, 160, 169, 173, 181, 185, 191, 201, 203, 211, 214, 217, 221, 228, 233, 498, 502, 506, 512, 517, 519, 522, 526, 534, 541, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 609, 611, 614, 618, 624, 631, 638, 642, 645, 647, 653, 659, 664, 668, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 706, 708, 712, 714, 718, 720, 724, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1130, 1172, 1176], "get_data": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 166, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 853, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 968, 970, 990, 1172], "target": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 166, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172, 1436], "lookup": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 166, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 643, 647, 648, 653, 659, 664, 671, 675, 680, 681, 684, 687, 690, 695, 697, 699, 702, 703, 708, 709, 714, 715, 720, 721, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 942, 1172, 1414, 1425], "smfp": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 166, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172], "mdata": [0, 9, 16, 30, 35, 36, 40, 42, 46, 48, 49, 53, 55, 57, 59, 77, 79, 83, 85, 92, 94, 102, 125, 128, 131, 137, 139, 143, 147, 149, 152, 155, 159, 160, 163, 165, 166, 169, 173, 175, 176, 179, 181, 182, 185, 188, 191, 193, 195, 196, 201, 203, 211, 212, 214, 217, 221, 222, 223, 224, 225, 228, 229, 230, 231, 233, 234, 235, 498, 500, 502, 506, 509, 512, 517, 519, 521, 522, 526, 528, 534, 537, 541, 547, 551, 552, 555, 567, 569, 570, 572, 574, 577, 578, 580, 582, 585, 586, 588, 590, 592, 593, 595, 596, 598, 600, 602, 603, 604, 605, 606, 608, 609, 611, 612, 614, 616, 618, 620, 621, 624, 631, 638, 640, 642, 644, 645, 647, 649, 653, 655, 659, 661, 664, 667, 668, 671, 673, 675, 677, 680, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 730, 734, 738, 742, 746, 749, 753, 755, 756, 757, 759, 761, 762, 763, 764, 766, 767, 768, 771, 774, 775, 776, 778, 780, 781, 782, 784, 786, 787, 788, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 822, 823, 824, 825, 828, 829, 830, 833, 834, 835, 851, 852, 853, 854, 856, 859, 860, 861, 862, 865, 866, 867, 870, 872, 873, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 891, 892, 894, 896, 897, 899, 901, 902, 904, 906, 907, 909, 911, 912, 1172, 1174, 1176], "getter": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 166, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172], "entri": [0, 9, 14, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 108, 109, 115, 117, 119, 125, 128, 137, 143, 147, 152, 159, 160, 166, 169, 173, 181, 185, 191, 201, 203, 207, 211, 214, 217, 221, 228, 233, 498, 502, 506, 512, 517, 519, 522, 526, 534, 541, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 609, 611, 614, 618, 624, 631, 638, 642, 645, 647, 653, 659, 664, 668, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 706, 708, 712, 714, 718, 720, 724, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 798, 800, 803, 808, 813, 819, 825, 830, 835, 853, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 960, 1010, 1172, 1176, 1255, 1293, 1413, 1425, 1429, 1436], "data_to_stor": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 163, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172], "add": [0, 9, 16, 35, 40, 46, 53, 57, 66, 68, 77, 83, 92, 102, 117, 119, 125, 128, 130, 137, 147, 152, 154, 159, 160, 163, 173, 181, 185, 187, 191, 200, 201, 207, 209, 211, 214, 217, 221, 228, 231, 233, 235, 236, 238, 241, 492, 493, 494, 495, 496, 497, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 623, 624, 630, 631, 637, 638, 642, 647, 653, 659, 664, 666, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 812, 813, 818, 819, 824, 825, 829, 830, 834, 835, 856, 861, 862, 866, 867, 872, 873, 876, 877, 880, 881, 884, 885, 888, 889, 892, 894, 897, 899, 902, 904, 907, 909, 912, 914, 916, 921, 928, 930, 931, 949, 950, 951, 952, 953, 954, 995, 996, 998, 999, 1000, 1001, 1028, 1029, 1035, 1037, 1039, 1045, 1047, 1052, 1054, 1059, 1061, 1067, 1069, 1076, 1097, 1099, 1106, 1108, 1117, 1119, 1124, 1127, 1128, 1129, 1166, 1172, 1180, 1189, 1191, 1197, 1199, 1201, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1413, 1431, 1432, 1435, 1436, 1437, 1438, 1439, 1440], "local": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 163, 165, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 814, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1027, 1172, 1414, 1426, 1427, 1429, 1431, 1434, 1437, 1440], "intend": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 163, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 928, 943, 1172], "iter": [0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 29, 33, 35, 40, 46, 53, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 102, 125, 128, 137, 147, 152, 159, 160, 163, 166, 173, 181, 185, 191, 201, 211, 214, 217, 221, 226, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 769, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 974, 977, 978, 1027, 1172, 1406, 1409, 1418, 1425, 1428, 1437, 1439], "from_data_or_stor": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 165, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172], "ret_dim": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 165, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172], "safe": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 165, 173, 181, 185, 191, 201, 211, 214, 217, 221, 228, 233, 498, 506, 517, 519, 526, 534, 547, 551, 552, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1172], "centr": [1, 194, 480, 618, 619, 627, 634, 653, 764, 765, 771, 772, 778, 779, 803, 805, 813, 816, 819, 822, 856, 859, 1045, 1046, 1059, 1060, 1398, 1399, 1414, 1419, 1421, 1425, 1428, 1429, 1431, 1432, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "rotor_wd": [1, 1428, 1431, 1432, 1433, 1435, 1436, 1440, 1441], "auto": [1, 1404, 1428, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1439, 1440, 1441, 1442], "basic_ctrl": [1, 1428, 1432, 1437, 1439], "10000": [1, 17, 1428], "1000": [1, 102, 103, 426, 647, 648, 942, 1410, 1428, 1430, 1431, 1433, 1435, 1436, 1437, 1439, 1440, 1441, 1442], "dbook": [1, 102, 103, 494, 1429], "modelbook": [1, 17, 102, 103, 550, 561, 562, 563, 564, 565, 566, 990, 992, 993, 1412, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "book": [1, 17, 102, 103, 207, 208, 242, 494, 550, 793, 794, 804, 814, 820, 826, 831, 857, 863, 868, 990, 992, 993, 994, 996, 997, 1424, 1425, 1426, 1428, 1429, 1430, 1431, 1433, 1434, 1435, 1436, 1438, 1439, 1440, 1441], "windfarm": [1, 17, 102, 103, 236, 237, 238, 239, 240, 492, 493, 494, 495, 496, 497, 550, 919, 920, 1076, 1099, 1111, 1120, 1140, 1412, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "wind": [1, 17, 71, 72, 102, 103, 137, 140, 201, 207, 208, 236, 237, 238, 239, 369, 437, 438, 448, 449, 450, 454, 455, 473, 474, 475, 481, 483, 492, 493, 494, 495, 496, 497, 506, 519, 520, 526, 527, 550, 551, 647, 648, 680, 681, 696, 698, 702, 703, 708, 709, 714, 715, 720, 721, 726, 730, 734, 738, 746, 753, 759, 760, 784, 808, 813, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 889, 890, 894, 895, 899, 900, 904, 905, 909, 910, 919, 920, 922, 923, 936, 968, 970, 972, 973, 981, 982, 983, 984, 985, 986, 990, 994, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1026, 1076, 1097, 1099, 1106, 1111, 1117, 1120, 1124, 1140, 1166, 1180, 1189, 1191, 1197, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1400, 1401, 1402, 1403, 1405, 1410, 1412, 1413, 1414, 1415, 1416, 1419, 1420, 1421, 1424, 1425, 1426, 1428, 1430, 1431, 1432, 1434, 1435, 1437, 1438, 1439, 1440, 1442], "str": [1, 3, 4, 6, 12, 14, 16, 17, 20, 21, 27, 36, 38, 42, 44, 46, 48, 49, 51, 53, 55, 56, 57, 59, 61, 62, 63, 67, 71, 72, 79, 81, 85, 86, 94, 98, 112, 117, 118, 119, 120, 126, 127, 131, 133, 137, 139, 144, 145, 149, 150, 151, 155, 157, 160, 163, 165, 166, 172, 176, 178, 179, 182, 183, 184, 188, 189, 191, 192, 193, 195, 198, 199, 204, 207, 208, 212, 213, 214, 215, 216, 219, 220, 222, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 240, 243, 244, 246, 297, 338, 371, 413, 426, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 506, 508, 509, 513, 521, 523, 526, 527, 528, 530, 534, 536, 537, 542, 545, 549, 550, 555, 556, 558, 560, 561, 563, 565, 566, 567, 568, 570, 572, 578, 580, 586, 588, 596, 598, 603, 605, 606, 607, 608, 610, 612, 613, 614, 615, 616, 617, 620, 625, 632, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 655, 657, 659, 660, 661, 663, 664, 666, 667, 669, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 693, 694, 696, 698, 700, 701, 702, 703, 704, 707, 708, 709, 710, 713, 714, 715, 716, 719, 720, 721, 722, 725, 729, 733, 737, 741, 743, 745, 748, 752, 759, 760, 769, 784, 785, 791, 792, 793, 794, 795, 796, 797, 802, 804, 805, 807, 810, 811, 812, 813, 814, 816, 818, 819, 820, 822, 824, 825, 826, 829, 830, 831, 833, 834, 853, 856, 857, 859, 861, 863, 866, 867, 868, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 896, 897, 898, 901, 902, 903, 906, 907, 908, 911, 912, 913, 921, 924, 925, 926, 927, 933, 934, 937, 939, 940, 941, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 960, 963, 966, 967, 970, 971, 972, 973, 974, 975, 981, 982, 983, 984, 985, 986, 989, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1010, 1027, 1029, 1039, 1047, 1054, 1061, 1069, 1075, 1077, 1078, 1082, 1091, 1092, 1093, 1094, 1098, 1099, 1100, 1107, 1118, 1126, 1127, 1128, 1143, 1159, 1161, 1164, 1165, 1167, 1174, 1177, 1180, 1181, 1189, 1190, 1192, 1197, 1198, 1201, 1211, 1212, 1214, 1219, 1224, 1229, 1245, 1251, 1255, 1257, 1264, 1270, 1276, 1282, 1288, 1293, 1298, 1303, 1308, 1313, 1318, 1323, 1328, 1336, 1337, 1346, 1348, 1361, 1362, 1369, 1377, 1378, 1379, 1380, 1381, 1396, 1397, 1404, 1410, 1425, 1432], "Will": 1, "look": [1, 793, 794, 804, 814, 820, 826, 831, 857, 863, 868, 942, 1429, 1431, 1434, 1436, 1441], "up": [1, 793, 794, 804, 814, 820, 826, 831, 857, 863, 868, 942, 1425], "dict": [1, 3, 4, 10, 11, 14, 15, 16, 17, 20, 21, 36, 42, 46, 47, 48, 49, 55, 59, 65, 70, 71, 72, 74, 79, 83, 84, 85, 94, 102, 103, 108, 109, 110, 112, 114, 115, 117, 118, 120, 126, 127, 131, 137, 138, 139, 143, 145, 149, 151, 155, 169, 176, 179, 182, 184, 188, 193, 195, 198, 203, 212, 213, 216, 218, 222, 227, 229, 230, 231, 232, 243, 244, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 506, 508, 509, 512, 521, 522, 526, 527, 528, 534, 536, 537, 541, 549, 550, 555, 558, 559, 560, 561, 565, 567, 568, 570, 572, 578, 580, 583, 586, 588, 591, 596, 598, 603, 605, 606, 607, 608, 609, 612, 616, 620, 639, 640, 642, 643, 644, 645, 649, 653, 654, 655, 660, 661, 667, 668, 673, 676, 677, 682, 685, 688, 693, 696, 698, 700, 702, 703, 704, 706, 708, 709, 710, 712, 714, 715, 716, 718, 720, 721, 722, 724, 727, 728, 731, 732, 735, 736, 739, 740, 742, 743, 744, 747, 751, 764, 765, 771, 772, 778, 779, 791, 792, 793, 794, 795, 796, 797, 798, 802, 804, 805, 807, 810, 811, 812, 814, 816, 818, 820, 822, 824, 826, 829, 831, 833, 834, 855, 857, 859, 861, 863, 866, 867, 868, 872, 917, 921, 923, 933, 934, 935, 944, 945, 946, 949, 950, 951, 952, 953, 954, 958, 960, 962, 963, 965, 966, 967, 972, 973, 974, 975, 980, 981, 982, 983, 984, 985, 986, 989, 994, 996, 1004, 1009, 1010, 1027, 1029, 1039, 1047, 1054, 1061, 1069, 1077, 1091, 1092, 1098, 1100, 1107, 1118, 1124, 1126, 1127, 1128, 1167, 1168, 1169, 1174, 1176, 1180, 1181, 1189, 1190, 1192, 1197, 1198, 1200, 1204, 1209, 1210, 1214, 1219, 1224, 1229, 1245, 1251, 1255, 1293, 1298, 1308, 1318, 1328, 1341, 1344, 1345, 1348, 1352, 1357, 1358, 1369, 1372, 1375, 1376, 1378, 1379, 1380, 1381, 1386, 1388, 1394, 1396, 1397, 1404, 1411, 1419, 1430, 1431, 1436, 1437, 1439], "choic": [1, 102, 103, 207, 215, 447, 470, 921, 944, 945, 946, 1201, 1380, 1381, 1421, 1431, 1434, 1437, 1438, 1439, 1440, 1441, 1442], "parallel": [1, 35, 40, 46, 53, 57, 77, 83, 92, 102, 103, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 201, 211, 214, 498, 506, 517, 519, 526, 534, 547, 551, 552, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 1172, 1255, 1293, 1381, 1425, 1426, 1431, 1434, 1440, 1441], "dask": [1, 3, 4, 20, 21, 102, 103, 125, 1380, 1381, 1419, 1425, 1426, 1428, 1439, 1440], "e": [1, 102, 103, 125, 166, 549, 606, 607, 647, 648, 684, 687, 862, 960, 1010, 1027, 1124, 1154, 1155, 1166, 1199, 1255, 1293, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1379, 1397, 1412, 1414, 1425, 1426, 1427, 1430, 1431, 1432, 1433, 1434, 1437, 1442], "g": [1, 102, 103, 166, 647, 648, 808, 862, 960, 1010, 1255, 1293, 1379, 1397, 1412, 1414, 1425, 1426, 1428, 1430, 1433, 1438, 1442], "databook": [1, 102, 103, 241, 242, 494, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1412, 1419], "option": [1, 3, 4, 10, 11, 17, 20, 21, 47, 48, 62, 63, 67, 72, 78, 91, 103, 108, 109, 112, 113, 114, 124, 126, 127, 129, 139, 151, 155, 165, 166, 173, 174, 176, 184, 188, 193, 195, 198, 207, 208, 209, 210, 213, 215, 216, 222, 226, 227, 232, 236, 242, 338, 492, 493, 494, 495, 496, 497, 498, 499, 506, 508, 514, 517, 520, 527, 534, 536, 543, 547, 549, 555, 560, 563, 565, 566, 568, 570, 575, 578, 583, 586, 591, 594, 596, 601, 603, 620, 625, 632, 639, 643, 660, 676, 691, 696, 698, 702, 703, 708, 709, 714, 715, 720, 721, 727, 731, 735, 739, 743, 764, 765, 769, 778, 779, 785, 814, 825, 826, 856, 857, 868, 915, 917, 920, 921, 930, 935, 942, 943, 949, 950, 951, 952, 953, 954, 955, 956, 958, 962, 963, 965, 966, 967, 970, 972, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 992, 994, 995, 996, 997, 1009, 1010, 1029, 1033, 1039, 1043, 1047, 1050, 1054, 1057, 1061, 1065, 1069, 1073, 1075, 1077, 1080, 1081, 1098, 1100, 1101, 1102, 1107, 1109, 1110, 1118, 1126, 1127, 1128, 1133, 1143, 1167, 1181, 1182, 1183, 1189, 1190, 1192, 1193, 1194, 1197, 1198, 1200, 1201, 1204, 1214, 1215, 1216, 1219, 1220, 1221, 1224, 1225, 1226, 1229, 1230, 1231, 1236, 1237, 1245, 1246, 1247, 1251, 1252, 1253, 1255, 1257, 1258, 1259, 1265, 1266, 1271, 1272, 1277, 1278, 1283, 1284, 1293, 1295, 1298, 1305, 1308, 1315, 1318, 1325, 1328, 1341, 1348, 1352, 1369, 1372, 1378, 1379, 1380, 1381, 1397, 1404, 1418, 1425, 1427, 1431, 1433, 1434, 1436, 1440, 1441], "default": [1, 46, 47, 48, 75, 96, 102, 103, 108, 109, 132, 202, 222, 246, 338, 371, 494, 501, 506, 511, 534, 539, 563, 568, 574, 575, 582, 583, 591, 593, 594, 601, 643, 691, 785, 831, 835, 850, 924, 925, 926, 927, 930, 942, 968, 971, 990, 1004, 1143, 1255, 1293, 1379, 1387, 1404, 1408, 1410, 1419, 1425, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1438, 1439, 1440, 1442], "level": [1, 37, 43, 50, 60, 64, 69, 73, 80, 97, 102, 103, 141, 142, 143, 159, 164, 167, 169, 177, 203, 492, 494, 495, 496, 497, 499, 502, 510, 512, 514, 522, 529, 538, 540, 541, 543, 564, 571, 579, 587, 597, 609, 628, 631, 632, 635, 645, 650, 656, 662, 668, 678, 705, 706, 711, 712, 717, 718, 723, 724, 770, 777, 783, 798, 871, 917, 928, 930, 931, 935, 949, 950, 951, 952, 953, 954, 966, 967, 981, 982, 983, 984, 985, 986, 995, 1083, 1084, 1085, 1086, 1103, 1127, 1128, 1133, 1134, 1135, 1141, 1142, 1143, 1146, 1167, 1175, 1176, 1184, 1185, 1199, 1201, 1204, 1232, 1241, 1242, 1248, 1260, 1300, 1310, 1320, 1331, 1339, 1341, 1349, 1352, 1370, 1372, 1380, 1381, 1396, 1404, 1405, 1411, 1412, 1414, 1425, 1428, 1437], "mean": [1, 102, 103, 141, 233, 246, 334, 371, 921, 928, 933, 936, 937, 940, 944, 945, 946, 948, 963, 970, 972, 973, 979, 981, 982, 983, 1180, 1181, 1189, 1190, 1198, 1255, 1269, 1270, 1293, 1415, 1417, 1425, 1428, 1431, 1433, 1440, 1441], "silent": [1, 37, 43, 50, 60, 64, 69, 73, 80, 97, 102, 103, 141, 142, 143, 164, 167, 169, 177, 203, 238, 492, 494, 495, 496, 497, 502, 512, 514, 522, 529, 540, 541, 543, 564, 571, 579, 587, 597, 609, 628, 635, 645, 650, 656, 662, 668, 678, 706, 712, 718, 724, 770, 777, 783, 798, 871, 917, 930, 931, 966, 967, 981, 982, 983, 984, 985, 986, 1083, 1084, 1085, 1086, 1103, 1127, 1128, 1133, 1134, 1135, 1141, 1142, 1143, 1146, 1167, 1175, 1176, 1184, 1185, 1204, 1232, 1241, 1242, 1248, 1260, 1300, 1310, 1320, 1331, 1339, 1341, 1349, 1352, 1370, 1372, 1380, 1381, 1396, 1404], "bool": [2, 3, 4, 5, 11, 16, 17, 20, 21, 29, 64, 69, 73, 97, 106, 115, 124, 137, 139, 147, 148, 165, 166, 167, 168, 193, 195, 209, 210, 212, 222, 235, 246, 329, 371, 419, 492, 495, 498, 499, 549, 614, 615, 620, 624, 625, 631, 632, 640, 644, 649, 655, 661, 665, 667, 671, 672, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 726, 727, 730, 731, 734, 735, 738, 739, 791, 792, 795, 801, 802, 805, 807, 813, 814, 816, 822, 828, 833, 854, 859, 865, 867, 868, 870, 876, 880, 884, 888, 889, 890, 892, 894, 895, 897, 899, 900, 902, 907, 909, 910, 912, 919, 920, 921, 930, 936, 942, 943, 949, 950, 951, 952, 953, 954, 963, 966, 967, 970, 972, 973, 981, 982, 983, 984, 985, 986, 995, 1002, 1027, 1029, 1033, 1039, 1043, 1047, 1050, 1054, 1057, 1061, 1065, 1069, 1073, 1076, 1077, 1087, 1095, 1096, 1105, 1116, 1130, 1133, 1138, 1143, 1180, 1181, 1186, 1188, 1190, 1191, 1192, 1195, 1198, 1201, 1261, 1267, 1273, 1279, 1285, 1289, 1292, 1294, 1295, 1298, 1308, 1318, 1328, 1379, 1380, 1381, 1393, 1397, 1428, 1437, 1439], "includ": [2, 48, 128, 798, 992, 998, 1418, 1425, 1427, 1429, 1431, 1441, 1442], "mdl": [2, 1075], "chunked_result": [3, 4, 20, 21], "kei": [3, 4, 16, 17, 20, 21, 36, 42, 48, 49, 55, 59, 71, 72, 79, 85, 94, 110, 117, 118, 120, 126, 131, 139, 149, 155, 166, 176, 179, 182, 188, 193, 195, 212, 226, 229, 230, 231, 246, 264, 371, 426, 500, 509, 521, 526, 527, 528, 534, 536, 537, 549, 555, 558, 559, 561, 562, 567, 568, 570, 572, 578, 580, 586, 588, 596, 598, 603, 605, 608, 612, 616, 620, 640, 644, 649, 653, 654, 655, 661, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 769, 791, 792, 793, 794, 795, 796, 797, 802, 804, 805, 807, 810, 811, 812, 814, 816, 818, 820, 822, 824, 826, 829, 831, 833, 834, 835, 853, 857, 859, 861, 863, 866, 868, 872, 944, 945, 946, 960, 966, 967, 996, 1003, 1004, 1008, 1091, 1092, 1127, 1128, 1167, 1168, 1169, 1174, 1180, 1201, 1209, 1210, 1344, 1345, 1357, 1358, 1375, 1376, 1379, 1410, 1432], "valu": [3, 4, 14, 16, 17, 20, 21, 36, 42, 48, 49, 55, 59, 71, 72, 79, 85, 94, 110, 126, 127, 131, 139, 149, 155, 176, 179, 182, 188, 193, 195, 212, 221, 224, 229, 230, 231, 246, 249, 250, 258, 259, 261, 263, 265, 269, 270, 271, 272, 273, 274, 277, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 324, 329, 338, 371, 373, 374, 377, 378, 380, 381, 382, 387, 388, 389, 390, 391, 392, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 426, 465, 498, 499, 500, 506, 508, 509, 519, 520, 521, 526, 527, 528, 534, 536, 537, 549, 555, 561, 567, 568, 570, 572, 578, 580, 586, 588, 596, 598, 603, 605, 608, 612, 614, 615, 616, 620, 640, 643, 644, 647, 649, 653, 654, 655, 661, 667, 673, 677, 682, 685, 688, 691, 693, 700, 704, 710, 714, 716, 720, 722, 738, 742, 743, 749, 750, 753, 756, 759, 762, 764, 765, 767, 771, 775, 778, 779, 781, 784, 785, 787, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 818, 820, 822, 823, 824, 825, 826, 828, 829, 831, 833, 834, 835, 850, 851, 854, 857, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 872, 930, 935, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 966, 967, 970, 972, 973, 981, 982, 983, 984, 985, 986, 994, 995, 996, 1015, 1018, 1020, 1022, 1027, 1076, 1079, 1080, 1081, 1084, 1085, 1091, 1092, 1097, 1099, 1101, 1102, 1106, 1109, 1110, 1117, 1124, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1153, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171, 1174, 1180, 1182, 1183, 1184, 1189, 1191, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1241, 1242, 1244, 1246, 1247, 1250, 1252, 1253, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1294, 1296, 1297, 1299, 1301, 1302, 1304, 1306, 1307, 1309, 1311, 1312, 1314, 1316, 1317, 1319, 1321, 1322, 1324, 1326, 1327, 1329, 1330, 1332, 1333, 1334, 1335, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1347, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1363, 1370, 1371, 1373, 1374, 1375, 1376, 1379, 1386, 1388, 1394, 1410, 1414, 1419, 1421, 1425, 1428, 1430, 1435, 1436, 1442], "switch": [3, 4, 20, 21, 193, 949, 950, 951, 952, 953, 954, 995, 1180, 1181, 1190, 1198, 1425, 1428, 1431, 1436], "after": [3, 4, 11, 20, 21, 129, 195, 233, 234, 492, 620, 647, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 894, 896, 899, 901, 904, 906, 909, 911, 981, 982, 983, 984, 985, 986, 1431, 1435], "instead": [3, 4, 20, 21, 124, 165, 492, 498, 499, 506, 508, 534, 536, 813, 814, 889, 890, 894, 895, 899, 900, 909, 910, 966, 967, 970, 972, 973, 1124, 1133, 1166, 1199, 1255, 1293, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1425, 1427, 1433, 1439, 1441, 1442], "result": [3, 4, 9, 11, 16, 20, 21, 23, 24, 25, 32, 36, 42, 48, 53, 55, 57, 59, 62, 64, 66, 69, 71, 73, 75, 79, 85, 91, 94, 126, 127, 131, 139, 149, 151, 155, 176, 182, 184, 188, 191, 193, 195, 212, 218, 222, 230, 233, 234, 245, 338, 500, 509, 521, 528, 537, 555, 570, 574, 578, 586, 596, 603, 608, 612, 614, 615, 616, 618, 620, 624, 631, 640, 644, 649, 655, 661, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 728, 732, 736, 740, 744, 747, 751, 753, 797, 803, 805, 811, 813, 816, 819, 822, 856, 859, 875, 879, 881, 882, 883, 887, 889, 891, 894, 896, 899, 900, 901, 904, 906, 909, 911, 919, 920, 921, 928, 929, 930, 931, 933, 934, 935, 937, 939, 940, 941, 942, 944, 945, 946, 947, 961, 962, 963, 964, 965, 968, 969, 970, 972, 973, 978, 979, 980, 987, 988, 991, 1080, 1081, 1084, 1085, 1101, 1102, 1109, 1110, 1131, 1132, 1134, 1135, 1138, 1141, 1142, 1174, 1182, 1183, 1184, 1193, 1194, 1215, 1216, 1220, 1221, 1225, 1226, 1230, 1231, 1236, 1237, 1241, 1242, 1246, 1247, 1252, 1253, 1255, 1258, 1259, 1265, 1266, 1271, 1272, 1277, 1278, 1283, 1284, 1293, 1296, 1297, 1306, 1307, 1316, 1317, 1326, 1327, 1339, 1349, 1370, 1386, 1388, 1394, 1406, 1407, 1410, 1414, 1418, 1421, 1425, 1428, 1431, 1433, 1434, 1435, 1437, 1438, 1439, 1440, 1441, 1442], "addit": [3, 4, 17, 20, 21, 112, 127, 151, 184, 198, 213, 216, 222, 227, 232, 492, 493, 498, 499, 526, 527, 550, 583, 591, 639, 643, 696, 698, 703, 709, 715, 721, 727, 731, 735, 739, 742, 743, 867, 868, 949, 950, 951, 952, 953, 954, 958, 962, 963, 965, 966, 967, 974, 975, 980, 981, 982, 983, 984, 985, 986, 989, 994, 1077, 1098, 1100, 1107, 1118, 1124, 1126, 1167, 1181, 1189, 1190, 1192, 1197, 1198, 1204, 1341, 1348, 1352, 1369, 1372, 1378, 1379, 1396, 1404, 1425, 1436, 1440, 1441], "run_calcul": [3, 4, 20, 21, 35, 40, 46, 53, 57, 77, 83, 92, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 201, 211, 214, 498, 506, 517, 519, 526, 534, 547, 551, 552, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 1172], "dataset": [3, 4, 9, 11, 17, 20, 21, 23, 24, 25, 32, 64, 69, 73, 91, 108, 113, 125, 127, 151, 184, 498, 499, 919, 920, 928, 929, 961, 962, 963, 965, 969, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 1404, 1411, 1425, 1428, 1431, 1437, 1438, 1439], "have": [3, 4, 11, 20, 21, 195, 620, 638, 639, 963, 1255, 1293, 1399, 1414, 1425, 1427, 1431, 1433, 1434, 1435, 1436, 1437, 1438, 1441], "dimens": [3, 4, 11, 20, 21, 113, 117, 118, 119, 120, 127, 165, 166, 195, 246, 337, 352, 357, 371, 432, 434, 620, 928, 944, 945, 946, 963, 1402, 1410, 1414, 1428, 1429, 1431, 1437, 1438, 1439, 1442], "persist_mdata": [4, 21], "persist_pdata": 4, "numpi": [4, 16, 17, 21, 34, 36, 42, 48, 49, 55, 59, 79, 85, 94, 101, 113, 117, 126, 131, 136, 137, 139, 149, 155, 165, 166, 175, 176, 182, 188, 193, 194, 195, 196, 200, 206, 207, 208, 209, 210, 212, 218, 222, 223, 224, 225, 226, 229, 230, 231, 234, 235, 246, 257, 262, 371, 376, 496, 497, 500, 505, 509, 516, 521, 525, 528, 533, 537, 546, 555, 569, 570, 577, 578, 585, 586, 592, 595, 596, 602, 603, 604, 608, 612, 616, 619, 620, 621, 623, 627, 630, 634, 637, 638, 639, 640, 644, 649, 655, 661, 666, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 728, 732, 736, 740, 742, 743, 744, 747, 751, 755, 756, 757, 761, 762, 763, 766, 767, 768, 769, 774, 775, 776, 780, 781, 782, 786, 787, 788, 791, 792, 795, 796, 797, 801, 802, 805, 806, 807, 810, 811, 812, 816, 817, 818, 822, 823, 824, 828, 829, 833, 834, 851, 853, 854, 859, 860, 861, 865, 866, 870, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 896, 897, 901, 902, 906, 907, 911, 912, 922, 952, 953, 954, 963, 981, 982, 983, 984, 985, 986, 990, 995, 1025, 1026, 1027, 1031, 1032, 1033, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1065, 1066, 1071, 1072, 1073, 1074, 1079, 1095, 1096, 1105, 1116, 1124, 1126, 1133, 1136, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1168, 1169, 1174, 1179, 1188, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1255, 1293, 1298, 1299, 1301, 1302, 1308, 1309, 1311, 1312, 1318, 1319, 1321, 1322, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1340, 1342, 1343, 1344, 1345, 1350, 1351, 1353, 1354, 1355, 1356, 1357, 1358, 1371, 1373, 1374, 1375, 1376, 1398, 1399, 1400, 1401, 1402, 1403, 1410, 1428, 1430, 1431, 1435, 1437, 1438, 1439, 1442], "ndarrai": [4, 16, 17, 21, 34, 36, 42, 48, 49, 55, 59, 79, 85, 94, 101, 113, 119, 120, 126, 131, 136, 137, 139, 149, 155, 165, 166, 175, 176, 182, 188, 193, 194, 195, 196, 200, 206, 207, 208, 209, 210, 212, 218, 222, 223, 224, 225, 226, 229, 230, 231, 234, 235, 247, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 321, 322, 323, 326, 327, 330, 331, 333, 334, 335, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 496, 497, 500, 505, 509, 516, 521, 525, 528, 533, 537, 546, 555, 569, 570, 577, 578, 585, 586, 592, 595, 596, 602, 603, 604, 608, 612, 616, 619, 620, 621, 623, 627, 630, 634, 637, 638, 639, 640, 644, 649, 655, 661, 666, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 728, 732, 736, 740, 742, 743, 744, 747, 751, 755, 756, 757, 761, 762, 763, 766, 767, 768, 769, 774, 775, 776, 780, 781, 782, 786, 787, 788, 791, 792, 795, 796, 797, 801, 802, 805, 806, 807, 810, 811, 812, 816, 817, 818, 822, 823, 824, 828, 829, 833, 834, 851, 853, 854, 859, 860, 861, 865, 866, 870, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 896, 897, 901, 902, 906, 907, 911, 912, 922, 947, 952, 953, 954, 963, 981, 982, 983, 984, 985, 986, 990, 995, 1025, 1026, 1031, 1032, 1033, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1065, 1066, 1071, 1072, 1073, 1074, 1079, 1095, 1096, 1105, 1116, 1124, 1126, 1133, 1136, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1168, 1169, 1174, 1179, 1188, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1255, 1293, 1298, 1299, 1301, 1302, 1308, 1309, 1311, 1312, 1318, 1319, 1321, 1322, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1340, 1342, 1343, 1344, 1345, 1350, 1351, 1353, 1354, 1355, 1356, 1357, 1358, 1371, 1373, 1374, 1375, 1376, 1379, 1398, 1399, 1400, 1401, 1402, 1403, 1428, 1439, 1442], "interest": [4, 16, 17, 21, 46, 994, 1407, 1414, 1434, 1438, 1439], "shape": [4, 16, 17, 21, 34, 36, 42, 48, 49, 55, 59, 79, 85, 94, 101, 113, 120, 131, 136, 137, 139, 149, 155, 166, 175, 176, 182, 188, 193, 194, 195, 196, 200, 206, 207, 208, 209, 210, 212, 218, 222, 223, 224, 225, 226, 229, 230, 231, 234, 235, 246, 352, 371, 496, 497, 500, 505, 509, 516, 521, 525, 528, 533, 537, 546, 555, 569, 570, 577, 578, 585, 586, 592, 595, 596, 602, 603, 604, 608, 612, 616, 619, 620, 621, 623, 627, 630, 634, 637, 638, 639, 640, 644, 649, 655, 661, 666, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 728, 732, 736, 740, 742, 744, 747, 751, 755, 756, 757, 761, 762, 763, 766, 767, 768, 769, 774, 775, 776, 780, 781, 782, 786, 787, 788, 791, 792, 795, 796, 797, 801, 802, 805, 806, 807, 810, 811, 812, 816, 817, 818, 822, 823, 824, 828, 829, 833, 834, 851, 854, 859, 860, 861, 865, 866, 870, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 896, 897, 901, 902, 906, 907, 911, 912, 922, 952, 953, 954, 963, 990, 995, 1025, 1026, 1031, 1032, 1033, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1065, 1066, 1071, 1072, 1073, 1074, 1079, 1080, 1081, 1084, 1085, 1095, 1096, 1101, 1102, 1105, 1109, 1110, 1116, 1124, 1126, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1168, 1169, 1170, 1171, 1174, 1179, 1182, 1183, 1184, 1186, 1188, 1193, 1194, 1195, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1215, 1216, 1220, 1221, 1225, 1226, 1230, 1231, 1236, 1237, 1241, 1242, 1243, 1246, 1247, 1252, 1253, 1258, 1259, 1261, 1265, 1266, 1267, 1271, 1272, 1273, 1277, 1278, 1279, 1283, 1284, 1285, 1289, 1292, 1296, 1297, 1298, 1299, 1301, 1302, 1306, 1307, 1308, 1309, 1311, 1312, 1316, 1317, 1318, 1319, 1321, 1322, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1339, 1340, 1342, 1343, 1344, 1345, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1370, 1371, 1373, 1374, 1375, 1376, 1378, 1379, 1396, 1399, 1400, 1401, 1402, 1403, 1419, 1425, 1437, 1438, 1442], "n_point": [4, 16, 17, 21, 48, 49, 59, 94, 113, 117, 120, 121, 131, 176, 182, 188, 194, 222, 224, 225, 229, 230, 231, 234, 235, 500, 509, 521, 528, 537, 570, 578, 586, 596, 603, 604, 608, 612, 616, 619, 627, 634, 756, 757, 762, 763, 767, 768, 775, 776, 781, 782, 787, 788, 791, 792, 795, 796, 797, 801, 802, 805, 806, 807, 810, 811, 812, 816, 817, 818, 822, 823, 824, 828, 829, 833, 834, 851, 854, 859, 860, 861, 865, 866, 870, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 896, 897, 901, 902, 906, 907, 911, 912, 963, 1033, 1034, 1043, 1044, 1050, 1051, 1053, 1057, 1058, 1065, 1066, 1073, 1074, 1124, 1126, 1174, 1298, 1308, 1318, 1328, 1379, 1428, 1438], "3": [4, 16, 17, 21, 113, 120, 193, 194, 196, 224, 225, 229, 257, 329, 376, 604, 611, 619, 621, 627, 634, 756, 757, 762, 763, 767, 768, 775, 776, 781, 782, 787, 788, 796, 810, 922, 963, 990, 995, 1025, 1027, 1124, 1126, 1255, 1293, 1414, 1419, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "pointdatamodel": [4, 21, 46, 57, 129, 130, 181, 182, 183, 184, 185, 186, 187, 201, 561, 606, 611, 614, 1407, 1411, 1414], "execut": [4, 21, 36, 42, 48, 55, 59, 79, 85, 94, 126, 129, 131, 139, 149, 155, 182, 188, 212, 223, 500, 509, 521, 528, 537, 555, 608, 612, 616, 640, 644, 649, 655, 661, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 755, 761, 766, 774, 780, 786, 1027, 1174, 1380, 1387, 1414, 1419, 1427], "persist_fdata": [4, 21], "point_result": [4, 16, 21, 32, 963, 1428, 1438], "clear": [5, 106, 1434], "max_it": [9, 10], "maxim": [9, 10, 467, 624, 625, 647, 771, 772, 778, 779, 785, 804, 808, 809, 814, 820, 825, 826, 831, 835, 850, 857, 862, 863, 867, 868, 949, 950, 951, 952, 953, 954, 981, 982, 983, 984, 985, 986, 994, 995, 1028, 1031, 1035, 1037, 1041, 1045, 1048, 1052, 1055, 1059, 1063, 1067, 1071, 1117, 1124, 1147, 1148, 1149, 1150, 1166, 1180, 1181, 1186, 1189, 1190, 1191, 1195, 1197, 1198, 1199, 1205, 1206, 1223, 1224, 1256, 1261, 1263, 1267, 1269, 1273, 1275, 1279, 1281, 1285, 1287, 1289, 1290, 1292, 1294, 1301, 1304, 1311, 1314, 1315, 1321, 1324, 1325, 1332, 1333, 1338, 1342, 1347, 1348, 1353, 1354, 1363, 1373, 1414, 1415, 1417, 1421, 1425, 1431, 1435], "conv_crit": [9, 10, 1428], "convcrit": [9, 10, 62, 63, 64, 65, 66, 67, 68, 71, 1408], "converg": [9, 10, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 75, 1406, 1408, 1425, 1428, 1439], "criteria": [9, 10, 62, 63, 64, 66, 67, 69, 71, 72, 73, 75, 1408, 1428], "prev_farm_result": 9, "previou": [9, 64, 69, 73, 166, 226, 233, 235, 769, 873, 876, 877, 880, 881, 884, 885, 888, 889, 892, 894, 897, 899, 902, 904, 907, 909, 912, 1425, 1428, 1439], "set_urelax": [9, 14, 1428], "entry_point": [9, 14], "urel": [9, 14, 83, 84], "under": [9, 14, 15, 77, 78, 83, 84, 137, 138, 143, 152, 169, 185, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176, 1408, 1422, 1425, 1426, 1428, 1429, 1430, 1432, 1435, 1442], "relax": [9, 14, 15, 77, 78, 83, 84, 1408, 1425, 1428], "paramet": [9, 15, 16, 46, 125, 137, 152, 185, 464, 471, 472, 498, 506, 534, 549, 551, 552, 567, 690, 702, 708, 714, 720, 742, 764, 771, 778, 784, 813, 819, 825, 830, 835, 855, 856, 862, 867, 974, 1004, 1124, 1347, 1363, 1414, 1416, 1421, 1425, 1428, 1431, 1434, 1438, 1440, 1441], "urelax": [9, 15, 77, 78, 83, 84, 85, 86, 1408], "tupl": [10, 17, 112, 114, 117, 118, 119, 120, 126, 127, 151, 165, 184, 198, 213, 216, 227, 232, 246, 352, 357, 371, 493, 494, 549, 560, 565, 567, 568, 727, 731, 735, 739, 801, 828, 865, 870, 921, 943, 947, 949, 950, 951, 952, 953, 954, 958, 963, 981, 982, 983, 984, 985, 986, 989, 994, 995, 1027, 1200, 1386, 1388, 1394, 1397], "argument": [10, 11, 17, 114, 127, 151, 184, 550, 560, 565, 639, 727, 731, 735, 739, 917, 921, 928, 947, 963, 989, 994, 1200, 1255, 1293, 1298, 1308, 1318, 1328, 1380, 1381, 1386, 1388, 1394, 1397, 1425, 1429, 1435, 1440, 1441], "keyword": [10, 114, 1200, 1386, 1388, 1394, 1397], "first": [14, 64, 69, 73, 117, 124, 128, 166, 244, 714, 720, 759, 970, 972, 973, 1414, 1427, 1428, 1431, 1433, 1440, 1441, 1442], "pre_rotor": [14, 35, 137, 139, 147, 148, 159, 211, 551, 664, 665, 684, 687, 1167, 1201], "post_rotor": [14, 1167], "pre_wak": [14, 1428], "last": [14, 928, 947, 1025, 1427], "urlx": 15, "util": [15, 163, 165, 236, 241, 561, 974, 975, 979, 980, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1294, 1295, 1304, 1305, 1314, 1315, 1324, 1325, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1412, 1425, 1428, 1431, 1437, 1439, 1440, 1441], "sequenti": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 764, 974, 977, 978, 1406, 1418, 1424, 1425], "A": [16, 66, 92, 113, 152, 155, 159, 185, 188, 241, 242, 246, 257, 325, 371, 376, 519, 526, 558, 699, 742, 746, 749, 808, 813, 825, 862, 863, 867, 868, 916, 942, 996, 997, 1255, 1293, 1294, 1304, 1314, 1324, 1408, 1409, 1411, 1412, 1413, 1414, 1417, 1419, 1429, 1430, 1432], "without": [16, 137, 551, 808, 947, 1409, 1414, 1428, 1431, 1435, 1437, 1438, 1439], "thi": [16, 35, 36, 40, 42, 46, 48, 53, 55, 57, 59, 77, 79, 85, 94, 126, 127, 131, 139, 147, 148, 149, 151, 155, 176, 182, 184, 188, 193, 195, 212, 223, 228, 229, 241, 257, 376, 500, 509, 521, 528, 537, 555, 567, 570, 578, 586, 596, 603, 608, 612, 614, 616, 620, 640, 644, 647, 649, 655, 661, 665, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 738, 753, 755, 761, 766, 774, 780, 785, 786, 790, 793, 796, 798, 800, 803, 804, 808, 809, 810, 813, 814, 819, 820, 825, 826, 830, 831, 835, 850, 856, 857, 862, 863, 867, 868, 904, 928, 955, 981, 982, 983, 984, 985, 986, 1004, 1025, 1045, 1052, 1059, 1076, 1077, 1143, 1162, 1163, 1170, 1171, 1174, 1201, 1255, 1293, 1294, 1304, 1314, 1324, 1347, 1359, 1360, 1407, 1408, 1409, 1412, 1413, 1414, 1415, 1419, 1425, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "us": [16, 117, 127, 152, 185, 233, 371, 384, 492, 567, 582, 611, 647, 726, 727, 730, 731, 734, 735, 738, 739, 753, 785, 790, 793, 813, 814, 831, 835, 850, 921, 928, 943, 966, 967, 1027, 1076, 1077, 1079, 1124, 1148, 1149, 1152, 1153, 1162, 1163, 1166, 1170, 1171, 1199, 1205, 1206, 1207, 1208, 1255, 1293, 1301, 1302, 1321, 1322, 1332, 1333, 1334, 1335, 1338, 1342, 1343, 1347, 1353, 1354, 1355, 1356, 1359, 1360, 1363, 1373, 1374, 1409, 1413, 1414, 1415, 1425, 1427, 1428, 1431, 1432, 1433, 1434, 1435, 1437, 1438, 1439, 1440, 1441, 1442], "simul": [16, 1409, 1425, 1426, 1429, 1434, 1437], "environ": [16, 1409, 1425], "do": [16, 166, 1255, 1293, 1409, 1414, 1425, 1431, 1433, 1437, 1439, 1440, 1441], "support": [16, 1004, 1027, 1255, 1293, 1409, 1425, 1426, 1427, 1434], "multi": [16, 517, 793, 1409, 1413, 1424, 1425, 1426], "comput": [16, 36, 42, 48, 55, 59, 79, 85, 94, 126, 131, 139, 149, 155, 173, 182, 188, 212, 221, 223, 226, 233, 371, 417, 500, 509, 521, 528, 537, 555, 608, 612, 616, 640, 644, 649, 655, 661, 667, 673, 677, 682, 685, 688, 693, 699, 700, 704, 710, 716, 722, 753, 755, 759, 761, 764, 766, 769, 771, 774, 778, 780, 784, 786, 830, 961, 990, 1174, 1255, 1293, 1406, 1409, 1414, 1418, 1425, 1434, 1439, 1442], "like": [16, 1409, 1429, 1434, 1436], "fmu": [16, 1409], "calc_par": [16, 17, 35, 40, 46, 53, 57, 77, 83, 92, 127, 128, 137, 145, 147, 151, 152, 159, 181, 184, 185, 191, 201, 211, 214, 498, 506, 517, 519, 526, 534, 547, 551, 552, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 1172], "states0": [16, 226, 769], "origin": [16, 92, 93, 235, 246, 306, 876, 880, 884, 888, 892, 897, 902, 907, 912, 981, 982, 983, 984, 985, 986, 1027, 1068, 1169, 1172, 1173, 1210, 1255, 1293, 1345, 1358, 1376, 1426, 1439], "plugin": [16, 17, 87, 974, 1409, 1418, 1437], "sequentialiterplugin": [16, 17], "updat": [16, 17, 87, 91, 173, 176, 235, 567, 570, 574, 578, 582, 586, 590, 593, 596, 600, 603, 647, 876, 880, 884, 888, 892, 897, 902, 907, 912, 974, 978, 1124, 1162, 1163, 1166, 1170, 1171, 1199, 1338, 1347, 1359, 1360, 1363, 1409, 1425, 1431, 1437, 1442], "everi": [16, 17, 631, 632, 1427, 1437], "__iter__": [16, 18], "__next__": [16, 19], "step": [16, 19, 33, 222, 246, 357, 371, 496, 497, 624, 625, 631, 632, 771, 772, 867, 868, 942, 994, 1425, 1428, 1429, 1430, 1432, 1433, 1434, 1437, 1439, 1441], "next": [16, 19, 1027, 1428, 1431, 1433, 1435, 1437, 1438, 1440, 1441], "size": [16, 33, 92, 99, 117, 128, 134, 195, 201, 205, 222, 246, 296, 353, 371, 498, 504, 506, 515, 517, 519, 524, 526, 531, 534, 544, 547, 620, 771, 772, 867, 868, 921, 926, 994, 1172, 1173, 1178, 1430, 1431, 1440], "total": [16, 33, 92, 99, 128, 134, 201, 205, 233, 239, 498, 504, 506, 515, 517, 519, 524, 526, 531, 534, 544, 547, 919, 928, 936, 948, 955, 957, 961, 964, 968, 979, 987, 990, 992, 1124, 1154, 1155, 1166, 1172, 1178, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1425, 1431], "counter": [16, 22, 92, 95, 117, 124, 995, 1124, 1137, 1166, 1199, 1338, 1347, 1363], "index": [16, 22, 28, 48, 49, 92, 95, 96, 124, 127, 128, 132, 152, 156, 166, 175, 176, 201, 202, 207, 208, 210, 222, 224, 225, 226, 229, 235, 371, 384, 492, 498, 501, 506, 508, 511, 514, 517, 519, 526, 534, 536, 539, 543, 547, 569, 570, 577, 578, 585, 586, 592, 595, 596, 602, 603, 660, 756, 757, 762, 763, 767, 768, 769, 775, 776, 781, 782, 787, 788, 791, 792, 795, 796, 801, 802, 805, 806, 807, 810, 816, 817, 822, 823, 828, 833, 851, 854, 859, 860, 865, 870, 876, 880, 884, 888, 892, 897, 902, 907, 912, 919, 920, 921, 949, 950, 951, 952, 953, 954, 963, 981, 982, 983, 995, 1079, 1124, 1159, 1161, 1166, 1172, 1199, 1338, 1347, 1363, 1398, 1425, 1429, 1435, 1436, 1437, 1440, 1442], "weight": [16, 34, 92, 101, 128, 136, 191, 193, 195, 200, 201, 206, 429, 482, 498, 499, 505, 506, 516, 517, 519, 525, 526, 533, 534, 546, 547, 549, 574, 593, 618, 620, 623, 624, 625, 630, 631, 632, 637, 928, 947, 963, 981, 982, 983, 1172, 1179, 1255, 1270, 1293, 1410, 1414, 1421, 1425, 1428, 1429, 1431, 1436, 1437, 1438, 1439, 1441], "arrai": [16, 34, 36, 42, 48, 55, 59, 79, 85, 94, 126, 131, 139, 149, 155, 166, 182, 188, 207, 208, 212, 223, 246, 247, 251, 252, 253, 254, 255, 262, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 326, 327, 330, 331, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 371, 500, 509, 521, 528, 537, 555, 608, 612, 616, 638, 639, 640, 644, 649, 655, 661, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 755, 761, 766, 774, 780, 786, 798, 947, 1025, 1026, 1079, 1080, 1081, 1084, 1085, 1101, 1102, 1109, 1110, 1131, 1132, 1133, 1134, 1135, 1138, 1139, 1141, 1142, 1143, 1162, 1163, 1170, 1171, 1174, 1182, 1183, 1184, 1186, 1193, 1194, 1195, 1215, 1216, 1220, 1221, 1225, 1226, 1230, 1231, 1236, 1237, 1241, 1242, 1243, 1246, 1247, 1252, 1253, 1255, 1258, 1259, 1261, 1265, 1266, 1267, 1271, 1272, 1273, 1277, 1278, 1279, 1283, 1284, 1285, 1289, 1292, 1293, 1296, 1297, 1298, 1306, 1307, 1308, 1316, 1317, 1318, 1326, 1327, 1328, 1339, 1349, 1359, 1360, 1370, 1379, 1400, 1401, 1402, 1403, 1425, 1428, 1430, 1431, 1437, 1439, 1442], "fdata": [16, 26, 35, 36, 40, 42, 46, 48, 49, 53, 55, 57, 59, 77, 79, 83, 85, 92, 94, 128, 131, 137, 139, 147, 149, 152, 155, 159, 163, 165, 166, 173, 175, 176, 179, 181, 182, 185, 188, 191, 193, 195, 196, 201, 211, 212, 214, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 235, 498, 500, 506, 509, 517, 519, 521, 526, 528, 534, 537, 547, 551, 552, 555, 567, 569, 570, 572, 574, 577, 578, 580, 582, 585, 586, 588, 590, 592, 593, 595, 596, 598, 600, 602, 603, 604, 605, 606, 608, 611, 612, 614, 616, 618, 620, 621, 624, 631, 638, 640, 642, 644, 647, 649, 653, 655, 659, 661, 664, 667, 671, 673, 675, 677, 680, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 700, 702, 704, 708, 710, 714, 716, 720, 722, 753, 755, 756, 757, 759, 761, 762, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 778, 780, 781, 782, 784, 786, 787, 788, 790, 791, 792, 793, 795, 796, 797, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 822, 823, 824, 825, 828, 829, 830, 833, 834, 835, 851, 856, 859, 860, 861, 862, 865, 866, 867, 870, 872, 873, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 891, 892, 894, 896, 897, 899, 901, 902, 904, 906, 907, 909, 911, 912, 1172, 1174], "pdata": [16, 31, 46, 48, 49, 57, 59, 92, 94, 117, 120, 128, 131, 163, 165, 166, 173, 175, 176, 179, 181, 182, 185, 188, 201, 221, 225, 226, 228, 229, 230, 231, 233, 234, 235, 498, 500, 506, 509, 517, 519, 521, 526, 528, 534, 537, 547, 567, 569, 570, 572, 574, 577, 578, 580, 582, 585, 586, 588, 590, 592, 593, 595, 596, 598, 600, 602, 603, 605, 606, 608, 611, 612, 614, 616, 753, 757, 759, 763, 764, 768, 769, 771, 776, 778, 782, 784, 788, 790, 791, 792, 793, 795, 796, 797, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 822, 823, 824, 825, 828, 829, 830, 833, 834, 835, 851, 856, 859, 860, 861, 862, 865, 866, 867, 870, 872, 873, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 891, 892, 894, 896, 897, 899, 901, 902, 904, 906, 907, 909, 911, 912, 1172, 1174], "overal": [16, 25, 32, 1437], "cur_farm_result": [16, 23], "cur_point_result": [16, 24], "indx": 28, "itr": 29, "": [33, 35, 40, 46, 53, 57, 77, 83, 92, 108, 109, 117, 118, 125, 127, 128, 137, 147, 151, 152, 159, 166, 181, 184, 185, 191, 201, 211, 214, 246, 338, 371, 448, 449, 450, 455, 473, 474, 475, 483, 498, 499, 506, 517, 519, 526, 534, 547, 551, 552, 582, 583, 591, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 947, 981, 982, 983, 984, 985, 986, 995, 1025, 1027, 1126, 1133, 1143, 1172, 1348, 1369, 1419, 1421, 1425, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "w": [34, 166, 215, 426, 442, 483, 490, 491, 506, 526, 527, 611, 695, 696, 698, 702, 703, 708, 709, 714, 720, 995, 1004, 1006, 1008, 1011, 1014, 1015, 1020, 1255, 1293, 1401, 1402, 1410, 1414, 1419, 1421, 1425, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "n_turbin": [34, 36, 42, 55, 79, 85, 101, 117, 123, 136, 137, 139, 149, 155, 193, 195, 196, 206, 212, 223, 236, 239, 497, 505, 516, 525, 533, 546, 555, 620, 621, 638, 639, 640, 644, 649, 655, 661, 666, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 755, 761, 766, 774, 780, 786, 922, 1179, 1213, 1214, 1244, 1245, 1294, 1295, 1304, 1305, 1314, 1315, 1428, 1431, 1433, 1435, 1436, 1437, 1438, 1439], "calcord": [35, 36, 37, 38, 39, 1407, 1428, 1437, 1439], "farmdatamodel": [35, 40, 53, 77, 83, 137, 147, 148, 149, 150, 151, 152, 153, 154, 156, 159, 191, 211, 1407, 1408, 1411], "via": [35, 40, 46, 53, 57, 77, 83, 92, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 201, 211, 214, 492, 493, 498, 499, 506, 508, 514, 517, 519, 526, 534, 536, 543, 547, 551, 552, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 919, 928, 948, 955, 960, 961, 964, 968, 979, 987, 990, 992, 1004, 1133, 1143, 1172, 1380, 1407, 1412, 1413, 1415, 1419, 1425, 1426, 1431, 1434, 1435, 1440, 1442], "output_farm_var": [35, 38, 40, 44, 53, 56, 77, 81, 83, 86, 137, 144, 147, 150, 152, 157, 159, 191, 199, 211, 214, 551, 552, 556, 618, 624, 631, 638, 641, 642, 646, 647, 651, 653, 657, 659, 663, 664, 669, 671, 674, 675, 679, 680, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 701, 702, 707, 708, 713, 714, 719, 720, 725], "which": [35, 38, 40, 44, 46, 49, 51, 53, 56, 57, 61, 77, 81, 83, 86, 92, 98, 102, 128, 133, 137, 144, 147, 150, 152, 157, 159, 176, 181, 183, 185, 189, 191, 199, 201, 204, 211, 214, 221, 229, 230, 231, 234, 235, 498, 503, 506, 508, 513, 517, 519, 523, 526, 530, 534, 542, 547, 551, 552, 556, 570, 578, 586, 596, 603, 606, 610, 611, 613, 614, 617, 618, 624, 631, 638, 641, 642, 646, 647, 651, 653, 657, 659, 660, 663, 664, 669, 671, 674, 675, 676, 679, 680, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 701, 702, 703, 707, 708, 709, 713, 714, 719, 720, 721, 725, 753, 754, 784, 785, 791, 792, 793, 795, 796, 797, 801, 802, 805, 807, 810, 811, 812, 816, 818, 822, 824, 828, 829, 833, 834, 859, 861, 865, 866, 870, 872, 875, 876, 879, 880, 881, 882, 883, 884, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 921, 924, 925, 926, 927, 943, 963, 981, 982, 983, 990, 995, 1133, 1143, 1172, 1177, 1180, 1181, 1190, 1198, 1201, 1255, 1293, 1400, 1403, 1411, 1414, 1422, 1426, 1428, 1430, 1431, 1434, 1437, 1438, 1439, 1440, 1441, 1442], "being": [35, 38, 40, 44, 46, 49, 51, 53, 56, 57, 61, 77, 81, 83, 86, 92, 98, 128, 133, 137, 144, 147, 150, 152, 157, 159, 181, 183, 185, 189, 191, 199, 201, 204, 211, 214, 229, 230, 498, 503, 506, 513, 517, 519, 523, 526, 530, 534, 542, 547, 551, 552, 556, 606, 610, 611, 613, 614, 617, 618, 624, 631, 638, 641, 642, 646, 647, 651, 653, 657, 659, 663, 664, 669, 671, 674, 675, 679, 680, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 701, 702, 707, 708, 713, 714, 719, 720, 725, 796, 797, 810, 811, 1143, 1172, 1177, 1255, 1293, 1425], "modifi": [35, 38, 40, 44, 46, 49, 51, 53, 56, 57, 61, 77, 81, 83, 86, 92, 98, 128, 133, 137, 144, 147, 150, 152, 157, 159, 173, 175, 176, 181, 183, 185, 189, 191, 195, 199, 201, 204, 211, 214, 229, 230, 498, 503, 506, 513, 517, 519, 523, 526, 530, 534, 542, 547, 551, 552, 556, 567, 569, 570, 574, 577, 578, 582, 585, 586, 590, 592, 593, 595, 596, 600, 602, 603, 606, 610, 611, 613, 614, 617, 618, 620, 624, 631, 638, 641, 642, 646, 647, 651, 653, 657, 659, 663, 664, 669, 671, 674, 675, 679, 680, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 701, 702, 707, 708, 713, 714, 719, 720, 725, 796, 797, 810, 811, 955, 956, 1172, 1177, 1411, 1428], "main": [35, 36, 40, 42, 46, 48, 53, 55, 57, 59, 77, 79, 83, 85, 92, 94, 125, 126, 128, 131, 137, 139, 147, 149, 152, 155, 159, 181, 182, 185, 188, 201, 211, 212, 214, 498, 500, 506, 509, 517, 519, 521, 526, 528, 534, 537, 547, 551, 552, 555, 606, 608, 611, 612, 614, 616, 638, 640, 642, 644, 647, 649, 653, 655, 659, 661, 664, 667, 671, 673, 675, 677, 680, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 700, 702, 704, 708, 710, 714, 716, 720, 722, 1172, 1174, 1427, 1429], "out_var": [35, 40, 46, 53, 57, 77, 83, 92, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 201, 211, 214, 498, 506, 517, 519, 526, 534, 547, 551, 552, 606, 611, 614, 618, 624, 631, 638, 639, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 1172], "start": [35, 40, 46, 53, 57, 77, 83, 92, 125, 127, 128, 129, 137, 147, 151, 152, 159, 181, 184, 185, 191, 201, 211, 214, 242, 246, 318, 371, 492, 498, 506, 517, 519, 526, 534, 547, 551, 552, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 753, 754, 784, 785, 970, 972, 973, 996, 997, 1027, 1172, 1419, 1425, 1429, 1435, 1438, 1442], "apply_ufunc": [35, 40, 46, 53, 57, 77, 83, 92, 117, 118, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 201, 211, 214, 498, 506, 517, 519, 526, 534, 547, 551, 552, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 1172], "singl": [36, 42, 48, 55, 59, 79, 85, 92, 94, 117, 126, 131, 139, 149, 155, 182, 188, 212, 223, 497, 500, 509, 521, 526, 528, 537, 555, 608, 612, 616, 618, 640, 644, 649, 655, 661, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 755, 761, 766, 774, 780, 786, 966, 970, 972, 973, 1076, 1080, 1097, 1099, 1101, 1106, 1109, 1117, 1124, 1138, 1166, 1174, 1180, 1182, 1189, 1191, 1193, 1197, 1199, 1213, 1215, 1218, 1220, 1223, 1225, 1228, 1230, 1234, 1236, 1239, 1244, 1246, 1250, 1252, 1256, 1258, 1263, 1265, 1269, 1271, 1275, 1277, 1281, 1283, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1406, 1407, 1409, 1413, 1424, 1425, 1426, 1428, 1429, 1433, 1434, 1439], "should": [36, 42, 48, 55, 59, 79, 85, 94, 126, 131, 139, 143, 149, 155, 169, 182, 188, 203, 212, 223, 498, 499, 500, 502, 509, 512, 521, 522, 528, 537, 541, 555, 567, 608, 609, 612, 616, 640, 644, 645, 649, 655, 661, 667, 668, 673, 677, 682, 685, 688, 693, 700, 704, 706, 710, 712, 716, 718, 722, 724, 755, 761, 766, 774, 780, 786, 798, 904, 1174, 1176, 1255, 1293, 1399, 1404, 1427, 1428, 1430, 1431, 1435, 1436, 1440, 1441, 1442], "output": [36, 38, 42, 44, 48, 51, 55, 56, 57, 59, 61, 79, 81, 85, 86, 94, 98, 126, 127, 131, 133, 139, 144, 149, 150, 151, 155, 157, 166, 182, 183, 184, 188, 189, 199, 204, 212, 238, 498, 499, 500, 503, 506, 508, 509, 513, 521, 523, 526, 527, 528, 530, 534, 536, 537, 542, 555, 556, 608, 610, 612, 613, 616, 617, 638, 639, 640, 641, 642, 643, 644, 646, 649, 651, 655, 657, 661, 663, 667, 669, 673, 674, 677, 679, 682, 683, 685, 686, 688, 689, 693, 694, 700, 701, 704, 707, 710, 713, 716, 719, 722, 725, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 1174, 1177, 1255, 1293, 1396, 1404, 1405, 1425, 1428, 1429, 1430, 1431, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "output_var": [38, 44, 51, 56, 61, 81, 86, 98, 133, 144, 150, 157, 183, 189, 199, 204, 498, 499, 503, 506, 508, 513, 517, 523, 530, 534, 536, 542, 547, 556, 606, 607, 610, 613, 617, 641, 642, 643, 646, 651, 657, 663, 669, 674, 675, 676, 679, 683, 686, 689, 694, 701, 707, 713, 719, 725, 1177, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1439, 1440, 1441, 1442], "smdl": [39, 45, 52, 82, 100, 135, 146, 158, 171, 180, 190, 532, 545, 557, 573, 581, 589, 599, 658, 758, 789, 799], "farmwakescalcul": [40, 41, 42, 43, 44, 45, 77, 78, 79, 80, 81, 82, 1407, 1408, 1428, 1437, 1439], "effect": [40, 46, 77, 173, 191, 193, 448, 449, 450, 473, 474, 475, 593, 618, 624, 631, 808, 1407, 1408, 1414, 1416, 1417, 1421, 1425, 1428, 1434, 1435, 1436, 1441, 1442], "pointwakescalcul": [46, 47, 48, 49, 50, 51, 52, 1407], "pvar": [46, 57], "emodel": [46, 47], "pointdatamodellist": [46, 47, 128, 185, 186, 187, 188, 189, 190, 1411], "extra": [46, 47, 981, 982, 983, 984, 985, 986, 1255, 1293], "emodels_cpar": [46, 47], "output_point_var": [46, 51, 57, 61, 92, 98, 128, 133, 181, 183, 185, 189, 201, 204, 498, 503, 506, 513, 517, 519, 523, 526, 530, 534, 542, 547, 606, 610, 611, 613, 614, 617, 1172, 1177], "contribute_to_wake_delta": [46, 49, 173, 175, 176, 228, 229, 567, 569, 570, 574, 577, 578, 582, 585, 586, 590, 592, 593, 595, 596, 600, 602, 603, 790, 793, 796, 800, 803, 808, 810, 813, 819, 825, 830, 856, 862, 867], "contribut": [46, 49, 173, 175, 228, 229, 233, 234, 567, 569, 574, 577, 582, 585, 590, 592, 593, 595, 600, 602, 790, 793, 796, 800, 803, 808, 810, 813, 819, 825, 830, 856, 862, 867, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 894, 896, 899, 901, 904, 906, 909, 911, 1428], "delta": [46, 49, 62, 65, 66, 70, 71, 74, 75, 173, 175, 176, 179, 228, 229, 230, 231, 233, 234, 235, 567, 569, 570, 572, 574, 577, 578, 580, 582, 585, 586, 588, 590, 592, 593, 595, 596, 598, 600, 602, 603, 605, 614, 615, 684, 687, 764, 765, 778, 779, 790, 791, 792, 793, 795, 796, 797, 800, 802, 803, 805, 807, 808, 810, 811, 812, 813, 816, 818, 819, 822, 824, 825, 829, 830, 833, 834, 856, 859, 861, 862, 866, 867, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 894, 896, 897, 899, 901, 902, 904, 906, 907, 909, 911, 912, 921, 942, 1026, 1229, 1257, 1414, 1425, 1428, 1434, 1437, 1439], "states_source_turbin": [46, 48, 49, 166, 175, 221, 222, 224, 225, 226, 229, 235, 569, 577, 585, 592, 595, 602, 753, 756, 757, 759, 762, 763, 764, 767, 768, 769, 771, 775, 776, 778, 781, 782, 784, 787, 788, 791, 792, 795, 796, 801, 802, 805, 806, 807, 810, 816, 817, 822, 823, 828, 833, 835, 851, 854, 859, 860, 865, 870, 876, 880, 884, 888, 892, 897, 902, 907, 912], "For": [48, 49, 125, 166, 175, 176, 207, 208, 222, 224, 225, 226, 229, 235, 549, 569, 570, 577, 578, 585, 586, 592, 595, 596, 602, 603, 647, 756, 757, 762, 763, 767, 768, 769, 775, 776, 781, 782, 787, 788, 791, 792, 795, 796, 801, 802, 805, 806, 807, 810, 813, 816, 817, 822, 823, 828, 833, 851, 854, 859, 860, 865, 870, 876, 880, 884, 888, 892, 897, 902, 907, 912, 994, 1255, 1293, 1427, 1428, 1429, 1431, 1433, 1434, 1435, 1437, 1438, 1439, 1440, 1442], "each": [48, 49, 87, 125, 137, 155, 166, 175, 176, 188, 207, 208, 222, 224, 225, 226, 229, 235, 246, 357, 371, 549, 569, 570, 577, 578, 585, 586, 592, 595, 596, 602, 603, 714, 720, 756, 757, 759, 762, 763, 767, 768, 769, 775, 776, 781, 782, 787, 788, 791, 792, 795, 796, 801, 802, 805, 806, 807, 810, 816, 817, 822, 823, 828, 833, 851, 854, 859, 860, 865, 870, 876, 880, 884, 888, 892, 897, 902, 907, 912, 930, 949, 952, 953, 954, 994, 1117, 1180, 1186, 1189, 1191, 1195, 1197, 1255, 1256, 1261, 1263, 1267, 1269, 1273, 1275, 1279, 1281, 1285, 1287, 1289, 1290, 1292, 1293, 1409, 1414, 1428, 1429, 1431, 1434, 1435, 1438, 1439, 1440, 1441, 1442], "one": [48, 49, 152, 155, 166, 175, 176, 185, 188, 193, 195, 200, 222, 224, 225, 226, 229, 235, 246, 332, 371, 567, 568, 569, 570, 574, 575, 577, 578, 582, 583, 585, 586, 590, 591, 592, 593, 594, 595, 596, 601, 602, 603, 620, 623, 624, 625, 630, 637, 756, 757, 762, 763, 767, 768, 769, 775, 776, 781, 782, 787, 788, 791, 792, 795, 796, 801, 802, 805, 806, 807, 810, 816, 817, 822, 823, 828, 833, 851, 854, 859, 860, 865, 870, 876, 880, 884, 888, 892, 897, 902, 907, 912, 987, 994, 1025, 1027, 1255, 1293, 1399, 1414, 1418, 1419, 1425, 1429, 1433, 1441, 1442], "caus": [48, 49, 166, 175, 222, 224, 225, 226, 229, 235, 569, 577, 585, 592, 595, 602, 756, 757, 762, 763, 767, 768, 769, 775, 776, 781, 782, 787, 788, 791, 792, 795, 796, 801, 802, 805, 806, 807, 810, 816, 817, 822, 823, 828, 833, 851, 854, 859, 860, 865, 870, 876, 880, 884, 888, 892, 897, 902, 907, 912, 1425], "wmodel": 49, "wdelta": [49, 235, 791, 792, 795, 802, 807, 833, 876, 880, 884, 888, 892, 897, 902, 907, 912], "ob": [49, 229, 230, 796, 797, 810, 811], "fly": [49, 229, 230, 231, 796, 797, 810, 811, 812, 818, 824, 829, 834, 861, 866, 872], "setambfarmresult": [53, 54, 55, 56, 1407, 1428, 1437, 1439], "copi": [53, 57, 195, 246, 315, 371, 620, 1407], "setambpointresult": [57, 58, 59, 60, 61, 1407], "treat": [57, 947, 1437], "abstract": [62, 64, 65, 102, 125, 126, 147, 149, 150, 159, 173, 175, 176, 179, 181, 182, 183, 191, 194, 197, 200, 201, 205, 206, 211, 212, 214, 217, 218, 219, 221, 223, 225, 228, 229, 231, 233, 234, 235, 790, 791, 793, 795, 800, 801, 803, 805, 806, 1028, 1031, 1032, 1033, 1034, 1035, 1106, 1112, 1117, 1124, 1166, 1168, 1169, 1239, 1290, 1292, 1389, 1394, 1405, 1408, 1411, 1415, 1419, 1422, 1425], "check_converg": [62, 64, 66, 69, 71, 73, 75], "prev_result": [62, 64, 66, 69, 71, 73, 75], "check": [62, 64, 66, 69, 71, 73, 75, 835, 838, 854, 1002, 1076, 1097, 1099, 1106, 1124, 1134, 1135, 1166, 1191, 1192, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1241, 1242, 1244, 1250, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1398, 1425, 1428, 1431, 1439, 1440], "get_delta": [62, 65, 66, 70, 71, 74, 75], "most": [62, 65, 66, 70, 71, 74, 75, 1428, 1442], "recent": [62, 65, 66, 70, 71, 74, 75], "convcritlist": [66, 67, 68, 69, 70, 1408], "crit": [66, 67, 68], "add_crit": [66, 68], "criterion": [66, 68], "convvardelta": [71, 72, 73, 74, 75, 1408], "requir": [71, 102, 124, 127, 221, 226, 567, 753, 759, 764, 769, 771, 778, 784, 798, 1408, 1425, 1426, 1429, 1430, 1431, 1432, 1434, 1437, 1440, 1442], "select": [71, 83, 112, 127, 137, 139, 173, 174, 178, 198, 207, 208, 209, 210, 211, 212, 213, 216, 220, 227, 232, 235, 431, 436, 499, 506, 508, 514, 517, 534, 536, 543, 547, 552, 566, 638, 639, 640, 644, 649, 655, 661, 667, 673, 677, 682, 685, 688, 693, 700, 704, 710, 716, 722, 791, 792, 795, 801, 802, 805, 807, 816, 822, 828, 833, 859, 865, 870, 876, 880, 884, 888, 892, 897, 902, 907, 912, 958, 981, 982, 983, 984, 985, 986, 987, 989, 1076, 1077, 1079, 1080, 1081, 1097, 1099, 1100, 1101, 1102, 1106, 1107, 1109, 1110, 1113, 1115, 1117, 1118, 1121, 1123, 1124, 1126, 1133, 1143, 1156, 1160, 1166, 1180, 1182, 1183, 1189, 1191, 1193, 1194, 1197, 1199, 1201, 1215, 1216, 1220, 1221, 1225, 1226, 1230, 1231, 1236, 1237, 1246, 1247, 1252, 1253, 1258, 1259, 1265, 1266, 1271, 1272, 1277, 1278, 1283, 1284, 1338, 1347, 1363, 1405, 1408, 1410, 1411, 1412, 1414, 1416, 1425, 1430, 1431, 1432, 1433, 1434, 1438, 1440], "limit": [71, 72, 114, 785, 804, 808, 809, 814, 820, 825, 826, 831, 835, 850, 857, 862, 863, 867, 868, 889, 890, 894, 895, 899, 900, 904, 905, 909, 910, 1425], "float": [71, 72, 207, 208, 214, 215, 222, 246, 260, 306, 329, 371, 379, 506, 508, 519, 520, 526, 527, 647, 648, 691, 696, 698, 702, 703, 708, 709, 715, 720, 721, 742, 743, 749, 750, 764, 765, 771, 772, 778, 779, 784, 785, 804, 808, 809, 813, 814, 819, 820, 825, 826, 830, 831, 835, 850, 856, 857, 862, 863, 867, 868, 881, 882, 889, 890, 894, 895, 899, 900, 904, 905, 909, 910, 919, 920, 921, 930, 932, 935, 936, 942, 949, 950, 951, 952, 953, 954, 970, 972, 973, 981, 982, 983, 984, 985, 986, 994, 995, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1045, 1046, 1076, 1077, 1079, 1080, 1081, 1084, 1085, 1089, 1091, 1093, 1095, 1097, 1099, 1100, 1101, 1102, 1105, 1106, 1109, 1110, 1116, 1117, 1124, 1131, 1132, 1133, 1138, 1139, 1141, 1142, 1143, 1144, 1148, 1152, 1157, 1162, 1163, 1164, 1166, 1168, 1169, 1170, 1171, 1180, 1181, 1182, 1183, 1184, 1188, 1189, 1190, 1191, 1193, 1194, 1197, 1198, 1199, 1201, 1202, 1205, 1207, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1229, 1230, 1231, 1234, 1236, 1237, 1239, 1244, 1245, 1246, 1247, 1250, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1263, 1265, 1266, 1269, 1270, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1293, 1294, 1295, 1296, 1297, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1314, 1315, 1316, 1317, 1319, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1329, 1332, 1334, 1336, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1353, 1355, 1357, 1358, 1359, 1360, 1361, 1363, 1369, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1398, 1401, 1402, 1410, 1429, 1431], "wd_var": [71, 72, 968, 970, 972, 973, 990], "direct": [71, 72, 201, 454, 481, 519, 520, 526, 527, 624, 625, 631, 632, 759, 760, 950, 951, 953, 954, 970, 972, 973, 981, 982, 983, 984, 985, 986, 1026, 1059, 1060, 1400, 1401, 1402, 1403, 1406, 1407, 1412, 1414, 1419, 1421, 1425, 1428, 1429, 1430, 1433, 1434, 1436, 1438, 1440, 1441, 1442], "unit": [71, 72, 214, 215, 370, 422, 426, 439, 442, 444, 447, 470, 647, 648, 813, 814, 935, 942, 1099, 1100, 1255, 1293, 1410, 1421, 1429], "deg": [71, 72, 1429], "defaultconv": [75, 76, 1408, 1428, 1439], "dure": [83, 92, 117, 118, 127, 143, 169, 203, 498, 499, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 974, 1176, 1408, 1409, 1418, 1425, 1431, 1432, 1439, 1440], "factor": [83, 84, 426, 466, 647, 648, 675, 676, 813, 814, 825, 826, 862, 863, 867, 868, 1012, 1016, 1017, 1021, 1180, 1181, 1190, 1198, 1229, 1257, 1410, 1414, 1420, 1421, 1425, 1442], "bewteen": [83, 84], "sequentialplugin": [87, 88, 89, 90, 91, 974, 1409, 1418], "sequeti": [87, 89, 90, 91, 977, 978], "intial": [87, 90, 974, 977], "fre": [87, 91, 919, 974, 978], "pre": [87, 91, 137, 139, 974, 978, 1427, 1435, 1439], "latest": [91, 978, 1124, 1162, 1163, 1166, 1170, 1171, 1199, 1338, 1347, 1359, 1360, 1363, 1427], "seqstat": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 1409, 1437], "just": [92, 1409, 1425, 1435], "serv": [92, 166, 226, 769, 1409, 1429], "structur": [92, 582, 714, 720, 1027, 1409, 1414, 1425, 1433, 1440], "placehold": [92, 1409], "statist": [92, 101, 128, 136, 201, 206, 482, 498, 505, 506, 516, 517, 519, 525, 526, 533, 534, 546, 547, 1172, 1179, 1421, 1429, 1441], "indic": [96, 113, 132, 193, 195, 202, 496, 497, 501, 511, 539, 620, 921, 966, 967, 981, 982, 983, 984, 985, 986, 1027, 1133, 1160, 1419], "array_lik": [96, 113, 117, 118, 127, 132, 202, 207, 208, 496, 501, 511, 520, 539, 549, 1255, 1293], "label": [96, 132, 202, 207, 208, 501, 511, 539, 949, 950, 951, 952, 953, 954, 994, 995, 1428, 1429, 1436, 1440], "integ": [96, 132, 202, 246, 306, 324, 371, 384, 501, 511, 539, 1076, 1079, 1080, 1081, 1084, 1085, 1092, 1094, 1097, 1099, 1101, 1102, 1106, 1109, 1110, 1117, 1124, 1131, 1132, 1133, 1138, 1139, 1141, 1142, 1143, 1145, 1149, 1153, 1162, 1163, 1165, 1166, 1168, 1169, 1170, 1171, 1180, 1182, 1183, 1184, 1189, 1191, 1193, 1194, 1197, 1199, 1206, 1208, 1209, 1210, 1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1244, 1246, 1247, 1250, 1252, 1253, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1294, 1296, 1297, 1306, 1307, 1314, 1316, 1317, 1324, 1326, 1327, 1333, 1335, 1338, 1339, 1344, 1345, 1347, 1349, 1354, 1356, 1357, 1358, 1359, 1360, 1363, 1370, 1375, 1376], "overwrit": [97, 115, 167, 207, 208], "exist": [97, 115, 167, 660, 835, 854, 1002, 1243, 1434, 1438, 1442], "collect": [102, 257, 376, 943, 949, 950, 951, 952, 953, 954, 995, 1255, 1293, 1434, 1438], "meant": 102, "call": [102, 125, 127, 137, 151, 152, 184, 185, 647, 1124, 1133, 1162, 1163, 1166, 1170, 1171, 1199, 1255, 1293, 1294, 1304, 1314, 1324, 1338, 1347, 1359, 1360, 1363, 1411, 1414, 1425, 1427, 1428, 1434, 1435, 1438, 1439, 1442], "top": [102, 593, 803, 1405, 1412, 1414, 1422, 1442], "code": [102, 338, 835, 1422, 1425, 1426, 1427], "ha": [108, 109, 115, 143, 168, 169, 203, 502, 512, 522, 541, 566, 609, 645, 668, 706, 712, 718, 724, 798, 1087, 1176, 1347, 1401, 1402, 1406, 1408, 1425, 1426, 1430, 1433, 1435, 1436, 1437, 1439, 1440], "exactli": [108, 109, 115, 143, 169, 203, 246, 306, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176], "two": [108, 109, 115, 143, 169, 203, 496, 502, 512, 522, 541, 609, 645, 668, 675, 697, 706, 712, 714, 718, 720, 724, 798, 1025, 1176, 1255, 1293, 1398, 1399, 1414, 1418, 1419, 1425, 1430, 1431, 1434, 1435, 1436, 1437, 1440, 1442], "data_var": [108, 109, 115, 143, 169, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176], "name_str": [108, 109, 115, 143, 169, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176], "dim_tupl": [108, 109, 115, 143, 169, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176], "data_ndarrai": [108, 109, 115, 143, 169, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176], "coord": [108, 109, 115, 143, 169, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176, 1255, 1293], "dim_name_str": [108, 109, 115, 143, 169, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176], "dim_arrai": [108, 109, 115, 143, 169, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176], "take": [108, 109, 174, 246, 360, 371, 881, 882, 899, 900, 963, 981, 982, 983], "deriv": [112, 178, 198, 213, 216, 220, 227, 232, 958, 1024, 1076, 1079, 1097, 1099, 1106, 1117, 1133, 1143, 1180, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1419], "model_book": [117, 558, 559, 560, 561, 562, 563, 564, 565, 566, 1411, 1412, 1419], "meta": [117, 1411, 1428, 1439], "usual": [117, 1434], "dim": [117, 118, 119, 120, 165, 166, 246, 251, 371], "same": [117, 118, 120, 218, 728, 732, 736, 740, 744, 747, 751, 935, 1026, 1027, 1201, 1255, 1293, 1399, 1425, 1440, 1442], "subset": [117, 118, 120, 127, 159, 499, 506, 508, 514, 534, 536, 543, 561, 566, 1411, 1414, 1425, 1432], "loop_dim": [117, 118, 125, 127], "loop": [117, 118, 127, 1025, 1425, 1437, 1439], "states_i0": [117, 124], "from_point": [117, 120], "__getitem__": [117, 246, 264, 371, 558, 559, 561, 562], "x": [117, 194, 221, 222, 224, 443, 480, 484, 492, 496, 498, 499, 558, 559, 574, 619, 624, 627, 634, 671, 672, 753, 756, 759, 762, 764, 767, 771, 775, 778, 781, 784, 787, 790, 791, 792, 793, 795, 800, 801, 802, 803, 805, 806, 807, 813, 816, 817, 819, 822, 823, 825, 828, 833, 835, 851, 854, 856, 859, 860, 862, 865, 867, 870, 921, 922, 948, 949, 950, 951, 952, 953, 954, 981, 982, 983, 984, 985, 986, 994, 995, 1025, 1028, 1029, 1031, 1032, 1035, 1037, 1039, 1041, 1042, 1045, 1047, 1048, 1049, 1052, 1054, 1055, 1056, 1059, 1061, 1063, 1064, 1067, 1069, 1071, 1072, 1255, 1293, 1402, 1403, 1414, 1421, 1422, 1426, 1428, 1429, 1430, 1431, 1433, 1437, 1438, 1439, 1440, 1441, 1442], "y": [117, 194, 443, 480, 485, 492, 496, 498, 499, 558, 559, 619, 627, 634, 671, 672, 921, 922, 948, 949, 951, 952, 954, 981, 982, 983, 984, 985, 986, 994, 995, 1028, 1029, 1031, 1032, 1035, 1037, 1039, 1041, 1042, 1045, 1047, 1048, 1049, 1052, 1054, 1055, 1056, 1059, 1061, 1063, 1064, 1067, 1069, 1071, 1072, 1255, 1293, 1402, 1403, 1421, 1428, 1429, 1430, 1431, 1437, 1438, 1439, 1440], "np": [119, 120, 166, 257, 306, 329, 376, 417, 419, 942, 947, 1025, 1027, 1079, 1080, 1081, 1084, 1085, 1101, 1102, 1109, 1110, 1131, 1132, 1133, 1134, 1135, 1138, 1139, 1141, 1142, 1143, 1162, 1163, 1170, 1171, 1182, 1183, 1184, 1186, 1193, 1194, 1195, 1215, 1216, 1220, 1221, 1225, 1226, 1230, 1231, 1236, 1237, 1241, 1242, 1243, 1246, 1247, 1252, 1253, 1255, 1258, 1259, 1261, 1265, 1266, 1267, 1271, 1272, 1273, 1277, 1278, 1279, 1283, 1284, 1285, 1289, 1292, 1293, 1296, 1297, 1306, 1307, 1316, 1317, 1326, 1327, 1339, 1349, 1359, 1360, 1370, 1379, 1428, 1430, 1431, 1435, 1437, 1438, 1439, 1442], "correspond": [124, 175, 246, 247, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 321, 322, 323, 326, 327, 330, 331, 333, 334, 335, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 371, 490, 491, 569, 577, 585, 592, 595, 602, 647, 1400, 1403, 1421, 1427, 1428, 1431, 1432, 1433, 1436], "datacalcmodel": [125, 126, 127, 147, 181, 1411, 1425], "thei": [125, 193, 207, 208, 221, 231, 812, 818, 824, 829, 834, 861, 866, 872, 1414, 1422, 1425, 1429, 1430, 1431, 1432, 1434, 1440], "depend": [125, 195, 447, 470, 567, 574, 606, 607, 620, 631, 703, 709, 714, 715, 720, 721, 790, 793, 800, 801, 803, 806, 813, 817, 819, 823, 825, 828, 856, 860, 862, 865, 867, 870, 1076, 1095, 1096, 1097, 1099, 1105, 1106, 1116, 1117, 1180, 1181, 1188, 1189, 1190, 1191, 1197, 1198, 1201, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1414, 1421, 1422, 1425, 1427, 1430, 1433, 1434, 1440, 1442], "individu": [125, 207, 214, 714, 720, 808, 1076, 1080, 1081, 1097, 1099, 1101, 1102, 1106, 1109, 1110, 1117, 1124, 1134, 1138, 1139, 1166, 1180, 1182, 1183, 1189, 1191, 1193, 1194, 1197, 1199, 1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1241, 1244, 1246, 1247, 1250, 1252, 1253, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1412, 1414, 1428, 1431, 1434, 1437], "out_core_var": 127, "initial_result": 127, "sel": [127, 499, 1199, 1201], "isel": [127, 499], "typic": [127, 151, 184, 201, 1143], "fc": [127, 166, 1191, 1192, 1428, 1430, 1433, 1435, 1436, 1437, 1439, 1440, 1441, 1442], "extendedst": [128, 129, 130, 131, 132, 133, 134, 135, 136, 1411, 1425], "extend": [128, 1408, 1409, 1411, 1423, 1426], "pmodel": 128, "append": [128, 130, 152, 154, 185, 187, 1437], "analys": [137, 1411], "handl": [137, 1411, 1425], "turbine_typ": [137, 561, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 992, 994, 1428, 1429, 1432, 1436, 1438, 1440], "turbinetyp": [137, 214, 215, 216, 561, 699, 702, 703, 708, 709, 714, 715, 720, 721, 1411, 1414], "turbine_model_nam": 137, "found": [137, 165, 565, 1002, 1413, 1415, 1423, 1432, 1438, 1440], "turbine_model_sel": 137, "n_model": 137, "pre_rotor_model": 137, "farmdatamodellist": [137, 152, 153, 154, 155, 156, 157, 158, 1411], "post_rotor_model": 137, "par": [137, 138, 551, 835, 843, 855, 974, 975, 995], "respecitv": 137, "set_par": [137, 145, 551], "model_nam": [137, 145, 551], "init_par": [137, 145, 551], "final_par": [137, 145, 551], "collect_model": [137, 140, 551], "analyz": [137, 140, 551, 1027], "gather": [137, 140, 551], "st_sel": [137, 139, 211, 212, 214, 551, 638, 639, 640, 642, 644, 647, 649, 653, 655, 659, 661, 664, 667, 671, 673, 675, 677, 680, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 700, 702, 704, 708, 710, 714, 716, 720, 722], "respect": [138, 496, 631, 632, 1255, 1293, 1429, 1440, 1441, 1442], "post": [139, 1426, 1428, 1434, 1437, 1439], "Such": [143, 169, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 1176, 1429], "reason": [143, 169, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 798, 1176], "here": [143, 169, 203, 502, 512, 522, 541, 609, 645, 668, 706, 712, 718, 724, 784, 785, 813, 814, 825, 826, 830, 831, 856, 857, 1176, 1412, 1413, 1415, 1425, 1426, 1428, 1429, 1431, 1433, 1435, 1436, 1438, 1440, 1441, 1442], "automat": [143, 169, 191, 192, 193, 203, 502, 512, 522, 541, 609, 625, 632, 645, 668, 706, 712, 718, 724, 921, 942, 981, 982, 983, 984, 985, 986, 1176, 1255, 1293, 1425, 1440], "part": [143, 169, 203, 246, 328, 344, 371, 502, 512, 522, 541, 566, 574, 609, 645, 668, 706, 712, 718, 724, 798, 1176, 1429, 1431, 1433, 1434, 1436], "befor": [147, 148, 230, 492, 665, 797, 811, 981, 982, 983, 984, 985, 986, 1162, 1163, 1170, 1171, 1191, 1192, 1201, 1359, 1360, 1428, 1431, 1437], "By": [152, 185, 1143, 1428, 1442], "togeth": [152, 185, 1442], "common": [152, 185, 784, 830, 835, 851, 1255, 1293, 1422], "insert": [152, 156, 207, 210, 1401, 1402], "farmmodel": [159, 552, 561, 1411, 1414], "oper": [159, 234, 875, 879, 883, 887, 891, 896, 901, 906, 911, 928, 944, 945, 946, 1411, 1435], "contrast": [159, 1025, 1411], "turbinemodel": [159, 209, 210, 211, 212, 213, 214, 552, 553, 561, 638, 639, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 1411, 1414], "allow": [159, 549, 1411, 1425, 1431, 1439], "applic": [159, 1080, 1081, 1084, 1085, 1101, 1102, 1109, 1110, 1124, 1131, 1132, 1137, 1141, 1142, 1166, 1182, 1183, 1184, 1193, 1194, 1199, 1215, 1216, 1220, 1221, 1225, 1226, 1230, 1231, 1236, 1237, 1246, 1247, 1252, 1253, 1258, 1259, 1265, 1266, 1271, 1272, 1277, 1278, 1283, 1284, 1296, 1297, 1306, 1307, 1316, 1317, 1326, 1327, 1338, 1339, 1347, 1349, 1363, 1370, 1411, 1425, 1426, 1431, 1437], "error": [165, 166, 241, 498, 819, 996, 1002, 1440], "upcast": 166, "accept_non": 166, "accept_nan": 166, "identifi": [166, 245, 369, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 1405, 1410, 1425, 1439], "state_turbin": [166, 434, 1410], "state_point": [166, 432, 1410], "combin": [166, 873, 874, 877, 878, 881, 882, 885, 886, 1437, 1442], "m": [166, 448, 449, 450, 455, 461, 463, 468, 473, 474, 475, 483, 484, 489, 499, 506, 714, 720, 771, 772, 948, 949, 950, 951, 952, 953, 954, 981, 982, 983, 984, 985, 986, 1099, 1100, 1255, 1293, 1421, 1427, 1428, 1429, 1430, 1433, 1438, 1439, 1440, 1441], "f": [166, 638, 639, 955, 956, 1025, 1255, 1293, 1428, 1433, 1435, 1437, 1439, 1440, 1441, 1442], "p": [166, 459, 462, 470, 490, 491, 647, 702, 703, 709, 715, 721, 960, 994, 1004, 1006, 1027, 1255, 1293, 1421, 1425, 1426, 1428, 1429, 1430, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "scalar": [166, 246, 247, 251, 255, 262, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 321, 322, 323, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 371, 606, 607, 1255, 1293], "data_prio": 166, "search": [166, 498, 499, 506, 508, 561, 566, 691, 784, 785, 813, 814, 825, 826, 830, 831, 856, 857, 1024, 1419, 1425, 1432, 1433, 1438, 1440], "throw": 166, "an": [166, 207, 371, 384, 624, 625, 726, 727, 730, 731, 734, 735, 738, 739, 753, 819, 914, 948, 949, 950, 951, 952, 953, 954, 979, 982, 985, 995, 1025, 1124, 1128, 1166, 1199, 1255, 1293, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1406, 1412, 1413, 1418, 1425, 1428, 1430, 1436, 1437, 1440, 1442], "nan": [166, 246, 306, 498, 499, 549, 947, 1025, 1079, 1425, 1435], "been": [168, 1087, 1406, 1408, 1425, 1426, 1437], "quantiti": [173, 191, 1434], "new_wake_delta": [173, 175, 176, 179, 567, 569, 570, 572, 574, 577, 578, 580, 582, 585, 586, 588, 590, 592, 593, 595, 596, 598, 600, 602, 603, 605], "fill": [173, 176, 179, 241, 246, 323, 371, 498, 567, 570, 572, 574, 578, 580, 582, 586, 588, 590, 593, 596, 598, 600, 603, 605, 1029, 1039, 1047, 1054, 1061, 1069, 1412], "zero": [173, 179, 465, 567, 572, 574, 580, 582, 588, 590, 593, 598, 600, 605, 691, 791, 792, 795, 801, 802, 805, 807, 816, 822, 828, 833, 859, 865, 870, 970, 972, 973, 1027, 1255, 1293, 1380, 1385, 1421, 1428, 1438], "specifi": [173, 175, 246, 251, 371, 567, 569, 574, 577, 582, 585, 590, 592, 593, 595, 600, 602, 660, 1414, 1425, 1431, 1440], "evaluate_result": [173, 176, 567, 570, 574, 578, 582, 586, 590, 593, 596, 600, 603], "pwake_typ": [173, 178, 567, 574, 582, 590, 593, 600], "wake_delta": [175, 176, 179, 228, 229, 230, 231, 234, 235, 567, 569, 570, 572, 574, 577, 578, 580, 582, 585, 586, 588, 590, 592, 593, 595, 596, 598, 600, 602, 603, 605, 790, 793, 796, 797, 800, 803, 808, 810, 811, 812, 813, 818, 819, 824, 825, 829, 830, 834, 856, 861, 862, 866, 867, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 896, 897, 901, 902, 906, 907, 911, 912], "ani": [175, 176, 179, 246, 257, 302, 338, 371, 376, 569, 570, 572, 577, 578, 580, 585, 586, 588, 592, 595, 596, 598, 602, 603, 605, 699, 917, 1026, 1027, 1080, 1081, 1084, 1085, 1101, 1102, 1109, 1110, 1131, 1132, 1141, 1142, 1182, 1183, 1184, 1193, 1194, 1215, 1216, 1220, 1221, 1225, 1226, 1230, 1231, 1236, 1237, 1246, 1247, 1252, 1253, 1258, 1259, 1265, 1266, 1271, 1272, 1277, 1278, 1283, 1284, 1296, 1297, 1306, 1307, 1316, 1317, 1326, 1327, 1339, 1349, 1370, 1386, 1388, 1394, 1400, 1401, 1402, 1403, 1414, 1427, 1430, 1434, 1437, 1439, 1440, 1442], "states_turbin": [176, 193, 195, 570, 578, 586, 596, 603, 620], "amb_r": [176, 570, 578, 586, 596, 603], "place": [176, 570, 578, 586, 596, 603, 949, 950, 951, 952, 953, 954, 1201, 1347, 1363, 1416, 1430, 1431, 1435], "calc_var": [191, 192, 618, 624, 625, 631, 632, 653, 654], "Their": [191, 192, 625, 632], "ad": [191, 192, 231, 233, 234, 625, 632, 643, 812, 818, 824, 829, 834, 861, 866, 872, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 894, 896, 899, 901, 904, 906, 909, 911, 928, 947, 1143, 1201, 1413, 1425, 1427, 1428, 1431, 1432, 1436, 1437, 1438, 1440, 1441, 1442], "n_rotor_point": [191, 197, 618, 622, 624, 629, 631, 636], "rotor_point_weight": [191, 200, 618, 623, 624, 630, 631, 637], "design_point": [191, 194, 618, 619, 624, 627, 631, 634], "design": [191, 194, 196, 618, 619, 621, 624, 627, 631, 634], "get_rotor_point": [191, 196, 618, 621, 624, 631], "eval_rpoint_result": [191, 195, 618, 620, 624, 631], "rpoint_result": [191, 195, 618, 620, 624, 631], "rpoint": [191, 193, 427, 428, 604, 618, 624, 631, 1410], "rmodel_typ": [191, 198, 618, 624, 631], "store_rpoint": 193, "store_rweight": 193, "store_amb_r": 193, "n_rpoint": [193, 195, 196, 197, 200, 620, 621, 622, 623, 629, 630, 636, 637], "reult": 193, "come": [193, 1429, 1436, 1440], "per": [193, 195, 433, 506, 620, 624, 625, 631, 632, 790, 928, 937, 939, 940, 941, 942, 945, 946, 1347, 1381, 1410, 1413, 1436], "formul": [194, 619, 627, 634, 1436], "plane": [194, 619, 627, 634, 948, 949, 950, 951, 952, 953, 954, 979, 981, 982, 983, 984, 985, 986, 1059, 1419, 1437], "z": [194, 619, 627, 634, 742, 743, 950, 951, 953, 954, 981, 982, 983, 984, 985, 986], "coordin": [194, 221, 222, 224, 225, 229, 480, 484, 485, 498, 499, 619, 627, 634, 753, 756, 757, 759, 762, 763, 764, 767, 768, 771, 775, 776, 778, 781, 782, 784, 787, 788, 796, 810, 919, 920, 981, 982, 983, 984, 985, 986, 1180, 1255, 1293, 1298, 1308, 1318, 1328, 1379, 1421, 1428, 1429, 1430, 1431, 1434, 1437, 1438, 1439], "radiu": [194, 619, 627, 634, 803, 806, 813, 817, 819, 823, 856, 860, 1045, 1046, 1076, 1077, 1398, 1399], "n_rotor_axi": [194, 619, 627, 634], "n_rotor_sid": [194, 619, 627, 634], "n_rotor_up": [194, 619, 627, 634], "dpoint": [194, 619, 627, 634], "copy_to_ambi": [195, 620], "either": [195, 506, 508, 534, 536, 606, 607, 620, 675, 676, 974, 975, 995, 996, 1099, 1100, 1201, 1419, 1421, 1436, 1439], "In": [195, 620, 1025, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "latter": [195, 574, 620, 1379, 1425, 1431, 1435, 1436, 1440, 1442], "case": [195, 498, 550, 620, 942, 970, 972, 973, 989, 994, 1002, 1075, 1413, 1425, 1428, 1431, 1435, 1436, 1437, 1438, 1439, 1440, 1442], "expect": [195, 243, 244, 620, 660, 675, 1430, 1433], "els": [195, 620, 970, 972, 973], "If": [195, 565, 620, 691, 784, 785, 813, 814, 825, 826, 830, 831, 856, 857, 966, 967, 970, 972, 973, 1025, 1167, 1255, 1293, 1379, 1435, 1440], "describ": [201, 1413, 1427, 1429, 1430, 1438], "meteorolog": [201, 1434], "speed": [201, 448, 449, 450, 455, 473, 474, 475, 483, 506, 519, 520, 526, 527, 647, 648, 680, 681, 696, 698, 702, 703, 708, 709, 714, 715, 720, 721, 726, 730, 734, 738, 889, 890, 894, 895, 899, 900, 904, 905, 909, 910, 994, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1401, 1402, 1413, 1414, 1420, 1421, 1428, 1429, 1430, 1431, 1433, 1434, 1436, 1438, 1440, 1441, 1442], "turbul": [201, 453, 479, 720, 813, 862, 863, 1414, 1421, 1422, 1425, 1430, 1433, 1434, 1440, 1441, 1442], "intens": [201, 453, 479, 720, 1414, 1421, 1422, 1425, 1430, 1434, 1440, 1441, 1442], "air": [201, 451, 476, 519, 520, 526, 527, 696, 698, 702, 703, 708, 709, 714, 720, 721, 994, 1414, 1421, 1425, 1430, 1433], "densiti": [201, 451, 476, 519, 520, 526, 527, 696, 698, 714, 994, 1228, 1229, 1256, 1414, 1417, 1421, 1425, 1430, 1433], "mere": 207, "defin": [207, 753, 1255, 1293, 1294, 1304, 1414, 1417, 1421, 1431, 1434, 1435, 1436, 1439, 1442], "basic": [207, 243, 244, 551, 574, 671, 1412, 1414, 1431, 1433, 1437], "xy": [207, 208, 948, 949, 952, 979, 981, 984, 1294, 1298, 1304, 1308, 1314, 1318, 1324, 1328, 1425, 1430, 1437, 1442], "ground": [207, 208, 463, 1421], "posit": [207, 208, 210, 246, 306, 995, 1076, 1097, 1338, 1415, 1416, 1425, 1435], "2": [207, 208, 329, 419, 496, 497, 549, 567, 568, 611, 791, 792, 795, 802, 806, 807, 817, 823, 825, 826, 833, 860, 862, 867, 921, 1025, 1027, 1031, 1032, 1033, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1065, 1066, 1071, 1072, 1073, 1074, 1255, 1293, 1298, 1308, 1318, 1328, 1379, 1398, 1399, 1414, 1424, 1426, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1438, 1439, 1440, 1441, 1442], "appear": [207, 208, 819, 1431, 1433, 1435, 1440, 1442], "mstates_sel": 207, "boolean": [207, 208, 638, 639, 1134, 1135, 1150, 1241, 1242, 1255, 1293, 1298, 1308, 1318, 1328], "diamet": [207, 208, 214, 215, 461, 492, 631, 632, 671, 672, 813, 919, 920, 921, 1214, 1294, 1295, 1298, 1304, 1305, 1308, 1314, 1315, 1318, 1324, 1325, 1328, 1414, 1421, 1425, 1431, 1434], "h": [207, 208, 214, 215, 243, 244, 463, 499, 699, 922, 1421, 1428, 1429, 1430, 1433, 1437, 1438, 1439], "hub": [207, 208, 214, 215, 492, 1414, 1425, 1433, 1434, 1437, 1438], "height": [207, 208, 214, 215, 217, 218, 443, 463, 480, 492, 498, 499, 506, 508, 517, 631, 632, 671, 672, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 747, 749, 751, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1413, 1414, 1420, 1421, 1424, 1425, 1426, 1429, 1430, 1434, 1437, 1438], "turbine_model": [207, 208, 492, 552, 553, 561, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "add_model": [207, 209], "states_sel": [207, 209, 210, 431, 506, 508, 514, 517, 534, 536, 543, 547, 981, 982, 983, 984, 985, 986, 1410, 1437], "insert_model": [207, 210], "models_state_sel": 208, "tmodel_typ": [211, 213, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690], "can": [214, 338, 582, 606, 793, 835, 1133, 1201, 1255, 1293, 1412, 1413, 1414, 1415, 1422, 1423, 1425, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "overwritten": 214, "p_nomin": [214, 215, 445, 459, 699, 942, 1421, 1425], "nomin": [214, 215, 930, 1435], "power": [214, 215, 426, 447, 467, 470, 563, 647, 648, 695, 697, 702, 703, 708, 709, 714, 715, 720, 721, 881, 882, 899, 900, 928, 930, 935, 936, 942, 992, 994, 1189, 1410, 1414, 1415, 1418, 1421, 1424, 1425, 1426, 1431, 1433, 1434, 1436, 1440, 1441, 1442], "kw": [214, 215, 426, 444, 647, 648, 699, 942, 1410], "p_unit": [214, 215, 426, 699, 1410, 1425], "ttype_typ": [214, 216, 695, 697, 699, 702, 708, 714, 720], "mw": [215, 243, 244, 422, 426, 1410, 1429, 1433, 1435, 1440, 1441], "gw": [215, 370, 426, 1410, 1426], "verticalprofil": [217, 218, 219, 220, 526, 527, 534, 536, 726, 727, 730, 731, 734, 735, 738, 739, 742, 746, 749, 1411, 1414], "vertic": [217, 631, 632, 948, 950, 951, 979, 1411, 1414, 1418, 1425, 1433, 1442], "profil": [217, 218, 219, 220, 526, 527, 536, 726, 728, 729, 730, 732, 733, 734, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 862, 1012, 1016, 1017, 1021, 1411, 1414, 1420, 1425, 1429, 1433], "input_var": [217, 219, 642, 643, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 748, 749, 752, 893, 898, 903, 908, 913], "profile_typ": [217, 220, 726, 730, 734, 738, 742, 746, 749], "translat": [221, 1166, 1168, 1169, 1199, 1209, 1210, 1338, 1344, 1345, 1347, 1357, 1358, 1363, 1375, 1376, 1434, 1442], "global": [221, 1027, 1429], "also": [221, 338, 921, 1425, 1426, 1428, 1429, 1431, 1434, 1435, 1436, 1440, 1442], "respons": [221, 1414, 1434, 1436], "calc_ord": [221, 223, 753, 755, 759, 761, 764, 766, 771, 774, 778, 780, 784, 786], "get_wake_coo": [221, 225, 753, 757, 759, 763, 764, 768, 771, 776, 778, 782, 784, 788], "get_wake_modelling_data": [221, 226, 753, 759, 764, 769, 771, 778, 784], "get_centreline_point": [221, 224, 753, 756, 759, 762, 764, 767, 771, 775, 778, 781, 784, 787], "along": [221, 222, 224, 624, 625, 631, 632, 753, 756, 759, 762, 764, 767, 771, 775, 778, 781, 784, 787, 1414, 1425, 1428, 1434, 1438, 1442], "centrelin": [221, 222, 224, 753, 756, 759, 762, 764, 767, 771, 775, 778, 781, 784, 787, 867, 868, 1425, 1434], "calc_centreline_integr": [221, 222, 753, 759, 764, 771, 778, 784], "integr": [221, 222, 246, 329, 371, 419, 624, 625, 631, 632, 753, 759, 764, 771, 778, 784, 867, 868, 1422, 1425], "wframe_typ": [221, 227, 753, 759, 764, 771, 778, 784], "dx": [222, 867, 868, 1432], "self_wak": [222, 867, 868], "ipar": [222, 508, 676, 867, 868], "upper": [222, 631, 889, 890, 894, 895, 899, 900, 904, 905, 909, 910, 1243, 1414, 1439], "bound": [222, 498, 1076, 1097, 1099, 1106, 1213, 1218, 1223, 1228, 1234, 1239, 1243, 1244, 1250, 1425], "consid": [222, 867, 868, 1133, 1143, 1425, 1440], "interpol": [222, 498, 499, 508, 642, 643, 676, 695, 697, 702, 708, 714, 715, 720, 721, 742, 743, 764, 765, 771, 772, 778, 779, 1414, 1425], "n_var": [222, 1143], "wake_coo": [225, 229, 757, 763, 768, 776, 782, 788, 796, 810], "creation": [226, 563, 769, 968, 990, 1405, 1418, 1437, 1441], "init_wake_delta": [228, 231, 790, 793, 800, 803, 808, 812, 813, 818, 819, 824, 825, 829, 830, 834, 856, 861, 862, 866, 867, 872], "storag": [228, 231, 771, 772, 790, 793, 800, 803, 808, 812, 813, 818, 819, 824, 825, 829, 830, 834, 856, 861, 862, 866, 867, 872], "finalize_wake_delta": [228, 230, 790, 793, 797, 800, 803, 808, 811, 813, 819, 825, 830, 856, 862, 867], "amb_result": [228, 230, 234, 790, 793, 797, 800, 803, 808, 811, 813, 819, 825, 830, 856, 862, 867, 875, 879, 883, 887, 891, 896, 901, 906, 911], "wmodel_typ": [228, 232, 790, 793, 800, 803, 808, 813, 819, 825, 830, 856, 862, 867], "afterward": [230, 797, 811], "wakesuperposit": [233, 234, 235, 561, 793, 873, 877, 881, 885, 889, 894, 899, 904, 909, 1411, 1414], "superposit": [233, 561, 790, 793, 794, 800, 803, 804, 808, 813, 814, 819, 820, 825, 826, 830, 831, 856, 857, 862, 863, 867, 868, 873, 877, 881, 885, 1411, 1414, 1425, 1432, 1434, 1441], "note": [233, 960, 1347, 1414, 1427, 1429, 1430, 1431, 1433, 1436, 1438, 1441, 1442], "matter": [233, 1435], "other": [233, 519, 987, 1027, 1124, 1162, 1163, 1166, 1170, 1171, 1199, 1338, 1347, 1359, 1360, 1363, 1413, 1418, 1425, 1427, 1430, 1432, 1434, 1435, 1436, 1442], "calc_wakes_plus_wak": [233, 235, 873, 876, 877, 880, 881, 884, 885, 888, 889, 892, 894, 897, 899, 902, 904, 907, 909, 912], "calc_final_wake_delta": [233, 234, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 894, 896, 899, 901, 904, 906, 909, 911], "final_wake_delta": [234, 875, 879, 883, 887, 891, 896, 901, 906, 911], "simpl": [234, 875, 879, 883, 887, 891, 896, 901, 906, 911, 1425, 1430, 1435, 1438, 1442], "plu": [234, 875, 879, 883, 887, 891, 896, 901, 906, 911, 1379, 1397, 1437], "sel_sp": [235, 876, 880, 884, 888, 892, 897, 902, 907, 912], "wake_model_result": [235, 876, 880, 884, 888, 892, 897, 902, 907, 912], "n_sel_sp": [235, 876, 880, 884, 888, 892, 897, 902, 907, 912], "boundari": [236, 237, 921, 1028, 1029, 1033, 1035, 1037, 1039, 1043, 1045, 1047, 1050, 1052, 1054, 1057, 1059, 1061, 1065, 1067, 1069, 1073, 1076, 1077, 1097, 1098, 1213, 1214, 1215, 1216, 1217, 1294, 1295, 1298, 1304, 1305, 1308, 1314, 1315, 1318, 1324, 1325, 1328, 1415, 1417, 1429, 1431], "geom2d": [236, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1294, 1295, 1304, 1305, 1314, 1315, 1324, 1325, 1397, 1431], "areageometri": [236, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1045, 1052, 1059, 1067, 1068, 1076, 1077, 1294, 1295, 1304, 1305, 1314, 1315, 1324, 1325, 1397, 1419], "wind_farm": [236, 237], "add_turbin": [236, 238, 492, 1442], "turbine_nam": [236, 240, 964, 966, 967], "staticdata": [241, 242, 1412, 1429], "static": [241, 696, 698, 702, 703, 708, 709, 714, 715, 720, 721, 996, 998, 999, 1035, 1036, 1412, 1419, 1425, 1426, 1428, 1430, 1431, 1433, 1436, 1437, 1438, 1439, 1440, 1441], "directori": [241, 955, 956, 1412], "add_data_packag": [241, 996, 998], "context": [241, 996, 998, 999, 1000, 1001, 1002, 1003, 1428, 1431, 1437, 1439], "packag": [241, 996, 998, 999, 1027, 1075, 1405, 1412, 1413, 1414, 1415, 1419, 1422, 1425, 1426, 1427, 1429, 1431, 1432, 1434, 1438, 1442], "file_sfx": [241, 996, 998], "file": [241, 243, 244, 492, 493, 494, 495, 498, 499, 506, 508, 534, 536, 550, 563, 606, 607, 643, 659, 660, 675, 676, 695, 696, 697, 698, 702, 703, 708, 709, 714, 715, 720, 721, 798, 819, 919, 924, 925, 926, 927, 928, 948, 955, 956, 957, 960, 961, 963, 964, 966, 967, 968, 973, 979, 981, 982, 983, 984, 985, 986, 987, 990, 992, 996, 998, 999, 1000, 1001, 1002, 1004, 1009, 1010, 1378, 1379, 1396, 1404, 1412, 1413, 1414, 1418, 1419, 1425, 1426, 1427, 1430, 1431, 1433, 1436, 1438, 1439, 1440, 1441], "locat": [241, 618, 943, 996, 998, 999, 1401, 1402, 1427, 1429, 1436, 1442], "add_data_package_fil": [241, 996, 999], "file_nam": [241, 243, 919, 928, 948, 955, 960, 961, 964, 968, 973, 979, 987, 990, 992, 996, 999, 1002, 1412], "add_fil": [241, 996, 1000, 1001], "file_path": [241, 494, 495, 919, 924, 925, 926, 927, 964, 966, 967, 996, 1000, 1001, 1004, 1009, 1010, 1413], "path": [241, 243, 244, 494, 495, 506, 508, 534, 536, 550, 563, 659, 660, 675, 676, 696, 698, 702, 703, 708, 709, 714, 715, 720, 721, 919, 928, 948, 955, 957, 961, 963, 964, 966, 967, 968, 973, 979, 987, 990, 992, 996, 1000, 1001, 1002, 1009, 1010, 1052, 1378, 1379, 1396, 1404, 1419, 1426, 1428, 1437, 1439, 1440], "get_file_path": [241, 996, 1002, 1429], "check_raw": [241, 996, 1002], "toc": [241, 996, 1003, 1429], "content": [241, 561, 566, 996, 1003, 1440], "data_book": [242, 996, 997], "parse_pct_file_nam": [243, 1412], "pars": [243, 244, 498, 499, 1124, 1159, 1166, 1199, 1338, 1347, 1363, 1412], "format": [243, 244, 498, 499, 506, 923, 960, 981, 982, 983, 984, 985, 986, 1004, 1010, 1027, 1413, 1429, 1430], "csv": [243, 244, 492, 493, 506, 919, 924, 964, 966, 967, 1004, 1005, 1007, 1008, 1396, 1413, 1419, 1425, 1428, 1431, 1433, 1436, 1437, 1438, 1439, 1440, 1441], "pathlib": [243, 244, 955, 957, 996, 1002, 1429], "parsed_data": [243, 244], "parse_pct_two_fil": [244, 1412], "file_name_a": [244, 1412], "file_name_b": [244, 1412], "second": [244, 449, 474, 1421], "constant": [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 1011, 1013, 1015, 1019, 1020, 1023, 1405, 1421, 1425, 1428, 1430, 1433, 1435, 1436, 1437, 1439, 1440, 1441, 1442], "amb_rpoint_result": [245, 1410], "amb_rpoint_r": [245, 1410], "dtype": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 1410, 1431], "__hash__": [246, 266, 371, 383], "hash": [246, 266, 371, 383, 1027], "__str__": [246, 297, 371, 413, 1076, 1078, 1097, 1099, 1106, 1117, 1124, 1166, 1180, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "__lt__": [246, 271, 371, 389], "__le__": [246, 269, 371, 387], "__eq__": [246, 259, 371, 378], "__ne__": [246, 274, 371, 392], "__gt__": [246, 265, 371, 382], "__ge__": [246, 263, 371, 381], "__add__": [246, 249, 371, 373], "__radd__": [246, 280, 371, 398], "__sub__": [246, 298, 371, 414], "__rsub__": [246, 293, 371, 410], "__mul__": [246, 273, 371, 391], "__rmul__": [246, 288, 371, 405], "__mod__": [246, 272, 371, 390], "__rmod__": [246, 287, 371, 404], "__divmod__": [246, 258, 371, 377], "divmod": [246, 258, 282, 371, 377, 400, 1027], "__rdivmod__": [246, 282, 371, 400], "__pow__": [246, 279, 371, 397], "mod": [246, 279, 290, 371, 397, 407], "pow": [246, 279, 290, 371, 397, 407, 881, 882, 899, 900, 1027], "__rpow__": [246, 290, 371, 407], "__neg__": [246, 275, 371, 393], "__pos__": [246, 278, 371, 396], "__abs__": [246, 248, 371, 372], "ab": [246, 248, 371, 372, 1027], "__bool__": [246, 256, 371, 375], "__int__": [246, 267, 371, 385], "__float__": [246, 260, 371, 379], "__floordiv__": [246, 261, 371, 380], "__rfloordiv__": [246, 285, 371, 402], "__truediv__": [246, 299, 371, 415], "__rtruediv__": [246, 294, 371, 411], "see": [246, 247, 276, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 321, 322, 323, 326, 327, 330, 331, 333, 334, 335, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 371, 394, 1027, 1234, 1235, 1239, 1240, 1255, 1290, 1291, 1293, 1387, 1389, 1390, 1425, 1427, 1428, 1431, 1433, 1434, 1441], "help": [246, 276, 371, 394, 1004, 1027, 1234, 1235, 1239, 1240, 1290, 1291, 1387, 1389, 1390, 1419], "accur": [246, 276, 371, 394, 1234, 1235, 1239, 1240, 1290, 1291, 1387, 1389, 1390], "signatur": [246, 276, 371, 394, 1234, 1235, 1239, 1240, 1290, 1291, 1387, 1389, 1390], "as_integer_ratio": [246, 306], "pair": [246, 306, 1255, 1293], "whose": [246, 306, 1415, 1429], "ratio": [246, 306], "equal": [246, 306, 445, 459, 462, 1421], "denomin": [246, 306, 371, 418], "rais": [246, 306, 498, 1002], "overflowerror": [246, 306, 1027], "infin": [246, 306], "valueerror": [246, 306, 1027, 1255, 1293], "is_integ": [246, 329, 371, 419], "finit": [246, 329, 371, 419], "otherwis": [246, 329, 1002, 1433], "item": [246, 257, 330, 371, 376], "parametr": [246, 257, 371, 376], "wrapper": [246, 257, 371, 376, 552, 1414, 1425], "around": [246, 257, 371, 376, 1428], "__invert__": [246, 268, 371, 386], "__lshift__": [246, 270, 371, 388], "__rlshift__": [246, 286, 371, 403], "__rshift__": [246, 292, 371, 409], "__rrshift__": [246, 291, 371, 408], "__and__": [246, 250, 371, 374], "__rand__": [246, 281, 371, 399], "__xor__": [246, 300, 371, 416], "__rxor__": [246, 295, 371, 412], "__or__": [246, 277, 371, 395], "__ror__": [246, 289, 371, 406], "tolist": [246, 363, 371], "method": [246, 257, 301, 302, 303, 304, 305, 307, 309, 310, 311, 312, 314, 315, 316, 317, 319, 321, 322, 323, 326, 327, 330, 331, 333, 334, 335, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 371, 376, 494, 643, 873, 874, 877, 878, 881, 882, 885, 886, 1009, 1010], "ident": [246, 247, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 321, 322, 323, 326, 327, 330, 331, 333, 334, 335, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 371, 1430, 1442], "attribut": [246, 247, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 321, 322, 323, 326, 327, 330, 331, 333, 334, 335, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 371, 1429], "itemset": [246, 331, 371], "tobyt": [246, 361, 371], "tofil": [246, 362, 371], "tostr": [246, 364, 371], "byteswap": [246, 309, 371], "astyp": [246, 307, 371], "getfield": [246, 327, 371], "setfield": [246, 350, 371], "resiz": [246, 347, 371], "__array__": [246, 251, 371], "sc": [246, 251, 255, 371], "__array_wrap__": [246, 255, 371], "obj": [246, 255, 371, 1138, 1139, 1141, 1142, 1339, 1349, 1370], "__sizeof__": [246, 296, 371], "byte": [246, 296, 332, 336, 338, 357, 371, 1027], "__reduce__": [246, 283, 371], "helper": [246, 283, 371, 955, 995, 1004, 1009, 1010, 1172, 1405, 1415, 1419], "pickl": [246, 283, 371], "dump": [246, 321, 322, 371], "transpos": [246, 366, 371], "put": [246, 342, 371], "repeat": [246, 345, 371, 1201], "choos": [246, 310, 371, 1255, 1293, 1427, 1428, 1433, 1435, 1441], "sort": [246, 354, 371, 1027], "argsort": [246, 305, 371], "searchsort": [246, 349, 371], "argmax": [246, 303, 371], "argmin": [246, 304, 371], "reshap": [246, 346, 371], "squeez": [246, 355, 371], "view": [246, 325, 368, 371], "swapax": [246, 359, 371], "max": [246, 333, 371, 549, 660, 877, 894, 921, 944, 945, 946, 981, 982, 983, 984, 985, 986, 1027, 1180, 1181, 1190, 1198, 1199, 1201, 1243, 1269, 1270, 1414, 1417, 1425, 1436], "min": [246, 335, 371, 549, 660, 921, 944, 945, 946, 981, 982, 983, 984, 985, 986, 1027, 1180, 1181, 1190, 1198, 1199, 1201, 1243, 1269, 1270, 1417, 1425, 1436, 1437, 1439], "ptp": [246, 341, 371], "trace": [246, 365, 371, 1439], "diagon": [246, 319, 371], "clip": [246, 311, 371], "conj": [246, 313, 371], "conjug": [246, 314, 371], "nonzero": [246, 339, 371], "std": [246, 356, 371], "sum": [246, 358, 371, 921, 928, 934, 939, 941, 944, 945, 946, 947, 1027, 1124, 1154, 1155, 1166, 1180, 1181, 1190, 1198, 1199, 1255, 1293, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1425, 1440], "cumsum": [246, 317, 371], "prod": [246, 340, 371], "cumprod": [246, 316, 371], "compress": [246, 312, 371, 1404], "flatten": [246, 326, 371], "ravel": [246, 343, 371], "round": [246, 348, 371, 1027, 1404], "__format__": [246, 262, 371], "formatt": [246, 262, 371], "setflag": [246, 351, 371], "newbyteord": [246, 338, 371], "new_ord": [246, 338, 371], "differ": [246, 338, 371, 567, 582, 590, 1414, 1422, 1425, 1429, 1430, 1436], "ndim": [246, 337, 371], "stride": [246, 357, 371], "pointer": [246, 318, 371], "items": [246, 332, 371], "length": [246, 332, 336, 371, 468, 489, 496, 549, 567, 568, 771, 772, 778, 779, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1172, 1415, 1421, 1425, 1429], "element": [246, 332, 353, 371, 624, 625, 631, 632, 1255, 1293], "gentyp": [246, 353, 371], "nbyte": [246, 336, 371], "descriptor": [246, 320, 371], "real": [246, 344, 371, 1025, 1419], "imag": [246, 328, 371, 921, 943, 949, 950, 951, 952, 953, 954, 995, 1028, 1029, 1035, 1037, 1039, 1045, 1047, 1052, 1054, 1059, 1061, 1067, 1069, 1437], "imaginari": [246, 328, 371], "flat": [246, 325, 371], "t": [246, 247, 371, 478, 490, 491, 492, 680, 681, 764, 765, 778, 779, 947, 1004, 1006, 1255, 1293, 1421, 1437, 1439], "__array_interface__": [246, 252, 371], "protocol": [246, 252, 254, 371], "python": [246, 252, 257, 371, 376, 1027, 1255, 1293, 1419, 1425, 1426, 1434, 1437], "side": [246, 252, 371, 947, 1437], "__array_struct__": [246, 254, 371], "struct": [246, 254, 371], "__array_priority__": [246, 253, 371], "prioriti": [246, 253, 371], "pleas": [247, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 321, 322, 323, 326, 327, 330, 331, 333, 334, 335, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 1423, 1426], "version": [257, 329, 376, 419, 1255, 1293, 1425, 1426, 1427], "22": [257, 329, 376, 419, 1429, 1431, 1435, 1439, 1440], "alia": [257, 376], "genericalia": [257, 376], "import": [257, 376, 1075, 1255, 1293, 1419, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "signedinteg": [257, 371, 376, 1410], "avail": [257, 376, 1414, 1422, 1424, 1425, 1427, 1429, 1440], "9": [257, 376, 1255, 1293, 1425, 1427, 1428, 1429, 1431, 1432, 1435, 1436, 1437, 1438, 1439, 1440, 1442], "later": [257, 376, 1431, 1435, 1437, 1439, 1440], "pep": [257, 376], "585": [257, 376], "hint": [257, 376, 1075, 1419], "gener": [257, 376, 753, 867, 914, 916, 918, 928, 943, 948, 949, 950, 951, 952, 953, 954, 1085, 1142, 1416, 1418, 1422, 1425, 1429, 1431], "standard": [257, 376, 928, 938, 1255, 1293, 1425, 1438], "doubl": [306, 329, 1425], "10": [306, 784, 813, 825, 830, 835, 862, 867, 1027, 1423, 1425, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "25": [306, 814, 862, 863, 867, 868, 1425, 1428, 1429, 1431, 1435, 1438], "4": [306, 813, 1255, 1293, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "chang": [338, 659, 660, 1414, 1425, 1426, 1427, 1429, 1433], "made": 338, "field": [338, 904, 928, 947, 981, 982, 983, 984, 985, 986, 1428, 1430, 1434, 1438, 1441, 1442], "follow": [338, 506, 771, 819, 1255, 1293, 1414, 1424, 1425, 1428, 1429, 1430, 1431, 1433, 1434, 1435, 1436, 1439, 1440, 1441, 1442], "swap": 338, "opposit": 338, "endian": 338, "littl": 338, "big": 338, "nativ": 338, "ignor": 338, "abov": [338, 982, 983, 985, 986, 1426, 1427, 1431, 1435, 1436, 1440, 1442], "new_dtyp": 338, "giga": [370, 1410], "watt": [370, 422, 426, 439, 442, 444, 942, 1410], "ityp": [371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 1410], "__index__": [371, 384], "convert": [371, 384, 1255, 1293, 1379, 1438], "suitabl": [371, 384], "bit_count": [371, 417], "bit": [371, 417, 1431], "absolut": [371, 417, 456, 486, 684, 687, 1414, 1421, 1425, 1442], "analog": [371, 417], "builtin": [371, 417, 1027], "popcount": [371, 417], "c": [371, 417, 1027, 1255, 1293, 1427, 1442], "numer": [371, 420, 742, 1076, 1097, 1099, 1106, 1113, 1117, 1121, 1124, 1156, 1166, 1180, 1189, 1191, 1197, 1199, 1338, 1347, 1363, 1414], "itself": [371, 420], "int64": [417, 419, 1428, 1431, 1437, 1438], "127": [417, 1431, 1440], "7": [417, 1255, 1293, 1425, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "uint32": 419, "5": [419, 813, 863, 1255, 1293, 1404, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "kappa": [421, 1011, 1013, 1015, 1019, 1020, 1023, 1410, 1420], "41": [421, 1011, 1013, 1015, 1019, 1020, 1023, 1410, 1420, 1428, 1431, 1433], "van": [421, 1011, 1013, 1015, 1019, 1020, 1023, 1410], "karman": [421, 1011, 1013, 1015, 1019, 1020, 1023, 1410], "mega": [422, 1410], "pop": [425, 1133, 1143, 1169, 1210, 1345, 1358, 1376, 1410], "popul": [425, 1076, 1081, 1085, 1097, 1099, 1102, 1106, 1110, 1117, 1124, 1132, 1133, 1135, 1139, 1142, 1143, 1166, 1172, 1173, 1180, 1183, 1189, 1191, 1194, 1197, 1199, 1213, 1216, 1218, 1221, 1223, 1226, 1228, 1231, 1234, 1237, 1239, 1242, 1244, 1247, 1250, 1253, 1256, 1259, 1263, 1266, 1269, 1272, 1275, 1278, 1281, 1284, 1287, 1290, 1294, 1297, 1304, 1307, 1314, 1317, 1324, 1327, 1338, 1347, 1363, 1410, 1415, 1429, 1431], "1000000000": [426, 1410], "1000000": [426, 1410], "tw": [426, 439, 1410], "1000000000000": [426, 1410], "rel": [426, 457, 487, 1410, 1421], "rotor_point": [427, 428, 1410, 1432], "rweight": [429, 1410], "rotor_weight": [429, 1410], "state_source_turbin": [433, 1410], "tmodel": [435, 1410, 1428, 1437, 1439], "tmodel_sel": [436, 1410, 1428, 1437, 1439], "tname": [437, 1410, 1428, 1431, 1436, 1437, 1438], "terra": [439, 1410], "valid": [440, 702, 703, 708, 709, 720, 721, 1191, 1192, 1250, 1251, 1252, 1253, 1254, 1294, 1295, 1298, 1304, 1308, 1314, 1318, 1324, 1328, 1410, 1417, 1426, 1440], "xyh": [443, 919, 925, 927, 1421, 1437], "vector": [443, 480, 496, 497, 949, 950, 951, 952, 953, 954, 1059, 1060, 1133, 1143, 1172, 1255, 1293, 1400, 1401, 1402, 1403, 1415, 1419, 1421, 1426, 1431, 1439, 1440, 1441], "kilo": [444, 1410], "amb_cap": [445, 490, 491, 1004, 1006, 1421, 1440], "capac": [445, 459, 928, 930, 1421, 1425, 1440], "amb_p": [445, 447, 462, 490, 491, 1004, 1006, 1421, 1428, 1430, 1431, 1435, 1437, 1438, 1439, 1440], "amb_ct": [446, 490, 491, 1004, 1006, 1421, 1428, 1431, 1437, 1438, 1439], "thrust": [446, 460, 680, 681, 1414, 1421, 1425, 1426, 1428, 1434, 1435, 1442], "coeffici": [446, 460, 1025, 1421, 1434, 1435], "user": [447, 470, 1255, 1293, 1405, 1413, 1421, 1425, 1434], "amb_rew": [448, 490, 491, 990, 991, 1004, 1006, 1421, 1428, 1430, 1431, 1435, 1437, 1438, 1439, 1440], "amb_rews2": [449, 490, 491, 1004, 1006, 1421, 1428, 1431, 1437, 1438, 1439], "moment": [449, 450, 474, 475, 1421], "amb_rews3": [450, 490, 491, 1004, 1006, 1421, 1428, 1431, 1437, 1438, 1439], "third": [450, 475, 1421], "amb_rho": [451, 490, 491, 1004, 1006, 1421, 1428, 1431, 1437, 1438, 1439], "kg": [451, 476, 1421], "m3": [451, 476, 1421], "amb_t": [452, 490, 491, 1004, 1006, 1421], "temperatur": [452, 478, 1421], "kelvin": [452, 478, 1421], "amb_ti": [453, 490, 491, 1004, 1006, 1421, 1428, 1432, 1437, 1438, 1439], "amb_wd": [454, 490, 491, 660, 968, 970, 972, 973, 990, 1004, 1006, 1421, 1428, 1437, 1438, 1439], "degre": [454, 456, 457, 481, 486, 487, 970, 972, 973, 1025, 1401, 1402, 1419, 1421, 1428, 1442], "amb_w": [455, 490, 491, 1004, 1006, 1421, 1429, 1431, 1433, 1436, 1438, 1440, 1441], "amb_yaw": [456, 490, 491, 1004, 1006, 1421, 1428, 1437, 1439], "yaw": [456, 457, 486, 487, 490, 491, 684, 687, 703, 709, 715, 721, 784, 830, 835, 1004, 1006, 1414, 1421, 1424, 1425, 1426, 1428, 1431, 1432, 1437, 1438, 1439], "angl": [456, 457, 486, 487, 819, 820, 851, 1363, 1364, 1421, 1430, 1442], "amb_yawm": [457, 490, 491, 1421], "amb_yld": [458, 490, 491, 1004, 1006, 1421, 1440], "yield": [458, 488, 914, 916, 918, 928, 935, 942, 1418, 1421, 1423, 1425, 1426, 1433, 1434, 1440, 1441], "gwh": [458, 488, 942, 1421, 1433, 1440, 1441], "cap": [459, 490, 491, 1004, 1006, 1421, 1440], "ct": [460, 490, 491, 563, 647, 680, 681, 695, 697, 698, 702, 703, 708, 709, 714, 715, 720, 721, 785, 804, 805, 806, 808, 809, 813, 814, 816, 817, 820, 822, 823, 825, 826, 831, 835, 850, 857, 859, 860, 862, 863, 867, 868, 992, 994, 1004, 1006, 1414, 1418, 1421, 1425, 1428, 1429, 1435, 1437, 1438, 1439, 1442], "eff": [462, 932, 1004, 1006, 1421, 1440], "effici": [462, 928, 931, 932, 1255, 1293, 1421, 1425, 1433, 1435, 1440, 1441], "over": [463, 867, 928, 933, 934, 963, 970, 972, 973, 1025, 1255, 1293, 1421, 1422, 1425, 1431, 1437, 1441], "k": [464, 465, 466, 690, 691, 784, 785, 813, 814, 819, 820, 825, 826, 830, 831, 851, 856, 857, 1414, 1421, 1425, 1428, 1432, 1437, 1439, 1440, 1441], "growth": [464, 784, 785, 813, 814, 819, 820, 825, 826, 830, 831, 856, 857, 862, 863, 867, 868, 1421, 1425, 1441], "kb": [465, 466, 690, 691, 1421, 1425], "kti": [465, 466, 690, 691, 692, 693, 694, 1414, 1421, 1425, 1432, 1440], "ti": [465, 466, 479, 490, 491, 519, 520, 526, 527, 611, 690, 691, 720, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 867, 868, 873, 877, 881, 885, 994, 1004, 1006, 1197, 1414, 1415, 1421, 1425, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "between": [466, 631, 1245, 1255, 1293, 1294, 1295, 1304, 1305, 1314, 1315, 1324, 1325, 1348, 1398, 1399, 1414, 1421, 1428, 1430, 1431, 1433, 1437], "max_p": [467, 647, 652, 1421, 1435, 1436], "maxp": [467, 1421, 1435, 1436], "derat": [467, 647, 992, 1418, 1421, 1425, 1435, 1436], "boost": [467, 647, 992, 1418, 1421, 1425, 1435, 1436], "mol": [468, 549, 738, 1018, 1019, 1022, 1023, 1420, 1421, 1429], "monin": [468, 1018, 1019, 1022, 1023, 1421, 1429], "ubukhof": [468, 1421], "pa_alpha": [471, 1421], "alpha": [471, 784, 785, 831, 835, 850, 1421, 1428, 1431, 1437], "porteagel": [471, 472, 1421, 1425], "pa_beta": [472, 1421], "beta": [472, 784, 785, 831, 835, 850, 1421], "rew": [473, 490, 491, 631, 1004, 1006, 1414, 1421, 1425, 1428, 1430, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "rews2": [474, 490, 491, 680, 681, 703, 709, 715, 721, 1004, 1006, 1421, 1428, 1437, 1439], "rews3": [475, 490, 491, 647, 648, 652, 703, 709, 715, 721, 1004, 1006, 1421, 1428, 1437, 1439], "rho": [476, 490, 491, 519, 520, 526, 527, 695, 696, 698, 702, 703, 708, 709, 720, 721, 994, 1004, 1006, 1421, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "shear": [477, 746, 1014, 1414, 1419, 1421, 1425], "expon": [477, 703, 709, 715, 721, 746, 1014, 1414, 1421, 1425, 1442], "txyh": [480, 1421, 1437], "wd": [481, 490, 491, 519, 520, 526, 527, 660, 759, 760, 995, 1004, 1006, 1400, 1401, 1402, 1403, 1419, 1421, 1425, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "yawm": [487, 490, 491, 684, 687, 784, 830, 851, 1414, 1421, 1442], "yld": [488, 490, 491, 1004, 1006, 1421, 1440], "z0": [489, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1420, 1421, 1429], "rough": [489, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1421], "amb2var": [490, 1421], "map": [490, 491, 498, 499, 506, 508, 534, 536, 549, 567, 568, 569, 570, 571, 572, 573, 606, 607, 642, 643, 660, 960, 981, 982, 983, 984, 985, 986, 987, 989, 1027, 1091, 1092, 1127, 1128, 1414, 1418, 1421, 1425, 1428, 1432, 1433, 1436, 1437, 1439], "var2amb": [491, 1421], "farm_layout": [492, 493, 494, 495, 496, 497, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441], "add_from_csv": [492, 493, 1413], "data_sourc": [492, 493, 498, 499, 506, 508, 517, 534, 536, 547, 606, 607, 642, 643, 659, 660, 675, 676, 695, 696, 702, 703, 742, 743, 1413, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1439, 1440, 1441, 1442], "col_index": 492, "col_nam": 492, "col_x": 492, "col_i": 492, "col_h": 492, "col_d": 492, "col_id": 492, "cols_models_pr": 492, "cols_models_post": 492, "turbine_base_nam": 492, "turbine_id": 492, "turbine_base_name_count_shift": 492, "turbine_paramet": [492, 495, 496, 497], "panda": [492, 493, 506, 508, 514, 534, 536, 543, 549, 606, 607, 642, 643, 659, 660, 675, 676, 695, 696, 697, 698, 702, 703, 708, 709, 714, 715, 720, 721, 743, 919, 928, 935, 937, 939, 940, 941, 942, 945, 946, 948, 955, 960, 961, 964, 965, 968, 970, 979, 981, 982, 983, 984, 985, 986, 987, 990, 992, 1004, 1009, 1010, 1027, 1413, 1414, 1419, 1425, 1435, 1436, 1438, 1440, 1442], "datafram": [492, 493, 506, 508, 534, 536, 549, 606, 607, 642, 643, 659, 660, 675, 676, 695, 696, 697, 698, 702, 703, 708, 709, 714, 715, 720, 721, 743, 935, 937, 939, 940, 941, 942, 945, 946, 960, 964, 965, 968, 970, 972, 973, 981, 982, 983, 984, 985, 986, 990, 1009, 1010, 1413, 1414, 1425, 1435, 1436, 1438, 1440, 1442], "column": [492, 506, 508, 534, 536, 549, 606, 607, 642, 643, 660, 675, 676, 696, 698, 702, 703, 708, 709, 714, 720, 743, 960, 966, 967, 1004, 1010, 1025, 1255, 1293, 1379, 1429, 1433, 1435, 1436, 1439, 1440], "enter": 492, "forward": [492, 494, 495, 496, 497, 555, 921, 926, 960, 981, 982, 983, 984, 985, 986, 1009, 1010], "add_from_df": [493, 1413, 1425], "add_from_fil": [494, 1413, 1429, 1440], "infer": [494, 495, 1438], "suffix": [494, 498, 499], "add_from_json": [495, 1413], "set_farm_nam": 495, "turbim": [495, 1413], "json": [495, 923, 1413], "add_grid": [496, 1413, 1428, 1430, 1437, 1439, 1441], "xy_bas": [496, 497, 1413, 1428, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1441], "step_vector": [496, 1413, 1428, 1430, 1437, 1439, 1441], "regular": [496, 498, 624, 631, 1314, 1324, 1347, 1363, 1413, 1414, 1416, 1417, 1425, 1428, 1437, 1439, 1441], "grid": [496, 498, 582, 590, 624, 981, 982, 983, 984, 985, 986, 995, 1229, 1257, 1263, 1304, 1305, 1314, 1324, 1325, 1347, 1348, 1363, 1413, 1414, 1416, 1417, 1425, 1428, 1430, 1441], "add_row": [497, 1413, 1431, 1433, 1435, 1436, 1438], "xy_step": [497, 1413, 1431, 1433, 1435, 1436, 1438], "row": [497, 675, 676, 966, 1255, 1293, 1324, 1325, 1347, 1348, 1413, 1424, 1426, 1428, 1433, 1435, 1439, 1440], "fielddatanc": [498, 499, 500, 501, 502, 503, 504, 505, 1413, 1425, 1430], "heterogen": [498, 1413, 1424, 1426, 1433], "horizont": [498, 948, 949, 952, 953, 954, 979, 981, 984, 1413, 1418, 1425, 1429, 1430, 1433, 1437, 1438], "netcdf": [498, 963, 964, 967, 1413, 1430], "pattern": [498, 499, 1425, 1435], "end": [498, 499, 947, 998, 1004, 1009, 1010], "nc": [498, 499, 1004, 1005, 1007, 1008, 1404, 1425, 1430], "One": [498, 499, 1430], "mani": [498, 499, 1425, 1426], "ovar": [498, 506, 534, 606, 675], "var2ncvar": [498, 499, 1430], "fixed_var": [498, 499, 506, 508, 534, 536, 547, 1429, 1430, 1431, 1433, 1435, 1436, 1439, 1440, 1441, 1442], "uniform": [498, 499, 506, 508, 526, 534, 536, 606, 607, 691, 749, 778, 1199, 1201, 1413, 1414, 1425, 1428, 1429, 1438, 1440, 1442], "read": [498, 499, 506, 508, 534, 536, 550, 607, 643, 660, 676, 696, 698, 702, 703, 708, 709, 714, 715, 720, 721, 1004, 1009, 1378, 1379, 1396, 1397, 1413, 1419, 1425, 1428, 1430, 1437, 1439, 1440], "states_coord": [498, 499, 1430], "x_coord": [498, 499, 1430], "y_coord": [498, 499, 1430], "h_coord": [498, 499, 1430], "pre_load": [498, 499, 1430], "weight_ncvar": [498, 499], "bounds_error": [498, 1430], "exceed": [498, 549], "fill_valu": 498, "time_format": [498, 499, 1430], "datetim": [498, 499], "string": [498, 499, 566, 958, 972, 973, 1027, 1076, 1078, 1097, 1099, 1106, 1117, 1124, 1166, 1180, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1255, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1293, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1419], "interp_nan": [498, 499], "linearli": [498, 499, 808], "interpn_par": [498, 499], "scipi": [498, 499, 508, 676, 714, 715, 720, 721, 1255, 1293], "interpn": [498, 499, 676, 714, 715, 720, 721], "utmx": [499, 1430], "utmi": [499, 1430], "d_": 499, "xr": [499, 1027], "multiheightst": [506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 1413, 1425], "multipl": [506, 790, 1413, 1414, 1425, 1426, 1436], "taken": [506, 1438], "exampl": [506, 994, 1027, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "50": [506, 549, 1027, 1428, 1429, 1431, 1432, 1433, 1436, 1437, 1441], "60": [506, 1431, 1435, 1437, 1439], "100": [506, 652, 771, 772, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1438, 1439, 1440, 1441, 1442], "var2col": [506, 508, 534, 536, 547, 549, 606, 607, 1429, 1431, 1433, 1436, 1437, 1439, 1440, 1441], "fix": [506, 508, 519, 534, 536, 1218, 1275, 1304, 1413, 1417, 1425, 1428], "pd_read_par": [506, 508, 536, 607, 743], "slice": [506, 508, 514, 534, 536, 543, 582, 948, 979, 981, 982, 983, 984, 985, 986, 1027, 1414, 1418, 1425, 1438], "rang": [506, 508, 514, 534, 536, 543, 659, 660, 1027, 1414, 1425, 1435, 1436, 1437, 1442], "states_loc": [506, 508, 514, 517, 534, 536, 543, 547, 1433], "loc": [506, 508, 514, 534, 536, 543, 1435, 1436], "rdict": [506, 507, 517, 518, 534, 535, 547, 548], "index_col": [506, 507, 517, 518, 534, 535, 547, 548], "interp1d": 508, "multiheighttimeseri": [517, 518, 1413, 1425, 1429, 1433], "timeseri": [517, 547, 548, 764, 765, 778, 779, 942, 1413, 1414, 1424, 1425, 1426, 1433, 1437, 1439], "parse_d": [517, 518, 547, 548], "scanw": [519, 520, 521, 522, 523, 524, 525, 1413], "ws_list": [519, 520], "singlestatest": [526, 527, 528, 529, 530, 531, 532, 533, 1413, 1425, 1428, 1438], "profdict": [526, 534], "profdata": [526, 527], "statest": [534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 1413, 1429, 1431, 1435, 1436, 1441, 1442], "readabl": [534, 1413, 1436, 1440], "rpar": [534, 702], "create_random_abl_st": [549, 1413], "cols_minmax": 549, "mol_abs_rang": 549, "5000": [549, 1431, 1435, 1437, 1439, 1440], "normal": [549, 614, 615, 759, 921, 1255, 1293, 1414, 1429, 1435, 1441], "random": [549, 1413, 1429], "abl": [549, 726, 730, 734, 738, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1413, 1414, 1425], "neutral": [549, 726, 738, 1011, 1012, 1013, 1414, 1419], "stratif": 549, "windio": [550, 1425], "read_cas": [550, 1413], "case_yaml": [550, 1413], "site_par": [550, 1413], "farm_par": 550, "ana_par": 550, "yaml": [550, 1413, 1425], "read_sit": 550, "read_farm": 550, "read_analys": 550, "basicfarmcontrol": [551, 1414, 1428, 1432, 1437, 1439], "condit": [551, 659, 784, 830, 835, 1076, 1077, 1398, 1414, 1425, 1428, 1431, 1434, 1436, 1438, 1442], "farm_model": [552, 553, 554, 555, 556, 557, 561, 1432], "turbine2farmmodel": [552, 553, 554, 555, 556, 557, 1414, 1432], "promot": [552, 1414], "simpli": [552, 614, 1414, 1427, 1428, 1429, 1432, 1436, 1441], "init": [555, 998, 999, 1167, 1199, 1201, 1204, 1341, 1352, 1372], "slightli": [558, 1419, 1436], "enhanc": [558, 1419], "dictionari": [558, 560, 798, 835, 855, 960, 1010, 1419], "pass": [560, 1255, 1293, 1441], "kind": [561, 1412, 1430, 1442], "partial_wak": [561, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 1432], "partialwakemodel": 561, "wake_superposit": [561, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 1432], "base_class": 561, "pct_file": [561, 563], "print_toc": [561, 566, 1432], "model_typ": [561, 565, 919, 928, 948, 955, 958, 961, 964, 968, 979, 987, 990, 992], "class_nam": [561, 565], "curv": [563, 695, 696, 698, 702, 708, 709, 714, 715, 720, 721, 992, 994, 1414, 1418, 1425, 1426, 1428, 1435], "dynam": [565, 764, 778, 1075, 1414, 1419, 1424, 1426], "optin": [565, 582, 1379], "mclass": 565, "more": [567, 1027, 1255, 1293, 1425, 1436, 1437, 1440], "than": [567, 904, 1437, 1440], "invok": [567, 647, 753, 808, 1414, 1425, 1426, 1427, 1428, 1431, 1440, 1441, 1442], "wname2pwak": [567, 568], "wtype2pwak": [567, 568], "ones": [568, 575, 583, 591, 594, 601, 1025], "partialaxiwak": [574, 575, 576, 577, 578, 579, 580, 581, 790, 1414, 1428, 1432, 1437, 1439], "axial": [574, 1414], "idea": [574, 904, 1425, 1435], "radial": [574, 575, 791, 802, 806, 807, 817, 823, 860], "n": [574, 575, 582, 583, 590, 591, 624, 625, 631, 632, 862, 949, 950, 951, 952, 953, 954, 995, 1027, 1059, 1060, 1089, 1090, 1157, 1158, 1218, 1219, 1223, 1224, 1234, 1235, 1255, 1275, 1276, 1293, 1414, 1425, 1427, 1429, 1432, 1437, 1438, 1439, 1440, 1442], "radii": [574, 805, 806, 816, 817, 822, 823, 859, 860, 1398, 1419], "cover": 574, "disc": [574, 593, 1076, 1077, 1425, 1434], "overlap": [574, 593, 624, 625], "circl": [574, 593, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1294, 1295, 1298, 1304, 1305, 1308, 1314, 1315, 1318, 1324, 1325, 1328, 1398, 1399, 1419, 1431], "area": [574, 624, 625, 1029, 1035, 1037, 1039, 1045, 1047, 1054, 1061, 1069, 1076, 1077, 1379, 1398, 1399, 1415, 1419, 1425, 1431], "partialdistslicedwak": [582, 583, 584, 585, 586, 587, 588, 589, 590, 793, 1414, 1432], "distanc": [582, 813, 814, 1028, 1029, 1033, 1035, 1037, 1039, 1043, 1045, 1047, 1050, 1052, 1054, 1057, 1059, 1061, 1065, 1067, 1069, 1073, 1099, 1100, 1244, 1245, 1255, 1257, 1269, 1270, 1293, 1294, 1295, 1304, 1305, 1314, 1315, 1324, 1325, 1348, 1398, 1399, 1414, 1415, 1417, 1419, 1431, 1442], "make": [582, 1395, 1398, 1414, 1415, 1427, 1431, 1440], "done": [582, 1087, 1437, 1439], "grotor": 582, "gridrotor": [582, 583, 591, 624, 625, 626, 627, 628, 629, 630, 1414, 1432], "partialgrid": [590, 591, 592, 1414, 1432], "mai": [590, 647, 1414, 1430, 1437, 1442], "partialtophat": [593, 594, 595, 596, 597, 598, 599, 1414, 1432], "hat": [593, 803, 1414, 1422, 1442], "rotorpoint": [600, 601, 602, 603, 604, 605, 1414, 1428, 1432], "directli": [600, 990, 996, 1124, 1133, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1412, 1414, 1418, 1419, 1422, 1436], "get_wake_point": [600, 604], "setuniformdata": [606, 607, 608, 609, 610, 1414, 1425], "both": [606, 607, 800, 801, 825, 828, 862, 865, 867, 870, 1347, 1435, 1440, 1441], "assum": [606, 607, 1398, 1439], "Or": [606, 607], "independ": [606, 607, 1433], "written": [606, 607, 963, 966, 967, 1426], "tke2ti": [611, 612, 613, 1414, 1425, 1432], "tke": [611, 1414, 1425, 1429, 1433, 1434], "sqrt": [611, 1255, 1293, 1414], "wakedelta": [614, 615, 616, 617, 1414], "subtract": [614, 1414, 1431], "divid": [614, 615, 981, 982, 983, 984, 985, 986], "centrerotor": [618, 619, 620, 621, 622, 623, 1414, 1428, 1432, 1437, 1439], "compos": [624, 631, 1414], "possibli": [624, 1414], "kick": [624, 1414], "out": [624, 1027, 1255, 1293, 1414, 1428, 1436, 1437, 1439, 1442], "outsid": [624, 1414, 1430], "reduc": [624, 625, 631, 632, 928, 944, 945, 946, 981, 982, 983, 984, 985, 986, 1425], "reduct": [624, 625], "actual": [624, 625, 1124, 1133, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1425, 1427, 1433, 1435, 1438], "repres": [624, 625, 675, 714, 720, 922, 1027, 1045, 1052, 1059, 1414, 1419, 1429, 1441, 1442], "circ": [624, 625], "recalcul": [624, 625], "accordingli": [624, 625], "nint": [624, 625, 631, 632], "200": [624, 625, 631, 632, 1428, 1429, 1431, 1433, 1442], "levelrotor": [631, 632, 633, 634, 635, 636, 637, 1414, 1425, 1432], "lower": [631, 889, 890, 894, 895, 899, 900, 904, 905, 909, 910, 943, 1243, 1414, 1425, 1439], "blade": [631, 1414], "tip": [631, 1414], "in_var": [638, 639], "vairabl": [638, 639], "func": [638, 639, 1124, 1133, 1143, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1380, 1386, 1387, 1388, 1389, 1394], "in0": [638, 639], "in1": [638, 639], "stsel": [638, 639], "out0": [638, 639], "ou1": [638, 639], "where": [638, 639, 922, 1255, 1293, 1401, 1402, 1431, 1433, 1434, 1436, 1442], "inx": [638, 639], "outi": [638, 639], "lookupt": [642, 643, 644, 645, 646, 1414, 1425], "tabl": [642, 643, 675, 1414, 1425, 1435, 1436], "varmap": [642, 643, 1076, 1091, 1092, 1097, 1099, 1106, 1117, 1180, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290], "pd_file_read_par": [643, 660, 676, 696, 703], "xr_interp_arg": 643, "powermask": [647, 648, 649, 650, 651, 652, 1414, 1425, 1432, 1435], "below": [647, 982, 983, 985, 986, 1425, 1427], "rate": 647, "higher": [647, 1425], "introduc": [647, 1422, 1425], "so": [647, 1025, 1425, 1434, 1435, 1437, 1438, 1439], "wise": [647, 675, 676, 1255, 1293, 1425, 1437], "var_ws_p": [647, 648, 703, 709, 715, 721], "factor_p": [647, 648, 652], "update_p_ct": [647, 652], "rated_p": [647, 652], "var_w": 652, "p_lim": 652, "rotorcentrecalc": [653, 654, 655, 656, 657, 658, 1414, 1425, 1432], "sectormanag": [659, 660, 661, 662, 663, 1414, 1425, 1436], "range_var": [659, 660, 1436], "target_var": [659, 660, 1436], "col_tind": 660, "col_tnam": [660, 1436], "colmap": [660, 1436], "var_period": 660, "360": 660, "within": [660, 996, 1294, 1295, 1304, 1305, 1314, 1315, 1324, 1325, 1398, 1415, 1417, 1419, 1425, 1427, 1431, 1434, 1437], "period": 660, "setfarmvar": [664, 665, 666, 667, 668, 669, 670, 1414, 1425, 1435, 1442], "add_var": [664, 666, 1199, 1201, 1435, 1442], "setxyhd": [671, 672, 673, 674, 1414, 1428, 1437, 1439], "set_xi": [671, 672], "set_h": [671, 672], "set_d": [671, 672], "tablefactor": [675, 676, 677, 678, 679, 1414, 1425], "multipli": [675, 676, 813, 814, 825, 826, 862, 863, 867, 868, 1414, 1425], "dimension": [675, 1255, 1293, 1414, 1418, 1425], "col_var": [675, 676, 742, 743], "row_var": [675, 676], "onto": [675, 676], "thrust2ct": [680, 681, 682, 683, 1414, 1425, 1432], "thrust_var": [680, 681], "wsct": [680, 702, 708, 714, 720], "var_ws_ct": [680, 681, 703, 709, 715, 721], "yaw2yawm": [684, 685, 686, 1414, 1425, 1432, 1442], "yawm2yaw": [687, 688, 689, 1414, 1425, 1432, 1442], "linear": [690, 873, 874, 877, 878, 881, 882, 885, 886, 889, 1414, 1441], "ti_var": [690, 691, 867, 868], "k_var": [690, 691, 784, 785, 813, 814, 819, 820, 825, 826, 830, 831, 856, 857], "ti_val": [690, 691], "cpctfile": [695, 696, 1414, 1425], "pctfile": [695, 696, 702, 703, 704, 705, 706, 707, 1414, 1428, 1429, 1432, 1436, 1437, 1438, 1439, 1440], "cp": [695, 696, 697, 698, 1414, 1425], "col_w": [695, 696, 702, 703, 708], "col_cp": [695, 696, 698], "225": [695, 696, 698, 714, 994, 1428, 1429, 1430, 1431, 1435, 1436, 1438, 1439, 1440, 1441, 1442], "paramer": 696, "cpctfromtwo": [697, 698, 1414, 1425], "pctfromtwo": [697, 698, 708, 709, 710, 711, 712, 713, 1414], "data_source_cp": [697, 698], "data_source_ct": [697, 698, 708, 709, 714, 715, 720, 721], "col_ws_cp_fil": 698, "pd_file_read_pars_cp": 698, "pd_file_read_pars_ct": [698, 709, 715, 721], "nulltyp": [699, 700, 701, 1414, 1425, 1432], "doe": [699, 1294, 1304, 1314, 1324, 1414, 1433, 1435, 1437, 1439], "col_p": [702, 703, 708, 709], "col_ct": [702, 703, 708, 709], "densitii": [702, 703, 708, 709, 720, 721], "correct": [702, 703, 708, 709, 720, 721, 753, 813, 814, 819, 904, 1414, 1425, 1434, 1435, 1438], "wsp": [702, 708, 714, 720], "p_ct": [703, 709, 714, 715, 721], "p_p": [703, 709, 715, 721, 1442], "88": [703, 709, 715, 721, 1429, 1431, 1439, 1440, 1442], "source_p": [708, 714, 720], "source_ct": [708, 714, 720], "rpars_p": [708, 714, 720], "rpars_ct": [708, 714, 720], "data_source_p": [708, 709, 714, 715, 720, 721], "col_ws_p_fil": [708, 709], "col_ws_ct_fil": 709, "pd_file_read_pars_p": [709, 715, 721], "wsrho2pctfromtwo": [714, 715, 716, 717, 718, 719, 1414], "950": [714, 1431], "975": 714, "275": 714, "subsequ": [714, 720, 1428, 1434, 1437], "neccessarili": [714, 720, 1414, 1440], "ipars_p": [714, 720], "ipars_ct": [714, 720], "interpn_pars_p": [715, 721], "interpn_pars_ct": [715, 721], "wsti2pctfromtwo": [720, 721, 722, 723, 724, 725, 1414, 1425], "05": [720, 994, 1239, 1240, 1428, 1429, 1431, 1433, 1435, 1436, 1437, 1439, 1441, 1442], "06": [720, 1428, 1429, 1431, 1433, 1437, 1439, 1440], "07": [720, 784, 785, 831, 835, 850, 1428, 1429, 1430, 1432, 1437, 1439], "vertical_profil": [726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "abllogneutralwsprofil": [726, 727, 728, 729, 1414], "log": [726, 730, 734, 738, 1012, 1016, 1017, 1021, 1414, 1420], "ustar_input": [726, 727, 730, 731, 734, 735, 738, 739], "ustar": [726, 727, 730, 731, 734, 735, 738, 739, 1011, 1013, 1015, 1019, 1020, 1023, 1420, 1425], "abllogstablewsprofil": [730, 731, 732, 733, 1414], "stabl": [730, 738, 1015, 1016, 1017, 1018, 1019, 1414, 1419, 1427], "abllogunstablewsprofil": [734, 735, 736, 737, 1414], "unstabl": [734, 738, 1020, 1021, 1022, 1023, 1414, 1419], "abllogwsprofil": [738, 739, 740, 741, 1414, 1429], "pick": [738, 1428], "dataprofil": [742, 743, 744, 745, 1414, 1425], "data_z": 742, "n_z": 742, "data_v": 742, "interp_par": [742, 743], "col_z": [742, 743], "read_csv": 743, "shearedprofil": [746, 747, 748, 1414, 1425], "uniformprofil": [749, 750, 751, 752, 1414], "farmord": [753, 754, 755, 756, 757, 758, 1414, 1432], "warn": [753, 1027], "test": [753, 1028, 1034, 1035, 1037, 1044, 1045, 1051, 1052, 1058, 1059, 1066, 1067, 1074, 1425, 1429], "purpos": [753, 1429, 1431, 1438], "give": [753, 1425, 1440], "when": [753, 1425, 1428, 1429, 1430, 1431, 1435, 1437, 1440], "base_fram": [753, 754, 784, 785], "rotorwd1": [753, 754], "rotorwd": [753, 754, 759, 760, 761, 762, 763, 785, 1414, 1428, 1432], "align": [759, 1414], "axi": [759, 921, 949, 950, 951, 952, 953, 954, 971, 982, 983, 985, 986, 987, 989, 994, 995, 1029, 1039, 1047, 1054, 1061, 1069, 1108, 1119, 1129, 1255, 1293, 1294, 1298, 1304, 1308, 1314, 1318, 1324, 1328, 1400, 1401, 1402, 1403, 1414, 1418, 1419, 1438, 1442], "var_wd": [759, 760], "seqdynamicwak": [764, 765, 766, 767, 768, 769, 770, 1432, 1437], "cl_ipar": [764, 765, 771, 772, 778, 779], "line": [764, 765, 771, 772, 778, 779, 803, 805, 813, 816, 819, 822, 856, 859, 1027, 1029, 1039, 1047, 1054, 1061, 1069, 1425, 1427, 1428, 1438], "dt_min": [764, 765, 778, 779, 1439], "minut": [764, 765, 778, 779, 1429, 1433, 1439], "streamlin": [771, 772, 773, 774, 775, 776, 777, 867, 1414, 1422, 1425, 1430, 1432, 1434], "n_delstor": [771, 772], "increas": [771, 772, 1422], "max_length": [771, 772], "100000": [771, 772, 1435], "timelin": [778, 779, 780, 781, 782, 783, 1414, 1425, 1432, 1439], "spatial": [778, 1099, 1255, 1293, 1414, 1415, 1424, 1425, 1429, 1437], "max_wake_length": [778, 779], "20000": [778, 779], "yawedwak": [784, 785, 786, 787, 788, 789, 1414, 1425, 1432], "bend": [784, 1414, 1425, 1442], "bastankhah": [784, 825, 830, 835, 1414, 1422, 1425, 1442], "2016": [784, 830, 835, 1414, 1422, 1425], "refer": [784, 813, 819, 825, 830, 835, 862, 1013, 1014, 1019, 1023, 1255, 1293, 1395, 1420, 1425, 1429, 1442], "experiment": [784, 830, 835], "theoret": [784, 830, 835], "studi": [784, 830, 835, 1426], "majid": [784, 825, 830, 835], "fernando": [784, 825, 830, 835], "port\u00e9": [784, 825, 830, 835], "agel": [784, 825, 830, 835, 1442], "http": [784, 808, 813, 819, 825, 830, 835, 862, 867, 904, 1025, 1395, 1398, 1423, 1425, 1426, 1427, 1440], "doi": [784, 813, 825, 830, 835, 1426], "org": [784, 813, 825, 830, 835, 862, 867, 904, 1027, 1423], "1017": [784, 830, 835], "jfm": [784, 830, 835], "595": [784, 830, 835], "bastankhah2016model": [784, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 1422], "misalign": [784, 830, 1442], "ct_max": [784, 785, 803, 804, 808, 809, 814, 819, 820, 825, 826, 830, 831, 835, 850, 856, 857, 862, 863, 867, 868], "9999": [784, 785, 803, 804, 808, 809, 814, 819, 820, 826, 830, 831, 835, 850, 856, 857, 863, 868], "58": [784, 785, 831, 835, 850, 1429, 1431], "beyond": [785, 804, 808, 809, 814, 820, 825, 826, 831, 835, 850, 857, 862, 863, 867, 868], "determin": [785, 831, 835, 850, 942, 1425, 1434], "onset": [785, 831, 835, 850], "far": [785, 831, 835, 850, 1425], "region": [785, 831, 835, 850, 1425, 1428], "axisymmetricwakemodel": [790, 791, 792, 800, 803, 1422], "distslicedwakemodel": [790, 793, 794, 795, 796, 797, 798, 799, 830, 1422], "r": [790, 791, 800, 801, 802, 803, 806, 807, 813, 817, 819, 823, 825, 828, 856, 860, 862, 865, 867, 870, 1422, 1437], "separ": [790, 793, 1422, 1425, 1434], "abil": [790, 793], "calc_wakes_spsel_x_r": [790, 791, 800, 802, 803, 807, 813, 819, 825, 856, 862, 867], "calc_wakes_spsel_x_yz": [790, 792, 793, 795, 800, 803, 813, 819, 825, 830, 833, 856, 862, 867], "n_r_per_x": [791, 802, 806, 807, 817, 823, 860], "n_sp_sel": [791, 792, 795, 801, 802, 805, 807, 816, 822, 828, 833, 859, 865, 870], "sp_sel": [791, 792, 795, 801, 802, 805, 807, 816, 822, 828, 833, 835, 848, 859, 865, 870], "non": [791, 792, 795, 801, 802, 805, 807, 816, 822, 828, 833, 859, 865, 870, 995, 1169, 1210, 1243, 1255, 1293, 1345, 1358, 1376, 1425, 1426, 1427], "yz": [792, 793, 795, 833, 948, 951, 954, 974, 975, 979, 983, 986, 1422, 1425], "n_yz_per_x": [792, 795, 833], "denpend": [793, 1422], "superp": 793, "gaussianwakemodel": [800, 801, 802, 825, 862, 867, 1422], "gaussian": [800, 862, 1422], "calc_amplitude_sigma_spsel": [800, 801, 825, 828, 862, 865, 867, 870], "amplitud": [800, 801, 825, 828, 862, 865, 867, 870], "sigma": [800, 801, 825, 828, 862, 865, 867, 870, 1425], "amsi": [801, 828, 865, 870], "tophatwakemodel": [803, 804, 805, 806, 807, 813, 819, 856, 1422], "calc_wake_radiu": [803, 806, 813, 817, 819, 823, 856, 860], "calc_centreline_wake_delta": [803, 805, 813, 816, 819, 822, 856, 859], "wake_r": [805, 806, 816, 817, 822, 823, 859, 860], "cl_del": [805, 816, 822, 859], "varlu": [805, 816, 822, 859], "induct": [808, 809, 810, 811, 812, 1414, 1425, 1428], "rankinehalfbodi": [808, 809, 810, 811, 812, 1422, 1425, 1428, 1432], "rankin": [808, 1422, 1425, 1428], "half": [808, 970, 972, 973, 1059, 1419, 1422, 1425, 1428], "bodi": [808, 1422, 1425, 1428], "superpos": 808, "ref": 808, "b": [808, 1255, 1293, 1426], "gribben": 808, "hawk": 808, "potenti": 808, "flow": [808, 948, 949, 950, 951, 952, 953, 954, 974, 979, 981, 982, 983, 984, 985, 986, 995, 1418, 1424, 1425, 1426, 1428, 1433, 1434, 1437, 1438, 1439], "blockag": [808, 1422, 1424, 1425, 1426], "techinc": 808, "paper": [808, 1426], "frazer": 808, "nash": 808, "consult": 808, "2019": [808, 819, 820], "www": [808, 1027], "fnc": 808, "co": [808, 1442], "uk": 808, "media": 808, "o5eosxa": 808, "pdf": [808, 819, 862, 867, 904], "crespohernandeztiwak": [813, 814, 815, 816, 817, 818, 1422, 1425, 1432], "crespo": [813, 1422], "hernandez": [813, 1422], "empir": [813, 1422], "correl": [813, 1255, 1293, 1422], "characterist": 813, "j": [813, 825, 862, 1255, 1293], "1016": [813, 825], "0167": 813, "6105": 813, "95": [813, 1428, 1429, 1431, 1441], "00033": 813, "we": [813, 1255, 1293, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "eqn": 813, "17": [813, 1428, 1429, 1431, 1435, 1439, 1440, 1441], "15": [813, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1439, 1440, 1441], "1088": [813, 862, 867], "1742": [813, 862, 867], "6596": [813, 862, 867], "625": 813, "012039": 813, "a_near": [813, 814], "a_far": [813, 814], "e1": [813, 814], "e2": [813, 814], "e3": [813, 814], "use_ambti": [813, 814], "sbeta_factor": [813, 814, 825, 826, 862, 863, 867, 868, 1425, 1431], "sbeta": [813, 814, 825, 826, 862, 863, 867, 868], "near_wake_d": [813, 814], "362": 814, "73": [814, 1431], "83": [814, 1255, 1293, 1428, 1431, 1439, 1440], "0325": 814, "32": [814, 1431, 1439], "iectiwak": [819, 820, 821, 822, 823, 824, 1422, 1432], "iec": [819, 1422], "64100": [819, 1422], "2005": [819, 1422], "8": [819, 863, 904, 919, 921, 926, 1027, 1422, 1423, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "orbit": 819, "dtu": [819, 1428, 1437, 1439], "dk": 819, "3750291": 819, "2009_31": 819, "v2": 819, "volluk": 819, "implement": [819, 1431, 1434], "document": [819, 1255, 1293, 1415, 1425], "frandsen": [819, 862, 863, 1425], "opening_angl": [819, 820], "open": [819, 820, 1027, 1423, 1425], "21": [819, 820, 1429, 1431, 1435, 1439, 1440], "6": [819, 820, 1255, 1293, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "iec_typ": 820, "bastankhah2014": [825, 826, 827, 828, 829, 1422, 1425, 1428, 1431, 1432, 1437, 1439], "2014": [825, 1422], "analyt": [825, 1076, 1079, 1097, 1099, 1106, 1117, 1133, 1180, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290], "renen": 825, "01": [825, 1428, 1429, 1431, 1432, 1433, 1437, 1439, 1440], "002": 825, "bastankhah2016": [830, 831, 832, 833, 834, 1422, 1425, 1432], "repetit": [835, 1422], "avoid": [835, 1255, 1293, 1422, 1428, 1442], "mdata_kei": [835, 841], "x0": [835, 849], "NEAR": [835, 842], "r_pc": [835, 844], "r_pc_": [835, 845], "ampl_near": [835, 837], "delta_near": [835, 840], "ampl_far": [835, 836], "sigma_y_far": [835, 846], "sigma_z_far": [835, 847], "delta_far": [835, 839], "calc_data": [835, 851], "has_data": [835, 854], "clean": [835, 852], "gamma": [851, 1442], "radiant": [851, 1442], "jensenwak": [856, 857, 858, 859, 860, 861, 1422, 1432], "jensen": [856, 1255, 1293, 1422, 1432], "turboparkwak": [862, 863, 864, 865, 866, 1422, 1425, 1432], "turbopark": [862, 867, 1422, 1425], "optim": [862, 1077, 1084, 1098, 1100, 1106, 1107, 1118, 1124, 1126, 1130, 1141, 1162, 1163, 1166, 1168, 1169, 1170, 1171, 1181, 1184, 1189, 1190, 1192, 1197, 1198, 1199, 1209, 1210, 1214, 1219, 1224, 1229, 1239, 1245, 1251, 1255, 1257, 1264, 1270, 1276, 1282, 1288, 1293, 1294, 1304, 1314, 1324, 1338, 1339, 1344, 1345, 1347, 1349, 1357, 1358, 1359, 1360, 1363, 1370, 1375, 1376, 1405, 1415, 1416, 1417, 1423, 1424, 1425, 1426], "park": 862, "pedersen": 862, "svensson": 862, "l": 862, "poulsen": 862, "nygaard": 862, "iopscienc": [862, 867], "iop": [862, 867], "articl": [862, 867, 1423], "2265": [862, 867], "022063": [862, 867], "c1": [862, 863, 1269, 1270], "c2": [862, 863, 1269, 1270], "turboparkwakeix": [867, 868, 869, 870, 871, 872, 1422, 1432], "own": [867, 868, 1438], "tilinear": [873, 874, 875, 876, 1414, 1432], "superp_to_amb": [873, 874, 877, 878, 881, 882, 885, 886], "quadrat": [873, 874, 877, 878, 881, 882, 885, 886, 909, 1414], "timax": [877, 878, 879, 880, 1414, 1432], "tipow": [881, 882, 883, 884, 1414, 1432], "tiquadrat": [885, 886, 887, 888, 1414, 1425, 1432], "wslinear": [889, 890, 891, 892, 893, 1414, 1425, 1432], "supersposit": [889, 894, 899, 904, 909, 1414], "deficit": [889, 890, 894, 895, 899, 900, 904, 909, 910, 1414, 1422, 1425, 1431, 1434, 1440, 1441, 1442], "scale_amb": [889, 890, 894, 895, 899, 900, 909, 910], "scale": [889, 890, 894, 895, 899, 900, 909, 910, 1180, 1181, 1190, 1198, 1269, 1270, 1428, 1430, 1437, 1439], "lim_low": [889, 890, 894, 895, 899, 900, 904, 905, 909, 910], "lim_high": [889, 890, 894, 895, 899, 900, 904, 905, 909, 910], "input_farm_var": [889, 893, 894, 898, 899, 903, 904, 908, 909, 913], "wsmax": [894, 895, 896, 897, 898, 1414, 1432], "wspow": [899, 900, 901, 902, 903, 1414, 1432], "wsproduct": [904, 905, 906, 907, 908, 1414, 1432], "product": [904, 1255, 1293, 1414], "dimensionless": 904, "rescal": 904, "rather": 904, "equival": [904, 1434, 1440, 1442], "arxiv": 904, "2010": 904, "03873": 904, "equat": [904, 1425], "wsquadrat": [909, 910, 911, 912, 913, 1414, 1432], "anim": [914, 915, 916, 917, 918, 928, 943, 949, 950, 951, 952, 953, 954, 974, 995, 1418, 1425, 1437, 1439], "artist": [914, 916, 918, 943, 1418, 1425], "fig": [914, 915, 916, 918, 921, 928, 943, 949, 950, 951, 952, 953, 954, 972, 995, 1395, 1419, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "pyplot": [914, 915, 917, 921, 989, 994, 1027, 1029, 1039, 1047, 1054, 1061, 1069, 1108, 1119, 1129, 1298, 1308, 1318, 1328, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "figur": [914, 915, 919, 921, 943, 948, 949, 950, 951, 952, 953, 954, 968, 972, 973, 990, 995, 1028, 1029, 1035, 1037, 1039, 1045, 1047, 1052, 1054, 1059, 1061, 1067, 1069, 1076, 1097, 1099, 1106, 1108, 1117, 1119, 1124, 1129, 1166, 1180, 1189, 1191, 1197, 1199, 1294, 1298, 1304, 1308, 1314, 1318, 1324, 1328, 1338, 1347, 1363, 1395, 1419, 1425, 1431, 1433, 1438, 1440], "add_gener": [914, 916, 1437, 1439], "gen": [914, 916, 918], "verbostii": 917, "artistanim": 917, "farmlayoutoutput": [919, 920, 921, 922, 923, 924, 925, 926, 927, 1418, 1425, 1428, 1429, 1431, 1433, 1436, 1437, 1440, 1441], "plot": [919, 921, 924, 925, 926, 927, 948, 949, 950, 951, 952, 953, 954, 968, 972, 973, 974, 975, 987, 989, 990, 992, 994, 995, 1029, 1039, 1047, 1054, 1061, 1069, 1298, 1308, 1318, 1328, 1395, 1418, 1425, 1428, 1430, 1431, 1435, 1436, 1438, 1440, 1441, 1442], "layout": [919, 921, 922, 923, 924, 925, 926, 927, 972, 973, 1076, 1097, 1099, 1106, 1108, 1117, 1119, 1124, 1129, 1166, 1180, 1189, 1191, 1197, 1199, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1415, 1418, 1424, 1425, 1426, 1437, 1439, 1440], "from_r": [919, 920], "results_st": [919, 920], "from_result": [919, 920], "get_layout_data": [919, 922], "get_layout_dict": [919, 923], "get_figur": [919, 921, 926, 968, 972, 990, 1428, 1429, 1431, 1433, 1436, 1437, 1440, 1441], "color_bi": [919, 921, 1433, 1440, 1441], "fontsiz": [919, 921, 926], "figsiz": [919, 921, 928, 943, 949, 950, 951, 952, 953, 954, 987, 989, 994, 995, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1438, 1439, 1440, 1441], "annot": [919, 921, 1433, 1437, 1440, 1441], "write_plot": [919, 926], "write": [919, 924, 925, 926, 927, 928, 948, 955, 960, 961, 964, 966, 967, 968, 973, 979, 981, 982, 983, 984, 985, 986, 987, 990, 992, 1004, 1010, 1396, 1404, 1418, 1419, 1425], "write_xyh": [919, 927], "write_csv": [919, 924, 964, 966], "write_json": [919, 925], "get_fpath": [919, 928, 948, 955, 957, 961, 964, 968, 979, 987, 990, 992], "fname": [919, 928, 948, 955, 956, 957, 961, 964, 968, 979, 987, 990, 992, 1378, 1379, 1419], "format_col2var": [919, 928, 948, 955, 960, 961, 964, 968, 979, 987, 990, 992], "format_dict": [919, 928, 948, 955, 960, 961, 964, 968, 979, 987, 990, 992, 1004, 1010], "print_model": [919, 928, 948, 955, 959, 961, 964, 968, 979, 987, 990, 992, 1076, 1097, 1099, 1106, 1114, 1117, 1122, 1180, 1189, 1191, 1197], "titl": [921, 949, 950, 951, 952, 953, 954, 971, 972, 973, 987, 989, 992, 994, 995, 1294, 1298, 1304, 1308, 1314, 1318, 1324, 1328, 1423, 1425, 1429, 1433, 1435, 1436, 1437, 1439, 1440, 1441], "ax": [921, 928, 943, 949, 950, 951, 952, 953, 954, 987, 989, 994, 995, 1028, 1029, 1035, 1037, 1039, 1045, 1047, 1052, 1054, 1059, 1061, 1067, 1069, 1076, 1097, 1099, 1106, 1108, 1117, 1119, 1124, 1129, 1166, 1180, 1189, 1191, 1197, 1199, 1294, 1298, 1304, 1308, 1314, 1318, 1324, 1328, 1338, 1347, 1363, 1428, 1429, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441], "normalize_d": 921, "ret_im": [921, 943, 949, 950, 951, 952, 953, 954, 995, 1437, 1439], "barg": [921, 1298, 1308, 1318, 1328], "anno_delx": [921, 1437], "anno_d": [921, 1437], "scatter": [921, 943, 1425], "color": [921, 949, 950, 951, 952, 953, 954, 995, 1029, 1039, 1047, 1054, 1061, 1069, 1425, 1440], "mean_rew": [921, 1433, 1440, 1441], "etc": [921, 1425, 1431, 1433], "wrt": [921, 928, 937, 938, 939, 940, 941, 1028, 1033, 1035, 1037, 1043, 1045, 1050, 1052, 1057, 1059, 1065, 1067, 1073, 1133, 1143], "plt": [921, 943, 949, 950, 951, 952, 953, 954, 989, 994, 995, 1027, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "No": 921, "matplotlib": [921, 943, 949, 950, 951, 952, 953, 954, 995, 1027, 1029, 1039, 1047, 1052, 1054, 1061, 1069, 1108, 1119, 1129, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "im": [921, 943, 949, 950, 951, 952, 953, 954, 995], "pathcollect": [921, 943], "farmresultsev": [928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 1418, 1425, 1433, 1435, 1439, 1440, 1441], "farm_calc": 928, "weinsum": [928, 947], "rh": [928, 947], "einstein": [928, 947, 1425], "reduce_st": [928, 945, 1440], "vars_op": [928, 945, 946], "some": [928, 944, 945, 946, 1024, 1255, 1293, 1419, 1428, 1431, 1434, 1435, 1437, 1442], "reduce_turbin": [928, 946], "reduce_al": [928, 944], "states_op": [928, 944], "turbines_op": [928, 944], "calc_states_mean": [928, 937], "calc_states_sum": [928, 939], "calc_states_std": [928, 938], "deviat": [928, 938], "calc_turbine_mean": [928, 940], "calc_turbine_sum": [928, 941], "calc_farm_mean": [928, 933], "calc_farm_sum": [928, 934], "calc_mean_farm_pow": [928, 936, 1433, 1435, 1440, 1441], "calc_turbine_yield": [928, 935, 942, 1440], "annual": [928, 942, 1433, 1440, 1441], "add_capac": [928, 930, 1440], "p_nom": [928, 930], "calc_farm_yield": [928, 935, 1433, 1441], "turbine_yield": [928, 935], "power_uncert": [928, 935], "p75": [928, 935, 1425], "p90": [928, 935, 1425], "add_effici": [928, 931, 1440, 1441], "calc_farm_effici": [928, 932, 1433, 1440, 1441], "gen_stdata": [928, 943, 1439], "fulli": [933, 934, 944, 1294, 1295, 1304, 1305, 1314, 1315, 1324, 1325, 1426], "contract": [933, 934, 944, 1180, 1181, 1190, 1198], "uncertainti": 935, "trigger": [935, 1027], "farm_yield": 935, "_type_": 938, "_description_": 938, "hour": 942, "delta_t": 942, "p_unit_w": 942, "retur": 942, "durat": 942, "datetime64": [942, 1437, 1439], "seri": [942, 1425, 1434, 1437, 1440], "legloc": [943, 1439], "right": [943, 947, 1027], "legend": [943, 971, 972, 973, 1428], "It": [947, 1426, 1427, 1430, 1433, 1435, 1436], "about": [947, 1027, 1431, 1435], "hand": [947, 1425], "einsum": 947, "express": [947, 1243], "convent": [947, 1025, 1255, 1293], "mention": [947, 1429, 1433], "obligatori": 947, "flowplots2d": [948, 949, 950, 951, 952, 953, 954, 1418, 1425, 1428, 1430, 1431, 1433, 1438, 1439, 1441, 1442], "slicedata": [948, 949, 950, 951, 952, 953, 954, 979, 980, 981, 982, 983, 984, 985, 986, 1418, 1425], "2d": [948, 949, 950, 951, 952, 953, 954, 974, 979, 981, 982, 983, 984, 985, 986, 1028, 1052, 1059, 1418, 1419, 1425, 1441], "get_mean_fig_xi": [948, 952, 1431, 1441], "xlabel": [948, 949, 950, 952, 953, 995], "ylabel": [948, 949, 951, 952, 954, 995], "get_mean_fig_xz": [948, 953], "x_direct": [948, 950, 951, 953, 954, 982, 983, 985, 986, 1433], "270": [948, 950, 951, 953, 954, 982, 983, 985, 986, 1428, 1429, 1433, 1435, 1438, 1442], "xz": [948, 950, 953, 974, 975, 979, 982, 985, 1425], "get_mean_fig_yz": [948, 954], "gen_states_fig_xi": [948, 949, 1428, 1430, 1438, 1439, 1442], "gen_states_fig_xz": [948, 950, 1433], "gen_states_fig_yz": [948, 951, 1442], "runner": [948, 974, 975, 979, 980, 1124, 1126, 1166, 1338, 1348, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1425, 1428, 1431, 1437, 1439, 1440, 1441], "get_mean_data_xi": [948, 952, 979, 981], "resolut": [948, 979, 981, 982, 983, 984, 985, 986, 1428, 1430, 1431, 1433, 1437, 1438, 1439, 1441, 1442], "get_mean_data_xz": [948, 953, 979, 982], "get_mean_data_yz": [948, 954, 979, 983], "get_states_data_xi": [948, 949, 979, 984], "get_states_data_xz": [948, 950, 979, 985], "get_states_data_yz": [948, 951, 979, 986], "vlabel": [949, 950, 951, 952, 953, 954, 995], "add_bar": [949, 950, 951, 952, 953, 954, 995], "cmap": [949, 950, 951, 952, 953, 954, 972, 973, 995, 1435], "vmin": [949, 950, 951, 952, 953, 954, 981, 982, 983, 984, 985, 986, 995, 1435, 1437, 1439], "vmax": [949, 950, 951, 952, 953, 954, 981, 982, 983, 984, 985, 986, 995, 1428, 1435, 1437, 1439], "quiver_n": [949, 950, 951, 952, 953, 954, 1428, 1430, 1437, 1439], "quiver_par": [949, 950, 951, 952, 953, 954, 1428, 1430, 1437, 1439], "ret_stat": [949, 950, 951, 952, 953, 954, 981, 982, 983, 984, 985, 986, 995], "contourf": [949, 950, 951, 952, 953, 954, 995], "pure": [949, 950, 951, 952, 953, 954, 1213, 1218, 1223, 1228, 1234, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1294, 1304, 1416, 1417, 1425], "bar": [949, 950, 951, 952, 953, 954, 995, 1255, 1293, 1298, 1308, 1318, 1328, 1380, 1381, 1441], "colormap": [949, 950, 951, 952, 953, 954], "minim": [949, 950, 951, 952, 953, 954, 981, 982, 983, 984, 985, 986, 994, 995, 1028, 1032, 1035, 1037, 1042, 1045, 1049, 1052, 1056, 1059, 1064, 1067, 1072, 1099, 1100, 1124, 1151, 1152, 1153, 1166, 1180, 1181, 1190, 1197, 1198, 1199, 1207, 1208, 1228, 1229, 1234, 1244, 1245, 1257, 1287, 1294, 1295, 1302, 1304, 1305, 1312, 1314, 1315, 1322, 1324, 1325, 1334, 1335, 1338, 1343, 1347, 1348, 1355, 1356, 1363, 1369, 1374, 1415, 1417, 1431], "th": [949, 950, 951, 952, 953, 954, 1255, 1293, 1425], "quiver": [949, 950, 951, 952, 953, 954, 995], "usag": [949, 950, 951, 952, 953, 954, 995, 1425], "si": [949, 950, 951, 952, 953, 954, 995, 1437, 1439], "quadmesh": [949, 950, 951, 952, 953, 954, 995], "quadcontourset": [949, 950, 951, 952, 953, 954, 995], "zlabel": [950, 951, 953, 954], "north": [950, 951, 953, 954, 982, 983, 985, 986, 1436], "ech": [950, 951], "ret_data": [952, 953, 954, 972, 973], "n_x": [952, 953, 954, 995], "n_y": [952, 953, 954, 995], "job": 955, "handi": 955, "out_dir": [955, 956], "out_fname_fun": [955, 956], "fpath": [957, 1404], "underli": [960, 1076, 1077, 1080, 1097, 1098, 1099, 1100, 1101, 1106, 1107, 1109, 1117, 1118, 1180, 1181, 1182, 1189, 1190, 1191, 1192, 1193, 1197, 1198, 1213, 1214, 1215, 1218, 1219, 1220, 1223, 1224, 1225, 1228, 1229, 1230, 1234, 1236, 1239, 1244, 1245, 1246, 1250, 1251, 1252, 1256, 1257, 1258, 1263, 1264, 1265, 1269, 1270, 1271, 1275, 1276, 1277, 1281, 1282, 1283, 1287, 1288, 1290], "fv": [960, 994, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "4f": [960, 1004, 1006, 1010], "pointcalcul": [961, 962, 963, 1418, 1425], "states_mean": [961, 963], "weight_turbin": [961, 963, 981, 982, 983], "to_fil": [963, 981, 982, 983, 984, 985, 986], "write_var": 963, "write_par": [963, 981, 982, 983, 984, 985, 986], "write_nc": [963, 964, 967, 1404], "resultswrit": [964, 965, 966, 967, 1418, 1425], "state_turbine_t": 966, "roseplotoutput": [968, 969, 970, 971, 972, 973, 990, 1418, 1425, 1436], "rose": [968, 970, 972, 973, 990, 1418, 1424, 1425, 1426, 1429, 1431, 1436, 1440], "get_data_info": [968, 971, 990], "dname": [968, 971, 990], "descript": [968, 971, 990, 1405, 1406, 1413, 1414, 1415, 1422], "sector": [968, 970, 972, 973, 990, 1424, 1425, 1426, 1434, 1440], "var_bin": [968, 970, 972, 973, 990], "px": [968, 972, 973, 990], "write_figur": [968, 973, 990], "start0": [970, 972, 973], "bin": [970, 972, 973, 1027, 1425, 1427, 1429, 1440, 1441], "seper": [970, 972, 973], "relev": [970, 972, 973, 1414, 1422], "minu": [970, 972, 973], "width": [970, 972, 973, 1425], "pd": [970, 972, 973, 1027, 1435, 1436, 1442], "long": [971, 1425], "text": [971, 1027], "turbo": [972, 973], "layout_dict": [972, 973], "title_dict": [972, 973], "seqflowanimationplugin": [974, 975, 976, 977, 978, 1418, 1437], "orient": [974, 975, 1436, 1437], "yx": [974, 975], "gen_imag": [974, 976, 1437], "data_format": [981, 982, 983, 984, 985, 986], "xmin": [981, 982, 984, 985, 1428, 1430, 1431, 1433, 1437, 1442], "ymin": [981, 983, 984, 986, 1428, 1430, 1431, 1437, 1442], "xmax": [981, 982, 984, 985, 1428, 1430, 1431, 1433, 1437, 1439, 1442], "ymax": [981, 983, 984, 986, 1428, 1430, 1431, 1437, 1439, 1442], "xspace": [981, 982, 984, 985, 1428], "500": [981, 982, 983, 984, 985, 986, 1269, 1270, 1428, 1429, 1430, 1431, 1432, 1433, 1436, 1439, 1441], "yspace": [981, 983, 984, 986, 1428], "normalize_x": [981, 982, 983, 984, 985, 986], "normalize_i": [981, 982, 983, 984, 985, 986], "normalize_z": [981, 982, 983, 984, 985, 986], "normalize_v": [981, 982, 983, 984, 985, 986], "label_map": [981, 982, 983, 984, 985, 986], "states_isel": [981, 982, 983, 984, 985, 986], "ret_grid": [981, 982, 983, 984, 985, 986], "space": [981, 982, 983, 984, 985, 986, 1229, 1255, 1257, 1263, 1293, 1304, 1305, 1347, 1363, 1369, 1417, 1425], "grid_data": [981, 982, 983, 984, 985, 986], "x_po": [981, 982, 983, 984, 985, 986, 995], "y_po": [981, 982, 983, 984, 985, 986, 995], "z_po": [981, 982, 983, 984, 985, 986], "g_pt": [981, 982, 983, 984, 985, 986], "zmin": [982, 983, 985, 986, 1433, 1442], "zmax": [982, 983, 985, 986, 1433, 1442], "zspace": [982, 983, 985, 986], "stateturbinemap": [987, 988, 989, 1418, 1425, 1435], "heat": [987, 989, 1418, 1425], "plot_map": [987, 989, 1435], "subplot": [989, 994, 1428, 1429, 1431, 1435, 1437, 1438, 1439, 1440, 1441], "pcolormesh": 989, "statesroseplotoutput": [990, 991, 1418, 1425, 1429, 1431, 1433, 1436, 1440, 1441], "ws_var": [990, 991], "turbinetypecurv": [992, 993, 994, 1418, 1425, 1429, 1435], "plot_curv": [992, 994, 1429, 1435], "p_max": [992, 994, 1028, 1031, 1035, 1037, 1041, 1045, 1048, 1052, 1055, 1059, 1063, 1067, 1071, 1431, 1435], "x_label": 994, "y_label": 994, "ws_min": [994, 1436], "ws_max": [994, 1432, 1436], "30": [994, 1428, 1429, 1431, 1439, 1440, 1441, 1442], "ws_step": 994, "pmax_arg": 994, "mask": [994, 1424, 1425, 1426, 1436], "labl": 994, "flow_plots_2d": [995, 1425], "get_fig": [995, 1294, 1298, 1304, 1308, 1314, 1318, 1324, 1328], "quiv": 995, "invert_axi": 995, "x_y": 995, "contour": [995, 1425], "invert": [995, 1028, 1030, 1035, 1037, 1040, 1045, 1052, 1059, 1062, 1067, 1070, 1419], "dbase": 996, "must": [998, 999, 1099, 1415, 1430], "py": [999, 1027], "file_man": 999, "keyerror": [1002, 1027], "pandasfilehelp": [1004, 1005, 1006, 1007, 1008, 1009, 1010, 1419], "default_reading_paramet": [1004, 1007], "default_writing_paramet": [1004, 1008], "data_file_format": [1004, 1005], "export": 1004, "default_format_dict": [1004, 1006], "bz2": [1004, 1005, 1007, 1008], "gz": [1004, 1005, 1007, 1008, 1425, 1433, 1437, 1439, 1440, 1441], "zip": [1004, 1005, 1007, 1008, 1027], "h5": [1004, 1005, 1007, 1008], "mode": [1004, 1008, 1437], "5f": [1004, 1006], "6f": [1004, 1006], "3f": [1004, 1006], "read_fil": [1004, 1009, 1378, 1396], "write_fil": [1004, 1010], "calc_w": [1011, 1014, 1015, 1020, 1420], "friction": [1011, 1013, 1015, 1019, 1020, 1023, 1420], "veloc": [1011, 1013, 1015, 1019, 1020, 1023, 1420], "logz": [1012, 1017, 1021, 1420], "lz": [1012, 1016, 1017, 1021], "ws_ref": [1013, 1019, 1023, 1420], "h_ref": [1013, 1019, 1023, 1420], "height0": [1014, 1420], "ws0": [1014, 1420], "psi": [1015, 1018, 1020, 1022, 1420], "lgz": [1016, 1420], "obukhov": [1018, 1019, 1022, 1023, 1429], "all_subclass": [1024, 1419], "cl": [1024, 1035, 1036, 1419], "cubic_root": [1025, 1419, 1425], "a0": [1025, 1419], "a1": [1025, 1419], "a2": [1025, 1419], "a3": [1025, 1419], "root": [1025, 1419], "polynomi": [1025, 1419], "work": [1025, 1425, 1427, 1430, 1439, 1441], "fast": [1025, 1426], "you": [1025, 1255, 1293, 1427, 1432, 1433, 1434, 1438, 1440, 1442], "spare": 1025, "yourself": [1025, 1429], "them": [1025, 1255, 1293, 1430, 1441], "github": [1025, 1424, 1425, 1426, 1427], "com": [1025, 1027, 1395, 1398, 1425, 1426, 1427], "opencv": 1025, "blob": 1025, "master": 1025, "modul": [1025, 1027, 1075, 1419, 1425], "calib3d": 1025, "src": 1025, "polynom_solv": 1025, "cpp": 1025, "n_a0": 1025, "delta_wd": [1026, 1419], "wd_a": [1026, 1419], "wd_b": [1026, 1419], "exec_python": [1027, 1419], "newlin": [1027, 1419], "__builtins__": 1027, "arithmeticerror": 1027, "assertionerror": 1027, "attributeerror": 1027, "baseexcept": 1027, "blockingioerror": 1027, "brokenpipeerror": 1027, "buffererror": 1027, "byteswarn": 1027, "childprocesserror": 1027, "connectionabortederror": 1027, "connectionerror": 1027, "connectionrefusederror": 1027, "connectionreseterror": 1027, "deprecationwarn": 1027, "eoferror": 1027, "ellipsi": 1027, "environmenterror": 1027, "oserror": 1027, "except": [1027, 1255, 1293], "fileexistserror": 1027, "filenotfounderror": 1027, "floatingpointerror": 1027, "futurewarn": 1027, "generatorexit": 1027, "ioerror": 1027, "importerror": 1027, "importwarn": 1027, "indentationerror": 1027, "indexerror": 1027, "interruptederror": 1027, "isadirectoryerror": 1027, "keyboardinterrupt": 1027, "lookuperror": 1027, "memoryerror": 1027, "modulenotfounderror": 1027, "nameerror": 1027, "notadirectoryerror": 1027, "notimpl": 1027, "notimplementederror": 1027, "pendingdeprecationwarn": 1027, "permissionerror": 1027, "processlookuperror": 1027, "recursionerror": 1027, "referenceerror": 1027, "resourcewarn": 1027, "runtimeerror": 1027, "runtimewarn": 1027, "stopasynciter": 1027, "stopiter": 1027, "syntaxerror": 1027, "syntaxwarn": 1027, "systemerror": 1027, "systemexit": 1027, "taberror": 1027, "timeouterror": 1027, "typeerror": 1027, "unboundlocalerror": 1027, "unicodedecodeerror": 1027, "unicodeencodeerror": 1027, "unicodeerror": 1027, "unicodetranslateerror": 1027, "unicodewarn": 1027, "userwarn": 1027, "zerodivisionerror": 1027, "__build_class__": 1027, "built": 1027, "__debug__": 1027, "__doc__": 1027, "nnoteworthi": 1027, "nil": 1027, "__import__": 1027, "__loader__": 1027, "_frozen_importlib": 1027, "builtinimport": 1027, "__name__": 1027, "__package__": 1027, "__pybind11_internals_v4_gcc_libstdcpp_cxxabi1014__": 1027, "capsul": 1027, "null": 1027, "__spec__": 1027, "modulespec": 1027, "loader": 1027, "ascii": 1027, "breakpoint": 1027, "bytearrai": 1027, "callabl": [1027, 1255, 1293], "chr": 1027, "compil": 1027, "complex": [1027, 1426, 1440], "copyright": 1027, "2001": 1027, "2021": [1027, 1429], "softwar": [1027, 1423, 1426, 1429], "foundat": 1027, "reserv": 1027, "2000": [1027, 1428, 1431, 1436], "beopen": 1027, "1995": 1027, "corpor": 1027, "nation": 1027, "research": [1027, 1426], "1991": 1027, "sticht": 1027, "mathematisch": 1027, "centrum": 1027, "amsterdam": 1027, "credit": 1027, "thank": [1027, 1425], "cwi": 1027, "cnri": 1027, "zope": 1027, "cast": 1027, "thousand": 1027, "develop": [1027, 1426], "inform": [1027, 1434, 1438, 1440], "delattr": 1027, "dir": 1027, "enumer": 1027, "eval": 1027, "exec": 1027, "exit": 1027, "ctrl": 1027, "eof": 1027, "filter": 1027, "frozenset": 1027, "getattr": 1027, "hasattr": 1027, "interact": 1027, "hex": 1027, "isinst": 1027, "issubclass": 1027, "len": 1027, "licens": 1027, "full": [1027, 1076, 1077, 1425, 1429, 1433], "memoryview": 1027, "oct": 1027, "ord": 1027, "quit": 1027, "revers": 1027, "setattr": 1027, "staticmethod": 1027, "super": [1027, 1167, 1204, 1341, 1352, 1372], "__cached__": 1027, "home": [1027, 1428, 1430, 1437, 1439], "jona": [1027, 1423, 1428, 1430, 1437, 1439], "git": [1027, 1426, 1427, 1428, 1430, 1437, 1439], "__pycache__": 1027, "cpython": 1027, "38": [1027, 1431, 1437, 1440], "pyc": 1027, "__file__": 1027, "_frozen_importlib_extern": 1027, "sourcefileload": 1027, "venv": [1027, 1427], "lib": 1027, "python3": [1027, 1427], "site": [1027, 1429, 1431], "__init__": 1027, "command": [1027, 1029, 1039, 1047, 1054, 1061, 1069, 1419, 1427], "linspac": [1027, 1428, 1438], "7000": [1027, 1436, 1437], "119": [1027, 1437], "namespac": 1027, "close": [1028, 1052, 1419, 1430, 1437, 1439], "geometri": [1028, 1030, 1034, 1035, 1036, 1037, 1038, 1040, 1044, 1045, 1051, 1052, 1058, 1059, 1062, 1066, 1067, 1068, 1070, 1074, 1076, 1077, 1294, 1295, 1304, 1305, 1314, 1315, 1324, 1325, 1379, 1397, 1415, 1417, 1419, 1431], "p_min": [1028, 1031, 1032, 1035, 1037, 1041, 1042, 1045, 1048, 1049, 1052, 1055, 1056, 1059, 1063, 1064, 1067, 1071, 1072, 1431], "points_dist": [1028, 1033, 1035, 1037, 1043, 1045, 1050, 1052, 1057, 1059, 1065, 1067, 1073], "return_nearest": [1028, 1033, 1035, 1037, 1043, 1045, 1050, 1052, 1057, 1059, 1065, 1067, 1073], "points_insid": [1028, 1034, 1035, 1037, 1044, 1045, 1051, 1052, 1058, 1059, 1066, 1067, 1074], "insid": [1028, 1034, 1035, 1037, 1044, 1045, 1051, 1052, 1058, 1059, 1060, 1066, 1067, 1074, 1076, 1077, 1097, 1415, 1430], "add_to_figur": [1028, 1029, 1035, 1037, 1039, 1045, 1047, 1052, 1054, 1059, 1061, 1067, 1069, 1431], "show_boundari": [1028, 1029, 1035, 1037, 1039, 1045, 1047, 1052, 1054, 1059, 1061, 1067, 1069], "invers": [1028, 1030, 1035, 1037, 1040, 1045, 1052, 1059, 1062, 1067, 1070, 1255, 1293, 1442], "fill_mod": [1029, 1039, 1045, 1047, 1052, 1054, 1059, 1061, 1069, 1431], "inside_slategrai": [1029, 1039, 1069], "pars_boundari": [1029, 1039, 1047, 1054, 1061, 1069], "pars_dist": [1029, 1039, 1047, 1054, 1061, 1069, 1431], "dist": [1029, 1033, 1039, 1043, 1047, 1050, 1054, 1057, 1061, 1065, 1069, 1073, 1100, 1255, 1293], "dist_insid": [1029, 1039, 1047, 1054, 1061, 1069, 1431], "dist_outsid": [1029, 1039, 1047, 1054, 1061, 1069, 1431], "inside_": [1029, 1039, 1047, 1054, 1061, 1069], "outside_": [1029, 1039, 1047, 1054, 1061, 1069], "invertedareageometri": [1030, 1040, 1062, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1419], "probe": [1033, 1034, 1043, 1044, 1050, 1051, 1057, 1058, 1065, 1066, 1073, 1074, 1124, 1126], "nearest": [1033, 1043, 1050, 1057, 1065, 1073], "bundari": [1033, 1043, 1050, 1057, 1065, 1073], "smallest": [1033, 1043, 1050, 1057, 1065, 1073], "p_nearest": [1033, 1043, 1050, 1057, 1065, 1073], "areaintersect": [1035, 1036, 1419], "intersect": [1035, 1398, 1399, 1419], "areaunion": [1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1419], "union": [1037, 1419], "cobnstructor": [1045, 1046], "closedpolygon": [1052, 1053, 1054, 1055, 1056, 1057, 1058, 1419, 1431], "polygon": [1052, 1053, 1379, 1419, 1431], "poli": 1052, "halfplan": [1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1419], "orthogon": 1059, "import_modul": [1075, 1419], "explicit": [1075, 1380, 1381, 1425, 1430], "deduc": 1075, "instal": [1075, 1425, 1426], "advic": 1075, "fail": [1075, 1428, 1439], "imnport": 1075, "opt": [1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1405, 1425, 1431], "constraint": [1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1117, 1118, 1124, 1127, 1133, 1134, 1135, 1136, 1138, 1139, 1141, 1142, 1143, 1147, 1151, 1154, 1166, 1199, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1264, 1270, 1276, 1282, 1288, 1294, 1304, 1314, 1324, 1338, 1339, 1347, 1348, 1349, 1363, 1370, 1416, 1431], "areageometryconstraint": [1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1415], "farmconstraint": [1076, 1099, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1415], "constrain": [1076, 1097, 1415], "sel_turbin": [1076, 1077, 1097, 1099, 1100, 1106, 1107, 1115, 1117, 1118, 1123, 1124, 1126, 1160, 1166, 1180, 1189, 1191, 1197, 1199, 1338, 1347, 1363], "disc_insid": [1076, 1077], "ensur": [1076, 1077, 1428], "problem": [1076, 1077, 1080, 1081, 1084, 1085, 1097, 1098, 1099, 1100, 1101, 1102, 1106, 1107, 1109, 1110, 1117, 1118, 1124, 1126, 1127, 1128, 1131, 1132, 1133, 1138, 1141, 1142, 1143, 1166, 1180, 1181, 1182, 1183, 1184, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1425, 1431, 1440], "n_compon": [1076, 1084, 1085, 1088, 1095, 1096, 1097, 1099, 1104, 1105, 1106, 1112, 1116, 1117, 1133, 1134, 1135, 1142, 1143, 1180, 1184, 1186, 1187, 1188, 1189, 1191, 1195, 1196, 1197, 1213, 1217, 1218, 1222, 1223, 1227, 1228, 1233, 1234, 1238, 1239, 1241, 1242, 1243, 1244, 1249, 1250, 1254, 1256, 1261, 1262, 1263, 1267, 1268, 1269, 1273, 1274, 1275, 1279, 1280, 1281, 1285, 1286, 1287, 1289, 1290, 1292], "compon": [1076, 1079, 1080, 1081, 1082, 1084, 1085, 1088, 1095, 1096, 1097, 1099, 1101, 1102, 1104, 1105, 1106, 1109, 1110, 1112, 1116, 1117, 1124, 1133, 1143, 1154, 1155, 1166, 1180, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1191, 1193, 1194, 1195, 1196, 1197, 1199, 1213, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1228, 1230, 1231, 1233, 1234, 1236, 1237, 1238, 1239, 1243, 1244, 1246, 1247, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1292, 1293, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1400, 1401, 1403, 1431], "vardeps_float": [1076, 1095, 1097, 1099, 1105, 1106, 1116, 1117, 1180, 1188, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290], "calc_individu": [1076, 1080, 1097, 1099, 1101, 1106, 1109, 1117, 1180, 1182, 1189, 1191, 1193, 1197, 1213, 1215, 1218, 1220, 1223, 1225, 1228, 1230, 1234, 1236, 1239, 1244, 1246, 1250, 1252, 1256, 1258, 1263, 1265, 1269, 1271, 1275, 1277, 1281, 1283, 1287, 1290], "vars_int": [1076, 1079, 1080, 1081, 1084, 1085, 1097, 1099, 1101, 1102, 1106, 1109, 1110, 1117, 1124, 1131, 1132, 1133, 1138, 1139, 1141, 1142, 1143, 1162, 1163, 1166, 1168, 1169, 1170, 1171, 1180, 1182, 1183, 1184, 1189, 1191, 1193, 1194, 1197, 1199, 1209, 1210, 1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1244, 1246, 1247, 1250, 1252, 1253, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1294, 1296, 1297, 1304, 1306, 1307, 1314, 1316, 1317, 1324, 1326, 1327, 1338, 1339, 1344, 1345, 1347, 1349, 1357, 1358, 1359, 1360, 1363, 1370, 1375, 1376], "vars_float": [1076, 1079, 1080, 1081, 1084, 1085, 1097, 1099, 1101, 1102, 1106, 1109, 1110, 1117, 1124, 1131, 1132, 1133, 1138, 1139, 1141, 1142, 1143, 1162, 1163, 1166, 1168, 1169, 1170, 1171, 1180, 1182, 1183, 1184, 1189, 1191, 1193, 1194, 1197, 1199, 1209, 1210, 1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1244, 1246, 1247, 1250, 1252, 1253, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1294, 1296, 1297, 1304, 1306, 1307, 1314, 1316, 1317, 1324, 1326, 1327, 1338, 1339, 1344, 1345, 1347, 1349, 1357, 1358, 1359, 1360, 1363, 1370, 1375, 1376], "problem_result": [1076, 1080, 1081, 1084, 1085, 1097, 1099, 1101, 1102, 1106, 1109, 1110, 1117, 1131, 1132, 1141, 1142, 1180, 1182, 1183, 1184, 1189, 1191, 1193, 1194, 1197, 1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1244, 1246, 1247, 1250, 1252, 1253, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1296, 1297, 1306, 1307, 1316, 1317, 1326, 1327, 1339, 1349, 1370, 1431], "calc_popul": [1076, 1081, 1097, 1099, 1102, 1106, 1110, 1117, 1180, 1183, 1189, 1191, 1194, 1197, 1213, 1216, 1218, 1221, 1223, 1226, 1228, 1231, 1234, 1237, 1239, 1244, 1247, 1250, 1253, 1256, 1259, 1263, 1266, 1269, 1272, 1275, 1278, 1281, 1284, 1287, 1290], "n_sel_turbin": [1076, 1097, 1099, 1106, 1113, 1117, 1121, 1124, 1156, 1166, 1168, 1169, 1180, 1189, 1191, 1197, 1199, 1209, 1210, 1338, 1344, 1345, 1347, 1357, 1358, 1363, 1375, 1376], "add_to_layout_figur": [1076, 1097, 1099, 1106, 1108, 1117, 1119, 1124, 1129, 1166, 1180, 1189, 1191, 1197, 1199, 1338, 1347, 1363], "get_bound": [1076, 1097, 1099, 1106, 1213, 1218, 1223, 1228, 1234, 1239, 1243, 1244, 1250], "check_individu": [1076, 1097, 1099, 1106, 1213, 1218, 1223, 1228, 1234, 1239, 1241, 1244, 1250], "constraint_valu": [1076, 1097, 1099, 1106, 1124, 1134, 1135, 1166, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1241, 1242, 1244, 1250, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "fullfil": [1076, 1097, 1099, 1106, 1124, 1134, 1135, 1166, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1241, 1242, 1244, 1250, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "check_popul": [1076, 1097, 1099, 1106, 1213, 1218, 1223, 1228, 1234, 1239, 1242, 1244, 1250], "component_nam": [1076, 1082, 1097, 1099, 1106, 1117, 1180, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290], "var_names_int": [1076, 1094, 1097, 1099, 1106, 1117, 1124, 1165, 1166, 1180, 1189, 1191, 1197, 1199, 1212, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1313, 1314, 1324, 1337, 1338, 1347, 1362, 1363], "n_vars_int": [1076, 1079, 1080, 1081, 1084, 1085, 1090, 1096, 1097, 1099, 1101, 1102, 1106, 1109, 1110, 1117, 1124, 1131, 1132, 1133, 1138, 1139, 1141, 1142, 1143, 1145, 1149, 1153, 1158, 1162, 1163, 1166, 1168, 1169, 1170, 1171, 1180, 1182, 1183, 1184, 1189, 1191, 1193, 1194, 1197, 1199, 1203, 1206, 1208, 1209, 1210, 1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1244, 1246, 1247, 1250, 1252, 1253, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1291, 1294, 1296, 1297, 1304, 1306, 1307, 1309, 1311, 1312, 1314, 1316, 1317, 1324, 1326, 1327, 1330, 1333, 1335, 1338, 1339, 1344, 1345, 1347, 1349, 1351, 1354, 1356, 1357, 1358, 1359, 1360, 1363, 1370, 1375, 1376, 1431], "var_names_float": [1076, 1093, 1097, 1099, 1106, 1117, 1124, 1164, 1166, 1180, 1189, 1191, 1197, 1199, 1211, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1303, 1304, 1314, 1323, 1324, 1336, 1338, 1346, 1347, 1361, 1363, 1377], "n_vars_float": [1076, 1079, 1080, 1081, 1084, 1085, 1089, 1095, 1097, 1099, 1101, 1102, 1105, 1106, 1109, 1110, 1116, 1117, 1124, 1131, 1132, 1133, 1138, 1139, 1141, 1142, 1143, 1144, 1148, 1152, 1157, 1162, 1163, 1166, 1168, 1169, 1170, 1171, 1180, 1182, 1183, 1184, 1188, 1189, 1191, 1193, 1194, 1197, 1199, 1202, 1205, 1207, 1209, 1210, 1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1239, 1244, 1246, 1247, 1250, 1252, 1253, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287, 1290, 1291, 1294, 1296, 1297, 1299, 1301, 1302, 1304, 1306, 1307, 1314, 1316, 1317, 1319, 1321, 1322, 1324, 1326, 1327, 1329, 1332, 1334, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1347, 1349, 1350, 1353, 1355, 1357, 1358, 1359, 1360, 1363, 1370, 1371, 1373, 1374, 1375, 1376, 1431], "vardeps_int": [1076, 1096, 1097, 1099, 1106, 1117, 1180, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290], "rename_vars_int": [1076, 1092, 1097, 1099, 1106, 1117, 1180, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290], "renam": [1076, 1091, 1092, 1097, 1099, 1106, 1117, 1180, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1425], "rename_vars_float": [1076, 1091, 1097, 1099, 1106, 1117, 1180, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290], "finalize_individu": [1076, 1084, 1097, 1099, 1106, 1117, 1124, 1141, 1166, 1180, 1184, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1339, 1347, 1349, 1363, 1370], "champion": [1076, 1084, 1097, 1099, 1106, 1117, 1124, 1141, 1166, 1180, 1184, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1339, 1347, 1349, 1363, 1370], "finalize_popul": [1076, 1085, 1097, 1099, 1106, 1117, 1124, 1142, 1166, 1180, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "ana_deriv": [1076, 1079, 1097, 1099, 1106, 1117, 1180, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290], "possibl": [1076, 1079, 1097, 1099, 1106, 1117, 1180, 1189, 1191, 1197, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1255, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1293, 1436], "info": [1076, 1078, 1097, 1099, 1106, 1117, 1124, 1166, 1180, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "finish": [1076, 1087, 1097, 1099, 1106, 1117, 1124, 1166, 1180, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1431], "farmoptproblem": [1077, 1098, 1100, 1107, 1118, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1181, 1189, 1190, 1192, 1197, 1198, 1214, 1219, 1224, 1229, 1245, 1251, 1257, 1264, 1270, 1276, 1282, 1288, 1415, 1425], "iwopi": [1077, 1100, 1107, 1118, 1124, 1126, 1127, 1128, 1133, 1143, 1239, 1290, 1294, 1304, 1314, 1324, 1415, 1417, 1426, 1431], "cannot": 1079, "differenti": [1079, 1133, 1143], "n_sel_compon": [1079, 1080, 1081, 1101, 1102, 1109, 1110, 1182, 1183, 1193, 1194, 1215, 1216, 1220, 1221, 1225, 1226, 1230, 1231, 1236, 1237, 1246, 1247, 1252, 1253, 1258, 1259, 1265, 1266, 1271, 1272, 1277, 1278, 1283, 1284], "n_pop": [1081, 1085, 1102, 1110, 1132, 1135, 1139, 1142, 1163, 1169, 1171, 1172, 1173, 1183, 1194, 1210, 1216, 1221, 1226, 1231, 1237, 1242, 1247, 1253, 1259, 1266, 1272, 1278, 1284, 1297, 1307, 1317, 1327, 1345, 1358, 1360, 1376, 1415], "old": [1091, 1092], "dep": [1095, 1096, 1105, 1116, 1180, 1181, 1188, 1190, 1198], "farmboundaryconstraint": [1097, 1098, 1415, 1431], "mindistconstraint": [1099, 1100, 1101, 1102, 1103, 1104, 1105, 1415, 1431], "keep": [1099, 1415, 1427], "least": [1099, 1255, 1293, 1415], "min_dist": [1099, 1100, 1244, 1245, 1256, 1257, 1294, 1295, 1304, 1305, 1314, 1315, 1324, 1325, 1347, 1348, 1431], "min_dist_unit": [1099, 1100, 1431], "constaint": [1099, 1103, 1244, 1248], "geom_layout": [1106, 1117, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1415], "farmobject": [1117, 1118, 1119, 1120, 1121, 1122, 1123, 1180, 1181, 1190, 1191, 1192, 1198, 1415], "calc_farm_arg": [1124, 1126], "all_turbin": [1124, 1130, 1166, 1199, 1338, 1347, 1363], "tvar": [1124, 1161, 1166, 1199, 1338, 1347, 1363], "turbine_i": [1124, 1159, 1161, 1166, 1199, 1338, 1347, 1363], "parse_tvar": [1124, 1159, 1166, 1199, 1338, 1347, 1363], "tvr": [1124, 1159, 1166, 1199, 1338, 1347, 1363], "update_problem_individu": [1124, 1162, 1166, 1170, 1199, 1338, 1347, 1359, 1363], "update_problem_popul": [1124, 1163, 1166, 1171, 1199, 1338, 1347, 1360, 1363], "apply_individu": [1124, 1131, 1166, 1199, 1294, 1296, 1304, 1306, 1314, 1316, 1324, 1326, 1338, 1347, 1363], "apply_popul": [1124, 1132, 1166, 1199, 1294, 1297, 1304, 1307, 1314, 1317, 1324, 1327, 1338, 1347, 1363], "whole": [1124, 1132, 1166, 1199, 1294, 1297, 1304, 1307, 1314, 1317, 1324, 1327, 1338, 1347, 1363, 1425], "int_inf": [1124, 1125, 1149, 1153, 1166, 1199, 1206, 1208, 1294, 1304, 1314, 1324, 1333, 1335, 1338, 1347, 1354, 1356, 1363], "999999": [1124, 1125, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "initial_values_int": [1124, 1145, 1166, 1199, 1203, 1294, 1304, 1309, 1314, 1324, 1330, 1338, 1347, 1351, 1363], "min_values_int": [1124, 1153, 1166, 1199, 1208, 1294, 1304, 1312, 1314, 1324, 1335, 1338, 1347, 1356, 1363], "max_values_int": [1124, 1149, 1166, 1199, 1206, 1294, 1304, 1311, 1314, 1324, 1333, 1338, 1347, 1354, 1363], "initial_values_float": [1124, 1144, 1166, 1199, 1202, 1294, 1299, 1304, 1314, 1319, 1324, 1329, 1338, 1340, 1347, 1350, 1363, 1371], "min_values_float": [1124, 1152, 1166, 1199, 1207, 1294, 1302, 1304, 1314, 1322, 1324, 1334, 1338, 1343, 1347, 1355, 1363, 1374], "max_values_float": [1124, 1148, 1166, 1199, 1205, 1294, 1301, 1304, 1314, 1321, 1324, 1332, 1338, 1342, 1347, 1353, 1363, 1373], "add_object": [1124, 1128, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1431], "varmap_int": [1124, 1127, 1128, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "varmap_float": [1124, 1127, 1128, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "add_constraint": [1124, 1127, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1431], "min_values_constraint": [1124, 1151, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "max_values_constraint": [1124, 1147, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "constraints_tol": [1124, 1136, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "toler": [1124, 1136, 1166, 1199, 1239, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "n_object": [1124, 1138, 1139, 1141, 1150, 1155, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1339, 1347, 1349, 1363, 1370, 1431], "n_constraint": [1124, 1136, 1138, 1139, 1141, 1142, 1147, 1151, 1154, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1339, 1347, 1349, 1363, 1370, 1431], "calc_gradi": [1124, 1133, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "ivar": [1124, 1133, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "gradient": [1124, 1133, 1143, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "get_gradi": [1124, 1133, 1143, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "obtain": [1124, 1143, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1429, 1433, 1441], "link": [1124, 1143, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1426, 1431, 1440], "maximize_obj": [1124, 1150, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "evaluate_individu": [1124, 1138, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "evaluate_popul": [1124, 1139, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "check_constraints_individu": [1124, 1134, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "check_constraints_popul": [1124, 1135, 1166, 1199, 1294, 1304, 1314, 1324, 1338, 1347, 1363], "fvar": 1133, "vr": 1133, "overload": [1133, 1408, 1409, 1425], "optfunctionlist": [1133, 1143], "n_vr": 1133, "ctol": 1136, "ret_prob_r": 1138, "addition": 1138, "con": [1138, 1139, 1141, 1142, 1339, 1349, 1370], "were": [1143, 1425, 1434, 1441, 1442], "previous": [1143, 1425], "cf": [1143, 1436], "problemdefaultfunc": 1143, "cma": 1147, "inf": [1148, 1152, 1205, 1207, 1243, 1301, 1302, 1321, 1322, 1332, 1334, 1342, 1343, 1353, 1355, 1373, 1374], "unbound": [1148, 1149, 1152, 1153, 1205, 1206, 1207, 1208, 1301, 1302, 1321, 1322, 1332, 1333, 1334, 1335, 1342, 1343, 1353, 1354, 1355, 1356, 1373, 1374], "cmi": 1151, "n_con": 1154, "n_obj": 1155, "farmvarsproblem": [1166, 1167, 1168, 1169, 1170, 1171, 1199, 1200, 1338, 1347, 1348, 1363, 1369, 1415, 1416, 1425], "pre_rotor_var": [1166, 1167], "post_rotor_var": [1166, 1167], "opt2farm_vars_individu": [1166, 1168, 1199, 1209, 1338, 1344, 1347, 1357, 1363, 1375], "opt2farm_vars_popul": [1166, 1169, 1199, 1210, 1338, 1345, 1347, 1358, 1363, 1376], "farm_var": [1168, 1169, 1209, 1210, 1344, 1345, 1357, 1358, 1375, 1376], "popstat": [1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1415], "artifici": [1172, 1415, 1437], "farmvarobject": [1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1197, 1415], "rule": [1180, 1181, 1190, 1198, 1425, 1436, 1442], "contract_st": [1180, 1181, 1190, 1198], "contract_turbin": [1181, 1190, 1198], "maxfarmpow": [1189, 1190, 1415, 1431], "maximize_pow": [1189, 1190, 1431], "maxnturbin": [1191, 1192, 1193, 1194, 1195, 1196, 1415], "turrbin": [1191, 1415], "check_valid": [1191, 1192], "count": [1191, 1192, 1425], "max_n_turbin": [1191, 1192], "minimalmaxti": [1197, 1198, 1415], "minimize_ti": [1197, 1198], "optfarmvar": [1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1416], "typ": [1199, 1201], "model_kei": 1201, "geometr": [1213, 1214, 1218, 1219, 1223, 1224, 1228, 1229, 1234, 1244, 1245, 1250, 1251, 1256, 1257, 1263, 1264, 1269, 1270, 1275, 1276, 1281, 1282, 1287, 1288, 1294, 1304, 1416, 1417, 1425], "cmpnt": [1213, 1215, 1216, 1218, 1220, 1221, 1223, 1225, 1226, 1228, 1230, 1231, 1234, 1236, 1237, 1244, 1246, 1247, 1250, 1252, 1253, 1256, 1258, 1259, 1263, 1265, 1266, 1269, 1271, 1272, 1275, 1277, 1278, 1281, 1283, 1284, 1287], "additio": [1214, 1219, 1224, 1229, 1245, 1251], "cfixn": [1218, 1219, 1220, 1221, 1222, 1417], "cmaxn": [1223, 1224, 1225, 1226, 1227, 1417], "cmindens": [1228, 1229, 1230, 1231, 1232, 1233, 1417], "min_valu": [1228, 1229], "dfactor": [1228, 1229, 1256, 1257], "min_dens": [1228, 1229], "cminn": [1234, 1235, 1236, 1237, 1238, 1417], "optfunct": [1239, 1290], "tol": [1239, 1240], "violat": 1239, "1e": [1239, 1240, 1431], "mindist": [1244, 1245, 1246, 1247, 1248, 1249, 1417], "cdist": [1255, 1293], "xa": [1255, 1293], "xb": [1255, 1293], "metric": [1255, 1293], "euclidean": [1255, 1293], "m_a": [1255, 1293], "observ": [1255, 1293], "m_b": [1255, 1293], "braycurti": [1255, 1293], "canberra": [1255, 1293], "chebyshev": [1255, 1293], "cityblock": [1255, 1293], "cosin": [1255, 1293], "dice": [1255, 1293], "ham": [1255, 1293], "jaccard": [1255, 1293], "jensenshannon": [1255, 1293], "kulczynski1": [1255, 1293], "mahalanobi": [1255, 1293], "match": [1255, 1293], "minkowski": [1255, 1293], "rogerstanimoto": [1255, 1293], "russellrao": [1255, 1293], "seuclidean": [1255, 1293], "sokalmichen": [1255, 1293], "sokalsneath": [1255, 1293], "sqeuclidean": [1255, 1293], "yule": [1255, 1293], "norm": [1255, 1293], "unweight": [1255, 1293], "varianc": [1255, 1293], "vstack": [1255, 1293], "ddof": [1255, 1293], "vi": [1255, 1293], "covari": [1255, 1293], "matrix": [1255, 1293], "inv": [1255, 1293], "cov": [1255, 1293], "u": [1255, 1293, 1400, 1401, 1431], "ij": [1255, 1293], "thrown": [1255, 1293], "arrang": [1255, 1293], "_p": [1255, 1293], "quasi": [1255, 1293], "citi": [1255, 1293], "block": [1255, 1293, 1431], "manhattan": [1255, 1293], "u_i": [1255, 1293], "v_i": [1255, 1293], "x_i": [1255, 1293], "squar": [1255, 1293], "_2": [1255, 1293], "frac": [1255, 1293], "cdot": [1255, 1293], "its": [1255, 1293, 1363, 1416, 1426, 1434, 1438], "dot": [1255, 1293], "proport": [1255, 1293], "those": [1255, 1293, 1434], "disagre": [1255, 1293], "To": [1255, 1293], "save": [1255, 1293, 1440], "shannon": [1255, 1293], "probabl": [1255, 1293], "q": [1255, 1293], "pointwis": [1255, 1293], "kullback": [1255, 1293], "leibler": [1255, 1293], "diverg": [1255, 1293], "maximum": [1255, 1293, 1425, 1441], "precis": [1255, 1293], "max_i": [1255, 1293], "sum_i": [1255, 1293], "brai": [1255, 1293], "curti": [1255, 1293], "synonym": [1255, 1293], "kulczynski": [1255, 1293], "roger": [1255, 1293], "tanimoto": [1255, 1293], "russel": [1255, 1293], "rao": [1255, 1293], "sokal": [1255, 1293], "michen": [1255, 1293], "sneath": [1255, 1293], "suppli": [1255, 1293], "ariti": [1255, 1293], "could": [1255, 1293, 1425, 1434, 1436, 1438, 1441], "dm": [1255, 1293], "lambda": [1255, 1293, 1437, 1439], "librari": [1255, 1293, 1431, 1438], "would": [1255, 1293, 1428, 1437], "ineffici": [1255, 1293], "syntax": [1255, 1293], "find": [1255, 1293, 1425], "four": [1255, 1293, 1430], "35": [1255, 1293, 1429, 1431, 1439], "0456": [1255, 1293], "85": [1255, 1293, 1431, 1439], "2672": [1255, 1293], "1174": [1255, 1293], "89": [1255, 1293, 1431, 1441], "9711": [1255, 1293], "9728": [1255, 1293], "9422": [1255, 1293], "36": [1255, 1293, 1429, 1431], "1667": [1255, 1293], "86": [1255, 1293, 1423, 1431, 1433], "7833": [1255, 1293], "7044": [1255, 1293], "6172": [1255, 1293], "8856": [1255, 1293], "0893": [1255, 1293], "3561": [1255, 1293], "8477": [1255, 1293], "corner": [1255, 1293, 1430], "cube": [1255, 1293], "maxdens": [1256, 1257, 1258, 1259, 1260, 1261, 1262, 1417], "max_dens": [1256, 1257], "maxgridspac": [1263, 1264, 1265, 1266, 1267, 1268, 1417], "max_dxdi": [1263, 1264], "memimadist": [1269, 1270, 1271, 1272, 1273, 1274, 1417], "c3": [1269, 1270], "mimamean": [1269, 1270], "diff": 1270, "ofixn": [1275, 1276, 1277, 1278, 1279, 1280, 1417], "omaxn": [1281, 1282, 1283, 1284, 1285, 1286, 1287, 1417], "maxn": [1281, 1282], "ominn": [1287, 1288, 1289, 1417], "vnames_int": 1291, "vnames_float": 1291, "cname": 1291, "geomlayout": [1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1417, 1425], "involv": [1294, 1304, 1314, 1324, 1425], "calc_valid": [1294, 1295], "plotli": [1294, 1298, 1304, 1308, 1314, 1318, 1324, 1328, 1395, 1419, 1425], "true_circl": [1298, 1308, 1318, 1328], "ndarari": [1298, 1308, 1318, 1328], "draw": [1298, 1308, 1318, 1328], "geomlayoutgrid": [1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1417, 1425], "background": [1304, 1305, 1417, 1425, 1430, 1431, 1434], "grid_spac": [1304, 1305], "geomreggrid": [1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1417, 1425], "max_dist": [1314, 1315, 1324, 1325, 1348], "n_grid": [1324, 1325, 1347, 1348], "n_max": [1324, 1325], "n_row_max": [1324, 1325, 1348], "farmlayoutoptproblem": [1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1416, 1431], "reggridslayoutoptproblem": [1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1416], "sever": [1347, 1416, 1425], "mix": [1347, 1428], "min_spac": [1347, 1363, 1369], "max_n_row": 1347, "regularlayoutoptproblem": [1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1416, 1425], "spacing_x": [1363, 1367], "spacing_i": [1363, 1368], "offset_x": [1363, 1365], "offset_i": [1363, 1366], "read_shp": [1378, 1379, 1419, 1425], "shp": [1378, 1379, 1396, 1419], "geopanda": [1378, 1379, 1396], "geodatafram": 1378, "wsg84": 1378, "read_shp_polygon": [1379, 1397, 1419, 1425], "name_col": 1379, "geom_col": 1379, "to_utm": 1379, "ret_utm_zon": [1379, 1397, 1419], "extract": 1379, "utm": [1379, 1397], "zone": [1379, 1397, 1428], "letter": [1379, 1397], "32u": [1379, 1397], "point_dict_exterior": 1379, "point_dict_interior": 1379, "utm_zone_str": [1379, 1397], "utem": [1379, 1397], "daskrunn": [1380, 1381, 1382, 1383, 1384, 1385, 1386, 1419, 1425, 1428, 1430, 1431, 1437, 1439, 1440, 1441], "schedul": [1380, 1381, 1425, 1431, 1440], "progress_bar": [1380, 1381, 1425], "show": [1380, 1381, 1425, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1440, 1441, 1442], "progress": [1380, 1381, 1440, 1441], "cluster_arg": [1380, 1381], "cluster": [1380, 1381, 1425, 1426, 1431, 1440, 1441], "setup": [1380, 1381, 1424, 1425, 1426, 1428, 1431, 1433, 1435, 1436, 1438, 1441, 1442], "client_arg": [1380, 1381], "client": [1380, 1381], "n_worker": [1380, 1381], "is_distribut": [1380, 1384], "threads_per_work": 1381, "process": [1381, 1434], "worker": [1381, 1440], "thread": [1381, 1440], "defaultrunn": [1387, 1388, 1419, 1425], "show_plotly_fig": [1395, 1419, 1425], "displai": [1395, 1419, 1440, 1441], "window": [1395, 1419, 1425], "stackoverflow": 1395, "question": [1395, 1431], "53570384": 1395, "how": [1395, 1424, 1425, 1426, 1428, 1435, 1440, 1441], "standalon": 1395, "shp2csv": [1396, 1419, 1425], "ifil": [1396, 1419], "ofil": [1396, 1419], "in_kwarg": [1396, 1419], "out_kwarg": [1396, 1419], "inam": 1396, "onam": 1396, "to_csv": 1396, "shp2geom2d": [1397, 1419], "shapefil": [1397, 1419], "geom": 1397, "tool": [1397, 1437, 1440], "two_circl": [1398, 1399], "r1": [1398, 1399, 1419], "r2": [1398, 1399, 1419], "sure": [1398, 1427, 1431, 1440], "These": [1398, 1414, 1430, 1431, 1433, 1439, 1442], "diego": 1398, "assencio": 1398, "8d6ca3d82151bad815f78addf9b5c1c6": 1398, "calc_area": [1399, 1419], "broadcast": [1399, 1401, 1402], "anoth": [1399, 1437, 1441, 1442], "uv2wd": [1400, 1419], "uv": [1400, 1401, 1419], "wd2uv": [1401, 1419], "against": [1401, 1402], "wd2wdvec": [1402, 1419], "wdvec": [1402, 1403, 1419], "wdvec2wd": [1403, 1419], "complevel": 1404, "netcfd": [1404, 1430], "definit": 1404, "to_netcdf": 1404, "shortcut": 1405, "concret": [1405, 1414, 1422], "manag": [1406, 1424, 1425, 1426, 1434], "sweep": [1406, 1407], "until": [1406, 1408, 1425], "reach": [1406, 1408, 1412, 1425, 1428, 1439], "uns": 1406, "access": 1412, "atmospher": [1413, 1414, 1426, 1429], "interfac": [1413, 1425, 1431], "propag": [1414, 1424, 1425, 1434], "due": [1414, 1425, 1428, 1436], "ie": 1414, "machin": 1414, "net": 1414, "intern": [1415, 1426], "extern": 1415, "classif": 1422, "cite": 1423, "joss": 1423, "bibtex": 1423, "schmidt2023": 1423, "author": [1423, 1429], "schmidt": 1423, "luka": 1423, "vollmer": 1423, "martin": 1423, "d\u00f6renk\u00e4mper": 1423, "bernhard": 1423, "stoevesandt": 1423, "21105": 1423, "05464": 1423, "url": 1423, "year": 1423, "2023": [1423, 1429, 1439], "publish": [1423, 1425], "volum": 1423, "page": 1423, "5464": 1423, "zenodo": 1423, "jupyt": 1424, "notebook": [1424, 1425, 1434], "folder": [1424, 1425], "repositori": [1424, 1426], "overview": [1424, 1425, 1426, 1438], "homogen": [1424, 1437], "releas": [1425, 1427], "readi": [1425, 1432, 1438, 1439, 1442], "transfer": [1425, 1442], "fraunhof": [1425, 1426, 1431], "iw": [1425, 1426, 1429, 1431], "hous": 1425, "predecessor": [1425, 1426], "flappi": [1425, 1426], "yet": 1425, "enjoi": 1425, "await": 1425, "comment": 1425, "issu": [1425, 1426], "changelog": 1425, "fraunhoferiw": [1425, 1426, 1427], "commit": [1425, 1426], "style": 1425, "black": 1425, "small": [1425, 1429], "discov": 1425, "flake8": 1425, "now": [1425, 1428, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1441, 1442], "pytest": 1425, "unittest": 1425, "workflow": 1425, "docu": 1425, "io": 1425, "doc": [1425, 1440], "html": [1425, 1437, 1439], "miss": 1425, "wind_rot": [1425, 1430], "manifest": 1425, "orst": 1425, "pctsinglefil": 1425, "iecti2019": 1425, "iecti2005": 1425, "concept": [1425, 1439], "pip": [1425, 1426], "capabl": [1425, 1426], "As": [1425, 1427, 1428, 1442], "pcttwofil": 1425, "windroseoutput": 1425, "histogram": 1425, "ambientwindroseoutput": 1425, "improv": 1425, "browser": 1425, "featur": [1425, 1436], "wind_ros": 1425, "layout_single_st": 1425, "layout_wind_ros": 1425, "layout_opt": [1425, 1431], "ipynb": 1425, "demonstr": [1425, 1429, 1431, 1435, 1438, 1441, 1442], "wrf": [1425, 1433, 1434], "ambientroseplotoutput": 1425, "multi_height": 1425, "bug": 1425, "veer": 1425, "power_mask": 1425, "solv": [1425, 1431], "cubic": 1425, "forgotten": 1425, "api": [1425, 1426, 1428, 1440], "hotfix": 1425, "wsrho2pcttwofil": 1425, "sector_manag": 1425, "sector_man": 1425, "col_model": 1425, "offset": 1425, "linearsuperposit": 1425, "compare_wak": 1425, "compar": [1425, 1435, 1436], "yawed_wak": 1425, "simplifi": 1425, "accept": 1425, "replac": [1425, 1427], "intuit": 1425, "turboparkix": 1425, "summar": 1425, "bracket": 1425, "eq": 1425, "wrong": 1425, "layout_regular_grid": 1425, "geom_reggrid": 1425, "affect": [1425, 1435], "geopandas_help": 1425, "interior": 1425, "11": [1425, 1427, 1428, 1429, 1431, 1435, 1439, 1440, 1442], "cleaner": 1425, "treatment": 1425, "slimmer": 1425, "distribut": [1425, 1429, 1431, 1440], "move": [1425, 1431, 1437], "productsuperposit": 1425, "irrespect": 1425, "restart": 1425, "complet": [1425, 1428, 1429, 1432, 1433, 1436, 1439, 1440, 1441], "incomplet": 1425, "slurm": 1425, "queue": 1425, "system": [1425, 1427, 1429, 1434, 1438, 1440], "timeseries_slurm": 1425, "hpc": 1425, "apigen": 1425, "through": [1425, 1426], "outer": [1425, 1437], "consist": [1425, 1429, 1435, 1436, 1438, 1441], "timeseries_100": [1425, 1439], "short": [1425, 1429], "timestep": 1425, "vari": [1425, 1429, 1433], "chosen": 1425, "slow": 1425, "down": [1425, 1440], "prevent": 1425, "shown": [1425, 1429], "exclud": 1425, "signal": [1425, 1439], "consider": 1425, "autom": 1425, "pypi": 1425, "drop": 1425, "netcdf4": 1425, "keep_model": 1425, "kept": 1425, "mostli": 1425, "address": [1425, 1440], "explicitli": 1425, "rhb": [1425, 1428, 1432], "classic": 1425, "induction_rhb": 1425, "conda": [1425, 1426], "forg": [1425, 1427], "refactor": 1425, "spars": 1425, "bastankhahwak": 1425, "porteagelwak": 1425, "longer": 1425, "jump": 1425, "bastankhah025": [1425, 1431], "restructur": 1425, "less": 1425, "simpler": 1425, "ws_linear": [1425, 1432, 1439], "ti_quadrat": [1425, 1432], "mess": 1425, "colorbar": 1425, "modular": 1426, "steer": 1426, "construct": 1426, "analysi": 1426, "comparison": 1426, "chain": 1426, "perform": 1426, "ow": 1426, "remot": 1426, "enabl": 1426, "well": [1426, 1429, 1431, 1442], "tracker": 1426, "report": 1426, "mit": 1426, "citat": 1426, "journal": 1426, "histori": 1426, "fork": [1426, 1427], "branch": [1426, 1427], "checkout": 1426, "new_branch": 1426, "your": [1426, 1427, 1438], "am": [1426, 1439], "awesom": 1426, "messag": 1426, "push": 1426, "pull": 1426, "request": 1426, "flapfoam": 1426, "public": [1426, 1442], "publicli": 1426, "fund": 1426, "project": 1426, "particular": [1426, 1440], "feder": 1426, "ministri": 1426, "econom": 1426, "affair": 1426, "climat": 1426, "action": [1426, 1434], "bmwk": 1426, "roject": 1426, "smart": 1426, "grant": 1426, "0325851b": 1426, "0325397b": 1426, "03ee3008a": 1426, "educ": 1426, "bmbf": 1426, "framework": 1426, "h2digit": 1426, "03sf0635": 1426, "furthermor": [1426, 1435], "horizon": 1426, "europ": 1426, "energi": [1426, 1433, 1434], "101084205": 1426, "conveni": [1427, 1438], "prefer": 1427, "Then": 1427, "activ": 1427, "leav": 1427, "deactiv": 1427, "altern": 1427, "decid": 1427, "dev": 1427, "egg": 1427, "clone": 1427, "cd": 1427, "whenev": [1427, 1437], "concern": 1427, "recommend": [1427, 1430], "strongli": 1427, "libmamba": 1427, "solver": [1427, 1431], "config": 1427, "channel": 1427, "necessari": [1427, 1439], "while": 1427, "again": [1427, 1431, 1435], "build": 1427, "inlin": [1428, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442], "20": [1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1439, 1440, 1441], "800": [1428, 1431, 1437, 1438, 1439], "400": [1428, 1431], "dtu10mw": [1428, 1429, 1432, 1437, 1439], "04": [1428, 1429, 1431, 1432, 1437, 1439], "fact": [1428, 1442], "upstream": 1428, "influenc": [1428, 1435], "downstream": [1428, 1442], "notic": [1428, 1431, 1435, 1436, 1437, 1439, 1440, 1442], "aglo": 1428, "freshli": [1428, 1432], "off": [1428, 1431, 1436], "repeatedli": 1428, "vicin": 1428, "cut": 1428, "bastankhah025_linear_lim_k004": [1428, 1432, 1437], "4000": [1428, 1430, 1431, 1436, 1441], "among": 1428, "39": [1428, 1429, 1430, 1431, 1437, 1438, 1439, 1440], "basic_ctrl_pr": [1428, 1437, 1439], "power_ct_curv": [1428, 1437, 1439], "10mw": [1428, 1437, 1439], "d178d3": [1428, 1437, 1439], "h119": [1428, 1437, 1439], "basic_ctrl_postr": [1428, 1437, 1439], "ws_linear_lim": [1428, 1432, 1437], "rotorpoints1": 1428, "partialaxiwake10": [1428, 1437, 1439], "48": [1428, 1431, 1441], "partialwk": [1428, 1437, 1439], "sp": [1428, 1432, 1437, 1439], "setxyhd_t2f": [1428, 1437, 1439], "calc_yaw_centrerotor1": [1428, 1437, 1439], "urelax_ct": [1428, 1439], "iterative_calc": [1428, 1439], "oder": [1428, 1437, 1439], "00": [1428, 1429, 1431, 1433, 1437, 1439, 1440], "02": [1428, 1429, 1431, 1432, 1437, 1439], "03": [1428, 1429, 1431, 1437, 1438, 1439, 1440], "102": [1428, 1439, 1440], "14": [1428, 1429, 1431, 1435, 1440], "lt": [1428, 1429, 1431, 1437, 1438, 1439], "gt": [1428, 1429, 1431, 1437, 1438, 1439], "u7": [1428, 1439], "float64": [1428, 1431, 1437, 1438, 1439], "chunksiz": [1428, 1439], "55": [1428, 1429, 1431, 1439], "72": [1428, 1429, 1430, 1431, 1439], "255e": 1428, "lim": [1428, 1439], "000e": [1428, 1439], "ok": [1428, 1439], "379e": 1428, "103": [1428, 1439], "28": [1428, 1431], "314e": 1428, "330e": 1428, "101": [1428, 1439, 1441], "97": [1428, 1429, 1431, 1433, 1440], "071e": 1428, "206e": 1428, "142": 1428, "193e": 1428, "979e": 1428, "78": [1428, 1429, 1431, 1441], "34": [1428, 1429, 1431, 1440], "805e": 1428, "997e": 1428, "104": [1428, 1439], "138e": 1428, "565e": 1428, "47": [1428, 1430, 1431], "236e": 1428, "270e": 1428, "37": [1428, 1431], "168e": 1428, "358e": 1428, "98": [1428, 1431, 1439], "71": [1428, 1431], "126e": 1428, "291e": 1428, "81": [1428, 1431, 1437, 1439, 1441], "203e": 1428, "202e": 1428, "84": [1428, 1431, 1439], "672e": 1428, "290e": 1428, "12": [1428, 1429, 1431, 1435, 1437, 1438, 1439, 1441, 1442], "42": [1428, 1429, 1431, 1439, 1440], "713e": 1428, "286e": 1428, "13": [1428, 1429, 1431, 1433, 1435, 1439], "67": [1428, 1429, 1431, 1440], "534e": 1428, "714e": 1428, "16": [1428, 1429, 1431, 1433, 1435, 1436, 1439, 1440, 1441], "356e": 1428, "926e": 1428, "814": [1428, 1437], "731e": 1428, "4e": [1428, 1438], "65e": 1428, "05e": 1428, "40": [1428, 1431], "45": [1428, 1431], "46": [1428, 1429, 1431, 1441], "43": [1428, 1431], "44": [1428, 1430, 1431, 1439], "u3": 1428, "t0": [1428, 1429, 1431, 1435, 1436, 1437, 1438, 1440, 1442], "t1": [1428, 1429, 1431, 1435, 1436, 1437, 1438, 1440, 1442], "t2": [1428, 1429, 1431, 1435, 1437, 1438, 1440], "t3": [1428, 1429, 1431, 1435, 1437, 1438, 1440], "t44": 1428, "t45": 1428, "t46": 1428, "t47": 1428, "visual": [1428, 1431, 1433, 1435, 1436, 1438, 1439, 1440], "south": [1428, 1436], "westerli": [1428, 1436], "o": [1428, 1429, 1430, 1431, 1433, 1435, 1436, 1438, 1439, 1440, 1441, 1442], "300": [1428, 1429, 1431, 1435, 1442], "front": 1428, "clearli": [1428, 1442], "visibl": 1428, "merg": 1428, "straight": 1428, "xlist": 1428, "set_ylabel": [1428, 1438], "set_xlabel": [1428, 1438], "often": [1429, 1434], "terminologi": [1429, 1434, 1438], "three": [1429, 1442], "randomli": 1429, "101872": [1429, 1440], "70": [1429, 1430, 1431, 1436, 1440], "1004753": [1429, 1440], "57": [1429, 1431, 1440], "103659": [1429, 1440], "1002993": [1429, 1440], "29": [1429, 1431, 1439, 1440], "100780": [1429, 1440], "09": [1429, 1440], "1000779": [1429, 1440], "100290": [1429, 1440], "1004330": [1429, 1440], "t4": [1429, 1431, 1435, 1437, 1438], "103005": 1429, "1003540": 1429, "t5": [1429, 1431, 1437], "100102": 1429, "92": [1429, 1431], "1004849": 1429, "t6": [1429, 1431, 1437], "104162": 1429, "1001061": 1429, "mesoscal": 1429, "75": [1429, 1430, 1431, 1433, 1440], "2009": [1429, 1433], "37214": [1429, 1433], "42685": [1429, 1433], "28838": [1429, 1433], "31": [1429, 1430, 1431, 1433, 1440], "23": [1429, 1431, 1433, 1437, 1439, 1440], "27767": [1429, 1433], "36368": [1429, 1433], "30095": [1429, 1433], "At": 1429, "90": [1429, 1431, 1433, 1439], "150": [1429, 1431, 1433, 1440, 1441], "250": [1429, 1431, 1433, 1435, 1436, 1442], "svg": [1429, 1431, 1433, 1436, 1440, 1441], "binnd": 1429, "layer": 1429, "64": [1429, 1431, 1440], "253": 1429, "032": 1429, "542331196166035e": 1429, "65": [1429, 1431, 1440], "207": 1429, "145": 1429, "0001230528308906": 1429, "49": [1429, 1430, 1431], "116": 1429, "0001563449299843": 1429, "314": 1429, "048": 1429, "618827331554488e": 1429, "18": [1429, 1431, 1435], "302": 1429, "027": 1429, "694": 1429, "98695302482496e": 1429, "3000": [1429, 1431, 1435, 1442], "2018": [1429, 1437], "24": [1429, 1431, 1435, 1440], "172": 1429, "27": [1429, 1431, 1437, 1439], "51": [1429, 1431, 1437], "184": 1429, "52": [1429, 1431, 1439], "198": 1429, "209": [1429, 1431], "93": [1429, 1431, 1433], "19": [1429, 1431, 1435, 1440], "217": 1429, "223": 1429, "26": [1429, 1430, 1431, 1437, 1439, 1440], "68": [1429, 1431], "227": 1429, "8000": [1429, 1438, 1440], "2017": [1429, 1440], "62": [1429, 1431, 1439, 1440], "244": [1429, 1440], "0504": [1429, 1440], "99": [1429, 1431, 1436, 1439, 1440], "243": [1429, 1440], "0514": [1429, 1440], "0522": [1429, 1440], "33": [1429, 1431, 1439, 1440], "241": [1429, 1440], "0523": [1429, 1440], "0518": 1429, "242": 1429, "0513": 1429, "269": 1429, "836": 1429, "344": 1429, "268": 1429, "532": 1429, "267": 1429, "406": 1429, "265": 1429, "981": 1429, "coars": [1429, 1431, 1441], "216": [1429, 1431, 1441], "bremen": [1429, 1431, 1436], "germani": [1429, 1431], "00158": [1429, 1431, 1441], "00244": [1429, 1431, 1441], "00319": [1429, 1431, 1441], "00367": 1429, "00042": [1429, 1431, 1441], "veri": [1429, 1430, 1431, 1440], "inhomogen": 1429, "long_nam": 1429, "rotat": 1429, "subtitl": 1429, "date": 1429, "2500": [1429, 1430, 1431], "180": 1429, "220": 1429, "120": [1429, 1437], "dtu10": 1429, "iea15": 1429, "iea15mw": [1429, 1432], "iwt7": [1429, 1432], "nrel5": [1429, 1435, 1438, 1440], "nrel5mw": [1429, 1430, 1431, 1432, 1433, 1435, 1438, 1440, 1441, 1442], "nstate": 1429, "ncurv": 1429, "pctcurv": 1429, "categori": 1429, "relative_to": 1429, "parent": 1429, "posixpath": 1429, "printout": [1429, 1438], "feel": 1429, "invit": 1429, "best": [1430, 1431, 1436], "wai": 1430, "similar": 1430, "claim": 1430, "associ": 1430, "back": 1430, "our": [1430, 1431, 1432, 1433, 1435, 1436, 1437, 1441, 1442], "let": [1430, 1431, 1433, 1435, 1436, 1439, 1440, 1441, 1442], "domain": 1430, "rectangl": 1430, "realiz": [1430, 1442], "instanc": [1430, 1439], "streamlines_100": [1430, 1432], "grid16": [1430, 1432], "jensen_linear_k007": [1430, 1432, 1438], "implicit": [1430, 1431, 1440, 1442], "fr": [1430, 1433, 1435, 1438, 1440], "to_datafram": [1430, 1433, 1435, 1438, 1439, 1440, 1442], "scale_unit": 1430, "201": 1430, "158092": 1430, "491089": 1430, "1474": 1430, "211367": 1430, "208": [1430, 1431], "044994": 1430, "673386": 1430, "1580": 1430, "523022": 1430, "214": [1430, 1431], "523994": 1430, "960601": 1430, "1748": 1430, "171047": 1430, "218": 1430, "242345": 1430, "867297": 1430, "1127": 1430, "597810": 1430, "222": 1430, "297880": 1430, "283373": 1430, "1352": 1430, "715530": 1430, "899315": 1430, "731909": 1430, "808657": 1430, "1614": 1430, "607085": 1430, "1101": 1430, "211997": 1430, "236": 1430, "751304": 1430, "932726": 1430, "1156": 1430, "958672": 1430, "237": 1430, "139685": 1430, "375640": 1430, "142662": 1430, "1406": 1430, "547918": 1430, "801": 1430, "751505": 1430, "484049": 1430, "818854": 1430, "381124": 1430, "1665": 1430, "347000": 1430, "908": 1430, "970303": 1430, "311353": 1430, "703701": 1430, "746596": 1430, "1054": 1430, "871543": 1430, "653": 1430, "807377": 1430, "259090": 1430, "995899": 1430, "857833": 1430, "1185": 1430, "898485": 1430, "690": 1430, "639688": 1430, "676969": 1430, "357075": 1430, "1396": 1430, "122949": 1430, "537113": 1430, "352448": 1430, "521": 1430, "748653": 1430, "447853": 1430, "960030": 1430, "917024": 1430, "724": 1430, "421405": 1430, "710": 1430, "071241": 1430, "815208": 1430, "580130": 1430, "998": [1430, 1431], "581195": 1430, "462887": 1430, "352662": 1430, "621921": 1430, "552147": 1430, "960214": 1430, "363478": 1430, "184792": 1430, "580285": 1430, "552663": 1430, "task": 1431, "detail": [1431, 1434, 1440], "pymoo": 1431, "nice": 1431, "genet": 1431, "optimizer_pymoo": 1431, "gm": 1431, "tackl": 1431, "wind_rose_bremen": [1431, 1436, 1441], "0036700002": [1431, 1441], "1200": 1431, "900": [1431, 1439, 1441], "1500": [1431, 1440], "700": 1431, "wish": [1431, 1440, 1441, 1442], "t7": [1431, 1437], "t8": [1431, 1437], "t9": 1431, "shortli": 1431, "begin": 1431, "bastankhah025_linear_k002": [1431, 1432], "n_obj_cmptn": 1431, "n_con_cmptn": 1431, "impli": 1431, "render": 1431, "smoother": 1431, "ga": 1431, "form": [1431, 1440], "n_max_gen": 1431, "pop_siz": 1431, "problem_par": 1431, "algo_par": 1431, "seed": 1431, "setup_par": 1431, "term_par": 1431, "ftol": 1431, "xtol": 1431, "print_info": 1431, "sampl": 1431, "float_random": 1431, "floatrandomsampl": 1431, "termin": 1431, "defaultsingleobjectivetermin": 1431, "001": 1431, "n_gen": 1431, "n_eval": 1431, "cv_min": 1431, "cv_avg": 1431, "f_avg": 1431, "f_min": 1431, "257950e": 1431, "094916e": 1431, "589298e": 1431, "141458e": 1431, "108843e": 1431, "097684e": 1431, "011586e": 1431, "869307e": 1431, "250281e": 1431, "238949e": 1431, "668302e": 1431, "350": 1431, "500554e": 1431, "011095e": 1431, "198486e": 1431, "450": 1431, "571793e": 1431, "998508e": 1431, "775495e": 1431, "550": 1431, "695093e": 1431, "482376e": 1431, "600": [1431, 1433, 1435, 1436, 1437], "369663e": 1431, "650": 1431, "255097e": 1431, "461710e": 1431, "135664e": 1431, "750": [1431, 1435, 1442], "098324e": 1431, "266611e": 1431, "850": 1431, "446678e": 1431, "484456e": 1431, "440080e": 1431, "151751e": 1431, "917821e": 1431, "998273e": 1431, "871628e": 1431, "1050": 1431, "019366e": 1431, "071983e": 1431, "1100": 1431, "4405916400": 1431, "193676e": 1431, "1150": 1431, "9794099827": 1431, "349004e": 1431, "000000e": 1431, "738912e": 1431, "637094e": 1431, "1250": 1431, "137290e": 1431, "634633e": 1431, "637724e": 1431, "1300": 1431, "1859595870": 1431, "627938e": 1431, "1350": 1431, "6172307553": 1431, "627745e": 1431, "639860e": 1431, "1400": 1431, "0289892170": 1431, "628375e": 1431, "641896e": 1431, "1450": 1431, "637568e": 1431, "669572e": 1431, "643675e": 1431, "669894e": 1431, "1550": 1431, "650502e": 1431, "674112e": 1431, "1600": 1431, "659980e": 1431, "1650": 1431, "667832e": 1431, "675601e": 1431, "1700": 1431, "672502e": 1431, "681063e": 1431, "1750": 1431, "675992e": 1431, "686394e": 1431, "1800": 1431, "679654e": 1431, "687964e": 1431, "1850": 1431, "683403e": 1431, "693818e": 1431, "1900": 1431, "686760e": 1431, "697895e": 1431, "1950": 1431, "690004e": 1431, "700975e": 1431, "692837e": 1431, "702307e": 1431, "2050": 1431, "695943e": 1431, "704911e": 1431, "2100": 1431, "699206e": 1431, "2150": 1431, "701337e": 1431, "709204e": 1431, "2200": 1431, "702841e": 1431, "709386e": 1431, "2250": 1431, "704866e": 1431, "711183e": 1431, "2300": 1431, "706579e": 1431, "2350": 1431, "708801e": 1431, "713996e": 1431, "2400": 1431, "710350e": 1431, "715391e": 1431, "2450": 1431, "711441e": 1431, "712496e": 1431, "716416e": 1431, "2550": 1431, "713817e": 1431, "718522e": 1431, "2600": 1431, "715419e": 1431, "720369e": 1431, "53": [1431, 1440], "2650": 1431, "716514e": 1431, "54": [1431, 1439], "2700": 1431, "717930e": 1431, "724067e": 1431, "2750": 1431, "719196e": 1431, "724559e": 1431, "56": [1431, 1439], "2800": 1431, "720247e": 1431, "724618e": 1431, "2850": 1431, "721929e": 1431, "726146e": 1431, "2900": 1431, "723602e": 1431, "731801e": 1431, "59": [1431, 1437], "2950": 1431, "725403e": 1431, "727676e": 1431, "733375e": 1431, "61": [1431, 1439], "3050": 1431, "729560e": 1431, "734243e": 1431, "3100": 1431, "731750e": 1431, "737072e": 1431, "63": [1431, 1440], "3150": 1431, "733388e": 1431, "740132e": 1431, "3200": 1431, "734659e": 1431, "741100e": 1431, "3250": 1431, "736455e": 1431, "742330e": 1431, "66": [1431, 1440], "3300": 1431, "737939e": 1431, "3350": 1431, "739554e": 1431, "743822e": 1431, "3400": 1431, "741208e": 1431, "744667e": 1431, "69": 1431, "3450": 1431, "742680e": 1431, "749338e": 1431, "3500": 1431, "743868e": 1431, "3550": 1431, "745348e": 1431, "752618e": 1431, "3600": 1431, "747172e": 1431, "753096e": 1431, "3650": 1431, "749630e": 1431, "754132e": 1431, "74": [1431, 1435, 1439, 1440], "3700": 1431, "751114e": 1431, "754900e": 1431, "3750": 1431, "752606e": 1431, "755432e": 1431, "76": 1431, "3800": 1431, "753353e": 1431, "77": [1431, 1439], "3850": 1431, "754139e": 1431, "756546e": 1431, "3900": 1431, "754952e": 1431, "758684e": 1431, "79": [1431, 1438], "3950": 1431, "755655e": 1431, "80": [1431, 1441], "756239e": 1431, "4050": 1431, "756727e": 1431, "82": 1431, "4100": 1431, "757191e": 1431, "759187e": 1431, "4150": 1431, "757659e": 1431, "759239e": 1431, "4200": 1431, "758197e": 1431, "759249e": 1431, "4250": 1431, "758685e": 1431, "760489e": 1431, "4300": 1431, "758966e": 1431, "760541e": 1431, "87": [1431, 1435, 1439], "4350": 1431, "759310e": 1431, "760952e": 1431, "4400": 1431, "759618e": 1431, "4450": 1431, "760000e": 1431, "4500": 1431, "760619e": 1431, "91": [1431, 1439], "4550": 1431, "760752e": 1431, "4600": 1431, "760853e": 1431, "761031e": 1431, "4650": 1431, "760913e": 1431, "761139e": 1431, "94": [1431, 1439], "4700": 1431, "760990e": 1431, "761421e": 1431, "4750": 1431, "761088e": 1431, "96": [1431, 1439, 1441], "4800": 1431, "761172e": 1431, "761422e": 1431, "4850": 1431, "761255e": 1431, "761639e": 1431, "4900": 1431, "761346e": 1431, "4950": 1431, "761445e": 1431, "761700e": 1431, "761554e": 1431, "761916e": 1431, "success": 1431, "28809": 1431, "580622970752": 1431, "x_0000": 1431, "073860e": 1431, "y_0000": 1431, "279369e": 1431, "x_0001": 1431, "770828e": 1431, "y_0001": 1431, "413702e": 1431, "x_0002": 1431, "983482e": 1431, "y_0002": 1431, "028799e": 1431, "x_0003": 1431, "984227e": 1431, "y_0003": 1431, "498474e": 1431, "x_0004": 1431, "978471e": 1431, "y_0004": 1431, "766128e": 1431, "x_0005": 1431, "945769e": 1431, "y_0005": 1431, "188781e": 1431, "x_0006": 1431, "937604e": 1431, "y_0006": 1431, "975710e": 1431, "x_0007": 1431, "264461e": 1431, "y_0007": 1431, "972161e": 1431, "x_0008": 1431, "992966e": 1431, "y_0008": 1431, "079237e": 1431, "x_0009": 1431, "037107e": 1431, "y_0009": 1431, "499399e": 1431, "880958e": 1431, "boundary_0000": 1431, "870192e": 1431, "boundary_0001": 1431, "boundary_0002": 1431, "651804e": 1431, "boundary_0003": 1431, "525784e": 1431, "boundary_0004": 1431, "152918e": 1431, "boundary_0005": 1431, "boundary_0006": 1431, "823600e": 1431, "boundary_0007": 1431, "644615e": 1431, "boundary_0008": 1431, "034418e": 1431, "boundary_0009": 1431, "008043e": 1431, "dist_0_1": 1431, "081471e": 1431, "dist_0_2": 1431, "690194e": 1431, "dist_0_3": 1431, "420759e": 1431, "dist_0_4": 1431, "676806e": 1431, "dist_0_5": 1431, "196825e": 1431, "dist_0_6": 1431, "152693e": 1431, "dist_0_7": 1431, "760605e": 1431, "dist_0_8": 1431, "605468e": 1431, "dist_0_9": 1431, "378635e": 1431, "dist_1_2": 1431, "863459e": 1431, "dist_1_3": 1431, "000558e": 1431, "dist_1_4": 1431, "798158e": 1431, "dist_1_5": 1431, "954174e": 1431, "dist_1_6": 1431, "702940e": 1431, "dist_1_7": 1431, "328037e": 1431, "dist_1_8": 1431, "912719e": 1431, "dist_1_9": 1431, "578084e": 1431, "dist_2_3": 1431, "176756e": 1431, "dist_2_4": 1431, "001860e": 1431, "dist_2_5": 1431, "561768e": 1431, "dist_2_6": 1431, "220564e": 1431, "dist_2_7": 1431, "209577e": 1431, "dist_2_8": 1431, "758911e": 1431, "dist_2_9": 1431, "307380e": 1431, "dist_3_4": 1431, "698615e": 1431, "dist_3_5": 1431, "905373e": 1431, "dist_3_6": 1431, "004027e": 1431, "dist_3_7": 1431, "364923e": 1431, "dist_3_8": 1431, "245567e": 1431, "dist_3_9": 1431, "427129e": 1431, "dist_4_5": 1431, "715246e": 1431, "dist_4_6": 1431, "572358e": 1431, "dist_4_7": 1431, "503152e": 1431, "dist_4_8": 1431, "237071e": 1431, "dist_4_9": 1431, "838973e": 1431, "dist_5_6": 1431, "304680e": 1431, "dist_5_7": 1431, "054494e": 1431, "dist_5_8": 1431, "298406e": 1431, "dist_5_9": 1431, "372784e": 1431, "dist_6_7": 1431, "621496e": 1431, "dist_6_8": 1431, "718892e": 1431, "dist_6_9": 1431, "553005e": 1431, "dist_7_8": 1431, "508225e": 1431, "dist_7_9": 1431, "506975e": 1431, "dist_8_9": 1431, "326316e": 1431, "210": 1431, "211": 1431, "212": 1431, "213": 1431, "215": 1431, "995": 1431, "081": 1431, "109": 1431, "5e": 1431, "607": 1431, "5771": 1431, "526": 1431, "999": 1431, "503": 1431, "741": 1431, "9079": 1431, "499e": 1431, "00013": 1431, "u2": [1431, 1437, 1438, 1439], "dpar": 1431, "zorder": 1431, "outside_whit": 1431, "anyth": 1431, "organ": 1432, "farm_pmask": 1432, "pmask": [1432, 1435, 1436], "farm_hubh_data": 1432, "hubh_data": 1432, "farm_kti": 1432, "farm_kti_02": 1432, "kti_02": [1432, 1440], "farm_kti_04": 1432, "kti_04": 1432, "farm_kti_05": 1432, "kti_05": [1432, 1441, 1442], "farm_kti_amb": 1432, "kti_amb": 1432, "farm_kti_amb_02": 1432, "kti_amb_02": 1432, "farm_kti_amb_04": 1432, "kti_amb_04": 1432, "farm_kti_amb_05": 1432, "kti_amb_05": 1432, "farm_thrust2ct": 1432, "farm_yaw2yawm": 1432, "farm_yawm2yaw": 1432, "axiwake10": 1432, "axiwake2": 1432, "axiwake20": 1432, "axiwake3": 1432, "axiwake4": 1432, "axiwake5": 1432, "axiwake6": 1432, "axiwake7": 1432, "axiwake8": 1432, "axiwake9": 1432, "distslic": 1432, "distsliced100": 1432, "distsliced16": 1432, "distsliced25": 1432, "distsliced36": 1432, "distsliced4": 1432, "distsliced400": 1432, "distsliced49": 1432, "distsliced64": 1432, "distsliced81": 1432, "distsliced9": 1432, "grid100": 1432, "grid25": 1432, "grid36": 1432, "grid4": 1432, "grid400": 1432, "grid49": 1432, "grid64": 1432, "grid81": 1432, "grid9": [1432, 1433], "top_hat": 1432, "level10": 1432, "level2": 1432, "level20": 1432, "level3": 1432, "level4": 1432, "level5": 1432, "level6": 1432, "level7": 1432, "level8": 1432, "level9": 1432, "5mw": [1432, 1436, 1438, 1440], "null_typ": 1432, "rotor_wd_farmo": 1432, "seq_dyn_wak": [1432, 1437], "seq_dyn_wakes_10min": 1432, "seq_dyn_wakes_10": 1432, "seq_dyn_wakes_1min": [1432, 1437], "seq_dyn_wakes_1": 1432, "seq_dyn_wakes_30min": 1432, "seq_dyn_wakes_30": 1432, "streamlines_1": 1432, "streamlines_10": 1432, "streamlines_100_farmo": 1432, "streamlines_100_yaw": 1432, "streamlines_10_farmo": 1432, "streamlines_10_yaw": 1432, "streamlines_1_farmo": 1432, "streamlines_1_yaw": 1432, "streamlines_5": 1432, "streamlines_50": 1432, "streamlines_500": 1432, "streamlines_500_farmo": 1432, "streamlines_500_yaw": 1432, "streamlines_50_farmo": 1432, "streamlines_50_yaw": 1432, "streamlines_5_farmo": 1432, "streamlines_5_yaw": 1432, "timelines_10min": 1432, "timelines_10": [1432, 1439], "timelines_1km": 1432, "timelines_1min": 1432, "timelines_1": 1432, "timelines_30min": 1432, "timelines_30": 1432, "bastankhah025_cub": 1432, "ws_cubic": 1432, "bastankhah025_cubic_amb": 1432, "ws_cubic_amb": 1432, "bastankhah025_cubic_amb_k002": 1432, "bastankhah025_cubic_amb_k004": 1432, "bastankhah025_cubic_k002": 1432, "bastankhah025_cubic_k004": 1432, "bastankhah025_linear": 1432, "bastankhah025_linear_amb": 1432, "ws_linear_amb": 1432, "bastankhah025_linear_amb_k002": 1432, "bastankhah025_linear_amb_k004": 1432, "bastankhah025_linear_amb_lim": 1432, "ws_linear_amb_lim": 1432, "bastankhah025_linear_amb_lim_k002": 1432, "bastankhah025_linear_amb_lim_k004": 1432, "bastankhah025_linear_k004": 1432, "bastankhah025_linear_lim": 1432, "bastankhah025_linear_lim_k002": 1432, "bastankhah025_max_amb": 1432, "ws_max_amb": 1432, "bastankhah025_max_amb_k002": 1432, "bastankhah025_max_amb_k004": 1432, "bastankhah025_product": 1432, "ws_product": 1432, "bastankhah025_product_k002": 1432, "bastankhah025_product_k004": 1432, "bastankhah025_product_lim": 1432, "ws_product_lim": 1432, "bastankhah025_product_lim_k002": 1432, "bastankhah025_product_lim_k004": 1432, "bastankhah025_quadrat": 1432, "ws_quadrat": 1432, "bastankhah025_quadratic_amb": 1432, "ws_quadratic_amb": 1432, "bastankhah025_quadratic_amb_k002": 1432, "bastankhah025_quadratic_amb_k004": 1432, "bastankhah025_quadratic_amb_lim": 1432, "ws_quadratic_amb_lim": 1432, "bastankhah025_quadratic_amb_lim_k002": 1432, "bastankhah025_quadratic_amb_lim_k004": 1432, "bastankhah025_quadratic_k002": 1432, "bastankhah025_quadratic_k004": 1432, "bastankhah025_quart": 1432, "ws_quartic": 1432, "bastankhah025_quartic_amb": 1432, "ws_quartic_amb": 1432, "bastankhah025_quartic_amb_k002": 1432, "bastankhah025_quartic_amb_k004": 1432, "bastankhah025_quartic_k002": 1432, "bastankhah025_quartic_k004": 1432, "bastankhah025_wmax": 1432, "ws_wmax": 1432, "bastankhah025_wmax_k002": 1432, "bastankhah025_wmax_k004": 1432, "bastankhah025_wquadratic_lim": 1432, "ws_wquadratic_lim": 1432, "bastankhah025_wquadratic_lim_k002": 1432, "bastankhah025_wquadratic_lim_k004": 1432, "bastankhah2014_cub": 1432, "bastankhah2014_cubic_amb": 1432, "bastankhah2014_cubic_amb_k002": 1432, "bastankhah2014_cubic_amb_k004": 1432, "bastankhah2014_cubic_k002": 1432, "bastankhah2014_cubic_k004": 1432, "bastankhah2014_linear": [1432, 1441], "bastankhah2014_linear_amb": 1432, "bastankhah2014_linear_amb_k002": 1432, "bastankhah2014_linear_amb_k004": 1432, "bastankhah2014_linear_amb_lim": 1432, "bastankhah2014_linear_amb_lim_k002": 1432, "bastankhah2014_linear_amb_lim_k004": 1432, "bastankhah2014_linear_k002": [1432, 1433, 1435, 1436], "bastankhah2014_linear_k004": [1432, 1439], "bastankhah2014_linear_lim": 1432, "bastankhah2014_linear_lim_k002": 1432, "bastankhah2014_linear_lim_k004": 1432, "bastankhah2014_max_amb": 1432, "bastankhah2014_max_amb_k002": 1432, "bastankhah2014_max_amb_k004": 1432, "bastankhah2014_product": 1432, "bastankhah2014_product_k002": 1432, "bastankhah2014_product_k004": 1432, "bastankhah2014_product_lim": 1432, "bastankhah2014_product_lim_k002": 1432, "bastankhah2014_product_lim_k004": 1432, "bastankhah2014_quadrat": [1432, 1440], "bastankhah2014_quadratic_amb": 1432, "bastankhah2014_quadratic_amb_k002": 1432, "bastankhah2014_quadratic_amb_k004": 1432, "bastankhah2014_quadratic_amb_lim": 1432, "bastankhah2014_quadratic_amb_lim_k002": 1432, "bastankhah2014_quadratic_amb_lim_k004": 1432, "bastankhah2014_quadratic_k002": 1432, "bastankhah2014_quadratic_k004": 1432, "bastankhah2014_quart": 1432, "bastankhah2014_quartic_amb": 1432, "bastankhah2014_quartic_amb_k002": 1432, "bastankhah2014_quartic_amb_k004": 1432, "bastankhah2014_quartic_k002": 1432, "bastankhah2014_quartic_k004": 1432, "bastankhah2014_wmax": 1432, "bastankhah2014_wmax_k002": 1432, "bastankhah2014_wmax_k004": 1432, "bastankhah2014_wquadratic_lim": 1432, "bastankhah2014_wquadratic_lim_k002": 1432, "bastankhah2014_wquadratic_lim_k004": 1432, "bastankhah2016_cub": 1432, "bastankhah2016_cubic_amb": 1432, "bastankhah2016_cubic_amb_k002": 1432, "bastankhah2016_cubic_amb_k004": 1432, "bastankhah2016_cubic_k002": 1432, "bastankhah2016_cubic_k004": 1432, "bastankhah2016_linear": [1432, 1442], "bastankhah2016_linear_amb": 1432, "bastankhah2016_linear_amb_k002": 1432, "bastankhah2016_linear_amb_k004": 1432, "bastankhah2016_linear_amb_lim": 1432, "bastankhah2016_linear_amb_lim_k002": 1432, "bastankhah2016_linear_amb_lim_k004": 1432, "bastankhah2016_linear_k002": 1432, "bastankhah2016_linear_k004": 1432, "bastankhah2016_linear_lim": 1432, "bastankhah2016_linear_lim_k002": 1432, "bastankhah2016_linear_lim_k004": 1432, "bastankhah2016_max_amb": 1432, "bastankhah2016_max_amb_k002": 1432, "bastankhah2016_max_amb_k004": 1432, "bastankhah2016_product": 1432, "bastankhah2016_product_k002": 1432, "bastankhah2016_product_k004": 1432, "bastankhah2016_product_lim": 1432, "bastankhah2016_product_lim_k002": 1432, "bastankhah2016_product_lim_k004": 1432, "bastankhah2016_quadrat": 1432, "bastankhah2016_quadratic_amb": 1432, "bastankhah2016_quadratic_amb_k002": 1432, "bastankhah2016_quadratic_amb_k004": 1432, "bastankhah2016_quadratic_amb_lim": 1432, "bastankhah2016_quadratic_amb_lim_k002": 1432, "bastankhah2016_quadratic_amb_lim_k004": 1432, "bastankhah2016_quadratic_k002": 1432, "bastankhah2016_quadratic_k004": 1432, "bastankhah2016_quart": 1432, "bastankhah2016_quartic_amb": 1432, "bastankhah2016_quartic_amb_k002": 1432, "bastankhah2016_quartic_amb_k004": 1432, "bastankhah2016_quartic_k002": 1432, "bastankhah2016_quartic_k004": 1432, "bastankhah2016_wmax": 1432, "bastankhah2016_wmax_k002": 1432, "bastankhah2016_wmax_k004": 1432, "bastankhah2016_wquadratic_lim": 1432, "bastankhah2016_wquadratic_lim_k002": 1432, "bastankhah2016_wquadratic_lim_k004": 1432, "crespohernandez_ambti_cub": 1432, "ti_cub": 1432, "crespohernandez_ambti_linear": 1432, "ti_linear": 1432, "crespohernandez_ambti_max": 1432, "ti_max": 1432, "crespohernandez_ambti_quadrat": 1432, "crespohernandez_ambti_quart": 1432, "ti_quart": 1432, "crespohernandez_cub": 1432, "crespohernandez_cubic_k002": 1432, "crespohernandez_linear": 1432, "crespohernandez_linear_k002": 1432, "crespohernandez_max": [1432, 1440, 1441], "crespohernandez_max_k002": 1432, "crespohernandez_quadrat": 1432, "crespohernandez_quadratic_k002": 1432, "crespohernandez_quart": 1432, "crespohernandez_quartic_k002": 1432, "iecti2005_cub": 1432, "19076020221856677": 1432, "iecti2005_linear": 1432, "iecti2005_max": 1432, "iecti2005_quadrat": 1432, "iecti2005_quart": 1432, "iecti2019_cub": 1432, "iecti2019_linear": 1432, "iecti2019_max": [1432, 1442], "iecti2019_quadrat": 1432, "iecti2019_quart": 1432, "jensen_cub": 1432, "jensen_cubic_amb": 1432, "jensen_cubic_amb_k002": 1432, "jensen_cubic_amb_k004": 1432, "jensen_cubic_amb_k007": 1432, "jensen_cubic_amb_k0075": 1432, "075": 1432, "jensen_cubic_k002": 1432, "jensen_cubic_k004": 1432, "jensen_cubic_k007": 1432, "jensen_cubic_k0075": 1432, "jensen_linear": 1432, "jensen_linear_amb": 1432, "jensen_linear_amb_k002": 1432, "jensen_linear_amb_k004": 1432, "jensen_linear_amb_k007": 1432, "jensen_linear_amb_k0075": 1432, "jensen_linear_amb_lim": 1432, "jensen_linear_amb_lim_k002": 1432, "jensen_linear_amb_lim_k004": 1432, "jensen_linear_amb_lim_k007": 1432, "jensen_linear_amb_lim_k0075": 1432, "jensen_linear_k002": 1432, "jensen_linear_k004": 1432, "jensen_linear_k0075": 1432, "jensen_linear_lim": 1432, "jensen_linear_lim_k002": 1432, "jensen_linear_lim_k004": 1432, "jensen_linear_lim_k007": 1432, "jensen_linear_lim_k0075": 1432, "jensen_max_amb": 1432, "jensen_max_amb_k002": 1432, "jensen_max_amb_k004": 1432, "jensen_max_amb_k007": 1432, "jensen_max_amb_k0075": 1432, "jensen_product": 1432, "jensen_product_k002": 1432, "jensen_product_k004": 1432, "jensen_product_k007": 1432, "jensen_product_k0075": 1432, "jensen_product_lim": 1432, "jensen_product_lim_k002": 1432, "jensen_product_lim_k004": 1432, "jensen_product_lim_k007": 1432, "jensen_product_lim_k0075": 1432, "jensen_quadrat": 1432, "jensen_quadratic_amb": 1432, "jensen_quadratic_amb_k002": 1432, "jensen_quadratic_amb_k004": 1432, "jensen_quadratic_amb_k007": 1432, "jensen_quadratic_amb_k0075": 1432, "jensen_quadratic_amb_lim": 1432, "jensen_quadratic_amb_lim_k002": 1432, "jensen_quadratic_amb_lim_k004": 1432, "jensen_quadratic_amb_lim_k007": 1432, "jensen_quadratic_amb_lim_k0075": 1432, "jensen_quadratic_k002": 1432, "jensen_quadratic_k004": 1432, "jensen_quadratic_k007": 1432, "jensen_quadratic_k0075": 1432, "jensen_quart": 1432, "jensen_quartic_amb": 1432, "jensen_quartic_amb_k002": 1432, "jensen_quartic_amb_k004": 1432, "jensen_quartic_amb_k007": 1432, "jensen_quartic_amb_k0075": 1432, "jensen_quartic_k002": 1432, "jensen_quartic_k004": 1432, "jensen_quartic_k007": 1432, "jensen_quartic_k0075": 1432, "jensen_wmax": 1432, "jensen_wmax_k002": 1432, "jensen_wmax_k004": 1432, "jensen_wmax_k007": 1432, "jensen_wmax_k0075": 1432, "jensen_wquadratic_lim": 1432, "jensen_wquadratic_lim_k002": 1432, "jensen_wquadratic_lim_k004": 1432, "jensen_wquadratic_lim_k007": 1432, "jensen_wquadratic_lim_k0075": 1432, "turboparkix_cubic_a002_dx001": 1432, "turboparkix_cubic_a002_dx1": 1432, "turboparkix_cubic_a002_dx10": 1432, "turboparkix_cubic_a002_dx100": 1432, "turboparkix_cubic_a002_dx5": 1432, "turboparkix_cubic_a002_dx50": 1432, "turboparkix_cubic_a004_dx001": 1432, "turboparkix_cubic_a004_dx1": 1432, "turboparkix_cubic_a004_dx10": 1432, "turboparkix_cubic_a004_dx100": 1432, "turboparkix_cubic_a004_dx5": 1432, "turboparkix_cubic_a004_dx50": 1432, "turboparkix_cubic_amb_a002_dx001": 1432, "turboparkix_cubic_amb_a002_dx1": 1432, "turboparkix_cubic_amb_a002_dx10": 1432, "turboparkix_cubic_amb_a002_dx100": 1432, "turboparkix_cubic_amb_a002_dx5": 1432, "turboparkix_cubic_amb_a002_dx50": 1432, "turboparkix_cubic_amb_a004_dx001": 1432, "turboparkix_cubic_amb_a004_dx1": 1432, "turboparkix_cubic_amb_a004_dx10": 1432, "turboparkix_cubic_amb_a004_dx100": 1432, "turboparkix_cubic_amb_a004_dx5": 1432, "turboparkix_cubic_amb_a004_dx50": 1432, "turboparkix_linear_a002_dx001": 1432, "turboparkix_linear_a002_dx1": 1432, "turboparkix_linear_a002_dx10": 1432, "turboparkix_linear_a002_dx100": 1432, "turboparkix_linear_a002_dx5": 1432, "turboparkix_linear_a002_dx50": 1432, "turboparkix_linear_a004_dx001": 1432, "turboparkix_linear_a004_dx1": 1432, "turboparkix_linear_a004_dx10": 1432, "turboparkix_linear_a004_dx100": 1432, "turboparkix_linear_a004_dx5": 1432, "turboparkix_linear_a004_dx50": 1432, "turboparkix_linear_amb_a002_dx001": 1432, "turboparkix_linear_amb_a002_dx1": 1432, "turboparkix_linear_amb_a002_dx10": 1432, "turboparkix_linear_amb_a002_dx100": 1432, "turboparkix_linear_amb_a002_dx5": 1432, "turboparkix_linear_amb_a002_dx50": 1432, "turboparkix_linear_amb_a004_dx001": 1432, "turboparkix_linear_amb_a004_dx1": 1432, "turboparkix_linear_amb_a004_dx10": 1432, "turboparkix_linear_amb_a004_dx100": 1432, "turboparkix_linear_amb_a004_dx5": 1432, "turboparkix_linear_amb_a004_dx50": 1432, "turboparkix_linear_amb_lim_a002_dx001": 1432, "turboparkix_linear_amb_lim_a002_dx1": 1432, "turboparkix_linear_amb_lim_a002_dx10": 1432, "turboparkix_linear_amb_lim_a002_dx100": 1432, "turboparkix_linear_amb_lim_a002_dx5": 1432, "turboparkix_linear_amb_lim_a002_dx50": 1432, "turboparkix_linear_amb_lim_a004_dx001": 1432, "turboparkix_linear_amb_lim_a004_dx1": 1432, "turboparkix_linear_amb_lim_a004_dx10": 1432, "turboparkix_linear_amb_lim_a004_dx100": 1432, "turboparkix_linear_amb_lim_a004_dx5": 1432, "turboparkix_linear_amb_lim_a004_dx50": 1432, "turboparkix_linear_lim_a002_dx001": 1432, "turboparkix_linear_lim_a002_dx1": 1432, "turboparkix_linear_lim_a002_dx10": 1432, "turboparkix_linear_lim_a002_dx100": 1432, "turboparkix_linear_lim_a002_dx5": 1432, "turboparkix_linear_lim_a002_dx50": 1432, "turboparkix_linear_lim_a004_dx001": 1432, "turboparkix_linear_lim_a004_dx1": 1432, "turboparkix_linear_lim_a004_dx10": 1432, "turboparkix_linear_lim_a004_dx100": 1432, "turboparkix_linear_lim_a004_dx5": 1432, "turboparkix_linear_lim_a004_dx50": 1432, "turboparkix_max_amb_a002_dx001": 1432, "turboparkix_max_amb_a002_dx1": 1432, "turboparkix_max_amb_a002_dx10": 1432, "turboparkix_max_amb_a002_dx100": 1432, "turboparkix_max_amb_a002_dx5": 1432, "turboparkix_max_amb_a002_dx50": 1432, "turboparkix_max_amb_a004_dx001": 1432, "turboparkix_max_amb_a004_dx1": 1432, "turboparkix_max_amb_a004_dx10": 1432, "turboparkix_max_amb_a004_dx100": 1432, "turboparkix_max_amb_a004_dx5": 1432, "turboparkix_max_amb_a004_dx50": 1432, "turboparkix_product_a002_dx001": 1432, "turboparkix_product_a002_dx1": 1432, "turboparkix_product_a002_dx10": 1432, "turboparkix_product_a002_dx100": 1432, "turboparkix_product_a002_dx5": 1432, "turboparkix_product_a002_dx50": 1432, "turboparkix_product_a004_dx001": 1432, "turboparkix_product_a004_dx1": 1432, "turboparkix_product_a004_dx10": 1432, "turboparkix_product_a004_dx100": 1432, "turboparkix_product_a004_dx5": 1432, "turboparkix_product_a004_dx50": 1432, "turboparkix_product_lim_a002_dx001": 1432, "turboparkix_product_lim_a002_dx1": 1432, "turboparkix_product_lim_a002_dx10": 1432, "turboparkix_product_lim_a002_dx100": 1432, "turboparkix_product_lim_a002_dx5": 1432, "turboparkix_product_lim_a002_dx50": 1432, "turboparkix_product_lim_a004_dx001": 1432, "turboparkix_product_lim_a004_dx1": 1432, "turboparkix_product_lim_a004_dx10": 1432, "turboparkix_product_lim_a004_dx100": 1432, "turboparkix_product_lim_a004_dx5": 1432, "turboparkix_product_lim_a004_dx50": 1432, "turboparkix_quadratic_a002_dx001": 1432, "turboparkix_quadratic_a002_dx1": 1432, "turboparkix_quadratic_a002_dx10": 1432, "turboparkix_quadratic_a002_dx100": 1432, "turboparkix_quadratic_a002_dx5": 1432, "turboparkix_quadratic_a002_dx50": 1432, "turboparkix_quadratic_a004_dx001": 1432, "turboparkix_quadratic_a004_dx1": 1432, "turboparkix_quadratic_a004_dx10": 1432, "turboparkix_quadratic_a004_dx100": 1432, "turboparkix_quadratic_a004_dx5": 1432, "turboparkix_quadratic_a004_dx50": 1432, "turboparkix_quadratic_amb_a002_dx001": 1432, "turboparkix_quadratic_amb_a002_dx1": 1432, "turboparkix_quadratic_amb_a002_dx10": 1432, "turboparkix_quadratic_amb_a002_dx100": 1432, "turboparkix_quadratic_amb_a002_dx5": 1432, "turboparkix_quadratic_amb_a002_dx50": 1432, "turboparkix_quadratic_amb_a004_dx001": 1432, "turboparkix_quadratic_amb_a004_dx1": 1432, "turboparkix_quadratic_amb_a004_dx10": 1432, "turboparkix_quadratic_amb_a004_dx100": 1432, "turboparkix_quadratic_amb_a004_dx5": 1432, "turboparkix_quadratic_amb_a004_dx50": 1432, "turboparkix_quadratic_amb_lim_a002_dx001": 1432, "turboparkix_quadratic_amb_lim_a002_dx1": 1432, "turboparkix_quadratic_amb_lim_a002_dx10": 1432, "turboparkix_quadratic_amb_lim_a002_dx100": 1432, "turboparkix_quadratic_amb_lim_a002_dx5": 1432, "turboparkix_quadratic_amb_lim_a002_dx50": 1432, "turboparkix_quadratic_amb_lim_a004_dx001": 1432, "turboparkix_quadratic_amb_lim_a004_dx1": 1432, "turboparkix_quadratic_amb_lim_a004_dx10": 1432, "turboparkix_quadratic_amb_lim_a004_dx100": 1432, "turboparkix_quadratic_amb_lim_a004_dx5": 1432, "turboparkix_quadratic_amb_lim_a004_dx50": 1432, "turboparkix_quartic_a002_dx001": 1432, "turboparkix_quartic_a002_dx1": 1432, "turboparkix_quartic_a002_dx10": 1432, "turboparkix_quartic_a002_dx100": 1432, "turboparkix_quartic_a002_dx5": 1432, "turboparkix_quartic_a002_dx50": 1432, "turboparkix_quartic_a004_dx001": 1432, "turboparkix_quartic_a004_dx1": 1432, "turboparkix_quartic_a004_dx10": 1432, "turboparkix_quartic_a004_dx100": 1432, "turboparkix_quartic_a004_dx5": 1432, "turboparkix_quartic_a004_dx50": 1432, "turboparkix_quartic_amb_a002_dx001": 1432, "turboparkix_quartic_amb_a002_dx1": 1432, "turboparkix_quartic_amb_a002_dx10": 1432, "turboparkix_quartic_amb_a002_dx100": 1432, "turboparkix_quartic_amb_a002_dx5": 1432, "turboparkix_quartic_amb_a002_dx50": 1432, "turboparkix_quartic_amb_a004_dx001": 1432, "turboparkix_quartic_amb_a004_dx1": 1432, "turboparkix_quartic_amb_a004_dx10": 1432, "turboparkix_quartic_amb_a004_dx100": 1432, "turboparkix_quartic_amb_a004_dx5": 1432, "turboparkix_quartic_amb_a004_dx50": 1432, "turboparkix_wmax_a002_dx001": 1432, "turboparkix_wmax_a002_dx1": 1432, "turboparkix_wmax_a002_dx10": 1432, "turboparkix_wmax_a002_dx100": 1432, "turboparkix_wmax_a002_dx5": 1432, "turboparkix_wmax_a002_dx50": 1432, "turboparkix_wmax_a004_dx001": 1432, "turboparkix_wmax_a004_dx1": 1432, "turboparkix_wmax_a004_dx10": 1432, "turboparkix_wmax_a004_dx100": 1432, "turboparkix_wmax_a004_dx5": 1432, "turboparkix_wmax_a004_dx50": 1432, "turboparkix_wquadratic_lim_a002_dx001": 1432, "turboparkix_wquadratic_lim_a002_dx1": 1432, "turboparkix_wquadratic_lim_a002_dx10": 1432, "turboparkix_wquadratic_lim_a002_dx100": 1432, "turboparkix_wquadratic_lim_a002_dx5": 1432, "turboparkix_wquadratic_lim_a002_dx50": 1432, "turboparkix_wquadratic_lim_a004_dx001": 1432, "turboparkix_wquadratic_lim_a004_dx1": 1432, "turboparkix_wquadratic_lim_a004_dx10": 1432, "turboparkix_wquadratic_lim_a004_dx100": 1432, "turboparkix_wquadratic_lim_a004_dx5": 1432, "turboparkix_wquadratic_lim_a004_dx50": 1432, "turbopark_cubic_a002": 1432, "turbopark_cubic_a004": 1432, "turbopark_cubic_amb_a002": 1432, "turbopark_cubic_amb_a004": 1432, "turbopark_linear_a002": 1432, "turbopark_linear_a004": 1432, "turbopark_linear_amb_a002": 1432, "turbopark_linear_amb_a004": 1432, "turbopark_linear_amb_lim_a002": 1432, "turbopark_linear_amb_lim_a004": 1432, "turbopark_linear_lim_a002": 1432, "turbopark_linear_lim_a004": 1432, "turbopark_max_amb_a002": 1432, "turbopark_max_amb_a004": 1432, "turbopark_product_a002": 1432, "turbopark_product_a004": 1432, "turbopark_product_lim_a002": 1432, "turbopark_product_lim_a004": 1432, "turbopark_quadratic_a002": 1432, "turbopark_quadratic_a004": 1432, "turbopark_quadratic_amb_a002": 1432, "turbopark_quadratic_amb_a004": 1432, "turbopark_quadratic_amb_lim_a002": 1432, "turbopark_quadratic_amb_lim_a004": 1432, "turbopark_quartic_a002": 1432, "turbopark_quartic_a004": 1432, "turbopark_quartic_amb_a002": 1432, "turbopark_quartic_amb_a004": 1432, "turbopark_wmax_a002": 1432, "turbopark_wmax_a004": 1432, "turbopark_wquadratic_lim_a002": 1432, "turbopark_wquadratic_lim_a004": 1432, "ws_quadratic_lim": 1432, "my_jensen": 1432, "042": 1432, "jensenwake80": 1432, "similarli": [1432, 1435, 1442], "section": [1432, 1434, 1438, 1440, 1442], "explor": 1433, "download": 1433, "newa": 1433, "websit": 1433, "4464": [1433, 1435], "stamp": [1433, 1437], "mark": 1433, "month": 1433, "kinet": [1433, 1434], "assumpt": 1433, "variat": 1433, "neglect": 1433, "inflow": [1433, 1440], "manual": 1433, "alreadi": [1433, 1438], "howev": [1433, 1442], "neither": [1433, 1435], "goal": [1433, 1437], "certain": 1433, "approxim": 1433, "west": [1433, 1436, 1442], "undo": 1433, "earlier": 1433, "p0": [1433, 1435, 1440, 1441], "nfarm": [1433, 1435, 1437, 1438, 1439, 1440, 1441, 1442], "1f": [1433, 1435, 1440, 1441], "2f": [1433, 1435, 1439, 1440, 1441], "340": [1433, 1436], "14377": 1433, "593022": 1433, "1533": 1433, "584614": 1433, "83636": 1433, "672190": 1433, "1039": 1433, "844007": 1433, "750745": 1433, "1075": 1433, "161838": 1433, "898703": 1433, "1141": 1433, "683205": 1433, "343279": 1433, "1387": 1433, "672955": 1433, "532676": 1433, "4041": 1433, "896723": 1433, "22320": 1433, "131": 1433, "reflect": [1434, 1437, 1439, 1442], "script": 1434, "arbitrari": 1434, "becom": 1434, "reli": 1434, "averag": 1434, "stem": 1434, "henc": [1434, 1435, 1436, 1440], "approach": 1434, "might": 1434, "sdata": [1435, 1442], "exce": 1435, "nor": 1435, "pmax_": 1435, "s_": 1435, "pmax_4": 1435, "6000": [1435, 1436], "pmax_2": 1435, "pmax_0": 1435, "pmax_1": 1435, "pmax_3": 1435, "set_pmax": 1435, "thought": 1435, "sinc": [1435, 1439], "od": 1435, "somewher": 1435, "present": 1435, "o1": 1435, "000000": [1435, 1438, 1439, 1440, 1442], "830010": 1435, "403": 1435, "154": 1435, "377407": 1435, "149326": 1435, "987506": 1435, "814191": 1435, "437975": 1435, "590109": 1435, "1771": 1435, "110155": 1435, "440": 1435, "658832": 1435, "466999": 1435, "283": 1435, "335076": 1435, "320664": 1435, "234089": 1435, "212382": 1435, "740771": 1435, "4562": 1435, "500000": 1435, "049426": 1435, "1216": 1435, "059571": 1435, "028458": 1435, "394930": 1435, "559925": 1435, "590": 1435, "746979": 1435, "316408": 1435, "509": 1435, "485334": 1435, "693049": 1435, "837624": 1435, "911961": 1435, "415358": 1435, "908491": 1435, "171406": 1435, "431733": 1435, "220626": 1435, "527084": 1435, "363776": 1435, "834572": 1435, "711049": 1435, "285935": 1435, "467288": 1435, "048229": 1435, "959726": 1435, "641242": 1435, "709782": 1435, "467871": 1435, "405920": 1435, "211075": 1435, "re": [1435, 1439], "o0": 1435, "edgecolor": 1435, "white": 1435, "ylorrd": 1435, "nanmax": 1435, "ylgn": 1435, "produc": [1435, 1440], "persu": 1436, "east": 1436, "wd_min": 1436, "wd_max": 1436, "170": 1436, "191": 1436, "290": 1436, "110": 1436, "correspons": 1436, "fulfil": 1436, "ttype": 1436, "nrel": [1436, 1438, 1440], "d126": [1436, 1438, 1440], "h90": [1436, 1438, 1440], "sector_rul": 1436, "rews_min": 1436, "rews_max": 1436, "wa": [1436, 1439], "5001": 1436, "high": 1436, "benefit": 1437, "coupl": 1437, "obvious": 1437, "much": 1437, "slower": 1437, "On": 1437, "advantag": 1437, "parcel": 1437, "rcparam": [1437, 1439], "jshtml": [1437, 1439], "timeseries_3000": 1437, "230": 1437, "280": 1437, "sake": 1437, "drama": 1437, "1min": 1437, "realist": 1437, "With": 1437, "achiev": 1437, "anigen": 1437, "008": 1437, "111": 1437, "02d": 1437, "interv": 1437, "lo": 1437, "sequential_calc": 1437, "timeseries_data": [1437, 1439], "timeseries_var": [1437, 1439], "10t05": 1437, "000000000": 1437, "10t06": 1437, "10t07": 1437, "10t08": 1437, "10t09": 1437, "10t10": 1437, "10t11": 1437, "10t12": 1437, "10t13": 1437, "10t14": 1437, "10t15": 1437, "10t16": 1437, "10t17": 1437, "10t18": 1437, "10t19": 1437, "10t20": 1437, "10t21": 1437, "10t22": 1437, "10t23": 1437, "11t00": 1437, "11t01": 1437, "11t02": 1437, "11t03": 1437, "11t04": 1437, "11t05": 1437, "11t06": 1437, "11t07": 1437, "11t08": 1437, "11t09": 1437, "11t10": 1437, "11t11": 1437, "11t12": 1437, "11t13": 1437, "11t14": 1437, "11t15": 1437, "11t16": 1437, "11t17": 1437, "11t18": 1437, "11t19": 1437, "11t20": 1437, "11t21": 1437, "11t22": 1437, "11t23": 1437, "12t00": 1437, "12t01": 1437, "12t02": 1437, "12t03": 1437, "12t04": 1437, "12t05": 1437, "12t06": 1437, "477e": 1437, "6e": [1437, 1438], "summari": 1438, "skip": 1438, "ask": 1438, "519e": 1438, "2e": 1438, "easili": 1438, "2518": 1438, "600000": 1438, "790000": 1438, "633459": 1438, "1557": 1438, "076947": 1438, "803665": 1438, "176627": 1438, "1290": 1438, "332498": 1438, "808234": 1438, "955794": 1438, "1167": 1438, "325199": 1438, "812210": 1438, "821354": 1438, "1106": 1438, "880886": 1438, "818932": 1438, "15000": 1438, "npoint": 1438, "916": 1438, "principl": 1439, "backward": 1439, "trajectori": 1439, "hit": [1439, 1442], "fall": 1439, "cross": [1439, 1442], "commun": 1439, "inlcud": 1439, "07t12": 1439, "433e": 1439, "661e": 1439, "307e": 1439, "154e": 1439, "077e": 1439, "168": 1439, "038e": 1439, "192e": 1439, "596e": 1439, "298e": 1439, "490e": 1439, "245e": 1439, "622e": 1439, "112e": 1439, "behaviour": 1439, "farm_df": [1439, 1442], "1532": 1439, "700000": [1439, 1440], "836878": 1439, "714": 1439, "456232": 1439, "492870": 1439, "535": 1439, "950095": 1439, "gridspec_kw": 1439, "height_ratio": 1439, "anom": 1439, "panel": 1439, "013": 1439, "left": 1439, "fun": [1439, 1440], "partialaxiwake12": 1439, "setxyhd1": 1439, "setxyhd1_t2f": 1439, "calc_yaw_centrerotor2": 1439, "calcorder1": 1439, "setambfarmresults1": 1439, "urelax13_ct": 1439, "farmwakescalculation13": 1439, "203": 1439, "105": 1439, "desir": [1440, 1442], "timeseries_8000": 1440, "test_farm_67": 1440, "further": 1440, "bastankhah_quadrat": 1440, "alwai": 1440, "08": 1440, "610430": 1440, "037491": 1440, "023759": 1440, "560745": 1440, "570882": 1440, "299": 1440, "289612": 1440, "4868": 1440, "1356": 1440, "304229": 1440, "493032": 1440, "4778": 1440, "201384": 1440, "750000": 1440, "644560": 1440, "4844": 1440, "495115": 1440, "471659": 1440, "2957": 1440, "148794": 1440, "536000": 1440, "turbine_result": 1440, "nresult": 1440, "3067": 1440, "723397": 1440, "2728": 1440, "991919": 1440, "613545": 1440, "545798": 1440, "808868": 1440, "873257": 1440, "2398": 1440, "311835": 1440, "479662": 1440, "670987": 1440, "2596": 1440, "445954": 1440, "519289": 1440, "745148": 1440, "2667": 1440, "532914": 1440, "533507": 1440, "781630": 1440, "2484": 1440, "022894": 1440, "496805": 1440, "702529": 1440, "2515": 1440, "222829": 1440, "503045": 1440, "712086": 1440, "2460": 1440, "983189": 1440, "492197": 1440, "686209": 1440, "2817": 1440, "961461": 1440, "563592": 1440, "847236": 1440, "2438": 1440, "698886": 1440, "487740": 1440, "682123": 1440, "2543": 1440, "360076": 1440, "508672": 1440, "725121": 1440, "905969": 1440, "009212": 1440, "744867": 1440, "367588": 1440, "760041": 1440, "033352": 1440, "558213": 1440, "685342": 1440, "363002": 1440, "279834": 1440, "171": 1440, "205": 1440, "seen": 1440, "mean_eff": [1440, 1441], "faster": 1440, "overhead": 1440, "But": 1440, "extrem": 1440, "realli": 1440, "dai": 1440, "nmean": 1440, "launch": 1440, "localclust": 1440, "d62bdaad": 1440, "tcp": 1440, "40257": 1440, "gib": 1440, "dashboard": 1440, "8787": 1440, "statu": 1440, "shut": 1440, "runtim": 1440, "localhost": 1440, "plenti": 1440, "bastankhah_linear": 1441, "relat": 1441, "204": 1441, "683": 1441, "perfectli": 1441, "fine": 1441, "port": 1442, "aim": 1442, "set_yawm": 1442, "want": 1442, "sensit": 1442, "porteagel_linear": 1442, "continu": 1442, "frontal": 1442, "146549": 1442, "042770": 1442, "240": 1442, "corect": 1442, "p_": 1442, "crespohernandez": 1442, "even": 1442, "though": 1442}, "objects": {"foxes.algorithms": [[0, 0, 1, "", "Downwind", "The downwind algorithm."], [9, 0, 1, "", "Iterative", "Iterative calculation of farm data."], [16, 0, 1, "", "Sequential", "A sequential calculation of states without chunking."]], "foxes.algorithms.Downwind": [[1, 1, 1, "", "__init__", "Constructor."], [2, 1, 1, "", "all_models", "Return all models"], [3, 1, 1, "", "calc_farm", "Calculate farm data."], [4, 1, 1, "", "calc_points", "Calculate data at a given set of points."], [5, 1, 1, "", "finalize", "Finalizes the algorithm."], [6, 1, 1, "", "get_model", "Get the algorithm specific model"], [7, 1, 1, "", "init_states", "Initialize states, if needed."], [8, 1, 1, "", "initialize", "Initializes the algorithm."]], "foxes.algorithms.Iterative": [[10, 1, 1, "", "__init__", "Constructor."], [11, 1, 1, "", "calc_farm", "Calculate farm data."], [12, 1, 1, "", "get_model", "Get the algorithm specific model"], [13, 2, 1, "", "iterations", "The current iteration number"], [14, 1, 1, "", "set_urelax", "Sets under-relaxation parameters."], [15, 2, 1, "", "urelax", "Returns the under-relaxation parameters"]], "foxes.algorithms.Sequential": [[17, 1, 1, "", "__init__", "Constructor."], [18, 1, 1, "", "__iter__", "Initialize the iterator"], [19, 1, 1, "", "__next__", "Run calculation for current step, then iterate to next"], [20, 1, 1, "", "calc_farm", "Calculate farm data."], [21, 1, 1, "", "calc_points", "Calculate data at a given set of points."], [22, 2, 1, "", "counter", "The current index counter"], [23, 2, 1, "", "cur_farm_results", "The current farm results"], [24, 2, 1, "", "cur_point_results", "The current point results"], [25, 2, 1, "", "farm_results", "The overall farm results"], [26, 2, 1, "", "fdata", "Get the current farm data"], [27, 1, 1, "", "get_model", "Get the algorithm specific model"], [28, 2, 1, "", "index", "The current index"], [29, 2, 1, "", "iterating", "Flag for running iteration"], [30, 2, 1, "", "mdata", "Get the current model data"], [31, 2, 1, "", "pdata", "Get the current point data"], [32, 2, 1, "", "point_results", "The overall point results"], [33, 2, 1, "", "size", "The total number of iteration steps"], [34, 2, 1, "", "weight", "The current weight array"]], "foxes.algorithms.downwind.models": [[35, 0, 1, "", "CalcOrder", "This model calculates the turbine evaluation order, via wake frames."], [40, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."], [46, 0, 1, "", "PointWakesCalculation", "This model calculates wake effects at points of interest."], [53, 0, 1, "", "SetAmbFarmResults", "This model copies farm data results to ambient results."], [57, 0, 1, "", "SetAmbPointResults", "This model copies point results to ambient results."]], "foxes.algorithms.downwind.models.CalcOrder": [[36, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [37, 1, 1, "", "initialize", "Initializes the model."], [38, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [39, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.algorithms.downwind.models.FarmWakesCalculation": [[41, 1, 1, "", "__init__", "Constructor."], [42, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [43, 1, 1, "", "initialize", "Initializes the model."], [44, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [45, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.algorithms.downwind.models.PointWakesCalculation": [[47, 1, 1, "", "__init__", "Constructor."], [48, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [49, 1, 1, "", "contribute_to_wake_deltas", "Contribute to wake deltas from source turbines"], [50, 1, 1, "", "initialize", "Initializes the model."], [51, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [52, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.algorithms.downwind.models.SetAmbFarmResults": [[54, 1, 1, "", "__init__", "Constructor."], [55, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [56, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.SetAmbPointResults": [[58, 1, 1, "", "__init__", "Constructor."], [59, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [60, 1, 1, "", "initialize", "Initializes the model."], [61, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.algorithms.iterative": [[62, 0, 1, "", "ConvCrit", "Abstract base class for convergence criteria"], [66, 0, 1, "", "ConvCritList", "A list of convergence criteria"], [71, 0, 1, "", "ConvVarDelta", "Requires convergence of a selection of variables."], [75, 0, 1, "", "DefaultConv", "Default convergence criteria."]], "foxes.algorithms.iterative.ConvCrit": [[63, 1, 1, "", "__init__", "Constructor."], [64, 1, 1, "", "check_converged", "Check convergence criteria."], [65, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvCritList": [[67, 1, 1, "", "__init__", "Constructor."], [68, 1, 1, "", "add_crit", "Add a convergence criterion"], [69, 1, 1, "", "check_converged", "Check convergence criteria."], [70, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvVarDelta": [[72, 1, 1, "", "__init__", "Constructor."], [73, 1, 1, "", "check_converged", "Check convergence criteria."], [74, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.DefaultConv": [[76, 1, 1, "", "__init__", "Constructor."]], "foxes.algorithms.iterative.models": [[77, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."], [83, 0, 1, "", "URelax", "Apply under-relaxation to selected variables during iterations."]], "foxes.algorithms.iterative.models.FarmWakesCalculation": [[78, 1, 1, "", "__init__", "Constructor."], [79, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [80, 1, 1, "", "initialize", "Initializes the model."], [81, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [82, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.algorithms.iterative.models.URelax": [[84, 1, 1, "", "__init__", "Constructor."], [85, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [86, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.sequential": [[87, 0, 1, "", "SequentialPlugin", "Base class for plugins that are updated with each sequential iteration"]], "foxes.algorithms.sequential.SequentialPlugin": [[88, 1, 1, "", "__init__", "Constructor."], [89, 1, 1, "", "finalize", "Finalize data based on the final iterator"], [90, 1, 1, "", "initialize", "Initialize data based on the intial iterator"], [91, 1, 1, "", "update", "Updates data based on current iteration"]], "foxes.algorithms.sequential.models": [[92, 0, 1, "", "SeqState", "A single state during sequential iteration, just serving as a structural placeholder"]], "foxes.algorithms.sequential.models.SeqState": [[93, 1, 1, "", "__init__", "Constructor."], [94, 1, 1, "", "calculate", "The main model calculation."], [95, 2, 1, "", "counter", "The current index counter"], [96, 1, 1, "", "index", "The index list"], [97, 1, 1, "", "initialize", "Initializes the model."], [98, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [99, 1, 1, "", "size", "The total number of states."], [100, 1, 1, "", "sub_models", "List of all sub-models"], [101, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.constants": [[245, 3, 1, "", "AMB_RPOINT_RESULTS", "Identified for ambient rotor point results"], [246, 4, 1, "", "DTYPE", "Default data type for floats"], [369, 3, 1, "", "FARM", "Wind farm identifier"], [370, 3, 1, "", "GW", "The unit giga watt"], [371, 4, 1, "", "ITYPE", "Default data type for int"], [421, 3, 1, "", "KAPPA", "The Van-Karman constant"], [422, 3, 1, "", "MW", "The unit mega watt"], [423, 3, 1, "", "POINT", "Point identifier"], [424, 3, 1, "", "POINTS", "Points identifier"], [425, 3, 1, "", "POP", "Population identifier"], [426, 3, 1, "", "P_UNITS", "Power unit factors relative to watts, key: unit str, value: factor"], [427, 3, 1, "", "RPOINT", "Rotor point identifier"], [428, 3, 1, "", "RPOINTS", "Rotor points identifier"], [429, 3, 1, "", "RWEIGHTS", "Rotor point weights identifier"], [430, 3, 1, "", "STATE", "States identifier"], [431, 3, 1, "", "STATES_SEL", "Identifier for states selection"], [432, 3, 1, "", "STATE_POINT", "Identifier for state-point dimensions"], [433, 3, 1, "", "STATE_SOURCE_TURBINE", "Identifier for the source turbines per state"], [434, 3, 1, "", "STATE_TURBINE", "Identifier for state-turbine dimensions"], [435, 3, 1, "", "TMODELS", "Turbine models identifier"], [436, 3, 1, "", "TMODEL_SELS", "Selected turbine models identifier"], [437, 3, 1, "", "TNAME", "Wind turbine name identifier"], [438, 3, 1, "", "TURBINE", "Wind turbine identifier"], [439, 3, 1, "", "TW", "The unit terra watt"], [440, 3, 1, "", "VALID", "Validity identifier"], [441, 3, 1, "", "VARS", "Variables identifier"], [442, 3, 1, "", "W", "The unit watt"], [443, 3, 1, "", "XYH", "The vector (x, y, height)"], [444, 3, 1, "", "kW", "The unit kilo watt"]], "foxes.constants.DTYPE": [[247, 4, 1, "", "T", "Scalar attribute identical to the corresponding array attribute."], [248, 1, 1, "", "__abs__", "abs(self)"], [249, 1, 1, "", "__add__", "Return self+value."], [250, 1, 1, "", "__and__", "Return self&value."], [251, 1, 1, "", "__array__", "sc.__array__(dtype) return 0-dim array from scalar with specified dtype"], [252, 4, 1, "", "__array_interface__", "Array protocol: Python side"], [253, 4, 1, "", "__array_priority__", "Array priority."], [254, 4, 1, "", "__array_struct__", "Array protocol: struct"], [255, 1, 1, "", "__array_wrap__", "sc.__array_wrap__(obj) return scalar from array"], [256, 1, 1, "", "__bool__", "self != 0"], [257, 1, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [258, 1, 1, "", "__divmod__", "Return divmod(self, value)."], [259, 1, 1, "", "__eq__", "Return self==value."], [260, 1, 1, "", "__float__", "float(self)"], [261, 1, 1, "", "__floordiv__", "Return self//value."], [262, 1, 1, "", "__format__", "NumPy array scalar formatter"], [263, 1, 1, "", "__ge__", "Return self>=value."], [264, 1, 1, "", "__getitem__", "Return self[key]."], [265, 1, 1, "", "__gt__", "Return self>value."], [266, 1, 1, "", "__hash__", "Return hash(self)."], [267, 1, 1, "", "__int__", "int(self)"], [268, 1, 1, "", "__invert__", "~self"], [269, 1, 1, "", "__le__", "Return self<=value."], [270, 1, 1, "", "__lshift__", "Return self<<value."], [271, 1, 1, "", "__lt__", "Return self<value."], [272, 1, 1, "", "__mod__", "Return self%value."], [273, 1, 1, "", "__mul__", "Return self*value."], [274, 1, 1, "", "__ne__", "Return self!=value."], [275, 1, 1, "", "__neg__", "-self"], [276, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [277, 1, 1, "", "__or__", "Return self|value."], [278, 1, 1, "", "__pos__", "+self"], [279, 1, 1, "", "__pow__", "Return pow(self, value, mod)."], [280, 1, 1, "", "__radd__", "Return value+self."], [281, 1, 1, "", "__rand__", "Return value&self."], [282, 1, 1, "", "__rdivmod__", "Return divmod(value, self)."], [283, 1, 1, "", "__reduce__", "Helper for pickle."], [284, 1, 1, "", "__repr__", "Return repr(self)."], [285, 1, 1, "", "__rfloordiv__", "Return value//self."], [286, 1, 1, "", "__rlshift__", "Return value<<self."], [287, 1, 1, "", "__rmod__", "Return value%self."], [288, 1, 1, "", "__rmul__", "Return value*self."], [289, 1, 1, "", "__ror__", "Return value|self."], [290, 1, 1, "", "__rpow__", "Return pow(value, self, mod)."], [291, 1, 1, "", "__rrshift__", "Return value>>self."], [292, 1, 1, "", "__rshift__", "Return self>>value."], [293, 1, 1, "", "__rsub__", "Return value-self."], [294, 1, 1, "", "__rtruediv__", "Return value/self."], [295, 1, 1, "", "__rxor__", "Return value^self."], [296, 1, 1, "", "__sizeof__", "Size of object in memory, in bytes."], [297, 1, 1, "", "__str__", "Return str(self)."], [298, 1, 1, "", "__sub__", "Return self-value."], [299, 1, 1, "", "__truediv__", "Return self/value."], [300, 1, 1, "", "__xor__", "Return self^value."], [301, 1, 1, "", "all", "Scalar method identical to the corresponding array attribute."], [302, 1, 1, "", "any", "Scalar method identical to the corresponding array attribute."], [303, 1, 1, "", "argmax", "Scalar method identical to the corresponding array attribute."], [304, 1, 1, "", "argmin", "Scalar method identical to the corresponding array attribute."], [305, 1, 1, "", "argsort", "Scalar method identical to the corresponding array attribute."], [306, 1, 1, "", "as_integer_ratio", "Return a pair of integers, whose ratio is exactly equal to the original floating point number, and with a positive denominator. Raise OverflowError on infinities and a ValueError on NaNs."], [307, 1, 1, "", "astype", "Scalar method identical to the corresponding array attribute."], [308, 4, 1, "", "base", "Scalar attribute identical to the corresponding array attribute."], [309, 1, 1, "", "byteswap", "Scalar method identical to the corresponding array attribute."], [310, 1, 1, "", "choose", "Scalar method identical to the corresponding array attribute."], [311, 1, 1, "", "clip", "Scalar method identical to the corresponding array attribute."], [312, 1, 1, "", "compress", "Scalar method identical to the corresponding array attribute."], [313, 1, 1, "", "conj", ""], [314, 1, 1, "", "conjugate", "Scalar method identical to the corresponding array attribute."], [315, 1, 1, "", "copy", "Scalar method identical to the corresponding array attribute."], [316, 1, 1, "", "cumprod", "Scalar method identical to the corresponding array attribute."], [317, 1, 1, "", "cumsum", "Scalar method identical to the corresponding array attribute."], [318, 4, 1, "", "data", "Pointer to start of data."], [319, 1, 1, "", "diagonal", "Scalar method identical to the corresponding array attribute."], [320, 4, 1, "", "dtype", "Get array data-descriptor."], [321, 1, 1, "", "dump", "Scalar method identical to the corresponding array attribute."], [322, 1, 1, "", "dumps", "Scalar method identical to the corresponding array attribute."], [323, 1, 1, "", "fill", "Scalar method identical to the corresponding array attribute."], [324, 4, 1, "", "flags", "The integer value of flags."], [325, 4, 1, "", "flat", "A 1-D view of the scalar."], [326, 1, 1, "", "flatten", "Scalar method identical to the corresponding array attribute."], [327, 1, 1, "", "getfield", "Scalar method identical to the corresponding array attribute."], [328, 4, 1, "", "imag", "The imaginary part of the scalar."], [329, 1, 1, "", "is_integer", "Return True if the floating point number is finite with integral value, and False otherwise."], [330, 1, 1, "", "item", "Scalar method identical to the corresponding array attribute."], [331, 1, 1, "", "itemset", "Scalar method identical to the corresponding array attribute."], [332, 4, 1, "", "itemsize", "The length of one element in bytes."], [333, 1, 1, "", "max", "Scalar method identical to the corresponding array attribute."], [334, 1, 1, "", "mean", "Scalar method identical to the corresponding array attribute."], [335, 1, 1, "", "min", "Scalar method identical to the corresponding array attribute."], [336, 4, 1, "", "nbytes", "The length of the scalar in bytes."], [337, 4, 1, "", "ndim", "The number of array dimensions."], [338, 1, 1, "", "newbyteorder", "Return a new dtype with a different byte order."], [339, 1, 1, "", "nonzero", "Scalar method identical to the corresponding array attribute."], [340, 1, 1, "", "prod", "Scalar method identical to the corresponding array attribute."], [341, 1, 1, "", "ptp", "Scalar method identical to the corresponding array attribute."], [342, 1, 1, "", "put", "Scalar method identical to the corresponding array attribute."], [343, 1, 1, "", "ravel", "Scalar method identical to the corresponding array attribute."], [344, 4, 1, "", "real", "The real part of the scalar."], [345, 1, 1, "", "repeat", "Scalar method identical to the corresponding array attribute."], [346, 1, 1, "", "reshape", "Scalar method identical to the corresponding array attribute."], [347, 1, 1, "", "resize", "Scalar method identical to the corresponding array attribute."], [348, 1, 1, "", "round", "Scalar method identical to the corresponding array attribute."], [349, 1, 1, "", "searchsorted", "Scalar method identical to the corresponding array attribute."], [350, 1, 1, "", "setfield", "Scalar method identical to the corresponding array attribute."], [351, 1, 1, "", "setflags", "Scalar method identical to the corresponding array attribute."], [352, 4, 1, "", "shape", "Tuple of array dimensions."], [353, 4, 1, "", "size", "The number of elements in the gentype."], [354, 1, 1, "", "sort", "Scalar method identical to the corresponding array attribute."], [355, 1, 1, "", "squeeze", "Scalar method identical to the corresponding array attribute."], [356, 1, 1, "", "std", "Scalar method identical to the corresponding array attribute."], [357, 4, 1, "", "strides", "Tuple of bytes steps in each dimension."], [358, 1, 1, "", "sum", "Scalar method identical to the corresponding array attribute."], [359, 1, 1, "", "swapaxes", "Scalar method identical to the corresponding array attribute."], [360, 1, 1, "", "take", "Scalar method identical to the corresponding array attribute."], [361, 1, 1, "", "tobytes", ""], [362, 1, 1, "", "tofile", "Scalar method identical to the corresponding array attribute."], [363, 1, 1, "", "tolist", "Scalar method identical to the corresponding array attribute."], [364, 1, 1, "", "tostring", "Scalar method identical to the corresponding array attribute."], [365, 1, 1, "", "trace", "Scalar method identical to the corresponding array attribute."], [366, 1, 1, "", "transpose", "Scalar method identical to the corresponding array attribute."], [367, 1, 1, "", "var", "Scalar method identical to the corresponding array attribute."], [368, 1, 1, "", "view", "Scalar method identical to the corresponding array attribute."]], "foxes.constants.ITYPE": [[372, 1, 1, "", "__abs__", "abs(self)"], [373, 1, 1, "", "__add__", "Return self+value."], [374, 1, 1, "", "__and__", "Return self&value."], [375, 1, 1, "", "__bool__", "self != 0"], [376, 1, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [377, 1, 1, "", "__divmod__", "Return divmod(self, value)."], [378, 1, 1, "", "__eq__", "Return self==value."], [379, 1, 1, "", "__float__", "float(self)"], [380, 1, 1, "", "__floordiv__", "Return self//value."], [381, 1, 1, "", "__ge__", "Return self>=value."], [382, 1, 1, "", "__gt__", "Return self>value."], [383, 1, 1, "", "__hash__", "Return hash(self)."], [384, 1, 1, "", "__index__", "Return self converted to an integer, if self is suitable for use as an index into a list."], [385, 1, 1, "", "__int__", "int(self)"], [386, 1, 1, "", "__invert__", "~self"], [387, 1, 1, "", "__le__", "Return self<=value."], [388, 1, 1, "", "__lshift__", "Return self<<value."], [389, 1, 1, "", "__lt__", "Return self<value."], [390, 1, 1, "", "__mod__", "Return self%value."], [391, 1, 1, "", "__mul__", "Return self*value."], [392, 1, 1, "", "__ne__", "Return self!=value."], [393, 1, 1, "", "__neg__", "-self"], [394, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [395, 1, 1, "", "__or__", "Return self|value."], [396, 1, 1, "", "__pos__", "+self"], [397, 1, 1, "", "__pow__", "Return pow(self, value, mod)."], [398, 1, 1, "", "__radd__", "Return value+self."], [399, 1, 1, "", "__rand__", "Return value&self."], [400, 1, 1, "", "__rdivmod__", "Return divmod(value, self)."], [401, 1, 1, "", "__repr__", "Return repr(self)."], [402, 1, 1, "", "__rfloordiv__", "Return value//self."], [403, 1, 1, "", "__rlshift__", "Return value<<self."], [404, 1, 1, "", "__rmod__", "Return value%self."], [405, 1, 1, "", "__rmul__", "Return value*self."], [406, 1, 1, "", "__ror__", "Return value|self."], [407, 1, 1, "", "__rpow__", "Return pow(value, self, mod)."], [408, 1, 1, "", "__rrshift__", "Return value>>self."], [409, 1, 1, "", "__rshift__", "Return self>>value."], [410, 1, 1, "", "__rsub__", "Return value-self."], [411, 1, 1, "", "__rtruediv__", "Return value/self."], [412, 1, 1, "", "__rxor__", "Return value^self."], [413, 1, 1, "", "__str__", "Return str(self)."], [414, 1, 1, "", "__sub__", "Return self-value."], [415, 1, 1, "", "__truediv__", "Return self/value."], [416, 1, 1, "", "__xor__", "Return self^value."], [417, 1, 1, "", "bit_count", "Computes the number of 1-bits in the absolute value of the input. Analogous to the builtin int.bit_count or popcount in C++."], [418, 4, 1, "", "denominator", "denominator of value (1)"], [419, 1, 1, "", "is_integer", "Return True if the number is finite with integral value."], [420, 4, 1, "", "numerator", "numerator of value (the value itself)"]], "foxes.core": [[102, 0, 1, "", "Algorithm", "Abstract base class for algorithms."], [117, 0, 1, "", "Data", "Container for data and meta data."], [125, 0, 1, "", "DataCalcModel", "Abstract base class for models with that run calculation on xarray Dataset data."], [128, 0, 1, "", "ExtendedStates", "States extended by point data models."], [137, 0, 1, "", "FarmController", "Analyses selected turbine models and handles their call."], [147, 0, 1, "", "FarmDataModel", "Abstract base class for models that modify farm data."], [152, 0, 1, "", "FarmDataModelList", "A list of farm data models."], [159, 0, 1, "", "FarmModel", "A FarmDataModel that operates on the farm level (in contrast to a TurbineModel, which allows application to a subset of turbines)."], [160, 0, 1, "", "Model", "Base class for all models."], [173, 0, 1, "", "PartialWakesModel", "Abstract base class for partial wakes models."], [181, 0, 1, "", "PointDataModel", "Abstract base class for models that modify point based data."], [185, 0, 1, "", "PointDataModelList", "A list of point data models."], [191, 0, 1, "", "RotorModel", "Abstract base class of rotor models."], [201, 0, 1, "", "States", "Abstract base class for states."], [207, 0, 1, "", "Turbine", "An individual wind turbine."], [211, 0, 1, "", "TurbineModel", "Abstract base class for turbine models."], [214, 0, 1, "", "TurbineType", "Abstract base class for turbine type models."], [217, 0, 1, "", "VerticalProfile", "Abstract base class for vertical profiles."], [221, 0, 1, "", "WakeFrame", "Abstract base class for wake frames."], [228, 0, 1, "", "WakeModel", "Abstract base class for wake models."], [233, 0, 1, "", "WakeSuperposition", "Abstract base class for wake superposition models."], [236, 0, 1, "", "WindFarm", "The wind farm."]], "foxes.core.Algorithm": [[103, 1, 1, "", "__init__", "Constructor."], [104, 1, 1, "", "chunked", ""], [105, 1, 1, "", "del_model_data", "Remove stored model data"], [106, 1, 1, "", "finalize", "Finalizes the algorithm."], [107, 1, 1, "", "get_model_data", "Gets model data from memory"], [108, 1, 1, "", "get_models_data", "Creates xarray from model input data."], [109, 1, 1, "", "get_models_idata", "Returns idata object of models"], [110, 2, 1, "", "idata_mem", "The current idata memory"], [111, 1, 1, "", "initialize", "Initializes the algorithm."], [112, 1, 1, "", "new", "Run-time algorithm factory."], [113, 1, 1, "", "new_point_data", "Creates a point data xarray object, containing only points."], [114, 1, 1, "", "print", "Print function, based on verbosity."], [115, 1, 1, "", "store_model_data", "Store model data"], [116, 1, 1, "", "update_n_turbines", "Reset the number of turbines, according to self.farm"]], "foxes.core.Data": [[118, 1, 1, "", "__init__", "Constructor."], [119, 1, 1, "", "add", "Add data entry"], [120, 1, 1, "", "from_points", "Create from points"], [121, 2, 1, "", "n_points", "The number of points"], [122, 2, 1, "", "n_states", "The number of states"], [123, 2, 1, "", "n_turbines", "The number of turbines"], [124, 1, 1, "", "states_i0", "Get the state counter for first state in chunk"]], "foxes.core.DataCalcModel": [[126, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [127, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.ExtendedStates": [[129, 1, 1, "", "__init__", "Constructor."], [130, 1, 1, "", "append", "Add a model to the list"], [131, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [132, 1, 1, "", "index", "The index list"], [133, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [134, 1, 1, "", "size", "The total number of states."], [135, 1, 1, "", "sub_models", "List of all sub-models"], [136, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.FarmController": [[138, 1, 1, "", "__init__", "Constructor."], [139, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [140, 1, 1, "", "collect_models", "Analyze and gather turbine models, based on the turbines of the wind farm."], [141, 1, 1, "", "finalize", "Finalizes the model."], [142, 1, 1, "", "initialize", "Initializes the model."], [143, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [144, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [145, 1, 1, "", "set_pars", "Set parameters for a turbine model"], [146, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.core.FarmDataModel": [[148, 1, 1, "", "__init__", "Constructor."], [149, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [150, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [151, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.FarmDataModelList": [[153, 1, 1, "", "__init__", "Constructor."], [154, 1, 1, "", "append", "Add a model to the list"], [155, 1, 1, "", "calculate", "The main model calculation."], [156, 1, 1, "", "insert", "Insert a model into the list"], [157, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [158, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.core.Model": [[161, 1, 1, "", "__init__", "Constructor."], [162, 1, 1, "", "__repr__", "Return repr(self)."], [163, 1, 1, "", "data_to_store", "Adds data from mdata to the local store, intended for iterative runs."], [164, 1, 1, "", "finalize", "Finalizes the model."], [165, 1, 1, "", "from_data_or_store", "Get data from mdata or local store"], [166, 1, 1, "", "get_data", "Getter for a data entry in the model object or provided data sources"], [167, 1, 1, "", "initialize", "Initializes the model."], [168, 2, 1, "", "initialized", "Initialization flag."], [169, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [170, 2, 1, "", "model_id", "Unique id based on the model type."], [171, 1, 1, "", "sub_models", "List of all sub-models"], [172, 1, 1, "", "var", "Creates a model specific variable name."]], "foxes.core.PartialWakesModel": [[174, 1, 1, "", "__init__", "Constructor."], [175, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [176, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [177, 1, 1, "", "initialize", "Initializes the model."], [178, 1, 1, "", "new", "Run-time partial wakes factory."], [179, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."], [180, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.core.PointDataModel": [[182, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [183, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [184, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.PointDataModelList": [[186, 1, 1, "", "__init__", "Constructor."], [187, 1, 1, "", "append", "Add a model to the list"], [188, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [189, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [190, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.core.RotorModel": [[192, 1, 1, "", "__init__", "Constructor."], [193, 1, 1, "", "calculate", "Calculate ambient rotor effective results."], [194, 1, 1, "", "design_points", "The rotor model design points."], [195, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [196, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [197, 1, 1, "", "n_rotor_points", "The number of rotor points"], [198, 1, 1, "", "new", "Run-time rotor model factory."], [199, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [200, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.core.States": [[202, 1, 1, "", "index", "The index list"], [203, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [204, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [205, 1, 1, "", "size", "The total number of states."], [206, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.Turbine": [[208, 1, 1, "", "__init__", "Constructor."], [209, 1, 1, "", "add_model", "Add a turbine model to the list."], [210, 1, 1, "", "insert_model", "Insert a turbine model into the list of models."]], "foxes.core.TurbineModel": [[212, 1, 1, "", "calculate", "The main model calculation."], [213, 1, 1, "", "new", "Run-time turbine model factory."]], "foxes.core.TurbineType": [[215, 1, 1, "", "__init__", "Constructor."], [216, 1, 1, "", "new", "Run-time turbine type factory."]], "foxes.core.VerticalProfile": [[218, 1, 1, "", "calculate", "Run the profile calculation."], [219, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."], [220, 1, 1, "", "new", "Run-time profile factory."]], "foxes.core.WakeFrame": [[222, 1, 1, "", "calc_centreline_integral", "Integrates variables along the centreline."], [223, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [224, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [225, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [226, 1, 1, "", "get_wake_modelling_data", "Return data that is required for computing the wake from source turbines to evaluation points."], [227, 1, 1, "", "new", "Run-time wake frame factory."]], "foxes.core.WakeModel": [[229, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [230, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [231, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."], [232, 1, 1, "", "new", "Run-time wake model factory."]], "foxes.core.WakeSuperposition": [[234, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [235, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.core.WindFarm": [[237, 1, 1, "", "__init__", "Constructor."], [238, 1, 1, "", "add_turbine", "Add a wind turbine to the list."], [239, 2, 1, "", "n_turbines", "The number of turbines in the wind farm"], [240, 2, 1, "", "turbine_names", "The list of names of all turbines"]], "foxes.data": [[241, 0, 1, "", "StaticData", "A DataBook filled with static data from this directory."], [243, 5, 1, "", "parse_Pct_file_name", "Parse basic turbine data from file name"], [244, 5, 1, "", "parse_Pct_two_files", "Parse basic turbine data from file names"]], "foxes.data.StaticData": [[242, 1, 1, "", "__init__", "Constructor."]], "foxes.input.farm_layout": [[492, 5, 1, "", "add_from_csv", "Add turbines to wind farm via csv input file."], [493, 5, 1, "", "add_from_df", "Add turbines to wind farm via pandas DataFrame."], [494, 5, 1, "", "add_from_file", "Add turbines from file."], [495, 5, 1, "", "add_from_json", "Add turbimes from a json file."], [496, 5, 1, "", "add_grid", "Add a regular grid of turbines."], [497, 5, 1, "", "add_row", "Add a single row of turbines."]], "foxes.input.states": [[498, 0, 1, "", "FieldDataNC", "Heterogeneous ambient states on a regular horizontal grid in NetCDF format."], [506, 0, 1, "", "MultiHeightStates", "States with multiple heights data per entry."], [517, 0, 1, "", "MultiHeightTimeseries", "Multi-height timeseries states data."], [519, 0, 1, "", "ScanWS", "A given list of wind speeds, all other variables are fixed."], [526, 0, 1, "", "SingleStateStates", "A single uniform state."], [534, 0, 1, "", "StatesTable", "States from a pandas.DataFrame or a pandas readable file."], [547, 0, 1, "", "Timeseries", "Timeseries states data."], [549, 5, 1, "", "create_random_abl_states", "Create random abl states."]], "foxes.input.states.FieldDataNC": [[499, 1, 1, "", "__init__", "Constructor."], [500, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [501, 1, 1, "", "index", "The index list"], [502, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [503, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [504, 1, 1, "", "size", "The total number of states."], [505, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightStates": [[507, 4, 1, "", "RDICT", ""], [508, 1, 1, "", "__init__", "Constructor."], [509, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [510, 1, 1, "", "finalize", "Finalizes the model."], [511, 1, 1, "", "index", "The index list"], [512, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [513, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [514, 1, 1, "", "reset", "Reset the states, optionally select states"], [515, 1, 1, "", "size", "The total number of states."], [516, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightTimeseries": [[518, 4, 1, "", "RDICT", ""]], "foxes.input.states.ScanWS": [[520, 1, 1, "", "__init__", "Constructor."], [521, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [522, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [523, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [524, 1, 1, "", "size", "The total number of states."], [525, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.SingleStateStates": [[527, 1, 1, "", "__init__", "Constructor."], [528, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [529, 1, 1, "", "initialize", "Initializes the model."], [530, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [531, 1, 1, "", "size", "The total number of states."], [532, 1, 1, "", "sub_models", "List of all sub-models"], [533, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.StatesTable": [[535, 4, 1, "", "RDICT", ""], [536, 1, 1, "", "__init__", "Constructor."], [537, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [538, 1, 1, "", "finalize", "Finalizes the model."], [539, 1, 1, "", "index", "The index list"], [540, 1, 1, "", "initialize", "Initializes the model."], [541, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [542, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [543, 1, 1, "", "reset", "Reset the states, optionally select states"], [544, 1, 1, "", "size", "The total number of states."], [545, 1, 1, "", "sub_models", "List of all sub-models"], [546, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.Timeseries": [[548, 4, 1, "", "RDICT", ""]], "foxes.input.windio": [[550, 5, 1, "", "read_case", "Reads a WindIO case"]], "foxes.models.farm_controllers": [[551, 0, 1, "", "BasicFarmController", "The basic farm controller, running all turbine models in their order, without conditions."]], "foxes.models.farm_models": [[552, 0, 1, "", "Turbine2FarmModel", "Wrapper that promotes turbine models into farm models, simply by selecting all turbines."]], "foxes.models.farm_models.Turbine2FarmModel": [[553, 1, 1, "", "__init__", "Constructor."], [554, 1, 1, "", "__repr__", "Return repr(self)."], [555, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [556, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [557, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.model_book": [[558, 0, 1, "", "Dict", "A slightly enhanced dictionary."], [561, 0, 1, "", "ModelBook", "Container for all kinds of models."]], "foxes.models.model_book.Dict": [[559, 1, 1, "", "__getitem__", "x.__getitem__(y) <==> x[y]"], [560, 1, 1, "", "__init__", "Constructor."]], "foxes.models.model_book.ModelBook": [[562, 1, 1, "", "__getitem__", ""], [563, 1, 1, "", "__init__", "Constructor."], [564, 1, 1, "", "finalize", "Finalizes the model."], [565, 1, 1, "", "get", "Gets a model object."], [566, 1, 1, "", "print_toc", "Print the contents."]], "foxes.models.partial_wakes": [[567, 0, 1, "", "Mapped", "Partial wake models depending on the wake model (type)."], [574, 0, 1, "", "PartialAxiwake", "Partial wake calculation for axial wake models."], [582, 0, 1, "", "PartialDistSlicedWake", "Partial wakes for distance sliced wake models, making use of their structure."], [590, 0, 1, "", "PartialGrid", "Partial wakes on a grid rotor that may differ from the one in the algorithm."], [593, 0, 1, "", "PartialTopHat", "Partial wakes for top-hat models."], [600, 0, 1, "", "RotorPoints", "Partial wakes calculation directly by the rotor model."]], "foxes.models.partial_wakes.Mapped": [[568, 1, 1, "", "__init__", "Constructor."], [569, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [570, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [571, 1, 1, "", "initialize", "Initializes the model."], [572, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."], [573, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.partial_wakes.PartialAxiwake": [[575, 1, 1, "", "__init__", "Constructor."], [576, 1, 1, "", "__repr__", "Return repr(self)."], [577, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [578, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [579, 1, 1, "", "initialize", "Initializes the model."], [580, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."], [581, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.partial_wakes.PartialDistSlicedWake": [[583, 1, 1, "", "__init__", "Constructor."], [584, 1, 1, "", "__repr__", "Return repr(self)."], [585, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [586, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [587, 1, 1, "", "initialize", "Initializes the model."], [588, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."], [589, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.partial_wakes.PartialGrid": [[591, 1, 1, "", "__init__", "Constructor."], [592, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes.PartialTopHat": [[594, 1, 1, "", "__init__", "Constructor."], [595, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [596, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [597, 1, 1, "", "initialize", "Initializes the model."], [598, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."], [599, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.partial_wakes.RotorPoints": [[601, 1, 1, "", "__init__", "Constructor."], [602, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [603, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [604, 1, 1, "", "get_wake_points", "Get the wake calculation points."], [605, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.point_models": [[606, 0, 1, "", "SetUniformData", "Set uniform data (can be state dependent)"], [611, 0, 1, "", "TKE2TI", "Calculates TI from TKE, using TI = sqrt( 3/2 * TKE) / WS"], [614, 0, 1, "", "WakeDeltas", "This point model simply subtracts ambient results from waked results."]], "foxes.models.point_models.SetUniformData": [[607, 1, 1, "", "__init__", "Constructor."], [608, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [609, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [610, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.TKE2TI": [[612, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [613, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.WakeDeltas": [[615, 1, 1, "", "__init__", "Constructor."], [616, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [617, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.rotor_models": [[618, 0, 1, "", "CentreRotor", "The centre rotor model."], [624, 0, 1, "", "GridRotor", "The weighted regular grid rotor model, composed maximally of n x n points, possibly kicking out the outside points."], [631, 0, 1, "", "LevelRotor", "The weighted regular rotor level model, composed of of n points between lower and upper blade tip. Calculates a height-dependent REWS"]], "foxes.models.rotor_models.CentreRotor": [[619, 1, 1, "", "design_points", "The rotor model design points."], [620, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [621, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [622, 1, 1, "", "n_rotor_points", "The number of rotor points"], [623, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.GridRotor": [[625, 1, 1, "", "__init__", "Constructor."], [626, 1, 1, "", "__repr__", "Return repr(self)."], [627, 1, 1, "", "design_points", "The rotor model design points."], [628, 1, 1, "", "initialize", "Initializes the model."], [629, 1, 1, "", "n_rotor_points", "The number of rotor points"], [630, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.LevelRotor": [[632, 1, 1, "", "__init__", "Constructor."], [633, 1, 1, "", "__repr__", "Return repr(self)."], [634, 1, 1, "", "design_points", "The rotor model design points."], [635, 1, 1, "", "initialize", "Initializes the model."], [636, 1, 1, "", "n_rotor_points", "The number of rotor points"], [637, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.turbine_models": [[638, 0, 1, "", "Calculator", "Calculates variables based on given functions."], [642, 0, 1, "", "LookupTable", "Calculates the data by interpolation of lookup-table data"], [647, 0, 1, "", "PowerMask", "Invokes a maximal power value."], [653, 0, 1, "", "RotorCentreCalc", "Calculates data at the rotor centre"], [659, 0, 1, "", "SectorManagement", "Changes variables based on variable range conditions."], [664, 0, 1, "", "SetFarmVars", "Set farm data variables to given data."], [671, 0, 1, "", "SetXYHD", "Sets basic turbine data, from turbine object to farm data."], [675, 0, 1, "", "TableFactors", "Multiplies variables by factors from a two dimensional table."], [680, 0, 1, "", "Thrust2Ct", "Calculates ct from thrust force data."], [684, 0, 1, "", "YAW2YAWM", "Calculates delta yaw (i.e. YAWM) from absolute yaw (i.e. YAW)"], [687, 0, 1, "", "YAWM2YAW", "Calculates absolute yaw (i.e. YAWM) from delta yaw (i.e. YAWM)"], [690, 0, 1, "", "kTI", "Calculates the wake model parameter k as a linear function of TI."]], "foxes.models.turbine_models.Calculator": [[639, 1, 1, "", "__init__", "Constructor."], [640, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [641, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.LookupTable": [[643, 1, 1, "", "__init__", "Constructor."], [644, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [645, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [646, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.PowerMask": [[648, 1, 1, "", "__init__", "Constructor."], [649, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [650, 1, 1, "", "initialize", "Initializes the model."], [651, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [652, 1, 1, "", "update_P_ct", ""]], "foxes.models.turbine_models.RotorCentreCalc": [[654, 1, 1, "", "__init__", "Constructor."], [655, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [656, 1, 1, "", "initialize", "Initializes the model."], [657, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [658, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.turbine_models.SectorManagement": [[660, 1, 1, "", "__init__", "Constructor."], [661, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [662, 1, 1, "", "initialize", "Initializes the model."], [663, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SetFarmVars": [[665, 1, 1, "", "__init__", "Constructor."], [666, 1, 1, "", "add_var", "Add data for a variable."], [667, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [668, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [669, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [670, 1, 1, "", "reset", "Remove all variables."]], "foxes.models.turbine_models.SetXYHD": [[672, 1, 1, "", "__init__", "Constructor."], [673, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [674, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.TableFactors": [[676, 1, 1, "", "__init__", "Constructor."], [677, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [678, 1, 1, "", "initialize", "Initializes the model."], [679, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.Thrust2Ct": [[681, 1, 1, "", "__init__", "Constructor."], [682, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [683, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAW2YAWM": [[685, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [686, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAWM2YAW": [[688, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [689, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.kTI": [[691, 1, 1, "", "__init__", "Constructor."], [692, 1, 1, "", "__repr__", "Return repr(self)."], [693, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [694, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types": [[695, 0, 1, "", "CpCtFile", "Calculate power and ct by interpolating from cp-ct-curve data file (or pandas DataFrame)."], [697, 0, 1, "", "CpCtFromTwo", "Calculate power and ct by interpolating cp and ct from two files (or two pandas DataFrames)."], [699, 0, 1, "", "NullType", "A turbine type that does not compute any data."], [702, 0, 1, "", "PCtFile", "Calculate power and ct by interpolating from power-ct-curve data file (or pandas DataFrame)."], [708, 0, 1, "", "PCtFromTwo", "Calculate power and ct by interpolating from power curve and ct curve data files."], [714, 0, 1, "", "WsRho2PCtFromTwo", "Calculate air density dependent power and ct values, as given by two individual files."], [720, 0, 1, "", "WsTI2PCtFromTwo", "Calculate turbulent intensity dependent power and ct values, as given by two individual files."]], "foxes.models.turbine_types.CpCtFile": [[696, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.CpCtFromTwo": [[698, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.NullType": [[700, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [701, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFile": [[703, 1, 1, "", "__init__", "Constructor."], [704, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [705, 1, 1, "", "finalize", "Finalizes the model."], [706, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [707, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFromTwo": [[709, 1, 1, "", "__init__", "Constructor."], [710, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [711, 1, 1, "", "finalize", "Finalizes the model."], [712, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [713, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsRho2PCtFromTwo": [[715, 1, 1, "", "__init__", "Constructor."], [716, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [717, 1, 1, "", "finalize", "Finalizes the model."], [718, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [719, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsTI2PCtFromTwo": [[721, 1, 1, "", "__init__", "Constructor."], [722, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [723, 1, 1, "", "finalize", "Finalizes the model."], [724, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [725, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.vertical_profiles": [[726, 0, 1, "", "ABLLogNeutralWsProfile", "The neutral ABL wind speed log profile."], [730, 0, 1, "", "ABLLogStableWsProfile", "The stable ABL wind speed log profile."], [734, 0, 1, "", "ABLLogUnstableWsProfile", "The unstable ABL wind speed log profile."], [738, 0, 1, "", "ABLLogWsProfile", "The neutral/stable/unstable ABL wind speed log profile."], [742, 0, 1, "", "DataProfile", "A profile based on numerical data."], [746, 0, 1, "", "ShearedProfile", "A wind shear profile, based on a shear exponent."], [749, 0, 1, "", "UniformProfile", "A profile with uniform values."]], "foxes.models.vertical_profiles.ABLLogNeutralWsProfile": [[727, 1, 1, "", "__init__", "Constructor."], [728, 1, 1, "", "calculate", "Run the profile calculation."], [729, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogStableWsProfile": [[731, 1, 1, "", "__init__", "Constructor."], [732, 1, 1, "", "calculate", "Run the profile calculation."], [733, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogUnstableWsProfile": [[735, 1, 1, "", "__init__", "Constructor."], [736, 1, 1, "", "calculate", "Run the profile calculation."], [737, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogWsProfile": [[739, 1, 1, "", "__init__", "Constructor."], [740, 1, 1, "", "calculate", "Run the profile calculation."], [741, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.DataProfile": [[743, 1, 1, "", "__init__", "Constructor"], [744, 1, 1, "", "calculate", "Run the profile calculation."], [745, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ShearedProfile": [[747, 1, 1, "", "calculate", "Run the profile calculation."], [748, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.UniformProfile": [[750, 1, 1, "", "__init__", "Constructor"], [751, 1, 1, "", "calculate", "Run the profile calculation."], [752, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.wake_frames": [[753, 0, 1, "", "FarmOrder", "Invokes turbine ordering as defined by the wind farm."], [759, 0, 1, "", "RotorWD", "Align the first axis for each rotor with the local normalized wind direction."], [764, 0, 1, "", "SeqDynamicWakes", "Dynamic wakes for the sequential algorithm."], [771, 0, 1, "", "Streamlines", "Streamline following wakes"], [778, 0, 1, "", "Timelines", "Dynamic wakes for spatially uniform timeseries states."], [784, 0, 1, "", "YawedWakes", "Bend the wakes for yawed turbines, based on the Bastankhah 2016 wake model"]], "foxes.models.wake_frames.FarmOrder": [[754, 1, 1, "", "__init__", "Constructor."], [755, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [756, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [757, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [758, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_frames.RotorWD": [[760, 1, 1, "", "__init__", "Constructor."], [761, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [762, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [763, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.models.wake_frames.SeqDynamicWakes": [[765, 1, 1, "", "__init__", "Constructor."], [766, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [767, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [768, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [769, 1, 1, "", "get_wake_modelling_data", "Return data that is required for computing the wake from source turbines to evaluation points."], [770, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.Streamlines": [[772, 1, 1, "", "__init__", "Constructor."], [773, 1, 1, "", "__repr__", "Return repr(self)."], [774, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [775, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [776, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [777, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.Timelines": [[779, 1, 1, "", "__init__", "Constructor."], [780, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [781, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [782, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [783, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.YawedWakes": [[785, 1, 1, "", "__init__", "Constructor."], [786, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [787, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [788, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [789, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models": [[790, 0, 1, "", "AxisymmetricWakeModel", "Abstract base class for wake models that depend on (x, r) separately."], [793, 0, 1, "", "DistSlicedWakeModel", "Abstract base class for wake models for which the x-denpendency can be separated from the yz-dependency."], [800, 0, 1, "", "GaussianWakeModel", "Abstract base class for Gaussian wake models."], [803, 0, 1, "", "TopHatWakeModel", "Abstract base class for top-hat wake models."]], "foxes.models.wake_models.AxisymmetricWakeModel": [[791, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."], [792, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."]], "foxes.models.wake_models.DistSlicedWakeModel": [[794, 1, 1, "", "__init__", "Constructor."], [795, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [796, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [797, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [798, 1, 1, "", "initialize", "Initializes the model."], [799, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.GaussianWakeModel": [[801, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [802, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.TopHatWakeModel": [[804, 1, 1, "", "__init__", "Constructor."], [805, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [806, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [807, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.induction": [[808, 0, 1, "", "RankineHalfBody", "The Rankine half body induction wake model"]], "foxes.models.wake_models.induction.RankineHalfBody": [[809, 1, 1, "", "__init__", "Constructor."], [810, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [811, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [812, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.ti": [[813, 0, 1, "", "CrespoHernandezTIWake", "The Crespo and Hernandez TI empirical correlation"], [819, 0, 1, "", "IECTIWake", "The TI wake model from IEC-64100-1-2005-8 (2005):"]], "foxes.models.wake_models.ti.CrespoHernandezTIWake": [[814, 1, 1, "", "__init__", "Constructor."], [815, 1, 1, "", "__repr__", "Return repr(self)."], [816, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [817, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [818, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.ti.IECTIWake": [[820, 1, 1, "", "__init__", "Constructor."], [821, 1, 1, "", "__repr__", "Return repr(self)."], [822, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [823, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [824, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind": [[825, 0, 1, "", "Bastankhah2014", "The Bastankhah 2014 wake model"], [830, 0, 1, "", "Bastankhah2016", "The Bastankhah 2016 wake model"], [835, 0, 1, "", "Bastankhah2016Model", "Common calculations for the wake model and the wake frame, such that code repetitions can be avoided."], [856, 0, 1, "", "JensenWake", "The Jensen wake model."], [862, 0, 1, "", "TurbOParkWake", "The TurbOPark wake model"], [867, 0, 1, "", "TurbOParkWakeIX", "The generalized TurbOPark wake model, integrating TI over the streamline."]], "foxes.models.wake_models.wind.Bastankhah2014": [[826, 1, 1, "", "__init__", "Constructor."], [827, 1, 1, "", "__repr__", "Return repr(self)."], [828, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [829, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.Bastankhah2016": [[831, 1, 1, "", "__init__", "Constructor."], [832, 1, 1, "", "__repr__", "Return repr(self)."], [833, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [834, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.Bastankhah2016Model": [[836, 4, 1, "", "AMPL_FAR", ""], [837, 4, 1, "", "AMPL_NEAR", ""], [838, 4, 1, "", "CHECK", ""], [839, 4, 1, "", "DELTA_FAR", ""], [840, 4, 1, "", "DELTA_NEAR", ""], [841, 4, 1, "", "MDATA_KEY", ""], [842, 4, 1, "", "NEAR", ""], [843, 4, 1, "", "PARS", ""], [844, 4, 1, "", "R_PC", ""], [845, 4, 1, "", "R_PC_S", ""], [846, 4, 1, "", "SIGMA_Y_FAR", ""], [847, 4, 1, "", "SIGMA_Z_FAR", ""], [848, 4, 1, "", "SP_SEL", ""], [849, 4, 1, "", "X0", ""], [850, 1, 1, "", "__init__", "Constructor."], [851, 1, 1, "", "calc_data", "Calculate common model data, store it in mdata."], [852, 1, 1, "", "clean", "Clean all data"], [853, 1, 1, "", "get_data", "Return data entry"], [854, 1, 1, "", "has_data", "Check if data exists"], [855, 2, 1, "", "pars", "Dictionary of the model parameters"]], "foxes.models.wake_models.wind.JensenWake": [[857, 1, 1, "", "__init__", "Constructor."], [858, 1, 1, "", "__repr__", "Return repr(self)."], [859, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [860, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [861, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWake": [[863, 1, 1, "", "__init__", "Constructor."], [864, 1, 1, "", "__repr__", "Return repr(self)."], [865, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [866, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWakeIX": [[868, 1, 1, "", "__init__", "Constructor."], [869, 1, 1, "", "__repr__", "Return repr(self)."], [870, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [871, 1, 1, "", "finalize", "Finalizes the model."], [872, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_superpositions": [[873, 0, 1, "", "TILinear", "Linear wake superposition for TI."], [877, 0, 1, "", "TIMax", "Max wake superposition for TI."], [881, 0, 1, "", "TIPow", "Power wake superposition for TI."], [885, 0, 1, "", "TIQuadratic", "Quadratic wake superposition for TI."], [889, 0, 1, "", "WSLinear", "Linear supersposition of wind deficit results"], [894, 0, 1, "", "WSMax", "Max supersposition of wind deficit results"], [899, 0, 1, "", "WSPow", "Power supersposition of wind deficit results"], [904, 0, 1, "", "WSProduct", "Product supersposition of wind deficit results"], [909, 0, 1, "", "WSQuadratic", "Quadratic supersposition of wind deficit results"]], "foxes.models.wake_superpositions.TILinear": [[874, 1, 1, "", "__init__", "Constructor."], [875, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [876, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.TIMax": [[878, 1, 1, "", "__init__", "Constructor."], [879, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [880, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.TIPow": [[882, 1, 1, "", "__init__", "Constructor."], [883, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [884, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.TIQuadratic": [[886, 1, 1, "", "__init__", "Constructor."], [887, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [888, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.WSLinear": [[890, 1, 1, "", "__init__", "Constructor."], [891, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [892, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [893, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSMax": [[895, 1, 1, "", "__init__", "Constructor."], [896, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [897, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [898, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSPow": [[900, 1, 1, "", "__init__", "Constructor."], [901, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [902, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [903, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSProduct": [[905, 1, 1, "", "__init__", "Constructor."], [906, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [907, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [908, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSQuadratic": [[910, 1, 1, "", "__init__", "Constructor."], [911, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [912, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [913, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.opt.constraints": [[1076, 0, 1, "", "AreaGeometryConstraint", "Constrains turbine positions to the inside of a given area geometry."], [1097, 0, 1, "", "FarmBoundaryConstraint", "Constrains turbine positions to the inside of the wind farm boundary"], [1099, 0, 1, "", "MinDistConstraint", "Turbines must keep at least a minimal spatial distance."]], "foxes.opt.constraints.AreaGeometryConstraint": [[1077, 1, 1, "", "__init__", "Constructor."], [1078, 1, 1, "", "__str__", "Get info string"], [1079, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [1080, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1081, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1082, 2, 1, "", "component_names", "The names of the components"], [1083, 1, 1, "", "finalize", "Finalize the object."], [1084, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1085, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [1086, 1, 1, "", "initialize", "Initialize the object."], [1087, 2, 1, "", "initialized", "Flag for finished initialization"], [1088, 1, 1, "", "n_components", "Returns the number of components of the function."], [1089, 2, 1, "", "n_vars_float", "The number of float variables"], [1090, 2, 1, "", "n_vars_int", "The number of int variables"], [1091, 1, 1, "", "rename_vars_float", "Rename float variables."], [1092, 1, 1, "", "rename_vars_int", "Rename integer variables."], [1093, 2, 1, "", "var_names_float", "The names of the float variables"], [1094, 2, 1, "", "var_names_int", "The names of the integer variables"], [1095, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [1096, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "foxes.opt.constraints.FarmBoundaryConstraint": [[1098, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.constraints.MinDistConstraint": [[1100, 1, 1, "", "__init__", "Constructor."], [1101, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1102, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1103, 1, 1, "", "initialize", "Initialize the constaint."], [1104, 1, 1, "", "n_components", "Returns the number of components of the function."], [1105, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core": [[1106, 0, 1, "", "FarmConstraint", "Abstract base class for foxes wind farm optimization constraints."], [1117, 0, 1, "", "FarmObjective", "Abstract base class for foxes wind farm objective functions."], [1124, 0, 1, "", "FarmOptProblem", "Abstract base class of wind farm optimization problems."], [1166, 0, 1, "", "FarmVarsProblem", "Abstract base class for models that optimize farm variables."], [1172, 0, 1, "", "PopStates", "Helper class for vectorized opt population calculation, via artificial states of length n_pop times n_states."]], "foxes.opt.core.FarmConstraint": [[1107, 1, 1, "", "__init__", "Constructor."], [1108, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1109, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1110, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1111, 2, 1, "", "farm", "The wind farm"], [1112, 1, 1, "", "n_components", "Returns the number of components of the function."], [1113, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1114, 1, 1, "", "print_models", "Prints all model names."], [1115, 2, 1, "", "sel_turbines", "The list of selected turbines"], [1116, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core.FarmObjective": [[1118, 1, 1, "", "__init__", "Constraints."], [1119, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1120, 2, 1, "", "farm", "The wind farm"], [1121, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1122, 1, 1, "", "print_models", "Prints all model names."], [1123, 2, 1, "", "sel_turbines", "The list of selected turbines"]], "foxes.opt.core.FarmOptProblem": [[1125, 4, 1, "", "INT_INF", ""], [1126, 1, 1, "", "__init__", "Constructor."], [1127, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [1128, 1, 1, "", "add_objective", "Add an objective to the problem."], [1129, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1130, 2, 1, "", "all_turbines", "Flag for all turbines optimization"], [1131, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1132, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1133, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [1134, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [1135, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [1136, 2, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [1137, 2, 1, "", "counter", "The current value of the application counter"], [1138, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [1139, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [1140, 2, 1, "", "farm", "The wind farm"], [1141, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1142, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [1143, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [1144, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1145, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [1146, 1, 1, "", "initialize", "Initialize the object."], [1147, 2, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [1148, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1149, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1150, 2, 1, "", "maximize_objs", "Flags for objective maximization"], [1151, 2, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [1152, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1153, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1154, 2, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [1155, 2, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [1156, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1157, 2, 1, "", "n_vars_float", "The number of float variables"], [1158, 2, 1, "", "n_vars_int", "The number of int variables"], [1159, 1, 1, "", "parse_tvar", "Parse foxes variable name and turbine index from turbine variable"], [1160, 2, 1, "", "sel_turbines", "The selected turbines"], [1161, 1, 1, "", "tvar", "Gets turbine variable name"], [1162, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1163, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1164, 1, 1, "", "var_names_float", "The names of float variables."], [1165, 1, 1, "", "var_names_int", "The names of integer variables."]], "foxes.opt.core.FarmVarsProblem": [[1167, 1, 1, "", "initialize", "Initialize the object."], [1168, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1169, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1170, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1171, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."]], "foxes.opt.core.PopStates": [[1173, 1, 1, "", "__init__", "Constructor."], [1174, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [1175, 1, 1, "", "initialize", "Initializes the model."], [1176, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [1177, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [1178, 1, 1, "", "size", "The total number of states."], [1179, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.opt.objectives": [[1180, 0, 1, "", "FarmVarObjective", "Objectives based on farm variables."], [1189, 0, 1, "", "MaxFarmPower", "Maximize the mean wind farm power"], [1191, 0, 1, "", "MaxNTurbines", "Maximizes the number of turrbines."], [1197, 0, 1, "", "MinimalMaxTI", "Minimize the maximal turbine TI"]], "foxes.opt.objectives.FarmVarObjective": [[1181, 1, 1, "", "__init__", "Constructor."], [1182, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1183, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1184, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1185, 1, 1, "", "initialize", "Initialize the object."], [1186, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1187, 1, 1, "", "n_components", "Returns the number of components of the function."], [1188, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.objectives.MaxFarmPower": [[1190, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.objectives.MaxNTurbines": [[1192, 1, 1, "", "__init__", "Constructor."], [1193, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1194, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1195, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1196, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.objectives.MinimalMaxTI": [[1198, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.problems": [[1199, 0, 1, "", "OptFarmVars", "Optimize a selection of farm variables."]], "foxes.opt.problems.OptFarmVars": [[1200, 1, 1, "", "__init__", "Constructor."], [1201, 1, 1, "", "add_var", "Add a variable."], [1202, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1203, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1204, 1, 1, "", "initialize", "Initialize the object."], [1205, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1206, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1207, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1208, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1209, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1210, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1211, 1, 1, "", "var_names_float", "The names of float variables."], [1212, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout": [[1338, 0, 1, "", "FarmLayoutOptProblem", "The turbine positioning optimization problem"], [1347, 0, 1, "", "RegGridsLayoutOptProblem", "Places turbines on several regular grids and optimizes their parameters."], [1363, 0, 1, "", "RegularLayoutOptProblem", "Places turbines on a regular grid and optimizes its parameters."]], "foxes.opt.problems.layout.FarmLayoutOptProblem": [[1339, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1340, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1341, 1, 1, "", "initialize", "Initialize the object."], [1342, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1343, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1344, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1345, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1346, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.RegGridsLayoutOptProblem": [[1348, 1, 1, "", "__init__", "Constraints."], [1349, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1350, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1351, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1352, 1, 1, "", "initialize", "Initialize the object."], [1353, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1354, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1355, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1356, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1357, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1358, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1359, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1360, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1361, 1, 1, "", "var_names_float", "The names of float variables."], [1362, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.RegularLayoutOptProblem": [[1364, 4, 1, "", "ANGLE", ""], [1365, 4, 1, "", "OFFSET_X", ""], [1366, 4, 1, "", "OFFSET_Y", ""], [1367, 4, 1, "", "SPACING_X", ""], [1368, 4, 1, "", "SPACING_Y", ""], [1369, 1, 1, "", "__init__", "Constructor."], [1370, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1371, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1372, 1, 1, "", "initialize", "Initialize the object."], [1373, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1374, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1375, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1376, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1377, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts": [[1294, 0, 1, "", "GeomLayout", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes)."], [1304, 0, 1, "", "GeomLayoutGridded", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes), on a fixes background point grid."], [1314, 0, 1, "", "GeomRegGrid", "A regular grid within a boundary geometry."], [1324, 0, 1, "", "GeomRegGrids", "A regular grid within a boundary geometry."]], "foxes.opt.problems.layout.geom_layouts.GeomLayout": [[1295, 1, 1, "", "__init__", "Constructor."], [1296, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1297, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1298, 1, 1, "", "get_fig", "Return plotly figure axis."], [1299, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1300, 1, 1, "", "initialize", "Initialize the object."], [1301, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1302, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1303, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded": [[1305, 1, 1, "", "__init__", "Constructor."], [1306, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1307, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1308, 1, 1, "", "get_fig", "Return plotly figure axis."], [1309, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1310, 1, 1, "", "initialize", "Initialize the object."], [1311, 1, 1, "", "max_values_int", "The maximal values of the int variables."], [1312, 1, 1, "", "min_values_int", "The minimal values of the int variables."], [1313, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrid": [[1315, 1, 1, "", "__init__", "Constructor."], [1316, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1317, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1318, 1, 1, "", "get_fig", "Return plotly figure axis."], [1319, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1320, 1, 1, "", "initialize", "Initialize the object."], [1321, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1322, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1323, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrids": [[1325, 1, 1, "", "__init__", "Constructor."], [1326, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1327, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1328, 1, 1, "", "get_fig", "Return plotly figure axis."], [1329, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1330, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1331, 1, 1, "", "initialize", "Initialize the object."], [1332, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1333, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1334, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1335, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1336, 1, 1, "", "var_names_float", "The names of float variables."], [1337, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1213, 0, 1, "", "Boundary", "Boundary constraint for purely geometrical layouts problems."], [1218, 0, 1, "", "CFixN", "Fixed number of turbines constraint for purely geometrical layouts problems."], [1223, 0, 1, "", "CMaxN", "Maximal number of turbines constraint for purely geometrical layouts problems."], [1228, 0, 1, "", "CMinDensity", "Minimal turbine density constraint for purely geometrical layouts problems."], [1234, 0, 1, "", "CMinN", "Minimal number of turbines constraint for purely geometrical layouts problems."], [1239, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [1244, 0, 1, "", "MinDist", "Minimal distance constraint for purely geometrical layouts problems."], [1250, 0, 1, "", "Valid", "Validity constraint for purely geometrical layouts problems."], [1255, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.constraints.Boundary": [[1214, 1, 1, "", "__init__", "Constructor."], [1215, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1216, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1217, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CFixN": [[1219, 1, 1, "", "__init__", "Constructor."], [1220, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1221, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1222, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN": [[1224, 1, 1, "", "__init__", "Constructor."], [1225, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1226, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1227, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity": [[1229, 1, 1, "", "__init__", "Constructor."], [1230, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1231, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1232, 1, 1, "", "initialize", "Initialize the object."], [1233, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinN": [[1235, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1236, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1237, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1238, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Constraint": [[1240, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1241, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [1242, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [1243, 1, 1, "", "get_bounds", "Returns the bounds for all components."]], "foxes.opt.problems.layout.geom_layouts.constraints.MinDist": [[1245, 1, 1, "", "__init__", "Constructor."], [1246, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1247, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1248, 1, 1, "", "initialize", "Initialize the constaint."], [1249, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Valid": [[1251, 1, 1, "", "__init__", "Constructor."], [1252, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1253, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1254, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1256, 0, 1, "", "MaxDensity", "Maximal turbine density objective for purely geometrical layouts problems."], [1263, 0, 1, "", "MaxGridSpacing", "Maximal grid spacing objective for purely geometrical layouts problems."], [1269, 0, 1, "", "MeMiMaDist", "Mean-min-max distance objective for purely geometrical layouts problems."], [1275, 0, 1, "", "OFixN", "Fixed number of turbines objective for purely geometrical layouts problems."], [1281, 0, 1, "", "OMaxN", "Maximal number of turbines objective for purely geometrical layouts problems."], [1287, 0, 1, "", "OMinN", "Minimal number of turbines objective for purely geometrical layouts problems."], [1290, 0, 1, "", "Objective", "Abstract base class for objective functions."], [1293, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity": [[1257, 1, 1, "", "__init__", "Constructor."], [1258, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1259, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1260, 1, 1, "", "initialize", "Initialize the object."], [1261, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1262, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing": [[1264, 1, 1, "", "__init__", "Constructor."], [1265, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1266, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1267, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1268, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist": [[1270, 1, 1, "", "__init__", "Constructor."], [1271, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1272, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1273, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1274, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OFixN": [[1276, 1, 1, "", "__init__", "Constructor."], [1277, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1278, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1279, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1280, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN": [[1282, 1, 1, "", "__init__", "Constructor."], [1283, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1284, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1285, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1286, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMinN": [[1288, 1, 1, "", "__init__", "Constructor."], [1289, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.opt.problems.layout.geom_layouts.objectives.Objective": [[1291, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1292, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.output": [[914, 0, 1, "", "Animator", "Creates an animation from generators that yield lists of artists."], [919, 0, 1, "", "FarmLayoutOutput", "Plot the farm layout"], [928, 0, 1, "", "FarmResultsEval", "Evaluates farm results data."], [948, 0, 1, "", "FlowPlots2D", "Class for horizontal or vertical 2D flow plots"], [955, 0, 1, "", "Output", "Base class for foxes output."], [961, 0, 1, "", "PointCalculator", "Computes results at given points"], [964, 0, 1, "", "ResultsWriter", "Writes results farm data to file."], [968, 0, 1, "", "RosePlotOutput", "Class for rose plot creation"], [974, 0, 1, "", "SeqFlowAnimationPlugin", "Plugin for creating data for a 2D flow animation during sequential iterations"], [979, 0, 1, "", "SliceData", "Create data for horizontal or vertical 2D slices"], [987, 0, 1, "", "StateTurbineMap", "Creates heat maps with turbines on the one and states on the other axis."], [990, 0, 1, "", "StatesRosePlotOutput", "Class for rose plot creation directly from states"], [992, 0, 1, "", "TurbineTypeCurves", "Creates power and ct curves for turbine types, optionally including derating/boost."]], "foxes.output.Animator": [[915, 1, 1, "", "__init__", "Constructor."], [916, 1, 1, "", "add_generator", "Add a generator."], [917, 1, 1, "", "animate", "Create the animation"], [918, 2, 1, "", "generators", "The artist generators"]], "foxes.output.FarmLayoutOutput": [[920, 1, 1, "", "__init__", "Constructor."], [921, 1, 1, "", "get_figure", "Creates farm layout figure."], [922, 1, 1, "", "get_layout_data", "Returns wind farm layout."], [923, 1, 1, "", "get_layout_dict", "Returns wind farm layout."], [924, 1, 1, "", "write_csv", "Writes csv layout file."], [925, 1, 1, "", "write_json", "Writes xyh layout file."], [926, 1, 1, "", "write_plot", "Writes the layout plot to file."], [927, 1, 1, "", "write_xyh", "Writes xyh layout file."]], "foxes.output.FarmResultsEval": [[929, 1, 1, "", "__init__", "Constructor."], [930, 1, 1, "", "add_capacity", "Adds capacity to the farm results"], [931, 1, 1, "", "add_efficiency", "Adds efficiency to the farm results"], [932, 1, 1, "", "calc_farm_efficiency", "Calculates farm efficiency"], [933, 1, 1, "", "calc_farm_mean", "Calculates the mean over states and turbines."], [934, 1, 1, "", "calc_farm_sum", "Calculates the sum over states and turbines."], [935, 1, 1, "", "calc_farm_yield", "Calculates yield, P75 and P90 at the farm level"], [936, 1, 1, "", "calc_mean_farm_power", "Calculates the mean total farm power."], [937, 1, 1, "", "calc_states_mean", "Calculates the mean wrt states."], [938, 1, 1, "", "calc_states_std", "Calculates the standard deviation wrt states."], [939, 1, 1, "", "calc_states_sum", "Calculates the sum wrt states."], [940, 1, 1, "", "calc_turbine_mean", "Calculates the mean wrt turbines."], [941, 1, 1, "", "calc_turbine_sum", "Calculates the sum wrt turbines."], [942, 1, 1, "", "calc_turbine_yield", "Calculates the yield per turbine"], [943, 1, 1, "", "gen_stdata", "Generates state-turbine data, intended to be used in animations"], [944, 1, 1, "", "reduce_all", "Reduces states and turbine dimension by some operation"], [945, 1, 1, "", "reduce_states", "Reduces the states dimension by some operation"], [946, 1, 1, "", "reduce_turbines", "Reduces the turbine dimension by some operation"], [947, 1, 1, "", "weinsum", "Calculates Einstein sum, adding weights as last argument to the given fields."]], "foxes.output.FlowPlots2D": [[949, 1, 1, "", "gen_states_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [950, 1, 1, "", "gen_states_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [951, 1, 1, "", "gen_states_fig_yz", "Generates 2D farm flow figure in a vertical yz-plane."], [952, 1, 1, "", "get_mean_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [953, 1, 1, "", "get_mean_fig_xz", "Generates 2D farm flow figure in a horizontal xz-plane."], [954, 1, 1, "", "get_mean_fig_yz", "Generates 2D farm flow figure in a horizontal yz-plane."]], "foxes.output.Output": [[956, 1, 1, "", "__init__", "Constructor."], [957, 1, 1, "", "get_fpath", "Gets the total file path"], [958, 1, 1, "", "new", "Run-time output model factory."], [959, 1, 1, "", "print_models", "Prints all model names."], [960, 1, 1, "", "write", "Writes data to file via pandas."]], "foxes.output.PointCalculator": [[962, 1, 1, "", "__init__", "Constructor."], [963, 1, 1, "", "calculate", "Calculate point results"]], "foxes.output.ResultsWriter": [[965, 1, 1, "", "__init__", "Constructor."], [966, 1, 1, "", "write_csv", "Writes a csv file"], [967, 1, 1, "", "write_nc", "Writes a netCDF file"]], "foxes.output.RosePlotOutput": [[969, 1, 1, "", "__init__", "Constructor."], [970, 1, 1, "", "get_data", "Get pandas DataFrame with wind rose data."], [971, 1, 1, "", "get_data_info", "Returns default description for a variable."], [972, 1, 1, "", "get_figure", "Creates px figure object"], [973, 1, 1, "", "write_figure", "Write rose plot to file"]], "foxes.output.SeqFlowAnimationPlugin": [[975, 1, 1, "", "__init__", "Constructor."], [976, 1, 1, "", "gen_images", ""], [977, 1, 1, "", "initialize", "Initialize data based on the intial iterator"], [978, 1, 1, "", "update", "Updates data based on current iteration"]], "foxes.output.SliceData": [[980, 1, 1, "", "__init__", "Constructor."], [981, 1, 1, "", "get_mean_data_xy", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [982, 1, 1, "", "get_mean_data_xz", "Creates mean data of 2D farm flow slices in an xz-plane."], [983, 1, 1, "", "get_mean_data_yz", "Creates mean data of 2D farm flow slices in a yz-plane."], [984, 1, 1, "", "get_states_data_xy", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [985, 1, 1, "", "get_states_data_xz", "Creates states data of 2D farm flow slices in an xz-plane."], [986, 1, 1, "", "get_states_data_yz", "Creates states data of 2D farm flow slices in a yz-plane."]], "foxes.output.StateTurbineMap": [[988, 1, 1, "", "__init__", "Constructor."], [989, 1, 1, "", "plot_map", "Plot the heat map for the selected variable."]], "foxes.output.StatesRosePlotOutput": [[991, 1, 1, "", "__init__", "Constructor."]], "foxes.output.TurbineTypeCurves": [[993, 1, 1, "", "__init__", "Constructor."], [994, 1, 1, "", "plot_curves", "Plot the power or ct curve."]], "foxes.output.flow_plots_2d": [[995, 5, 1, "", "get_fig", "Helper function that creates the flow image plot."]], "foxes.utils": [[996, 0, 1, "", "DataBook", "Container class for file paths, either directly given or as static data within a package."], [1004, 0, 1, "", "PandasFileHelper", "This class helps reading and writing data to files via pandas."], [1024, 5, 1, "", "all_subclasses", "Searches all classes derived from some base class."], [1025, 5, 1, "", "cubic_roots", "Calculate real roots of polynomials of degree 3."], [1026, 5, 1, "", "delta_wd", "Calculates wd_b - wd_a."], [1027, 5, 1, "", "exec_python", "Executes strings that start with the indicator as python commands, returns one value"], [1075, 5, 1, "", "import_module", "Imports a module dynamically."], [1378, 5, 1, "", "read_shp", "Read a shape file"], [1379, 5, 1, "", "read_shp_polygons", "Reads the polygon points from a shp file."], [1395, 5, 1, "", "show_plotly_fig", "Displays a plotly figure in a window"], [1396, 5, 1, "", "shp2csv", "Read shape file, write csv file"], [1397, 5, 1, "", "shp2geom2d", "Read shapefile into geom2d geometry"], [1400, 5, 1, "", "uv2wd", "Calculate wind direction from wind vectors."], [1401, 5, 1, "", "wd2uv", "Calculate wind vectors from wind directions in degrees."], [1402, 5, 1, "", "wd2wdvec", "Calculate wind direction vectors from wind directions in degrees."], [1403, 5, 1, "", "wdvec2wd", "Calculate wind direction from wind direction vectors."], [1404, 5, 1, "", "write_nc", "Writes a dataset to netCFD file"]], "foxes.utils.DataBook": [[997, 1, 1, "", "__init__", "Constructor."], [998, 1, 1, "", "add_data_package", "Add static files from a package location."], [999, 1, 1, "", "add_data_package_file", "Add a static file from a package location."], [1000, 1, 1, "", "add_file", "Add a file path"], [1001, 1, 1, "", "add_files", "Add file paths"], [1002, 1, 1, "", "get_file_path", "Get path of a file"], [1003, 1, 1, "", "toc", "Get list of contents"]], "foxes.utils.PandasFileHelper": [[1005, 4, 1, "", "DATA_FILE_FORMATS", ""], [1006, 4, 1, "", "DEFAULT_FORMAT_DICT", ""], [1007, 4, 1, "", "DEFAULT_READING_PARAMETERS", ""], [1008, 4, 1, "", "DEFAULT_WRITING_PARAMETERS", ""], [1009, 1, 1, "", "read_file", "Helper for reading data according to file ending."], [1010, 1, 1, "", "write_file", "Helper for writing data according to file ending."]], "foxes.utils.abl.neutral": [[1011, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [1012, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [1013, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.sheared": [[1014, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"]], "foxes.utils.abl.stable": [[1015, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [1016, 5, 1, "", "lgz", "Calculates the log factor for wind speed profiles."], [1017, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [1018, 5, 1, "", "psi", "The Psi function"], [1019, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.unstable": [[1020, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [1021, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [1022, 5, 1, "", "psi", "The Psi function"], [1023, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.geom2d": [[1028, 0, 1, "", "AreaGeometry", "Abstract base class for closed 2D geometries."], [1035, 0, 1, "", "AreaIntersection", "The intersection of area geometries."], [1037, 0, 1, "", "AreaUnion", "The union of area geometries."], [1045, 0, 1, "", "Circle", "This class represents the area of a circle."], [1052, 0, 1, "", "ClosedPolygon", "This class represents a closed 2D polygon."], [1059, 0, 1, "", "HalfPlane", "This class represents a half plane in 2d."], [1067, 0, 1, "", "InvertedAreaGeometry", "Base class for inverted geometries."]], "foxes.utils.geom2d.AreaGeometry": [[1029, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1030, 1, 1, "", "inverse", "Get the inverted geometry"], [1031, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [1032, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [1033, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1034, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.AreaIntersection": [[1036, 1, 1, "", "__new__", "Constructor."]], "foxes.utils.geom2d.AreaUnion": [[1038, 1, 1, "", "__init__", "Constructor."], [1039, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1040, 1, 1, "", "inverse", "Get the inverted geometry"], [1041, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [1042, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [1043, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1044, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.Circle": [[1046, 1, 1, "", "__init__", "Cobnstructor."], [1047, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1048, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [1049, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [1050, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1051, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.ClosedPolygon": [[1053, 1, 1, "", "__init__", "Constructor."], [1054, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1055, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [1056, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [1057, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1058, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.HalfPlane": [[1060, 1, 1, "", "__init__", "Constructor."], [1061, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1062, 1, 1, "", "inverse", "Get the inverted geometry"], [1063, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [1064, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [1065, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1066, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.InvertedAreaGeometry": [[1068, 1, 1, "", "__init__", "Constructor."], [1069, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1070, 1, 1, "", "inverse", "Get the inverted geometry"], [1071, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [1072, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [1073, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1074, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.runners": [[1380, 0, 1, "", "DaskRunner", "Class for function execution via dask"], [1387, 0, 1, "", "DefaultRunner", "Class for default function execution."], [1389, 0, 1, "", "Runner", "Abstract base class for runners."]], "foxes.utils.runners.DaskRunner": [[1381, 1, 1, "", "__init__", "Constructor."], [1382, 1, 1, "", "finalize", "Finallize the runner"], [1383, 1, 1, "", "initialize", "Initialize the runner"], [1384, 1, 1, "", "is_distributed", ""], [1385, 1, 1, "", "print", "Prints if verbosity is not zero"], [1386, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.DefaultRunner": [[1388, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.Runner": [[1390, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1391, 1, 1, "", "finalize", "Finalize the runner"], [1392, 1, 1, "", "initialize", "Initialize the runner"], [1393, 2, 1, "", "initialized", "Initialization flag"], [1394, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.two_circles": [[1398, 5, 1, "", "area", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."], [1399, 5, 1, "", "calc_area", "Calculates the intersection of two circles."]], "foxes.variables": [[445, 3, 1, "", "AMB_CAP", "Ambient capacity, equals AMB_P/P_nominal"], [446, 3, 1, "", "AMB_CT", "The ambient thrust coefficient"], [447, 3, 1, "", "AMB_P", "The ambient power, unit depends on user choice"], [448, 3, 1, "", "AMB_REWS", "Ambient rotor effective wind speed in m/s"], [449, 3, 1, "", "AMB_REWS2", "Ambient rotor effective wind speed in m/s, calculated from second moment"], [450, 3, 1, "", "AMB_REWS3", "Ambient rotor effective wind speed in m/s, calculated from third moment"], [451, 3, 1, "", "AMB_RHO", "The ambient air density in kg/m3"], [452, 3, 1, "", "AMB_T", "The ambient temperature in Kelvin"], [453, 3, 1, "", "AMB_TI", "The ambient turbulence intensity"], [454, 3, 1, "", "AMB_WD", "The ambient wind direction in degrees"], [455, 3, 1, "", "AMB_WS", "The ambient wind speed in m/s"], [456, 3, 1, "", "AMB_YAW", "The ambient absolute yaw angle of  a turbine in degrees"], [457, 3, 1, "", "AMB_YAWM", "The ambient relative yaw angle of  a turbine in degrees"], [458, 3, 1, "", "AMB_YLD", "Ambient yield in GWh/a"], [459, 3, 1, "", "CAP", "Capacity, equals P/P_nominal"], [460, 3, 1, "", "CT", "The thrust coefficient"], [461, 3, 1, "", "D", "The rotor diameter in m"], [462, 3, 1, "", "EFF", "Efficiency, equals P/AMB_P"], [463, 3, 1, "", "H", "The height over ground in m"], [464, 3, 1, "", "K", "Wake growth parameter"], [465, 3, 1, "", "KB", "KTI value for zero TI, K = KB + KTI*TI"], [466, 3, 1, "", "KTI", "Factor between K and TI, K = KB + KTI*TI"], [467, 3, 1, "", "MAX_P", "The maximal power, for derating/boost"], [468, 3, 1, "", "MOL", "The Monin-Ubukhof length in m"], [469, 3, 1, "", "ORDER", "The turbine order"], [470, 3, 1, "", "P", "The power, unit depends on user choice"], [471, 3, 1, "", "PA_ALPHA", "The alpha parameter of the PorteAgel wake model"], [472, 3, 1, "", "PA_BETA", "The beta parameter of the PorteAgel wake model"], [473, 3, 1, "", "REWS", "Rotor effective wind speed in m/s"], [474, 3, 1, "", "REWS2", "Rotor effective wind speed in m/s, calculated from second moment"], [475, 3, 1, "", "REWS3", "Rotor effective wind speed in m/s, calculated from third moment"], [476, 3, 1, "", "RHO", "The air density in kg/m3"], [477, 3, 1, "", "SHEAR", "The shear exponent"], [478, 3, 1, "", "T", "The temperature in Kelvin"], [479, 3, 1, "", "TI", "The turbulence intensity"], [480, 3, 1, "", "TXYH", "The turbine rotor centre coordinate  vector (x, y, height)"], [481, 3, 1, "", "WD", "The wind direction in degrees"], [482, 3, 1, "", "WEIGHT", "The statistical weight of a state"], [483, 3, 1, "", "WS", "The wind speed in m/s"], [484, 3, 1, "", "X", "The x coordinate in m"], [485, 3, 1, "", "Y", "The y coordinate in"], [486, 3, 1, "", "YAW", "The absolute yaw angle of a turbine in degrees"], [487, 3, 1, "", "YAWM", "The relative yaw angle of a turbine in degrees"], [488, 3, 1, "", "YLD", "Yield in GWh/a"], [489, 3, 1, "", "Z0", "The roughness length in m"], [490, 3, 1, "", "amb2var", "Mapping from ambient variable to the corresponding waked variable"], [491, 3, 1, "", "var2amb", "Mapping from variable to the corresponding ambient variable"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:data", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"attribut": [0, 9, 16, 46, 53, 57, 62, 66, 71, 77, 83, 93, 102, 117, 128, 137, 147, 152, 160, 173, 185, 191, 207, 214, 236, 498, 506, 526, 534, 552, 558, 561, 567, 574, 582, 593, 606, 614, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 690, 702, 708, 714, 720, 726, 730, 734, 738, 742, 749, 753, 759, 764, 771, 778, 784, 793, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 914, 919, 928, 955, 961, 964, 974, 979, 987, 992, 996, 1004, 1037, 1045, 1052, 1059, 1076, 1099, 1124, 1172, 1180, 1191, 1239, 1294, 1304, 1314, 1324, 1347, 1363, 1380], "public": [0, 9, 16, 35, 40, 46, 53, 57, 62, 66, 71, 75, 77, 83, 87, 92, 102, 117, 125, 128, 137, 147, 152, 159, 160, 173, 181, 185, 191, 201, 207, 211, 214, 217, 221, 228, 233, 236, 241, 246, 371, 498, 506, 517, 519, 526, 534, 547, 551, 552, 558, 561, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 914, 919, 928, 948, 955, 961, 964, 968, 974, 979, 987, 990, 992, 996, 1004, 1028, 1035, 1037, 1045, 1052, 1059, 1067, 1076, 1097, 1099, 1106, 1117, 1124, 1166, 1172, 1180, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1380, 1387, 1389], "member": [0, 9, 16, 35, 40, 46, 53, 57, 62, 66, 71, 75, 77, 83, 87, 92, 102, 117, 125, 128, 137, 147, 152, 159, 160, 173, 181, 185, 191, 201, 207, 211, 214, 217, 221, 228, 233, 236, 241, 246, 371, 498, 506, 517, 519, 526, 534, 547, 551, 552, 558, 561, 567, 574, 582, 590, 593, 600, 606, 611, 614, 618, 624, 631, 638, 642, 647, 653, 659, 664, 671, 675, 680, 684, 687, 690, 695, 697, 699, 702, 708, 714, 720, 726, 730, 734, 738, 742, 746, 749, 753, 759, 764, 771, 778, 784, 790, 793, 800, 803, 808, 813, 819, 825, 830, 835, 856, 862, 867, 873, 877, 881, 885, 889, 894, 899, 904, 909, 914, 919, 928, 948, 955, 961, 964, 968, 974, 979, 987, 990, 992, 996, 1004, 1028, 1035, 1037, 1045, 1052, 1059, 1067, 1076, 1097, 1099, 1106, 1117, 1124, 1166, 1172, 1180, 1189, 1191, 1197, 1199, 1213, 1218, 1223, 1228, 1234, 1239, 1244, 1250, 1256, 1263, 1269, 1275, 1281, 1287, 1290, 1294, 1304, 1314, 1324, 1338, 1347, 1363, 1380, 1387, 1389], "paramet": [1, 2, 3, 4, 5, 6, 10, 11, 12, 14, 17, 20, 21, 27, 36, 37, 38, 42, 43, 44, 47, 48, 49, 50, 51, 55, 56, 59, 60, 61, 63, 64, 67, 68, 69, 72, 73, 78, 79, 80, 81, 84, 85, 86, 87, 89, 90, 91, 92, 94, 97, 98, 101, 103, 105, 106, 107, 108, 112, 113, 114, 115, 118, 119, 120, 124, 126, 127, 129, 130, 131, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 163, 164, 165, 166, 167, 169, 172, 174, 175, 176, 177, 178, 179, 182, 184, 186, 187, 188, 189, 192, 193, 195, 196, 198, 199, 203, 204, 206, 208, 209, 210, 212, 213, 215, 216, 218, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 242, 243, 244, 338, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 505, 508, 509, 510, 512, 513, 514, 516, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 533, 536, 537, 538, 540, 541, 542, 543, 546, 550, 553, 555, 556, 560, 563, 564, 565, 566, 568, 569, 570, 571, 572, 575, 577, 578, 579, 580, 583, 585, 586, 587, 588, 591, 592, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 607, 608, 609, 610, 612, 613, 615, 616, 617, 620, 621, 625, 628, 632, 635, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 651, 654, 655, 656, 657, 660, 661, 662, 663, 665, 666, 667, 668, 669, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 685, 686, 688, 689, 691, 693, 694, 696, 698, 700, 701, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 750, 751, 754, 755, 756, 757, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 772, 774, 775, 776, 777, 779, 780, 781, 782, 783, 785, 786, 787, 788, 791, 792, 794, 795, 796, 797, 798, 801, 802, 804, 805, 806, 807, 809, 810, 811, 812, 814, 816, 817, 818, 820, 822, 823, 824, 826, 828, 829, 831, 833, 834, 850, 851, 853, 854, 857, 859, 860, 861, 863, 865, 866, 868, 870, 871, 872, 874, 875, 876, 878, 879, 880, 882, 883, 884, 886, 887, 888, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 915, 916, 917, 920, 921, 924, 925, 926, 927, 929, 930, 931, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 960, 962, 963, 965, 966, 967, 969, 970, 971, 972, 973, 975, 977, 978, 980, 981, 982, 983, 984, 985, 986, 988, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1033, 1034, 1036, 1038, 1039, 1043, 1044, 1046, 1047, 1050, 1051, 1053, 1054, 1057, 1058, 1060, 1061, 1065, 1066, 1068, 1069, 1073, 1074, 1075, 1077, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1091, 1092, 1098, 1100, 1101, 1102, 1103, 1107, 1108, 1109, 1110, 1118, 1119, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1138, 1139, 1141, 1142, 1143, 1146, 1159, 1161, 1162, 1163, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1179, 1181, 1182, 1183, 1184, 1185, 1189, 1190, 1192, 1193, 1194, 1197, 1198, 1200, 1201, 1204, 1209, 1210, 1214, 1215, 1216, 1219, 1220, 1221, 1224, 1225, 1226, 1229, 1230, 1231, 1232, 1236, 1237, 1239, 1241, 1242, 1245, 1246, 1247, 1248, 1251, 1252, 1253, 1255, 1257, 1258, 1259, 1260, 1264, 1265, 1266, 1270, 1271, 1272, 1276, 1277, 1278, 1282, 1283, 1284, 1288, 1293, 1295, 1296, 1297, 1298, 1300, 1305, 1306, 1307, 1308, 1310, 1315, 1316, 1317, 1318, 1320, 1325, 1326, 1327, 1328, 1331, 1339, 1341, 1344, 1345, 1348, 1349, 1352, 1357, 1358, 1359, 1360, 1369, 1370, 1372, 1375, 1376, 1378, 1379, 1381, 1386, 1388, 1394, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404], "return": [2, 3, 4, 6, 11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 42, 44, 45, 48, 51, 52, 55, 56, 59, 61, 64, 65, 69, 70, 73, 74, 79, 81, 82, 85, 86, 94, 95, 96, 98, 99, 100, 101, 108, 109, 110, 113, 120, 121, 122, 123, 124, 126, 127, 131, 132, 133, 134, 135, 136, 139, 143, 144, 146, 149, 150, 151, 155, 157, 158, 165, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 188, 189, 190, 193, 194, 196, 197, 199, 200, 202, 203, 204, 205, 206, 212, 218, 219, 222, 223, 224, 225, 234, 235, 239, 240, 243, 244, 257, 338, 376, 500, 501, 502, 503, 504, 505, 509, 511, 512, 513, 515, 516, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 537, 539, 541, 542, 544, 545, 546, 549, 550, 555, 556, 557, 565, 572, 573, 580, 581, 588, 589, 598, 599, 604, 605, 608, 609, 610, 612, 613, 616, 617, 619, 621, 622, 623, 627, 629, 630, 634, 636, 637, 640, 641, 644, 645, 646, 649, 651, 655, 657, 658, 661, 663, 667, 668, 669, 673, 674, 677, 679, 682, 683, 685, 686, 688, 689, 693, 694, 700, 701, 704, 706, 707, 710, 712, 713, 716, 718, 719, 722, 724, 725, 728, 729, 732, 733, 736, 737, 740, 741, 744, 745, 747, 748, 751, 752, 755, 756, 757, 758, 761, 762, 763, 766, 767, 768, 774, 775, 776, 780, 781, 782, 786, 787, 788, 789, 791, 792, 795, 798, 799, 801, 802, 805, 806, 807, 816, 817, 822, 823, 828, 833, 853, 854, 855, 859, 860, 865, 870, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 893, 896, 897, 898, 901, 902, 903, 906, 907, 908, 911, 912, 913, 917, 918, 921, 922, 923, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 944, 945, 946, 947, 952, 953, 954, 957, 963, 970, 971, 972, 973, 981, 982, 983, 984, 985, 986, 989, 994, 1002, 1003, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1040, 1041, 1042, 1043, 1044, 1048, 1049, 1050, 1051, 1055, 1056, 1057, 1058, 1062, 1063, 1064, 1065, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1087, 1088, 1089, 1090, 1093, 1094, 1095, 1096, 1101, 1102, 1104, 1105, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1120, 1121, 1123, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165, 1168, 1169, 1174, 1176, 1177, 1178, 1179, 1182, 1183, 1184, 1186, 1187, 1188, 1193, 1194, 1195, 1196, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1220, 1221, 1222, 1225, 1226, 1227, 1230, 1231, 1233, 1236, 1237, 1238, 1242, 1243, 1246, 1247, 1249, 1252, 1253, 1254, 1255, 1258, 1259, 1261, 1262, 1265, 1266, 1267, 1268, 1271, 1272, 1273, 1274, 1277, 1278, 1279, 1280, 1283, 1284, 1285, 1286, 1289, 1292, 1293, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1306, 1307, 1308, 1309, 1311, 1312, 1313, 1316, 1317, 1318, 1319, 1321, 1322, 1323, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1357, 1358, 1361, 1362, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1386, 1388, 1393, 1394, 1397, 1398, 1399, 1400, 1401, 1402, 1403], "exampl": [257, 329, 376, 417, 419, 1255, 1293, 1424], "note": [257, 376, 784, 813, 819, 825, 830, 835, 862, 1255, 1293], "see": [257, 376], "also": [257, 376], "yield": [943, 949, 950, 951, 995], "rais": [1255, 1293], "api": 1405, "fox": [1406, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1426, 1434], "algorithm": [1406, 1407, 1408, 1409], "downwind": 1407, "model": [1407, 1408, 1409, 1414, 1422, 1428, 1432], "iter": 1408, "sequenti": [1409, 1437], "constant": 1410, "core": [1411, 1415], "input": 1413, "farm_layout": 1413, "state": [1413, 1429], "windio": 1413, "farm_control": 1414, "farm_model": 1414, "partial_wak": 1414, "point_model": 1414, "rotor_model": 1414, "turbine_model": 1414, "turbine_typ": 1414, "vertical_profil": 1414, "wake_fram": 1414, "wake_model": [1414, 1422], "wake_superposit": 1414, "opt": [1415, 1416, 1417], "problem": [1415, 1416, 1417], "object": [1415, 1417], "constraint": [1415, 1417], "layout": [1416, 1417, 1429, 1431], "geom_layout": [1416, 1417], "output": 1418, "flow_plots_2d": 1418, "util": [1419, 1420], "abl": [1419, 1420], "geom2d": 1419, "runner": 1419, "two_circl": 1419, "neutral": 1420, "stabl": 1420, "unstabl": 1420, "shear": 1420, "variabl": 1421, "wind": [1422, 1429, 1433, 1436, 1441], "ti": 1422, "induct": 1422, "citat": 1423, "journal": 1423, "paper": 1423, "version": 1423, "specif": 1423, "doi": 1423, "histori": 1425, "v0": 1425, "1": [1425, 1439], "0": 1425, "alpha": 1425, "2": [1425, 1437], "3": 1425, "4": 1425, "5": 1425, "6": 1425, "welcom": 1426, "licens": 1426, "content": 1426, "contribut": 1426, "acknowledg": 1426, "instal": 1427, "requir": 1427, "via": 1427, "pip": 1427, "virtual": 1427, "python": 1427, "environ": 1427, "standard": 1427, "user": 1427, "develop": 1427, "conda": 1427, "prepar": 1427, "blockag": 1428, "static": 1429, "data": [1429, 1433, 1440, 1441], "farm": 1429, "test_farm_67": 1429, "csv": 1429, "ambient": 1429, "wrf": 1429, "timeseri": [1429, 1440], "4464": 1429, "gz": 1429, "abl_states_6000": 1429, "timeseries_3000": 1429, "timeseries_8000": 1429, "timeseries_100": 1429, "wind_rose_bremen": 1429, "wind_rot": 1429, "nc": 1429, "power": [1429, 1435], "thrust": 1429, "curv": 1429, "dtu": 1429, "10mw": 1429, "d178d3": 1429, "h119": 1429, "iea": 1429, "15mw": 1429, "d240": 1429, "h150": 1429, "iwt": 1429, "7d5mw": 1429, "d164": 1429, "h100": 1429, "nrel": 1429, "5mw": 1429, "d126": 1429, "h90": 1429, "file": 1429, "path": 1429, "heterogen": 1430, "flow": 1430, "optim": 1431, "The": 1432, "book": 1432, "multi": 1433, "height": 1433, "overview": 1434, "how": 1434, "setup": 1434, "mask": 1435, "sector": 1436, "manag": 1436, "dynam": [1437, 1439], "wake": [1437, 1439, 1442], "propag": [1437, 1439], "singl": 1438, "row": 1438, "turbin": 1438, "spatial": 1439, "homogen": 1439, "rose": 1441, "yaw": 1442, "rotor": 1442}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Attributes": [[0, "attributes"], [9, "attributes"], [16, "attributes"], [46, "attributes"], [53, "attributes"], [57, "attributes"], [62, "attributes"], [66, "attributes"], [71, "attributes"], [77, "attributes"], [83, "attributes"], [93, "attributes"], [102, "attributes"], [117, "attributes"], [128, "attributes"], [137, "attributes"], [147, "attributes"], [152, "attributes"], [160, "attributes"], [173, "attributes"], [185, "attributes"], [191, "attributes"], [207, "attributes"], [214, "attributes"], [236, "attributes"], [498, "attributes"], [506, "attributes"], [526, "attributes"], [534, "attributes"], [552, "attributes"], [558, "attributes"], [561, "attributes"], [567, "attributes"], [574, "attributes"], [582, "attributes"], [593, "attributes"], [606, "attributes"], [614, "attributes"], [624, "attributes"], [631, "attributes"], [638, "attributes"], [642, "attributes"], [647, "attributes"], [653, "attributes"], [659, "attributes"], [664, "attributes"], [671, "attributes"], [675, "attributes"], [680, "attributes"], [690, "attributes"], [702, "attributes"], [708, "attributes"], [714, "attributes"], [720, "attributes"], [726, "attributes"], [730, "attributes"], [734, "attributes"], [738, "attributes"], [742, "attributes"], [749, "attributes"], [753, "attributes"], [759, "attributes"], [764, "attributes"], [771, "attributes"], [778, "attributes"], [784, "attributes"], [793, "attributes"], [808, "attributes"], [813, "attributes"], [819, "attributes"], [825, "attributes"], [830, "attributes"], [835, "attributes"], [856, "attributes"], [862, "attributes"], [867, "attributes"], [873, "attributes"], [877, "attributes"], [881, "attributes"], [885, "attributes"], [889, "attributes"], [894, "attributes"], [899, "attributes"], [904, "attributes"], [909, "attributes"], [914, "attributes"], [919, "attributes"], [928, "attributes"], [955, "attributes"], [961, "attributes"], [964, "attributes"], [974, "attributes"], [979, "attributes"], [987, "attributes"], [992, "attributes"], [996, "attributes"], [1004, "attributes"], [1037, "attributes"], [1045, "attributes"], [1052, "attributes"], [1059, "attributes"], [1076, "attributes"], [1099, "attributes"], [1124, "attributes"], [1172, "attributes"], [1180, "attributes"], [1191, "attributes"], [1239, "attributes"], [1294, "attributes"], [1304, "attributes"], [1314, "attributes"], [1324, "attributes"], [1347, "attributes"], [1363, "attributes"], [1380, "attributes"]], "Public members": [[0, "public-members"], [9, "public-members"], [16, "public-members"], [35, "public-members"], [40, "public-members"], [46, "public-members"], [53, "public-members"], [57, "public-members"], [62, "public-members"], [66, "public-members"], [71, "public-members"], [75, "public-members"], [77, "public-members"], [83, "public-members"], [87, "public-members"], [92, "public-members"], [102, "public-members"], [117, "public-members"], [125, "public-members"], [128, "public-members"], [137, "public-members"], [147, "public-members"], [152, "public-members"], [159, "public-members"], [160, "public-members"], [173, "public-members"], [181, "public-members"], [185, "public-members"], [191, "public-members"], [201, "public-members"], [207, "public-members"], [211, "public-members"], [214, "public-members"], [217, "public-members"], [221, "public-members"], [228, "public-members"], [233, "public-members"], [236, "public-members"], [241, "public-members"], [246, "public-members"], [371, "public-members"], [498, "public-members"], [506, "public-members"], [517, "public-members"], [519, "public-members"], [526, "public-members"], [534, "public-members"], [547, "public-members"], [551, "public-members"], [552, "public-members"], [558, "public-members"], [561, "public-members"], [567, "public-members"], [574, "public-members"], [582, "public-members"], [590, "public-members"], [593, "public-members"], [600, "public-members"], [606, "public-members"], [611, "public-members"], [614, "public-members"], [618, "public-members"], [624, "public-members"], [631, "public-members"], [638, "public-members"], [642, "public-members"], [647, "public-members"], [653, "public-members"], [659, "public-members"], [664, "public-members"], [671, "public-members"], [675, "public-members"], [680, "public-members"], [684, "public-members"], [687, "public-members"], [690, "public-members"], [695, "public-members"], [697, "public-members"], [699, "public-members"], [702, "public-members"], [708, "public-members"], [714, "public-members"], [720, "public-members"], [726, "public-members"], [730, "public-members"], [734, "public-members"], [738, "public-members"], [742, "public-members"], [746, "public-members"], [749, "public-members"], [753, "public-members"], [759, "public-members"], [764, "public-members"], [771, "public-members"], [778, "public-members"], [784, "public-members"], [790, "public-members"], [793, "public-members"], [800, "public-members"], [803, "public-members"], [808, "public-members"], [813, "public-members"], [819, "public-members"], [825, "public-members"], [830, "public-members"], [835, "public-members"], [856, "public-members"], [862, "public-members"], [867, "public-members"], [873, "public-members"], [877, "public-members"], [881, "public-members"], [885, "public-members"], [889, "public-members"], [894, "public-members"], [899, "public-members"], [904, "public-members"], [909, "public-members"], [914, "public-members"], [919, "public-members"], [928, "public-members"], [948, "public-members"], [955, "public-members"], [961, "public-members"], [964, "public-members"], [968, "public-members"], [974, "public-members"], [979, "public-members"], [987, "public-members"], [990, "public-members"], [992, "public-members"], [996, "public-members"], [1004, "public-members"], [1028, "public-members"], [1035, "public-members"], [1037, "public-members"], [1045, "public-members"], [1052, "public-members"], [1059, "public-members"], [1067, "public-members"], [1076, "public-members"], [1097, "public-members"], [1099, "public-members"], [1106, "public-members"], [1117, "public-members"], [1124, "public-members"], [1166, "public-members"], [1172, "public-members"], [1180, "public-members"], [1189, "public-members"], [1191, "public-members"], [1197, "public-members"], [1199, "public-members"], [1213, "public-members"], [1218, "public-members"], [1223, "public-members"], [1228, "public-members"], [1234, "public-members"], [1239, "public-members"], [1244, "public-members"], [1250, "public-members"], [1256, "public-members"], [1263, "public-members"], [1269, "public-members"], [1275, "public-members"], [1281, "public-members"], [1287, "public-members"], [1290, "public-members"], [1294, "public-members"], [1304, "public-members"], [1314, "public-members"], [1324, "public-members"], [1338, "public-members"], [1347, "public-members"], [1363, "public-members"], [1380, "public-members"], [1387, "public-members"], [1389, "public-members"]], "Parameters": [[1, "parameters"], [2, "parameters"], [3, "parameters"], [4, "parameters"], [5, "parameters"], [6, "parameters"], [10, "parameters"], [11, "parameters"], [12, "parameters"], [14, "parameters"], [17, "parameters"], [20, "parameters"], [21, "parameters"], [27, "parameters"], [36, "parameters"], [37, "parameters"], [38, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [47, "parameters"], [48, "parameters"], [49, "parameters"], [50, "parameters"], [51, "parameters"], [55, "parameters"], [56, "parameters"], [59, "parameters"], [60, "parameters"], [61, "parameters"], [63, "parameters"], [64, "parameters"], [67, "parameters"], [68, "parameters"], [69, "parameters"], [72, "parameters"], [73, "parameters"], [78, "parameters"], [79, "parameters"], [80, "parameters"], [81, "parameters"], [84, "parameters"], [85, "parameters"], [86, "parameters"], [87, "parameters"], [89, "parameters"], [90, "parameters"], [91, "parameters"], [92, "parameters"], [94, "parameters"], [97, "parameters"], [98, "parameters"], [101, "parameters"], [103, "parameters"], [105, "parameters"], [106, "parameters"], [107, "parameters"], [108, "parameters"], [112, "parameters"], [113, "parameters"], [114, "parameters"], [115, "parameters"], [118, "parameters"], [119, "parameters"], [120, "parameters"], [124, "parameters"], [126, "parameters"], [127, "parameters"], [129, "parameters"], [130, "parameters"], [131, "parameters"], [133, "parameters"], [136, "parameters"], [138, "parameters"], [139, "parameters"], [140, "parameters"], [141, "parameters"], [142, "parameters"], [143, "parameters"], [144, "parameters"], [145, "parameters"], [148, "parameters"], [149, "parameters"], [150, "parameters"], [151, "parameters"], [153, "parameters"], [154, "parameters"], [155, "parameters"], [156, "parameters"], [157, "parameters"], [163, "parameters"], [164, "parameters"], [165, "parameters"], [166, "parameters"], [167, "parameters"], [169, "parameters"], [172, "parameters"], [174, "parameters"], [175, "parameters"], [176, "parameters"], [177, "parameters"], [178, "parameters"], [179, "parameters"], [182, "parameters"], [184, "parameters"], [186, "parameters"], [187, "parameters"], [188, "parameters"], [189, "parameters"], [192, "parameters"], [193, "parameters"], [195, "parameters"], [196, "parameters"], [198, "parameters"], [199, "parameters"], [203, "parameters"], [204, "parameters"], [206, "parameters"], [208, "parameters"], [209, "parameters"], [210, "parameters"], [212, "parameters"], [213, "parameters"], [215, "parameters"], [216, "parameters"], [218, "parameters"], [220, "parameters"], [222, "parameters"], [223, "parameters"], [224, "parameters"], [225, "parameters"], [226, "parameters"], [227, "parameters"], [229, "parameters"], [230, "parameters"], [231, "parameters"], [232, "parameters"], [234, "parameters"], [235, "parameters"], [237, "parameters"], [238, "parameters"], [242, "parameters"], [243, "parameters"], [244, "parameters"], [338, "parameters"], [492, "parameters"], [493, "parameters"], [494, "parameters"], [495, "parameters"], [496, "parameters"], [497, "parameters"], [499, "parameters"], [500, "parameters"], [502, "parameters"], [503, "parameters"], [505, "parameters"], [508, "parameters"], [509, "parameters"], [510, "parameters"], [512, "parameters"], [513, "parameters"], [514, "parameters"], [516, "parameters"], [519, "parameters"], [520, "parameters"], [521, "parameters"], [522, "parameters"], [523, "parameters"], [525, "parameters"], [527, "parameters"], [528, "parameters"], [529, "parameters"], [530, "parameters"], [533, "parameters"], [536, "parameters"], [537, "parameters"], [538, "parameters"], [540, "parameters"], [541, "parameters"], [542, "parameters"], [543, "parameters"], [546, "parameters"], [550, "parameters"], [553, "parameters"], [555, "parameters"], [556, "parameters"], [560, "parameters"], [563, "parameters"], [564, "parameters"], [565, "parameters"], [566, "parameters"], [568, "parameters"], [569, "parameters"], [570, "parameters"], [571, "parameters"], [572, "parameters"], [575, "parameters"], [577, "parameters"], [578, "parameters"], [579, "parameters"], [580, "parameters"], [583, "parameters"], [585, "parameters"], [586, "parameters"], [587, "parameters"], [588, "parameters"], [591, "parameters"], [592, "parameters"], [594, "parameters"], [595, "parameters"], [596, "parameters"], [597, "parameters"], [598, "parameters"], [601, "parameters"], [602, "parameters"], [603, "parameters"], [604, "parameters"], [605, "parameters"], [607, "parameters"], [608, "parameters"], [609, "parameters"], [610, "parameters"], [612, "parameters"], [613, "parameters"], [615, "parameters"], [616, "parameters"], [617, "parameters"], [620, "parameters"], [621, "parameters"], [625, "parameters"], [628, "parameters"], [632, "parameters"], [635, "parameters"], [639, "parameters"], [640, "parameters"], [641, "parameters"], [643, "parameters"], [644, "parameters"], [645, "parameters"], [646, "parameters"], [648, "parameters"], [649, "parameters"], [650, "parameters"], [651, "parameters"], [654, "parameters"], [655, "parameters"], [656, "parameters"], [657, "parameters"], [660, "parameters"], [661, "parameters"], [662, "parameters"], [663, "parameters"], [665, "parameters"], [666, "parameters"], [667, "parameters"], [668, "parameters"], [669, "parameters"], [672, "parameters"], [673, "parameters"], [674, "parameters"], [676, "parameters"], [677, "parameters"], [678, "parameters"], [679, "parameters"], [681, "parameters"], [682, "parameters"], [683, "parameters"], [685, "parameters"], [686, "parameters"], [688, "parameters"], [689, "parameters"], [691, "parameters"], [693, "parameters"], [694, "parameters"], [696, "parameters"], [698, "parameters"], [700, "parameters"], [701, "parameters"], [703, "parameters"], [704, "parameters"], [705, "parameters"], [706, "parameters"], [707, "parameters"], [709, "parameters"], [710, "parameters"], [711, "parameters"], [712, "parameters"], [713, "parameters"], [715, "parameters"], [716, "parameters"], [717, "parameters"], [718, "parameters"], [719, "parameters"], [721, "parameters"], [722, "parameters"], [723, "parameters"], [724, "parameters"], [725, "parameters"], [727, "parameters"], [728, "parameters"], [731, "parameters"], [732, "parameters"], [735, "parameters"], [736, "parameters"], [739, "parameters"], [740, "parameters"], [743, "parameters"], [744, "parameters"], [747, "parameters"], [750, "parameters"], [751, "parameters"], [754, "parameters"], [755, "parameters"], [756, "parameters"], [757, "parameters"], [760, "parameters"], [761, "parameters"], [762, "parameters"], [763, "parameters"], [765, "parameters"], [766, "parameters"], [767, "parameters"], [768, "parameters"], [769, "parameters"], [770, "parameters"], [772, "parameters"], [774, "parameters"], [775, "parameters"], [776, "parameters"], [777, "parameters"], [779, "parameters"], [780, "parameters"], [781, "parameters"], [782, "parameters"], [783, "parameters"], [785, "parameters"], [786, "parameters"], [787, "parameters"], [788, "parameters"], [791, "parameters"], [792, "parameters"], [794, "parameters"], [795, "parameters"], [796, "parameters"], [797, "parameters"], [798, "parameters"], [801, "parameters"], [802, "parameters"], [804, "parameters"], [805, "parameters"], [806, "parameters"], [807, "parameters"], [809, "parameters"], [810, "parameters"], [811, "parameters"], [812, "parameters"], [814, "parameters"], [816, "parameters"], [817, "parameters"], [818, "parameters"], [820, "parameters"], [822, "parameters"], [823, "parameters"], [824, "parameters"], [826, "parameters"], [828, "parameters"], [829, "parameters"], [831, "parameters"], [833, "parameters"], [834, "parameters"], [850, "parameters"], [851, "parameters"], [853, "parameters"], [854, "parameters"], [857, "parameters"], [859, "parameters"], [860, "parameters"], [861, "parameters"], [863, "parameters"], [865, "parameters"], [866, "parameters"], [868, "parameters"], [870, "parameters"], [871, "parameters"], [872, "parameters"], [874, "parameters"], [875, "parameters"], [876, "parameters"], [878, "parameters"], [879, "parameters"], [880, "parameters"], [882, "parameters"], [883, "parameters"], [884, "parameters"], [886, "parameters"], [887, "parameters"], [888, "parameters"], [890, "parameters"], [891, "parameters"], [892, "parameters"], [893, "parameters"], [895, "parameters"], [896, "parameters"], [897, "parameters"], [898, "parameters"], [900, "parameters"], [901, "parameters"], [902, "parameters"], [903, "parameters"], [905, "parameters"], [906, "parameters"], [907, "parameters"], [908, "parameters"], [910, "parameters"], [911, "parameters"], [912, "parameters"], [913, "parameters"], [915, "parameters"], [916, "parameters"], [917, "parameters"], [920, "parameters"], [921, "parameters"], [924, "parameters"], [925, "parameters"], [926, "parameters"], [927, "parameters"], [929, "parameters"], [930, "parameters"], [931, "parameters"], [933, "parameters"], [934, "parameters"], [935, "parameters"], [936, "parameters"], [937, "parameters"], [939, "parameters"], [940, "parameters"], [941, "parameters"], [942, "parameters"], [943, "parameters"], [944, "parameters"], [945, "parameters"], [946, "parameters"], [947, "parameters"], [949, "parameters"], [950, "parameters"], [951, "parameters"], [952, "parameters"], [953, "parameters"], [954, "parameters"], [956, "parameters"], [957, "parameters"], [958, "parameters"], [960, "parameters"], [962, "parameters"], [963, "parameters"], [965, "parameters"], [966, "parameters"], [967, "parameters"], [969, "parameters"], [970, "parameters"], [971, "parameters"], [972, "parameters"], [973, "parameters"], [975, "parameters"], [977, "parameters"], [978, "parameters"], [980, "parameters"], [981, "parameters"], [982, "parameters"], [983, "parameters"], [984, "parameters"], [985, "parameters"], [986, "parameters"], [988, "parameters"], [989, "parameters"], [991, "parameters"], [993, "parameters"], [994, "parameters"], [995, "parameters"], [996, "parameters"], [997, "parameters"], [998, "parameters"], [999, "parameters"], [1000, "parameters"], [1001, "parameters"], [1002, "parameters"], [1003, "parameters"], [1009, "parameters"], [1010, "parameters"], [1011, "parameters"], [1012, "parameters"], [1013, "parameters"], [1014, "parameters"], [1015, "parameters"], [1016, "parameters"], [1017, "parameters"], [1018, "parameters"], [1019, "parameters"], [1020, "parameters"], [1021, "parameters"], [1022, "parameters"], [1023, "parameters"], [1024, "parameters"], [1025, "parameters"], [1026, "parameters"], [1027, "parameters"], [1029, "parameters"], [1033, "parameters"], [1034, "parameters"], [1036, "parameters"], [1038, "parameters"], [1039, "parameters"], [1043, "parameters"], [1044, "parameters"], [1046, "parameters"], [1047, "parameters"], [1050, "parameters"], [1051, "parameters"], [1053, "parameters"], [1054, "parameters"], [1057, "parameters"], [1058, "parameters"], [1060, "parameters"], [1061, "parameters"], [1065, "parameters"], [1066, "parameters"], [1068, "parameters"], [1069, "parameters"], [1073, "parameters"], [1074, "parameters"], [1075, "parameters"], [1077, "parameters"], [1079, "parameters"], [1080, "parameters"], [1081, "parameters"], [1083, "parameters"], [1084, "parameters"], [1085, "parameters"], [1086, "parameters"], [1091, "parameters"], [1092, "parameters"], [1098, "parameters"], [1100, "parameters"], [1101, "parameters"], [1102, "parameters"], [1103, "parameters"], [1107, "parameters"], [1108, "parameters"], [1109, "parameters"], [1110, "parameters"], [1118, "parameters"], [1119, "parameters"], [1126, "parameters"], [1127, "parameters"], [1128, "parameters"], [1129, "parameters"], [1131, "parameters"], [1132, "parameters"], [1133, "parameters"], [1134, "parameters"], [1135, "parameters"], [1138, "parameters"], [1139, "parameters"], [1141, "parameters"], [1142, "parameters"], [1143, "parameters"], [1146, "parameters"], [1159, "parameters"], [1161, "parameters"], [1162, "parameters"], [1163, "parameters"], [1167, "parameters"], [1168, "parameters"], [1169, "parameters"], [1170, "parameters"], [1171, "parameters"], [1173, "parameters"], [1174, "parameters"], [1175, "parameters"], [1176, "parameters"], [1177, "parameters"], [1179, "parameters"], [1181, "parameters"], [1182, "parameters"], [1183, "parameters"], [1184, "parameters"], [1185, "parameters"], [1189, "parameters"], [1190, "parameters"], [1192, "parameters"], [1193, "parameters"], [1194, "parameters"], [1197, "parameters"], [1198, "parameters"], [1200, "parameters"], [1201, "parameters"], [1204, "parameters"], [1209, "parameters"], [1210, "parameters"], [1214, "parameters"], [1215, "parameters"], [1216, "parameters"], [1219, "parameters"], [1220, "parameters"], [1221, "parameters"], [1224, "parameters"], [1225, "parameters"], [1226, "parameters"], [1229, "parameters"], [1230, "parameters"], [1231, "parameters"], [1232, "parameters"], [1236, "parameters"], [1237, "parameters"], [1239, "parameters"], [1241, "parameters"], [1242, "parameters"], [1245, "parameters"], [1246, "parameters"], [1247, "parameters"], [1248, "parameters"], [1251, "parameters"], [1252, "parameters"], [1253, "parameters"], [1255, "parameters"], [1257, "parameters"], [1258, "parameters"], [1259, "parameters"], [1260, "parameters"], [1264, "parameters"], [1265, "parameters"], [1266, "parameters"], [1270, "parameters"], [1271, "parameters"], [1272, "parameters"], [1276, "parameters"], [1277, "parameters"], [1278, "parameters"], [1282, "parameters"], [1283, "parameters"], [1284, "parameters"], [1288, "parameters"], [1293, "parameters"], [1295, "parameters"], [1296, "parameters"], [1297, "parameters"], [1298, "parameters"], [1300, "parameters"], [1305, "parameters"], [1306, "parameters"], [1307, "parameters"], [1308, "parameters"], [1310, "parameters"], [1315, "parameters"], [1316, "parameters"], [1317, "parameters"], [1318, "parameters"], [1320, "parameters"], [1325, "parameters"], [1326, "parameters"], [1327, "parameters"], [1328, "parameters"], [1331, "parameters"], [1339, "parameters"], [1341, "parameters"], [1344, "parameters"], [1345, "parameters"], [1348, "parameters"], [1349, "parameters"], [1352, "parameters"], [1357, "parameters"], [1358, "parameters"], [1359, "parameters"], [1360, "parameters"], [1369, "parameters"], [1370, "parameters"], [1372, "parameters"], [1375, "parameters"], [1376, "parameters"], [1378, "parameters"], [1379, "parameters"], [1381, "parameters"], [1386, "parameters"], [1388, "parameters"], [1394, "parameters"], [1396, "parameters"], [1397, "parameters"], [1398, "parameters"], [1399, "parameters"], [1400, "parameters"], [1401, "parameters"], [1402, "parameters"], [1403, "parameters"], [1404, "parameters"]], "Returns": [[2, "returns"], [3, "returns"], [4, "returns"], [6, "returns"], [11, "returns"], [12, "returns"], [13, "returns"], [15, "returns"], [20, "returns"], [21, "returns"], [22, "returns"], [23, "returns"], [24, "returns"], [25, "returns"], [26, "returns"], [27, "returns"], [28, "returns"], [29, "returns"], [30, "returns"], [31, "returns"], [32, "returns"], [33, "returns"], [34, "returns"], [36, "returns"], [38, "returns"], [39, "returns"], [42, "returns"], [44, "returns"], [45, "returns"], [48, "returns"], [51, "returns"], [52, "returns"], [55, "returns"], [56, "returns"], [59, "returns"], [61, "returns"], [64, "returns"], [65, "returns"], [69, "returns"], [70, "returns"], [73, "returns"], [74, "returns"], [79, "returns"], [81, "returns"], [82, "returns"], [85, "returns"], [86, "returns"], [94, "returns"], [95, "returns"], [96, "returns"], [98, "returns"], [99, "returns"], [100, "returns"], [101, "returns"], [108, "returns"], [109, "returns"], [110, "returns"], [113, "returns"], [120, "returns"], [121, "returns"], [122, "returns"], [123, "returns"], [124, "returns"], [126, "returns"], [127, "returns"], [131, "returns"], [132, "returns"], [133, "returns"], [134, "returns"], [135, "returns"], [136, "returns"], [139, "returns"], [143, "returns"], [144, "returns"], [146, "returns"], [149, "returns"], [150, "returns"], [151, "returns"], [155, "returns"], [157, "returns"], [158, "returns"], [165, "returns"], [168, "returns"], [169, "returns"], [170, "returns"], [171, "returns"], [172, "returns"], [179, "returns"], [180, "returns"], [182, "returns"], [183, "returns"], [184, "returns"], [188, "returns"], [189, "returns"], [190, "returns"], [193, "returns"], [194, "returns"], [196, "returns"], [197, "returns"], [199, "returns"], [200, "returns"], [202, "returns"], [203, "returns"], [204, "returns"], [205, "returns"], [206, "returns"], [212, "returns"], [218, "returns"], [219, "returns"], [222, "returns"], [223, "returns"], [224, "returns"], [225, "returns"], [234, "returns"], [235, "returns"], [239, "returns"], [240, "returns"], [243, "returns"], [244, "returns"], [257, "returns"], [338, "returns"], [376, "returns"], [500, "returns"], [501, "returns"], [502, "returns"], [503, "returns"], [504, "returns"], [505, "returns"], [509, "returns"], [511, "returns"], [512, "returns"], [513, "returns"], [515, "returns"], [516, "returns"], [521, "returns"], [522, "returns"], [523, "returns"], [524, "returns"], [525, "returns"], [528, "returns"], [530, "returns"], [531, "returns"], [532, "returns"], [533, "returns"], [537, "returns"], [539, "returns"], [541, "returns"], [542, "returns"], [544, "returns"], [545, "returns"], [546, "returns"], [549, "returns"], [550, "returns"], [555, "returns"], [556, "returns"], [557, "returns"], [565, "returns"], [572, "returns"], [573, "returns"], [580, "returns"], [581, "returns"], [588, "returns"], [589, "returns"], [598, "returns"], [599, "returns"], [604, "returns"], [605, "returns"], [608, "returns"], [609, "returns"], [610, "returns"], [612, "returns"], [613, "returns"], [616, "returns"], [617, "returns"], [619, "returns"], [621, "returns"], [622, "returns"], [623, "returns"], [627, "returns"], [629, "returns"], [630, "returns"], [634, "returns"], [636, "returns"], [637, "returns"], [640, "returns"], [641, "returns"], [644, "returns"], [645, "returns"], [646, "returns"], [649, "returns"], [651, "returns"], [655, "returns"], [657, "returns"], [658, "returns"], [661, "returns"], [663, "returns"], [667, "returns"], [668, "returns"], [669, "returns"], [673, "returns"], [674, "returns"], [677, "returns"], [679, "returns"], [682, "returns"], [683, "returns"], [685, "returns"], [686, "returns"], [688, "returns"], [689, "returns"], [693, "returns"], [694, "returns"], [700, "returns"], [701, "returns"], [704, "returns"], [706, "returns"], [707, "returns"], [710, "returns"], [712, "returns"], [713, "returns"], [716, "returns"], [718, "returns"], [719, "returns"], [722, "returns"], [724, "returns"], [725, "returns"], [728, "returns"], [729, "returns"], [732, "returns"], [733, "returns"], [736, "returns"], [737, "returns"], [740, "returns"], [741, "returns"], [744, "returns"], [745, "returns"], [747, "returns"], [748, "returns"], [751, "returns"], [752, "returns"], [755, "returns"], [756, "returns"], [757, "returns"], [758, "returns"], [761, "returns"], [762, "returns"], [763, "returns"], [766, "returns"], [767, "returns"], [768, "returns"], [774, "returns"], [775, "returns"], [776, "returns"], [780, "returns"], [781, "returns"], [782, "returns"], [786, "returns"], [787, "returns"], [788, "returns"], [789, "returns"], [791, "returns"], [792, "returns"], [795, "returns"], [798, "returns"], [799, "returns"], [801, "returns"], [802, "returns"], [805, "returns"], [806, "returns"], [807, "returns"], [816, "returns"], [817, "returns"], [822, "returns"], [823, "returns"], [828, "returns"], [833, "returns"], [853, "returns"], [854, "returns"], [855, "returns"], [859, "returns"], [860, "returns"], [865, "returns"], [870, "returns"], [875, "returns"], [876, "returns"], [879, "returns"], [880, "returns"], [883, "returns"], [884, "returns"], [887, "returns"], [888, "returns"], [891, "returns"], [892, "returns"], [893, "returns"], [896, "returns"], [897, "returns"], [898, "returns"], [901, "returns"], [902, "returns"], [903, "returns"], [906, "returns"], [907, "returns"], [908, "returns"], [911, "returns"], [912, "returns"], [913, "returns"], [917, "returns"], [918, "returns"], [921, "returns"], [922, "returns"], [923, "returns"], [932, "returns"], [933, "returns"], [934, "returns"], [935, "returns"], [936, "returns"], [937, "returns"], [939, "returns"], [940, "returns"], [941, "returns"], [942, "returns"], [944, "returns"], [945, "returns"], [946, "returns"], [947, "returns"], [952, "returns"], [953, "returns"], [954, "returns"], [957, "returns"], [963, "returns"], [970, "returns"], [971, "returns"], [972, "returns"], [973, "returns"], [981, "returns"], [982, "returns"], [983, "returns"], [984, "returns"], [985, "returns"], [986, "returns"], [989, "returns"], [994, "returns"], [1002, "returns"], [1003, "returns"], [1009, "returns"], [1011, "returns"], [1012, "returns"], [1013, "returns"], [1014, "returns"], [1015, "returns"], [1016, "returns"], [1017, "returns"], [1018, "returns"], [1019, "returns"], [1020, "returns"], [1021, "returns"], [1022, "returns"], [1023, "returns"], [1024, "returns"], [1025, "returns"], [1026, "returns"], [1027, "returns"], [1030, "returns"], [1031, "returns"], [1032, "returns"], [1033, "returns"], [1034, "returns"], [1040, "returns"], [1041, "returns"], [1042, "returns"], [1043, "returns"], [1044, "returns"], [1048, "returns"], [1049, "returns"], [1050, "returns"], [1051, "returns"], [1055, "returns"], [1056, "returns"], [1057, "returns"], [1058, "returns"], [1062, "returns"], [1063, "returns"], [1064, "returns"], [1065, "returns"], [1066, "returns"], [1070, "returns"], [1071, "returns"], [1072, "returns"], [1073, "returns"], [1074, "returns"], [1075, "returns"], [1078, "returns"], [1079, "returns"], [1080, "returns"], [1081, "returns"], [1082, "returns"], [1084, "returns"], [1085, "returns"], [1087, "returns"], [1088, "returns"], [1089, "returns"], [1090, "returns"], [1093, "returns"], [1094, "returns"], [1095, "returns"], [1096, "returns"], [1101, "returns"], [1102, "returns"], [1104, "returns"], [1105, "returns"], [1109, "returns"], [1110, "returns"], [1111, "returns"], [1112, "returns"], [1113, "returns"], [1115, "returns"], [1116, "returns"], [1120, "returns"], [1121, "returns"], [1123, "returns"], [1130, "returns"], [1131, "returns"], [1132, "returns"], [1133, "returns"], [1134, "returns"], [1135, "returns"], [1136, "returns"], [1137, "returns"], [1138, "returns"], [1139, "returns"], [1140, "returns"], [1141, "returns"], [1142, "returns"], [1143, "returns"], [1144, "returns"], [1145, "returns"], [1147, "returns"], [1148, "returns"], [1149, "returns"], [1150, "returns"], [1151, "returns"], [1152, "returns"], [1153, "returns"], [1154, "returns"], [1155, "returns"], [1156, "returns"], [1157, "returns"], [1158, "returns"], [1159, "returns"], [1160, "returns"], [1161, "returns"], [1164, "returns"], [1165, "returns"], [1168, "returns"], [1169, "returns"], [1174, "returns"], [1176, "returns"], [1177, "returns"], [1178, "returns"], [1179, "returns"], [1182, "returns"], [1183, "returns"], [1184, "returns"], [1186, "returns"], [1187, "returns"], [1188, "returns"], [1193, "returns"], [1194, "returns"], [1195, "returns"], [1196, "returns"], [1202, "returns"], [1203, "returns"], [1205, "returns"], [1206, "returns"], [1207, "returns"], [1208, "returns"], [1209, "returns"], [1210, "returns"], [1211, "returns"], [1212, "returns"], [1215, "returns"], [1216, "returns"], [1217, "returns"], [1220, "returns"], [1221, "returns"], [1222, "returns"], [1225, "returns"], [1226, "returns"], [1227, "returns"], [1230, "returns"], [1231, "returns"], [1233, "returns"], [1236, "returns"], [1237, "returns"], [1238, "returns"], [1242, "returns"], [1243, "returns"], [1246, "returns"], [1247, "returns"], [1249, "returns"], [1252, "returns"], [1253, "returns"], [1254, "returns"], [1255, "returns"], [1258, "returns"], [1259, "returns"], [1261, "returns"], [1262, "returns"], [1265, "returns"], [1266, "returns"], [1267, "returns"], [1268, "returns"], [1271, "returns"], [1272, "returns"], [1273, "returns"], [1274, "returns"], [1277, "returns"], [1278, "returns"], [1279, "returns"], [1280, "returns"], [1283, "returns"], [1284, "returns"], [1285, "returns"], [1286, "returns"], [1289, "returns"], [1292, "returns"], [1293, "returns"], [1296, "returns"], [1297, "returns"], [1298, "returns"], [1299, "returns"], [1301, "returns"], [1302, "returns"], [1303, "returns"], [1306, "returns"], [1307, "returns"], [1308, "returns"], [1309, "returns"], [1311, "returns"], [1312, "returns"], [1313, "returns"], [1316, "returns"], [1317, "returns"], [1318, "returns"], [1319, "returns"], [1321, "returns"], [1322, "returns"], [1323, "returns"], [1326, "returns"], [1327, "returns"], [1328, "returns"], [1329, "returns"], [1330, "returns"], [1332, "returns"], [1333, "returns"], [1334, "returns"], [1335, "returns"], [1336, "returns"], [1337, "returns"], [1339, "returns"], [1340, "returns"], [1342, "returns"], [1343, "returns"], [1344, "returns"], [1345, "returns"], [1346, "returns"], [1349, "returns"], [1350, "returns"], [1351, "returns"], [1353, "returns"], [1354, "returns"], [1355, "returns"], [1356, "returns"], [1357, "returns"], [1358, "returns"], [1361, "returns"], [1362, "returns"], [1370, "returns"], [1371, "returns"], [1373, "returns"], [1374, "returns"], [1375, "returns"], [1376, "returns"], [1377, "returns"], [1378, "returns"], [1379, "returns"], [1386, "returns"], [1388, "returns"], [1393, "returns"], [1394, "returns"], [1397, "returns"], [1398, "returns"], [1399, "returns"], [1400, "returns"], [1401, "returns"], [1402, "returns"], [1403, "returns"]], "Examples": [[257, "examples"], [329, "examples"], [376, "examples"], [417, "examples"], [419, "examples"], [1255, "examples"], [1293, "examples"], [1424, "examples"]], "Notes": [[257, "notes"], [376, "notes"], [784, "notes"], [813, "notes"], [819, "notes"], [825, "notes"], [830, "notes"], [835, "notes"], [862, "notes"], [1255, "notes"], [1293, "notes"]], "See Also": [[257, "see-also"], [376, "see-also"]], "Yields": [[943, "yields"], [949, "yields"], [950, "yields"], [951, "yields"], [995, "yields"]], "Raises": [[1255, "raises"], [1293, "raises"]], "API": [[1405, "api"]], "foxes.algorithms": [[1406, "foxes-algorithms"]], "Downwind algorithm": [[1407, "downwind-algorithm"]], "Downwind algorithm models": [[1407, "downwind-algorithm-models"]], "Iterative algorithm": [[1408, "iterative-algorithm"]], "Iterative algorithm models": [[1408, "iterative-algorithm-models"]], "Sequential algorithm": [[1409, "sequential-algorithm"]], "Sequential algorithm models": [[1409, "sequential-algorithm-models"]], "foxes.constants": [[1410, "foxes-constants"]], "foxes.core": [[1411, "foxes-core"]], "foxes": [[1412, "foxes"]], "foxes.input": [[1413, "foxes-input"]], "foxes.input.farm_layout": [[1413, "foxes-input-farm-layout"]], "foxes.input.states": [[1413, "foxes-input-states"]], "foxes.input.windio": [[1413, "foxes-input-windio"]], "foxes.models": [[1414, "foxes-models"]], "foxes.models.farm_controllers": [[1414, "foxes-models-farm-controllers"]], "foxes.models.farm_models": [[1414, "foxes-models-farm-models"]], "foxes.models.partial_wakes": [[1414, "foxes-models-partial-wakes"]], "foxes.models.point_models": [[1414, "foxes-models-point-models"]], "foxes.models.rotor_models": [[1414, "foxes-models-rotor-models"]], "foxes.models.turbine_models": [[1414, "foxes-models-turbine-models"]], "foxes.models.turbine_types": [[1414, "foxes-models-turbine-types"]], "foxes.models.vertical_profiles": [[1414, "foxes-models-vertical-profiles"]], "foxes.models.wake_frames": [[1414, "foxes-models-wake-frames"]], "foxes.models.wake_models": [[1414, "foxes-models-wake-models"], [1422, "foxes-models-wake-models"]], "foxes.models.wake_superpositions": [[1414, "foxes-models-wake-superpositions"]], "foxes.opt": [[1415, "foxes-opt"]], "foxes.opt.core": [[1415, "foxes-opt-core"]], "foxes.opt.problems": [[1415, "foxes-opt-problems"], [1416, "foxes-opt-problems"]], "foxes.opt.objectives": [[1415, "foxes-opt-objectives"]], "foxes.opt.constraints": [[1415, "foxes-opt-constraints"]], "foxes.opt.problems.layout": [[1416, "foxes-opt-problems-layout"]], "foxes.opt.problems.layout.geom_layouts": [[1416, "foxes-opt-problems-layout-geom-layouts"], [1417, "foxes-opt-problems-layout-geom-layouts"]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1417, "foxes-opt-problems-layout-geom-layouts-objectives"]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1417, "foxes-opt-problems-layout-geom-layouts-constraints"]], "foxes.output": [[1418, "foxes-output"]], "foxes.output.flow_plots_2d": [[1418, "foxes-output-flow-plots-2d"]], "foxes.utils": [[1419, "foxes-utils"]], "foxes.utils.abl": [[1419, "foxes-utils-abl"]], "foxes.utils.geom2d": [[1419, "foxes-utils-geom2d"]], "foxes.utils.runners": [[1419, "foxes-utils-runners"]], "foxes.utils.two_circles": [[1419, "foxes-utils-two-circles"]], "foxes.utils.abl.neutral": [[1420, "foxes-utils-abl-neutral"]], "foxes.utils.abl.stable": [[1420, "foxes-utils-abl-stable"]], "foxes.utils.abl.unstable": [[1420, "foxes-utils-abl-unstable"]], "foxes.utils.abl.sheared": [[1420, "foxes-utils-abl-sheared"]], "foxes.variables": [[1421, "foxes-variables"]], "foxes.models.wake_models.wind": [[1422, "foxes-models-wake-models-wind"]], "foxes.models.wake_models.ti": [[1422, "foxes-models-wake-models-ti"]], "foxes.models.wake_models.induction": [[1422, "foxes-models-wake-models-induction"]], "Citation": [[1423, "citation"]], "Journal paper": [[1423, "journal-paper"]], "Version specific DOI": [[1423, "version-specific-doi"]], "History": [[1425, "history"]], "v0.1.0-alpha": [[1425, "v0-1-0-alpha"]], "v0.1.1-alpha": [[1425, "v0-1-1-alpha"]], "v0.1.2-alpha": [[1425, "v0-1-2-alpha"]], "v0.1.3-alpha": [[1425, "v0-1-3-alpha"]], "v0.1.4-alpha": [[1425, "v0-1-4-alpha"]], "v0.2.0-alpha": [[1425, "v0-2-0-alpha"]], "v0.2.1-alpha": [[1425, "v0-2-1-alpha"]], "v0.2.2-alpha": [[1425, "v0-2-2-alpha"]], "v0.2.3-alpha": [[1425, "v0-2-3-alpha"]], "v0.2.4-alpha": [[1425, "v0-2-4-alpha"]], "v0.2.5-alpha": [[1425, "v0-2-5-alpha"]], "v0.2.6-alpha": [[1425, "v0-2-6-alpha"]], "v0.3.0-alpha": [[1425, "v0-3-0-alpha"]], "v0.3.1-alpha": [[1425, "v0-3-1-alpha"]], "v0.3.2-alpha": [[1425, "v0-3-2-alpha"]], "v0.3.3-alpha": [[1425, "v0-3-3-alpha"]], "v0.3.4-alpha": [[1425, "v0-3-4-alpha"]], "v0.3.5-alpha": [[1425, "v0-3-5-alpha"]], "v0.4.0": [[1425, "v0-4-0"]], "v0.4.1": [[1425, "v0-4-1"]], "v0.4.2": [[1425, "v0-4-2"]], "v0.4.3": [[1425, "v0-4-3"]], "v0.4.4": [[1425, "v0-4-4"]], "v0.4.5": [[1425, "v0-4-5"]], "v0.5": [[1425, "v0-5"]], "v0.5.1": [[1425, "v0-5-1"]], "v0.5.2": [[1425, "v0-5-2"]], "v0.5.2.1": [[1425, "v0-5-2-1"]], "Welcome to FOXES": [[1426, "welcome-to-foxes"]], "License": [[1426, "license"]], "Contents": [[1426, "contents"]], "Contributing": [[1426, "contributing"]], "Acknowledgements": [[1426, "acknowledgements"]], "Installation": [[1427, "installation"]], "Requirements": [[1427, "requirements"]], "Installation via pip": [[1427, "installation-via-pip"]], "Virtual Python environment": [[1427, "virtual-python-environment"], [1427, "id1"]], "Standard users": [[1427, "standard-users"], [1427, "id2"]], "Developers": [[1427, "developers"], [1427, "id3"]], "Installation via conda": [[1427, "installation-via-conda"]], "Preparation": [[1427, "preparation"]], "Blockage modelling": [[1428, "Blockage-modelling"]], "Static data": [[1429, "Static-data"]], "Wind farm layout data": [[1429, "Wind-farm-layout-data"]], "test_farm_67.csv": [[1429, "test_farm_67.csv"]], "Ambient states data": [[1429, "Ambient-states-data"]], "WRF-Timeseries-4464.csv.gz": [[1429, "WRF-Timeseries-4464.csv.gz"]], "abl_states_6000.csv.gz": [[1429, "abl_states_6000.csv.gz"]], "timeseries_3000.csv.gz": [[1429, "timeseries_3000.csv.gz"]], "timeseries_8000.csv.gz": [[1429, "timeseries_8000.csv.gz"]], "timeseries_100.csv.gz": [[1429, "timeseries_100.csv.gz"]], "wind_rose_bremen.csv": [[1429, "wind_rose_bremen.csv"]], "wind_rotation.nc": [[1429, "wind_rotation.nc"]], "Power and thrust curves": [[1429, "Power-and-thrust-curves"]], "DTU-10MW-D178d3-H119.csv": [[1429, "DTU-10MW-D178d3-H119.csv"]], "IEA-15MW-D240-H150.csv": [[1429, "IEA-15MW-D240-H150.csv"]], "IWT-7d5MW-D164-H100.csv": [[1429, "IWT-7d5MW-D164-H100.csv"]], "NREL-5MW-D126-H90.csv": [[1429, "NREL-5MW-D126-H90.csv"]], "File paths": [[1429, "File-paths"]], "Heterogeneous flow": [[1430, "Heterogeneous-flow"]], "Layout optimization": [[1431, "Layout-optimization"]], "The model book": [[1432, "The-model-book"]], "Multi-height wind data": [[1433, "Multi-height-wind-data"]], "Overview - how to setup foxes": [[1434, "Overview---how-to-setup-foxes"]], "Power mask": [[1435, "Power-mask"]], "Wind sector management": [[1436, "Wind-sector-management"]], "Dynamic wakes 2": [[1437, "Dynamic-wakes-2"]], "Sequential wake propagation": [[1437, "Sequential-wake-propagation"]], "Single row of turbines": [[1438, "Single-row-of-turbines"]], "Dynamic wakes 1": [[1439, "Dynamic-wakes-1"]], "Spatially homogeneous wake propagation": [[1439, "Spatially-homogeneous-wake-propagation"]], "Timeseries data": [[1440, "Timeseries-data"]], "Wind rose data": [[1441, "Wind-rose-data"]], "Yawed rotor wakes": [[1442, "Yawed-rotor-wakes"]]}, "indexentries": {"pep 585": [[257, "index-0"], [376, "index-0"]], "python enhancement proposals": [[257, "index-0"], [376, "index-0"]]}, "docurls": ["_algorithms/Downwind.html", "_algorithms/Downwind.__init__.html", "_algorithms/Downwind.all_models.html", "_algorithms/Downwind.calc_farm.html", "_algorithms/Downwind.calc_points.html", "_algorithms/Downwind.finalize.html", "_algorithms/Downwind.get_model.html", "_algorithms/Downwind.init_states.html", "_algorithms/Downwind.initialize.html", "_algorithms/Iterative.html", "_algorithms/Iterative.__init__.html", "_algorithms/Iterative.calc_farm.html", "_algorithms/Iterative.get_model.html", "_algorithms/Iterative.iterations.html", "_algorithms/Iterative.set_urelax.html", "_algorithms/Iterative.urelax.html", "_algorithms/Sequential.html", "_algorithms/Sequential.__init__.html", "_algorithms/Sequential.__iter__.html", "_algorithms/Sequential.__next__.html", "_algorithms/Sequential.calc_farm.html", "_algorithms/Sequential.calc_points.html", "_algorithms/Sequential.counter.html", "_algorithms/Sequential.cur_farm_results.html", "_algorithms/Sequential.cur_point_results.html", "_algorithms/Sequential.farm_results.html", "_algorithms/Sequential.fdata.html", "_algorithms/Sequential.get_model.html", "_algorithms/Sequential.index.html", "_algorithms/Sequential.iterating.html", "_algorithms/Sequential.mdata.html", "_algorithms/Sequential.pdata.html", "_algorithms/Sequential.point_results.html", "_algorithms/Sequential.size.html", "_algorithms/Sequential.weight.html", "_algorithms/downwind/models/CalcOrder.html", "_algorithms/downwind/models/CalcOrder.calculate.html", "_algorithms/downwind/models/CalcOrder.initialize.html", "_algorithms/downwind/models/CalcOrder.output_farm_vars.html", "_algorithms/downwind/models/CalcOrder.sub_models.html", "_algorithms/downwind/models/FarmWakesCalculation.html", "_algorithms/downwind/models/FarmWakesCalculation.__init__.html", "_algorithms/downwind/models/FarmWakesCalculation.calculate.html", "_algorithms/downwind/models/FarmWakesCalculation.initialize.html", "_algorithms/downwind/models/FarmWakesCalculation.output_farm_vars.html", "_algorithms/downwind/models/FarmWakesCalculation.sub_models.html", "_algorithms/downwind/models/PointWakesCalculation.html", "_algorithms/downwind/models/PointWakesCalculation.__init__.html", "_algorithms/downwind/models/PointWakesCalculation.calculate.html", "_algorithms/downwind/models/PointWakesCalculation.contribute_to_wake_deltas.html", "_algorithms/downwind/models/PointWakesCalculation.initialize.html", "_algorithms/downwind/models/PointWakesCalculation.output_point_vars.html", "_algorithms/downwind/models/PointWakesCalculation.sub_models.html", "_algorithms/downwind/models/SetAmbFarmResults.html", "_algorithms/downwind/models/SetAmbFarmResults.__init__.html", "_algorithms/downwind/models/SetAmbFarmResults.calculate.html", "_algorithms/downwind/models/SetAmbFarmResults.output_farm_vars.html", "_algorithms/downwind/models/SetAmbPointResults.html", "_algorithms/downwind/models/SetAmbPointResults.__init__.html", "_algorithms/downwind/models/SetAmbPointResults.calculate.html", "_algorithms/downwind/models/SetAmbPointResults.initialize.html", "_algorithms/downwind/models/SetAmbPointResults.output_point_vars.html", "_algorithms/iterative/ConvCrit.html", "_algorithms/iterative/ConvCrit.__init__.html", "_algorithms/iterative/ConvCrit.check_converged.html", "_algorithms/iterative/ConvCrit.get_deltas.html", "_algorithms/iterative/ConvCritList.html", "_algorithms/iterative/ConvCritList.__init__.html", "_algorithms/iterative/ConvCritList.add_crit.html", "_algorithms/iterative/ConvCritList.check_converged.html", "_algorithms/iterative/ConvCritList.get_deltas.html", "_algorithms/iterative/ConvVarDelta.html", "_algorithms/iterative/ConvVarDelta.__init__.html", "_algorithms/iterative/ConvVarDelta.check_converged.html", "_algorithms/iterative/ConvVarDelta.get_deltas.html", "_algorithms/iterative/DefaultConv.html", "_algorithms/iterative/DefaultConv.__init__.html", "_algorithms/iterative/models/FarmWakesCalculation.html", "_algorithms/iterative/models/FarmWakesCalculation.__init__.html", "_algorithms/iterative/models/FarmWakesCalculation.calculate.html", "_algorithms/iterative/models/FarmWakesCalculation.initialize.html", "_algorithms/iterative/models/FarmWakesCalculation.output_farm_vars.html", "_algorithms/iterative/models/FarmWakesCalculation.sub_models.html", "_algorithms/iterative/models/URelax.html", "_algorithms/iterative/models/URelax.__init__.html", "_algorithms/iterative/models/URelax.calculate.html", "_algorithms/iterative/models/URelax.output_farm_vars.html", "_algorithms/sequential/SequentialPlugin.html", "_algorithms/sequential/SequentialPlugin.__init__.html", "_algorithms/sequential/SequentialPlugin.finalize.html", "_algorithms/sequential/SequentialPlugin.initialize.html", "_algorithms/sequential/SequentialPlugin.update.html", "_algorithms/sequential/models/SeqState.html", "_algorithms/sequential/models/SeqState.__init__.html", "_algorithms/sequential/models/SeqState.calculate.html", "_algorithms/sequential/models/SeqState.counter.html", "_algorithms/sequential/models/SeqState.index.html", "_algorithms/sequential/models/SeqState.initialize.html", "_algorithms/sequential/models/SeqState.output_point_vars.html", "_algorithms/sequential/models/SeqState.size.html", "_algorithms/sequential/models/SeqState.sub_models.html", "_algorithms/sequential/models/SeqState.weights.html", "_core/Algorithm.html", "_core/Algorithm.__init__.html", "_core/Algorithm.chunked.html", "_core/Algorithm.del_model_data.html", "_core/Algorithm.finalize.html", "_core/Algorithm.get_model_data.html", "_core/Algorithm.get_models_data.html", "_core/Algorithm.get_models_idata.html", "_core/Algorithm.idata_mem.html", "_core/Algorithm.initialize.html", "_core/Algorithm.new.html", "_core/Algorithm.new_point_data.html", "_core/Algorithm.print.html", "_core/Algorithm.store_model_data.html", "_core/Algorithm.update_n_turbines.html", "_core/Data.html", "_core/Data.__init__.html", "_core/Data.add.html", "_core/Data.from_points.html", "_core/Data.n_points.html", "_core/Data.n_states.html", "_core/Data.n_turbines.html", "_core/Data.states_i0.html", "_core/DataCalcModel.html", "_core/DataCalcModel.calculate.html", "_core/DataCalcModel.run_calculation.html", "_core/ExtendedStates.html", "_core/ExtendedStates.__init__.html", "_core/ExtendedStates.append.html", "_core/ExtendedStates.calculate.html", "_core/ExtendedStates.index.html", "_core/ExtendedStates.output_point_vars.html", "_core/ExtendedStates.size.html", "_core/ExtendedStates.sub_models.html", "_core/ExtendedStates.weights.html", "_core/FarmController.html", "_core/FarmController.__init__.html", "_core/FarmController.calculate.html", "_core/FarmController.collect_models.html", "_core/FarmController.finalize.html", "_core/FarmController.initialize.html", "_core/FarmController.load_data.html", "_core/FarmController.output_farm_vars.html", "_core/FarmController.set_pars.html", "_core/FarmController.sub_models.html", "_core/FarmDataModel.html", "_core/FarmDataModel.__init__.html", "_core/FarmDataModel.calculate.html", "_core/FarmDataModel.output_farm_vars.html", "_core/FarmDataModel.run_calculation.html", "_core/FarmDataModelList.html", "_core/FarmDataModelList.__init__.html", "_core/FarmDataModelList.append.html", "_core/FarmDataModelList.calculate.html", "_core/FarmDataModelList.insert.html", "_core/FarmDataModelList.output_farm_vars.html", "_core/FarmDataModelList.sub_models.html", "_core/FarmModel.html", "_core/Model.html", "_core/Model.__init__.html", "_core/Model.__repr__.html", "_core/Model.data_to_store.html", "_core/Model.finalize.html", "_core/Model.from_data_or_store.html", "_core/Model.get_data.html", "_core/Model.initialize.html", "_core/Model.initialized.html", "_core/Model.load_data.html", "_core/Model.model_id.html", "_core/Model.sub_models.html", "_core/Model.var.html", "_core/PartialWakesModel.html", "_core/PartialWakesModel.__init__.html", "_core/PartialWakesModel.contribute_to_wake_deltas.html", "_core/PartialWakesModel.evaluate_results.html", "_core/PartialWakesModel.initialize.html", "_core/PartialWakesModel.new.html", "_core/PartialWakesModel.new_wake_deltas.html", "_core/PartialWakesModel.sub_models.html", "_core/PointDataModel.html", "_core/PointDataModel.calculate.html", "_core/PointDataModel.output_point_vars.html", "_core/PointDataModel.run_calculation.html", "_core/PointDataModelList.html", "_core/PointDataModelList.__init__.html", "_core/PointDataModelList.append.html", "_core/PointDataModelList.calculate.html", "_core/PointDataModelList.output_point_vars.html", "_core/PointDataModelList.sub_models.html", "_core/RotorModel.html", "_core/RotorModel.__init__.html", "_core/RotorModel.calculate.html", "_core/RotorModel.design_points.html", "_core/RotorModel.eval_rpoint_results.html", "_core/RotorModel.get_rotor_points.html", "_core/RotorModel.n_rotor_points.html", "_core/RotorModel.new.html", "_core/RotorModel.output_farm_vars.html", "_core/RotorModel.rotor_point_weights.html", "_core/States.html", "_core/States.index.html", "_core/States.load_data.html", "_core/States.output_point_vars.html", "_core/States.size.html", "_core/States.weights.html", "_core/Turbine.html", "_core/Turbine.__init__.html", "_core/Turbine.add_model.html", "_core/Turbine.insert_model.html", "_core/TurbineModel.html", "_core/TurbineModel.calculate.html", "_core/TurbineModel.new.html", "_core/TurbineType.html", "_core/TurbineType.__init__.html", "_core/TurbineType.new.html", "_core/VerticalProfile.html", "_core/VerticalProfile.calculate.html", "_core/VerticalProfile.input_vars.html", "_core/VerticalProfile.new.html", "_core/WakeFrame.html", "_core/WakeFrame.calc_centreline_integral.html", "_core/WakeFrame.calc_order.html", "_core/WakeFrame.get_centreline_points.html", "_core/WakeFrame.get_wake_coos.html", "_core/WakeFrame.get_wake_modelling_data.html", "_core/WakeFrame.new.html", "_core/WakeModel.html", "_core/WakeModel.contribute_to_wake_deltas.html", "_core/WakeModel.finalize_wake_deltas.html", "_core/WakeModel.init_wake_deltas.html", "_core/WakeModel.new.html", "_core/WakeSuperposition.html", "_core/WakeSuperposition.calc_final_wake_delta.html", "_core/WakeSuperposition.calc_wakes_plus_wake.html", "_core/WindFarm.html", "_core/WindFarm.__init__.html", "_core/WindFarm.add_turbine.html", "_core/WindFarm.n_turbines.html", "_core/WindFarm.turbine_names.html", "_data/StaticData.html", "_data/StaticData.__init__.html", "_data/parse_Pct_file_name.html", "_data/parse_Pct_two_files.html", "_foxes/constants/AMB_RPOINT_RESULTS.html", "_foxes/constants/DTYPE.html", "_foxes/constants/DTYPE.T.html", "_foxes/constants/DTYPE.__abs__.html", "_foxes/constants/DTYPE.__add__.html", "_foxes/constants/DTYPE.__and__.html", "_foxes/constants/DTYPE.__array__.html", "_foxes/constants/DTYPE.__array_interface__.html", "_foxes/constants/DTYPE.__array_priority__.html", "_foxes/constants/DTYPE.__array_struct__.html", "_foxes/constants/DTYPE.__array_wrap__.html", "_foxes/constants/DTYPE.__bool__.html", "_foxes/constants/DTYPE.__class_getitem__.html", "_foxes/constants/DTYPE.__divmod__.html", "_foxes/constants/DTYPE.__eq__.html", "_foxes/constants/DTYPE.__float__.html", "_foxes/constants/DTYPE.__floordiv__.html", "_foxes/constants/DTYPE.__format__.html", "_foxes/constants/DTYPE.__ge__.html", "_foxes/constants/DTYPE.__getitem__.html", "_foxes/constants/DTYPE.__gt__.html", "_foxes/constants/DTYPE.__hash__.html", "_foxes/constants/DTYPE.__int__.html", "_foxes/constants/DTYPE.__invert__.html", "_foxes/constants/DTYPE.__le__.html", "_foxes/constants/DTYPE.__lshift__.html", "_foxes/constants/DTYPE.__lt__.html", "_foxes/constants/DTYPE.__mod__.html", "_foxes/constants/DTYPE.__mul__.html", "_foxes/constants/DTYPE.__ne__.html", "_foxes/constants/DTYPE.__neg__.html", "_foxes/constants/DTYPE.__new__.html", "_foxes/constants/DTYPE.__or__.html", "_foxes/constants/DTYPE.__pos__.html", "_foxes/constants/DTYPE.__pow__.html", "_foxes/constants/DTYPE.__radd__.html", "_foxes/constants/DTYPE.__rand__.html", "_foxes/constants/DTYPE.__rdivmod__.html", "_foxes/constants/DTYPE.__reduce__.html", "_foxes/constants/DTYPE.__repr__.html", "_foxes/constants/DTYPE.__rfloordiv__.html", "_foxes/constants/DTYPE.__rlshift__.html", "_foxes/constants/DTYPE.__rmod__.html", "_foxes/constants/DTYPE.__rmul__.html", "_foxes/constants/DTYPE.__ror__.html", "_foxes/constants/DTYPE.__rpow__.html", "_foxes/constants/DTYPE.__rrshift__.html", "_foxes/constants/DTYPE.__rshift__.html", "_foxes/constants/DTYPE.__rsub__.html", "_foxes/constants/DTYPE.__rtruediv__.html", "_foxes/constants/DTYPE.__rxor__.html", "_foxes/constants/DTYPE.__sizeof__.html", "_foxes/constants/DTYPE.__str__.html", "_foxes/constants/DTYPE.__sub__.html", "_foxes/constants/DTYPE.__truediv__.html", "_foxes/constants/DTYPE.__xor__.html", "_foxes/constants/DTYPE.all.html", "_foxes/constants/DTYPE.any.html", "_foxes/constants/DTYPE.argmax.html", "_foxes/constants/DTYPE.argmin.html", "_foxes/constants/DTYPE.argsort.html", "_foxes/constants/DTYPE.as_integer_ratio.html", "_foxes/constants/DTYPE.astype.html", "_foxes/constants/DTYPE.base.html", "_foxes/constants/DTYPE.byteswap.html", "_foxes/constants/DTYPE.choose.html", "_foxes/constants/DTYPE.clip.html", "_foxes/constants/DTYPE.compress.html", "_foxes/constants/DTYPE.conj.html", "_foxes/constants/DTYPE.conjugate.html", "_foxes/constants/DTYPE.copy.html", "_foxes/constants/DTYPE.cumprod.html", "_foxes/constants/DTYPE.cumsum.html", "_foxes/constants/DTYPE.data.html", "_foxes/constants/DTYPE.diagonal.html", "_foxes/constants/DTYPE.dtype.html", "_foxes/constants/DTYPE.dump.html", "_foxes/constants/DTYPE.dumps.html", "_foxes/constants/DTYPE.fill.html", "_foxes/constants/DTYPE.flags.html", "_foxes/constants/DTYPE.flat.html", "_foxes/constants/DTYPE.flatten.html", "_foxes/constants/DTYPE.getfield.html", "_foxes/constants/DTYPE.imag.html", "_foxes/constants/DTYPE.is_integer.html", "_foxes/constants/DTYPE.item.html", "_foxes/constants/DTYPE.itemset.html", "_foxes/constants/DTYPE.itemsize.html", "_foxes/constants/DTYPE.max.html", "_foxes/constants/DTYPE.mean.html", "_foxes/constants/DTYPE.min.html", "_foxes/constants/DTYPE.nbytes.html", "_foxes/constants/DTYPE.ndim.html", "_foxes/constants/DTYPE.newbyteorder.html", "_foxes/constants/DTYPE.nonzero.html", "_foxes/constants/DTYPE.prod.html", "_foxes/constants/DTYPE.ptp.html", "_foxes/constants/DTYPE.put.html", "_foxes/constants/DTYPE.ravel.html", "_foxes/constants/DTYPE.real.html", "_foxes/constants/DTYPE.repeat.html", "_foxes/constants/DTYPE.reshape.html", "_foxes/constants/DTYPE.resize.html", "_foxes/constants/DTYPE.round.html", "_foxes/constants/DTYPE.searchsorted.html", "_foxes/constants/DTYPE.setfield.html", "_foxes/constants/DTYPE.setflags.html", "_foxes/constants/DTYPE.shape.html", "_foxes/constants/DTYPE.size.html", "_foxes/constants/DTYPE.sort.html", "_foxes/constants/DTYPE.squeeze.html", "_foxes/constants/DTYPE.std.html", "_foxes/constants/DTYPE.strides.html", "_foxes/constants/DTYPE.sum.html", "_foxes/constants/DTYPE.swapaxes.html", "_foxes/constants/DTYPE.take.html", "_foxes/constants/DTYPE.tobytes.html", "_foxes/constants/DTYPE.tofile.html", "_foxes/constants/DTYPE.tolist.html", "_foxes/constants/DTYPE.tostring.html", "_foxes/constants/DTYPE.trace.html", "_foxes/constants/DTYPE.transpose.html", "_foxes/constants/DTYPE.var.html", "_foxes/constants/DTYPE.view.html", "_foxes/constants/FARM.html", "_foxes/constants/GW.html", "_foxes/constants/ITYPE.html", "_foxes/constants/ITYPE.__abs__.html", "_foxes/constants/ITYPE.__add__.html", "_foxes/constants/ITYPE.__and__.html", "_foxes/constants/ITYPE.__bool__.html", "_foxes/constants/ITYPE.__class_getitem__.html", "_foxes/constants/ITYPE.__divmod__.html", "_foxes/constants/ITYPE.__eq__.html", "_foxes/constants/ITYPE.__float__.html", "_foxes/constants/ITYPE.__floordiv__.html", "_foxes/constants/ITYPE.__ge__.html", "_foxes/constants/ITYPE.__gt__.html", "_foxes/constants/ITYPE.__hash__.html", "_foxes/constants/ITYPE.__index__.html", "_foxes/constants/ITYPE.__int__.html", "_foxes/constants/ITYPE.__invert__.html", "_foxes/constants/ITYPE.__le__.html", "_foxes/constants/ITYPE.__lshift__.html", "_foxes/constants/ITYPE.__lt__.html", "_foxes/constants/ITYPE.__mod__.html", "_foxes/constants/ITYPE.__mul__.html", "_foxes/constants/ITYPE.__ne__.html", "_foxes/constants/ITYPE.__neg__.html", "_foxes/constants/ITYPE.__new__.html", "_foxes/constants/ITYPE.__or__.html", "_foxes/constants/ITYPE.__pos__.html", "_foxes/constants/ITYPE.__pow__.html", "_foxes/constants/ITYPE.__radd__.html", "_foxes/constants/ITYPE.__rand__.html", "_foxes/constants/ITYPE.__rdivmod__.html", "_foxes/constants/ITYPE.__repr__.html", "_foxes/constants/ITYPE.__rfloordiv__.html", "_foxes/constants/ITYPE.__rlshift__.html", "_foxes/constants/ITYPE.__rmod__.html", "_foxes/constants/ITYPE.__rmul__.html", "_foxes/constants/ITYPE.__ror__.html", "_foxes/constants/ITYPE.__rpow__.html", "_foxes/constants/ITYPE.__rrshift__.html", "_foxes/constants/ITYPE.__rshift__.html", "_foxes/constants/ITYPE.__rsub__.html", "_foxes/constants/ITYPE.__rtruediv__.html", "_foxes/constants/ITYPE.__rxor__.html", "_foxes/constants/ITYPE.__str__.html", "_foxes/constants/ITYPE.__sub__.html", "_foxes/constants/ITYPE.__truediv__.html", "_foxes/constants/ITYPE.__xor__.html", "_foxes/constants/ITYPE.bit_count.html", "_foxes/constants/ITYPE.denominator.html", "_foxes/constants/ITYPE.is_integer.html", "_foxes/constants/ITYPE.numerator.html", "_foxes/constants/KAPPA.html", "_foxes/constants/MW.html", "_foxes/constants/POINT.html", "_foxes/constants/POINTS.html", "_foxes/constants/POP.html", "_foxes/constants/P_UNITS.html", "_foxes/constants/RPOINT.html", "_foxes/constants/RPOINTS.html", "_foxes/constants/RWEIGHTS.html", "_foxes/constants/STATE.html", "_foxes/constants/STATES_SEL.html", "_foxes/constants/STATE_POINT.html", "_foxes/constants/STATE_SOURCE_TURBINE.html", "_foxes/constants/STATE_TURBINE.html", "_foxes/constants/TMODELS.html", "_foxes/constants/TMODEL_SELS.html", "_foxes/constants/TNAME.html", "_foxes/constants/TURBINE.html", "_foxes/constants/TW.html", "_foxes/constants/VALID.html", "_foxes/constants/VARS.html", "_foxes/constants/W.html", "_foxes/constants/XYH.html", "_foxes/constants/kW.html", "_foxes/variables/AMB_CAP.html", "_foxes/variables/AMB_CT.html", "_foxes/variables/AMB_P.html", "_foxes/variables/AMB_REWS.html", "_foxes/variables/AMB_REWS2.html", "_foxes/variables/AMB_REWS3.html", "_foxes/variables/AMB_RHO.html", "_foxes/variables/AMB_T.html", "_foxes/variables/AMB_TI.html", "_foxes/variables/AMB_WD.html", "_foxes/variables/AMB_WS.html", "_foxes/variables/AMB_YAW.html", "_foxes/variables/AMB_YAWM.html", "_foxes/variables/AMB_YLD.html", "_foxes/variables/CAP.html", "_foxes/variables/CT.html", "_foxes/variables/D.html", "_foxes/variables/EFF.html", "_foxes/variables/H.html", "_foxes/variables/K.html", "_foxes/variables/KB.html", "_foxes/variables/KTI.html", "_foxes/variables/MAX_P.html", "_foxes/variables/MOL.html", "_foxes/variables/ORDER.html", "_foxes/variables/P.html", "_foxes/variables/PA_ALPHA.html", "_foxes/variables/PA_BETA.html", "_foxes/variables/REWS.html", "_foxes/variables/REWS2.html", "_foxes/variables/REWS3.html", "_foxes/variables/RHO.html", "_foxes/variables/SHEAR.html", "_foxes/variables/T.html", "_foxes/variables/TI.html", "_foxes/variables/TXYH.html", "_foxes/variables/WD.html", "_foxes/variables/WEIGHT.html", "_foxes/variables/WS.html", "_foxes/variables/X.html", "_foxes/variables/Y.html", "_foxes/variables/YAW.html", "_foxes/variables/YAWM.html", "_foxes/variables/YLD.html", "_foxes/variables/Z0.html", "_foxes/variables/amb2var.html", "_foxes/variables/var2amb.html", "_input/farm_layout/add_from_csv.html", "_input/farm_layout/add_from_df.html", "_input/farm_layout/add_from_file.html", "_input/farm_layout/add_from_json.html", "_input/farm_layout/add_grid.html", "_input/farm_layout/add_row.html", "_input/states/FieldDataNC.html", "_input/states/FieldDataNC.__init__.html", "_input/states/FieldDataNC.calculate.html", "_input/states/FieldDataNC.index.html", "_input/states/FieldDataNC.load_data.html", "_input/states/FieldDataNC.output_point_vars.html", "_input/states/FieldDataNC.size.html", "_input/states/FieldDataNC.weights.html", "_input/states/MultiHeightStates.html", "_input/states/MultiHeightStates.RDICT.html", "_input/states/MultiHeightStates.__init__.html", "_input/states/MultiHeightStates.calculate.html", "_input/states/MultiHeightStates.finalize.html", "_input/states/MultiHeightStates.index.html", "_input/states/MultiHeightStates.load_data.html", "_input/states/MultiHeightStates.output_point_vars.html", "_input/states/MultiHeightStates.reset.html", "_input/states/MultiHeightStates.size.html", "_input/states/MultiHeightStates.weights.html", "_input/states/MultiHeightTimeseries.html", "_input/states/MultiHeightTimeseries.RDICT.html", "_input/states/ScanWS.html", "_input/states/ScanWS.__init__.html", "_input/states/ScanWS.calculate.html", "_input/states/ScanWS.load_data.html", "_input/states/ScanWS.output_point_vars.html", "_input/states/ScanWS.size.html", "_input/states/ScanWS.weights.html", "_input/states/SingleStateStates.html", "_input/states/SingleStateStates.__init__.html", "_input/states/SingleStateStates.calculate.html", "_input/states/SingleStateStates.initialize.html", "_input/states/SingleStateStates.output_point_vars.html", "_input/states/SingleStateStates.size.html", "_input/states/SingleStateStates.sub_models.html", "_input/states/SingleStateStates.weights.html", "_input/states/StatesTable.html", "_input/states/StatesTable.RDICT.html", "_input/states/StatesTable.__init__.html", "_input/states/StatesTable.calculate.html", "_input/states/StatesTable.finalize.html", "_input/states/StatesTable.index.html", "_input/states/StatesTable.initialize.html", "_input/states/StatesTable.load_data.html", "_input/states/StatesTable.output_point_vars.html", "_input/states/StatesTable.reset.html", "_input/states/StatesTable.size.html", "_input/states/StatesTable.sub_models.html", "_input/states/StatesTable.weights.html", "_input/states/Timeseries.html", "_input/states/Timeseries.RDICT.html", "_input/states/create_random_abl_states.html", "_input/windio/read_case.html", "_models/farm_controllers/BasicFarmController.html", "_models/farm_models/Turbine2FarmModel.html", "_models/farm_models/Turbine2FarmModel.__init__.html", "_models/farm_models/Turbine2FarmModel.__repr__.html", "_models/farm_models/Turbine2FarmModel.calculate.html", "_models/farm_models/Turbine2FarmModel.output_farm_vars.html", "_models/farm_models/Turbine2FarmModel.sub_models.html", "_models/model_book/Dict.html", "_models/model_book/Dict.__getitem__.html", "_models/model_book/Dict.__init__.html", "_models/model_book/ModelBook.html", "_models/model_book/ModelBook.__getitem__.html", "_models/model_book/ModelBook.__init__.html", "_models/model_book/ModelBook.finalize.html", "_models/model_book/ModelBook.get.html", "_models/model_book/ModelBook.print_toc.html", "_models/partial_wakes/Mapped.html", "_models/partial_wakes/Mapped.__init__.html", "_models/partial_wakes/Mapped.contribute_to_wake_deltas.html", "_models/partial_wakes/Mapped.evaluate_results.html", "_models/partial_wakes/Mapped.initialize.html", "_models/partial_wakes/Mapped.new_wake_deltas.html", "_models/partial_wakes/Mapped.sub_models.html", "_models/partial_wakes/PartialAxiwake.html", "_models/partial_wakes/PartialAxiwake.__init__.html", "_models/partial_wakes/PartialAxiwake.__repr__.html", "_models/partial_wakes/PartialAxiwake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.evaluate_results.html", "_models/partial_wakes/PartialAxiwake.initialize.html", "_models/partial_wakes/PartialAxiwake.new_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.sub_models.html", "_models/partial_wakes/PartialDistSlicedWake.html", "_models/partial_wakes/PartialDistSlicedWake.__init__.html", "_models/partial_wakes/PartialDistSlicedWake.__repr__.html", "_models/partial_wakes/PartialDistSlicedWake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.evaluate_results.html", "_models/partial_wakes/PartialDistSlicedWake.initialize.html", "_models/partial_wakes/PartialDistSlicedWake.new_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.sub_models.html", "_models/partial_wakes/PartialGrid.html", "_models/partial_wakes/PartialGrid.__init__.html", "_models/partial_wakes/PartialGrid.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.html", "_models/partial_wakes/PartialTopHat.__init__.html", "_models/partial_wakes/PartialTopHat.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.evaluate_results.html", "_models/partial_wakes/PartialTopHat.initialize.html", "_models/partial_wakes/PartialTopHat.new_wake_deltas.html", "_models/partial_wakes/PartialTopHat.sub_models.html", "_models/partial_wakes/RotorPoints.html", "_models/partial_wakes/RotorPoints.__init__.html", "_models/partial_wakes/RotorPoints.contribute_to_wake_deltas.html", "_models/partial_wakes/RotorPoints.evaluate_results.html", "_models/partial_wakes/RotorPoints.get_wake_points.html", "_models/partial_wakes/RotorPoints.new_wake_deltas.html", "_models/point_models/SetUniformData.html", "_models/point_models/SetUniformData.__init__.html", "_models/point_models/SetUniformData.calculate.html", "_models/point_models/SetUniformData.load_data.html", "_models/point_models/SetUniformData.output_point_vars.html", "_models/point_models/TKE2TI.html", "_models/point_models/TKE2TI.calculate.html", "_models/point_models/TKE2TI.output_point_vars.html", "_models/point_models/WakeDeltas.html", "_models/point_models/WakeDeltas.__init__.html", "_models/point_models/WakeDeltas.calculate.html", "_models/point_models/WakeDeltas.output_point_vars.html", "_models/rotor_models/CentreRotor.html", "_models/rotor_models/CentreRotor.design_points.html", "_models/rotor_models/CentreRotor.eval_rpoint_results.html", "_models/rotor_models/CentreRotor.get_rotor_points.html", "_models/rotor_models/CentreRotor.n_rotor_points.html", "_models/rotor_models/CentreRotor.rotor_point_weights.html", "_models/rotor_models/GridRotor.html", "_models/rotor_models/GridRotor.__init__.html", "_models/rotor_models/GridRotor.__repr__.html", "_models/rotor_models/GridRotor.design_points.html", "_models/rotor_models/GridRotor.initialize.html", "_models/rotor_models/GridRotor.n_rotor_points.html", "_models/rotor_models/GridRotor.rotor_point_weights.html", "_models/rotor_models/LevelRotor.html", "_models/rotor_models/LevelRotor.__init__.html", "_models/rotor_models/LevelRotor.__repr__.html", "_models/rotor_models/LevelRotor.design_points.html", "_models/rotor_models/LevelRotor.initialize.html", "_models/rotor_models/LevelRotor.n_rotor_points.html", "_models/rotor_models/LevelRotor.rotor_point_weights.html", "_models/turbine_models/Calculator.html", "_models/turbine_models/Calculator.__init__.html", "_models/turbine_models/Calculator.calculate.html", "_models/turbine_models/Calculator.output_farm_vars.html", "_models/turbine_models/LookupTable.html", "_models/turbine_models/LookupTable.__init__.html", "_models/turbine_models/LookupTable.calculate.html", "_models/turbine_models/LookupTable.load_data.html", "_models/turbine_models/LookupTable.output_farm_vars.html", "_models/turbine_models/PowerMask.html", "_models/turbine_models/PowerMask.__init__.html", "_models/turbine_models/PowerMask.calculate.html", "_models/turbine_models/PowerMask.initialize.html", "_models/turbine_models/PowerMask.output_farm_vars.html", "_models/turbine_models/PowerMask.update_P_ct.html", "_models/turbine_models/RotorCentreCalc.html", "_models/turbine_models/RotorCentreCalc.__init__.html", "_models/turbine_models/RotorCentreCalc.calculate.html", "_models/turbine_models/RotorCentreCalc.initialize.html", "_models/turbine_models/RotorCentreCalc.output_farm_vars.html", "_models/turbine_models/RotorCentreCalc.sub_models.html", "_models/turbine_models/SectorManagement.html", "_models/turbine_models/SectorManagement.__init__.html", "_models/turbine_models/SectorManagement.calculate.html", "_models/turbine_models/SectorManagement.initialize.html", "_models/turbine_models/SectorManagement.output_farm_vars.html", "_models/turbine_models/SetFarmVars.html", "_models/turbine_models/SetFarmVars.__init__.html", "_models/turbine_models/SetFarmVars.add_var.html", "_models/turbine_models/SetFarmVars.calculate.html", "_models/turbine_models/SetFarmVars.load_data.html", "_models/turbine_models/SetFarmVars.output_farm_vars.html", "_models/turbine_models/SetFarmVars.reset.html", "_models/turbine_models/SetXYHD.html", "_models/turbine_models/SetXYHD.__init__.html", "_models/turbine_models/SetXYHD.calculate.html", "_models/turbine_models/SetXYHD.output_farm_vars.html", "_models/turbine_models/TableFactors.html", "_models/turbine_models/TableFactors.__init__.html", "_models/turbine_models/TableFactors.calculate.html", "_models/turbine_models/TableFactors.initialize.html", "_models/turbine_models/TableFactors.output_farm_vars.html", "_models/turbine_models/Thrust2Ct.html", "_models/turbine_models/Thrust2Ct.__init__.html", "_models/turbine_models/Thrust2Ct.calculate.html", "_models/turbine_models/Thrust2Ct.output_farm_vars.html", "_models/turbine_models/YAW2YAWM.html", "_models/turbine_models/YAW2YAWM.calculate.html", "_models/turbine_models/YAW2YAWM.output_farm_vars.html", "_models/turbine_models/YAWM2YAW.html", "_models/turbine_models/YAWM2YAW.calculate.html", "_models/turbine_models/YAWM2YAW.output_farm_vars.html", "_models/turbine_models/kTI.html", "_models/turbine_models/kTI.__init__.html", "_models/turbine_models/kTI.__repr__.html", "_models/turbine_models/kTI.calculate.html", "_models/turbine_models/kTI.output_farm_vars.html", "_models/turbine_types/CpCtFile.html", "_models/turbine_types/CpCtFile.__init__.html", "_models/turbine_types/CpCtFromTwo.html", "_models/turbine_types/CpCtFromTwo.__init__.html", "_models/turbine_types/NullType.html", "_models/turbine_types/NullType.calculate.html", "_models/turbine_types/NullType.output_farm_vars.html", "_models/turbine_types/PCtFile.html", "_models/turbine_types/PCtFile.__init__.html", "_models/turbine_types/PCtFile.calculate.html", "_models/turbine_types/PCtFile.finalize.html", "_models/turbine_types/PCtFile.load_data.html", "_models/turbine_types/PCtFile.output_farm_vars.html", "_models/turbine_types/PCtFromTwo.html", "_models/turbine_types/PCtFromTwo.__init__.html", "_models/turbine_types/PCtFromTwo.calculate.html", "_models/turbine_types/PCtFromTwo.finalize.html", "_models/turbine_types/PCtFromTwo.load_data.html", "_models/turbine_types/PCtFromTwo.output_farm_vars.html", "_models/turbine_types/WsRho2PCtFromTwo.html", "_models/turbine_types/WsRho2PCtFromTwo.__init__.html", "_models/turbine_types/WsRho2PCtFromTwo.calculate.html", "_models/turbine_types/WsRho2PCtFromTwo.finalize.html", "_models/turbine_types/WsRho2PCtFromTwo.load_data.html", "_models/turbine_types/WsRho2PCtFromTwo.output_farm_vars.html", "_models/turbine_types/WsTI2PCtFromTwo.html", "_models/turbine_types/WsTI2PCtFromTwo.__init__.html", "_models/turbine_types/WsTI2PCtFromTwo.calculate.html", "_models/turbine_types/WsTI2PCtFromTwo.finalize.html", "_models/turbine_types/WsTI2PCtFromTwo.load_data.html", "_models/turbine_types/WsTI2PCtFromTwo.output_farm_vars.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.__init__.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.calculate.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogStableWsProfile.html", "_models/vertical_profiles/ABLLogStableWsProfile.__init__.html", "_models/vertical_profiles/ABLLogStableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogStableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.__init__.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogWsProfile.html", "_models/vertical_profiles/ABLLogWsProfile.__init__.html", "_models/vertical_profiles/ABLLogWsProfile.calculate.html", "_models/vertical_profiles/ABLLogWsProfile.input_vars.html", "_models/vertical_profiles/DataProfile.html", "_models/vertical_profiles/DataProfile.__init__.html", "_models/vertical_profiles/DataProfile.calculate.html", "_models/vertical_profiles/DataProfile.input_vars.html", "_models/vertical_profiles/ShearedProfile.html", "_models/vertical_profiles/ShearedProfile.calculate.html", "_models/vertical_profiles/ShearedProfile.input_vars.html", "_models/vertical_profiles/UniformProfile.html", "_models/vertical_profiles/UniformProfile.__init__.html", "_models/vertical_profiles/UniformProfile.calculate.html", "_models/vertical_profiles/UniformProfile.input_vars.html", "_models/wake_frames/FarmOrder.html", "_models/wake_frames/FarmOrder.__init__.html", "_models/wake_frames/FarmOrder.calc_order.html", "_models/wake_frames/FarmOrder.get_centreline_points.html", "_models/wake_frames/FarmOrder.get_wake_coos.html", "_models/wake_frames/FarmOrder.sub_models.html", "_models/wake_frames/RotorWD.html", "_models/wake_frames/RotorWD.__init__.html", "_models/wake_frames/RotorWD.calc_order.html", "_models/wake_frames/RotorWD.get_centreline_points.html", "_models/wake_frames/RotorWD.get_wake_coos.html", "_models/wake_frames/SeqDynamicWakes.html", "_models/wake_frames/SeqDynamicWakes.__init__.html", "_models/wake_frames/SeqDynamicWakes.calc_order.html", "_models/wake_frames/SeqDynamicWakes.get_centreline_points.html", "_models/wake_frames/SeqDynamicWakes.get_wake_coos.html", "_models/wake_frames/SeqDynamicWakes.get_wake_modelling_data.html", "_models/wake_frames/SeqDynamicWakes.initialize.html", "_models/wake_frames/Streamlines.html", "_models/wake_frames/Streamlines.__init__.html", "_models/wake_frames/Streamlines.__repr__.html", "_models/wake_frames/Streamlines.calc_order.html", "_models/wake_frames/Streamlines.get_centreline_points.html", "_models/wake_frames/Streamlines.get_wake_coos.html", "_models/wake_frames/Streamlines.initialize.html", "_models/wake_frames/Timelines.html", "_models/wake_frames/Timelines.__init__.html", "_models/wake_frames/Timelines.calc_order.html", "_models/wake_frames/Timelines.get_centreline_points.html", "_models/wake_frames/Timelines.get_wake_coos.html", "_models/wake_frames/Timelines.initialize.html", "_models/wake_frames/YawedWakes.html", "_models/wake_frames/YawedWakes.__init__.html", "_models/wake_frames/YawedWakes.calc_order.html", "_models/wake_frames/YawedWakes.get_centreline_points.html", "_models/wake_frames/YawedWakes.get_wake_coos.html", "_models/wake_frames/YawedWakes.sub_models.html", "_models/wake_models/AxisymmetricWakeModel.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.html", "_models/wake_models/DistSlicedWakeModel.__init__.html", "_models/wake_models/DistSlicedWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.contribute_to_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.finalize_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.initialize.html", "_models/wake_models/DistSlicedWakeModel.sub_models.html", "_models/wake_models/GaussianWakeModel.html", "_models/wake_models/GaussianWakeModel.calc_amplitude_sigma_spsel.html", "_models/wake_models/GaussianWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/TopHatWakeModel.html", "_models/wake_models/TopHatWakeModel.__init__.html", "_models/wake_models/TopHatWakeModel.calc_centreline_wake_deltas.html", "_models/wake_models/TopHatWakeModel.calc_wake_radius.html", "_models/wake_models/TopHatWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/induction/RankineHalfBody.html", "_models/wake_models/induction/RankineHalfBody.__init__.html", "_models/wake_models/induction/RankineHalfBody.contribute_to_wake_deltas.html", "_models/wake_models/induction/RankineHalfBody.finalize_wake_deltas.html", "_models/wake_models/induction/RankineHalfBody.init_wake_deltas.html", "_models/wake_models/ti/CrespoHernandezTIWake.html", "_models/wake_models/ti/CrespoHernandezTIWake.__init__.html", "_models/wake_models/ti/CrespoHernandezTIWake.__repr__.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_wake_radius.html", "_models/wake_models/ti/CrespoHernandezTIWake.init_wake_deltas.html", "_models/wake_models/ti/IECTIWake.html", "_models/wake_models/ti/IECTIWake.__init__.html", "_models/wake_models/ti/IECTIWake.__repr__.html", "_models/wake_models/ti/IECTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/IECTIWake.calc_wake_radius.html", "_models/wake_models/ti/IECTIWake.init_wake_deltas.html", "_models/wake_models/wind/Bastankhah2014.html", "_models/wake_models/wind/Bastankhah2014.__init__.html", "_models/wake_models/wind/Bastankhah2014.__repr__.html", "_models/wake_models/wind/Bastankhah2014.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/Bastankhah2014.init_wake_deltas.html", "_models/wake_models/wind/Bastankhah2016.html", "_models/wake_models/wind/Bastankhah2016.__init__.html", "_models/wake_models/wind/Bastankhah2016.__repr__.html", "_models/wake_models/wind/Bastankhah2016.calc_wakes_spsel_x_yz.html", "_models/wake_models/wind/Bastankhah2016.init_wake_deltas.html", "_models/wake_models/wind/Bastankhah2016Model.html", "_models/wake_models/wind/Bastankhah2016Model.AMPL_FAR.html", "_models/wake_models/wind/Bastankhah2016Model.AMPL_NEAR.html", "_models/wake_models/wind/Bastankhah2016Model.CHECK.html", "_models/wake_models/wind/Bastankhah2016Model.DELTA_FAR.html", "_models/wake_models/wind/Bastankhah2016Model.DELTA_NEAR.html", "_models/wake_models/wind/Bastankhah2016Model.MDATA_KEY.html", "_models/wake_models/wind/Bastankhah2016Model.NEAR.html", "_models/wake_models/wind/Bastankhah2016Model.PARS.html", "_models/wake_models/wind/Bastankhah2016Model.R_PC.html", "_models/wake_models/wind/Bastankhah2016Model.R_PC_S.html", "_models/wake_models/wind/Bastankhah2016Model.SIGMA_Y_FAR.html", "_models/wake_models/wind/Bastankhah2016Model.SIGMA_Z_FAR.html", "_models/wake_models/wind/Bastankhah2016Model.SP_SEL.html", "_models/wake_models/wind/Bastankhah2016Model.X0.html", "_models/wake_models/wind/Bastankhah2016Model.__init__.html", "_models/wake_models/wind/Bastankhah2016Model.calc_data.html", "_models/wake_models/wind/Bastankhah2016Model.clean.html", "_models/wake_models/wind/Bastankhah2016Model.get_data.html", "_models/wake_models/wind/Bastankhah2016Model.has_data.html", "_models/wake_models/wind/Bastankhah2016Model.pars.html", "_models/wake_models/wind/JensenWake.html", "_models/wake_models/wind/JensenWake.__init__.html", "_models/wake_models/wind/JensenWake.__repr__.html", "_models/wake_models/wind/JensenWake.calc_centreline_wake_deltas.html", "_models/wake_models/wind/JensenWake.calc_wake_radius.html", "_models/wake_models/wind/JensenWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWake.html", "_models/wake_models/wind/TurbOParkWake.__init__.html", "_models/wake_models/wind/TurbOParkWake.__repr__.html", "_models/wake_models/wind/TurbOParkWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWakeIX.html", "_models/wake_models/wind/TurbOParkWakeIX.__init__.html", "_models/wake_models/wind/TurbOParkWakeIX.__repr__.html", "_models/wake_models/wind/TurbOParkWakeIX.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWakeIX.finalize.html", "_models/wake_models/wind/TurbOParkWakeIX.init_wake_deltas.html", "_models/wake_superpositions/TILinear.html", "_models/wake_superpositions/TILinear.__init__.html", "_models/wake_superpositions/TILinear.calc_final_wake_delta.html", "_models/wake_superpositions/TILinear.calc_wakes_plus_wake.html", "_models/wake_superpositions/TIMax.html", "_models/wake_superpositions/TIMax.__init__.html", "_models/wake_superpositions/TIMax.calc_final_wake_delta.html", "_models/wake_superpositions/TIMax.calc_wakes_plus_wake.html", "_models/wake_superpositions/TIPow.html", "_models/wake_superpositions/TIPow.__init__.html", "_models/wake_superpositions/TIPow.calc_final_wake_delta.html", "_models/wake_superpositions/TIPow.calc_wakes_plus_wake.html", "_models/wake_superpositions/TIQuadratic.html", "_models/wake_superpositions/TIQuadratic.__init__.html", "_models/wake_superpositions/TIQuadratic.calc_final_wake_delta.html", "_models/wake_superpositions/TIQuadratic.calc_wakes_plus_wake.html", "_models/wake_superpositions/WSLinear.html", "_models/wake_superpositions/WSLinear.__init__.html", "_models/wake_superpositions/WSLinear.calc_final_wake_delta.html", "_models/wake_superpositions/WSLinear.calc_wakes_plus_wake.html", "_models/wake_superpositions/WSLinear.input_farm_vars.html", "_models/wake_superpositions/WSMax.html", "_models/wake_superpositions/WSMax.__init__.html", "_models/wake_superpositions/WSMax.calc_final_wake_delta.html", "_models/wake_superpositions/WSMax.calc_wakes_plus_wake.html", "_models/wake_superpositions/WSMax.input_farm_vars.html", "_models/wake_superpositions/WSPow.html", "_models/wake_superpositions/WSPow.__init__.html", "_models/wake_superpositions/WSPow.calc_final_wake_delta.html", "_models/wake_superpositions/WSPow.calc_wakes_plus_wake.html", "_models/wake_superpositions/WSPow.input_farm_vars.html", "_models/wake_superpositions/WSProduct.html", "_models/wake_superpositions/WSProduct.__init__.html", "_models/wake_superpositions/WSProduct.calc_final_wake_delta.html", "_models/wake_superpositions/WSProduct.calc_wakes_plus_wake.html", "_models/wake_superpositions/WSProduct.input_farm_vars.html", "_models/wake_superpositions/WSQuadratic.html", "_models/wake_superpositions/WSQuadratic.__init__.html", "_models/wake_superpositions/WSQuadratic.calc_final_wake_delta.html", "_models/wake_superpositions/WSQuadratic.calc_wakes_plus_wake.html", "_models/wake_superpositions/WSQuadratic.input_farm_vars.html", "_output/Animator.html", "_output/Animator.__init__.html", "_output/Animator.add_generator.html", "_output/Animator.animate.html", "_output/Animator.generators.html", "_output/FarmLayoutOutput.html", "_output/FarmLayoutOutput.__init__.html", "_output/FarmLayoutOutput.get_figure.html", "_output/FarmLayoutOutput.get_layout_data.html", "_output/FarmLayoutOutput.get_layout_dict.html", "_output/FarmLayoutOutput.write_csv.html", "_output/FarmLayoutOutput.write_json.html", "_output/FarmLayoutOutput.write_plot.html", "_output/FarmLayoutOutput.write_xyh.html", "_output/FarmResultsEval.html", "_output/FarmResultsEval.__init__.html", "_output/FarmResultsEval.add_capacity.html", "_output/FarmResultsEval.add_efficiency.html", "_output/FarmResultsEval.calc_farm_efficiency.html", "_output/FarmResultsEval.calc_farm_mean.html", "_output/FarmResultsEval.calc_farm_sum.html", "_output/FarmResultsEval.calc_farm_yield.html", "_output/FarmResultsEval.calc_mean_farm_power.html", "_output/FarmResultsEval.calc_states_mean.html", "_output/FarmResultsEval.calc_states_std.html", "_output/FarmResultsEval.calc_states_sum.html", "_output/FarmResultsEval.calc_turbine_mean.html", "_output/FarmResultsEval.calc_turbine_sum.html", "_output/FarmResultsEval.calc_turbine_yield.html", "_output/FarmResultsEval.gen_stdata.html", "_output/FarmResultsEval.reduce_all.html", "_output/FarmResultsEval.reduce_states.html", "_output/FarmResultsEval.reduce_turbines.html", "_output/FarmResultsEval.weinsum.html", "_output/FlowPlots2D.html", "_output/FlowPlots2D.gen_states_fig_xy.html", "_output/FlowPlots2D.gen_states_fig_xz.html", "_output/FlowPlots2D.gen_states_fig_yz.html", "_output/FlowPlots2D.get_mean_fig_xy.html", "_output/FlowPlots2D.get_mean_fig_xz.html", "_output/FlowPlots2D.get_mean_fig_yz.html", "_output/Output.html", "_output/Output.__init__.html", "_output/Output.get_fpath.html", "_output/Output.new.html", "_output/Output.print_models.html", "_output/Output.write.html", "_output/PointCalculator.html", "_output/PointCalculator.__init__.html", "_output/PointCalculator.calculate.html", "_output/ResultsWriter.html", "_output/ResultsWriter.__init__.html", "_output/ResultsWriter.write_csv.html", "_output/ResultsWriter.write_nc.html", "_output/RosePlotOutput.html", "_output/RosePlotOutput.__init__.html", "_output/RosePlotOutput.get_data.html", "_output/RosePlotOutput.get_data_info.html", "_output/RosePlotOutput.get_figure.html", "_output/RosePlotOutput.write_figure.html", "_output/SeqFlowAnimationPlugin.html", "_output/SeqFlowAnimationPlugin.__init__.html", "_output/SeqFlowAnimationPlugin.gen_images.html", "_output/SeqFlowAnimationPlugin.initialize.html", "_output/SeqFlowAnimationPlugin.update.html", "_output/SliceData.html", "_output/SliceData.__init__.html", "_output/SliceData.get_mean_data_xy.html", "_output/SliceData.get_mean_data_xz.html", "_output/SliceData.get_mean_data_yz.html", "_output/SliceData.get_states_data_xy.html", "_output/SliceData.get_states_data_xz.html", "_output/SliceData.get_states_data_yz.html", "_output/StateTurbineMap.html", "_output/StateTurbineMap.__init__.html", "_output/StateTurbineMap.plot_map.html", "_output/StatesRosePlotOutput.html", "_output/StatesRosePlotOutput.__init__.html", "_output/TurbineTypeCurves.html", "_output/TurbineTypeCurves.__init__.html", "_output/TurbineTypeCurves.plot_curves.html", "_output/flow_plots_2d/get_fig.html", "_utils/DataBook.html", "_utils/DataBook.__init__.html", "_utils/DataBook.add_data_package.html", "_utils/DataBook.add_data_package_file.html", "_utils/DataBook.add_file.html", "_utils/DataBook.add_files.html", "_utils/DataBook.get_file_path.html", "_utils/DataBook.toc.html", "_utils/PandasFileHelper.html", "_utils/PandasFileHelper.DATA_FILE_FORMATS.html", "_utils/PandasFileHelper.DEFAULT_FORMAT_DICT.html", "_utils/PandasFileHelper.DEFAULT_READING_PARAMETERS.html", "_utils/PandasFileHelper.DEFAULT_WRITING_PARAMETERS.html", "_utils/PandasFileHelper.read_file.html", "_utils/PandasFileHelper.write_file.html", "_utils/abl/neutral/calc_ws.html", "_utils/abl/neutral/logz.html", "_utils/abl/neutral/ustar.html", "_utils/abl/sheared/calc_ws.html", "_utils/abl/stable/calc_ws.html", "_utils/abl/stable/lgz.html", "_utils/abl/stable/logz.html", "_utils/abl/stable/psi.html", "_utils/abl/stable/ustar.html", "_utils/abl/unstable/calc_ws.html", "_utils/abl/unstable/logz.html", "_utils/abl/unstable/psi.html", "_utils/abl/unstable/ustar.html", "_utils/all_subclasses.html", "_utils/cubic_roots.html", "_utils/delta_wd.html", "_utils/exec_python.html", "_utils/geom2d/AreaGeometry.html", "_utils/geom2d/AreaGeometry.add_to_figure.html", "_utils/geom2d/AreaGeometry.inverse.html", "_utils/geom2d/AreaGeometry.p_max.html", "_utils/geom2d/AreaGeometry.p_min.html", "_utils/geom2d/AreaGeometry.points_distance.html", "_utils/geom2d/AreaGeometry.points_inside.html", "_utils/geom2d/AreaIntersection.html", "_utils/geom2d/AreaIntersection.__new__.html", "_utils/geom2d/AreaUnion.html", "_utils/geom2d/AreaUnion.__init__.html", "_utils/geom2d/AreaUnion.add_to_figure.html", "_utils/geom2d/AreaUnion.inverse.html", "_utils/geom2d/AreaUnion.p_max.html", "_utils/geom2d/AreaUnion.p_min.html", "_utils/geom2d/AreaUnion.points_distance.html", "_utils/geom2d/AreaUnion.points_inside.html", "_utils/geom2d/Circle.html", "_utils/geom2d/Circle.__init__.html", "_utils/geom2d/Circle.add_to_figure.html", "_utils/geom2d/Circle.p_max.html", "_utils/geom2d/Circle.p_min.html", "_utils/geom2d/Circle.points_distance.html", "_utils/geom2d/Circle.points_inside.html", "_utils/geom2d/ClosedPolygon.html", "_utils/geom2d/ClosedPolygon.__init__.html", "_utils/geom2d/ClosedPolygon.add_to_figure.html", "_utils/geom2d/ClosedPolygon.p_max.html", "_utils/geom2d/ClosedPolygon.p_min.html", "_utils/geom2d/ClosedPolygon.points_distance.html", "_utils/geom2d/ClosedPolygon.points_inside.html", "_utils/geom2d/HalfPlane.html", "_utils/geom2d/HalfPlane.__init__.html", "_utils/geom2d/HalfPlane.add_to_figure.html", "_utils/geom2d/HalfPlane.inverse.html", "_utils/geom2d/HalfPlane.p_max.html", "_utils/geom2d/HalfPlane.p_min.html", "_utils/geom2d/HalfPlane.points_distance.html", "_utils/geom2d/HalfPlane.points_inside.html", "_utils/geom2d/InvertedAreaGeometry.html", "_utils/geom2d/InvertedAreaGeometry.__init__.html", "_utils/geom2d/InvertedAreaGeometry.add_to_figure.html", "_utils/geom2d/InvertedAreaGeometry.inverse.html", "_utils/geom2d/InvertedAreaGeometry.p_max.html", "_utils/geom2d/InvertedAreaGeometry.p_min.html", "_utils/geom2d/InvertedAreaGeometry.points_distance.html", "_utils/geom2d/InvertedAreaGeometry.points_inside.html", "_utils/import_module.html", "_utils/opt/constraints/AreaGeometryConstraint.html", "_utils/opt/constraints/AreaGeometryConstraint.__init__.html", "_utils/opt/constraints/AreaGeometryConstraint.__str__.html", "_utils/opt/constraints/AreaGeometryConstraint.ana_deriv.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_population.html", "_utils/opt/constraints/AreaGeometryConstraint.component_names.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_population.html", "_utils/opt/constraints/AreaGeometryConstraint.initialize.html", "_utils/opt/constraints/AreaGeometryConstraint.initialized.html", "_utils/opt/constraints/AreaGeometryConstraint.n_components.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_float.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_int.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_float.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_int.html", "_utils/opt/constraints/FarmBoundaryConstraint.html", "_utils/opt/constraints/FarmBoundaryConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.html", "_utils/opt/constraints/MinDistConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.calc_individual.html", "_utils/opt/constraints/MinDistConstraint.calc_population.html", "_utils/opt/constraints/MinDistConstraint.initialize.html", "_utils/opt/constraints/MinDistConstraint.n_components.html", "_utils/opt/constraints/MinDistConstraint.vardeps_float.html", "_utils/opt/core/FarmConstraint.html", "_utils/opt/core/FarmConstraint.__init__.html", "_utils/opt/core/FarmConstraint.add_to_layout_figure.html", "_utils/opt/core/FarmConstraint.calc_individual.html", "_utils/opt/core/FarmConstraint.calc_population.html", "_utils/opt/core/FarmConstraint.farm.html", "_utils/opt/core/FarmConstraint.n_components.html", "_utils/opt/core/FarmConstraint.n_sel_turbines.html", "_utils/opt/core/FarmConstraint.print_models.html", "_utils/opt/core/FarmConstraint.sel_turbines.html", "_utils/opt/core/FarmConstraint.vardeps_float.html", "_utils/opt/core/FarmObjective.html", "_utils/opt/core/FarmObjective.__init__.html", "_utils/opt/core/FarmObjective.add_to_layout_figure.html", "_utils/opt/core/FarmObjective.farm.html", "_utils/opt/core/FarmObjective.n_sel_turbines.html", "_utils/opt/core/FarmObjective.print_models.html", "_utils/opt/core/FarmObjective.sel_turbines.html", "_utils/opt/core/FarmOptProblem.html", "_utils/opt/core/FarmOptProblem.INT_INF.html", "_utils/opt/core/FarmOptProblem.__init__.html", "_utils/opt/core/FarmOptProblem.add_constraint.html", "_utils/opt/core/FarmOptProblem.add_objective.html", "_utils/opt/core/FarmOptProblem.add_to_layout_figure.html", "_utils/opt/core/FarmOptProblem.all_turbines.html", "_utils/opt/core/FarmOptProblem.apply_individual.html", "_utils/opt/core/FarmOptProblem.apply_population.html", "_utils/opt/core/FarmOptProblem.calc_gradients.html", "_utils/opt/core/FarmOptProblem.check_constraints_individual.html", "_utils/opt/core/FarmOptProblem.check_constraints_population.html", "_utils/opt/core/FarmOptProblem.constraints_tol.html", "_utils/opt/core/FarmOptProblem.counter.html", "_utils/opt/core/FarmOptProblem.evaluate_individual.html", "_utils/opt/core/FarmOptProblem.evaluate_population.html", "_utils/opt/core/FarmOptProblem.farm.html", "_utils/opt/core/FarmOptProblem.finalize_individual.html", "_utils/opt/core/FarmOptProblem.finalize_population.html", "_utils/opt/core/FarmOptProblem.get_gradients.html", "_utils/opt/core/FarmOptProblem.initial_values_float.html", "_utils/opt/core/FarmOptProblem.initial_values_int.html", "_utils/opt/core/FarmOptProblem.initialize.html", "_utils/opt/core/FarmOptProblem.max_values_constraints.html", "_utils/opt/core/FarmOptProblem.max_values_float.html", "_utils/opt/core/FarmOptProblem.max_values_int.html", "_utils/opt/core/FarmOptProblem.maximize_objs.html", "_utils/opt/core/FarmOptProblem.min_values_constraints.html", "_utils/opt/core/FarmOptProblem.min_values_float.html", "_utils/opt/core/FarmOptProblem.min_values_int.html", "_utils/opt/core/FarmOptProblem.n_constraints.html", "_utils/opt/core/FarmOptProblem.n_objectives.html", "_utils/opt/core/FarmOptProblem.n_sel_turbines.html", "_utils/opt/core/FarmOptProblem.n_vars_float.html", "_utils/opt/core/FarmOptProblem.n_vars_int.html", "_utils/opt/core/FarmOptProblem.parse_tvar.html", "_utils/opt/core/FarmOptProblem.sel_turbines.html", "_utils/opt/core/FarmOptProblem.tvar.html", "_utils/opt/core/FarmOptProblem.update_problem_individual.html", "_utils/opt/core/FarmOptProblem.update_problem_population.html", "_utils/opt/core/FarmOptProblem.var_names_float.html", "_utils/opt/core/FarmOptProblem.var_names_int.html", "_utils/opt/core/FarmVarsProblem.html", "_utils/opt/core/FarmVarsProblem.initialize.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_individual.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_population.html", "_utils/opt/core/FarmVarsProblem.update_problem_individual.html", "_utils/opt/core/FarmVarsProblem.update_problem_population.html", "_utils/opt/core/PopStates.html", "_utils/opt/core/PopStates.__init__.html", "_utils/opt/core/PopStates.calculate.html", "_utils/opt/core/PopStates.initialize.html", "_utils/opt/core/PopStates.load_data.html", "_utils/opt/core/PopStates.output_point_vars.html", "_utils/opt/core/PopStates.size.html", "_utils/opt/core/PopStates.weights.html", "_utils/opt/objectives/FarmVarObjective.html", "_utils/opt/objectives/FarmVarObjective.__init__.html", "_utils/opt/objectives/FarmVarObjective.calc_individual.html", "_utils/opt/objectives/FarmVarObjective.calc_population.html", "_utils/opt/objectives/FarmVarObjective.finalize_individual.html", "_utils/opt/objectives/FarmVarObjective.initialize.html", "_utils/opt/objectives/FarmVarObjective.maximize.html", "_utils/opt/objectives/FarmVarObjective.n_components.html", "_utils/opt/objectives/FarmVarObjective.vardeps_float.html", "_utils/opt/objectives/MaxFarmPower.html", "_utils/opt/objectives/MaxFarmPower.__init__.html", "_utils/opt/objectives/MaxNTurbines.html", "_utils/opt/objectives/MaxNTurbines.__init__.html", "_utils/opt/objectives/MaxNTurbines.calc_individual.html", "_utils/opt/objectives/MaxNTurbines.calc_population.html", "_utils/opt/objectives/MaxNTurbines.maximize.html", "_utils/opt/objectives/MaxNTurbines.n_components.html", "_utils/opt/objectives/MinimalMaxTI.html", "_utils/opt/objectives/MinimalMaxTI.__init__.html", "_utils/opt/problems/OptFarmVars.html", "_utils/opt/problems/OptFarmVars.__init__.html", "_utils/opt/problems/OptFarmVars.add_var.html", "_utils/opt/problems/OptFarmVars.initial_values_float.html", "_utils/opt/problems/OptFarmVars.initial_values_int.html", "_utils/opt/problems/OptFarmVars.initialize.html", "_utils/opt/problems/OptFarmVars.max_values_float.html", "_utils/opt/problems/OptFarmVars.max_values_int.html", "_utils/opt/problems/OptFarmVars.min_values_float.html", "_utils/opt/problems/OptFarmVars.min_values_int.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_individual.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_population.html", "_utils/opt/problems/OptFarmVars.var_names_float.html", "_utils/opt/problems/OptFarmVars.var_names_int.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.get_bounds.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintscdist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivescdist.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.var_names_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_int.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_int.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.ANGLE.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.var_names_float.html", "_utils/read_shp.html", "_utils/read_shp_polygons.html", "_utils/runners/DaskRunner.html", "_utils/runners/DaskRunner.__init__.html", "_utils/runners/DaskRunner.finalize.html", "_utils/runners/DaskRunner.initialize.html", "_utils/runners/DaskRunner.is_distributed.html", "_utils/runners/DaskRunner.print.html", "_utils/runners/DaskRunner.run.html", "_utils/runners/DefaultRunner.html", "_utils/runners/DefaultRunner.run.html", "_utils/runners/Runner.html", "_utils/runners/Runner.__init__.html", "_utils/runners/Runner.finalize.html", "_utils/runners/Runner.initialize.html", "_utils/runners/Runner.initialized.html", "_utils/runners/Runner.run.html", "_utils/show_plotly_fig.html", "_utils/shp2csv.html", "_utils/shp2geom2d.html", "_utils/two_circles/area.html", "_utils/two_circles/calc_area.html", "_utils/uv2wd.html", "_utils/wd2uv.html", "_utils/wd2wdvec.html", "_utils/wdvec2wd.html", "_utils/write_nc.html", "api.html", "api_algorithms.html", "api_algorithms_downwind.html", "api_algorithms_iterative.html", "api_algorithms_sequential.html", "api_constants.html", "api_core.html", "api_foxes.html", "api_input.html", "api_models.html", "api_opt.html", "api_opt_problems.html", "api_opt_problems_geom.html", "api_output.html", "api_utils.html", "api_utils_abl.html", "api_variables.html", "api_wake_models.html", "citation.html", "examples.html", "history.html", "index.html", "installation.html", "notebooks/blockage.html", "notebooks/data.html", "notebooks/heterogeneous.html", "notebooks/layout_opt.html", "notebooks/model_book.html", "notebooks/multi_height.html", "notebooks/overview.html", "notebooks/power_mask.html", "notebooks/sector_man.html", "notebooks/sequential.html", "notebooks/single_row.html", "notebooks/timelines.html", "notebooks/timeseries.html", "notebooks/wind_rose.html", "notebooks/yawed_wake.html"]})