Search.setIndex({"titles": ["foxes.core.Algorithm", "foxes.core.Algorithm.__init__", "foxes.core.Algorithm.chunked", "foxes.core.Algorithm.cleanup", "foxes.core.Algorithm.finalize", "foxes.core.Algorithm.finalize_model", "foxes.core.Algorithm.get_models_data", "foxes.core.Algorithm.idata_mem", "foxes.core.Algorithm.initialize", "foxes.core.Algorithm.new", "foxes.core.Algorithm.new_point_data", "foxes.core.Algorithm.print", "foxes.core.Algorithm.update_idata", "foxes.core.Algorithm.update_n_turbines", "foxes.core.Data", "foxes.core.Data.__init__", "foxes.core.Data.add", "foxes.core.Data.from_points", "foxes.core.Data.n_points", "foxes.core.Data.n_states", "foxes.core.Data.n_turbines", "foxes.core.Data.states_i0", "foxes.core.DataCalcModel", "foxes.core.DataCalcModel.calculate", "foxes.core.DataCalcModel.run_calculation", "foxes.core.ExtendedStates", "foxes.core.ExtendedStates.__init__", "foxes.core.ExtendedStates.append", "foxes.core.ExtendedStates.calculate", "foxes.core.ExtendedStates.finalize", "foxes.core.ExtendedStates.index", "foxes.core.ExtendedStates.initialize", "foxes.core.ExtendedStates.output_point_vars", "foxes.core.ExtendedStates.size", "foxes.core.ExtendedStates.weights", "foxes.core.FarmController", "foxes.core.FarmController.__init__", "foxes.core.FarmController.calculate", "foxes.core.FarmController.collect_models", "foxes.core.FarmController.finalize", "foxes.core.FarmController.initialize", "foxes.core.FarmController.keep", "foxes.core.FarmController.output_farm_vars", "foxes.core.FarmController.set_pars", "foxes.core.FarmDataModel", "foxes.core.FarmDataModel.__init__", "foxes.core.FarmDataModel.calculate", "foxes.core.FarmDataModel.output_farm_vars", "foxes.core.FarmDataModel.run_calculation", "foxes.core.FarmDataModelList", "foxes.core.FarmDataModelList.__init__", "foxes.core.FarmDataModelList.append", "foxes.core.FarmDataModelList.calculate", "foxes.core.FarmDataModelList.finalize", "foxes.core.FarmDataModelList.initialize", "foxes.core.FarmDataModelList.keep", "foxes.core.FarmDataModelList.output_farm_vars", "foxes.core.FarmModel", "foxes.core.Model", "foxes.core.Model.__init__", "foxes.core.Model.__repr__", "foxes.core.Model.data_to_store", "foxes.core.Model.finalize", "foxes.core.Model.from_data_or_store", "foxes.core.Model.get_data", "foxes.core.Model.initialize", "foxes.core.Model.initialized", "foxes.core.Model.keep", "foxes.core.Model.model_id", "foxes.core.Model.reduce_states", "foxes.core.Model.var", "foxes.core.PartialWakesModel", "foxes.core.PartialWakesModel.__init__", "foxes.core.PartialWakesModel.contribute_to_wake_deltas", "foxes.core.PartialWakesModel.evaluate_results", "foxes.core.PartialWakesModel.initialize", "foxes.core.PartialWakesModel.keep", "foxes.core.PartialWakesModel.new", "foxes.core.PartialWakesModel.new_wake_deltas", "foxes.core.PointDataModel", "foxes.core.PointDataModel.calculate", "foxes.core.PointDataModel.output_point_vars", "foxes.core.PointDataModel.run_calculation", "foxes.core.PointDataModelList", "foxes.core.PointDataModelList.__init__", "foxes.core.PointDataModelList.append", "foxes.core.PointDataModelList.calculate", "foxes.core.PointDataModelList.finalize", "foxes.core.PointDataModelList.initialize", "foxes.core.PointDataModelList.keep", "foxes.core.PointDataModelList.output_point_vars", "foxes.core.RotorModel", "foxes.core.RotorModel.__init__", "foxes.core.RotorModel.calculate", "foxes.core.RotorModel.design_points", "foxes.core.RotorModel.eval_rpoint_results", "foxes.core.RotorModel.get_rotor_points", "foxes.core.RotorModel.n_rotor_points", "foxes.core.RotorModel.output_farm_vars", "foxes.core.RotorModel.rotor_point_weights", "foxes.core.States", "foxes.core.States.index", "foxes.core.States.output_point_vars", "foxes.core.States.size", "foxes.core.States.weights", "foxes.core.Turbine", "foxes.core.Turbine.__init__", "foxes.core.Turbine.add_model", "foxes.core.Turbine.insert_model", "foxes.core.TurbineModel", "foxes.core.TurbineModel.calculate", "foxes.core.TurbineType", "foxes.core.TurbineType.__init__", "foxes.core.VerticalProfile", "foxes.core.VerticalProfile.calculate", "foxes.core.VerticalProfile.input_vars", "foxes.core.VerticalProfile.new", "foxes.core.WakeFrame", "foxes.core.WakeFrame.calc_centreline_integral", "foxes.core.WakeFrame.calc_order", "foxes.core.WakeFrame.get_centreline_points", "foxes.core.WakeFrame.get_wake_coos", "foxes.core.WakeModel", "foxes.core.WakeModel.contribute_to_wake_deltas", "foxes.core.WakeModel.finalize_wake_deltas", "foxes.core.WakeModel.init_wake_deltas", "foxes.core.WakeSuperposition", "foxes.core.WakeSuperposition.calc_final_wake_delta", "foxes.core.WakeSuperposition.calc_wakes_plus_wake", "foxes.core.WindFarm", "foxes.core.WindFarm.__init__", "foxes.core.WindFarm.add_turbine", "foxes.core.WindFarm.n_turbines", "foxes.core.WindFarm.turbine_names", "foxes.data.StaticData", "foxes.data.StaticData.__init__", "foxes.data.parse_Pct_file_name", "foxes.data.parse_Pct_two_files", "foxes.constants.AMB_RPOINT_RESULTS", "foxes.constants.DTYPE", "foxes.constants.DTYPE.T", "foxes.constants.DTYPE.__abs__", "foxes.constants.DTYPE.__add__", "foxes.constants.DTYPE.__and__", "foxes.constants.DTYPE.__array__", "foxes.constants.DTYPE.__array_interface__", "foxes.constants.DTYPE.__array_priority__", "foxes.constants.DTYPE.__array_struct__", "foxes.constants.DTYPE.__array_wrap__", "foxes.constants.DTYPE.__bool__", "foxes.constants.DTYPE.__class_getitem__", "foxes.constants.DTYPE.__divmod__", "foxes.constants.DTYPE.__eq__", "foxes.constants.DTYPE.__float__", "foxes.constants.DTYPE.__floordiv__", "foxes.constants.DTYPE.__format__", "foxes.constants.DTYPE.__ge__", "foxes.constants.DTYPE.__getitem__", "foxes.constants.DTYPE.__gt__", "foxes.constants.DTYPE.__hash__", "foxes.constants.DTYPE.__int__", "foxes.constants.DTYPE.__invert__", "foxes.constants.DTYPE.__le__", "foxes.constants.DTYPE.__lshift__", "foxes.constants.DTYPE.__lt__", "foxes.constants.DTYPE.__mod__", "foxes.constants.DTYPE.__mul__", "foxes.constants.DTYPE.__ne__", "foxes.constants.DTYPE.__neg__", "foxes.constants.DTYPE.__new__", "foxes.constants.DTYPE.__or__", "foxes.constants.DTYPE.__pos__", "foxes.constants.DTYPE.__pow__", "foxes.constants.DTYPE.__radd__", "foxes.constants.DTYPE.__rand__", "foxes.constants.DTYPE.__rdivmod__", "foxes.constants.DTYPE.__reduce__", "foxes.constants.DTYPE.__repr__", "foxes.constants.DTYPE.__rfloordiv__", "foxes.constants.DTYPE.__rlshift__", "foxes.constants.DTYPE.__rmod__", "foxes.constants.DTYPE.__rmul__", "foxes.constants.DTYPE.__ror__", "foxes.constants.DTYPE.__rpow__", "foxes.constants.DTYPE.__rrshift__", "foxes.constants.DTYPE.__rshift__", "foxes.constants.DTYPE.__rsub__", "foxes.constants.DTYPE.__rtruediv__", "foxes.constants.DTYPE.__rxor__", "foxes.constants.DTYPE.__sizeof__", "foxes.constants.DTYPE.__str__", "foxes.constants.DTYPE.__sub__", "foxes.constants.DTYPE.__truediv__", "foxes.constants.DTYPE.__xor__", "foxes.constants.DTYPE.all", "foxes.constants.DTYPE.any", "foxes.constants.DTYPE.argmax", "foxes.constants.DTYPE.argmin", "foxes.constants.DTYPE.argsort", "foxes.constants.DTYPE.as_integer_ratio", "foxes.constants.DTYPE.astype", "foxes.constants.DTYPE.base", "foxes.constants.DTYPE.byteswap", "foxes.constants.DTYPE.choose", "foxes.constants.DTYPE.clip", "foxes.constants.DTYPE.compress", "foxes.constants.DTYPE.conj", "foxes.constants.DTYPE.conjugate", "foxes.constants.DTYPE.copy", "foxes.constants.DTYPE.cumprod", "foxes.constants.DTYPE.cumsum", "foxes.constants.DTYPE.data", "foxes.constants.DTYPE.diagonal", "foxes.constants.DTYPE.dtype", "foxes.constants.DTYPE.dump", "foxes.constants.DTYPE.dumps", "foxes.constants.DTYPE.fill", "foxes.constants.DTYPE.flags", "foxes.constants.DTYPE.flat", "foxes.constants.DTYPE.flatten", "foxes.constants.DTYPE.getfield", "foxes.constants.DTYPE.imag", "foxes.constants.DTYPE.is_integer", "foxes.constants.DTYPE.item", "foxes.constants.DTYPE.itemset", "foxes.constants.DTYPE.itemsize", "foxes.constants.DTYPE.max", "foxes.constants.DTYPE.mean", "foxes.constants.DTYPE.min", "foxes.constants.DTYPE.nbytes", "foxes.constants.DTYPE.ndim", "foxes.constants.DTYPE.newbyteorder", "foxes.constants.DTYPE.nonzero", "foxes.constants.DTYPE.prod", "foxes.constants.DTYPE.ptp", "foxes.constants.DTYPE.put", "foxes.constants.DTYPE.ravel", "foxes.constants.DTYPE.real", "foxes.constants.DTYPE.repeat", "foxes.constants.DTYPE.reshape", "foxes.constants.DTYPE.resize", "foxes.constants.DTYPE.round", "foxes.constants.DTYPE.searchsorted", "foxes.constants.DTYPE.setfield", "foxes.constants.DTYPE.setflags", "foxes.constants.DTYPE.shape", "foxes.constants.DTYPE.size", "foxes.constants.DTYPE.sort", "foxes.constants.DTYPE.squeeze", "foxes.constants.DTYPE.std", "foxes.constants.DTYPE.strides", "foxes.constants.DTYPE.sum", "foxes.constants.DTYPE.swapaxes", "foxes.constants.DTYPE.take", "foxes.constants.DTYPE.tobytes", "foxes.constants.DTYPE.tofile", "foxes.constants.DTYPE.tolist", "foxes.constants.DTYPE.tostring", "foxes.constants.DTYPE.trace", "foxes.constants.DTYPE.transpose", "foxes.constants.DTYPE.var", "foxes.constants.DTYPE.view", "foxes.constants.FARM", "foxes.constants.GW", "foxes.constants.ITYPE", "foxes.constants.ITYPE.__abs__", "foxes.constants.ITYPE.__add__", "foxes.constants.ITYPE.__and__", "foxes.constants.ITYPE.__bool__", "foxes.constants.ITYPE.__class_getitem__", "foxes.constants.ITYPE.__divmod__", "foxes.constants.ITYPE.__eq__", "foxes.constants.ITYPE.__float__", "foxes.constants.ITYPE.__floordiv__", "foxes.constants.ITYPE.__ge__", "foxes.constants.ITYPE.__gt__", "foxes.constants.ITYPE.__hash__", "foxes.constants.ITYPE.__index__", "foxes.constants.ITYPE.__int__", "foxes.constants.ITYPE.__invert__", "foxes.constants.ITYPE.__le__", "foxes.constants.ITYPE.__lshift__", "foxes.constants.ITYPE.__lt__", "foxes.constants.ITYPE.__mod__", "foxes.constants.ITYPE.__mul__", "foxes.constants.ITYPE.__ne__", "foxes.constants.ITYPE.__neg__", "foxes.constants.ITYPE.__new__", "foxes.constants.ITYPE.__or__", "foxes.constants.ITYPE.__pos__", "foxes.constants.ITYPE.__pow__", "foxes.constants.ITYPE.__radd__", "foxes.constants.ITYPE.__rand__", "foxes.constants.ITYPE.__rdivmod__", "foxes.constants.ITYPE.__repr__", "foxes.constants.ITYPE.__rfloordiv__", "foxes.constants.ITYPE.__rlshift__", "foxes.constants.ITYPE.__rmod__", "foxes.constants.ITYPE.__rmul__", "foxes.constants.ITYPE.__ror__", "foxes.constants.ITYPE.__rpow__", "foxes.constants.ITYPE.__rrshift__", "foxes.constants.ITYPE.__rshift__", "foxes.constants.ITYPE.__rsub__", "foxes.constants.ITYPE.__rtruediv__", "foxes.constants.ITYPE.__rxor__", "foxes.constants.ITYPE.__str__", "foxes.constants.ITYPE.__sub__", "foxes.constants.ITYPE.__truediv__", "foxes.constants.ITYPE.__xor__", "foxes.constants.ITYPE.bit_count", "foxes.constants.ITYPE.denominator", "foxes.constants.ITYPE.is_integer", "foxes.constants.ITYPE.numerator", "foxes.constants.KAPPA", "foxes.constants.MW", "foxes.constants.POINT", "foxes.constants.POINTS", "foxes.constants.POP", "foxes.constants.P_UNITS", "foxes.constants.RPOINT", "foxes.constants.RPOINTS", "foxes.constants.RWEIGHTS", "foxes.constants.STATE", "foxes.constants.STATES_SEL", "foxes.constants.STATE_POINT", "foxes.constants.STATE_SOURCE_TURBINE", "foxes.constants.STATE_TURBINE", "foxes.constants.TMODELS", "foxes.constants.TMODEL_SELS", "foxes.constants.TNAME", "foxes.constants.TURBINE", "foxes.constants.TW", "foxes.constants.VALID", "foxes.constants.VARS", "foxes.constants.W", "foxes.constants.XYH", "foxes.constants.kW", "foxes.variables.AMB_CAP", "foxes.variables.AMB_CT", "foxes.variables.AMB_P", "foxes.variables.AMB_REWS", "foxes.variables.AMB_REWS2", "foxes.variables.AMB_REWS3", "foxes.variables.AMB_RHO", "foxes.variables.AMB_T", "foxes.variables.AMB_TI", "foxes.variables.AMB_WD", "foxes.variables.AMB_WS", "foxes.variables.AMB_YAW", "foxes.variables.AMB_YAWM", "foxes.variables.AMB_YLD", "foxes.variables.CAP", "foxes.variables.CT", "foxes.variables.D", "foxes.variables.EFF", "foxes.variables.H", "foxes.variables.K", "foxes.variables.KB", "foxes.variables.KTI", "foxes.variables.MAX_P", "foxes.variables.MOL", "foxes.variables.ORDER", "foxes.variables.P", "foxes.variables.PA_ALPHA", "foxes.variables.PA_BETA", "foxes.variables.REWS", "foxes.variables.REWS2", "foxes.variables.REWS3", "foxes.variables.RHO", "foxes.variables.SHEAR", "foxes.variables.T", "foxes.variables.TI", "foxes.variables.TXYH", "foxes.variables.WD", "foxes.variables.WEIGHT", "foxes.variables.WS", "foxes.variables.X", "foxes.variables.Y", "foxes.variables.YAW", "foxes.variables.YAWM", "foxes.variables.YLD", "foxes.variables.Z0", "foxes.variables.amb2var", "foxes.variables.var2amb", "foxes.input.farm_layout.add_from_csv", "foxes.input.farm_layout.add_from_df", "foxes.input.farm_layout.add_from_file", "foxes.input.farm_layout.add_from_json", "foxes.input.farm_layout.add_grid", "foxes.input.farm_layout.add_row", "foxes.input.states.FieldDataNC", "foxes.input.states.FieldDataNC.__init__", "foxes.input.states.FieldDataNC.calculate", "foxes.input.states.FieldDataNC.index", "foxes.input.states.FieldDataNC.initialize", "foxes.input.states.FieldDataNC.output_point_vars", "foxes.input.states.FieldDataNC.size", "foxes.input.states.FieldDataNC.weights", "foxes.input.states.MultiHeightStates", "foxes.input.states.MultiHeightStates.RDICT", "foxes.input.states.MultiHeightStates.__init__", "foxes.input.states.MultiHeightStates.calculate", "foxes.input.states.MultiHeightStates.finalize", "foxes.input.states.MultiHeightStates.index", "foxes.input.states.MultiHeightStates.initialize", "foxes.input.states.MultiHeightStates.output_point_vars", "foxes.input.states.MultiHeightStates.reset", "foxes.input.states.MultiHeightStates.size", "foxes.input.states.MultiHeightStates.weights", "foxes.input.states.MultiHeightTimeseries", "foxes.input.states.MultiHeightTimeseries.RDICT", "foxes.input.states.ScanWS", "foxes.input.states.ScanWS.__init__", "foxes.input.states.ScanWS.calculate", "foxes.input.states.ScanWS.initialize", "foxes.input.states.ScanWS.output_point_vars", "foxes.input.states.ScanWS.size", "foxes.input.states.ScanWS.weights", "foxes.input.states.SingleStateStates", "foxes.input.states.SingleStateStates.__init__", "foxes.input.states.SingleStateStates.calculate", "foxes.input.states.SingleStateStates.initialize", "foxes.input.states.SingleStateStates.output_point_vars", "foxes.input.states.SingleStateStates.size", "foxes.input.states.SingleStateStates.weights", "foxes.input.states.StatesTable", "foxes.input.states.StatesTable.RDICT", "foxes.input.states.StatesTable.__init__", "foxes.input.states.StatesTable.calculate", "foxes.input.states.StatesTable.finalize", "foxes.input.states.StatesTable.index", "foxes.input.states.StatesTable.initialize", "foxes.input.states.StatesTable.output_point_vars", "foxes.input.states.StatesTable.reset", "foxes.input.states.StatesTable.size", "foxes.input.states.StatesTable.weights", "foxes.input.states.Timeseries", "foxes.input.states.Timeseries.RDICT", "foxes.input.states.create_random_abl_states", "foxes.input.windio.read_case", "foxes.models.farm_controllers.BasicFarmController", "foxes.models.farm_models.Turbine2FarmModel", "foxes.models.farm_models.Turbine2FarmModel.__init__", "foxes.models.farm_models.Turbine2FarmModel.__repr__", "foxes.models.farm_models.Turbine2FarmModel.calculate", "foxes.models.farm_models.Turbine2FarmModel.finalize", "foxes.models.farm_models.Turbine2FarmModel.initialize", "foxes.models.farm_models.Turbine2FarmModel.output_farm_vars", "foxes.models.model_book.Dict", "foxes.models.model_book.Dict.__getitem__", "foxes.models.model_book.Dict.__init__", "foxes.models.model_book.ModelBook", "foxes.models.model_book.ModelBook.__getitem__", "foxes.models.model_book.ModelBook.__init__", "foxes.models.model_book.ModelBook.finalize", "foxes.models.model_book.ModelBook.print_toc", "foxes.models.partial_wakes.Mapped", "foxes.models.partial_wakes.Mapped.__init__", "foxes.models.partial_wakes.Mapped.contribute_to_wake_deltas", "foxes.models.partial_wakes.Mapped.evaluate_results", "foxes.models.partial_wakes.Mapped.finalize", "foxes.models.partial_wakes.Mapped.initialize", "foxes.models.partial_wakes.Mapped.keep", "foxes.models.partial_wakes.Mapped.new_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake", "foxes.models.partial_wakes.PartialAxiwake.__init__", "foxes.models.partial_wakes.PartialAxiwake.__repr__", "foxes.models.partial_wakes.PartialAxiwake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake.evaluate_results", "foxes.models.partial_wakes.PartialAxiwake.finalize", "foxes.models.partial_wakes.PartialAxiwake.initialize", "foxes.models.partial_wakes.PartialAxiwake.keep", "foxes.models.partial_wakes.PartialAxiwake.new_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake", "foxes.models.partial_wakes.PartialDistSlicedWake.__init__", "foxes.models.partial_wakes.PartialDistSlicedWake.__repr__", "foxes.models.partial_wakes.PartialDistSlicedWake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake.evaluate_results", "foxes.models.partial_wakes.PartialDistSlicedWake.finalize", "foxes.models.partial_wakes.PartialDistSlicedWake.initialize", "foxes.models.partial_wakes.PartialDistSlicedWake.keep", "foxes.models.partial_wakes.PartialDistSlicedWake.new_wake_deltas", "foxes.models.partial_wakes.PartialGrid", "foxes.models.partial_wakes.PartialGrid.__init__", "foxes.models.partial_wakes.PartialGrid.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat", "foxes.models.partial_wakes.PartialTopHat.__init__", "foxes.models.partial_wakes.PartialTopHat.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat.evaluate_results", "foxes.models.partial_wakes.PartialTopHat.finalize", "foxes.models.partial_wakes.PartialTopHat.initialize", "foxes.models.partial_wakes.PartialTopHat.keep", "foxes.models.partial_wakes.PartialTopHat.new_wake_deltas", "foxes.models.partial_wakes.RotorPoints", "foxes.models.partial_wakes.RotorPoints.__init__", "foxes.models.partial_wakes.RotorPoints.contribute_to_wake_deltas", "foxes.models.partial_wakes.RotorPoints.evaluate_results", "foxes.models.partial_wakes.RotorPoints.get_wake_points", "foxes.models.partial_wakes.RotorPoints.new_wake_deltas", "foxes.models.point_models.SetUniformData", "foxes.models.point_models.SetUniformData.__init__", "foxes.models.point_models.SetUniformData.calculate", "foxes.models.point_models.SetUniformData.initialize", "foxes.models.point_models.SetUniformData.output_point_vars", "foxes.models.point_models.TKE2TI", "foxes.models.point_models.TKE2TI.calculate", "foxes.models.point_models.TKE2TI.output_point_vars", "foxes.models.point_models.WakeDeltas", "foxes.models.point_models.WakeDeltas.__init__", "foxes.models.point_models.WakeDeltas.calculate", "foxes.models.point_models.WakeDeltas.output_point_vars", "foxes.models.rotor_models.CentreRotor", "foxes.models.rotor_models.CentreRotor.design_points", "foxes.models.rotor_models.CentreRotor.eval_rpoint_results", "foxes.models.rotor_models.CentreRotor.get_rotor_points", "foxes.models.rotor_models.CentreRotor.n_rotor_points", "foxes.models.rotor_models.CentreRotor.rotor_point_weights", "foxes.models.rotor_models.GridRotor", "foxes.models.rotor_models.GridRotor.__init__", "foxes.models.rotor_models.GridRotor.__repr__", "foxes.models.rotor_models.GridRotor.design_points", "foxes.models.rotor_models.GridRotor.initialize", "foxes.models.rotor_models.GridRotor.n_rotor_points", "foxes.models.rotor_models.GridRotor.rotor_point_weights", "foxes.models.turbine_models.Calculator", "foxes.models.turbine_models.Calculator.__init__", "foxes.models.turbine_models.Calculator.calculate", "foxes.models.turbine_models.Calculator.output_farm_vars", "foxes.models.turbine_models.LookupTable", "foxes.models.turbine_models.LookupTable.__init__", "foxes.models.turbine_models.LookupTable.calculate", "foxes.models.turbine_models.LookupTable.initialize", "foxes.models.turbine_models.LookupTable.output_farm_vars", "foxes.models.turbine_models.PowerMask", "foxes.models.turbine_models.PowerMask.__init__", "foxes.models.turbine_models.PowerMask.calculate", "foxes.models.turbine_models.PowerMask.initialize", "foxes.models.turbine_models.PowerMask.output_farm_vars", "foxes.models.turbine_models.PowerMask.update_P_ct", "foxes.models.turbine_models.RotorCentreCalc", "foxes.models.turbine_models.RotorCentreCalc.__init__", "foxes.models.turbine_models.RotorCentreCalc.calculate", "foxes.models.turbine_models.RotorCentreCalc.finalize", "foxes.models.turbine_models.RotorCentreCalc.initialize", "foxes.models.turbine_models.RotorCentreCalc.output_farm_vars", "foxes.models.turbine_models.SectorManagement", "foxes.models.turbine_models.SectorManagement.__init__", "foxes.models.turbine_models.SectorManagement.calculate", "foxes.models.turbine_models.SectorManagement.initialize", "foxes.models.turbine_models.SectorManagement.output_farm_vars", "foxes.models.turbine_models.SetFarmVars", "foxes.models.turbine_models.SetFarmVars.__init__", "foxes.models.turbine_models.SetFarmVars.add_var", "foxes.models.turbine_models.SetFarmVars.calculate", "foxes.models.turbine_models.SetFarmVars.initialize", "foxes.models.turbine_models.SetFarmVars.output_farm_vars", "foxes.models.turbine_models.SetFarmVars.reset", "foxes.models.turbine_models.SetXYHD", "foxes.models.turbine_models.SetXYHD.__init__", "foxes.models.turbine_models.SetXYHD.calculate", "foxes.models.turbine_models.SetXYHD.output_farm_vars", "foxes.models.turbine_models.TableFactors", "foxes.models.turbine_models.TableFactors.__init__", "foxes.models.turbine_models.TableFactors.calculate", "foxes.models.turbine_models.TableFactors.initialize", "foxes.models.turbine_models.TableFactors.output_farm_vars", "foxes.models.turbine_models.Thrust2Ct", "foxes.models.turbine_models.Thrust2Ct.__init__", "foxes.models.turbine_models.Thrust2Ct.calculate", "foxes.models.turbine_models.Thrust2Ct.output_farm_vars", "foxes.models.turbine_models.YAW2YAWM", "foxes.models.turbine_models.YAW2YAWM.calculate", "foxes.models.turbine_models.YAW2YAWM.output_farm_vars", "foxes.models.turbine_models.YAWM2YAW", "foxes.models.turbine_models.YAWM2YAW.calculate", "foxes.models.turbine_models.YAWM2YAW.output_farm_vars", "foxes.models.turbine_models.kTI", "foxes.models.turbine_models.kTI.__init__", "foxes.models.turbine_models.kTI.__repr__", "foxes.models.turbine_models.kTI.calculate", "foxes.models.turbine_models.kTI.output_farm_vars", "foxes.models.turbine_types.CpCtFile", "foxes.models.turbine_types.CpCtFile.__init__", "foxes.models.turbine_types.CpCtFromTwo", "foxes.models.turbine_types.CpCtFromTwo.__init__", "foxes.models.turbine_types.NullType", "foxes.models.turbine_types.NullType.calculate", "foxes.models.turbine_types.NullType.output_farm_vars", "foxes.models.turbine_types.PCtFile", "foxes.models.turbine_types.PCtFile.__init__", "foxes.models.turbine_types.PCtFile.calculate", "foxes.models.turbine_types.PCtFile.finalize", "foxes.models.turbine_types.PCtFile.initialize", "foxes.models.turbine_types.PCtFile.output_farm_vars", "foxes.models.turbine_types.PCtFromTwo", "foxes.models.turbine_types.PCtFromTwo.__init__", "foxes.models.turbine_types.PCtFromTwo.calculate", "foxes.models.turbine_types.PCtFromTwo.finalize", "foxes.models.turbine_types.PCtFromTwo.initialize", "foxes.models.turbine_types.PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsRho2PCtFromTwo", "foxes.models.turbine_types.WsRho2PCtFromTwo.__init__", "foxes.models.turbine_types.WsRho2PCtFromTwo.calculate", "foxes.models.turbine_types.WsRho2PCtFromTwo.finalize", "foxes.models.turbine_types.WsRho2PCtFromTwo.initialize", "foxes.models.turbine_types.WsRho2PCtFromTwo.output_farm_vars", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogStableWsProfile", "foxes.models.vertical_profiles.ABLLogStableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogStableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogWsProfile", "foxes.models.vertical_profiles.ABLLogWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogWsProfile.input_vars", "foxes.models.vertical_profiles.ShearedProfile", "foxes.models.vertical_profiles.ShearedProfile.calculate", "foxes.models.vertical_profiles.ShearedProfile.input_vars", "foxes.models.vertical_profiles.UniformProfile", "foxes.models.vertical_profiles.UniformProfile.__init__", "foxes.models.vertical_profiles.UniformProfile.calculate", "foxes.models.vertical_profiles.UniformProfile.input_vars", "foxes.models.wake_frames.FarmOrder", "foxes.models.wake_frames.FarmOrder.__init__", "foxes.models.wake_frames.FarmOrder.calc_order", "foxes.models.wake_frames.FarmOrder.finalize", "foxes.models.wake_frames.FarmOrder.get_centreline_points", "foxes.models.wake_frames.FarmOrder.get_wake_coos", "foxes.models.wake_frames.FarmOrder.initialize", "foxes.models.wake_frames.RotorWD", "foxes.models.wake_frames.RotorWD.__init__", "foxes.models.wake_frames.RotorWD.calc_order", "foxes.models.wake_frames.RotorWD.get_centreline_points", "foxes.models.wake_frames.RotorWD.get_wake_coos", "foxes.models.wake_frames.Streamlines", "foxes.models.wake_frames.Streamlines.__init__", "foxes.models.wake_frames.Streamlines.__repr__", "foxes.models.wake_frames.Streamlines.calc_order", "foxes.models.wake_frames.Streamlines.get_centreline_points", "foxes.models.wake_frames.Streamlines.get_wake_coos", "foxes.models.wake_frames.Streamlines.initialize", "foxes.models.wake_frames.Timelines", "foxes.models.wake_frames.Timelines.__init__", "foxes.models.wake_frames.Timelines.calc_order", "foxes.models.wake_frames.Timelines.get_centreline_points", "foxes.models.wake_frames.Timelines.get_wake_coos", "foxes.models.wake_frames.Timelines.initialize", "foxes.models.wake_frames.YawedWakes", "foxes.models.wake_frames.YawedWakes.__init__", "foxes.models.wake_frames.YawedWakes.calc_order", "foxes.models.wake_frames.YawedWakes.finalize", "foxes.models.wake_frames.YawedWakes.get_centreline_points", "foxes.models.wake_frames.YawedWakes.get_wake_coos", "foxes.models.wake_frames.YawedWakes.initialize", "foxes.models.wake_models.AxisymmetricWakeModel", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel", "foxes.models.wake_models.DistSlicedWakeModel.__init__", "foxes.models.wake_models.DistSlicedWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel.contribute_to_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.finalize", "foxes.models.wake_models.DistSlicedWakeModel.finalize_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.initialize", "foxes.models.wake_models.DistSlicedWakeModel.keep", "foxes.models.wake_models.GaussianWakeModel", "foxes.models.wake_models.GaussianWakeModel.calc_amplitude_sigma_spsel", "foxes.models.wake_models.GaussianWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.TopHatWakeModel", "foxes.models.wake_models.TopHatWakeModel.__init__", "foxes.models.wake_models.TopHatWakeModel.calc_centreline_wake_deltas", "foxes.models.wake_models.TopHatWakeModel.calc_wake_radius", "foxes.models.wake_models.TopHatWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.ti.CrespoHernandezTIWake", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__init__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__repr__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_wake_radius", "foxes.models.wake_models.ti.CrespoHernandezTIWake.init_wake_deltas", "foxes.models.wake_models.ti.IECTIWake", "foxes.models.wake_models.ti.IECTIWake.__init__", "foxes.models.wake_models.ti.IECTIWake.__repr__", "foxes.models.wake_models.ti.IECTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.IECTIWake.calc_wake_radius", "foxes.models.wake_models.ti.IECTIWake.init_wake_deltas", "foxes.models.wake_models.wind.BastankhahWake", "foxes.models.wake_models.wind.BastankhahWake.__init__", "foxes.models.wake_models.wind.BastankhahWake.__repr__", "foxes.models.wake_models.wind.BastankhahWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.BastankhahWake.init_wake_deltas", "foxes.models.wake_models.wind.JensenWake", "foxes.models.wake_models.wind.JensenWake.__init__", "foxes.models.wake_models.wind.JensenWake.__repr__", "foxes.models.wake_models.wind.JensenWake.calc_centreline_wake_deltas", "foxes.models.wake_models.wind.JensenWake.calc_wake_radius", "foxes.models.wake_models.wind.JensenWake.init_wake_deltas", "foxes.models.wake_models.wind.PorteAgelModel", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_FAR", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.CHECK", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_FAR", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.MDATA_KEY", "foxes.models.wake_models.wind.PorteAgelModel.NEAR", "foxes.models.wake_models.wind.PorteAgelModel.PARS", "foxes.models.wake_models.wind.PorteAgelModel.R_PC", "foxes.models.wake_models.wind.PorteAgelModel.R_PC_S", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Y_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Z_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SP_SEL", "foxes.models.wake_models.wind.PorteAgelModel.X0", "foxes.models.wake_models.wind.PorteAgelModel.__init__", "foxes.models.wake_models.wind.PorteAgelModel.calc_data", "foxes.models.wake_models.wind.PorteAgelModel.clean", "foxes.models.wake_models.wind.PorteAgelModel.get_data", "foxes.models.wake_models.wind.PorteAgelModel.has_data", "foxes.models.wake_models.wind.PorteAgelModel.pars", "foxes.models.wake_models.wind.PorteAgelWake", "foxes.models.wake_models.wind.PorteAgelWake.__init__", "foxes.models.wake_models.wind.PorteAgelWake.__repr__", "foxes.models.wake_models.wind.PorteAgelWake.calc_wakes_spsel_x_yz", "foxes.models.wake_models.wind.PorteAgelWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWake", "foxes.models.wake_models.wind.TurbOParkWake.__init__", "foxes.models.wake_models.wind.TurbOParkWake.__repr__", "foxes.models.wake_models.wind.TurbOParkWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWakeIX", "foxes.models.wake_models.wind.TurbOParkWakeIX.__init__", "foxes.models.wake_models.wind.TurbOParkWakeIX.__repr__", "foxes.models.wake_models.wind.TurbOParkWakeIX.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWakeIX.init_wake_deltas", "foxes.models.wake_superpositions.LinearSuperposition", "foxes.models.wake_superpositions.LinearSuperposition.__init__", "foxes.models.wake_superpositions.LinearSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.LinearSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.LinearSuperposition.input_farm_vars", "foxes.models.wake_superpositions.MaxSuperposition", "foxes.models.wake_superpositions.MaxSuperposition.__init__", "foxes.models.wake_superpositions.MaxSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.MaxSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.MaxSuperposition.initialize", "foxes.models.wake_superpositions.MaxSuperposition.input_farm_vars", "foxes.models.wake_superpositions.ProductSuperposition", "foxes.models.wake_superpositions.ProductSuperposition.__init__", "foxes.models.wake_superpositions.ProductSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.ProductSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition", "foxes.models.wake_superpositions.QuadraticSuperposition.__init__", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition.initialize", "foxes.models.wake_superpositions.QuadraticSuperposition.input_farm_vars", "foxes.models.wake_superpositions.TISuperposition", "foxes.models.wake_superpositions.TISuperposition.__init__", "foxes.models.wake_superpositions.TISuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.TISuperposition.calc_wakes_plus_wake", "foxes.output.FarmLayoutOutput", "foxes.output.FarmLayoutOutput.__init__", "foxes.output.FarmLayoutOutput.get_figure", "foxes.output.FarmLayoutOutput.get_layout_data", "foxes.output.FarmLayoutOutput.get_layout_dict", "foxes.output.FarmLayoutOutput.write_csv", "foxes.output.FarmLayoutOutput.write_json", "foxes.output.FarmLayoutOutput.write_plot", "foxes.output.FarmLayoutOutput.write_xyh", "foxes.output.FarmResultsEval", "foxes.output.FarmResultsEval.__init__", "foxes.output.FarmResultsEval.add_capacity", "foxes.output.FarmResultsEval.add_efficiency", "foxes.output.FarmResultsEval.calc_farm_efficiency", "foxes.output.FarmResultsEval.calc_farm_mean", "foxes.output.FarmResultsEval.calc_farm_sum", "foxes.output.FarmResultsEval.calc_farm_yield", "foxes.output.FarmResultsEval.calc_mean_farm_power", "foxes.output.FarmResultsEval.calc_states_mean", "foxes.output.FarmResultsEval.calc_states_std", "foxes.output.FarmResultsEval.calc_states_sum", "foxes.output.FarmResultsEval.calc_turbine_mean", "foxes.output.FarmResultsEval.calc_turbine_sum", "foxes.output.FarmResultsEval.calc_turbine_yield", "foxes.output.FarmResultsEval.reduce_all", "foxes.output.FarmResultsEval.reduce_states", "foxes.output.FarmResultsEval.reduce_turbines", "foxes.output.FarmResultsEval.weinsum", "foxes.output.FlowPlots2D", "foxes.output.FlowPlots2D.__init__", "foxes.output.FlowPlots2D.gen_states_fig_xy", "foxes.output.FlowPlots2D.gen_states_fig_xz", "foxes.output.FlowPlots2D.gen_states_fig_yz", "foxes.output.FlowPlots2D.get_mean_fig_xy", "foxes.output.FlowPlots2D.get_mean_fig_xz", "foxes.output.FlowPlots2D.get_mean_fig_yz", "foxes.output.Output", "foxes.output.Output.new", "foxes.output.Output.print_models", "foxes.output.Output.write", "foxes.output.ResultsWriter", "foxes.output.ResultsWriter.__init__", "foxes.output.ResultsWriter.write_csv", "foxes.output.RosePlotOutput", "foxes.output.RosePlotOutput.__init__", "foxes.output.RosePlotOutput.get_data", "foxes.output.RosePlotOutput.get_data_info", "foxes.output.RosePlotOutput.get_figure", "foxes.output.RosePlotOutput.write_figure", "foxes.output.StateTurbineMap", "foxes.output.StateTurbineMap.__init__", "foxes.output.StateTurbineMap.plot_map", "foxes.output.StatesRosePlotOutput", "foxes.output.StatesRosePlotOutput.__init__", "foxes.output.TurbineTypeCurves", "foxes.output.TurbineTypeCurves.__init__", "foxes.output.TurbineTypeCurves.plot_curves", "foxes.utils.DataBook", "foxes.utils.DataBook.__init__", "foxes.utils.DataBook.add_data_package", "foxes.utils.DataBook.add_data_package_file", "foxes.utils.DataBook.add_file", "foxes.utils.DataBook.add_files", "foxes.utils.DataBook.get_file_path", "foxes.utils.DataBook.toc", "foxes.utils.PandasFileHelper", "foxes.utils.PandasFileHelper.DATA_FILE_FORMATS", "foxes.utils.PandasFileHelper.DEFAULT_FORMAT_DICT", "foxes.utils.PandasFileHelper.DEFAULT_READING_PARAMETERS", "foxes.utils.PandasFileHelper.DEFAULT_WRITING_PARAMETERS", "foxes.utils.PandasFileHelper.read_file", "foxes.utils.PandasFileHelper.write_file", "foxes.utils.abl.neutral.calc_ws", "foxes.utils.abl.neutral.logz", "foxes.utils.abl.neutral.ustar", "foxes.utils.abl.sheared.calc_ws", "foxes.utils.abl.stable.calc_ws", "foxes.utils.abl.stable.lgz", "foxes.utils.abl.stable.logz", "foxes.utils.abl.stable.psi", "foxes.utils.abl.stable.ustar", "foxes.utils.abl.unstable.calc_ws", "foxes.utils.abl.unstable.logz", "foxes.utils.abl.unstable.psi", "foxes.utils.abl.unstable.ustar", "foxes.utils.all_subclasses", "foxes.utils.cubic_roots", "foxes.utils.delta_wd", "foxes.utils.geom2d.AreaGeometry", "foxes.utils.geom2d.AreaGeometry.add_to_figure", "foxes.utils.geom2d.AreaGeometry.inverse", "foxes.utils.geom2d.AreaGeometry.p_max", "foxes.utils.geom2d.AreaGeometry.p_min", "foxes.utils.geom2d.AreaGeometry.points_distance", "foxes.utils.geom2d.AreaGeometry.points_inside", "foxes.utils.geom2d.AreaIntersection", "foxes.utils.geom2d.AreaIntersection.__new__", "foxes.utils.geom2d.AreaUnion", "foxes.utils.geom2d.AreaUnion.__init__", "foxes.utils.geom2d.AreaUnion.add_to_figure", "foxes.utils.geom2d.AreaUnion.inverse", "foxes.utils.geom2d.AreaUnion.p_max", "foxes.utils.geom2d.AreaUnion.p_min", "foxes.utils.geom2d.AreaUnion.points_distance", "foxes.utils.geom2d.AreaUnion.points_inside", "foxes.utils.geom2d.Circle", "foxes.utils.geom2d.Circle.__init__", "foxes.utils.geom2d.Circle.add_to_figure", "foxes.utils.geom2d.Circle.p_max", "foxes.utils.geom2d.Circle.p_min", "foxes.utils.geom2d.Circle.points_distance", "foxes.utils.geom2d.Circle.points_inside", "foxes.utils.geom2d.ClosedPolygon", "foxes.utils.geom2d.ClosedPolygon.__init__", "foxes.utils.geom2d.ClosedPolygon.add_to_figure", "foxes.utils.geom2d.ClosedPolygon.p_max", "foxes.utils.geom2d.ClosedPolygon.p_min", "foxes.utils.geom2d.ClosedPolygon.points_distance", "foxes.utils.geom2d.ClosedPolygon.points_inside", "foxes.utils.geom2d.HalfPlane", "foxes.utils.geom2d.HalfPlane.__init__", "foxes.utils.geom2d.HalfPlane.add_to_figure", "foxes.utils.geom2d.HalfPlane.inverse", "foxes.utils.geom2d.HalfPlane.p_max", "foxes.utils.geom2d.HalfPlane.p_min", "foxes.utils.geom2d.HalfPlane.points_distance", "foxes.utils.geom2d.HalfPlane.points_inside", "foxes.utils.geom2d.InvertedAreaGeometry", "foxes.utils.geom2d.InvertedAreaGeometry.__init__", "foxes.utils.geom2d.InvertedAreaGeometry.add_to_figure", "foxes.utils.geom2d.InvertedAreaGeometry.inverse", "foxes.utils.geom2d.InvertedAreaGeometry.p_max", "foxes.utils.geom2d.InvertedAreaGeometry.p_min", "foxes.utils.geom2d.InvertedAreaGeometry.points_distance", "foxes.utils.geom2d.InvertedAreaGeometry.points_inside", "foxes.opt.constraints.AreaGeometryConstraint", "foxes.opt.constraints.AreaGeometryConstraint.__init__", "foxes.opt.constraints.AreaGeometryConstraint.__str__", "foxes.opt.constraints.AreaGeometryConstraint.ana_deriv", "foxes.opt.constraints.AreaGeometryConstraint.calc_individual", "foxes.opt.constraints.AreaGeometryConstraint.calc_population", "foxes.opt.constraints.AreaGeometryConstraint.component_names", "foxes.opt.constraints.AreaGeometryConstraint.finalize", "foxes.opt.constraints.AreaGeometryConstraint.finalize_individual", "foxes.opt.constraints.AreaGeometryConstraint.finalize_population", "foxes.opt.constraints.AreaGeometryConstraint.initialize", "foxes.opt.constraints.AreaGeometryConstraint.initialized", "foxes.opt.constraints.AreaGeometryConstraint.n_components", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.var_names_float", "foxes.opt.constraints.AreaGeometryConstraint.var_names_int", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_float", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_int", "foxes.opt.constraints.FarmBoundaryConstraint", "foxes.opt.constraints.FarmBoundaryConstraint.__init__", "foxes.opt.constraints.MinDistConstraint", "foxes.opt.constraints.MinDistConstraint.__init__", "foxes.opt.constraints.MinDistConstraint.calc_individual", "foxes.opt.constraints.MinDistConstraint.calc_population", "foxes.opt.constraints.MinDistConstraint.initialize", "foxes.opt.constraints.MinDistConstraint.n_components", "foxes.opt.constraints.MinDistConstraint.vardeps_float", "foxes.opt.core.FarmConstraint", "foxes.opt.core.FarmConstraint.__init__", "foxes.opt.core.FarmConstraint.add_to_layout_figure", "foxes.opt.core.FarmConstraint.calc_individual", "foxes.opt.core.FarmConstraint.calc_population", "foxes.opt.core.FarmConstraint.farm", "foxes.opt.core.FarmConstraint.n_components", "foxes.opt.core.FarmConstraint.n_sel_turbines", "foxes.opt.core.FarmConstraint.print_models", "foxes.opt.core.FarmConstraint.sel_turbines", "foxes.opt.core.FarmConstraint.vardeps_float", "foxes.opt.core.FarmObjective", "foxes.opt.core.FarmObjective.__init__", "foxes.opt.core.FarmObjective.add_to_layout_figure", "foxes.opt.core.FarmObjective.farm", "foxes.opt.core.FarmObjective.n_sel_turbines", "foxes.opt.core.FarmObjective.print_models", "foxes.opt.core.FarmObjective.sel_turbines", "foxes.opt.core.FarmOptProblem", "foxes.opt.core.FarmOptProblem.INT_INF", "foxes.opt.core.FarmOptProblem.__init__", "foxes.opt.core.FarmOptProblem.add_constraint", "foxes.opt.core.FarmOptProblem.add_objective", "foxes.opt.core.FarmOptProblem.add_to_layout_figure", "foxes.opt.core.FarmOptProblem.all_turbines", "foxes.opt.core.FarmOptProblem.apply_individual", "foxes.opt.core.FarmOptProblem.apply_population", "foxes.opt.core.FarmOptProblem.calc_gradients", "foxes.opt.core.FarmOptProblem.check_constraints_individual", "foxes.opt.core.FarmOptProblem.check_constraints_population", "foxes.opt.core.FarmOptProblem.constraints_tol", "foxes.opt.core.FarmOptProblem.counter", "foxes.opt.core.FarmOptProblem.evaluate_individual", "foxes.opt.core.FarmOptProblem.evaluate_population", "foxes.opt.core.FarmOptProblem.farm", "foxes.opt.core.FarmOptProblem.finalize_individual", "foxes.opt.core.FarmOptProblem.finalize_population", "foxes.opt.core.FarmOptProblem.get_gradients", "foxes.opt.core.FarmOptProblem.initial_values_float", "foxes.opt.core.FarmOptProblem.initial_values_int", "foxes.opt.core.FarmOptProblem.initialize", "foxes.opt.core.FarmOptProblem.max_values_constraints", "foxes.opt.core.FarmOptProblem.max_values_float", "foxes.opt.core.FarmOptProblem.max_values_int", "foxes.opt.core.FarmOptProblem.maximize_objs", "foxes.opt.core.FarmOptProblem.min_values_constraints", "foxes.opt.core.FarmOptProblem.min_values_float", "foxes.opt.core.FarmOptProblem.min_values_int", "foxes.opt.core.FarmOptProblem.n_constraints", "foxes.opt.core.FarmOptProblem.n_objectives", "foxes.opt.core.FarmOptProblem.n_sel_turbines", "foxes.opt.core.FarmOptProblem.n_vars_float", "foxes.opt.core.FarmOptProblem.n_vars_int", "foxes.opt.core.FarmOptProblem.parse_tvar", "foxes.opt.core.FarmOptProblem.sel_turbines", "foxes.opt.core.FarmOptProblem.tvar", "foxes.opt.core.FarmOptProblem.update_problem_individual", "foxes.opt.core.FarmOptProblem.update_problem_population", "foxes.opt.core.FarmOptProblem.var_names_float", "foxes.opt.core.FarmOptProblem.var_names_int", "foxes.opt.core.FarmVarsProblem", "foxes.opt.core.FarmVarsProblem.initialize", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_individual", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_population", "foxes.opt.core.FarmVarsProblem.update_problem_individual", "foxes.opt.core.FarmVarsProblem.update_problem_population", "foxes.opt.core.PopStates", "foxes.opt.core.PopStates.__init__", "foxes.opt.core.PopStates.calculate", "foxes.opt.core.PopStates.initialize", "foxes.opt.core.PopStates.output_point_vars", "foxes.opt.core.PopStates.size", "foxes.opt.core.PopStates.weights", "foxes.opt.objectives.FarmVarObjective", "foxes.opt.objectives.FarmVarObjective.__init__", "foxes.opt.objectives.FarmVarObjective.calc_individual", "foxes.opt.objectives.FarmVarObjective.calc_population", "foxes.opt.objectives.FarmVarObjective.finalize_individual", "foxes.opt.objectives.FarmVarObjective.initialize", "foxes.opt.objectives.FarmVarObjective.maximize", "foxes.opt.objectives.FarmVarObjective.n_components", "foxes.opt.objectives.FarmVarObjective.vardeps_float", "foxes.opt.objectives.MaxFarmPower", "foxes.opt.objectives.MaxFarmPower.__init__", "foxes.opt.objectives.MaxNTurbines", "foxes.opt.objectives.MaxNTurbines.__init__", "foxes.opt.objectives.MaxNTurbines.calc_individual", "foxes.opt.objectives.MaxNTurbines.calc_population", "foxes.opt.objectives.MaxNTurbines.maximize", "foxes.opt.objectives.MaxNTurbines.n_components", "foxes.opt.objectives.MinimalMaxTI", "foxes.opt.objectives.MinimalMaxTI.__init__", "foxes.opt.problems.OptFarmVars", "foxes.opt.problems.OptFarmVars.__init__", "foxes.opt.problems.OptFarmVars.add_var", "foxes.opt.problems.OptFarmVars.initial_values_float", "foxes.opt.problems.OptFarmVars.initial_values_int", "foxes.opt.problems.OptFarmVars.initialize", "foxes.opt.problems.OptFarmVars.max_values_float", "foxes.opt.problems.OptFarmVars.max_values_int", "foxes.opt.problems.OptFarmVars.min_values_float", "foxes.opt.problems.OptFarmVars.min_values_int", "foxes.opt.problems.OptFarmVars.opt2farm_vars_individual", "foxes.opt.problems.OptFarmVars.opt2farm_vars_population", "foxes.opt.problems.OptFarmVars.var_names_float", "foxes.opt.problems.OptFarmVars.var_names_int", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_population", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.get_bounds", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Valid", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.cdist", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.Objective", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.cdist", "foxes.opt.problems.layout.geom_layouts.GeomLayout", "foxes.opt.problems.layout.geom_layouts.GeomLayout.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayout.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayout.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.var_names_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_int", "foxes.opt.problems.layout.FarmLayoutOptProblem", "foxes.opt.problems.layout.FarmLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.initialize", "foxes.opt.problems.layout.FarmLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.FarmLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_int", "foxes.opt.problems.layout.RegularLayoutOptProblem", "foxes.opt.problems.layout.RegularLayoutOptProblem.ANGLE", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegularLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegularLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegularLayoutOptProblem.var_names_float", "foxes.utils.read_shp", "foxes.utils.read_shp_polygons", "foxes.utils.runners.DaskRunner", "foxes.utils.runners.DaskRunner.__init__", "foxes.utils.runners.DaskRunner.finalize", "foxes.utils.runners.DaskRunner.initialize", "foxes.utils.runners.DaskRunner.is_distributed", "foxes.utils.runners.DaskRunner.print", "foxes.utils.runners.DaskRunner.run", "foxes.utils.runners.DefaultRunner", "foxes.utils.runners.DefaultRunner.run", "foxes.utils.runners.Runner", "foxes.utils.runners.Runner.__init__", "foxes.utils.runners.Runner.finalize", "foxes.utils.runners.Runner.initialize", "foxes.utils.runners.Runner.initialized", "foxes.utils.runners.Runner.run", "foxes.utils.show_plotly_fig", "foxes.utils.shp2csv", "foxes.utils.shp2geom2d", "foxes.utils.two_circles.area", "foxes.utils.two_circles.calc_area", "foxes.utils.uv2wd", "foxes.utils.wd2uv", "foxes.utils.wd2wdvec", "foxes.utils.wdvec2wd", "API", "foxes.constants", "foxes.core", "foxes", "foxes.input", "foxes.models", "foxes.opt", "foxes.opt.problems", "foxes.opt.problems.layout.geom_layouts", "foxes.output", "foxes.utils", "foxes.utils.abl.neutral", "foxes.variables", "foxes.models.wake_models", "Citation", "Examples", "History", "Welcome to FOXES", "Installation", "Static data", "Heterogeneous flow", "Layout optimization", "The model book", "Multi-height wind data", "Overview - how to setup foxes", "Power mask", "Wind sector management", "Single row of turbines", "Dynamic wakes", "Timeseries data", "Wind rose data", "Yawed rotor wakes"], "terms": {"class": [0, 9, 14, 22, 25, 35, 44, 49, 57, 58, 71, 77, 79, 83, 91, 100, 105, 109, 111, 113, 116, 117, 122, 126, 129, 134, 391, 399, 410, 412, 419, 426, 437, 441, 442, 449, 452, 457, 458, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 583, 584, 585, 586, 589, 590, 595, 596, 601, 602, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 761, 770, 789, 797, 798, 801, 804, 810, 813, 815, 818, 826, 846, 849, 856, 858, 866, 873, 880, 888, 896, 917, 919, 926, 937, 944, 953, 963, 986, 987, 992, 999, 1008, 1010, 1016, 1018, 1023, 1032, 1033, 1037, 1038, 1042, 1043, 1047, 1048, 1053, 1058, 1063, 1064, 1069, 1070, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1160, 1166, 1171, 1182, 1191, 1199, 1206, 1208, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1236, 1242, 1245, 1251, 1254], "fox": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "core": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 388, 389, 390, 391, 393, 395, 396, 398, 399, 402, 403, 405, 406, 409, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 428, 429, 430, 432, 433, 436, 440, 441, 442, 443, 445, 446, 447, 448, 452, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 514, 515, 518, 522, 525, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 554, 555, 556, 558, 560, 561, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 586, 587, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 610, 613, 616, 619, 622, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 674, 675, 676, 680, 681, 682, 686, 687, 688, 692, 693, 697, 698, 699, 700, 716, 718, 719, 724, 725, 729, 730, 734, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 747, 749, 750, 751, 753, 754, 755, 756, 757, 759, 760, 772, 784, 813, 896, 919, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1010, 1018, 1058, 1109, 1113, 1123, 1133, 1143, 1157, 1166, 1167, 1182, 1188, 1223, 1226, 1227, 1228, 1230, 1231, 1236, 1239], "algorithm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 23, 24, 28, 29, 31, 32, 34, 37, 38, 39, 40, 41, 42, 46, 47, 48, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 67, 72, 73, 74, 75, 76, 78, 80, 82, 86, 87, 88, 89, 90, 93, 95, 96, 98, 102, 104, 110, 118, 119, 120, 121, 123, 124, 125, 127, 128, 393, 395, 396, 398, 402, 403, 405, 406, 409, 414, 415, 416, 418, 421, 422, 423, 425, 429, 430, 432, 433, 436, 440, 445, 446, 447, 448, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 502, 503, 504, 506, 507, 510, 511, 514, 515, 522, 527, 528, 531, 532, 533, 536, 537, 538, 542, 543, 544, 545, 548, 549, 550, 554, 555, 556, 560, 561, 564, 565, 566, 569, 570, 572, 573, 575, 576, 580, 581, 587, 588, 591, 592, 593, 594, 597, 598, 599, 600, 603, 604, 605, 606, 626, 628, 629, 630, 631, 632, 635, 636, 637, 641, 642, 643, 644, 647, 648, 649, 650, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 670, 671, 674, 675, 676, 680, 681, 682, 686, 687, 688, 692, 693, 697, 698, 699, 716, 724, 725, 729, 730, 734, 735, 738, 739, 740, 743, 744, 745, 746, 749, 750, 753, 754, 755, 756, 759, 760, 772, 784, 789, 790, 791, 792, 793, 794, 795, 796, 944, 946, 994, 995, 996, 998, 1167, 1188, 1225, 1228, 1239, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "model": [0, 1, 5, 6, 7, 12, 14, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 328, 329, 364, 365, 385, 391, 393, 395, 396, 399, 402, 403, 405, 406, 410, 412, 414, 415, 416, 419, 421, 422, 423, 426, 429, 430, 432, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 770, 789, 797, 798, 799, 801, 804, 810, 813, 815, 816, 817, 896, 917, 919, 926, 934, 937, 942, 966, 986, 987, 992, 994, 995, 996, 999, 1008, 1010, 1016, 1020, 1223, 1224, 1225, 1226, 1229, 1233, 1235, 1238, 1239, 1240, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "sourc": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 326, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 908, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 934, 937, 938, 939, 942, 944, 946, 949, 951, 952, 966, 979, 981, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1240, 1241, 1254], "abstract": [0, 22, 23, 44, 46, 47, 57, 71, 73, 74, 78, 79, 80, 81, 91, 94, 97, 99, 100, 103, 104, 109, 110, 111, 113, 114, 115, 117, 119, 121, 122, 123, 125, 126, 127, 128, 658, 659, 661, 663, 669, 670, 672, 674, 675, 849, 852, 853, 854, 855, 856, 926, 932, 937, 944, 986, 988, 989, 1058, 1109, 1111, 1208, 1213, 1223, 1225, 1229, 1233, 1236, 1239], "base": [0, 11, 22, 23, 25, 26, 28, 35, 37, 38, 44, 46, 49, 52, 57, 58, 68, 71, 79, 80, 83, 86, 91, 100, 109, 110, 111, 113, 117, 119, 122, 126, 139, 201, 264, 385, 389, 390, 391, 393, 399, 402, 410, 412, 414, 419, 421, 426, 429, 437, 441, 442, 445, 457, 465, 474, 483, 486, 494, 500, 502, 505, 506, 508, 510, 512, 518, 525, 527, 529, 531, 534, 536, 540, 542, 546, 548, 551, 554, 558, 560, 562, 564, 567, 569, 571, 572, 574, 575, 577, 580, 582, 584, 586, 587, 589, 591, 595, 597, 601, 603, 607, 610, 613, 616, 619, 622, 626, 628, 633, 635, 638, 641, 645, 647, 651, 653, 658, 661, 669, 672, 677, 683, 684, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 797, 818, 835, 841, 845, 846, 849, 888, 926, 937, 944, 953, 986, 992, 994, 999, 1033, 1038, 1043, 1048, 1058, 1064, 1070, 1109, 1208, 1223, 1225, 1228, 1229, 1232, 1233, 1234, 1236, 1239, 1246, 1247, 1249, 1251, 1252, 1253, 1254], "collect": [0, 150, 269, 757, 791, 792, 793, 794, 795, 796, 1074, 1112, 1228, 1247, 1250], "requir": [0, 21, 24, 31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 457, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995, 1240, 1242, 1243, 1244, 1245, 1247, 1252, 1254], "object": [0, 6, 10, 12, 17, 22, 25, 31, 35, 40, 44, 49, 54, 57, 58, 61, 63, 64, 65, 68, 69, 71, 73, 74, 75, 79, 83, 88, 91, 100, 109, 111, 113, 117, 122, 126, 139, 169, 189, 231, 264, 287, 391, 395, 399, 405, 410, 412, 415, 419, 422, 426, 432, 437, 440, 441, 442, 447, 457, 459, 460, 462, 465, 468, 469, 471, 474, 477, 478, 480, 483, 485, 486, 488, 489, 491, 494, 496, 497, 500, 503, 505, 508, 512, 518, 522, 525, 529, 532, 534, 537, 540, 544, 546, 549, 551, 555, 558, 562, 565, 567, 571, 574, 577, 582, 584, 586, 589, 593, 595, 599, 601, 605, 607, 610, 613, 616, 619, 622, 626, 632, 633, 638, 644, 645, 650, 651, 657, 658, 661, 667, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 745, 747, 751, 755, 757, 763, 791, 792, 793, 794, 795, 796, 804, 808, 813, 850, 860, 868, 875, 882, 890, 896, 903, 906, 917, 919, 926, 937, 938, 944, 947, 948, 953, 958, 959, 961, 962, 963, 966, 970, 975, 986, 987, 992, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1023, 1032, 1037, 1042, 1047, 1051, 1053, 1058, 1063, 1069, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1119, 1123, 1129, 1133, 1139, 1143, 1150, 1157, 1158, 1160, 1166, 1168, 1171, 1182, 1189, 1191, 1216, 1226, 1228, 1230, 1242, 1243, 1244, 1245, 1248, 1249, 1250, 1252, 1253, 1254], "run": [0, 1, 9, 22, 25, 35, 37, 44, 45, 49, 57, 58, 61, 71, 77, 79, 83, 91, 100, 109, 111, 113, 114, 116, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 552, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 608, 610, 611, 613, 614, 616, 617, 619, 620, 622, 624, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 740, 741, 746, 747, 751, 756, 757, 761, 770, 789, 797, 798, 801, 804, 810, 813, 815, 944, 946, 982, 983, 990, 991, 992, 1167, 1178, 1179, 1199, 1200, 1205, 1206, 1207, 1208, 1213, 1225, 1228, 1229, 1239, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "calcul": [0, 3, 14, 15, 22, 23, 24, 25, 28, 29, 31, 32, 34, 35, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 56, 57, 62, 65, 73, 74, 75, 78, 79, 80, 82, 83, 86, 87, 88, 90, 91, 92, 93, 95, 96, 98, 100, 102, 104, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 342, 343, 367, 368, 391, 393, 395, 396, 398, 399, 402, 403, 405, 406, 409, 410, 412, 414, 415, 416, 418, 419, 421, 422, 423, 425, 426, 429, 430, 432, 433, 436, 437, 441, 442, 445, 446, 447, 448, 455, 459, 460, 461, 462, 464, 465, 468, 469, 470, 471, 473, 477, 478, 479, 480, 482, 485, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 514, 515, 518, 519, 522, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 554, 555, 556, 558, 560, 561, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 689, 692, 693, 694, 697, 698, 699, 700, 716, 721, 724, 725, 726, 729, 730, 731, 734, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 747, 749, 750, 751, 753, 754, 755, 756, 757, 759, 760, 761, 762, 770, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 804, 805, 814, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 845, 847, 848, 849, 854, 856, 858, 864, 866, 871, 873, 878, 880, 886, 888, 894, 896, 899, 900, 901, 917, 919, 921, 922, 926, 929, 930, 937, 944, 953, 963, 982, 983, 986, 990, 991, 992, 994, 995, 996, 998, 999, 1001, 1002, 1008, 1010, 1012, 1013, 1016, 1018, 1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1063, 1065, 1066, 1069, 1071, 1072, 1074, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1112, 1113, 1123, 1133, 1143, 1157, 1166, 1178, 1179, 1182, 1217, 1218, 1219, 1220, 1221, 1222, 1225, 1228, 1229, 1232, 1233, 1234, 1235, 1236, 1239, 1240, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254], "contain": [0, 10, 14, 15, 17, 452, 818, 820, 821, 963, 1198, 1225, 1226, 1227, 1228, 1229, 1233, 1243, 1244, 1245, 1247, 1248, 1250, 1252], "function": [0, 11, 22, 23, 24, 28, 37, 46, 48, 49, 52, 73, 74, 80, 82, 83, 86, 95, 110, 119, 393, 399, 401, 402, 407, 414, 421, 426, 428, 429, 434, 445, 459, 460, 468, 469, 477, 478, 485, 488, 489, 496, 497, 502, 506, 510, 514, 525, 526, 527, 531, 536, 542, 548, 554, 560, 564, 569, 572, 575, 577, 580, 587, 591, 597, 603, 628, 635, 641, 647, 653, 791, 792, 793, 794, 795, 796, 797, 800, 837, 840, 842, 844, 847, 896, 908, 915, 916, 917, 919, 924, 925, 926, 932, 936, 937, 938, 944, 953, 958, 959, 961, 962, 963, 974, 975, 982, 983, 986, 990, 991, 994, 999, 1000, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1016, 1017, 1018, 1032, 1036, 1037, 1041, 1042, 1046, 1047, 1052, 1053, 1057, 1058, 1063, 1068, 1069, 1073, 1074, 1075, 1081, 1082, 1087, 1088, 1093, 1094, 1099, 1100, 1105, 1106, 1109, 1112, 1113, 1123, 1133, 1143, 1157, 1158, 1166, 1168, 1178, 1179, 1182, 1189, 1199, 1205, 1206, 1207, 1208, 1213, 1217, 1223, 1225, 1226, 1227, 1228, 1229, 1232, 1233, 1234, 1239, 1242, 1244, 1245, 1253], "which": [0, 25, 32, 35, 42, 44, 47, 49, 56, 57, 74, 79, 81, 83, 90, 91, 98, 100, 102, 109, 111, 117, 123, 124, 125, 127, 128, 391, 396, 399, 401, 406, 410, 412, 416, 419, 423, 426, 433, 437, 441, 442, 448, 460, 469, 478, 489, 497, 500, 504, 505, 507, 508, 511, 512, 518, 525, 528, 529, 533, 534, 538, 540, 545, 546, 547, 550, 551, 556, 558, 561, 562, 563, 566, 567, 570, 571, 573, 574, 576, 577, 581, 582, 584, 586, 588, 589, 590, 594, 595, 596, 600, 601, 606, 626, 627, 651, 652, 659, 660, 661, 663, 664, 666, 670, 671, 674, 676, 680, 682, 686, 688, 692, 693, 697, 699, 724, 725, 729, 730, 734, 735, 736, 738, 739, 740, 741, 743, 744, 746, 749, 750, 751, 753, 754, 756, 759, 760, 763, 766, 767, 768, 769, 794, 795, 796, 813, 953, 963, 992, 996, 999, 1000, 1009, 1017, 1020, 1074, 1112, 1219, 1222, 1225, 1228, 1236, 1240, 1243, 1244, 1247, 1250, 1251, 1252, 1253, 1254], "ar": [0, 22, 25, 32, 35, 42, 44, 47, 49, 56, 57, 79, 81, 83, 90, 91, 92, 94, 95, 98, 100, 102, 109, 111, 117, 123, 124, 125, 126, 231, 385, 391, 392, 396, 399, 406, 410, 412, 416, 419, 423, 426, 433, 437, 441, 442, 448, 457, 458, 465, 466, 474, 475, 484, 487, 495, 500, 504, 505, 507, 508, 511, 512, 513, 514, 518, 519, 521, 525, 526, 528, 529, 533, 534, 538, 540, 541, 545, 546, 547, 550, 551, 556, 558, 561, 562, 563, 566, 567, 570, 571, 573, 574, 576, 577, 581, 582, 584, 586, 588, 589, 594, 595, 600, 601, 606, 664, 666, 682, 688, 693, 699, 725, 730, 735, 736, 740, 741, 746, 751, 756, 768, 785, 786, 787, 800, 803, 849, 855, 856, 858, 865, 866, 872, 873, 879, 880, 887, 888, 895, 896, 917, 919, 926, 944, 950, 953, 954, 955, 963, 986, 992, 996, 1018, 1020, 1032, 1037, 1042, 1047, 1053, 1058, 1060, 1061, 1062, 1063, 1069, 1074, 1112, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1217, 1227, 1228, 1230, 1231, 1233, 1236, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "meant": 0, "call": [0, 5, 22, 24, 35, 48, 49, 82, 83, 534, 944, 953, 982, 983, 986, 990, 991, 1018, 1074, 1112, 1113, 1123, 1133, 1143, 1157, 1166, 1178, 1179, 1182, 1225, 1228, 1239, 1241, 1247, 1248, 1250, 1251, 1254], "from": [0, 6, 14, 17, 22, 25, 26, 31, 35, 40, 44, 49, 54, 57, 58, 61, 63, 64, 65, 71, 72, 73, 75, 79, 83, 88, 91, 93, 96, 100, 109, 111, 113, 117, 122, 126, 134, 135, 136, 137, 139, 144, 148, 150, 231, 264, 269, 342, 343, 367, 368, 383, 384, 387, 388, 391, 392, 395, 399, 401, 405, 410, 412, 415, 419, 422, 426, 428, 432, 437, 439, 441, 442, 447, 457, 458, 459, 462, 465, 466, 468, 471, 474, 475, 477, 480, 483, 484, 485, 486, 487, 488, 491, 494, 495, 496, 500, 501, 503, 505, 508, 512, 515, 518, 522, 525, 529, 530, 532, 534, 537, 540, 544, 546, 547, 549, 551, 555, 558, 562, 565, 567, 571, 574, 577, 582, 584, 586, 589, 593, 595, 599, 601, 605, 607, 610, 613, 616, 619, 622, 626, 627, 632, 633, 638, 644, 645, 646, 650, 651, 652, 657, 658, 661, 667, 669, 672, 677, 678, 683, 689, 694, 700, 721, 726, 727, 731, 736, 741, 745, 747, 751, 755, 757, 761, 762, 794, 795, 796, 800, 806, 808, 809, 813, 817, 818, 819, 820, 821, 846, 944, 947, 948, 966, 979, 986, 992, 995, 1018, 1074, 1112, 1157, 1166, 1182, 1198, 1219, 1220, 1221, 1222, 1226, 1227, 1228, 1232, 1233, 1235, 1236, 1239, 1241, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1254], "top": [0, 486, 672, 1223, 1226, 1228, 1236, 1254], "level": [0, 1, 5, 12, 29, 31, 39, 40, 53, 54, 57, 62, 65, 75, 87, 88, 385, 387, 388, 389, 390, 392, 395, 403, 405, 407, 415, 422, 430, 432, 434, 446, 447, 455, 461, 462, 470, 471, 479, 480, 490, 491, 503, 522, 532, 537, 543, 544, 549, 555, 565, 592, 593, 598, 599, 604, 605, 629, 632, 644, 650, 654, 657, 665, 667, 745, 755, 770, 772, 773, 777, 791, 792, 793, 794, 795, 796, 803, 903, 904, 905, 906, 923, 947, 948, 953, 954, 955, 961, 962, 963, 966, 987, 995, 1003, 1004, 1018, 1020, 1023, 1051, 1060, 1061, 1067, 1079, 1119, 1129, 1139, 1150, 1158, 1160, 1168, 1171, 1189, 1191, 1199, 1200, 1215, 1223, 1225, 1226, 1239], "code": [0, 231, 700, 1236, 1239, 1240, 1241], "mbook": [0, 1, 440, 813, 814, 815, 816, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "modelbook": [0, 1, 440, 452, 453, 454, 455, 456, 813, 815, 816, 1226, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "The": [0, 1, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 139, 217, 221, 225, 229, 230, 231, 237, 246, 263, 264, 314, 315, 332, 335, 336, 337, 339, 340, 344, 345, 346, 347, 348, 349, 350, 353, 354, 356, 360, 361, 362, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 715, 716, 718, 719, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1205, 1207, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1226, 1228, 1230, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "book": [0, 1, 105, 106, 135, 387, 440, 661, 662, 673, 678, 684, 690, 695, 722, 727, 732, 813, 815, 816, 817, 818, 819, 1238, 1240, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "farm": [0, 1, 13, 28, 35, 37, 38, 44, 46, 49, 52, 57, 64, 71, 73, 74, 78, 80, 86, 91, 93, 95, 96, 105, 106, 110, 118, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 132, 262, 385, 386, 387, 388, 389, 390, 393, 402, 414, 421, 429, 440, 441, 442, 445, 452, 457, 459, 460, 464, 465, 468, 469, 473, 474, 477, 478, 482, 483, 485, 486, 488, 489, 493, 494, 496, 497, 498, 499, 502, 506, 510, 514, 515, 525, 526, 527, 531, 536, 542, 548, 551, 554, 558, 560, 564, 569, 572, 575, 578, 580, 587, 591, 597, 603, 626, 628, 630, 631, 635, 636, 637, 641, 642, 643, 647, 648, 649, 651, 652, 653, 655, 656, 659, 660, 663, 664, 666, 670, 671, 674, 675, 676, 677, 678, 680, 681, 682, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 716, 721, 722, 724, 725, 729, 730, 734, 735, 738, 739, 743, 744, 749, 750, 753, 754, 759, 760, 761, 762, 763, 764, 765, 770, 771, 772, 773, 774, 777, 778, 789, 790, 791, 792, 793, 794, 795, 796, 801, 802, 804, 805, 806, 808, 809, 810, 811, 814, 896, 917, 919, 926, 931, 937, 940, 944, 960, 982, 983, 986, 987, 988, 989, 990, 991, 994, 999, 1008, 1010, 1016, 1018, 1020, 1028, 1029, 1113, 1123, 1133, 1143, 1157, 1163, 1164, 1166, 1176, 1177, 1178, 1179, 1182, 1194, 1195, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1237, 1239, 1240, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "windfarm": [0, 1, 129, 130, 131, 132, 133, 385, 386, 387, 388, 389, 390, 440, 761, 762, 896, 919, 931, 940, 960, 1226, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "wind": [0, 1, 35, 38, 100, 105, 106, 129, 130, 131, 132, 262, 330, 331, 341, 342, 343, 347, 348, 366, 367, 368, 374, 376, 385, 386, 387, 388, 389, 390, 399, 412, 413, 419, 420, 440, 441, 534, 535, 567, 568, 583, 585, 589, 590, 595, 596, 601, 602, 607, 610, 613, 616, 619, 626, 633, 634, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 747, 761, 762, 764, 765, 778, 791, 792, 793, 794, 795, 796, 804, 806, 808, 809, 813, 817, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 845, 848, 896, 917, 919, 926, 931, 937, 940, 944, 960, 986, 999, 1008, 1010, 1016, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1233, 1234, 1235, 1238, 1239, 1240, 1243, 1244, 1245, 1247, 1248, 1250, 1251, 1252, 1254], "chunk": [0, 1, 2, 14, 21, 22, 23, 28, 31, 37, 40, 46, 52, 54, 65, 75, 80, 86, 88, 110, 119, 393, 395, 402, 405, 414, 415, 421, 422, 429, 432, 445, 447, 462, 471, 480, 491, 502, 503, 506, 510, 522, 527, 531, 532, 536, 537, 542, 544, 548, 549, 554, 555, 560, 564, 565, 569, 572, 575, 580, 587, 591, 593, 597, 599, 603, 605, 628, 632, 635, 641, 644, 647, 650, 653, 657, 667, 745, 755, 994, 995, 1239, 1243, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "dict": [0, 1, 6, 7, 9, 11, 12, 14, 15, 17, 23, 24, 28, 31, 35, 36, 37, 40, 43, 46, 48, 52, 54, 65, 74, 75, 78, 80, 82, 86, 88, 93, 95, 110, 114, 118, 123, 124, 125, 136, 137, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 399, 401, 402, 405, 414, 415, 419, 420, 421, 422, 426, 428, 429, 432, 439, 440, 445, 447, 449, 450, 451, 452, 457, 458, 460, 462, 464, 469, 471, 473, 475, 478, 480, 482, 484, 489, 491, 493, 497, 499, 500, 501, 502, 503, 506, 510, 514, 522, 526, 527, 529, 530, 531, 532, 536, 537, 540, 541, 542, 544, 547, 548, 549, 554, 555, 560, 563, 564, 565, 569, 572, 575, 580, 583, 585, 587, 589, 590, 591, 593, 595, 596, 597, 599, 601, 602, 603, 605, 608, 611, 614, 617, 620, 624, 632, 638, 639, 644, 645, 646, 650, 657, 659, 660, 661, 662, 663, 664, 666, 667, 671, 673, 674, 676, 678, 680, 682, 684, 686, 688, 690, 693, 695, 697, 699, 720, 722, 724, 725, 727, 730, 731, 732, 735, 736, 737, 741, 742, 745, 747, 748, 751, 752, 755, 763, 765, 775, 776, 777, 785, 786, 787, 791, 792, 793, 794, 795, 796, 800, 803, 808, 809, 812, 817, 818, 826, 831, 832, 850, 860, 868, 875, 882, 890, 897, 911, 912, 918, 920, 927, 938, 944, 946, 947, 948, 987, 988, 989, 994, 995, 999, 1000, 1008, 1009, 1011, 1016, 1017, 1019, 1023, 1028, 1029, 1033, 1038, 1043, 1048, 1064, 1070, 1074, 1112, 1117, 1127, 1137, 1147, 1160, 1163, 1164, 1167, 1171, 1176, 1177, 1188, 1191, 1194, 1195, 1197, 1198, 1199, 1200, 1205, 1207, 1213, 1215, 1216, 1225, 1233, 1243, 1244, 1249, 1251], "choic": [0, 1, 105, 112, 340, 363, 757, 758, 763, 785, 786, 787, 1020, 1199, 1200, 1235, 1247, 1250, 1251, 1252, 1253, 1254], "parallel": [0, 1, 22, 24, 25, 35, 44, 48, 49, 57, 79, 82, 83, 91, 100, 109, 111, 391, 399, 410, 412, 419, 426, 437, 441, 442, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 992, 1074, 1112, 1200, 1239, 1240, 1244, 1247, 1252, 1253], "dask": [0, 1, 22, 1199, 1200, 1233, 1239, 1240, 1252], "e": [0, 1, 22, 64, 69, 439, 500, 501, 534, 535, 571, 574, 800, 832, 944, 974, 975, 986, 1018, 1074, 1112, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1198, 1216, 1226, 1228, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1254], "g": [0, 1, 64, 69, 534, 535, 800, 832, 1074, 1112, 1198, 1216, 1226, 1228, 1239, 1240, 1243, 1246, 1250, 1254], "state": [0, 1, 10, 14, 19, 21, 22, 25, 26, 30, 33, 34, 35, 37, 44, 49, 57, 58, 64, 69, 71, 73, 74, 79, 83, 91, 93, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 120, 121, 122, 123, 126, 128, 323, 324, 325, 326, 327, 375, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 457, 459, 460, 465, 468, 469, 474, 477, 478, 483, 485, 486, 488, 489, 494, 496, 497, 500, 501, 505, 508, 512, 514, 518, 525, 526, 527, 529, 531, 534, 536, 540, 542, 546, 548, 551, 554, 558, 560, 562, 564, 567, 569, 571, 572, 574, 575, 577, 580, 582, 584, 586, 587, 589, 591, 595, 597, 601, 603, 607, 610, 613, 616, 619, 622, 626, 630, 631, 633, 636, 637, 638, 642, 643, 645, 648, 649, 651, 655, 656, 658, 659, 660, 661, 663, 664, 669, 670, 671, 672, 674, 675, 676, 677, 680, 681, 683, 686, 687, 689, 692, 694, 697, 698, 700, 716, 719, 721, 724, 726, 729, 731, 734, 736, 739, 741, 744, 747, 750, 751, 754, 757, 760, 761, 762, 763, 770, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 810, 813, 814, 944, 966, 989, 992, 993, 997, 998, 1000, 1009, 1017, 1020, 1029, 1164, 1177, 1195, 1224, 1225, 1228, 1229, 1232, 1235, 1239, 1240, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "1000": [0, 1, 319, 534, 535, 784, 1224, 1243, 1244, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "verbos": [0, 1, 5, 11, 12, 22, 25, 29, 31, 35, 39, 40, 44, 49, 53, 54, 57, 58, 62, 65, 71, 75, 79, 83, 87, 88, 91, 100, 109, 111, 113, 117, 122, 126, 129, 131, 385, 387, 388, 389, 390, 391, 392, 395, 399, 403, 405, 407, 410, 412, 415, 419, 422, 426, 430, 432, 434, 437, 441, 442, 446, 447, 452, 455, 457, 461, 462, 465, 470, 471, 474, 479, 480, 483, 486, 490, 491, 494, 500, 503, 505, 508, 512, 518, 522, 525, 529, 532, 534, 537, 540, 543, 544, 546, 549, 551, 555, 558, 562, 565, 567, 571, 574, 577, 582, 584, 586, 589, 592, 593, 595, 598, 599, 601, 604, 605, 607, 610, 613, 616, 619, 622, 626, 629, 632, 633, 638, 644, 645, 650, 651, 654, 657, 658, 661, 665, 667, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 745, 747, 751, 755, 757, 770, 772, 773, 791, 792, 793, 794, 795, 796, 803, 896, 903, 904, 905, 906, 917, 919, 923, 926, 937, 944, 947, 948, 953, 954, 955, 961, 962, 963, 966, 986, 987, 992, 995, 999, 1003, 1004, 1008, 1010, 1016, 1018, 1023, 1032, 1037, 1042, 1047, 1051, 1053, 1058, 1060, 1061, 1063, 1067, 1069, 1075, 1079, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1119, 1123, 1129, 1133, 1139, 1143, 1150, 1157, 1158, 1160, 1166, 1168, 1171, 1182, 1189, 1191, 1199, 1200, 1204, 1215, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "int": [0, 1, 5, 11, 12, 18, 19, 20, 21, 29, 31, 33, 39, 40, 53, 54, 62, 65, 68, 69, 73, 74, 75, 87, 88, 93, 95, 97, 103, 105, 106, 108, 131, 132, 139, 160, 264, 278, 310, 385, 387, 388, 389, 390, 392, 395, 397, 399, 401, 403, 405, 407, 408, 415, 417, 422, 424, 426, 428, 430, 432, 434, 435, 446, 447, 455, 459, 460, 461, 462, 465, 466, 468, 469, 470, 471, 475, 477, 478, 479, 480, 484, 485, 488, 489, 490, 491, 496, 497, 503, 514, 516, 518, 519, 522, 523, 532, 537, 543, 544, 549, 555, 565, 592, 593, 598, 599, 604, 605, 629, 632, 638, 639, 644, 650, 654, 657, 665, 667, 745, 755, 761, 762, 763, 768, 772, 773, 784, 791, 792, 793, 794, 795, 796, 803, 806, 808, 809, 896, 897, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 916, 917, 919, 920, 921, 922, 923, 924, 926, 927, 929, 930, 932, 933, 935, 937, 938, 941, 943, 944, 946, 947, 948, 953, 954, 955, 957, 961, 962, 963, 965, 966, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 986, 987, 989, 992, 993, 995, 997, 999, 1001, 1002, 1003, 1004, 1006, 1008, 1010, 1012, 1013, 1015, 1016, 1018, 1020, 1022, 1023, 1025, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1081, 1082, 1084, 1085, 1087, 1088, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1102, 1103, 1105, 1106, 1109, 1113, 1114, 1119, 1123, 1124, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1139, 1143, 1144, 1149, 1150, 1152, 1154, 1156, 1157, 1158, 1160, 1164, 1166, 1167, 1168, 1170, 1171, 1173, 1175, 1177, 1181, 1182, 1189, 1191, 1195, 1198, 1199, 1200, 1215, 1219, 1220, 1221, 1222, 1224, 1242], "0": [0, 1, 5, 12, 22, 25, 29, 31, 35, 39, 40, 44, 49, 53, 54, 57, 58, 62, 65, 71, 75, 79, 83, 87, 88, 91, 94, 100, 109, 111, 113, 117, 122, 126, 131, 139, 144, 149, 199, 222, 264, 268, 314, 319, 385, 387, 388, 389, 390, 391, 395, 399, 400, 403, 405, 407, 410, 411, 412, 415, 419, 422, 426, 427, 430, 432, 434, 437, 438, 439, 441, 442, 446, 447, 452, 455, 457, 461, 462, 465, 470, 471, 474, 479, 480, 483, 486, 490, 491, 494, 500, 503, 505, 508, 512, 513, 518, 521, 522, 525, 529, 532, 534, 535, 537, 540, 543, 544, 546, 547, 549, 551, 555, 558, 562, 565, 567, 571, 574, 577, 582, 584, 586, 589, 590, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 610, 613, 616, 619, 622, 626, 629, 632, 633, 638, 639, 644, 645, 646, 650, 651, 652, 654, 657, 658, 661, 665, 667, 669, 672, 673, 677, 678, 683, 684, 689, 690, 694, 695, 700, 715, 721, 722, 726, 727, 731, 732, 736, 741, 745, 747, 751, 755, 757, 763, 772, 773, 789, 791, 792, 793, 794, 795, 796, 803, 817, 833, 835, 837, 841, 842, 845, 847, 896, 903, 904, 905, 906, 917, 919, 923, 926, 937, 944, 947, 948, 953, 954, 955, 961, 962, 963, 966, 986, 987, 992, 995, 999, 1000, 1003, 1004, 1008, 1010, 1016, 1018, 1023, 1032, 1037, 1042, 1047, 1051, 1053, 1058, 1060, 1061, 1063, 1067, 1069, 1074, 1075, 1079, 1082, 1088, 1089, 1094, 1100, 1106, 1109, 1112, 1113, 1119, 1123, 1129, 1133, 1139, 1143, 1150, 1157, 1158, 1160, 1166, 1168, 1171, 1182, 1189, 1191, 1199, 1200, 1215, 1220, 1221, 1224, 1233, 1234, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "mean": [0, 1, 39, 53, 87, 126, 139, 227, 264, 763, 770, 775, 778, 779, 782, 785, 786, 787, 794, 806, 808, 809, 999, 1000, 1008, 1009, 1017, 1074, 1088, 1089, 1112, 1229, 1231, 1239, 1244, 1246, 1252, 1253], "silent": [0, 1, 5, 12, 31, 39, 40, 53, 54, 62, 65, 75, 87, 88, 131, 385, 387, 388, 389, 390, 395, 405, 407, 415, 422, 432, 434, 447, 455, 462, 471, 480, 491, 503, 522, 532, 537, 543, 544, 549, 555, 565, 593, 599, 605, 629, 632, 644, 650, 654, 657, 665, 667, 745, 755, 772, 773, 803, 903, 904, 905, 906, 923, 947, 948, 953, 954, 955, 961, 962, 963, 966, 987, 995, 1003, 1004, 1023, 1051, 1060, 1061, 1067, 1079, 1119, 1129, 1139, 1150, 1158, 1160, 1168, 1171, 1189, 1191, 1199, 1200, 1215], "dbook": [0, 1, 387, 1242], "databook": [0, 1, 134, 135, 387, 818, 819, 820, 821, 822, 823, 824, 825, 1226, 1233], "data": [0, 1, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 31, 35, 37, 40, 44, 46, 48, 49, 52, 54, 57, 58, 61, 63, 64, 65, 69, 71, 73, 74, 75, 78, 79, 80, 82, 83, 86, 88, 91, 93, 95, 96, 100, 105, 109, 110, 111, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 134, 135, 136, 137, 139, 211, 213, 231, 264, 385, 386, 387, 388, 391, 392, 393, 395, 399, 401, 402, 405, 410, 412, 414, 415, 419, 420, 421, 422, 426, 428, 429, 432, 437, 439, 441, 442, 445, 447, 457, 459, 460, 462, 464, 465, 468, 469, 471, 473, 474, 477, 478, 480, 482, 483, 485, 486, 488, 489, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 508, 510, 512, 514, 515, 518, 522, 525, 527, 529, 530, 531, 532, 534, 536, 537, 539, 540, 542, 544, 546, 547, 548, 549, 551, 553, 554, 555, 558, 559, 560, 562, 563, 564, 565, 567, 569, 571, 572, 574, 575, 577, 578, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 593, 595, 596, 597, 599, 601, 602, 603, 605, 607, 608, 610, 611, 613, 614, 616, 617, 619, 620, 622, 624, 626, 628, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 666, 667, 669, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 716, 717, 718, 719, 721, 722, 724, 725, 726, 729, 730, 731, 734, 735, 736, 738, 739, 741, 743, 744, 745, 747, 749, 750, 751, 753, 754, 755, 757, 759, 760, 761, 762, 770, 775, 776, 778, 779, 781, 782, 783, 784, 785, 786, 787, 789, 797, 800, 801, 802, 803, 804, 806, 808, 809, 810, 813, 815, 818, 819, 825, 826, 831, 832, 835, 841, 845, 896, 904, 905, 917, 919, 926, 937, 944, 961, 962, 982, 983, 986, 990, 991, 992, 994, 995, 999, 1003, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1158, 1166, 1168, 1178, 1179, 1182, 1189, 1197, 1224, 1225, 1226, 1227, 1228, 1232, 1233, 1234, 1235, 1238, 1239, 1240, 1243, 1244, 1247, 1248, 1249, 1250, 1251, 1254], "none": [0, 1, 5, 6, 10, 12, 14, 21, 22, 24, 25, 30, 35, 37, 44, 49, 57, 58, 63, 64, 71, 72, 74, 79, 83, 86, 91, 93, 95, 100, 101, 105, 106, 107, 108, 109, 111, 112, 113, 117, 122, 126, 129, 130, 139, 172, 183, 264, 290, 300, 385, 387, 389, 390, 391, 392, 394, 399, 401, 404, 407, 410, 412, 413, 419, 420, 426, 428, 431, 434, 437, 441, 442, 449, 451, 452, 454, 456, 457, 458, 460, 465, 466, 469, 474, 475, 478, 483, 484, 486, 487, 489, 494, 495, 497, 500, 505, 508, 512, 514, 518, 525, 529, 534, 540, 546, 547, 551, 558, 562, 567, 571, 574, 577, 578, 582, 584, 586, 589, 590, 595, 596, 601, 602, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 646, 651, 652, 658, 661, 669, 672, 677, 678, 683, 689, 690, 694, 695, 721, 722, 726, 731, 736, 737, 741, 742, 747, 748, 751, 752, 757, 761, 762, 763, 766, 767, 768, 769, 770, 772, 777, 784, 789, 791, 792, 793, 794, 795, 796, 801, 802, 803, 804, 806, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 824, 847, 866, 868, 873, 875, 880, 882, 896, 897, 899, 900, 901, 917, 919, 920, 921, 922, 926, 927, 929, 930, 937, 938, 944, 946, 947, 948, 953, 963, 966, 986, 992, 999, 1000, 1001, 1002, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1018, 1020, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1063, 1064, 1065, 1066, 1069, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1110, 1112, 1113, 1114, 1117, 1123, 1124, 1127, 1133, 1134, 1137, 1143, 1144, 1147, 1157, 1166, 1167, 1182, 1198, 1199, 1200, 1233, 1243, 1245, 1246, 1250, 1251, 1254], "default": [0, 1, 6, 30, 101, 139, 231, 264, 387, 394, 399, 404, 426, 431, 454, 458, 465, 466, 474, 475, 484, 486, 487, 495, 530, 578, 652, 700, 715, 722, 766, 767, 768, 769, 772, 784, 804, 807, 813, 826, 963, 966, 1074, 1112, 1198, 1206, 1224, 1233, 1239, 1242, 1243, 1244, 1245, 1246, 1248, 1250, 1251, 1252, 1254], "keep_model": [0, 1, 4, 5, 22, 25, 35, 41, 44, 49, 55, 57, 58, 67, 71, 76, 79, 83, 89, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 463, 465, 472, 474, 481, 483, 486, 492, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 668, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 966, 992], "set": [0, 1, 22, 35, 43, 105, 106, 111, 439, 441, 500, 551, 558, 763, 1228, 1239, 1242, 1248, 1249, 1252, 1253, 1254], "str": [0, 1, 9, 14, 15, 16, 17, 23, 24, 28, 32, 35, 37, 42, 43, 46, 47, 48, 52, 56, 58, 61, 63, 64, 70, 74, 77, 78, 80, 81, 82, 86, 90, 91, 92, 93, 95, 98, 102, 105, 106, 110, 111, 112, 115, 116, 118, 123, 124, 125, 127, 128, 129, 130, 133, 136, 137, 139, 190, 231, 264, 306, 319, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 399, 401, 402, 406, 414, 416, 419, 420, 421, 423, 426, 428, 429, 433, 439, 440, 445, 448, 449, 451, 452, 454, 456, 457, 458, 460, 464, 469, 473, 478, 482, 489, 493, 497, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 514, 519, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 538, 542, 545, 546, 547, 548, 550, 551, 553, 554, 556, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 580, 581, 583, 585, 587, 588, 589, 590, 591, 594, 595, 596, 597, 600, 601, 602, 603, 606, 609, 612, 615, 618, 621, 625, 633, 634, 651, 652, 659, 660, 661, 662, 663, 664, 666, 671, 673, 674, 676, 677, 678, 680, 682, 683, 684, 686, 688, 689, 690, 693, 694, 695, 697, 699, 718, 721, 722, 724, 725, 727, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 763, 766, 767, 768, 769, 775, 776, 779, 781, 782, 783, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 803, 806, 807, 808, 809, 812, 817, 818, 820, 821, 822, 823, 824, 825, 826, 831, 832, 850, 860, 868, 875, 882, 890, 897, 898, 902, 911, 912, 913, 914, 918, 919, 920, 927, 938, 946, 947, 948, 963, 966, 979, 981, 984, 985, 987, 994, 996, 999, 1000, 1008, 1009, 1011, 1016, 1017, 1020, 1030, 1031, 1033, 1038, 1043, 1048, 1064, 1070, 1074, 1076, 1083, 1089, 1095, 1101, 1107, 1112, 1117, 1122, 1127, 1132, 1137, 1142, 1147, 1155, 1156, 1165, 1167, 1180, 1181, 1188, 1196, 1197, 1198, 1199, 1200, 1215, 1216, 1224, 1239, 1245], "keep": [0, 1, 22, 25, 35, 41, 44, 49, 55, 57, 58, 67, 71, 76, 79, 83, 89, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 463, 465, 472, 474, 481, 483, 486, 492, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 668, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 919, 992, 1229, 1241], "memori": [0, 1, 4, 7, 12, 31, 40, 54, 65, 75, 88, 139, 189, 264, 391, 392, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995, 1074, 1112, 1239, 1252], "do": [0, 1, 64, 1074, 1112, 1228, 1244, 1246, 1251, 1252, 1253], "final": [0, 1, 4, 5, 22, 25, 29, 35, 39, 43, 44, 49, 53, 57, 58, 62, 71, 79, 83, 87, 91, 100, 109, 111, 113, 117, 122, 124, 126, 127, 391, 399, 403, 410, 412, 419, 426, 430, 437, 441, 442, 446, 452, 455, 457, 461, 465, 470, 474, 479, 483, 486, 490, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 543, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 592, 595, 598, 601, 604, 607, 610, 613, 616, 619, 622, 626, 629, 633, 638, 645, 651, 654, 658, 661, 665, 666, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 737, 738, 741, 743, 747, 748, 749, 751, 753, 757, 759, 896, 903, 904, 905, 917, 919, 926, 937, 944, 961, 962, 986, 992, 999, 1003, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1158, 1166, 1168, 1182, 1189, 1199, 1201, 1206, 1208, 1210, 1244, 1249, 1251, 1253], "them": [0, 1, 847, 1074, 1112, 1243, 1253], "constructor": [0, 1, 9, 14, 15, 22, 25, 26, 35, 36, 44, 45, 49, 50, 57, 58, 59, 71, 72, 79, 83, 84, 91, 92, 100, 105, 106, 109, 111, 112, 113, 117, 122, 126, 129, 130, 134, 135, 391, 392, 399, 401, 410, 412, 413, 419, 420, 426, 428, 437, 441, 442, 443, 449, 451, 452, 454, 457, 458, 465, 466, 474, 475, 483, 484, 486, 487, 494, 495, 500, 501, 505, 508, 509, 512, 518, 519, 525, 526, 529, 530, 534, 535, 540, 541, 546, 547, 551, 552, 558, 559, 562, 563, 567, 568, 571, 574, 577, 578, 582, 583, 584, 585, 586, 589, 590, 595, 596, 601, 602, 607, 610, 613, 616, 619, 622, 623, 626, 627, 633, 634, 638, 639, 645, 646, 651, 652, 658, 661, 662, 669, 672, 673, 677, 678, 683, 684, 689, 690, 694, 695, 700, 715, 721, 722, 726, 727, 731, 732, 736, 737, 741, 742, 747, 748, 751, 752, 757, 758, 761, 762, 770, 771, 789, 790, 801, 802, 804, 805, 810, 811, 813, 814, 815, 816, 818, 819, 856, 857, 858, 859, 873, 874, 880, 881, 888, 889, 896, 897, 917, 918, 919, 920, 926, 927, 944, 946, 986, 992, 993, 999, 1000, 1008, 1009, 1010, 1011, 1016, 1017, 1018, 1019, 1032, 1033, 1037, 1038, 1042, 1043, 1047, 1048, 1063, 1064, 1069, 1070, 1075, 1076, 1082, 1083, 1088, 1089, 1094, 1095, 1100, 1101, 1106, 1107, 1113, 1114, 1123, 1124, 1133, 1134, 1143, 1144, 1157, 1182, 1188, 1199, 1200, 1245, 1252], "print": [0, 11, 452, 456, 761, 763, 770, 789, 797, 799, 801, 804, 810, 813, 815, 896, 917, 919, 926, 934, 937, 942, 999, 1008, 1010, 1016, 1199, 1204, 1242, 1243, 1244, 1245, 1246, 1248, 1250, 1251, 1252, 1253, 1254], "arg": [0, 9, 11, 386, 387, 449, 451, 780, 1018, 1019, 1058, 1059, 1199, 1204, 1205, 1206, 1207, 1208, 1213, 1216, 1227, 1233, 1253], "vlim": [0, 11], "1": [0, 11, 94, 95, 129, 131, 139, 150, 199, 218, 222, 264, 269, 310, 311, 312, 319, 385, 387, 388, 389, 390, 392, 439, 513, 514, 521, 582, 583, 585, 590, 596, 601, 602, 677, 683, 727, 761, 763, 770, 772, 773, 793, 796, 803, 817, 847, 904, 905, 944, 961, 966, 986, 987, 1000, 1003, 1018, 1023, 1047, 1048, 1074, 1075, 1076, 1088, 1089, 1112, 1113, 1119, 1123, 1129, 1133, 1139, 1143, 1150, 1157, 1158, 1160, 1166, 1167, 1168, 1171, 1182, 1189, 1191, 1200, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1233, 1236, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "kwarg": [0, 9, 11, 71, 77, 113, 116, 139, 169, 264, 287, 386, 387, 449, 451, 457, 465, 474, 475, 483, 484, 486, 494, 525, 526, 530, 607, 610, 613, 616, 619, 622, 761, 763, 768, 770, 777, 789, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 804, 810, 812, 813, 815, 817, 826, 831, 832, 896, 897, 917, 918, 919, 920, 926, 927, 928, 937, 938, 939, 944, 946, 949, 986, 987, 999, 1000, 1008, 1009, 1010, 1011, 1016, 1017, 1018, 1019, 1023, 1033, 1037, 1038, 1042, 1043, 1048, 1053, 1054, 1058, 1059, 1064, 1069, 1070, 1074, 1112, 1157, 1160, 1166, 1167, 1171, 1182, 1188, 1191, 1197, 1198, 1199, 1204, 1205, 1206, 1207, 1208, 1213, 1216, 1233, 1253], "d": [0, 2, 105, 106, 111, 112, 136, 137, 139, 218, 264, 354, 586, 677, 678, 761, 762, 896, 897, 919, 920, 1032, 1033, 1074, 1112, 1113, 1114, 1117, 1123, 1124, 1127, 1133, 1134, 1137, 1143, 1144, 1147, 1217, 1218, 1233, 1235, 1244], "initi": [0, 8, 12, 15, 17, 22, 24, 25, 31, 35, 40, 43, 44, 49, 54, 57, 58, 65, 66, 71, 75, 78, 79, 83, 88, 91, 100, 109, 111, 113, 117, 122, 125, 126, 391, 392, 395, 399, 405, 410, 412, 415, 419, 422, 426, 432, 437, 441, 442, 447, 457, 462, 464, 465, 471, 473, 474, 480, 482, 483, 486, 491, 493, 494, 499, 500, 503, 505, 508, 512, 518, 522, 525, 529, 532, 534, 537, 540, 544, 546, 549, 551, 555, 558, 562, 565, 567, 571, 574, 577, 582, 584, 586, 589, 593, 595, 599, 601, 605, 607, 610, 613, 616, 619, 622, 626, 632, 633, 638, 644, 645, 650, 651, 657, 658, 661, 667, 669, 672, 677, 682, 683, 688, 689, 693, 694, 699, 700, 721, 725, 726, 730, 731, 735, 736, 741, 745, 747, 751, 755, 757, 896, 906, 907, 917, 919, 923, 926, 937, 944, 964, 965, 966, 986, 987, 992, 995, 999, 1004, 1008, 1010, 1016, 1018, 1020, 1021, 1022, 1023, 1032, 1037, 1042, 1047, 1051, 1053, 1054, 1058, 1059, 1063, 1067, 1069, 1075, 1079, 1082, 1088, 1094, 1100, 1106, 1109, 1110, 1113, 1118, 1119, 1123, 1128, 1129, 1133, 1138, 1139, 1143, 1148, 1149, 1150, 1157, 1159, 1160, 1166, 1169, 1170, 1171, 1182, 1190, 1191, 1199, 1202, 1206, 1208, 1209, 1211, 1212, 1239, 1244, 1246], "update_idata": [0, 12], "idata": [0, 4, 6, 7, 12, 31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995], "add": [0, 12, 14, 16, 22, 25, 27, 35, 41, 44, 49, 51, 55, 57, 58, 61, 67, 71, 76, 79, 83, 85, 89, 91, 99, 100, 105, 107, 109, 111, 113, 117, 122, 125, 126, 128, 129, 131, 134, 385, 386, 387, 388, 389, 390, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 463, 465, 472, 474, 481, 483, 486, 492, 494, 500, 505, 508, 512, 517, 518, 524, 525, 529, 534, 540, 546, 551, 553, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 668, 669, 672, 677, 682, 683, 688, 689, 693, 694, 699, 700, 721, 725, 726, 730, 731, 735, 736, 739, 741, 744, 747, 750, 751, 754, 757, 760, 763, 770, 772, 773, 791, 792, 793, 794, 795, 796, 818, 820, 821, 822, 823, 849, 850, 856, 858, 860, 866, 868, 873, 875, 880, 882, 888, 890, 896, 917, 919, 926, 928, 937, 939, 944, 947, 948, 949, 986, 992, 999, 1008, 1010, 1016, 1018, 1020, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1227, 1244, 1245, 1248, 1249, 1250, 1252], "option": [0, 1, 5, 6, 9, 10, 11, 12, 21, 23, 24, 26, 37, 48, 52, 63, 64, 71, 72, 74, 82, 86, 93, 95, 105, 106, 107, 108, 112, 118, 129, 135, 231, 385, 386, 387, 388, 389, 390, 392, 399, 401, 407, 410, 413, 420, 426, 428, 434, 437, 439, 445, 451, 454, 456, 458, 460, 466, 469, 475, 478, 484, 487, 489, 495, 497, 514, 519, 526, 530, 547, 563, 578, 583, 585, 589, 590, 595, 596, 601, 602, 645, 646, 652, 678, 689, 690, 694, 695, 732, 736, 737, 741, 742, 748, 751, 752, 762, 763, 772, 777, 784, 791, 792, 793, 794, 795, 796, 802, 803, 806, 808, 809, 812, 813, 815, 817, 818, 819, 831, 832, 850, 854, 860, 864, 868, 871, 875, 878, 882, 886, 890, 894, 897, 900, 901, 918, 920, 921, 922, 927, 929, 930, 938, 946, 947, 948, 953, 963, 966, 987, 1000, 1001, 1002, 1008, 1009, 1011, 1012, 1013, 1016, 1017, 1019, 1020, 1023, 1033, 1034, 1035, 1038, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1050, 1055, 1056, 1064, 1065, 1066, 1070, 1071, 1072, 1074, 1076, 1077, 1078, 1084, 1085, 1090, 1091, 1096, 1097, 1102, 1103, 1112, 1114, 1117, 1124, 1127, 1134, 1137, 1144, 1147, 1160, 1167, 1171, 1188, 1191, 1197, 1198, 1199, 1200, 1216, 1228, 1232, 1239, 1244, 1246, 1247, 1249, 1252, 1253], "updat": [0, 12, 71, 74, 128, 457, 460, 465, 469, 474, 478, 483, 486, 489, 494, 497, 534, 739, 744, 750, 754, 760, 944, 982, 983, 986, 990, 991, 1018, 1157, 1166, 1178, 1179, 1182, 1244, 1254], "return": [0, 12, 22, 25, 35, 44, 49, 57, 58, 60, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 139, 142, 143, 144, 148, 151, 152, 154, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 199, 222, 264, 266, 267, 270, 271, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 391, 399, 410, 412, 419, 426, 437, 441, 442, 444, 457, 465, 467, 474, 476, 483, 486, 494, 500, 505, 508, 512, 518, 520, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 579, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 640, 645, 651, 658, 661, 669, 672, 677, 679, 683, 685, 689, 691, 694, 696, 700, 721, 723, 726, 728, 731, 733, 736, 741, 747, 751, 757, 761, 780, 791, 792, 793, 794, 795, 796, 804, 813, 849, 856, 858, 866, 873, 880, 888, 896, 917, 919, 926, 937, 992, 999, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1060, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1250], "cleanup": [0, 3], "after": [0, 3, 26, 95, 126, 127, 385, 514, 534, 736, 738, 741, 743, 747, 749, 751, 753, 757, 759, 791, 792, 794, 795, 796, 1244, 1248], "properti": [0, 7, 14, 18, 19, 20, 22, 25, 35, 44, 49, 57, 58, 66, 68, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 129, 132, 133, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 720, 721, 726, 731, 736, 741, 747, 751, 757, 896, 902, 907, 909, 910, 913, 914, 917, 919, 926, 931, 933, 935, 937, 940, 941, 943, 944, 950, 956, 957, 960, 967, 970, 971, 974, 975, 976, 977, 978, 980, 986, 992, 999, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1199, 1206, 1208, 1212], "idata_mem": [0, 7], "current": [0, 7, 231, 944, 957, 986, 1018, 1157, 1166, 1182, 1228, 1247, 1249], "update_n_turbin": [0, 13], "reset": [0, 13, 399, 407, 410, 426, 434, 437, 551, 557, 1246, 1248], "number": [0, 13, 14, 18, 19, 20, 25, 33, 91, 97, 100, 103, 129, 132, 139, 150, 199, 222, 230, 246, 264, 269, 310, 312, 390, 391, 392, 397, 399, 408, 410, 412, 417, 419, 424, 426, 435, 437, 465, 466, 512, 516, 518, 519, 523, 562, 652, 673, 678, 684, 689, 690, 695, 700, 715, 722, 726, 727, 731, 732, 736, 737, 741, 742, 751, 752, 763, 768, 791, 792, 793, 794, 795, 796, 806, 808, 809, 896, 908, 909, 910, 917, 919, 924, 926, 932, 937, 944, 974, 975, 977, 978, 986, 989, 992, 997, 999, 1006, 1008, 1010, 1015, 1016, 1018, 1029, 1032, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1046, 1047, 1052, 1053, 1057, 1058, 1063, 1064, 1068, 1069, 1073, 1074, 1075, 1081, 1082, 1087, 1088, 1093, 1094, 1095, 1099, 1100, 1105, 1106, 1109, 1112, 1113, 1114, 1123, 1124, 1133, 1134, 1143, 1144, 1157, 1164, 1166, 1167, 1177, 1182, 1195, 1200, 1229, 1231, 1237, 1244, 1245, 1247], "turbin": [0, 13, 14, 20, 35, 36, 37, 38, 43, 57, 64, 71, 73, 74, 93, 95, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 120, 121, 123, 128, 129, 131, 132, 133, 136, 137, 326, 327, 328, 329, 330, 331, 349, 350, 362, 373, 379, 380, 385, 386, 387, 388, 389, 390, 441, 442, 443, 445, 452, 454, 457, 459, 460, 465, 468, 469, 474, 477, 478, 483, 485, 486, 488, 489, 494, 496, 497, 514, 525, 526, 527, 531, 534, 536, 542, 547, 548, 554, 558, 560, 564, 569, 572, 575, 580, 586, 587, 591, 597, 603, 626, 628, 630, 631, 633, 635, 636, 637, 638, 641, 642, 643, 645, 647, 648, 649, 651, 653, 655, 656, 659, 660, 663, 664, 670, 671, 674, 675, 676, 680, 681, 686, 687, 692, 697, 698, 716, 719, 724, 729, 734, 737, 739, 742, 744, 750, 752, 754, 760, 763, 768, 770, 772, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 787, 788, 794, 795, 796, 803, 804, 806, 808, 809, 810, 813, 815, 817, 896, 897, 917, 919, 920, 926, 927, 933, 935, 937, 938, 941, 943, 944, 946, 950, 976, 979, 980, 981, 986, 999, 1000, 1008, 1009, 1010, 1016, 1017, 1018, 1020, 1033, 1037, 1038, 1042, 1043, 1047, 1048, 1053, 1064, 1075, 1094, 1095, 1100, 1106, 1113, 1114, 1123, 1124, 1133, 1134, 1157, 1166, 1182, 1188, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1235, 1238, 1239, 1240, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254], "accord": [0, 13, 71, 74, 387, 457, 460, 465, 469, 474, 478, 483, 486, 489, 494, 497, 616, 826, 831, 832, 1245, 1249], "self": [0, 13, 22, 25, 31, 35, 40, 44, 49, 54, 57, 58, 60, 64, 65, 71, 75, 79, 83, 88, 91, 100, 109, 111, 113, 117, 122, 126, 139, 141, 142, 143, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 391, 395, 399, 405, 410, 412, 415, 419, 422, 426, 432, 437, 441, 442, 444, 447, 457, 462, 465, 467, 471, 474, 476, 480, 483, 486, 491, 494, 500, 503, 505, 508, 512, 518, 519, 520, 522, 525, 529, 532, 534, 537, 540, 544, 546, 549, 551, 555, 558, 562, 565, 567, 571, 574, 577, 579, 582, 584, 586, 589, 593, 595, 599, 601, 605, 607, 610, 613, 616, 619, 622, 626, 632, 633, 638, 640, 644, 645, 650, 651, 657, 658, 661, 667, 669, 672, 677, 679, 683, 685, 689, 691, 694, 696, 700, 721, 723, 726, 728, 731, 733, 736, 741, 745, 747, 751, 755, 757, 768, 969, 973, 992, 995, 1025, 1027, 1053, 1054, 1058, 1059, 1109, 1110, 1117, 1127, 1137, 1147, 1152, 1154, 1173, 1175, 1206, 1208, 1209], "get_models_data": [0, 6], "creat": [0, 6, 10, 14, 17, 22, 25, 35, 44, 49, 57, 58, 70, 71, 73, 74, 78, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 139, 169, 264, 287, 391, 399, 410, 412, 419, 426, 437, 439, 441, 442, 457, 459, 460, 464, 465, 468, 469, 473, 474, 477, 478, 482, 483, 485, 486, 488, 489, 493, 494, 496, 497, 499, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 761, 763, 804, 808, 810, 813, 815, 992, 1020, 1227, 1232, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "xarrai": [0, 6, 10, 14, 15, 22, 24, 25, 35, 44, 48, 49, 57, 79, 82, 83, 91, 100, 109, 111, 391, 392, 399, 410, 412, 419, 426, 437, 441, 442, 500, 505, 508, 512, 518, 525, 529, 530, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 761, 762, 770, 771, 789, 790, 802, 805, 810, 811, 814, 992, 1225, 1239, 1244, 1250], "input": [0, 6, 23, 24, 48, 82, 113, 114, 115, 264, 310, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 525, 526, 529, 530, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 740, 746, 756, 1074, 1112, 1215, 1223, 1228, 1235, 1239, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "new_point_data": [0, 10], "point": [0, 10, 14, 17, 18, 25, 26, 28, 64, 73, 74, 78, 79, 80, 83, 86, 91, 93, 94, 95, 96, 97, 99, 117, 120, 121, 123, 124, 125, 127, 128, 138, 139, 199, 222, 316, 317, 320, 321, 322, 325, 389, 390, 393, 402, 414, 421, 429, 452, 459, 460, 464, 465, 466, 468, 469, 473, 477, 478, 482, 485, 488, 489, 493, 494, 496, 497, 498, 499, 502, 506, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 626, 630, 631, 633, 636, 637, 638, 639, 642, 643, 645, 646, 648, 649, 651, 655, 656, 659, 660, 663, 664, 666, 670, 671, 674, 675, 676, 680, 681, 682, 686, 687, 688, 692, 693, 697, 698, 699, 716, 724, 725, 729, 730, 734, 735, 738, 739, 743, 744, 749, 750, 753, 754, 759, 760, 789, 790, 791, 792, 793, 804, 805, 806, 808, 809, 813, 814, 849, 852, 853, 854, 855, 856, 858, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 892, 893, 894, 895, 944, 946, 994, 1074, 1112, 1113, 1114, 1117, 1123, 1124, 1127, 1133, 1134, 1137, 1143, 1144, 1147, 1167, 1198, 1217, 1218, 1224, 1225, 1228, 1231, 1233, 1239, 1242, 1243, 1244, 1246, 1247, 1249, 1250, 1251, 1252, 1253], "states_indic": [0, 10], "onli": [0, 10, 12, 150, 269, 385, 465, 626, 669, 670, 672, 675, 677, 681, 683, 687, 689, 692, 694, 698, 726, 729, 731, 734, 806, 808, 809, 847, 953, 1074, 1112, 1239, 1241, 1242, 1245, 1250, 1251, 1252, 1254], "finalize_model": [0, 5], "routin": [0, 5], "kept": [0, 5], "clear_mem": [0, 4, 1251], "fals": [0, 4, 14, 21, 22, 25, 35, 44, 45, 49, 57, 58, 63, 64, 71, 79, 83, 91, 93, 95, 100, 109, 111, 113, 117, 122, 126, 139, 222, 385, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 509, 512, 514, 518, 525, 529, 534, 540, 546, 551, 552, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 678, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 761, 762, 763, 770, 772, 778, 784, 791, 792, 793, 794, 795, 796, 801, 803, 849, 850, 854, 856, 858, 860, 864, 866, 871, 873, 878, 880, 886, 888, 890, 894, 897, 953, 963, 992, 1020, 1198, 1216, 1233, 1239, 1243], "classmethod": [0, 9, 14, 17, 22, 25, 35, 44, 49, 57, 58, 69, 71, 77, 79, 83, 91, 100, 109, 111, 113, 116, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 539, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 761, 770, 789, 797, 798, 799, 800, 801, 804, 807, 810, 813, 815, 826, 831, 832, 896, 917, 919, 926, 934, 937, 942, 944, 979, 981, 986, 992, 999, 1008, 1010, 1016, 1018, 1157, 1166, 1182, 1199, 1203], "new": [0, 9, 71, 77, 78, 113, 116, 128, 139, 150, 169, 222, 231, 264, 269, 287, 312, 457, 464, 465, 473, 474, 482, 483, 486, 493, 494, 499, 607, 610, 613, 616, 619, 622, 739, 744, 750, 754, 760, 761, 770, 789, 797, 798, 801, 804, 810, 813, 815, 911, 912, 944, 951, 952, 986, 1018, 1113, 1115, 1116, 1123, 1125, 1126, 1133, 1135, 1136, 1143, 1145, 1146, 1157, 1166, 1182, 1239, 1241, 1244, 1245], "algo_typ": [0, 9], "time": [0, 9, 71, 77, 113, 116, 392, 457, 465, 474, 483, 486, 494, 607, 610, 613, 616, 619, 622, 761, 770, 784, 789, 797, 798, 801, 804, 810, 813, 815, 992, 1074, 1112, 1229, 1239, 1241, 1242, 1243, 1246, 1247, 1248, 1251, 1252, 1253], "factori": [0, 9, 71, 77, 113, 116, 457, 465, 474, 483, 486, 494, 607, 610, 613, 616, 619, 622, 761, 770, 789, 797, 798, 801, 804, 810, 813, 815], "__repr__": [0, 22, 25, 35, 44, 49, 57, 58, 60, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 139, 177, 264, 294, 391, 399, 410, 412, 419, 426, 437, 441, 442, 444, 457, 465, 467, 474, 476, 483, 486, 494, 500, 505, 508, 512, 518, 520, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 579, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 640, 645, 651, 658, 661, 669, 672, 677, 679, 683, 685, 689, 691, 694, 696, 700, 721, 723, 726, 728, 731, 733, 736, 741, 747, 751, 757, 992], "repr": [0, 22, 25, 35, 44, 49, 57, 58, 60, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 139, 177, 264, 294, 391, 399, 410, 412, 419, 426, 437, 441, 442, 444, 457, 465, 467, 474, 476, 483, 486, 494, 500, 505, 508, 512, 518, 520, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 579, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 640, 645, 651, 658, 661, 669, 672, 677, 679, 683, 685, 689, 691, 694, 696, 700, 721, 723, 726, 728, 731, 733, 736, 741, 747, 751, 757, 992], "data_to_stor": [0, 22, 25, 35, 44, 49, 57, 58, 61, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992], "name": [0, 7, 9, 14, 15, 16, 17, 22, 25, 32, 35, 36, 42, 43, 44, 47, 49, 56, 57, 58, 61, 63, 70, 71, 77, 78, 79, 81, 83, 90, 91, 93, 98, 100, 102, 105, 106, 109, 111, 112, 113, 115, 116, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 136, 137, 330, 385, 388, 389, 390, 391, 392, 396, 399, 401, 406, 410, 412, 416, 419, 420, 423, 426, 428, 433, 437, 439, 441, 442, 448, 449, 451, 452, 456, 457, 458, 464, 465, 473, 474, 482, 483, 486, 493, 494, 499, 500, 501, 504, 505, 507, 508, 511, 512, 518, 519, 525, 528, 529, 530, 533, 534, 538, 540, 541, 545, 546, 547, 550, 551, 553, 556, 558, 561, 562, 566, 567, 568, 570, 571, 573, 574, 576, 577, 578, 581, 582, 583, 584, 585, 586, 588, 589, 590, 594, 595, 596, 600, 601, 602, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 625, 626, 633, 638, 645, 651, 652, 658, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 673, 674, 676, 677, 678, 680, 682, 683, 684, 686, 688, 689, 690, 693, 694, 695, 697, 699, 700, 721, 722, 724, 725, 726, 727, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 763, 770, 785, 786, 787, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 810, 813, 815, 817, 818, 821, 824, 896, 897, 902, 911, 912, 913, 914, 917, 918, 919, 920, 926, 927, 934, 937, 938, 942, 944, 946, 966, 979, 981, 984, 985, 986, 987, 988, 989, 992, 996, 999, 1000, 1008, 1009, 1010, 1011, 1016, 1017, 1018, 1020, 1028, 1029, 1030, 1031, 1032, 1033, 1037, 1038, 1042, 1043, 1047, 1048, 1053, 1054, 1058, 1063, 1064, 1069, 1070, 1075, 1076, 1082, 1083, 1088, 1089, 1094, 1095, 1100, 1101, 1106, 1107, 1109, 1110, 1113, 1122, 1123, 1132, 1133, 1142, 1143, 1155, 1156, 1157, 1163, 1164, 1165, 1166, 1167, 1176, 1177, 1180, 1181, 1182, 1188, 1194, 1195, 1196, 1198, 1224, 1226, 1233, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1252], "algo": [0, 14, 21, 22, 23, 24, 25, 28, 29, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 93, 95, 96, 98, 100, 102, 104, 109, 110, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 391, 393, 395, 396, 398, 399, 402, 403, 405, 406, 407, 409, 410, 412, 414, 415, 416, 418, 419, 421, 422, 423, 425, 426, 429, 430, 432, 433, 434, 436, 437, 440, 441, 442, 445, 446, 447, 448, 452, 455, 457, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 514, 515, 518, 522, 525, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 554, 555, 556, 558, 560, 561, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 610, 613, 616, 619, 622, 626, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 686, 687, 688, 689, 692, 693, 694, 697, 698, 699, 700, 716, 721, 724, 725, 726, 729, 730, 731, 734, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 747, 749, 750, 751, 753, 754, 755, 756, 757, 759, 760, 770, 772, 784, 789, 790, 944, 946, 966, 982, 983, 986, 990, 991, 992, 994, 995, 996, 998, 1018, 1157, 1166, 1167, 1178, 1179, 1182, 1188, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "mdata": [0, 22, 25, 28, 31, 35, 37, 40, 44, 46, 49, 52, 54, 57, 58, 61, 63, 64, 65, 69, 71, 73, 74, 75, 78, 79, 80, 83, 86, 88, 91, 93, 95, 96, 100, 109, 110, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 391, 393, 395, 399, 402, 405, 410, 412, 414, 415, 419, 421, 422, 426, 429, 432, 437, 441, 442, 445, 447, 457, 459, 460, 462, 464, 465, 468, 469, 471, 473, 474, 477, 478, 480, 482, 483, 485, 486, 488, 489, 491, 493, 494, 496, 497, 498, 499, 500, 502, 503, 505, 506, 508, 510, 512, 514, 515, 518, 522, 525, 527, 529, 531, 532, 534, 536, 537, 540, 542, 544, 546, 548, 549, 551, 554, 555, 558, 560, 562, 564, 565, 567, 569, 571, 572, 574, 575, 577, 580, 582, 584, 586, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 610, 613, 616, 619, 622, 626, 628, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 666, 667, 669, 670, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 686, 687, 688, 689, 692, 693, 694, 697, 698, 699, 700, 716, 717, 718, 719, 721, 724, 725, 726, 729, 730, 731, 734, 735, 736, 738, 739, 741, 743, 744, 745, 747, 749, 750, 751, 753, 754, 755, 757, 759, 760, 992, 994, 995], "local": [0, 22, 25, 35, 44, 49, 57, 58, 61, 63, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 678, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992, 1228, 1240, 1241, 1242, 1244, 1247, 1252], "store": [0, 15, 17, 22, 25, 31, 35, 36, 40, 44, 49, 54, 57, 58, 61, 63, 65, 71, 75, 79, 83, 88, 91, 93, 100, 109, 111, 113, 117, 122, 126, 391, 395, 399, 405, 410, 412, 415, 419, 422, 426, 432, 437, 441, 442, 447, 457, 462, 465, 471, 474, 480, 483, 486, 491, 494, 500, 503, 505, 508, 512, 518, 522, 525, 529, 532, 534, 537, 540, 544, 546, 549, 551, 555, 558, 562, 565, 567, 571, 574, 577, 582, 584, 586, 589, 593, 595, 599, 601, 605, 607, 610, 613, 616, 619, 622, 626, 632, 633, 638, 644, 645, 650, 651, 657, 658, 661, 667, 669, 672, 677, 683, 689, 694, 700, 716, 721, 726, 731, 736, 741, 745, 747, 751, 755, 757, 992, 995, 1074, 1112, 1245], "intend": [0, 22, 25, 35, 44, 49, 57, 58, 61, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992], "iter": [0, 22, 25, 35, 44, 49, 57, 58, 61, 64, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992, 1239, 1251], "from_data_or_stor": [0, 22, 25, 35, 44, 49, 57, 58, 63, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992], "ret_dim": [0, 22, 25, 35, 44, 49, 57, 58, 63, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992], "safe": [0, 22, 25, 35, 44, 49, 57, 58, 63, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992], "get": [0, 14, 21, 22, 25, 35, 44, 49, 57, 58, 63, 71, 79, 83, 91, 100, 109, 111, 113, 117, 120, 122, 126, 134, 139, 213, 264, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 498, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 630, 633, 636, 638, 642, 645, 648, 651, 655, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 804, 806, 813, 818, 824, 825, 849, 851, 856, 858, 861, 866, 873, 880, 883, 888, 891, 896, 898, 915, 916, 917, 919, 925, 926, 936, 937, 944, 956, 967, 971, 981, 986, 992, 999, 1007, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1239, 1242], "all": [0, 22, 23, 25, 28, 31, 34, 35, 37, 40, 41, 44, 46, 49, 52, 54, 55, 57, 58, 65, 67, 71, 72, 75, 76, 79, 80, 83, 86, 88, 89, 91, 95, 100, 104, 109, 110, 111, 113, 117, 119, 122, 126, 127, 129, 133, 139, 194, 231, 264, 391, 392, 393, 395, 398, 399, 402, 405, 409, 410, 412, 414, 415, 418, 419, 421, 422, 425, 426, 429, 432, 436, 437, 441, 442, 445, 447, 452, 457, 462, 463, 465, 471, 472, 474, 480, 481, 483, 486, 491, 492, 494, 498, 500, 502, 503, 505, 506, 508, 510, 512, 514, 518, 522, 525, 526, 527, 529, 531, 532, 534, 536, 537, 540, 542, 544, 546, 548, 549, 551, 554, 555, 557, 558, 560, 562, 564, 565, 567, 569, 571, 572, 574, 575, 577, 580, 582, 584, 586, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 610, 613, 616, 619, 622, 626, 628, 632, 633, 635, 638, 641, 644, 645, 647, 650, 651, 653, 657, 658, 661, 667, 668, 669, 672, 677, 683, 689, 694, 700, 717, 721, 726, 731, 736, 738, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 770, 788, 789, 797, 799, 801, 803, 804, 806, 808, 809, 810, 813, 815, 846, 896, 899, 900, 901, 915, 916, 917, 919, 921, 922, 925, 926, 929, 930, 934, 936, 937, 942, 944, 946, 950, 953, 959, 963, 974, 975, 986, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1018, 1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1062, 1063, 1065, 1066, 1069, 1071, 1072, 1074, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1112, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1198, 1218, 1223, 1225, 1226, 1227, 1228, 1233, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1250, 1251, 1253], "sub": [0, 22, 25, 35, 41, 44, 49, 55, 57, 58, 67, 71, 76, 79, 83, 89, 91, 100, 109, 111, 113, 117, 122, 126, 231, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 463, 465, 472, 474, 481, 483, 486, 492, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 668, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 987, 992, 1020, 1229, 1239, 1244], "list": [0, 5, 12, 14, 15, 22, 24, 25, 26, 27, 30, 32, 35, 41, 42, 44, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 67, 69, 71, 72, 76, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 98, 100, 101, 102, 105, 106, 107, 108, 109, 111, 113, 115, 117, 118, 122, 126, 129, 131, 133, 134, 264, 277, 385, 389, 390, 391, 392, 394, 396, 399, 401, 404, 406, 407, 410, 412, 416, 419, 423, 426, 428, 431, 433, 434, 437, 441, 442, 448, 456, 457, 458, 463, 465, 466, 472, 474, 475, 481, 483, 484, 486, 487, 492, 494, 495, 500, 501, 504, 505, 507, 508, 509, 511, 512, 518, 519, 525, 526, 528, 529, 530, 533, 534, 538, 540, 545, 546, 547, 550, 551, 556, 558, 561, 562, 563, 566, 567, 570, 571, 573, 574, 576, 577, 581, 582, 584, 586, 588, 589, 594, 595, 600, 601, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 625, 626, 633, 638, 645, 651, 658, 661, 668, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 737, 740, 741, 742, 746, 747, 751, 752, 756, 757, 772, 775, 776, 779, 781, 782, 783, 803, 806, 808, 809, 817, 818, 820, 823, 825, 826, 846, 857, 858, 859, 896, 897, 899, 900, 901, 902, 913, 914, 917, 919, 920, 921, 922, 926, 927, 929, 930, 935, 937, 938, 943, 946, 953, 963, 966, 980, 984, 985, 987, 992, 996, 999, 1000, 1001, 1002, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1020, 1030, 1031, 1034, 1035, 1039, 1040, 1044, 1045, 1049, 1050, 1055, 1056, 1065, 1066, 1071, 1072, 1074, 1077, 1078, 1084, 1085, 1090, 1091, 1096, 1097, 1102, 1103, 1112, 1122, 1132, 1142, 1155, 1156, 1165, 1180, 1181, 1196, 1198, 1223, 1225, 1226, 1227, 1239, 1242, 1245, 1248], "model_id": [0, 22, 25, 35, 44, 49, 57, 58, 68, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992], "uniqu": [0, 22, 25, 35, 44, 49, 57, 58, 68, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992], "id": [0, 22, 25, 35, 44, 49, 57, 58, 68, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 385, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992], "type": [0, 22, 25, 31, 35, 40, 44, 49, 54, 57, 58, 65, 68, 71, 75, 79, 83, 88, 91, 100, 105, 106, 109, 111, 113, 117, 122, 126, 139, 150, 169, 231, 264, 269, 287, 391, 395, 399, 405, 410, 412, 415, 419, 422, 426, 432, 437, 441, 442, 447, 452, 454, 456, 457, 462, 465, 471, 474, 480, 483, 486, 491, 494, 500, 503, 505, 508, 512, 518, 522, 525, 529, 532, 534, 537, 540, 544, 546, 549, 551, 555, 558, 562, 565, 567, 571, 574, 577, 582, 584, 586, 589, 593, 595, 599, 601, 605, 607, 610, 613, 616, 619, 622, 626, 632, 633, 638, 644, 645, 650, 651, 657, 658, 661, 667, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 745, 747, 751, 755, 757, 815, 817, 992, 995, 1020, 1053, 1054, 1058, 1059, 1074, 1109, 1110, 1112, 1206, 1208, 1209, 1224, 1225, 1228, 1232, 1239, 1242, 1243, 1244, 1245, 1247, 1248, 1250, 1252, 1254], "var": [0, 22, 24, 25, 35, 44, 49, 57, 58, 70, 71, 74, 79, 83, 91, 100, 109, 111, 113, 115, 117, 122, 126, 139, 260, 264, 334, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 460, 465, 469, 474, 478, 483, 486, 489, 494, 497, 500, 505, 508, 509, 512, 518, 525, 529, 534, 540, 541, 546, 551, 553, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 625, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 737, 741, 742, 747, 751, 752, 757, 770, 775, 776, 779, 780, 781, 782, 783, 788, 789, 791, 792, 793, 794, 795, 796, 804, 806, 808, 809, 813, 896, 899, 917, 919, 926, 937, 944, 963, 979, 981, 986, 987, 988, 989, 992, 999, 1008, 1010, 1016, 1018, 1028, 1029, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1074, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1112, 1157, 1163, 1164, 1166, 1176, 1177, 1182, 1194, 1195, 1224], "v": [0, 22, 25, 35, 44, 49, 57, 58, 70, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992, 1074, 1112, 1219, 1220], "specif": [0, 22, 25, 35, 44, 49, 57, 58, 70, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 231, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992, 1233, 1252], "variabl": [0, 22, 23, 24, 25, 28, 32, 35, 37, 42, 44, 46, 47, 48, 49, 52, 56, 57, 58, 64, 70, 71, 78, 79, 80, 81, 82, 83, 86, 90, 91, 92, 93, 95, 98, 100, 102, 109, 110, 111, 113, 115, 117, 118, 122, 123, 124, 125, 126, 127, 128, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 391, 392, 393, 396, 399, 401, 402, 406, 410, 412, 414, 416, 419, 420, 421, 423, 426, 428, 429, 433, 437, 439, 441, 442, 445, 448, 457, 464, 465, 473, 474, 482, 483, 486, 493, 494, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 518, 519, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 538, 540, 541, 542, 545, 546, 547, 548, 550, 551, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 584, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 600, 601, 602, 603, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 623, 625, 626, 633, 634, 638, 645, 651, 652, 658, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 673, 674, 676, 677, 678, 680, 682, 683, 684, 686, 688, 689, 690, 693, 694, 695, 697, 699, 700, 721, 722, 724, 725, 726, 727, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 763, 775, 776, 779, 781, 782, 783, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 800, 801, 803, 804, 806, 807, 808, 809, 810, 812, 813, 815, 817, 896, 899, 900, 901, 904, 905, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 921, 922, 925, 926, 929, 930, 936, 937, 944, 947, 948, 951, 952, 953, 958, 959, 961, 962, 963, 964, 965, 966, 968, 969, 972, 973, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 996, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1063, 1065, 1066, 1069, 1071, 1072, 1074, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1112, 1113, 1115, 1116, 1118, 1120, 1121, 1122, 1123, 1125, 1126, 1128, 1130, 1131, 1132, 1133, 1135, 1136, 1138, 1140, 1141, 1142, 1143, 1145, 1146, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1223, 1224, 1227, 1228, 1229, 1230, 1239, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "flag": [0, 22, 25, 35, 37, 44, 45, 49, 57, 58, 66, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 139, 217, 264, 388, 391, 392, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 519, 525, 529, 534, 540, 546, 551, 552, 558, 559, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 678, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 761, 762, 763, 772, 778, 784, 791, 792, 793, 794, 795, 796, 824, 854, 864, 871, 878, 886, 894, 896, 907, 917, 919, 926, 937, 944, 950, 953, 958, 963, 970, 986, 992, 999, 1005, 1008, 1010, 1014, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1080, 1082, 1086, 1088, 1092, 1094, 1098, 1100, 1104, 1106, 1108, 1109, 1111, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1199, 1200, 1206, 1208, 1212, 1241, 1244], "get_data": [0, 22, 25, 35, 44, 49, 57, 58, 64, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 718, 721, 726, 731, 736, 741, 747, 751, 757, 804, 806, 813, 992], "target": [0, 22, 25, 35, 44, 49, 57, 58, 64, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 721, 726, 731, 736, 741, 747, 751, 757, 992, 1249], "lookup": [0, 22, 25, 35, 44, 49, 57, 58, 64, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 530, 534, 535, 540, 546, 551, 558, 562, 567, 568, 571, 574, 577, 582, 584, 586, 589, 590, 595, 596, 601, 602, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 721, 726, 731, 736, 741, 747, 751, 757, 784, 992, 1228, 1239], "smfp": [0, 22, 25, 35, 44, 49, 57, 58, 64, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 721, 726, 731, 736, 741, 747, 751, 757, 992], "getter": [0, 22, 25, 35, 44, 49, 57, 58, 64, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 721, 726, 731, 736, 741, 747, 751, 757, 992], "entri": [0, 4, 6, 14, 16, 22, 25, 31, 35, 40, 44, 49, 54, 57, 58, 64, 65, 71, 75, 79, 83, 88, 91, 100, 105, 109, 111, 113, 117, 122, 126, 391, 395, 399, 405, 410, 412, 415, 419, 422, 426, 432, 437, 441, 442, 447, 457, 462, 465, 471, 474, 480, 483, 486, 491, 494, 500, 503, 505, 508, 512, 518, 522, 525, 529, 532, 534, 537, 540, 544, 546, 549, 551, 555, 558, 562, 565, 567, 571, 574, 577, 582, 584, 586, 589, 593, 595, 599, 601, 605, 607, 610, 613, 616, 619, 622, 626, 632, 633, 638, 644, 645, 650, 651, 657, 658, 661, 667, 669, 672, 677, 683, 689, 694, 700, 718, 721, 726, 731, 736, 741, 745, 747, 751, 755, 757, 800, 832, 992, 995, 1074, 1112, 1227, 1239, 1242, 1249], "provid": [0, 22, 25, 31, 35, 40, 44, 49, 54, 57, 58, 64, 65, 71, 75, 79, 83, 88, 91, 100, 109, 111, 113, 117, 122, 126, 391, 395, 399, 405, 410, 412, 415, 419, 422, 426, 432, 437, 441, 442, 447, 457, 462, 465, 471, 474, 480, 483, 486, 491, 494, 500, 503, 505, 508, 512, 518, 522, 525, 529, 532, 534, 537, 540, 544, 546, 549, 551, 555, 558, 562, 565, 567, 571, 574, 577, 582, 584, 586, 589, 593, 595, 599, 601, 605, 607, 610, 613, 616, 619, 622, 626, 632, 633, 638, 644, 645, 650, 651, 657, 658, 661, 667, 669, 672, 677, 683, 689, 694, 721, 726, 731, 736, 741, 745, 747, 751, 755, 757, 797, 812, 817, 992, 995, 1226, 1228, 1239, 1242, 1243, 1244, 1245, 1246, 1247, 1250, 1252], "reduce_st": [0, 22, 25, 35, 44, 49, 57, 58, 69, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 770, 786, 992, 1252], "sel_stat": [0, 22, 25, 35, 44, 49, 57, 58, 69, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992], "obj": [0, 22, 25, 35, 44, 49, 57, 58, 69, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 139, 148, 264, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 958, 959, 961, 962, 992, 1158, 1168, 1189], "modifi": [0, 22, 25, 32, 35, 42, 44, 47, 49, 56, 57, 58, 69, 71, 73, 74, 79, 81, 83, 90, 91, 95, 98, 100, 102, 109, 111, 113, 117, 122, 123, 124, 126, 391, 396, 399, 406, 410, 412, 416, 419, 423, 426, 433, 437, 441, 442, 448, 457, 459, 460, 465, 468, 469, 474, 477, 478, 483, 485, 486, 488, 489, 494, 496, 497, 500, 504, 505, 507, 508, 511, 512, 514, 518, 525, 528, 529, 533, 534, 538, 540, 545, 546, 550, 551, 556, 558, 561, 562, 566, 567, 570, 571, 573, 574, 576, 577, 581, 582, 584, 586, 588, 589, 594, 595, 600, 601, 606, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 664, 666, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992, 996, 1225], "given": [0, 22, 25, 35, 44, 49, 57, 58, 69, 71, 79, 83, 91, 100, 105, 106, 109, 111, 113, 117, 120, 122, 126, 231, 391, 399, 410, 412, 419, 426, 437, 441, 442, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 578, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 630, 633, 636, 638, 642, 645, 648, 651, 652, 655, 658, 661, 669, 672, 677, 678, 683, 689, 690, 694, 695, 700, 721, 722, 726, 731, 736, 741, 747, 751, 757, 770, 772, 777, 784, 788, 818, 824, 833, 836, 837, 842, 896, 904, 905, 917, 919, 926, 937, 944, 954, 955, 961, 962, 986, 992, 999, 1003, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1060, 1061, 1063, 1069, 1074, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1112, 1113, 1123, 1133, 1143, 1157, 1158, 1166, 1168, 1182, 1189, 1199, 1205, 1206, 1207, 1208, 1213, 1227, 1228, 1229, 1233, 1234, 1239, 1249], "select": [0, 9, 22, 25, 35, 37, 44, 49, 57, 58, 69, 71, 72, 77, 79, 83, 91, 100, 105, 106, 107, 108, 109, 110, 111, 113, 116, 117, 122, 126, 128, 324, 329, 391, 392, 399, 401, 407, 410, 412, 419, 426, 428, 434, 437, 441, 442, 456, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 526, 527, 529, 531, 534, 536, 540, 542, 546, 548, 551, 554, 558, 560, 562, 564, 567, 569, 571, 572, 574, 575, 577, 580, 582, 584, 586, 587, 589, 591, 595, 597, 601, 603, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 659, 660, 661, 663, 669, 670, 671, 672, 674, 676, 677, 680, 683, 686, 689, 692, 694, 697, 700, 721, 724, 726, 729, 731, 734, 736, 739, 741, 744, 747, 750, 751, 754, 757, 760, 798, 810, 812, 896, 897, 899, 900, 901, 917, 919, 920, 921, 922, 926, 927, 929, 930, 933, 935, 937, 938, 941, 943, 944, 946, 953, 963, 976, 980, 986, 992, 999, 1001, 1002, 1008, 1010, 1012, 1013, 1016, 1018, 1020, 1034, 1035, 1039, 1040, 1044, 1045, 1049, 1050, 1055, 1056, 1065, 1066, 1071, 1072, 1077, 1078, 1084, 1085, 1090, 1091, 1096, 1097, 1102, 1103, 1157, 1166, 1182, 1223, 1224, 1225, 1226, 1228, 1230, 1239, 1243, 1244, 1245, 1246, 1247, 1250, 1252], "subset": [0, 14, 15, 17, 22, 25, 35, 44, 49, 57, 58, 69, 71, 79, 83, 91, 100, 109, 111, 113, 117, 122, 126, 391, 392, 399, 401, 407, 410, 412, 419, 426, 428, 434, 437, 441, 442, 452, 456, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 992, 1225, 1228, 1239, 1245], "bool": [4, 21, 35, 37, 44, 45, 63, 64, 66, 93, 95, 107, 108, 110, 128, 139, 222, 264, 312, 385, 388, 391, 392, 439, 508, 509, 514, 518, 519, 527, 531, 536, 542, 548, 552, 554, 558, 559, 560, 564, 569, 572, 575, 580, 587, 591, 597, 603, 659, 660, 663, 670, 671, 674, 676, 677, 678, 680, 686, 692, 697, 719, 724, 729, 734, 739, 744, 750, 754, 760, 761, 762, 763, 772, 778, 784, 791, 792, 793, 794, 795, 796, 803, 824, 850, 854, 860, 864, 868, 871, 875, 878, 882, 886, 890, 894, 896, 897, 907, 915, 916, 925, 936, 950, 953, 958, 963, 999, 1000, 1005, 1007, 1009, 1010, 1011, 1014, 1017, 1020, 1080, 1086, 1092, 1098, 1104, 1108, 1111, 1113, 1114, 1117, 1127, 1137, 1147, 1198, 1199, 1200, 1212, 1216], "clear": [4, 1247], "includ": [4, 25, 31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 815, 820, 995, 1232, 1239, 1241, 1242, 1244, 1253, 1254], "ha": [6, 31, 40, 54, 65, 66, 75, 88, 395, 405, 415, 422, 432, 447, 456, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 907, 995, 1166, 1220, 1221, 1239, 1240, 1243, 1246, 1248, 1249, 1251, 1252], "exactli": [6, 31, 40, 54, 65, 75, 88, 139, 199, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995], "two": [6, 31, 40, 54, 65, 75, 88, 389, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 562, 565, 584, 593, 599, 601, 605, 632, 644, 650, 657, 667, 745, 755, 847, 995, 1074, 1112, 1217, 1218, 1228, 1233, 1239, 1243, 1244, 1247, 1248, 1249, 1252, 1254], "data_var": [6, 31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995], "name_str": [6, 31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995], "dim_tupl": [6, 31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995], "data_ndarrai": [6, 31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995], "coord": [6, 31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995, 1074, 1112], "dim_name_str": [6, 31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995], "dim_arrai": [6, 31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995], "take": [6, 72, 139, 253, 264, 794, 795, 796], "": [6, 14, 15, 22, 24, 25, 35, 44, 48, 49, 57, 64, 79, 82, 83, 91, 100, 109, 111, 139, 231, 264, 341, 342, 343, 348, 366, 367, 368, 376, 391, 392, 399, 410, 412, 419, 426, 437, 441, 442, 474, 475, 484, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 788, 791, 792, 793, 794, 795, 796, 847, 946, 953, 963, 992, 1167, 1188, 1235, 1239, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "dataset": [6, 10, 22, 24, 48, 82, 391, 392, 761, 762, 770, 771, 789, 790, 802, 805, 810, 811, 814, 1225, 1239, 1244, 1250], "kei": [7, 14, 15, 17, 23, 28, 37, 46, 52, 64, 74, 78, 80, 86, 93, 95, 110, 123, 124, 125, 139, 157, 264, 319, 393, 402, 414, 419, 420, 421, 426, 428, 429, 439, 445, 449, 450, 452, 453, 457, 458, 460, 464, 469, 473, 478, 482, 489, 493, 497, 499, 502, 506, 510, 514, 527, 531, 536, 540, 541, 542, 548, 554, 560, 564, 569, 572, 575, 580, 587, 591, 597, 603, 659, 660, 661, 662, 663, 664, 666, 671, 673, 674, 676, 678, 680, 682, 684, 686, 688, 690, 693, 695, 697, 699, 700, 718, 722, 724, 725, 727, 730, 732, 735, 736, 737, 742, 747, 748, 752, 785, 786, 787, 800, 803, 818, 825, 826, 830, 911, 912, 947, 948, 987, 988, 989, 994, 999, 1020, 1028, 1029, 1163, 1164, 1176, 1177, 1194, 1195, 1198, 1224, 1245], "valu": [7, 23, 28, 37, 46, 52, 74, 78, 80, 86, 93, 95, 110, 117, 120, 123, 124, 125, 139, 142, 143, 151, 152, 154, 156, 158, 162, 163, 164, 165, 166, 167, 170, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 217, 222, 231, 264, 266, 267, 270, 271, 273, 274, 275, 280, 281, 282, 283, 284, 285, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 319, 358, 391, 392, 393, 399, 401, 402, 412, 413, 414, 419, 420, 421, 426, 428, 429, 439, 445, 452, 457, 458, 460, 464, 469, 473, 478, 482, 489, 493, 497, 499, 502, 506, 508, 509, 510, 514, 527, 530, 531, 534, 536, 540, 541, 542, 548, 554, 560, 564, 569, 572, 575, 578, 580, 587, 591, 597, 601, 603, 616, 622, 623, 626, 630, 633, 636, 638, 642, 645, 646, 648, 651, 652, 655, 658, 659, 660, 661, 662, 663, 664, 666, 670, 671, 673, 674, 675, 676, 678, 680, 681, 682, 684, 686, 687, 688, 689, 690, 692, 693, 695, 697, 698, 699, 700, 715, 716, 719, 722, 724, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 737, 742, 747, 748, 752, 772, 777, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 803, 806, 808, 809, 817, 818, 837, 840, 842, 844, 896, 899, 900, 901, 904, 905, 911, 912, 917, 919, 921, 922, 926, 929, 930, 937, 944, 947, 948, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 967, 968, 969, 971, 972, 973, 982, 983, 986, 987, 988, 989, 990, 991, 994, 999, 1001, 1002, 1003, 1008, 1010, 1012, 1013, 1016, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1060, 1061, 1063, 1065, 1066, 1069, 1071, 1072, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1113, 1115, 1116, 1118, 1120, 1121, 1123, 1125, 1126, 1128, 1130, 1131, 1133, 1135, 1136, 1138, 1140, 1141, 1143, 1145, 1146, 1148, 1149, 1151, 1152, 1153, 1154, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1166, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1182, 1189, 1190, 1192, 1193, 1194, 1195, 1198, 1205, 1207, 1213, 1224, 1228, 1235, 1239, 1243, 1248, 1249, 1254], "deriv": [9, 77, 116, 798, 846, 896, 899, 917, 919, 926, 937, 953, 963, 999, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1233], "tupl": [9, 11, 14, 15, 16, 17, 23, 24, 48, 63, 82, 139, 245, 250, 264, 386, 387, 439, 451, 457, 458, 670, 692, 729, 734, 763, 788, 791, 792, 793, 794, 795, 796, 812, 817, 1019, 1205, 1207, 1213, 1216], "addit": [9, 24, 48, 82, 118, 385, 386, 419, 420, 440, 475, 484, 526, 530, 583, 585, 590, 596, 602, 731, 732, 803, 812, 817, 897, 918, 920, 927, 938, 944, 946, 987, 1000, 1008, 1009, 1011, 1016, 1017, 1023, 1160, 1167, 1171, 1188, 1191, 1197, 1198, 1215, 1239, 1249, 1252, 1253], "numpi": [10, 14, 23, 28, 34, 35, 37, 46, 52, 63, 64, 73, 74, 80, 86, 93, 94, 95, 96, 99, 104, 105, 106, 107, 108, 110, 114, 118, 119, 120, 121, 123, 124, 125, 127, 128, 139, 150, 155, 264, 269, 389, 390, 393, 398, 402, 409, 414, 418, 421, 425, 429, 436, 445, 459, 460, 468, 469, 477, 478, 485, 488, 489, 496, 497, 498, 502, 506, 510, 513, 514, 515, 517, 521, 524, 525, 526, 527, 531, 536, 542, 548, 553, 554, 560, 564, 569, 572, 575, 580, 587, 591, 597, 603, 608, 611, 614, 617, 620, 624, 628, 630, 631, 635, 636, 637, 641, 642, 643, 647, 648, 649, 653, 655, 656, 659, 660, 663, 664, 666, 670, 671, 674, 675, 676, 680, 681, 682, 686, 687, 688, 692, 693, 697, 698, 699, 716, 718, 719, 724, 725, 729, 730, 734, 735, 738, 739, 743, 744, 749, 750, 753, 754, 759, 760, 764, 813, 847, 848, 852, 853, 854, 855, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 892, 893, 894, 895, 899, 915, 916, 925, 936, 944, 946, 953, 956, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 988, 989, 994, 998, 1007, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1074, 1112, 1117, 1118, 1120, 1121, 1127, 1128, 1130, 1131, 1137, 1138, 1140, 1141, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1159, 1161, 1162, 1163, 1164, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1190, 1192, 1193, 1194, 1195, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1243, 1244, 1248, 1250, 1251, 1254], "ndarrai": [10, 16, 17, 23, 28, 34, 35, 37, 46, 52, 63, 64, 73, 74, 80, 86, 93, 94, 95, 96, 99, 104, 105, 106, 107, 108, 110, 114, 118, 119, 120, 121, 123, 124, 125, 127, 128, 140, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 216, 219, 220, 223, 224, 226, 227, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 389, 390, 393, 398, 402, 409, 414, 418, 421, 425, 429, 436, 445, 459, 460, 468, 469, 477, 478, 485, 488, 489, 496, 497, 498, 502, 506, 510, 513, 514, 515, 517, 521, 524, 525, 526, 527, 531, 536, 542, 548, 553, 554, 560, 564, 569, 572, 575, 580, 587, 591, 597, 603, 608, 611, 614, 617, 620, 624, 628, 630, 631, 635, 636, 637, 641, 642, 643, 647, 648, 649, 653, 655, 656, 659, 660, 663, 664, 666, 670, 671, 674, 675, 676, 680, 681, 682, 686, 687, 688, 692, 693, 697, 698, 699, 716, 718, 719, 724, 725, 729, 730, 734, 735, 738, 739, 743, 744, 749, 750, 753, 754, 759, 760, 764, 788, 813, 847, 848, 852, 853, 854, 855, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 892, 893, 894, 895, 899, 915, 916, 925, 936, 944, 946, 953, 956, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 988, 989, 994, 998, 1007, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1074, 1112, 1117, 1118, 1120, 1121, 1127, 1128, 1130, 1131, 1137, 1138, 1140, 1141, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1159, 1161, 1162, 1163, 1164, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1190, 1192, 1193, 1194, 1195, 1198, 1217, 1218, 1219, 1220, 1221, 1222, 1254], "shape": [10, 17, 28, 34, 35, 37, 46, 52, 64, 73, 74, 80, 86, 93, 94, 95, 96, 99, 104, 105, 106, 107, 108, 110, 114, 118, 119, 120, 121, 123, 124, 125, 127, 128, 139, 245, 264, 389, 390, 393, 398, 402, 409, 414, 418, 421, 425, 429, 436, 445, 459, 460, 468, 469, 477, 478, 485, 488, 489, 496, 497, 498, 502, 506, 510, 513, 514, 515, 517, 521, 524, 525, 526, 527, 531, 536, 542, 548, 553, 554, 560, 564, 569, 572, 575, 580, 587, 591, 597, 603, 608, 611, 614, 617, 620, 624, 628, 630, 631, 635, 636, 637, 641, 642, 643, 647, 648, 649, 653, 655, 656, 659, 660, 663, 664, 666, 670, 671, 674, 675, 676, 680, 681, 682, 686, 687, 688, 692, 693, 697, 698, 699, 716, 719, 724, 725, 729, 730, 734, 735, 738, 739, 743, 744, 749, 750, 753, 754, 759, 760, 764, 813, 847, 848, 852, 853, 854, 855, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 874, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 892, 893, 894, 895, 899, 900, 901, 904, 905, 915, 916, 921, 922, 925, 929, 930, 936, 944, 946, 951, 952, 953, 954, 955, 956, 958, 959, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 982, 983, 988, 989, 990, 991, 994, 998, 1001, 1002, 1003, 1005, 1007, 1012, 1013, 1014, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1034, 1035, 1039, 1040, 1044, 1045, 1049, 1050, 1055, 1056, 1060, 1061, 1062, 1065, 1066, 1071, 1072, 1077, 1078, 1080, 1084, 1085, 1086, 1090, 1091, 1092, 1096, 1097, 1098, 1102, 1103, 1104, 1108, 1111, 1115, 1116, 1117, 1118, 1120, 1121, 1125, 1126, 1127, 1128, 1130, 1131, 1135, 1136, 1137, 1138, 1140, 1141, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1158, 1159, 1161, 1162, 1163, 1164, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1189, 1190, 1192, 1193, 1194, 1195, 1197, 1198, 1215, 1218, 1219, 1220, 1221, 1222, 1233, 1239, 1250, 1254], "n_state": [10, 14, 17, 19, 28, 34, 35, 37, 46, 52, 64, 73, 74, 80, 86, 93, 95, 96, 104, 105, 106, 107, 108, 110, 118, 119, 120, 121, 123, 124, 125, 127, 128, 393, 398, 402, 409, 414, 418, 421, 425, 429, 436, 439, 445, 459, 460, 468, 469, 477, 478, 485, 488, 489, 496, 497, 498, 502, 506, 510, 514, 515, 525, 526, 527, 531, 536, 542, 548, 553, 554, 560, 564, 569, 572, 575, 580, 587, 591, 597, 603, 628, 630, 631, 635, 636, 637, 641, 642, 643, 647, 648, 649, 653, 655, 656, 659, 660, 663, 664, 666, 670, 671, 674, 675, 676, 680, 681, 682, 686, 687, 688, 692, 693, 697, 698, 699, 716, 719, 724, 725, 729, 730, 734, 735, 738, 739, 743, 744, 749, 750, 753, 754, 759, 760, 944, 946, 986, 988, 989, 992, 994, 998, 1018, 1028, 1029, 1157, 1163, 1164, 1166, 1176, 1177, 1182, 1194, 1195, 1227, 1229, 1250], "n_point": [10, 14, 17, 18, 28, 74, 80, 86, 94, 118, 120, 121, 123, 124, 125, 127, 128, 393, 402, 414, 421, 429, 460, 469, 478, 489, 497, 498, 502, 506, 510, 513, 521, 630, 631, 636, 637, 642, 643, 648, 649, 655, 656, 659, 660, 663, 664, 666, 670, 671, 674, 675, 676, 680, 681, 682, 686, 687, 688, 692, 693, 697, 698, 699, 716, 719, 724, 725, 729, 730, 734, 735, 738, 739, 743, 744, 749, 750, 753, 754, 759, 760, 854, 855, 864, 865, 871, 872, 874, 878, 879, 886, 887, 894, 895, 944, 946, 994, 1117, 1127, 1137, 1147, 1198, 1250], "3": [10, 17, 93, 94, 96, 120, 121, 123, 150, 222, 269, 498, 505, 513, 515, 521, 630, 631, 636, 637, 642, 643, 648, 649, 655, 656, 664, 764, 813, 847, 944, 946, 1074, 1112, 1228, 1233, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "array_lik": [10, 14, 15, 24, 30, 101, 105, 106, 389, 394, 404, 413, 431, 439, 1074, 1112], "indic": [10, 30, 93, 95, 101, 389, 390, 394, 404, 431, 514, 763, 803, 953, 980], "dimens": [10, 14, 15, 16, 17, 24, 63, 64, 69, 95, 139, 230, 245, 250, 264, 325, 327, 514, 770, 785, 786, 787, 1221, 1224, 1228, 1242, 1244, 1250, 1254], "A": [10, 49, 52, 57, 83, 86, 134, 135, 139, 150, 218, 264, 269, 412, 419, 449, 586, 619, 622, 726, 727, 731, 732, 757, 784, 818, 819, 1074, 1112, 1113, 1123, 1133, 1143, 1225, 1226, 1227, 1228, 1231, 1233, 1242, 1243, 1245], "argument": [11, 24, 48, 82, 440, 451, 526, 763, 770, 788, 812, 817, 1019, 1074, 1112, 1117, 1127, 1137, 1147, 1199, 1200, 1205, 1207, 1213, 1216, 1239, 1242, 1248, 1252, 1253], "keyword": [11, 1019, 1205, 1207, 1213, 1216], "limit": [11, 652, 673, 678, 684, 689, 690, 695, 700, 715, 722, 726, 727, 731, 732, 736, 737, 747, 748, 1239], "dictionari": [12, 31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 449, 451, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 700, 720, 745, 755, 800, 832, 995, 1233], "els": [12, 95, 514, 806, 808, 809], "model_book": [14, 449, 450, 451, 452, 453, 454, 455, 456, 1225, 1226, 1233], "meta": [14, 1225], "us": [14, 24, 49, 83, 126, 264, 277, 385, 457, 474, 505, 534, 626, 652, 658, 661, 677, 678, 689, 700, 715, 722, 763, 803, 896, 897, 899, 944, 968, 969, 972, 973, 982, 983, 986, 990, 991, 1018, 1024, 1025, 1026, 1027, 1074, 1112, 1120, 1121, 1140, 1141, 1151, 1152, 1153, 1154, 1157, 1161, 1162, 1166, 1172, 1173, 1174, 1175, 1178, 1179, 1182, 1192, 1193, 1227, 1228, 1229, 1239, 1241, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254], "dure": [14, 15, 24, 31, 40, 54, 65, 75, 88, 391, 392, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995, 1239, 1244, 1245, 1251, 1252], "singl": [14, 23, 28, 37, 46, 52, 80, 86, 110, 119, 390, 393, 402, 414, 419, 421, 429, 445, 502, 506, 510, 512, 527, 531, 536, 542, 548, 554, 560, 564, 569, 572, 575, 580, 587, 591, 597, 603, 628, 635, 641, 647, 653, 806, 808, 809, 896, 900, 917, 919, 921, 926, 929, 937, 944, 958, 986, 994, 999, 1001, 1008, 1010, 1012, 1016, 1018, 1032, 1034, 1037, 1039, 1042, 1044, 1047, 1049, 1053, 1055, 1058, 1063, 1065, 1069, 1071, 1075, 1077, 1082, 1084, 1088, 1090, 1094, 1096, 1100, 1102, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1227, 1238, 1239, 1240, 1242, 1246, 1247, 1251], "usual": [14, 1247], "dim": [14, 15, 16, 17, 63, 64, 139, 144, 264], "same": [14, 15, 17, 114, 608, 611, 614, 617, 620, 624, 777, 848, 1020, 1074, 1112, 1218, 1239, 1252, 1254], "loop_dim": [14, 15, 22, 24], "loop": [14, 15, 24, 847, 1239, 1251], "apply_ufunc": [14, 15, 22, 24, 25, 35, 44, 48, 49, 57, 79, 82, 83, 91, 100, 109, 111, 391, 399, 410, 412, 419, 426, 437, 441, 442, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 992], "size": [14, 25, 33, 95, 100, 103, 118, 139, 189, 246, 264, 391, 397, 399, 408, 410, 412, 417, 419, 424, 426, 435, 437, 514, 638, 639, 731, 732, 763, 768, 817, 992, 993, 997, 1243, 1244, 1252], "n_turbin": [14, 20, 34, 35, 37, 46, 52, 93, 95, 96, 104, 110, 119, 129, 132, 390, 398, 409, 418, 425, 436, 445, 514, 515, 525, 526, 527, 531, 536, 542, 548, 553, 554, 560, 564, 569, 572, 575, 580, 587, 591, 597, 603, 628, 635, 641, 647, 653, 764, 998, 1032, 1033, 1063, 1064, 1113, 1114, 1123, 1124, 1133, 1134, 1244, 1246, 1248, 1249, 1250], "states_i0": [14, 21], "counter": [14, 21, 944, 957, 986, 1018, 1157, 1166, 1182], "first": [14, 21, 25, 64, 137, 601, 633, 1228, 1241, 1244, 1246, 1252, 1253, 1254], "from_point": [14, 17], "pdata": [14, 17, 25, 28, 61, 63, 64, 69, 71, 73, 74, 78, 79, 80, 83, 86, 100, 117, 121, 122, 123, 124, 125, 126, 127, 128, 391, 393, 399, 402, 410, 412, 414, 419, 421, 426, 429, 437, 457, 459, 460, 464, 465, 468, 469, 473, 474, 477, 478, 482, 483, 485, 486, 488, 489, 493, 494, 496, 497, 499, 500, 502, 505, 506, 508, 510, 626, 631, 633, 637, 638, 643, 645, 649, 651, 656, 658, 659, 660, 661, 663, 664, 666, 669, 670, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 686, 687, 688, 689, 692, 693, 694, 697, 698, 699, 700, 716, 721, 724, 725, 726, 729, 730, 731, 734, 735, 736, 738, 739, 741, 743, 744, 747, 749, 750, 751, 753, 754, 757, 759, 760, 992, 994], "__getitem__": [14, 139, 157, 264, 449, 450, 452, 453], "x": [14, 94, 117, 118, 120, 336, 373, 377, 385, 389, 391, 392, 449, 450, 465, 513, 518, 521, 558, 559, 626, 630, 633, 636, 638, 642, 645, 648, 651, 655, 658, 659, 660, 661, 663, 669, 670, 671, 672, 674, 675, 676, 677, 680, 681, 683, 686, 687, 689, 692, 694, 697, 698, 700, 716, 719, 724, 726, 729, 731, 734, 763, 764, 791, 792, 793, 794, 795, 796, 817, 847, 849, 850, 852, 853, 856, 858, 860, 862, 863, 866, 868, 869, 870, 873, 875, 876, 877, 880, 882, 884, 885, 888, 890, 892, 893, 1074, 1112, 1221, 1222, 1228, 1235, 1236, 1240, 1242, 1243, 1244, 1246, 1250, 1251, 1252, 1253, 1254], "y": [14, 94, 336, 373, 378, 385, 389, 391, 392, 449, 450, 513, 521, 558, 559, 763, 764, 791, 792, 793, 794, 795, 796, 817, 849, 850, 852, 853, 856, 858, 860, 862, 863, 866, 868, 869, 870, 873, 875, 876, 877, 880, 882, 884, 885, 888, 890, 892, 893, 1074, 1112, 1221, 1222, 1235, 1242, 1243, 1244, 1250, 1252], "np": [16, 17, 64, 150, 199, 222, 269, 310, 312, 784, 788, 847, 899, 900, 901, 904, 905, 921, 922, 929, 930, 951, 952, 953, 954, 955, 958, 959, 961, 962, 963, 982, 983, 990, 991, 1001, 1002, 1003, 1005, 1012, 1013, 1014, 1034, 1035, 1039, 1040, 1044, 1045, 1049, 1050, 1055, 1056, 1060, 1061, 1062, 1065, 1066, 1071, 1072, 1074, 1077, 1078, 1080, 1084, 1085, 1086, 1090, 1091, 1092, 1096, 1097, 1098, 1102, 1103, 1104, 1108, 1111, 1112, 1115, 1116, 1125, 1126, 1135, 1136, 1145, 1146, 1158, 1168, 1178, 1179, 1189, 1198, 1243, 1244, 1248, 1250, 1251, 1254], "instead": [21, 63, 385, 391, 392, 399, 401, 426, 428, 677, 678, 689, 803, 944, 953, 986, 1018, 1074, 1112, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1239, 1241, 1246, 1251, 1253, 1254], "index": [21, 25, 30, 64, 73, 74, 100, 101, 105, 106, 108, 118, 120, 121, 123, 128, 264, 277, 385, 391, 394, 399, 401, 404, 407, 410, 412, 419, 426, 428, 431, 434, 437, 459, 460, 468, 469, 477, 478, 485, 488, 489, 496, 497, 547, 630, 631, 636, 637, 642, 643, 648, 649, 655, 656, 659, 660, 663, 664, 670, 671, 674, 675, 676, 680, 681, 686, 687, 692, 697, 698, 716, 719, 724, 729, 734, 739, 744, 750, 754, 760, 761, 762, 763, 791, 792, 793, 794, 795, 796, 899, 944, 979, 981, 986, 992, 1018, 1157, 1166, 1182, 1217, 1239, 1242, 1248, 1249, 1252, 1254], "correspond": [21, 73, 139, 140, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 216, 219, 220, 223, 224, 226, 227, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 383, 384, 459, 468, 477, 485, 488, 496, 534, 1219, 1222, 1235, 1241, 1245, 1246, 1249], "datacalcmodel": [22, 23, 24, 44, 79, 1225, 1239], "via": [22, 24, 25, 35, 44, 48, 49, 57, 79, 82, 83, 91, 100, 109, 111, 385, 386, 391, 392, 399, 401, 407, 410, 412, 419, 426, 428, 434, 437, 441, 442, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 761, 770, 789, 797, 800, 801, 804, 810, 813, 815, 826, 953, 963, 992, 1199, 1226, 1227, 1229, 1233, 1239, 1240, 1244, 1247, 1248, 1252, 1254], "i": [22, 23, 24, 28, 37, 46, 48, 52, 64, 80, 82, 86, 94, 95, 105, 110, 119, 126, 139, 150, 199, 222, 231, 264, 269, 277, 312, 385, 387, 393, 399, 402, 414, 421, 429, 439, 445, 457, 458, 465, 466, 474, 475, 484, 486, 487, 495, 500, 501, 502, 506, 510, 513, 514, 518, 519, 521, 525, 526, 527, 531, 534, 536, 542, 548, 554, 560, 564, 569, 571, 572, 574, 575, 580, 587, 589, 590, 591, 595, 596, 597, 601, 603, 626, 628, 635, 641, 647, 653, 658, 659, 660, 661, 663, 670, 671, 674, 676, 680, 683, 684, 686, 689, 692, 697, 724, 729, 734, 747, 777, 797, 802, 812, 817, 854, 855, 864, 865, 871, 872, 878, 879, 886, 887, 894, 895, 944, 963, 966, 974, 975, 982, 983, 986, 990, 991, 994, 999, 1018, 1074, 1112, 1113, 1123, 1133, 1143, 1157, 1166, 1178, 1179, 1182, 1199, 1204, 1228, 1229, 1235, 1236, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "thei": [22, 93, 105, 106, 117, 125, 682, 688, 693, 699, 725, 730, 735, 1228, 1236, 1239, 1242, 1243, 1244, 1245, 1247, 1252], "depend": [22, 95, 340, 363, 457, 465, 500, 501, 514, 590, 596, 601, 602, 658, 661, 669, 670, 672, 675, 677, 681, 683, 687, 689, 692, 694, 698, 726, 729, 731, 734, 896, 915, 916, 917, 919, 925, 926, 936, 937, 999, 1000, 1007, 1008, 1009, 1010, 1016, 1017, 1020, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1228, 1235, 1236, 1239, 1241, 1243, 1246, 1247, 1252, 1254], "For": [22, 64, 73, 74, 105, 106, 118, 120, 121, 123, 128, 439, 459, 460, 468, 469, 477, 478, 485, 488, 489, 496, 497, 534, 630, 631, 636, 637, 642, 643, 648, 649, 655, 656, 659, 660, 663, 664, 670, 671, 674, 675, 676, 677, 680, 681, 686, 687, 692, 697, 698, 716, 719, 724, 729, 734, 739, 744, 750, 754, 760, 817, 1074, 1112, 1241, 1242, 1244, 1246, 1247, 1248, 1250, 1251, 1252, 1254], "each": [22, 35, 52, 64, 73, 74, 86, 105, 106, 118, 120, 121, 123, 128, 139, 250, 264, 439, 459, 460, 468, 469, 477, 478, 485, 488, 489, 496, 497, 601, 630, 631, 633, 636, 637, 642, 643, 648, 649, 655, 656, 659, 660, 663, 664, 670, 671, 674, 675, 676, 680, 681, 686, 687, 692, 697, 698, 716, 719, 724, 729, 734, 739, 744, 750, 754, 760, 772, 791, 817, 937, 999, 1005, 1008, 1010, 1014, 1016, 1074, 1075, 1080, 1082, 1086, 1088, 1092, 1094, 1098, 1100, 1104, 1106, 1108, 1109, 1111, 1112, 1228, 1242, 1244, 1247, 1248, 1250, 1251, 1252, 1253, 1254], "individu": [22, 105, 111, 601, 896, 900, 901, 917, 919, 921, 922, 926, 929, 930, 937, 944, 954, 958, 959, 986, 999, 1001, 1002, 1008, 1010, 1012, 1013, 1016, 1018, 1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1060, 1063, 1065, 1066, 1069, 1071, 1072, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1226, 1228, 1244, 1247], "paramet": [22, 35, 49, 83, 357, 364, 365, 399, 426, 439, 441, 442, 457, 577, 589, 595, 601, 638, 645, 651, 677, 683, 689, 694, 700, 720, 721, 726, 731, 826, 944, 1166, 1182, 1228, 1230, 1235, 1244, 1247, 1250, 1252, 1253], "main": [22, 23, 25, 28, 35, 37, 44, 46, 49, 52, 57, 79, 80, 83, 86, 100, 109, 110, 111, 391, 393, 399, 402, 410, 412, 414, 419, 421, 426, 429, 437, 441, 442, 445, 500, 502, 505, 506, 508, 510, 525, 527, 529, 531, 534, 536, 540, 542, 546, 548, 551, 554, 558, 560, 562, 564, 567, 569, 571, 572, 574, 575, 577, 580, 582, 584, 586, 587, 589, 591, 595, 597, 601, 603, 992, 994, 1241, 1242], "run_calcul": [22, 24, 25, 35, 44, 48, 49, 57, 79, 82, 83, 91, 100, 109, 111, 391, 399, 410, 412, 419, 426, 437, 441, 442, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 992], "out_var": [22, 24, 25, 35, 44, 48, 49, 57, 79, 82, 83, 91, 100, 109, 111, 391, 399, 410, 412, 419, 426, 437, 441, 442, 500, 505, 508, 512, 518, 525, 526, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 992], "start": [22, 24, 25, 26, 35, 44, 48, 49, 57, 79, 82, 83, 91, 100, 109, 111, 135, 139, 211, 264, 385, 391, 399, 410, 412, 419, 426, 437, 441, 442, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 626, 627, 651, 652, 818, 819, 992, 1239, 1242, 1248, 1250, 1254], "thi": [23, 24, 28, 31, 37, 40, 44, 45, 46, 48, 52, 54, 65, 74, 75, 80, 82, 86, 88, 93, 95, 110, 119, 122, 123, 134, 150, 269, 393, 395, 402, 405, 414, 415, 421, 422, 429, 432, 445, 447, 457, 460, 462, 469, 471, 478, 480, 489, 491, 497, 502, 503, 506, 508, 510, 514, 522, 527, 531, 532, 534, 536, 537, 542, 544, 548, 549, 552, 554, 555, 560, 564, 565, 569, 572, 575, 580, 587, 591, 593, 597, 599, 603, 605, 616, 626, 628, 632, 635, 641, 644, 647, 650, 652, 653, 657, 658, 661, 664, 667, 669, 672, 673, 677, 678, 683, 684, 689, 690, 694, 695, 700, 715, 721, 722, 726, 727, 731, 732, 745, 747, 755, 770, 791, 792, 793, 794, 795, 796, 797, 826, 847, 866, 873, 880, 896, 897, 963, 982, 983, 990, 991, 994, 995, 1020, 1074, 1112, 1113, 1123, 1133, 1143, 1166, 1178, 1179, 1226, 1227, 1228, 1229, 1233, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "execut": [23, 26, 28, 37, 46, 52, 80, 86, 110, 119, 393, 402, 414, 421, 429, 445, 502, 506, 510, 527, 531, 536, 542, 548, 554, 560, 564, 569, 572, 575, 580, 587, 591, 597, 603, 628, 635, 641, 647, 653, 994, 1199, 1206, 1228, 1233, 1241], "comput": [23, 28, 37, 46, 52, 71, 80, 86, 110, 119, 126, 264, 310, 393, 402, 414, 421, 429, 445, 502, 506, 510, 527, 531, 536, 542, 548, 554, 560, 564, 569, 572, 575, 580, 586, 587, 591, 597, 603, 628, 635, 641, 647, 651, 653, 721, 813, 994, 1074, 1112, 1228, 1239, 1247, 1251, 1254], "should": [23, 28, 31, 37, 40, 46, 52, 54, 65, 75, 80, 86, 88, 110, 119, 391, 392, 393, 395, 402, 405, 414, 415, 421, 422, 429, 432, 445, 447, 457, 462, 471, 480, 491, 502, 503, 506, 510, 522, 527, 531, 532, 536, 537, 542, 544, 548, 549, 554, 555, 560, 564, 565, 569, 572, 575, 580, 587, 591, 593, 597, 599, 603, 605, 628, 632, 635, 641, 644, 647, 650, 653, 657, 667, 745, 747, 755, 994, 995, 1074, 1112, 1218, 1241, 1243, 1244, 1248, 1249, 1252, 1253, 1254], "arrai": [23, 28, 31, 37, 40, 46, 52, 54, 64, 65, 75, 80, 86, 88, 105, 106, 110, 119, 139, 140, 144, 145, 146, 147, 148, 155, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 219, 220, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 393, 395, 402, 405, 414, 415, 421, 422, 429, 432, 445, 447, 462, 471, 480, 491, 502, 503, 506, 510, 522, 525, 526, 527, 531, 532, 536, 537, 542, 544, 548, 549, 554, 555, 560, 564, 565, 569, 572, 575, 580, 587, 591, 593, 597, 599, 603, 605, 628, 632, 635, 641, 644, 647, 650, 653, 657, 667, 745, 755, 788, 847, 848, 899, 900, 901, 904, 905, 921, 922, 929, 930, 951, 952, 953, 954, 955, 958, 959, 961, 962, 963, 982, 983, 990, 991, 994, 995, 1001, 1002, 1003, 1005, 1012, 1013, 1014, 1034, 1035, 1039, 1040, 1044, 1045, 1049, 1050, 1055, 1056, 1060, 1061, 1062, 1065, 1066, 1071, 1072, 1074, 1077, 1078, 1080, 1084, 1085, 1086, 1090, 1091, 1092, 1096, 1097, 1098, 1102, 1103, 1104, 1108, 1111, 1112, 1115, 1116, 1117, 1125, 1126, 1127, 1135, 1136, 1137, 1145, 1146, 1147, 1158, 1168, 1178, 1179, 1189, 1198, 1219, 1220, 1221, 1222, 1243, 1244, 1251, 1254], "result": [23, 24, 28, 37, 46, 48, 52, 74, 80, 82, 86, 91, 93, 95, 110, 114, 118, 124, 126, 127, 138, 231, 393, 402, 414, 421, 429, 445, 460, 465, 469, 478, 489, 497, 502, 506, 508, 509, 510, 512, 514, 518, 527, 531, 536, 542, 548, 554, 560, 564, 569, 572, 575, 580, 587, 591, 597, 603, 608, 611, 614, 617, 620, 624, 626, 666, 672, 674, 677, 680, 683, 686, 694, 697, 736, 738, 741, 743, 749, 751, 753, 759, 761, 762, 763, 770, 771, 772, 773, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 801, 802, 804, 805, 806, 808, 809, 810, 811, 814, 900, 901, 904, 905, 921, 922, 929, 930, 951, 952, 954, 955, 958, 961, 962, 994, 1001, 1002, 1003, 1012, 1013, 1034, 1035, 1039, 1040, 1044, 1045, 1049, 1050, 1055, 1056, 1060, 1061, 1065, 1066, 1071, 1072, 1074, 1077, 1078, 1084, 1085, 1090, 1091, 1096, 1097, 1102, 1103, 1112, 1115, 1116, 1125, 1126, 1135, 1136, 1145, 1146, 1158, 1168, 1189, 1205, 1207, 1213, 1224, 1228, 1232, 1235, 1239, 1244, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254], "output": [23, 24, 28, 32, 37, 42, 46, 47, 48, 52, 56, 64, 80, 81, 82, 86, 90, 98, 102, 110, 131, 391, 392, 393, 396, 399, 401, 402, 406, 414, 416, 419, 420, 421, 423, 426, 428, 429, 433, 445, 448, 502, 504, 506, 507, 510, 511, 525, 526, 527, 528, 529, 530, 531, 533, 536, 538, 542, 545, 548, 550, 554, 556, 560, 561, 564, 566, 569, 570, 572, 573, 575, 576, 580, 581, 587, 588, 591, 594, 597, 600, 603, 606, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 994, 996, 1074, 1112, 1215, 1223, 1239, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "out_core_var": 24, "initial_result": 24, "calc_par": [24, 25, 35, 43, 44, 48, 49, 57, 79, 82, 83, 91, 100, 109, 111, 391, 399, 410, 412, 419, 426, 437, 441, 442, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 992], "typic": [24, 48, 82, 100, 963], "fc": [24, 64, 1010, 1011, 1243, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "extendedst": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 1225, 1239], "extend": [25, 1225, 1237, 1240], "pmodel": 25, "pointdatamodellist": [25, 83, 84, 85, 86, 87, 88, 89, 90, 1225], "point_model": [25, 26, 452, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 1245], "append": [25, 27, 49, 51, 83, 85, 1251], "total": [25, 33, 100, 103, 126, 132, 391, 397, 399, 408, 410, 412, 417, 419, 424, 426, 435, 437, 770, 778, 944, 974, 975, 986, 992, 997, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1239, 1244], "weight": [25, 34, 91, 93, 95, 99, 100, 104, 322, 375, 391, 392, 398, 399, 409, 410, 412, 418, 419, 425, 426, 436, 437, 439, 465, 486, 512, 514, 517, 518, 519, 524, 770, 788, 794, 795, 796, 992, 998, 1074, 1089, 1112, 1224, 1228, 1235, 1242, 1244, 1249, 1250, 1253], "statist": [25, 34, 100, 104, 375, 391, 398, 399, 409, 410, 412, 418, 419, 425, 426, 436, 437, 992, 998, 1235, 1242, 1253], "output_point_var": [25, 32, 79, 81, 83, 90, 100, 102, 391, 396, 399, 406, 410, 412, 416, 419, 423, 426, 433, 437, 500, 504, 505, 507, 508, 511, 992, 996], "being": [25, 32, 35, 42, 44, 47, 49, 56, 57, 79, 81, 83, 90, 91, 98, 100, 102, 109, 111, 123, 124, 391, 396, 399, 406, 410, 412, 416, 419, 423, 426, 433, 437, 441, 442, 448, 500, 504, 505, 507, 508, 511, 512, 518, 525, 528, 529, 533, 534, 538, 540, 545, 546, 550, 551, 556, 558, 561, 562, 566, 567, 570, 571, 573, 574, 576, 577, 581, 582, 584, 586, 588, 589, 594, 595, 600, 601, 606, 664, 666, 963, 992, 996, 1074, 1112], "fdata": [25, 28, 35, 37, 44, 46, 49, 52, 57, 61, 63, 64, 69, 71, 73, 74, 78, 79, 80, 83, 86, 91, 93, 95, 96, 100, 109, 110, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 391, 393, 399, 402, 410, 412, 414, 419, 421, 426, 429, 437, 441, 442, 445, 457, 459, 460, 464, 465, 468, 469, 473, 474, 477, 478, 482, 483, 485, 486, 488, 489, 493, 494, 496, 497, 498, 499, 500, 502, 505, 506, 508, 510, 512, 514, 515, 518, 525, 527, 529, 531, 534, 536, 540, 542, 546, 548, 551, 554, 558, 560, 562, 564, 567, 569, 571, 572, 574, 575, 577, 580, 582, 584, 586, 587, 589, 591, 595, 597, 601, 603, 626, 628, 630, 631, 633, 635, 636, 637, 638, 641, 642, 643, 645, 647, 648, 649, 651, 653, 655, 656, 658, 659, 660, 661, 663, 664, 666, 669, 670, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 686, 687, 688, 689, 692, 693, 694, 697, 698, 699, 700, 716, 721, 724, 725, 726, 729, 730, 731, 734, 735, 736, 738, 739, 741, 743, 744, 747, 749, 750, 751, 753, 754, 757, 759, 760, 992, 994], "pointdatamodel": [26, 27, 79, 80, 81, 82, 83, 84, 85, 100, 452, 500, 505, 508, 1225, 1228], "label": [30, 101, 105, 106, 394, 404, 431, 791, 792, 793, 794, 795, 796, 817, 1242, 1249, 1252], "integ": [30, 101, 139, 199, 217, 264, 277, 394, 404, 431, 896, 899, 900, 901, 904, 905, 912, 914, 917, 919, 921, 922, 926, 929, 930, 937, 944, 951, 952, 953, 958, 959, 961, 962, 963, 965, 969, 973, 982, 983, 985, 986, 988, 989, 990, 991, 999, 1001, 1002, 1003, 1008, 1010, 1012, 1013, 1016, 1018, 1025, 1027, 1028, 1029, 1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1063, 1065, 1066, 1069, 1071, 1072, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1113, 1115, 1116, 1125, 1126, 1133, 1135, 1136, 1143, 1145, 1146, 1152, 1154, 1157, 1158, 1163, 1164, 1166, 1168, 1173, 1175, 1176, 1177, 1178, 1179, 1182, 1189, 1194, 1195], "load": [31, 40, 54, 65, 75, 88, 391, 392, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995, 1239, 1243], "file": [31, 40, 54, 65, 75, 88, 134, 136, 137, 385, 386, 387, 388, 391, 392, 395, 399, 401, 405, 415, 422, 426, 428, 432, 440, 447, 454, 462, 471, 480, 491, 500, 501, 503, 522, 530, 532, 537, 544, 546, 547, 549, 555, 562, 563, 565, 582, 583, 584, 585, 589, 590, 593, 595, 596, 599, 601, 602, 605, 632, 644, 650, 657, 667, 683, 745, 755, 761, 766, 767, 768, 769, 770, 789, 797, 800, 801, 803, 804, 809, 810, 813, 815, 818, 820, 821, 822, 823, 824, 826, 831, 832, 995, 1197, 1198, 1215, 1226, 1227, 1228, 1232, 1233, 1239, 1240, 1241, 1243, 1244, 1246, 1249, 1250, 1252, 1253], "part": [31, 40, 54, 65, 75, 88, 139, 221, 237, 264, 395, 405, 415, 422, 432, 447, 456, 462, 465, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995, 1242, 1244, 1246, 1247, 1249], "under": [31, 35, 36, 40, 49, 54, 65, 75, 83, 88, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995, 1236, 1239, 1240, 1242, 1243, 1245, 1248, 1254], "reason": [31, 40, 54, 65, 75, 88, 395, 405, 415, 422, 432, 447, 462, 471, 480, 491, 503, 522, 532, 537, 544, 549, 555, 565, 593, 599, 605, 632, 644, 650, 657, 667, 745, 755, 995], "output_var": [32, 42, 47, 56, 81, 90, 98, 102, 391, 392, 396, 399, 401, 406, 410, 416, 423, 426, 428, 433, 437, 448, 500, 501, 504, 507, 511, 528, 529, 530, 533, 538, 545, 550, 556, 561, 562, 563, 566, 570, 573, 576, 581, 588, 594, 600, 606, 996, 1242, 1243, 1244, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "farmcontrol": [35, 36, 37, 38, 39, 40, 41, 42, 43, 441, 452, 1225, 1228], "farmdatamodel": [35, 44, 45, 46, 47, 48, 49, 50, 51, 57, 91, 109, 1225], "analys": [35, 1225], "handl": [35, 1225, 1239], "turbine_typ": [35, 452, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 815, 817, 1242, 1245, 1249, 1250, 1252], "turbinetyp": [35, 111, 112, 452, 586, 589, 590, 595, 596, 601, 602, 1225, 1228], "turbine_model_nam": 35, "found": [35, 63, 824, 1227, 1229, 1245, 1250, 1252], "turbine_model_sel": 35, "n_model": 35, "pre_rotor_model": 35, "farmdatamodellist": [35, 49, 50, 51, 52, 53, 54, 55, 56, 1225], "pre": [35, 37, 1241, 1248, 1251], "rotor": [35, 37, 44, 45, 71, 91, 93, 94, 95, 96, 97, 99, 105, 106, 111, 112, 138, 320, 321, 322, 341, 342, 343, 354, 366, 367, 368, 373, 385, 452, 465, 466, 474, 475, 483, 484, 486, 487, 494, 498, 512, 513, 514, 515, 516, 517, 518, 521, 523, 524, 540, 541, 552, 558, 559, 633, 747, 761, 762, 763, 896, 897, 1020, 1033, 1224, 1225, 1228, 1235, 1238, 1239, 1240, 1244, 1247, 1251, 1252], "post_rotor_model": 35, "without": [35, 441, 788, 1228, 1244, 1248, 1250], "par": [35, 36, 441, 700, 708, 720], "respecitv": 35, "set_par": [35, 43, 441], "model_nam": [35, 43, 441], "init_par": [35, 43, 441], "final_par": [35, 43, 441], "collect_model": [35, 38, 441], "analyz": [35, 38, 441], "gather": [35, 38, 441], "output_farm_var": [35, 42, 44, 47, 49, 56, 57, 91, 98, 109, 111, 441, 442, 448, 512, 518, 525, 528, 529, 533, 534, 538, 540, 545, 546, 550, 551, 556, 558, 561, 562, 566, 567, 570, 571, 573, 574, 576, 577, 581, 582, 584, 586, 588, 589, 594, 595, 600, 601, 606], "pre_rotor": [35, 37, 44, 45, 57, 109, 441, 551, 552, 571, 574, 987, 1020], "st_sel": [35, 37, 109, 110, 111, 441, 525, 526, 527, 529, 531, 534, 536, 540, 542, 546, 548, 551, 554, 558, 560, 562, 564, 567, 569, 571, 572, 574, 575, 577, 580, 582, 584, 586, 587, 589, 591, 595, 597, 601, 603], "respect": [36, 389, 1074, 1112, 1242, 1252, 1253, 1254], "post": [37, 1240, 1247], "befor": [44, 45, 124, 385, 552, 666, 791, 792, 794, 795, 796, 982, 983, 990, 991, 1010, 1011, 1020, 1178, 1179, 1244], "By": [49, 83, 963, 1254], "togeth": [49, 83, 1254], "one": [49, 52, 64, 73, 74, 83, 86, 93, 95, 99, 118, 120, 121, 123, 128, 139, 225, 264, 457, 458, 459, 460, 465, 466, 468, 469, 474, 475, 477, 478, 483, 484, 485, 486, 487, 488, 489, 495, 496, 497, 514, 517, 518, 519, 524, 630, 631, 636, 637, 642, 643, 648, 649, 655, 656, 659, 660, 663, 664, 670, 671, 674, 675, 676, 680, 681, 686, 687, 692, 697, 698, 716, 719, 724, 729, 734, 739, 744, 750, 754, 760, 810, 817, 847, 1074, 1112, 1218, 1228, 1232, 1239, 1242, 1246, 1253, 1254], "common": [49, 83, 651, 700, 716, 721, 1074, 1112, 1236], "farmmodel": [57, 442, 452, 1225, 1228], "oper": [57, 127, 738, 743, 749, 753, 759, 770, 785, 786, 787, 1225, 1248], "contrast": [57, 847, 1225], "turbinemodel": [57, 107, 108, 109, 110, 111, 442, 443, 452, 525, 526, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 1225, 1228], "allow": [57, 439, 1225, 1239, 1244, 1251], "applic": [57, 900, 901, 904, 905, 921, 922, 929, 930, 944, 951, 952, 957, 961, 962, 986, 1001, 1002, 1003, 1012, 1013, 1018, 1034, 1035, 1039, 1040, 1044, 1045, 1049, 1050, 1055, 1056, 1065, 1066, 1071, 1072, 1077, 1078, 1084, 1085, 1090, 1091, 1096, 1097, 1102, 1103, 1115, 1116, 1125, 1126, 1135, 1136, 1145, 1146, 1157, 1158, 1166, 1168, 1182, 1189, 1225, 1240, 1244], "util": [61, 63, 129, 134, 452, 791, 792, 793, 794, 795, 796, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 1113, 1114, 1123, 1124, 1133, 1134, 1143, 1144, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1226, 1239, 1244, 1251, 1252, 1253], "error": [63, 64, 134, 391, 392, 683, 818, 824, 1252], "states_source_turbin": [64, 73, 117, 118, 120, 121, 123, 128, 459, 468, 477, 485, 488, 496, 626, 630, 631, 633, 636, 637, 638, 642, 643, 645, 648, 649, 651, 655, 656, 659, 660, 663, 664, 670, 671, 674, 675, 676, 680, 681, 686, 687, 692, 697, 698, 700, 716, 719, 724, 729, 734, 739, 744, 750, 754, 760], "upcast": 64, "accept_non": 64, "serv": [64, 1242], "identifi": [64, 138, 262, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 1223, 1224, 1239, 1251], "state_turbin": [64, 327, 1224], "state_point": [64, 325, 1224], "order": [64, 117, 119, 139, 231, 264, 362, 441, 452, 601, 626, 628, 633, 635, 638, 641, 645, 647, 651, 653, 953, 963, 1228, 1235, 1244, 1248, 1249, 1250], "combin": [64, 757, 758, 1254], "m": [64, 341, 342, 343, 348, 354, 356, 361, 366, 367, 368, 376, 377, 382, 392, 399, 601, 638, 639, 791, 792, 793, 794, 795, 796, 919, 920, 1074, 1112, 1235, 1241, 1242, 1243, 1246, 1250, 1251, 1252, 1253], "f": [64, 525, 526, 847, 1074, 1112, 1246, 1248, 1252, 1253, 1254], "p": [64, 352, 355, 363, 383, 384, 534, 589, 590, 596, 602, 800, 817, 826, 828, 1074, 1112, 1235, 1239, 1240, 1242, 1243, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "evalu": [64, 73, 74, 78, 91, 95, 114, 117, 119, 121, 123, 124, 125, 127, 128, 459, 460, 464, 465, 466, 468, 469, 473, 474, 477, 478, 482, 485, 488, 489, 493, 496, 497, 499, 512, 514, 518, 608, 611, 614, 617, 620, 624, 626, 628, 631, 633, 635, 637, 638, 641, 643, 645, 647, 649, 651, 653, 656, 658, 659, 660, 663, 664, 666, 670, 671, 674, 675, 676, 680, 681, 682, 686, 687, 688, 692, 693, 697, 698, 699, 716, 724, 725, 729, 730, 734, 735, 738, 739, 743, 744, 749, 750, 753, 754, 759, 760, 770, 813, 833, 834, 836, 837, 838, 839, 842, 843, 944, 958, 959, 986, 1018, 1113, 1114, 1123, 1133, 1143, 1157, 1166, 1182, 1228, 1230, 1231, 1232, 1237, 1239, 1240, 1247, 1249, 1250, 1251, 1252], "wake": [64, 71, 72, 73, 74, 77, 78, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 357, 364, 365, 383, 452, 457, 458, 459, 460, 464, 465, 466, 468, 469, 473, 474, 475, 477, 478, 482, 483, 484, 485, 486, 487, 488, 489, 493, 494, 495, 496, 497, 498, 499, 508, 577, 626, 627, 630, 631, 633, 636, 637, 638, 642, 643, 645, 646, 648, 649, 651, 652, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 715, 716, 719, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 741, 743, 744, 747, 748, 749, 750, 751, 753, 754, 757, 758, 759, 760, 1113, 1123, 1225, 1228, 1230, 1231, 1235, 1236, 1238, 1239, 1240, 1243, 1247, 1248, 1250, 1252, 1253], "caus": [64, 73, 118, 120, 121, 123, 128, 459, 468, 477, 485, 488, 496, 630, 631, 636, 637, 642, 643, 648, 649, 655, 656, 659, 660, 663, 664, 670, 671, 674, 675, 676, 680, 681, 686, 687, 692, 697, 698, 716, 719, 724, 729, 734, 739, 744, 750, 754, 760, 1239], "scalar": [64, 139, 140, 144, 148, 155, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 216, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 500, 501, 1074, 1112], "data_prio": 64, "search": [64, 391, 392, 399, 401, 452, 456, 578, 651, 652, 677, 678, 689, 690, 694, 695, 721, 722, 846, 1233, 1239, 1245, 1246, 1250, 1252], "throw": 64, "an": [64, 105, 264, 277, 518, 519, 626, 683, 791, 792, 793, 794, 795, 796, 847, 944, 948, 986, 1018, 1074, 1112, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1226, 1227, 1243, 1249, 1252, 1254], "nan": [64, 139, 199, 439, 788, 847, 899, 1239, 1248], "need": [64, 113, 115, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 625, 736, 740, 741, 746, 751, 756, 1244, 1246, 1248, 1249, 1253], "previou": [64, 126, 128, 736, 739, 741, 744, 747, 750, 751, 754, 757, 760, 1251], "true": [66, 95, 134, 139, 222, 264, 312, 388, 392, 439, 514, 518, 519, 558, 559, 719, 791, 792, 793, 794, 795, 796, 818, 824, 854, 855, 864, 865, 866, 868, 871, 872, 873, 875, 878, 879, 880, 882, 886, 887, 894, 895, 907, 950, 1010, 1011, 1117, 1127, 1137, 1147, 1198, 1200, 1243, 1244, 1246, 1248, 1251, 1252, 1253], "been": [66, 907, 1239, 1240], "mobj": 69, "reduc": [69, 518, 519, 770, 785, 786, 787, 1239], "partialwakesmodel": [71, 72, 73, 74, 75, 76, 77, 78, 457, 465, 474, 486, 494, 1225, 1228], "partial": [71, 77, 452, 457, 458, 465, 474, 483, 486, 494, 658, 661, 1225, 1228, 1236, 1247], "effect": [71, 91, 93, 341, 342, 343, 366, 367, 368, 486, 512, 518, 1228, 1230, 1231, 1235, 1247, 1248, 1249, 1253, 1254], "quantiti": [71, 91, 1247], "wake_model": [71, 72, 452, 457, 458, 465, 466, 474, 475, 483, 484, 486, 487, 494, 495, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "wakemodel": [71, 72, 122, 123, 124, 125, 452, 458, 466, 475, 484, 487, 495, 661, 1225, 1236], "wake_fram": [71, 72, 452, 458, 465, 466, 475, 483, 484, 486, 487, 494, 495, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 1243, 1244, 1245, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "wakefram": [71, 72, 117, 118, 119, 120, 121, 452, 458, 466, 475, 484, 487, 495, 626, 627, 633, 638, 645, 651, 652, 1225, 1228], "frame": [71, 72, 94, 117, 118, 120, 121, 123, 399, 452, 458, 466, 475, 484, 487, 495, 500, 501, 513, 521, 626, 627, 630, 631, 636, 637, 642, 643, 648, 649, 651, 652, 655, 656, 664, 700, 1197, 1225, 1228, 1236, 1239, 1243, 1247, 1251, 1254], "new_wake_delta": [71, 73, 74, 78, 457, 459, 460, 464, 465, 468, 469, 473, 474, 477, 478, 482, 483, 485, 486, 488, 489, 493, 494, 496, 497, 499], "delta": [71, 73, 74, 78, 122, 123, 124, 125, 126, 127, 128, 457, 459, 460, 464, 465, 468, 469, 473, 474, 477, 478, 482, 483, 485, 486, 488, 489, 493, 494, 496, 497, 499, 508, 509, 571, 574, 645, 646, 658, 659, 660, 661, 663, 664, 666, 669, 671, 672, 674, 676, 677, 680, 682, 683, 686, 688, 689, 693, 694, 697, 699, 721, 724, 725, 726, 730, 731, 735, 736, 737, 738, 739, 741, 743, 744, 747, 748, 749, 750, 751, 753, 754, 757, 758, 759, 760, 784, 848, 1048, 1076, 1228, 1239, 1247, 1251], "fill": [71, 74, 78, 134, 139, 216, 264, 391, 392, 457, 460, 464, 465, 469, 473, 474, 478, 482, 483, 486, 489, 493, 494, 497, 499, 850, 860, 868, 875, 882, 890, 1226], "zero": [71, 78, 358, 457, 464, 465, 473, 474, 482, 483, 486, 493, 494, 499, 578, 659, 660, 663, 670, 671, 674, 676, 680, 686, 692, 697, 724, 729, 734, 1074, 1112, 1199, 1204, 1235, 1250], "contribute_to_wake_delta": [71, 73, 74, 122, 123, 457, 459, 460, 465, 468, 469, 474, 477, 478, 483, 485, 486, 488, 489, 494, 496, 497, 658, 661, 664, 669, 672, 677, 683, 689, 694, 721, 726, 731], "contribut": [71, 73, 122, 123, 126, 127, 457, 459, 465, 468, 474, 477, 483, 485, 486, 488, 494, 496, 658, 661, 664, 669, 672, 677, 683, 689, 694, 721, 726, 731, 736, 738, 741, 743, 747, 749, 751, 753, 757, 759], "specifi": [71, 73, 139, 144, 264, 457, 459, 465, 468, 474, 477, 483, 485, 486, 488, 494, 496, 547, 1228, 1239, 1244, 1252], "evaluate_result": [71, 74, 457, 460, 465, 469, 474, 478, 483, 486, 489, 494, 497], "pwake_typ": [71, 77, 457, 465, 474, 483, 486, 494], "wake_delta": [73, 74, 78, 122, 123, 124, 125, 127, 128, 457, 459, 460, 464, 465, 468, 469, 473, 474, 477, 478, 482, 483, 485, 486, 488, 489, 493, 494, 496, 497, 499, 658, 661, 664, 666, 669, 672, 677, 682, 683, 688, 689, 693, 694, 699, 721, 725, 726, 730, 731, 735, 738, 739, 743, 744, 749, 750, 753, 754, 759, 760], "ani": [73, 74, 78, 139, 150, 195, 231, 264, 269, 459, 460, 464, 468, 469, 473, 477, 478, 482, 485, 488, 489, 493, 496, 497, 499, 586, 848, 900, 901, 904, 905, 921, 922, 929, 930, 951, 952, 961, 962, 1001, 1002, 1003, 1012, 1013, 1034, 1035, 1039, 1040, 1044, 1045, 1049, 1050, 1055, 1056, 1065, 1066, 1071, 1072, 1077, 1078, 1084, 1085, 1090, 1091, 1096, 1097, 1102, 1103, 1115, 1116, 1125, 1126, 1135, 1136, 1145, 1146, 1158, 1168, 1189, 1205, 1207, 1213, 1219, 1220, 1221, 1222, 1228, 1241, 1243, 1247, 1251, 1252, 1254], "states_turbin": [74, 93, 95, 460, 469, 478, 489, 497, 514], "amb_r": [74, 460, 469, 478, 489, 497], "place": [74, 460, 469, 478, 489, 497, 791, 792, 793, 1020, 1166, 1182, 1230, 1243, 1244, 1248], "ambient": [74, 91, 92, 93, 95, 100, 124, 127, 138, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 383, 384, 391, 460, 469, 478, 489, 497, 508, 509, 512, 514, 518, 519, 666, 677, 678, 737, 738, 742, 743, 749, 752, 753, 757, 758, 759, 770, 772, 778, 784, 1224, 1227, 1228, 1235, 1239, 1240, 1246, 1247, 1248, 1250, 1252, 1253], "rotormodel": [91, 92, 93, 94, 95, 96, 97, 98, 99, 452, 465, 466, 474, 475, 484, 486, 487, 512, 518, 1225, 1228], "calc_var": [91, 92, 512, 518, 519, 540, 541], "Their": [91, 92, 519], "ad": [91, 92, 125, 126, 127, 519, 530, 682, 688, 693, 699, 725, 730, 735, 736, 738, 741, 743, 747, 749, 751, 753, 757, 759, 770, 788, 963, 1020, 1227, 1239, 1241, 1244, 1245, 1249, 1250, 1252, 1253, 1254], "automat": [91, 92, 93, 519, 763, 784, 791, 792, 793, 794, 795, 796, 1074, 1112, 1239, 1252], "n_rotor_point": [91, 97, 512, 516, 518, 523], "rotor_point_weight": [91, 99, 512, 517, 518, 524], "design_point": [91, 94, 512, 513, 518, 521], "design": [91, 94, 96, 512, 513, 515, 518, 521], "get_rotor_point": [91, 96, 512, 515, 518], "eval_rpoint_result": [91, 95, 512, 514, 518], "rpoint_result": [91, 95, 512, 514, 518], "rpoint": [91, 93, 320, 321, 498, 512, 518, 1224], "store_rpoint": 93, "store_rweight": 93, "store_amb_r": 93, "n_rpoint": [93, 95, 96, 97, 99, 514, 515, 516, 517, 523, 524], "switch": [93, 791, 792, 793, 794, 795, 796, 999, 1000, 1009, 1017, 1239, 1249], "reult": 93, "come": [93, 1242, 1249, 1252], "per": [93, 95, 326, 399, 514, 518, 519, 658, 770, 779, 781, 782, 783, 784, 786, 787, 1166, 1200, 1224, 1227, 1249], "formul": [94, 513, 521, 1249], "plane": [94, 513, 521, 789, 791, 792, 793, 794, 795, 796, 880, 1233], "z": [94, 513, 521, 791, 792, 793, 794, 795, 796], "coordin": [94, 117, 118, 120, 121, 123, 373, 377, 378, 391, 392, 513, 521, 626, 630, 631, 633, 636, 637, 638, 642, 643, 645, 648, 649, 651, 655, 656, 664, 761, 762, 791, 792, 793, 794, 795, 796, 999, 1074, 1112, 1117, 1127, 1137, 1147, 1198, 1235, 1242, 1243, 1244, 1247, 1250], "centr": [94, 373, 512, 513, 521, 540, 638, 639, 645, 646, 672, 674, 677, 680, 683, 686, 694, 697, 866, 867, 880, 881, 1217, 1218, 1228, 1233, 1235, 1239, 1242, 1244, 1245, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "radiu": [94, 513, 521, 672, 675, 677, 681, 683, 687, 689, 694, 698, 866, 867, 896, 897, 1217, 1218], "n_rotor_axi": [94, 513, 521], "n_rotor_sid": [94, 513, 521], "n_rotor_up": [94, 513, 521], "dpoint": [94, 513, 521], "copy_to_ambi": [95, 514], "either": [95, 399, 401, 426, 428, 500, 501, 514, 562, 563, 818, 919, 920, 1020, 1233, 1235, 1249, 1251], "In": [95, 514, 689, 847, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "latter": [95, 465, 514, 1198, 1239, 1244, 1248, 1249, 1252, 1254], "case": [95, 391, 392, 440, 514, 784, 806, 808, 809, 812, 817, 824, 1227, 1239, 1244, 1248, 1249, 1250, 1251, 1252, 1254], "expect": [95, 136, 137, 514, 547, 562, 1243, 1246], "have": [95, 514, 525, 526, 1074, 1112, 1218, 1228, 1239, 1244, 1246, 1247, 1248, 1249, 1250, 1253], "If": [95, 514, 578, 651, 652, 677, 678, 689, 690, 694, 695, 721, 722, 737, 742, 752, 803, 806, 808, 809, 847, 987, 1074, 1112, 1198, 1248, 1252], "copi": [95, 139, 208, 264, 514], "describ": [100, 1227, 1242, 1243, 1250], "meteorolog": [100, 1247], "speed": [100, 341, 342, 343, 348, 366, 367, 368, 376, 399, 412, 413, 419, 420, 534, 535, 567, 568, 583, 585, 589, 590, 595, 596, 601, 602, 607, 610, 613, 616, 747, 817, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 845, 1220, 1221, 1227, 1228, 1234, 1235, 1242, 1243, 1244, 1246, 1247, 1249, 1250, 1252, 1253, 1254], "direct": [100, 347, 374, 412, 413, 419, 420, 518, 519, 633, 634, 791, 792, 793, 794, 795, 796, 806, 808, 809, 848, 880, 881, 1219, 1220, 1221, 1222, 1226, 1228, 1233, 1235, 1239, 1242, 1243, 1246, 1247, 1249, 1250, 1252, 1253, 1254], "turbul": [100, 346, 372, 726, 727, 1235, 1236, 1239, 1243, 1246, 1247, 1252, 1253, 1254], "intens": [100, 346, 372, 1235, 1236, 1239, 1243, 1247, 1252, 1253, 1254], "air": [100, 344, 369, 412, 413, 419, 420, 583, 585, 589, 590, 595, 596, 601, 817, 1228, 1235, 1239, 1243, 1246], "densiti": [100, 344, 369, 412, 413, 419, 420, 583, 585, 601, 817, 1047, 1048, 1075, 1228, 1231, 1235, 1239, 1243, 1246], "mere": 105, "defin": [105, 626, 1074, 1112, 1113, 1123, 1228, 1231, 1235, 1244, 1247, 1248, 1249, 1251, 1254], "basic": [105, 136, 137, 441, 465, 558, 1226, 1228, 1244, 1246], "xy": [105, 106, 789, 791, 794, 1113, 1117, 1123, 1127, 1133, 1137, 1143, 1147, 1239, 1243, 1251, 1254], "ground": [105, 106, 356, 1235], "posit": [105, 106, 108, 139, 199, 896, 917, 1157, 1229, 1230, 1239, 1248], "2": [105, 106, 222, 312, 389, 390, 439, 457, 458, 505, 659, 660, 663, 671, 675, 676, 681, 687, 689, 698, 724, 726, 731, 763, 847, 852, 853, 854, 855, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 874, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 892, 893, 894, 895, 1074, 1112, 1117, 1127, 1137, 1147, 1198, 1217, 1218, 1228, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "appear": [105, 106, 683, 1244, 1246, 1248, 1252, 1254], "mstates_sel": 105, "boolean": [105, 106, 525, 526, 954, 955, 970, 1060, 1061, 1074, 1112, 1117, 1127, 1137, 1147], "float": [105, 106, 111, 112, 118, 139, 153, 199, 222, 264, 272, 399, 401, 412, 413, 419, 420, 534, 535, 578, 583, 585, 589, 590, 595, 596, 602, 622, 623, 638, 639, 645, 646, 651, 652, 673, 677, 678, 683, 684, 689, 690, 694, 695, 700, 715, 721, 722, 726, 727, 731, 732, 736, 737, 747, 748, 761, 762, 772, 774, 777, 778, 784, 791, 792, 793, 794, 795, 796, 806, 808, 809, 817, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 866, 867, 896, 897, 899, 900, 901, 904, 905, 909, 911, 913, 915, 917, 919, 920, 921, 922, 925, 926, 929, 930, 936, 937, 944, 951, 952, 953, 958, 959, 961, 962, 963, 964, 968, 972, 977, 982, 983, 984, 986, 988, 989, 990, 991, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1024, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1053, 1055, 1056, 1058, 1063, 1064, 1065, 1066, 1069, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1082, 1084, 1085, 1088, 1089, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1112, 1113, 1114, 1115, 1116, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1133, 1134, 1135, 1136, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1151, 1153, 1155, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1172, 1174, 1176, 1177, 1178, 1179, 1180, 1182, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1217, 1220, 1221, 1224, 1242, 1244], "diamet": [105, 106, 111, 112, 354, 385, 558, 559, 677, 761, 762, 763, 1033, 1113, 1114, 1117, 1123, 1124, 1127, 1133, 1134, 1137, 1143, 1144, 1147, 1228, 1235, 1239, 1244, 1247], "overwrit": [105, 106], "h": [105, 106, 111, 112, 136, 137, 356, 392, 586, 764, 1235, 1242, 1243, 1246, 1250], "hub": [105, 106, 111, 112, 385, 1228, 1239, 1246, 1247, 1250], "height": [105, 106, 111, 112, 113, 114, 336, 356, 373, 385, 391, 392, 399, 401, 410, 558, 559, 607, 608, 610, 611, 613, 614, 616, 617, 619, 620, 622, 624, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 1227, 1228, 1234, 1235, 1238, 1239, 1240, 1242, 1243, 1247, 1250], "turbine_model": [105, 106, 385, 442, 443, 452, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "add_model": [105, 107], "states_sel": [105, 107, 108, 324, 399, 401, 407, 410, 426, 428, 434, 437, 1224], "insert_model": [105, 108], "insert": [105, 108, 1220, 1221], "models_state_sel": 106, "can": [111, 231, 474, 500, 661, 700, 953, 1020, 1074, 1112, 1226, 1227, 1228, 1229, 1236, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "overwritten": 111, "p_nomin": [111, 112, 338, 352, 586, 784, 1235, 1239], "nomin": [111, 112, 772, 1248], "power": [111, 112, 319, 340, 360, 363, 454, 534, 535, 582, 584, 589, 590, 595, 596, 601, 602, 770, 772, 777, 778, 784, 815, 817, 1008, 1224, 1228, 1229, 1232, 1235, 1238, 1239, 1240, 1244, 1246, 1247, 1249, 1252, 1253, 1254], "kw": [111, 112, 319, 337, 534, 535, 586, 784, 1224], "p_unit": [111, 112, 319, 586, 1224, 1239], "unit": [111, 112, 263, 315, 319, 332, 335, 337, 340, 363, 534, 535, 677, 678, 777, 784, 919, 920, 1074, 1112, 1224, 1235, 1242], "w": [112, 319, 335, 376, 383, 384, 399, 419, 420, 505, 582, 583, 585, 589, 590, 595, 596, 601, 826, 828, 830, 833, 836, 837, 842, 1074, 1112, 1220, 1221, 1224, 1228, 1233, 1235, 1239, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "mw": [112, 136, 137, 315, 319, 1224, 1242, 1246, 1248, 1252, 1253], "gw": [112, 263, 319, 1224, 1240], "verticalprofil": [113, 114, 115, 116, 419, 420, 426, 428, 607, 610, 613, 616, 619, 622, 1225, 1228], "vertic": [113, 789, 792, 795, 796, 1225, 1228, 1232, 1239, 1246, 1254], "profil": [113, 114, 115, 116, 419, 420, 428, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 834, 838, 839, 843, 1225, 1228, 1234, 1239, 1242, 1246], "input_var": [113, 115, 529, 530, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 625, 740, 746, 756], "profile_typ": [113, 116, 607, 610, 613, 616, 619, 622], "translat": [117, 986, 988, 989, 1018, 1028, 1029, 1157, 1163, 1164, 1166, 1176, 1177, 1182, 1194, 1195, 1247, 1254], "global": [117, 1242], "also": [117, 231, 763, 1239, 1240, 1242, 1244, 1247, 1248, 1249, 1252, 1254], "respons": [117, 1228, 1247, 1249], "calc_ord": [117, 119, 626, 628, 633, 635, 638, 641, 645, 647, 651, 653], "get_wake_coo": [117, 121, 626, 631, 633, 637, 638, 643, 645, 649, 651, 656], "get_centreline_point": [117, 120, 626, 630, 633, 636, 638, 642, 645, 648, 651, 655], "along": [117, 118, 120, 518, 519, 626, 630, 633, 636, 638, 642, 645, 648, 651, 655, 1228, 1239, 1247, 1250, 1254], "centrelin": [117, 118, 120, 626, 630, 633, 636, 638, 642, 645, 648, 651, 655, 731, 732, 1239, 1247], "calc_centreline_integr": [117, 118, 626, 633, 638, 645, 651], "integr": [117, 118, 139, 222, 264, 312, 518, 519, 626, 633, 638, 645, 651, 731, 732, 1236, 1239], "dx": [118, 731, 732, 1245], "ipar": [118, 401, 563, 731, 732], "upper": [118, 1062], "bound": [118, 391, 392, 896, 917, 919, 926, 1032, 1037, 1042, 1047, 1053, 1058, 1062, 1063, 1069], "step": [118, 139, 250, 264, 389, 390, 518, 519, 638, 639, 731, 732, 784, 817, 1239, 1242, 1243, 1245, 1246, 1247, 1251, 1253], "interpol": [118, 401, 529, 530, 563, 582, 584, 589, 595, 601, 602, 638, 639, 645, 646, 1228, 1239], "n_var": [118, 963], "wake_coo": [121, 123, 631, 637, 643, 649, 656, 664], "init_wake_delta": [122, 125, 658, 661, 669, 672, 677, 682, 683, 688, 689, 693, 694, 699, 721, 725, 726, 730, 731, 735], "storag": [122, 125, 638, 639, 658, 661, 669, 672, 677, 682, 683, 688, 689, 693, 694, 699, 721, 725, 726, 730, 731, 735], "finalize_wake_delta": [122, 124, 658, 661, 666, 669, 672, 677, 683, 689, 694, 721, 726, 731], "amb_result": [122, 124, 127, 658, 661, 666, 669, 672, 677, 683, 689, 694, 721, 726, 731, 738, 743, 749, 753, 759], "fly": [123, 124, 125, 664, 666, 682, 688, 693, 699, 725, 730, 735], "ob": [123, 124, 664, 666], "appli": [123, 124, 125, 127, 128, 664, 666, 682, 688, 693, 699, 725, 730, 735, 738, 739, 743, 744, 749, 750, 753, 754, 759, 760, 777, 944, 951, 952, 986, 1018, 1020, 1074, 1112, 1113, 1115, 1116, 1123, 1125, 1126, 1133, 1135, 1136, 1143, 1145, 1146, 1157, 1166, 1182, 1228, 1244, 1254], "afterward": [124, 666], "wakesuperposit": [126, 127, 128, 452, 661, 736, 741, 747, 751, 757, 1225, 1228], "superposit": [126, 452, 658, 661, 662, 669, 672, 673, 677, 678, 683, 684, 689, 690, 694, 695, 721, 722, 726, 727, 731, 732, 747, 757, 1225, 1228, 1239, 1245, 1247, 1253], "note": [126, 800, 1166, 1228, 1242, 1243, 1244, 1246, 1249, 1250, 1253, 1254], "matter": [126, 1248], "other": [126, 412, 810, 944, 982, 983, 986, 990, 991, 1018, 1157, 1166, 1178, 1179, 1182, 1227, 1232, 1239, 1241, 1243, 1245, 1247, 1248, 1249, 1254], "calc_wakes_plus_wak": [126, 128, 736, 739, 741, 744, 747, 750, 751, 754, 757, 760], "calc_final_wake_delta": [126, 127, 736, 738, 741, 743, 747, 749, 751, 753, 757, 759], "final_wake_delta": [127, 738, 743, 749, 753, 759], "simpl": [127, 738, 743, 749, 753, 759, 1239, 1243, 1248, 1250, 1254], "plu": [127, 738, 743, 749, 753, 759, 1198, 1216], "sel_sp": [128, 739, 744, 750, 754, 760], "wake_model_result": [128, 739, 744, 750, 754, 760], "origin": [128, 139, 199, 739, 744, 750, 754, 760, 889, 966, 989, 992, 993, 1029, 1074, 1112, 1164, 1177, 1195, 1240, 1251], "n_sel_sp": [128, 739, 744, 750, 754, 760], "wdelta": [128, 659, 660, 663, 671, 676, 724, 739, 744, 750, 754, 760], "boundari": [129, 130, 763, 849, 850, 854, 856, 858, 860, 864, 866, 868, 871, 873, 875, 878, 880, 882, 886, 888, 890, 894, 896, 897, 917, 918, 1032, 1033, 1034, 1035, 1036, 1113, 1114, 1117, 1123, 1124, 1127, 1133, 1134, 1137, 1143, 1144, 1147, 1229, 1231, 1242, 1244], "geom2d": [129, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 1113, 1114, 1123, 1124, 1133, 1134, 1143, 1144, 1216, 1244], "areageometri": [129, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 866, 873, 880, 888, 889, 896, 897, 1113, 1114, 1123, 1124, 1133, 1134, 1143, 1144, 1216, 1233], "wind_farm": [129, 130], "add_turbin": [129, 131, 385, 1254], "turbine_nam": [129, 133, 801, 803], "staticdata": [134, 135, 1226, 1242], "static": [134, 583, 585, 589, 590, 595, 596, 601, 602, 818, 820, 821, 856, 857, 1226, 1233, 1239, 1240, 1243, 1244, 1246, 1249, 1250, 1252, 1253], "directori": [134, 1226], "add_data_packag": [134, 818, 820], "context": [134, 818, 820, 821, 822, 823, 824, 825, 1244], "packag": [134, 818, 820, 821, 1223, 1226, 1227, 1228, 1229, 1233, 1236, 1239, 1240, 1241, 1242, 1244, 1245, 1247, 1250, 1254], "file_sfx": [134, 818, 820], "locat": [134, 512, 818, 820, 821, 1220, 1221, 1241, 1242, 1249, 1254], "add_data_package_fil": [134, 818, 821], "file_nam": [134, 136, 804, 809, 813, 818, 821, 824, 1226], "add_fil": [134, 818, 822, 823], "file_path": [134, 387, 388, 761, 766, 767, 768, 769, 770, 789, 797, 800, 801, 803, 804, 810, 813, 815, 818, 822, 823, 826, 831, 832, 1227], "path": [134, 136, 137, 387, 388, 399, 401, 426, 428, 440, 454, 546, 547, 562, 563, 583, 585, 589, 590, 595, 596, 601, 602, 800, 803, 809, 818, 822, 823, 824, 831, 832, 873, 1197, 1198, 1215, 1233, 1240, 1252], "get_file_path": [134, 818, 824, 1242], "check_raw": [134, 818, 824], "toc": [134, 818, 825, 1242], "content": [134, 452, 456, 818, 825, 1252], "data_book": [135, 818, 819], "parse_pct_file_nam": [136, 1226], "pars": [136, 137, 391, 392, 944, 979, 986, 1018, 1157, 1166, 1182, 1226], "format": [136, 137, 391, 392, 399, 765, 800, 826, 832, 1227, 1242, 1243], "csv": [136, 137, 385, 386, 399, 761, 766, 801, 803, 826, 827, 829, 830, 1215, 1227, 1233, 1239, 1244, 1246, 1249, 1250, 1251, 1252, 1253], "pathlib": [136, 137, 818, 824, 1242], "parsed_data": [136, 137], "parse_pct_two_fil": [137, 1226], "file_name_a": [137, 1226], "file_name_b": [137, 1226], "second": [137, 342, 367, 1235], "constant": [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 689, 833, 835, 837, 841, 842, 845, 1223, 1235, 1239, 1243, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "amb_rpoint_result": [138, 1224], "amb_rpoint_r": [138, 1224], "dtype": [139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 1224, 1244], "__hash__": [139, 159, 264, 276], "hash": [139, 159, 264, 276], "__str__": [139, 190, 264, 306, 896, 898, 917, 919, 926, 937, 944, 986, 999, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "__lt__": [139, 164, 264, 282], "__le__": [139, 162, 264, 280], "__eq__": [139, 152, 264, 271], "__ne__": [139, 167, 264, 285], "__gt__": [139, 158, 264, 275], "__ge__": [139, 156, 264, 274], "__add__": [139, 142, 264, 266], "__radd__": [139, 173, 264, 291], "__sub__": [139, 191, 264, 307], "__rsub__": [139, 186, 264, 303], "__mul__": [139, 166, 264, 284], "__rmul__": [139, 181, 264, 298], "__mod__": [139, 165, 264, 283], "__rmod__": [139, 180, 264, 297], "__divmod__": [139, 151, 264, 270], "divmod": [139, 151, 175, 264, 270, 293], "__rdivmod__": [139, 175, 264, 293], "__pow__": [139, 172, 264, 290], "mod": [139, 172, 183, 264, 290, 300], "pow": [139, 172, 183, 264, 290, 300], "__rpow__": [139, 183, 264, 300], "__neg__": [139, 168, 264, 286], "__pos__": [139, 171, 264, 289], "__abs__": [139, 141, 264, 265], "ab": [139, 141, 264, 265], "__bool__": [139, 149, 264, 268], "__int__": [139, 160, 264, 278], "__float__": [139, 153, 264, 272], "__floordiv__": [139, 154, 264, 273], "__rfloordiv__": [139, 178, 264, 295], "__truediv__": [139, 192, 264, 308], "__rtruediv__": [139, 187, 264, 304], "see": [139, 140, 169, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 216, 219, 220, 223, 224, 226, 227, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 287, 1053, 1054, 1058, 1059, 1074, 1109, 1110, 1112, 1206, 1208, 1209, 1239, 1244, 1246, 1247, 1253], "help": [139, 169, 264, 287, 826, 1053, 1054, 1058, 1059, 1109, 1110, 1206, 1208, 1209, 1233], "accur": [139, 169, 264, 287, 1053, 1054, 1058, 1059, 1109, 1110, 1206, 1208, 1209], "signatur": [139, 169, 264, 287, 1053, 1054, 1058, 1059, 1109, 1110, 1206, 1208, 1209], "as_integer_ratio": [139, 199], "pair": [139, 199, 1074, 1112], "whose": [139, 199, 1229, 1242], "ratio": [139, 199], "equal": [139, 199, 338, 352, 355, 1235], "denomin": [139, 199, 264, 311], "rais": [139, 199, 391, 392, 824], "overflowerror": [139, 199], "infin": [139, 199], "valueerror": [139, 199, 1074, 1112], "is_integ": [139, 222, 264, 312], "finit": [139, 222, 264, 312], "otherwis": [139, 222, 824, 1246], "item": [139, 150, 223, 264, 269], "parametr": [139, 150, 264, 269], "wrapper": [139, 150, 264, 269, 442, 1228], "around": [139, 150, 264, 269], "__invert__": [139, 161, 264, 279], "__lshift__": [139, 163, 264, 281], "__rlshift__": [139, 179, 264, 296], "__rshift__": [139, 185, 264, 302], "__rrshift__": [139, 184, 264, 301], "__and__": [139, 143, 264, 267], "__rand__": [139, 174, 264, 292], "__xor__": [139, 193, 264, 309], "__rxor__": [139, 188, 264, 305], "__or__": [139, 170, 264, 288], "__ror__": [139, 182, 264, 299], "tolist": [139, 256, 264], "method": [139, 150, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 216, 219, 220, 223, 224, 226, 227, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 269, 387, 530, 757, 758, 831, 832], "ident": [139, 140, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 216, 219, 220, 223, 224, 226, 227, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 1243, 1254], "attribut": [139, 140, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 216, 219, 220, 223, 224, 226, 227, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 1242], "itemset": [139, 224, 264], "tobyt": [139, 254, 264], "tofil": [139, 255, 264], "tostr": [139, 257, 264], "byteswap": [139, 202, 264], "astyp": [139, 200, 264], "getfield": [139, 220, 264], "setfield": [139, 243, 264], "resiz": [139, 240, 264], "__array__": [139, 144, 264], "sc": [139, 144, 148, 264], "__array_wrap__": [139, 148, 264], "__sizeof__": [139, 189, 264], "byte": [139, 189, 225, 229, 231, 250, 264], "__reduce__": [139, 176, 264], "helper": [139, 176, 264, 797, 826, 831, 832, 992, 1223, 1229, 1233], "pickl": [139, 176, 264], "dump": [139, 214, 215, 264], "transpos": [139, 259, 264], "put": [139, 235, 264], "repeat": [139, 238, 264, 1020], "choos": [139, 203, 264, 1074, 1112, 1241, 1246, 1248, 1253], "sort": [139, 247, 264], "argsort": [139, 198, 264], "searchsort": [139, 242, 264], "argmax": [139, 196, 264], "argmin": [139, 197, 264], "reshap": [139, 239, 264], "squeez": [139, 248, 264], "view": [139, 218, 261, 264], "swapax": [139, 252, 264], "max": [139, 226, 264, 439, 547, 757, 758, 763, 785, 786, 787, 791, 792, 793, 794, 795, 796, 999, 1000, 1009, 1017, 1018, 1020, 1062, 1088, 1089, 1231, 1239, 1245, 1249], "min": [139, 228, 264, 439, 547, 763, 785, 786, 787, 791, 792, 793, 794, 795, 796, 999, 1000, 1009, 1017, 1018, 1020, 1062, 1088, 1089, 1231, 1239, 1249, 1251], "ptp": [139, 234, 264], "trace": [139, 258, 264, 1251], "diagon": [139, 212, 264], "clip": [139, 204, 264], "conj": [139, 206, 264], "conjug": [139, 207, 264], "nonzero": [139, 232, 264], "std": [139, 249, 264], "sum": [139, 251, 264, 763, 770, 776, 781, 783, 785, 786, 787, 788, 944, 974, 975, 986, 999, 1000, 1009, 1017, 1018, 1074, 1112, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1239, 1252], "cumsum": [139, 210, 264], "prod": [139, 233, 264], "cumprod": [139, 209, 264], "compress": [139, 205, 264], "flatten": [139, 219, 264], "ravel": [139, 236, 264], "round": [139, 241, 264], "__format__": [139, 155, 264], "formatt": [139, 155, 264], "setflag": [139, 244, 264], "newbyteord": [139, 231, 264], "new_ord": [139, 231, 264], "differ": [139, 231, 264, 457, 474, 483, 1228, 1236, 1239, 1242, 1243, 1249], "ndim": [139, 230, 264], "stride": [139, 250, 264], "pointer": [139, 211, 264], "items": [139, 225, 264], "length": [139, 225, 229, 264, 361, 382, 389, 439, 457, 458, 638, 639, 645, 646, 833, 834, 835, 837, 838, 839, 841, 842, 843, 845, 992, 1229, 1235, 1239, 1242], "element": [139, 225, 246, 264, 518, 519, 1074, 1112], "gentyp": [139, 246, 264], "nbyte": [139, 229, 264], "descriptor": [139, 213, 264], "real": [139, 237, 264, 847, 1233], "imag": [139, 221, 264, 763, 791, 792, 793, 794, 795, 796, 849, 850, 856, 858, 860, 866, 868, 873, 875, 880, 882, 888, 890], "imaginari": [139, 221, 264], "flat": [139, 218, 264], "t": [139, 140, 264, 371, 383, 384, 385, 567, 568, 645, 646, 788, 826, 828, 1074, 1112, 1235, 1251], "__array_interface__": [139, 145, 264], "protocol": [139, 145, 147, 264], "python": [139, 145, 150, 264, 269, 1074, 1112, 1239, 1240, 1247], "side": [139, 145, 264, 788], "__array_struct__": [139, 147, 264], "struct": [139, 147, 264], "__array_priority__": [139, 146, 264], "prioriti": [139, 146, 264], "pleas": [140, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 216, 219, 220, 223, 224, 226, 227, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 1237, 1240], "version": [150, 222, 269, 312, 1074, 1112, 1239, 1241], "22": [150, 222, 269, 312, 1242, 1244, 1248, 1252], "alia": [150, 269], "genericalia": [150, 269], "import": [150, 269, 1074, 1112, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "signedinteg": [150, 264, 269, 1224], "avail": [150, 269, 1228, 1236, 1238, 1241, 1242, 1252], "9": [150, 269, 1074, 1112, 1239, 1241, 1242, 1244, 1245, 1248, 1249, 1250, 1252, 1254], "later": [150, 269, 1244, 1248, 1251, 1252], "pep": [150, 269], "585": [150, 269], "hint": [150, 269], "gener": [150, 269, 626, 731, 789, 791, 792, 793, 794, 795, 796, 905, 962, 1230, 1236, 1239, 1242, 1244], "standard": [150, 269, 770, 780, 1074, 1112, 1250], "doubl": [199, 222, 1239], "10": [199, 651, 677, 689, 700, 721, 726, 731, 1237, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "25": [199, 678, 689, 690, 726, 727, 731, 732, 1242, 1244, 1246, 1248, 1250, 1252], "4": [199, 677, 1074, 1112, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "chang": [231, 546, 547, 1228, 1239, 1240, 1241, 1242, 1246], "made": 231, "field": [231, 747, 770, 788, 1243, 1247, 1250, 1253, 1254], "follow": [231, 399, 638, 683, 1074, 1112, 1228, 1238, 1239, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254], "swap": 231, "opposit": 231, "endian": 231, "littl": 231, "big": 231, "nativ": 231, "ignor": 231, "forc": [231, 567, 1228, 1241], "abov": [231, 792, 793, 795, 796, 1240, 1244, 1248, 1249, 1252, 1254], "new_dtyp": 231, "giga": [263, 1224], "watt": [263, 315, 319, 332, 335, 337, 784, 1224], "ityp": [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 1224], "__index__": [264, 277], "convert": [264, 277, 1074, 1112, 1198, 1250], "suitabl": [264, 277], "bit_count": [264, 310], "bit": [264, 310], "absolut": [264, 310, 349, 379, 571, 574, 1228, 1235, 1239, 1254], "analog": [264, 310], "builtin": [264, 310], "popcount": [264, 310], "c": [264, 310, 1074, 1112, 1241, 1254], "numer": [264, 313, 896, 917, 919, 926, 933, 937, 941, 944, 976, 986, 999, 1008, 1010, 1016, 1018, 1157, 1166, 1182], "itself": [264, 313], "int64": [310, 312, 1244, 1250], "127": [310, 1252], "7": [310, 1074, 1112, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "uint32": 312, "5": [312, 677, 727, 1074, 1112, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "kappa": [314, 833, 835, 837, 841, 842, 845, 1224, 1234], "41": [314, 833, 835, 837, 841, 842, 845, 1224, 1234, 1244], "van": [314, 833, 835, 837, 841, 842, 845, 1224], "karman": [314, 833, 835, 837, 841, 842, 845, 1224], "mega": [315, 1224], "pop": [318, 953, 963, 989, 1029, 1164, 1177, 1195, 1224], "popul": [318, 896, 901, 905, 917, 919, 922, 926, 930, 937, 944, 952, 953, 955, 959, 962, 963, 986, 992, 993, 999, 1002, 1008, 1010, 1013, 1016, 1018, 1032, 1035, 1037, 1040, 1042, 1045, 1047, 1050, 1053, 1056, 1058, 1061, 1063, 1066, 1069, 1072, 1075, 1078, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 1103, 1106, 1109, 1113, 1116, 1123, 1126, 1133, 1136, 1143, 1146, 1157, 1166, 1182, 1224, 1229, 1242, 1244], "1000000000": [319, 1224], "1000000": [319, 1224], "tw": [319, 332, 1224], "1000000000000": [319, 1224], "factor": [319, 359, 534, 535, 562, 563, 677, 678, 689, 690, 726, 727, 731, 732, 834, 838, 839, 843, 999, 1000, 1009, 1017, 1048, 1076, 1224, 1228, 1234, 1235, 1239, 1254], "rel": [319, 350, 380, 1224, 1235], "rotor_point": [320, 321, 1224, 1245], "rweight": [322, 1224], "rotor_weight": [322, 1224], "state_source_turbin": [326, 1224], "tmodel": [328, 1224], "tmodel_sel": [329, 1224], "tname": [330, 1224, 1244, 1249, 1250], "terra": [332, 1224], "valid": [333, 589, 590, 595, 596, 689, 1010, 1011, 1069, 1070, 1071, 1072, 1073, 1113, 1114, 1117, 1123, 1127, 1133, 1137, 1143, 1147, 1224, 1231, 1240, 1252], "xyh": [336, 761, 767, 769, 1235], "vector": [336, 373, 389, 390, 791, 792, 793, 880, 881, 953, 963, 992, 1074, 1112, 1219, 1220, 1221, 1222, 1229, 1233, 1235, 1240, 1244, 1252, 1253], "kilo": [337, 1224], "amb_cap": [338, 383, 384, 826, 828, 1235, 1252], "capac": [338, 352, 770, 772, 1235, 1239, 1252], "amb_p": [338, 340, 355, 383, 384, 826, 828, 1235, 1243, 1244, 1248, 1250, 1252], "amb_ct": [339, 383, 384, 826, 828, 1235, 1244, 1250], "thrust": [339, 353, 567, 568, 1228, 1235, 1239, 1240, 1247, 1248, 1254], "coeffici": [339, 353, 847, 1235, 1247, 1248], "user": [340, 363, 1074, 1112, 1223, 1227, 1235, 1239, 1247], "amb_rew": [341, 383, 384, 813, 814, 826, 828, 1235, 1243, 1244, 1248, 1250, 1251, 1252], "amb_rews2": [342, 383, 384, 826, 828, 1235, 1244, 1250], "moment": [342, 343, 367, 368, 1235], "amb_rews3": [343, 383, 384, 826, 828, 1235, 1244, 1250], "third": [343, 368, 1235], "amb_rho": [344, 383, 384, 826, 828, 1235, 1244, 1250], "kg": [344, 369, 1235], "m3": [344, 369, 1235], "amb_t": [345, 383, 384, 826, 828, 1235], "temperatur": [345, 371, 1235], "kelvin": [345, 371, 1235], "amb_ti": [346, 383, 384, 826, 828, 1235, 1245, 1250], "amb_wd": [347, 383, 384, 547, 804, 806, 808, 809, 813, 826, 828, 1235, 1250], "degre": [347, 349, 350, 374, 379, 380, 847, 1220, 1221, 1233, 1235, 1254], "amb_w": [348, 383, 384, 826, 828, 1235, 1242, 1244, 1246, 1249, 1250, 1252, 1253], "amb_yaw": [349, 383, 384, 1235], "yaw": [349, 350, 379, 380, 383, 384, 571, 574, 590, 596, 602, 651, 721, 1228, 1235, 1238, 1239, 1240, 1244, 1245, 1250], "angl": [349, 350, 379, 380, 683, 684, 716, 1182, 1183, 1235, 1243, 1251, 1254], "amb_yawm": [350, 383, 384, 1235], "amb_yld": [351, 383, 384, 826, 828, 1235, 1252], "yield": [351, 381, 770, 777, 784, 1235, 1237, 1239, 1240, 1246, 1247, 1252, 1253], "gwh": [351, 381, 784, 1235, 1246, 1252, 1253], "cap": [352, 383, 384, 826, 828, 1235, 1252], "ct": [353, 383, 384, 454, 534, 567, 568, 582, 584, 585, 589, 590, 595, 596, 601, 602, 652, 673, 674, 675, 677, 678, 680, 681, 684, 686, 687, 689, 690, 695, 697, 698, 700, 715, 722, 726, 727, 731, 732, 815, 817, 826, 828, 1228, 1232, 1235, 1239, 1242, 1248, 1250, 1254], "eff": [355, 774, 826, 828, 1235, 1252], "effici": [355, 770, 773, 774, 1074, 1112, 1235, 1239, 1246, 1248, 1252, 1253], "over": [356, 731, 770, 775, 776, 806, 808, 809, 847, 1074, 1112, 1235, 1236, 1239, 1244, 1253], "k": [357, 358, 359, 577, 578, 651, 652, 677, 678, 683, 684, 689, 690, 694, 695, 716, 721, 722, 1228, 1235, 1239, 1245, 1252, 1253], "growth": [357, 651, 652, 677, 678, 683, 684, 689, 690, 694, 695, 721, 722, 726, 727, 731, 732, 1235, 1239, 1253], "kb": [358, 359, 577, 578, 1235, 1239], "kti": [358, 359, 577, 578, 579, 580, 581, 1228, 1235, 1239, 1245, 1252], "ti": [358, 359, 372, 383, 384, 412, 413, 419, 420, 505, 577, 578, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 731, 732, 757, 817, 826, 828, 1016, 1228, 1229, 1235, 1239, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "between": [359, 1064, 1074, 1112, 1113, 1114, 1123, 1124, 1133, 1134, 1143, 1144, 1167, 1217, 1218, 1235, 1243, 1244, 1246], "max_p": [360, 534, 539, 1235, 1248, 1249], "maxp": [360, 1235, 1248, 1249], "maxim": [360, 518, 519, 534, 638, 639, 645, 646, 652, 673, 678, 684, 689, 690, 695, 700, 715, 722, 726, 727, 731, 732, 817, 849, 852, 856, 858, 862, 866, 869, 873, 876, 880, 884, 888, 892, 937, 944, 967, 968, 969, 970, 986, 999, 1000, 1005, 1008, 1009, 1010, 1014, 1016, 1017, 1018, 1024, 1025, 1042, 1043, 1075, 1080, 1082, 1086, 1088, 1092, 1094, 1098, 1100, 1104, 1106, 1108, 1109, 1111, 1113, 1120, 1123, 1130, 1133, 1134, 1140, 1143, 1144, 1151, 1152, 1157, 1161, 1166, 1167, 1172, 1173, 1182, 1192, 1228, 1229, 1231, 1235, 1239, 1244, 1248], "derat": [360, 534, 815, 1232, 1235, 1239, 1248, 1249], "boost": [360, 534, 815, 1232, 1235, 1239, 1248, 1249], "mol": [361, 439, 616, 840, 841, 844, 845, 1234, 1235, 1242], "monin": [361, 840, 841, 844, 845, 1235, 1242], "ubukhof": [361, 1235], "pa_alpha": [364, 1235], "alpha": [364, 651, 652, 700, 715, 721, 722, 1235, 1244], "porteagel": [364, 365, 721, 1235, 1236, 1239], "pa_beta": [365, 1235], "beta": [365, 651, 652, 700, 715, 722, 1235], "rew": [366, 383, 384, 826, 828, 1235, 1243, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "rews2": [367, 383, 384, 567, 568, 590, 596, 602, 826, 828, 1235], "rews3": [368, 383, 384, 534, 535, 539, 590, 596, 602, 826, 828, 1235], "rho": [369, 383, 384, 412, 413, 419, 420, 582, 583, 585, 589, 590, 595, 596, 817, 826, 828, 1235, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "shear": [370, 619, 836, 1228, 1233, 1235, 1239], "expon": [370, 590, 596, 602, 619, 836, 1228, 1235, 1239, 1254], "txyh": [373, 1235], "wd": [374, 383, 384, 412, 413, 419, 420, 547, 633, 634, 826, 828, 1219, 1220, 1221, 1222, 1233, 1235, 1239, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "yawm": [380, 383, 384, 571, 574, 651, 716, 721, 1228, 1235, 1254], "yld": [381, 383, 384, 826, 828, 1235, 1252], "z0": [382, 833, 834, 835, 837, 838, 839, 841, 842, 843, 845, 1234, 1235, 1242], "rough": [382, 833, 834, 835, 837, 838, 839, 841, 842, 843, 845, 1235], "amb2var": [383, 1235], "map": [383, 384, 391, 392, 399, 401, 426, 428, 439, 457, 458, 459, 460, 461, 462, 463, 464, 500, 501, 529, 530, 547, 800, 810, 812, 911, 912, 947, 948, 1228, 1232, 1235, 1239, 1245, 1246, 1249], "var2amb": [384, 1235], "farm_layout": [385, 386, 387, 388, 389, 390, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253], "add_from_csv": [385, 386, 1227], "data_sourc": [385, 386, 391, 392, 399, 401, 410, 426, 428, 437, 500, 501, 529, 530, 546, 547, 562, 563, 582, 583, 589, 590, 1227, 1242, 1243, 1244, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "col_index": 385, "col_nam": 385, "col_x": 385, "col_i": 385, "col_h": 385, "col_d": 385, "col_id": 385, "cols_models_pr": 385, "cols_models_post": 385, "turbine_base_nam": 385, "turbine_id": 385, "turbine_base_name_count_shift": 385, "turbine_paramet": [385, 388, 389, 390], "panda": [385, 386, 399, 401, 407, 426, 428, 434, 439, 500, 501, 529, 530, 546, 547, 562, 563, 582, 583, 584, 585, 589, 590, 595, 596, 601, 602, 761, 770, 777, 779, 781, 782, 783, 784, 786, 787, 789, 797, 800, 801, 802, 804, 806, 810, 813, 815, 826, 831, 832, 1227, 1228, 1233, 1239, 1248, 1249, 1250, 1252, 1254], "datafram": [385, 386, 399, 401, 426, 428, 439, 500, 501, 529, 530, 546, 547, 562, 563, 582, 583, 584, 585, 589, 590, 595, 596, 601, 602, 777, 779, 781, 782, 783, 784, 786, 787, 800, 801, 802, 804, 806, 813, 831, 832, 1227, 1228, 1239, 1248, 1249, 1250, 1252, 1254], "column": [385, 399, 401, 426, 428, 439, 500, 501, 529, 530, 547, 562, 563, 583, 585, 589, 590, 595, 596, 601, 800, 803, 826, 832, 847, 1074, 1112, 1198, 1242, 1246, 1248, 1249, 1251, 1252], "enter": 385, "forward": [385, 387, 388, 389, 390, 445, 763, 768, 791, 792, 793, 794, 795, 796, 800, 831, 832], "add_from_df": [386, 1227, 1239], "add_from_fil": [387, 1227, 1242, 1252], "infer": [387, 388, 1250], "suffix": [387, 391, 392], "add_from_json": [388, 1227], "set_farm_nam": 388, "turbim": [388, 1227], "json": [388, 765, 1227], "add_grid": [389, 1227, 1243, 1251, 1253], "xy_bas": [389, 390, 1227, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1253], "step_vector": [389, 1227, 1243, 1251, 1253], "regular": [389, 391, 518, 1133, 1143, 1166, 1182, 1227, 1228, 1230, 1231, 1239, 1251, 1253], "grid": [389, 391, 474, 483, 518, 1048, 1076, 1082, 1123, 1124, 1133, 1143, 1144, 1166, 1167, 1182, 1227, 1228, 1230, 1231, 1239, 1243, 1253], "add_row": [390, 1227, 1244, 1246, 1248, 1249, 1250], "xy_step": [390, 1227, 1244, 1246, 1248, 1249, 1250], "row": [390, 562, 563, 1074, 1112, 1143, 1144, 1166, 1167, 1227, 1238, 1240, 1246, 1248, 1251, 1252], "fielddatanc": [391, 392, 393, 394, 395, 396, 397, 398, 1227, 1239, 1243], "heterogen": [391, 1227, 1238, 1240, 1246], "horizont": [391, 789, 791, 794, 1227, 1232, 1239, 1242, 1243, 1246, 1250], "netcdf": [391, 1227, 1243], "pattern": [391, 392, 1239, 1248], "end": [391, 392, 788, 820, 826, 831, 832], "nc": [391, 392, 826, 827, 829, 830, 1239, 1243], "One": [391, 392, 1243], "mani": [391, 392, 1239, 1240], "ovar": [391, 399, 426, 500, 562], "var2ncvar": [391, 392, 1243], "fixed_var": [391, 392, 399, 401, 426, 428, 437, 1242, 1243, 1244, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "uniform": [391, 392, 399, 401, 419, 426, 428, 500, 501, 578, 622, 645, 1018, 1020, 1227, 1228, 1239, 1242, 1250, 1251, 1252, 1254], "read": [391, 392, 399, 401, 426, 428, 440, 501, 530, 547, 563, 583, 585, 589, 590, 595, 596, 601, 602, 826, 831, 1197, 1198, 1215, 1216, 1227, 1233, 1239, 1243, 1252], "states_coord": [391, 392, 1243], "x_coord": [391, 392, 1243], "y_coord": [391, 392, 1243], "h_coord": [391, 392, 1243], "pre_load": [391, 392, 1243], "weight_ncvar": [391, 392], "bounds_error": [391, 392, 1243], "exceed": [391, 392, 439], "fill_valu": [391, 392], "time_format": [391, 392, 1243], "datetim": [391, 392], "string": [391, 392, 456, 798, 800, 806, 808, 809, 896, 898, 917, 919, 926, 937, 944, 986, 999, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1074, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1112, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "sel": [391, 392, 1018, 1020], "xr": [391, 392], "utmx": [392, 1243], "utmi": [392, 1243], "d_": 392, "multiheightst": [399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 1227, 1239], "multipl": [399, 658, 1227, 1228, 1239, 1240, 1249], "taken": [399, 1250], "exampl": [399, 817, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "50": [399, 439, 1242, 1244, 1245, 1246, 1249, 1253], "60": [399, 1244], "100": [399, 539, 638, 639, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "var2col": [399, 401, 426, 428, 437, 439, 500, 501, 1242, 1244, 1246, 1249, 1251, 1252, 1253], "fix": [399, 401, 412, 426, 428, 1037, 1094, 1123, 1227, 1231, 1239], "pd_read_par": [399, 401, 428, 501], "slice": [399, 401, 407, 426, 428, 434, 474, 1228, 1250], "rang": [399, 401, 407, 426, 428, 434, 546, 547, 1228, 1239, 1248, 1249, 1254], "states_loc": [399, 401, 407, 410, 426, 428, 434, 437, 1246], "loc": [399, 401, 407, 426, 428, 434, 1248, 1249], "rdict": [399, 400, 410, 411, 426, 427, 437, 438], "index_col": [399, 400, 410, 411, 426, 427, 437, 438], "scipi": [401, 563, 601, 602, 1074, 1112], "interp1d": 401, "multiheighttimeseri": [410, 411, 1227, 1239, 1242, 1246], "multi": [410, 661, 1227, 1238, 1239, 1240], "timeseri": [410, 437, 438, 645, 646, 784, 1227, 1228, 1238, 1239, 1240, 1246, 1251], "parse_d": [410, 411, 437, 438], "scanw": [412, 413, 414, 415, 416, 417, 418, 1227], "ws_list": [412, 413], "singlestatest": [419, 420, 421, 422, 423, 424, 425, 1227, 1239, 1250], "profdict": [419, 426], "profdata": [419, 420], "statest": [426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 1227, 1242, 1244, 1248, 1249, 1253, 1254], "readabl": [426, 1227, 1249, 1252], "rpar": [426, 589], "create_random_abl_st": [439, 1227], "cols_minmax": 439, "mol_abs_rang": 439, "5000": [439, 1244, 1248, 1251, 1252], "normal": [439, 508, 509, 633, 763, 1074, 1112, 1228, 1242, 1248, 1253], "random": [439, 1227, 1242], "abl": [439, 607, 610, 613, 616, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 1227, 1228, 1239], "neutral": [439, 607, 616, 833, 834, 835, 1228, 1233], "stratif": 439, "windio": [440, 1239], "read_cas": [440, 1227], "case_yaml": [440, 1227], "site_par": [440, 1227], "farm_par": 440, "ana_par": 440, "yaml": [440, 1227, 1239], "read_sit": 440, "read_farm": 440, "read_analys": 440, "farm_control": [441, 452, 1245], "basicfarmcontrol": [441, 1228, 1245], "control": [441, 452, 1228], "condit": [441, 546, 896, 897, 1217, 1228, 1239, 1244, 1247, 1249, 1250, 1254], "farm_model": [442, 443, 444, 445, 446, 447, 448, 452, 1245], "turbine2farmmodel": [442, 443, 444, 445, 446, 447, 448, 1228, 1245], "promot": [442, 1228], "simpli": [442, 508, 1228, 1241, 1242, 1245, 1249, 1253], "init": [445, 820, 821, 987, 1018, 1020, 1023, 1160, 1171, 1191], "slightli": [449, 1233, 1249], "enhanc": [449, 1233], "pass": [451, 1074, 1112, 1253], "kind": [452, 1226, 1243, 1254], "rotor_model": [452, 465, 466, 474, 475, 484, 486, 487, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 1243, 1244, 1245, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "turbine_ord": 452, "turbineord": 452, "partial_wak": [452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 1245], "partialwakemodel": 452, "wake_superposit": [452, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 1245], "pct_file": [452, 454], "print_toc": [452, 456, 1245], "curv": [454, 582, 583, 585, 589, 595, 596, 601, 602, 815, 817, 1228, 1232, 1239, 1240, 1248], "creation": [454, 804, 813, 1223, 1232, 1253], "more": [457, 1074, 1112, 1239, 1249, 1252], "than": [457, 747, 1252], "invok": [457, 534, 626, 1228, 1239, 1240, 1241, 1244, 1252, 1253, 1254], "wname2pwak": [457, 458], "wtype2pwak": [457, 458], "ones": [458, 466, 475, 484, 487, 495, 847], "partialaxiwak": [465, 466, 467, 468, 469, 470, 471, 472, 473, 658, 1228, 1245], "axial": [465, 1228], "idea": [465, 747, 1248], "onc": [465, 1243, 1244, 1250, 1251, 1254], "radial": [465, 466, 659, 671, 675, 676, 681, 687, 698], "n": [465, 466, 474, 475, 483, 484, 518, 519, 791, 792, 793, 880, 881, 909, 910, 977, 978, 1037, 1038, 1042, 1043, 1053, 1054, 1074, 1094, 1095, 1112, 1228, 1242, 1245, 1250, 1251, 1252, 1254], "radii": [465, 674, 675, 680, 681, 686, 687, 697, 698, 1217, 1233], "cover": 465, "disc": [465, 486, 896, 897, 1247], "overlap": [465, 486, 518, 519], "circl": [465, 486, 866, 867, 868, 869, 870, 871, 872, 1113, 1114, 1117, 1123, 1124, 1127, 1133, 1134, 1137, 1143, 1144, 1147, 1217, 1218, 1233, 1244], "area": [465, 518, 519, 850, 856, 858, 860, 866, 868, 875, 882, 890, 896, 897, 1198, 1217, 1218, 1229, 1233, 1239, 1244], "partialdistslicedwak": [474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 661, 1228, 1245], "distanc": [474, 677, 678, 849, 850, 854, 856, 858, 860, 864, 866, 868, 871, 873, 875, 878, 880, 882, 886, 888, 890, 894, 919, 920, 1063, 1064, 1074, 1076, 1088, 1089, 1112, 1113, 1114, 1123, 1124, 1133, 1134, 1143, 1144, 1167, 1217, 1218, 1228, 1229, 1231, 1233, 1244, 1254], "make": [474, 1214, 1217, 1228, 1229, 1241, 1244, 1252], "structur": [474, 601, 1228, 1239, 1246, 1252], "optin": [474, 1198], "done": [474, 907, 1251], "grotor": 474, "gridrotor": [474, 475, 484, 518, 519, 520, 521, 522, 523, 524, 1228, 1245], "partialgrid": [483, 484, 485, 1228, 1245], "mai": [483, 534, 1228, 1243, 1254], "partialtophat": [486, 487, 488, 489, 490, 491, 492, 493, 1228, 1245], "hat": [486, 672, 1228, 1236, 1254], "rotorpoint": [494, 495, 496, 497, 498, 499, 1228, 1245], "directli": [494, 813, 818, 944, 953, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1226, 1228, 1232, 1233, 1236, 1249], "get_wake_point": [494, 498], "setuniformdata": [500, 501, 502, 503, 504, 1228, 1239], "both": [500, 501, 669, 670, 689, 692, 726, 729, 731, 734, 1166, 1248, 1252, 1253], "assum": [500, 501, 1217, 1251], "Or": [500, 501], "independ": [500, 501, 1246], "written": [500, 501, 803, 1240], "tke2ti": [505, 506, 507, 1228, 1239, 1245], "tke": [505, 1228, 1239, 1242, 1246, 1247], "sqrt": [505, 1074, 1112, 1228], "wakedelta": [508, 509, 510, 511, 1228], "subtract": [508, 1228, 1244], "divid": [508, 509, 791, 792, 793, 794, 795, 796], "centrerotor": [512, 513, 514, 515, 516, 517, 1228, 1245], "compos": [518, 1228], "possibli": [518, 1228], "kick": [518, 1228], "out": [518, 1074, 1112, 1228, 1249, 1251, 1254], "outsid": [518, 1228, 1243], "reduct": [518, 519], "actual": [518, 519, 944, 953, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1239, 1241, 1246, 1248, 1250], "repres": [518, 519, 562, 601, 764, 866, 873, 880, 1228, 1233, 1242, 1253, 1254], "circ": [518, 519], "recalcul": [518, 519], "accordingli": [518, 519], "nint": [518, 519], "200": [518, 519, 1242, 1244, 1246, 1248, 1251, 1254], "in_var": [525, 526], "vairabl": [525, 526], "func": [525, 526, 944, 953, 963, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1199, 1205, 1206, 1207, 1208, 1213], "in0": [525, 526], "in1": [525, 526], "stsel": [525, 526], "out0": [525, 526], "ou1": [525, 526], "where": [525, 526, 764, 1074, 1112, 1220, 1221, 1244, 1246, 1247, 1249, 1254], "inx": [525, 526], "outi": [525, 526], "lookupt": [529, 530, 531, 532, 533, 1228, 1239], "tabl": [529, 530, 562, 1228, 1239, 1248, 1249], "varmap": [529, 530, 896, 911, 912, 917, 919, 926, 937, 999, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109], "pd_file_read_par": [530, 547, 563, 583, 590], "xr_interp_arg": 530, "powermask": [534, 535, 536, 537, 538, 539, 1228, 1239, 1245, 1248], "below": [534, 792, 793, 795, 796, 1239, 1241], "rate": 534, "higher": [534, 736, 737, 747, 748, 1239], "introduc": [534, 1236, 1239], "so": [534, 847, 1239, 1247, 1248, 1250, 1251], "wise": [534, 562, 563, 1074, 1112], "var_ws_p": [534, 535, 590, 596, 602], "factor_p": [534, 535, 539], "update_p_ct": [534, 539], "rated_p": [534, 539], "var_w": 539, "p_lim": 539, "rotorcentrecalc": [540, 541, 542, 543, 544, 545, 1228, 1239, 1245], "sectormanag": [546, 547, 548, 549, 550, 1228, 1239, 1249], "range_var": [546, 547, 1249], "target_var": [546, 547, 1249], "col_tind": 547, "col_tnam": [547, 1249], "colmap": [547, 1249], "var_period": 547, "360": 547, "within": [547, 818, 1113, 1114, 1123, 1124, 1133, 1134, 1143, 1144, 1217, 1229, 1231, 1233, 1239, 1241, 1244, 1247], "exist": [547, 700, 719, 824, 1062, 1247, 1250, 1254], "period": 547, "setfarmvar": [551, 552, 553, 554, 555, 556, 557, 1228, 1239, 1248, 1254], "add_var": [551, 553, 1018, 1020, 1248, 1254], "remov": [551, 557, 1241, 1248], "setxyhd": [558, 559, 560, 561, 1228], "set_xi": [558, 559], "set_h": [558, 559], "set_d": [558, 559], "tablefactor": [562, 563, 564, 565, 566, 1228, 1239], "multipli": [562, 563, 677, 678, 689, 690, 726, 727, 731, 732, 1228, 1239], "dimension": [562, 1074, 1112, 1228, 1239], "col_var": [562, 563], "row_var": [562, 563], "onto": [562, 563], "interpn": [563, 601, 602], "thrust2ct": [567, 568, 569, 570, 1228, 1239, 1245], "thrust_var": [567, 568], "wsct": [567, 589, 595, 601], "var_ws_ct": [567, 568, 590, 596, 602], "yaw2yawm": [571, 572, 573, 1228, 1239, 1245, 1254], "yawm2yaw": [574, 575, 576, 1228, 1239, 1245, 1254], "linear": [577, 736, 757, 758, 1228, 1245, 1253], "ti_var": [577, 578, 731, 732], "k_var": [577, 578, 651, 652, 677, 678, 683, 684, 689, 690, 694, 695, 721, 722], "ti_val": [577, 578], "cpctfile": [582, 583, 1228, 1239], "pctfile": [582, 583, 585, 589, 590, 591, 592, 593, 594, 1228, 1242, 1245, 1249, 1250, 1252], "cp": [582, 583, 584, 585, 1228, 1239], "col_w": [582, 583, 589, 590, 595], "col_cp": [582, 583, 585], "225": [582, 583, 585, 601, 817, 1242, 1243, 1244, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "paramer": 583, "cpctfromtwo": [584, 585, 1228, 1239], "pctfromtwo": [584, 595, 596, 597, 598, 599, 600, 1228], "data_source_cp": [584, 585], "data_source_ct": [584, 585, 595, 596, 601, 602], "col_ws_cp_fil": 585, "pd_file_read_pars_cp": 585, "pd_file_read_pars_ct": [585, 596, 602], "nulltyp": [586, 587, 588, 1228, 1239, 1245], "doe": [586, 1113, 1123, 1133, 1143, 1228, 1246, 1248, 1251], "col_p": [589, 590, 595, 596], "col_ct": [589, 590, 595, 596], "densitii": [589, 590, 595, 596], "correct": [589, 590, 595, 596, 626, 677, 678, 683, 747, 1228, 1239, 1247, 1248, 1250], "wsp": [589, 595, 601], "p_ct": [590, 596, 601, 602], "p_p": [590, 596, 602, 1254], "88": [590, 596, 602, 1242, 1244, 1252, 1254], "source_p": [595, 601], "source_ct": [595, 601], "rpars_p": [595, 601], "rpars_ct": [595, 601], "data_source_p": [595, 596, 601, 602], "col_ws_p_fil": [595, 596], "col_ws_ct_fil": 596, "pd_file_read_pars_p": [596, 602], "wsrho2pctfromtwo": [601, 602, 603, 604, 605, 606, 1228], "950": [601, 1244], "975": 601, "275": 601, "subsequ": [601, 1247], "neccessarili": [601, 1228, 1252], "ipars_p": 601, "ipars_ct": 601, "interpn_pars_p": 602, "interpn_pars_ct": 602, "vertical_profil": [607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625], "abllogneutralwsprofil": [607, 608, 609, 1228], "log": [607, 610, 613, 616, 834, 838, 839, 843, 1228, 1234], "abllogstablewsprofil": [610, 611, 612, 1228], "stabl": [610, 616, 837, 838, 839, 840, 841, 1228, 1233, 1241], "abllogunstablewsprofil": [613, 614, 615, 1228], "unstabl": [613, 616, 842, 843, 844, 845, 1228, 1233], "abllogwsprofil": [616, 617, 618, 1228, 1242], "pick": 616, "shearedprofil": [619, 620, 621, 1228, 1239], "uniformprofil": [622, 623, 624, 625, 1228], "farmord": [626, 627, 628, 629, 630, 631, 632, 1228, 1245], "warn": 626, "test": [626, 849, 855, 856, 858, 865, 866, 872, 873, 879, 880, 887, 888, 895, 1239, 1242], "purpos": [626, 1242, 1244, 1250], "give": [626, 1239, 1252], "when": [626, 1239, 1242, 1243, 1244, 1248, 1252], "base_fram": [626, 627, 651, 652], "rotorwd1": [626, 627], "rotorwd": [626, 627, 633, 634, 635, 636, 637, 652, 1228, 1245], "align": [633, 1228], "axi": [633, 763, 791, 792, 793, 794, 795, 796, 807, 810, 812, 817, 850, 860, 868, 875, 882, 890, 928, 939, 949, 1074, 1112, 1113, 1117, 1123, 1127, 1133, 1137, 1143, 1147, 1219, 1220, 1221, 1222, 1228, 1232, 1233, 1250, 1254], "var_wd": [633, 634], "streamlin": [638, 639, 640, 641, 642, 643, 644, 731, 1228, 1236, 1239, 1243, 1245, 1247], "n_delstor": [638, 639], "increas": [638, 639, 1236], "max_length": [638, 639], "cl_ipar": [638, 639, 645, 646], "line": [638, 639, 645, 646, 672, 674, 677, 680, 683, 686, 694, 697, 850, 860, 868, 875, 882, 890, 1239, 1241, 1250], "100000": [638, 639, 1248], "timelin": [645, 646, 647, 648, 649, 650, 1228, 1239, 1245, 1251], "dynam": [645, 1228, 1238, 1240], "spatial": [645, 919, 1074, 1112, 1228, 1229, 1239, 1242, 1251], "max_wake_length": [645, 646], "dt_min": [645, 646, 1251], "minut": [645, 646, 1242, 1246, 1251], "20000": [645, 646], "yawedwak": [651, 652, 653, 654, 655, 656, 657, 1228, 1239, 1245], "bend": [651, 1228, 1239, 1254], "bastankhah": [651, 689, 700, 721, 1236, 1239, 1254], "port": [651, 700, 721, 1254], "agel": [651, 700, 721, 1254], "2016": [651, 700, 721, 1239], "http": [651, 677, 683, 689, 700, 721, 726, 731, 747, 847, 1214, 1217, 1237, 1239, 1240, 1241, 1252], "doi": [651, 677, 689, 700, 721, 1237], "org": [651, 677, 689, 700, 721, 726, 731, 747, 1237], "1017": [651, 700, 721], "jfm": [651, 700, 721], "595": [651, 700, 721], "porteagelmodel": [651, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 1236], "here": [651, 652, 677, 678, 689, 690, 694, 695, 721, 722, 1226, 1227, 1229, 1239, 1240, 1242, 1244, 1246, 1248, 1249, 1250, 1252, 1253, 1254], "misalign": [651, 721, 1254], "ct_max": [651, 652, 672, 673, 678, 683, 684, 689, 690, 694, 695, 700, 715, 721, 722, 726, 727, 731, 732], "9999": [651, 652, 672, 673, 678, 683, 684, 690, 694, 695, 700, 715, 721, 722, 727, 732], "58": [651, 652, 700, 715, 721, 722, 1242, 1244], "07": [651, 652, 700, 715, 722, 1242, 1243, 1245, 1251], "beyond": [652, 673, 678, 684, 689, 690, 695, 700, 715, 722, 726, 727, 731, 732], "determin": [652, 700, 715, 722, 784, 1239, 1247], "onset": [652, 700, 715, 722], "far": [652, 700, 715, 722, 1239], "region": [652, 700, 715, 722], "axisymmetricwakemodel": [658, 659, 660, 669, 672, 1236], "distslicedwakemodel": [658, 661, 662, 663, 664, 665, 666, 667, 668, 721, 1236], "r": [658, 659, 669, 670, 671, 672, 675, 676, 677, 681, 683, 687, 689, 692, 694, 698, 726, 729, 731, 734, 1236], "separ": [658, 661, 1236, 1239, 1247], "abil": [658, 661], "calc_wakes_spsel_x_r": [658, 659, 669, 671, 672, 676, 677, 683, 689, 694, 726, 731], "calc_wakes_spsel_x_yz": [658, 660, 661, 663, 669, 672, 677, 683, 689, 694, 721, 724, 726, 731], "n_r_per_x": [659, 671, 675, 676, 681, 687, 698], "n_sp_sel": [659, 660, 663, 670, 671, 674, 676, 680, 686, 692, 697, 724, 729, 734], "sp_sel": [659, 660, 663, 670, 671, 674, 676, 680, 686, 692, 697, 700, 713, 724, 729, 734], "non": [659, 660, 663, 670, 671, 674, 676, 680, 686, 692, 697, 724, 729, 734, 989, 1029, 1062, 1074, 1112, 1164, 1177, 1195, 1240, 1241], "yz": [660, 661, 663, 724, 789, 796, 1236, 1239], "n_yz_per_x": [660, 663, 724], "denpend": [661, 1236], "look": [661, 662, 673, 678, 684, 690, 695, 722, 727, 732, 784, 1242, 1244, 1247, 1249, 1253], "up": [661, 662, 673, 678, 684, 690, 695, 722, 727, 732, 784], "superp": 661, "gaussianwakemodel": [669, 670, 671, 689, 726, 731, 1236], "gaussian": [669, 1236], "calc_amplitude_sigma_spsel": [669, 670, 689, 692, 726, 729, 731, 734], "amplitud": [669, 670, 689, 692, 726, 729, 731, 734], "sigma": [669, 670, 689, 692, 726, 729, 731, 734, 1239], "amsi": [670, 692, 729, 734], "tophatwakemodel": [672, 673, 674, 675, 676, 677, 683, 694, 1236], "calc_wake_radiu": [672, 675, 677, 681, 683, 687, 694, 698], "calc_centreline_wake_delta": [672, 674, 677, 680, 683, 686, 694, 697], "wake_r": [674, 675, 680, 681, 686, 687, 697, 698], "cl_del": [674, 680, 686, 697], "varlu": [674, 680, 686, 697], "crespohernandeztiwak": [677, 678, 679, 680, 681, 682, 1236, 1239, 1245], "crespo": [677, 1236], "hernandez": [677, 1236], "empir": [677, 1236], "correl": [677, 1074, 1112, 1236], "1016": [677, 689], "0167": 677, "6105": 677, "95": [677, 1242, 1244, 1253], "00033": 677, "we": [677, 1074, 1112, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "eqn": 677, "17": [677, 1242, 1244, 1248, 1253], "15": [677, 1242, 1243, 1244, 1246, 1248, 1249, 1252, 1253], "1088": [677, 726, 731], "1742": [677, 726, 731], "6596": [677, 726, 731], "625": 677, "012039": 677, "a_near": [677, 678], "a_far": [677, 678], "e1": [677, 678], "e2": [677, 678], "e3": [677, 678], "use_ambti": [677, 678], "sbeta_factor": [677, 678, 689, 690, 726, 727, 731, 732], "sbeta": [677, 678, 689, 690, 726, 727, 731, 732], "near_wake_d": [677, 678], "362": 678, "73": [678, 1244], "83": [678, 1074, 1112, 1244], "0325": 678, "32": [678, 1244], "iectiwak": [683, 684, 685, 686, 687, 688, 1236, 1245], "iec": [683, 1236], "64100": [683, 1236], "2005": [683, 1236], "8": [683, 727, 747, 761, 763, 768, 1236, 1237, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "orbit": 683, "dtu": 683, "dk": 683, "3750291": 683, "2009_31": 683, "pdf": [683, 726, 731, 747], "v2": 683, "volluk": 683, "implement": [683, 1244, 1247], "document": [683, 1074, 1112, 1229, 1239], "frandsen": [683, 726, 727, 1239], "2019": [683, 684], "opening_angl": [683, 684], "open": [683, 684, 1237, 1239], "21": [683, 684, 1242, 1244, 1248], "6": [683, 684, 1074, 1112, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "iec_typ": 684, "bastankhahwak": [689, 690, 691, 692, 693, 1236, 1245], "j": [689, 1074, 1112], "renen": 689, "2014": 689, "01": [689, 1242, 1244, 1245, 1246, 1251, 1252], "002": 689, "modif": 689, "fit": 689, "better": 689, "jensenwak": [694, 695, 696, 697, 698, 699, 1236, 1245], "jensen": [694, 1074, 1112, 1236, 1245], "repetit": [700, 1236], "avoid": [700, 1074, 1112, 1236, 1254], "mdata_kei": [700, 706], "check": [700, 703, 719, 824, 896, 917, 919, 926, 944, 954, 955, 986, 1010, 1011, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1060, 1061, 1063, 1069, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1217, 1239, 1244, 1251, 1252], "x0": [700, 714], "NEAR": [700, 707], "r_pc": [700, 709], "r_pc_": [700, 710], "ampl_near": [700, 702], "delta_near": [700, 705], "ampl_far": [700, 701], "sigma_y_far": [700, 711], "sigma_z_far": [700, 712], "delta_far": [700, 704], "calc_data": [700, 716], "has_data": [700, 719], "clean": [700, 717], "gamma": [716, 1254], "radiant": [716, 1254], "porteagelwak": [721, 722, 723, 724, 725, 1236, 1245], "turboparkwak": [726, 727, 728, 729, 730, 1236, 1239, 1245], "turbopark": [726, 731, 1236, 1239], "iopscienc": [726, 731], "iop": [726, 731], "articl": [726, 731, 1237], "2265": [726, 731], "022063": [726, 731], "c1": [726, 727, 1088, 1089], "c2": [726, 727, 1088, 1089], "turboparkwakeix": [731, 732, 733, 734, 735, 1236, 1245], "linearsuperposit": [736, 737, 738, 739, 740, 1228, 1239, 1245], "supersposit": [736, 741, 751, 1228], "rescal": [736, 741, 747, 751, 1228], "scale": [736, 737, 741, 742, 751, 752, 999, 1000, 1009, 1017, 1088, 1089, 1243, 1251], "rule": [736, 737, 741, 742, 751, 752, 999, 1000, 1009, 1017, 1239, 1249, 1254], "lim_low": [736, 737, 747, 748], "lower": [736, 737, 747, 748, 1062, 1239], "lim_high": [736, 737, 747, 748], "svar": [736, 737, 741, 742, 751, 752], "vafriabl": [736, 737], "input_farm_var": [736, 740, 741, 746, 751, 756], "source_turbin": [737, 742, 752], "source_turbine_amb": [737, 742, 752], "source_turbine_": [737, 742, 752], "maxsuperposit": [741, 742, 743, 744, 745, 746, 1228, 1245], "maximum": [741, 791, 792, 793, 794, 795, 796, 1074, 1112, 1228, 1239, 1253], "productsuperposit": [747, 748, 749, 750, 1228, 1239, 1245], "product": [747, 1074, 1112, 1228, 1245], "dimensionless": 747, "deficit": [747, 1236, 1247, 1252, 1253, 1254], "rather": 747, "equival": [747, 1247, 1252, 1254], "arxiv": 747, "2010": 747, "03873": 747, "equat": [747, 1239], "quadraticsuperposit": [751, 752, 753, 754, 755, 756, 1228, 1245], "quadrat": [751, 757, 758, 1228, 1245], "tisuperposit": [757, 758, 759, 760, 1228, 1245], "ti_superp": [757, 758], "superp_to_amb": [757, 758], "farmlayoutoutput": [761, 762, 763, 764, 765, 766, 767, 768, 769, 1232, 1239, 1242, 1244, 1246, 1249, 1252, 1253], "plot": [761, 763, 766, 767, 768, 769, 789, 791, 792, 793, 794, 795, 796, 804, 808, 809, 810, 812, 813, 815, 817, 850, 860, 868, 875, 882, 890, 1117, 1127, 1137, 1147, 1214, 1232, 1239, 1243, 1244, 1248, 1249, 1250, 1252, 1253, 1254], "layout": [761, 763, 764, 765, 766, 767, 768, 769, 808, 809, 896, 917, 919, 926, 928, 937, 939, 944, 949, 986, 999, 1008, 1010, 1016, 1018, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1229, 1232, 1238, 1239, 1240, 1251, 1252], "fre": 761, "from_r": [761, 762], "results_st": [761, 762], "farm_result": [761, 762, 770, 771, 789, 790, 801, 802, 810, 811, 1243, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "from_result": [761, 762], "get_layout_data": [761, 764], "get_layout_dict": [761, 765], "get_figur": [761, 763, 768, 804, 808, 813, 1242, 1244, 1246, 1249, 1252, 1253], "color_bi": [761, 763, 1246, 1252, 1253], "fontsiz": [761, 763, 768], "figsiz": [761, 763, 791, 792, 793, 794, 795, 796, 810, 812, 817, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253], "annot": [761, 763, 1246, 1252, 1253], "figur": [761, 763, 789, 791, 792, 793, 794, 795, 796, 804, 808, 809, 813, 849, 850, 856, 858, 860, 866, 868, 873, 875, 880, 882, 888, 890, 896, 917, 919, 926, 928, 937, 939, 944, 949, 986, 999, 1008, 1010, 1016, 1018, 1113, 1117, 1123, 1127, 1133, 1137, 1143, 1147, 1157, 1166, 1182, 1214, 1233, 1239, 1244, 1246, 1250, 1252], "write_plot": [761, 768], "write": [761, 766, 767, 768, 769, 770, 789, 797, 800, 801, 803, 804, 809, 810, 813, 815, 826, 832, 1215, 1232, 1233, 1239], "write_xyh": [761, 769], "write_csv": [761, 766, 801, 803], "write_json": [761, 767], "format_col2var": [761, 770, 789, 797, 800, 801, 804, 810, 813, 815], "print_model": [761, 770, 789, 797, 799, 801, 804, 810, 813, 815, 896, 917, 919, 926, 934, 937, 942, 999, 1008, 1010, 1016], "model_typ": [761, 770, 789, 797, 798, 801, 804, 810, 813, 815], "titl": [763, 791, 792, 793, 794, 795, 796, 807, 808, 809, 810, 812, 815, 817, 1113, 1117, 1123, 1127, 1133, 1137, 1143, 1147, 1237, 1242, 1246, 1248, 1249, 1251, 1252, 1253], "fig": [763, 791, 792, 793, 794, 795, 796, 1214, 1233, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "ax": [763, 791, 792, 793, 794, 795, 796, 810, 812, 817, 849, 850, 856, 858, 860, 866, 868, 873, 875, 880, 882, 888, 890, 896, 917, 919, 926, 928, 937, 939, 944, 949, 986, 999, 1008, 1010, 1016, 1018, 1113, 1117, 1123, 1127, 1133, 1137, 1143, 1147, 1157, 1166, 1182, 1242, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253], "normalize_d": 763, "ret_im": [763, 791, 792, 793, 794, 795, 796, 1251], "barg": [763, 1117, 1127, 1137, 1147], "scatter": [763, 1239], "color": [763, 791, 792, 793, 794, 795, 796, 850, 860, 868, 875, 882, 890, 1239, 1252], "mean_rew": [763, 1246, 1252, 1253], "etc": [763, 1244, 1246], "wrt": [763, 770, 779, 780, 781, 782, 783, 849, 854, 856, 858, 864, 866, 871, 873, 878, 880, 886, 888, 894, 953, 963], "plt": [763, 791, 792, 793, 794, 795, 796, 812, 817, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "No": 763, "matplotlib": [763, 791, 792, 793, 794, 795, 796, 850, 860, 868, 873, 875, 882, 890, 928, 939, 949, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "pyplot": [763, 812, 817, 850, 860, 868, 875, 882, 890, 928, 939, 949, 1117, 1127, 1137, 1147, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "im": [763, 791, 792, 793, 794, 795, 796, 1251], "pathcollect": 763, "farmresultsev": [770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 1232, 1239, 1246, 1248, 1252, 1253], "farm_calc": 770, "weinsum": [770, 788], "rh": [770, 788], "einstein": [770, 788, 1239], "last": [770, 788, 847, 1241], "vars_op": [770, 786, 787], "some": [770, 785, 786, 787, 846, 1074, 1112, 1233, 1244, 1247, 1248, 1254], "reduce_turbin": [770, 787], "reduce_al": [770, 785], "states_op": [770, 785], "turbines_op": [770, 785], "calc_states_mean": [770, 779], "calc_states_sum": [770, 781], "calc_states_std": [770, 780], "deviat": [770, 780], "calc_turbine_mean": [770, 782], "calc_turbine_sum": [770, 783], "calc_farm_mean": [770, 775], "calc_farm_sum": [770, 776], "calc_mean_farm_pow": [770, 778, 1246, 1248, 1252, 1253], "calc_turbine_yield": [770, 777, 784, 1252], "annual": [770, 784, 1246, 1252, 1253], "add_capac": [770, 772, 1252], "p_nom": [770, 772], "calc_farm_yield": [770, 777, 1246, 1253], "turbine_yield": [770, 777], "power_uncert": [770, 777], "p75": [770, 777, 1239], "p90": [770, 777, 1239], "add_effici": [770, 773, 1252, 1253], "calc_farm_effici": [770, 774, 1246, 1252, 1253], "fulli": [775, 776, 785, 1113, 1114, 1123, 1124, 1133, 1134, 1143, 1144, 1240], "contract": [775, 776, 785, 999, 1000, 1009, 1017], "uncertainti": 777, "trigger": 777, "farm_yield": 777, "_type_": 780, "_description_": 780, "hour": 784, "delta_t": 784, "p_unit_w": 784, "retur": 784, "durat": 784, "datetime64": 784, "seri": [784, 1239, 1247, 1252], "It": [788, 1240, 1243, 1246, 1248, 1249], "about": [788, 966, 1244, 1248], "treat": 788, "right": [788, 793], "hand": 788, "einsum": 788, "express": [788, 1062], "convent": [788, 847, 1074, 1112], "mention": [788, 1242, 1246], "obligatori": 788, "flowplots2d": [789, 790, 791, 792, 793, 794, 795, 796, 1232, 1239, 1243, 1244, 1246, 1250, 1251, 1253, 1254], "2d": [789, 791, 792, 793, 794, 795, 796, 849, 873, 880, 1232, 1233, 1253], "flow": [789, 791, 792, 793, 794, 795, 796, 1232, 1238, 1239, 1240, 1246, 1247, 1250, 1251], "get_mean_fig_xi": [789, 794, 1244, 1253], "resolut": [789, 791, 792, 793, 794, 795, 796, 1243, 1244, 1246, 1250, 1251, 1253, 1254], "xmin": [789, 791, 792, 794, 795, 1244, 1246, 1254], "ymin": [789, 791, 793, 794, 796, 1244, 1254], "get_mean_fig_xz": [789, 795], "x_direct": [789, 792, 793, 795, 796, 1246], "270": [789, 792, 793, 795, 796, 1242, 1246, 1248, 1250, 1254], "xz": [789, 792, 795, 1239], "get_mean_fig_yz": [789, 796], "gen_states_fig_xi": [789, 791, 1243, 1250, 1251, 1254], "gen_states_fig_xz": [789, 792, 1246], "gen_states_fig_yz": [789, 793, 1254], "xmax": [791, 792, 794, 795, 1244, 1246, 1251, 1254], "ymax": [791, 793, 794, 796, 1244, 1251, 1254], "xlabel": [791, 792, 794, 795], "ylabel": [791, 793, 794, 796], "xspace": [791, 792, 794, 795, 1243], "500": [791, 792, 793, 794, 795, 796, 1088, 1089, 1242, 1243, 1244, 1245, 1246, 1249, 1251, 1253], "yspace": [791, 793, 794, 796, 1243], "var_min": [791, 792, 793, 794, 795, 796], "var_max": [791, 792, 793, 794, 795, 796], "normalize_xi": [791, 794], "normalize_var": [791, 792, 793, 794, 795, 796], "vlabel": [791, 792, 793, 794, 795, 796], "add_bar": [791, 792, 793, 794, 795, 796], "cmap": [791, 792, 793, 794, 795, 796, 808, 809, 1248], "quiver_n": [791, 792, 793, 1243, 1251], "quiver_par": [791, 792, 793, 1243, 1251], "ret_stat": [791, 792, 793, 794, 795, 796], "anim": [791, 792, 793, 794, 795, 796, 1251], "runner": [791, 792, 793, 794, 795, 796, 944, 946, 986, 1157, 1167, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1239, 1244, 1251, 1252, 1253], "extra": [791, 792, 793, 794, 795, 796, 1074, 1112], "space": [791, 792, 793, 794, 795, 796, 1048, 1074, 1076, 1082, 1112, 1123, 1124, 1166, 1182, 1188, 1231, 1239], "contourf": [791, 792, 793, 794, 795, 796], "pure": [791, 792, 793, 794, 795, 796, 1032, 1037, 1042, 1047, 1053, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1113, 1123, 1230, 1231, 1239], "minimum": [791, 792, 793, 794, 795, 796], "bar": [791, 792, 793, 794, 795, 796, 1074, 1112, 1117, 1127, 1137, 1147, 1199, 1200, 1253], "colormap": [791, 792, 793, 794, 795, 796], "th": [791, 792, 793, 1074, 1112], "quiver": [791, 792, 793], "usag": [791, 792, 793, 794, 795, 796, 1239], "calc_point": [791, 792, 793, 794, 795, 796, 1250], "si": [791, 792, 793, 794, 795, 796, 1251], "atplotlib": [791, 792, 793, 794, 795, 796], "quadmesh": [791, 792, 793, 794, 795, 796], "quadcontourset": [791, 792, 793, 794, 795, 796], "zmin": [792, 793, 795, 796, 1246, 1254], "zmax": [792, 793, 795, 796, 1246, 1254], "zlabel": [792, 793, 795, 796], "zspace": [792, 793, 795, 796], "normalize_x": [792, 795], "normalize_z": [792, 793, 795, 796], "north": [792, 793, 795, 796, 1249], "ech": [792, 793], "normalize_i": [793, 796], "left": 793, "weight_turbin": [794, 795, 796], "job": 797, "handi": 797, "format_dict": [800, 826, 832], "underli": [800, 896, 897, 900, 917, 918, 919, 920, 921, 926, 927, 929, 937, 938, 999, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1016, 1017, 1032, 1033, 1034, 1037, 1038, 1039, 1042, 1043, 1044, 1047, 1048, 1049, 1053, 1055, 1058, 1063, 1064, 1065, 1069, 1070, 1071, 1075, 1076, 1077, 1082, 1083, 1084, 1088, 1089, 1090, 1094, 1095, 1096, 1100, 1101, 1102, 1106, 1107, 1109], "flappi": [800, 826, 830, 1239, 1240], "fv": [800, 817, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "4f": [800, 826, 828, 832], "resultswrit": [801, 802, 803, 1232, 1239], "roseplotoutput": [804, 805, 806, 807, 808, 809, 813, 1232, 1249], "rose": [804, 806, 808, 809, 813, 1232, 1238, 1239, 1240, 1242, 1244, 1249, 1252], "get_data_info": [804, 807, 813], "dname": [804, 807, 813], "descript": [804, 807, 813, 1223, 1227, 1228, 1229, 1236], "sector": [804, 806, 808, 809, 813, 1238, 1239, 1240, 1247, 1252], "var_bin": [804, 806, 808, 809, 813], "wd_var": [804, 806, 808, 809, 813], "px": [804, 808, 809, 813], "write_figur": [804, 809, 813], "legend": [806, 807, 808, 809], "bin": [806, 808, 809, 1241, 1242, 1252, 1253], "seper": [806, 808, 809], "relev": [806, 808, 809, 1228, 1236], "pd": [806, 1248, 1249, 1254], "long": [807, 1239], "text": 807, "turbo": [808, 809], "layout_dict": [808, 809], "title_dict": [808, 809], "stateturbinemap": [810, 811, 812, 1232, 1239, 1248], "heat": [810, 812, 1232, 1239], "plot_map": [810, 812, 1248], "subplot": [812, 817, 1242, 1244, 1248, 1250, 1251, 1252, 1253], "pcolormesh": 812, "statesroseplotoutput": [813, 814, 1232, 1239, 1242, 1244, 1246, 1249, 1252, 1253], "ws_var": [813, 814], "turbinetypecurv": [815, 816, 817, 1232, 1239, 1242, 1248], "plot_curv": [815, 817, 1242, 1248], "p_max": [815, 817, 849, 852, 856, 858, 862, 866, 869, 873, 876, 880, 884, 888, 892, 1244, 1248], "x_label": 817, "y_label": 817, "ws_min": [817, 1249], "ws_max": [817, 1249], "30": [817, 1242, 1244, 1251, 1252, 1253, 1254], "ws_step": 817, "05": [817, 1058, 1059, 1242, 1244, 1246, 1248, 1249, 1251, 1253, 1254], "pmax_arg": 817, "mask": [817, 1238, 1239, 1240, 1249], "interest": [817, 1228, 1247, 1250, 1251], "labl": 817, "minim": [817, 849, 853, 856, 858, 863, 866, 870, 873, 877, 880, 885, 888, 893, 919, 920, 944, 971, 972, 973, 986, 999, 1000, 1009, 1016, 1017, 1018, 1026, 1027, 1047, 1048, 1053, 1063, 1064, 1076, 1106, 1113, 1114, 1121, 1123, 1124, 1131, 1133, 1134, 1141, 1143, 1144, 1153, 1154, 1157, 1162, 1166, 1167, 1174, 1175, 1182, 1188, 1193, 1229, 1231, 1244], "dbase": 818, "must": [820, 821, 919, 1229, 1243], "py": 821, "file_man": 821, "keyerror": 824, "pandasfilehelp": [826, 827, 828, 829, 830, 831, 832, 1233], "default_reading_paramet": [826, 829], "support": [826, 1074, 1112, 1239, 1240, 1241, 1247], "default_writing_paramet": [826, 830], "data_file_format": [826, 827], "export": 826, "default_format_dict": [826, 828], "bz2": [826, 827, 829, 830], "gz": [826, 827, 829, 830, 1239, 1246, 1251, 1252, 1253], "zip": [826, 827, 829, 830], "h5": [826, 827, 829, 830], "mode": [826, 830], "5f": [826, 828], "6f": [826, 828], "3f": [826, 828], "read_fil": [826, 831, 1197, 1215], "write_fil": [826, 832], "calc_w": [833, 836, 837, 842, 1234], "ustar": [833, 835, 837, 841, 842, 845, 1234], "friction": [833, 835, 837, 841, 842, 845, 1234], "veloc": [833, 835, 837, 841, 842, 845, 1234], "logz": [834, 839, 843, 1234], "lz": [834, 838, 839, 843], "ws_ref": [835, 841, 845, 1234], "h_ref": [835, 841, 845, 1234], "refer": [835, 836, 841, 845, 1074, 1112, 1214, 1234, 1242, 1254], "height0": [836, 1234], "ws0": [836, 1234], "psi": [837, 840, 842, 844, 1234], "lgz": [838, 1234], "obukhov": [840, 841, 844, 845, 1242], "all_subclass": [846, 1233], "cl": [846, 856, 857, 1233], "cubic_root": [847, 1233, 1239], "a0": [847, 1233], "a1": [847, 1233], "a2": [847, 1233], "a3": [847, 1233], "root": [847, 1233], "polynomi": [847, 1233], "work": [847, 1239, 1241, 1243, 1251, 1253], "fast": [847, 1240], "you": [847, 1074, 1112, 1241, 1245, 1246, 1247, 1250, 1252, 1254], "spare": 847, "yourself": [847, 1242], "github": [847, 1238, 1239, 1240, 1241], "com": [847, 1214, 1217, 1239, 1240, 1241], "opencv": 847, "blob": 847, "master": 847, "modul": 847, "calib3d": 847, "src": 847, "polynom_solv": 847, "cpp": 847, "n_a0": 847, "delta_wd": [848, 1233], "wd_a": [848, 1233], "wd_b": [848, 1233], "close": [849, 873, 1233, 1243, 1251], "geometri": [849, 851, 855, 856, 857, 858, 859, 861, 865, 866, 872, 873, 879, 880, 883, 887, 888, 889, 891, 895, 896, 897, 1113, 1114, 1123, 1124, 1133, 1134, 1143, 1144, 1198, 1216, 1229, 1231, 1233, 1244], "p_min": [849, 852, 853, 856, 858, 862, 863, 866, 869, 870, 873, 876, 877, 880, 884, 885, 888, 892, 893, 1244], "points_dist": [849, 854, 856, 858, 864, 866, 871, 873, 878, 880, 886, 888, 894], "return_nearest": [849, 854, 856, 858, 864, 866, 871, 873, 878, 880, 886, 888, 894], "points_insid": [849, 855, 856, 858, 865, 866, 872, 873, 879, 880, 887, 888, 895], "insid": [849, 855, 856, 858, 865, 866, 872, 873, 879, 880, 881, 887, 888, 895, 896, 897, 917, 1229, 1243], "add_to_figur": [849, 850, 856, 858, 860, 866, 868, 873, 875, 880, 882, 888, 890, 1244], "show_boundari": [849, 850, 856, 858, 860, 866, 868, 873, 875, 880, 882, 888, 890], "invers": [849, 851, 856, 858, 861, 866, 873, 880, 883, 888, 891, 1074, 1112, 1254], "invert": [849, 851, 856, 858, 861, 866, 873, 880, 883, 888, 891, 1233], "fill_mod": [850, 860, 866, 868, 873, 875, 880, 882, 890, 1244], "inside_slategrai": [850, 860, 890], "pars_boundari": [850, 860, 868, 875, 882, 890], "pars_dist": [850, 860, 868, 875, 882, 890, 1244], "dist": [850, 854, 860, 864, 868, 871, 875, 878, 882, 886, 890, 894, 920, 1074, 1112], "dist_insid": [850, 860, 868, 875, 882, 890, 1244], "dist_outsid": [850, 860, 868, 875, 882, 890, 1244], "inside_": [850, 860, 868, 875, 882, 890], "outside_": [850, 860, 868, 875, 882, 890], "command": [850, 860, 868, 875, 882, 890, 1241], "invertedareageometri": [851, 861, 883, 888, 889, 890, 891, 892, 893, 894, 895, 1233], "probe": [854, 855, 864, 865, 871, 872, 878, 879, 886, 887, 894, 895, 944, 946], "nearest": [854, 864, 871, 878, 886, 894], "bundari": [854, 864, 871, 878, 886, 894], "smallest": [854, 864, 871, 878, 886, 894], "p_nearest": [854, 864, 871, 878, 886, 894], "areaintersect": [856, 857, 1233], "intersect": [856, 1217, 1218, 1233], "areaunion": [858, 859, 860, 861, 862, 863, 864, 865, 1233], "union": [858, 1233], "cobnstructor": [866, 867], "closedpolygon": [873, 874, 875, 876, 877, 878, 879, 1233, 1244], "polygon": [873, 874, 1198, 1233, 1244], "poli": 873, "halfplan": [880, 881, 882, 883, 884, 885, 886, 887, 1233], "half": [880, 1233], "orthogon": 880, "opt": [896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1223, 1239, 1244], "constraint": [896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 937, 938, 944, 947, 953, 954, 955, 956, 958, 959, 961, 962, 963, 967, 971, 974, 986, 1018, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1083, 1089, 1095, 1101, 1107, 1113, 1123, 1133, 1143, 1157, 1158, 1166, 1167, 1168, 1182, 1189, 1230, 1244], "areageometryconstraint": [896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 1229], "farmconstraint": [896, 919, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 1229], "constrain": [896, 917, 1229], "sel_turbin": [896, 897, 917, 919, 920, 926, 927, 935, 937, 938, 943, 944, 946, 980, 986, 999, 1008, 1010, 1016, 1018, 1157, 1166, 1182], "disc_insid": [896, 897], "ensur": [896, 897], "full": [896, 897, 1239, 1242, 1246], "problem": [896, 897, 900, 901, 904, 905, 917, 918, 919, 920, 921, 922, 926, 927, 929, 930, 937, 938, 944, 946, 947, 948, 951, 952, 953, 958, 961, 962, 963, 966, 986, 999, 1000, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1239, 1244, 1252], "n_compon": [896, 904, 905, 908, 915, 916, 917, 919, 924, 925, 926, 932, 936, 937, 953, 954, 955, 962, 963, 999, 1003, 1005, 1006, 1007, 1008, 1010, 1014, 1015, 1016, 1032, 1036, 1037, 1041, 1042, 1046, 1047, 1052, 1053, 1057, 1058, 1060, 1061, 1062, 1063, 1068, 1069, 1073, 1075, 1080, 1081, 1082, 1086, 1087, 1088, 1092, 1093, 1094, 1098, 1099, 1100, 1104, 1105, 1106, 1108, 1109, 1111], "compon": [896, 899, 900, 901, 902, 904, 905, 908, 915, 916, 917, 919, 921, 922, 924, 925, 926, 929, 930, 932, 936, 937, 944, 953, 963, 974, 975, 986, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1055, 1056, 1057, 1058, 1062, 1063, 1065, 1066, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1111, 1112, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1219, 1220, 1222, 1244], "vardeps_float": [896, 915, 917, 919, 925, 926, 936, 937, 999, 1007, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109], "calc_individu": [896, 900, 917, 919, 921, 926, 929, 937, 999, 1001, 1008, 1010, 1012, 1016, 1032, 1034, 1037, 1039, 1042, 1044, 1047, 1049, 1053, 1055, 1058, 1063, 1065, 1069, 1071, 1075, 1077, 1082, 1084, 1088, 1090, 1094, 1096, 1100, 1102, 1106, 1109], "vars_int": [896, 899, 900, 901, 904, 905, 917, 919, 921, 922, 926, 929, 930, 937, 944, 951, 952, 953, 958, 959, 961, 962, 963, 982, 983, 986, 988, 989, 990, 991, 999, 1001, 1002, 1003, 1008, 1010, 1012, 1013, 1016, 1018, 1028, 1029, 1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1063, 1065, 1066, 1069, 1071, 1072, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1113, 1115, 1116, 1123, 1125, 1126, 1133, 1135, 1136, 1143, 1145, 1146, 1157, 1158, 1163, 1164, 1166, 1168, 1176, 1177, 1178, 1179, 1182, 1189, 1194, 1195], "vars_float": [896, 899, 900, 901, 904, 905, 917, 919, 921, 922, 926, 929, 930, 937, 944, 951, 952, 953, 958, 959, 961, 962, 963, 982, 983, 986, 988, 989, 990, 991, 999, 1001, 1002, 1003, 1008, 1010, 1012, 1013, 1016, 1018, 1028, 1029, 1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1063, 1065, 1066, 1069, 1071, 1072, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1113, 1115, 1116, 1123, 1125, 1126, 1133, 1135, 1136, 1143, 1145, 1146, 1157, 1158, 1163, 1164, 1166, 1168, 1176, 1177, 1178, 1179, 1182, 1189, 1194, 1195], "problem_result": [896, 900, 901, 904, 905, 917, 919, 921, 922, 926, 929, 930, 937, 951, 952, 961, 962, 999, 1001, 1002, 1003, 1008, 1010, 1012, 1013, 1016, 1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1063, 1065, 1066, 1069, 1071, 1072, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1115, 1116, 1125, 1126, 1135, 1136, 1145, 1146, 1158, 1168, 1189, 1244], "calc_popul": [896, 901, 917, 919, 922, 926, 930, 937, 999, 1002, 1008, 1010, 1013, 1016, 1032, 1035, 1037, 1040, 1042, 1045, 1047, 1050, 1053, 1056, 1058, 1063, 1066, 1069, 1072, 1075, 1078, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 1103, 1106, 1109], "n_sel_turbin": [896, 917, 919, 926, 933, 937, 941, 944, 976, 986, 988, 989, 999, 1008, 1010, 1016, 1018, 1028, 1029, 1157, 1163, 1164, 1166, 1176, 1177, 1182, 1194, 1195], "add_to_layout_figur": [896, 917, 919, 926, 928, 937, 939, 944, 949, 986, 999, 1008, 1010, 1016, 1018, 1157, 1166, 1182], "get_bound": [896, 917, 919, 926, 1032, 1037, 1042, 1047, 1053, 1058, 1062, 1063, 1069], "check_individu": [896, 917, 919, 926, 1032, 1037, 1042, 1047, 1053, 1058, 1060, 1063, 1069], "constraint_valu": [896, 917, 919, 926, 944, 954, 955, 986, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1060, 1061, 1063, 1069, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "fullfil": [896, 917, 919, 926, 944, 954, 955, 986, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1060, 1061, 1063, 1069, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "check_popul": [896, 917, 919, 926, 1032, 1037, 1042, 1047, 1053, 1058, 1061, 1063, 1069], "component_nam": [896, 902, 917, 919, 926, 937, 999, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109], "var_names_int": [896, 914, 917, 919, 926, 937, 944, 985, 986, 999, 1008, 1010, 1016, 1018, 1031, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1132, 1133, 1143, 1156, 1157, 1166, 1181, 1182], "n_vars_int": [896, 899, 900, 901, 904, 905, 910, 916, 917, 919, 921, 922, 926, 929, 930, 937, 944, 951, 952, 953, 958, 959, 961, 962, 963, 965, 969, 973, 978, 982, 983, 986, 988, 989, 990, 991, 999, 1001, 1002, 1003, 1008, 1010, 1012, 1013, 1016, 1018, 1022, 1025, 1027, 1028, 1029, 1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1063, 1065, 1066, 1069, 1071, 1072, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1110, 1113, 1115, 1116, 1123, 1125, 1126, 1128, 1130, 1131, 1133, 1135, 1136, 1143, 1145, 1146, 1149, 1152, 1154, 1157, 1158, 1163, 1164, 1166, 1168, 1170, 1173, 1175, 1176, 1177, 1178, 1179, 1182, 1189, 1194, 1195, 1244], "var_names_float": [896, 913, 917, 919, 926, 937, 944, 984, 986, 999, 1008, 1010, 1016, 1018, 1030, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1122, 1123, 1133, 1142, 1143, 1155, 1157, 1165, 1166, 1180, 1182, 1196], "n_vars_float": [896, 899, 900, 901, 904, 905, 909, 915, 917, 919, 921, 922, 925, 926, 929, 930, 936, 937, 944, 951, 952, 953, 958, 959, 961, 962, 963, 964, 968, 972, 977, 982, 983, 986, 988, 989, 990, 991, 999, 1001, 1002, 1003, 1007, 1008, 1010, 1012, 1013, 1016, 1018, 1021, 1024, 1026, 1028, 1029, 1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1058, 1063, 1065, 1066, 1069, 1071, 1072, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106, 1109, 1110, 1113, 1115, 1116, 1118, 1120, 1121, 1123, 1125, 1126, 1133, 1135, 1136, 1138, 1140, 1141, 1143, 1145, 1146, 1148, 1151, 1153, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1166, 1168, 1169, 1172, 1174, 1176, 1177, 1178, 1179, 1182, 1189, 1190, 1192, 1193, 1194, 1195, 1244], "vardeps_int": [896, 916, 917, 919, 926, 937, 999, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109], "rename_vars_int": [896, 912, 917, 919, 926, 937, 999, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109], "renam": [896, 911, 912, 917, 919, 926, 937, 999, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1239], "rename_vars_float": [896, 911, 917, 919, 926, 937, 999, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109], "finalize_individu": [896, 904, 917, 919, 926, 937, 944, 961, 986, 999, 1003, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1158, 1166, 1168, 1182, 1189], "champion": [896, 904, 917, 919, 926, 937, 944, 961, 986, 999, 1003, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1158, 1166, 1168, 1182, 1189], "finalize_popul": [896, 905, 917, 919, 926, 937, 944, 962, 986, 999, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "ana_deriv": [896, 899, 917, 919, 926, 937, 999, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109], "analyt": [896, 899, 917, 919, 926, 937, 953, 999, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109], "possibl": [896, 899, 917, 919, 926, 937, 999, 1008, 1010, 1016, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1074, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1112, 1249], "info": [896, 898, 917, 919, 926, 937, 944, 986, 999, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "finish": [896, 907, 917, 919, 926, 937, 944, 986, 999, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1244], "farmoptproblem": [897, 918, 920, 927, 938, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 1000, 1008, 1009, 1011, 1016, 1017, 1033, 1038, 1043, 1048, 1064, 1070, 1076, 1083, 1089, 1095, 1101, 1107, 1229, 1239], "optim": [897, 904, 918, 920, 926, 927, 938, 944, 946, 950, 961, 982, 983, 986, 988, 989, 990, 991, 1000, 1003, 1008, 1009, 1011, 1016, 1017, 1018, 1028, 1029, 1033, 1038, 1043, 1048, 1058, 1064, 1070, 1074, 1076, 1083, 1089, 1095, 1101, 1107, 1112, 1113, 1123, 1133, 1143, 1157, 1158, 1163, 1164, 1166, 1168, 1176, 1177, 1178, 1179, 1182, 1189, 1194, 1195, 1223, 1229, 1230, 1231, 1237, 1238, 1239, 1240], "iwopi": [897, 920, 927, 938, 944, 946, 947, 948, 953, 963, 1058, 1109, 1113, 1123, 1133, 1143, 1229, 1231, 1240, 1244], "cannot": 899, "differenti": [899, 953, 963], "n_sel_compon": [899, 900, 901, 921, 922, 929, 930, 1001, 1002, 1012, 1013, 1034, 1035, 1039, 1040, 1044, 1045, 1049, 1050, 1055, 1056, 1065, 1066, 1071, 1072, 1077, 1078, 1084, 1085, 1090, 1091, 1096, 1097, 1102, 1103], "n_pop": [901, 905, 922, 930, 952, 955, 959, 962, 983, 989, 991, 992, 993, 1002, 1013, 1029, 1035, 1040, 1045, 1050, 1056, 1061, 1066, 1072, 1078, 1085, 1091, 1097, 1103, 1116, 1126, 1136, 1146, 1164, 1177, 1179, 1195, 1229], "old": [911, 912], "dep": [915, 916, 925, 936, 999, 1000, 1007, 1009, 1017], "farmboundaryconstraint": [917, 918, 1229, 1244], "mindistconstraint": [919, 920, 921, 922, 923, 924, 925, 1229, 1244], "least": [919, 1074, 1112, 1229], "min_dist": [919, 920, 1063, 1064, 1075, 1076, 1113, 1114, 1123, 1124, 1133, 1134, 1143, 1144, 1166, 1167, 1244], "min_dist_unit": [919, 920, 1244], "constaint": [919, 923, 1063, 1067], "geom_layout": [926, 937, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1229], "farmobject": [937, 938, 939, 940, 941, 942, 943, 999, 1000, 1009, 1010, 1011, 1017, 1229], "calc_farm_arg": [944, 946], "calc_farm": [944, 946, 1243, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "all_turbin": [944, 950, 986, 1018, 1157, 1166, 1182], "tvar": [944, 981, 986, 1018, 1157, 1166, 1182], "turbine_i": [944, 979, 981, 986, 1018, 1157, 1166, 1182], "parse_tvar": [944, 979, 986, 1018, 1157, 1166, 1182], "tvr": [944, 979, 986, 1018, 1157, 1166, 1182], "drop_var": [944, 966], "exclud": [944, 966], "update_problem_individu": [944, 982, 986, 990, 1018, 1157, 1166, 1178, 1182], "latest": [944, 982, 983, 986, 990, 991, 1018, 1157, 1166, 1178, 1179, 1182, 1241], "update_problem_popul": [944, 983, 986, 991, 1018, 1157, 1166, 1179, 1182], "apply_individu": [944, 951, 986, 1018, 1113, 1115, 1123, 1125, 1133, 1135, 1143, 1145, 1157, 1166, 1182], "apply_popul": [944, 952, 986, 1018, 1113, 1116, 1123, 1126, 1133, 1136, 1143, 1146, 1157, 1166, 1182], "whole": [944, 952, 986, 1018, 1113, 1116, 1123, 1126, 1133, 1136, 1143, 1146, 1157, 1166, 1182, 1239], "int_inf": [944, 945, 969, 973, 986, 1018, 1025, 1027, 1113, 1123, 1133, 1143, 1152, 1154, 1157, 1166, 1173, 1175, 1182], "999999": [944, 945, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "initial_values_int": [944, 965, 986, 1018, 1022, 1113, 1123, 1128, 1133, 1143, 1149, 1157, 1166, 1170, 1182], "min_values_int": [944, 973, 986, 1018, 1027, 1113, 1123, 1131, 1133, 1143, 1154, 1157, 1166, 1175, 1182], "max_values_int": [944, 969, 986, 1018, 1025, 1113, 1123, 1130, 1133, 1143, 1152, 1157, 1166, 1173, 1182], "initial_values_float": [944, 964, 986, 1018, 1021, 1113, 1118, 1123, 1133, 1138, 1143, 1148, 1157, 1159, 1166, 1169, 1182, 1190], "min_values_float": [944, 972, 986, 1018, 1026, 1113, 1121, 1123, 1133, 1141, 1143, 1153, 1157, 1162, 1166, 1174, 1182, 1193], "max_values_float": [944, 968, 986, 1018, 1024, 1113, 1120, 1123, 1133, 1140, 1143, 1151, 1157, 1161, 1166, 1172, 1182, 1192], "add_object": [944, 948, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1244], "varmap_int": [944, 947, 948, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "varmap_float": [944, 947, 948, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "add_constraint": [944, 947, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1244], "min_values_constraint": [944, 971, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "max_values_constraint": [944, 967, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "constraints_tol": [944, 956, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "toler": [944, 956, 986, 1018, 1058, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "n_object": [944, 958, 959, 961, 970, 975, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1158, 1166, 1168, 1182, 1189, 1244], "n_constraint": [944, 956, 958, 959, 961, 962, 967, 971, 974, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1158, 1166, 1168, 1182, 1189, 1244], "calc_gradi": [944, 953, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "ivar": [944, 953, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "gradient": [944, 953, 963, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "get_gradi": [944, 953, 963, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "obtain": [944, 963, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1242, 1246, 1253], "link": [944, 963, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1240, 1244, 1252], "maximize_obj": [944, 970, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "evaluate_individu": [944, 958, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "evaluate_popul": [944, 959, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "check_constraints_individu": [944, 954, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "check_constraints_popul": [944, 955, 986, 1018, 1113, 1123, 1133, 1143, 1157, 1166, 1182], "subject": 950, "fvar": 953, "vr": 953, "overload": 953, "consid": [953, 963, 1252], "optfunctionlist": [953, 963], "n_vr": 953, "ctol": 956, "ret_prob_r": 958, "addition": 958, "con": [958, 959, 961, 962, 1158, 1168, 1189], "were": [963, 1239, 1247, 1253, 1254], "previous": 963, "cf": [963, 1249], "problemdefaultfunc": 963, "decid": [966, 1241], "drop": 966, "cma": 967, "inf": [968, 972, 1024, 1026, 1062, 1120, 1121, 1140, 1141, 1151, 1153, 1161, 1162, 1172, 1174, 1192, 1193], "unbound": [968, 969, 972, 973, 1024, 1025, 1026, 1027, 1120, 1121, 1140, 1141, 1151, 1152, 1153, 1154, 1161, 1162, 1172, 1173, 1174, 1175, 1192, 1193], "cmi": 971, "n_con": 974, "n_obj": 975, "farmvarsproblem": [986, 987, 988, 989, 990, 991, 1018, 1019, 1157, 1166, 1167, 1182, 1188, 1229, 1230, 1239], "pre_rotor_var": [986, 987], "post_rotor_var": [986, 987], "opt2farm_vars_individu": [986, 988, 1018, 1028, 1157, 1163, 1166, 1176, 1182, 1194], "opt2farm_vars_popul": [986, 989, 1018, 1029, 1157, 1164, 1166, 1177, 1182, 1195], "post_rotor": 987, "super": [987, 1023, 1160, 1171, 1191], "farm_var": [988, 989, 1028, 1029, 1163, 1164, 1176, 1177, 1194, 1195], "popstat": [992, 993, 994, 995, 996, 997, 998, 1229], "artifici": [992, 1229], "farmvarobject": [999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1016, 1229], "contract_st": [999, 1000, 1009, 1017], "contract_turbin": [1000, 1009, 1017], "maxfarmpow": [1008, 1009, 1229, 1244], "maximize_pow": [1008, 1009, 1244], "maxnturbin": [1010, 1011, 1012, 1013, 1014, 1015, 1229], "turrbin": [1010, 1229], "check_valid": [1010, 1011], "count": [1010, 1011, 1239], "max_n_turbin": [1010, 1011], "minimalmaxti": [1016, 1017, 1229], "minimize_ti": [1016, 1017], "optfarmvar": [1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1230], "typ": [1018, 1020], "model_kei": 1020, "geometr": [1032, 1033, 1037, 1038, 1042, 1043, 1047, 1048, 1053, 1063, 1064, 1069, 1070, 1075, 1076, 1082, 1083, 1088, 1089, 1094, 1095, 1100, 1101, 1106, 1107, 1113, 1123, 1230, 1231, 1239], "cmpnt": [1032, 1034, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1063, 1065, 1066, 1069, 1071, 1072, 1075, 1077, 1078, 1082, 1084, 1085, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1102, 1103, 1106], "additio": [1033, 1038, 1043, 1048, 1064, 1070], "cfixn": [1037, 1038, 1039, 1040, 1041, 1231], "cmaxn": [1042, 1043, 1044, 1045, 1046, 1231], "cmindens": [1047, 1048, 1049, 1050, 1051, 1052, 1231], "min_valu": [1047, 1048], "dfactor": [1047, 1048, 1075, 1076], "min_dens": [1047, 1048], "cminn": [1053, 1054, 1055, 1056, 1057, 1231], "optfunct": [1058, 1109], "tol": [1058, 1059], "violat": 1058, "1e": [1058, 1059, 1244], "mindist": [1063, 1064, 1065, 1066, 1067, 1068, 1231], "cdist": [1074, 1112], "xa": [1074, 1112], "xb": [1074, 1112], "metric": [1074, 1112], "euclidean": [1074, 1112], "m_a": [1074, 1112], "observ": [1074, 1112], "m_b": [1074, 1112], "callabl": [1074, 1112], "braycurti": [1074, 1112], "canberra": [1074, 1112], "chebyshev": [1074, 1112], "cityblock": [1074, 1112], "cosin": [1074, 1112], "dice": [1074, 1112], "ham": [1074, 1112], "jaccard": [1074, 1112], "jensenshannon": [1074, 1112], "kulczynski1": [1074, 1112], "mahalanobi": [1074, 1112], "match": [1074, 1112], "minkowski": [1074, 1112], "rogerstanimoto": [1074, 1112], "russellrao": [1074, 1112], "seuclidean": [1074, 1112], "sokalmichen": [1074, 1112], "sokalsneath": [1074, 1112], "sqeuclidean": [1074, 1112], "yule": [1074, 1112], "norm": [1074, 1112], "unweight": [1074, 1112], "varianc": [1074, 1112], "vstack": [1074, 1112], "ddof": [1074, 1112], "vi": [1074, 1112], "covari": [1074, 1112], "matrix": [1074, 1112], "inv": [1074, 1112], "cov": [1074, 1112], "u": [1074, 1112, 1219, 1220, 1244], "ij": [1074, 1112], "except": [1074, 1112], "thrown": [1074, 1112], "arrang": [1074, 1112], "_p": [1074, 1112], "quasi": [1074, 1112], "citi": [1074, 1112], "block": [1074, 1112, 1244], "manhattan": [1074, 1112], "u_i": [1074, 1112], "v_i": [1074, 1112], "x_i": [1074, 1112], "squar": [1074, 1112], "_2": [1074, 1112], "frac": [1074, 1112], "cdot": [1074, 1112], "its": [1074, 1112, 1182, 1230, 1240, 1247, 1250], "dot": [1074, 1112], "proport": [1074, 1112], "those": [1074, 1112, 1247], "disagre": [1074, 1112], "To": [1074, 1112], "save": [1074, 1112, 1252], "shannon": [1074, 1112], "probabl": [1074, 1112], "q": [1074, 1112], "pointwis": [1074, 1112], "kullback": [1074, 1112], "leibler": [1074, 1112], "diverg": [1074, 1112], "precis": [1074, 1112], "max_i": [1074, 1112], "sum_i": [1074, 1112], "brai": [1074, 1112], "curti": [1074, 1112], "synonym": [1074, 1112], "kulczynski": [1074, 1112], "roger": [1074, 1112], "tanimoto": [1074, 1112], "russel": [1074, 1112], "rao": [1074, 1112], "sokal": [1074, 1112], "michen": [1074, 1112], "sneath": [1074, 1112], "suppli": [1074, 1112], "ariti": [1074, 1112], "could": [1074, 1112, 1239, 1247, 1249, 1250, 1253], "dm": [1074, 1112], "lambda": [1074, 1112], "librari": [1074, 1112, 1244, 1250], "would": [1074, 1112], "ineffici": [1074, 1112], "syntax": [1074, 1112], "find": [1074, 1112, 1239], "four": [1074, 1112, 1243], "35": [1074, 1112, 1242, 1244, 1251], "0456": [1074, 1112], "85": [1074, 1112, 1244], "2672": [1074, 1112], "1174": [1074, 1112], "89": [1074, 1112, 1244, 1248, 1251], "9711": [1074, 1112], "9728": [1074, 1112], "9422": [1074, 1112], "36": [1074, 1112, 1242, 1244], "1667": [1074, 1112], "86": [1074, 1112, 1237, 1244, 1246, 1252], "7833": [1074, 1112], "7044": [1074, 1112], "6172": [1074, 1112], "8856": [1074, 1112], "0893": [1074, 1112], "3561": [1074, 1112], "8477": [1074, 1112], "corner": [1074, 1112, 1243], "cube": [1074, 1112], "b": [1074, 1112, 1240], "maxdens": [1075, 1076, 1077, 1078, 1079, 1080, 1081, 1231], "max_dens": [1075, 1076], "maxgridspac": [1082, 1083, 1084, 1085, 1086, 1087, 1231], "max_dxdi": [1082, 1083], "memimadist": [1088, 1089, 1090, 1091, 1092, 1093, 1231], "c3": [1088, 1089], "mimamean": [1088, 1089], "diff": 1089, "ofixn": [1094, 1095, 1096, 1097, 1098, 1099, 1231], "omaxn": [1100, 1101, 1102, 1103, 1104, 1105, 1106, 1231], "maxn": [1100, 1101], "ominn": [1106, 1107, 1108, 1231], "vnames_int": 1110, "vnames_float": 1110, "cname": 1110, "geomlayout": [1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1231, 1239], "involv": [1113, 1123, 1133, 1143, 1239], "calc_valid": [1113, 1114], "get_fig": [1113, 1117, 1123, 1127, 1133, 1137, 1143, 1147], "plotli": [1113, 1117, 1123, 1127, 1133, 1137, 1143, 1147, 1214, 1233, 1239], "true_circl": [1117, 1127, 1137, 1147], "ndarari": [1117, 1127, 1137, 1147], "draw": [1117, 1127, 1137, 1147], "geomlayoutgrid": [1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1231, 1239], "background": [1123, 1124, 1231, 1239, 1243, 1244, 1247], "grid_spac": [1123, 1124], "geomreggrid": [1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1231, 1239], "max_dist": [1133, 1134, 1143, 1144, 1167], "n_grid": [1143, 1144, 1166, 1167], "n_max": [1143, 1144], "n_row_max": [1143, 1144, 1167], "farmlayoutoptproblem": [1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1230, 1244], "reggridslayoutoptproblem": [1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1230], "sever": [1166, 1230, 1239], "mix": 1166, "min_spac": [1166, 1182, 1188], "max_n_row": 1166, "regularlayoutoptproblem": [1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1230, 1239], "spacing_x": [1182, 1186], "spacing_i": [1182, 1187], "offset_x": [1182, 1184], "offset_i": [1182, 1185], "read_shp": [1197, 1198, 1233, 1239], "fname": [1197, 1198, 1233], "shp": [1197, 1198, 1215, 1233], "geopanda": [1197, 1198, 1215], "geodatafram": 1197, "wsg84": 1197, "read_shp_polygon": [1198, 1216, 1233, 1239], "name_col": 1198, "geom_col": 1198, "to_utm": 1198, "ret_utm_zon": [1198, 1216, 1233], "extract": 1198, "utm": [1198, 1216], "zone": [1198, 1216], "letter": [1198, 1216], "32u": [1198, 1216], "point_dict_exterior": 1198, "point_dict_interior": 1198, "utm_zone_str": [1198, 1216], "utem": [1198, 1216], "daskrunn": [1199, 1200, 1201, 1202, 1203, 1204, 1205, 1233, 1239, 1243, 1244, 1251, 1252, 1253], "schedul": [1199, 1200, 1239, 1244, 1252], "progress_bar": [1199, 1200, 1239], "show": [1199, 1200, 1239, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1252, 1253, 1254], "progress": [1199, 1200, 1252, 1253], "cluster_arg": [1199, 1200], "explicit": [1199, 1200, 1239, 1243], "cluster": [1199, 1200, 1239, 1240, 1244, 1252, 1253], "setup": [1199, 1200, 1238, 1239, 1240, 1244, 1246, 1248, 1249, 1250, 1253, 1254], "client_arg": [1199, 1200], "client": [1199, 1200], "n_worker": [1199, 1200], "is_distribut": [1199, 1203], "threads_per_work": 1200, "process": [1200, 1247], "worker": [1200, 1252], "thread": [1200, 1252], "defaultrunn": [1206, 1207, 1233, 1239], "show_plotly_fig": [1214, 1233, 1239], "displai": [1214, 1233, 1252, 1253], "window": [1214, 1233, 1239], "stackoverflow": 1214, "question": [1214, 1244], "53570384": 1214, "how": [1214, 1238, 1239, 1240, 1248, 1252, 1253], "standalon": 1214, "shp2csv": [1215, 1233, 1239], "ifil": [1215, 1233], "ofil": [1215, 1233], "in_kwarg": [1215, 1233], "out_kwarg": [1215, 1233], "inam": 1215, "onam": 1215, "to_csv": 1215, "shp2geom2d": [1216, 1233], "shapefil": [1216, 1233], "geom": 1216, "tool": [1216, 1252], "two_circl": [1217, 1218], "r1": [1217, 1218, 1233], "r2": [1217, 1218, 1233], "sure": [1217, 1241, 1244, 1252], "These": [1217, 1228, 1243, 1244, 1246, 1251, 1254], "diego": 1217, "assencio": 1217, "8d6ca3d82151bad815f78addf9b5c1c6": 1217, "calc_area": [1218, 1233], "broadcast": [1218, 1220, 1221], "anoth": [1218, 1253, 1254], "uv2wd": [1219, 1233], "uv": [1219, 1220, 1233], "wd2uv": [1220, 1233], "against": [1220, 1221], "wd2wdvec": [1221, 1233], "wdvec": [1221, 1222, 1233], "wdvec2wd": [1222, 1233], "shortcut": 1223, "concret": [1223, 1228, 1236], "access": 1226, "reach": [1226, 1239, 1251], "atmospher": [1227, 1228, 1242], "interfac": [1227, 1239, 1244], "propag": [1228, 1239, 1247, 1251], "due": [1228, 1249], "ie": 1228, "machin": 1228, "net": 1228, "intern": [1229, 1240], "extern": 1229, "classif": 1236, "cite": 1237, "joss": 1237, "paper": 1237, "softwar": [1237, 1240, 1242], "bibtex": 1237, "schmidt2023": 1237, "author": [1237, 1242], "jona": [1237, 1243], "schmidt": 1237, "luka": 1237, "vollmer": 1237, "martin": 1237, "d\u00f6renk\u00e4mper": 1237, "bernhard": 1237, "stoevesandt": 1237, "21105": 1237, "05464": 1237, "url": 1237, "year": 1237, "2023": [1237, 1242, 1251], "publish": 1237, "journal": 1237, "volum": 1237, "page": 1237, "5464": 1237, "jupyt": 1238, "notebook": [1238, 1239, 1247], "folder": [1238, 1239], "repositori": [1238, 1240], "overview": [1238, 1239, 1240, 1250], "manag": [1238, 1239, 1240, 1247], "releas": [1239, 1241], "readi": [1239, 1245, 1250, 1251, 1254], "transfer": [1239, 1254], "fraunhof": [1239, 1240, 1244], "iw": [1239, 1240, 1242, 1244], "hous": 1239, "predecessor": [1239, 1240], "yet": 1239, "just": [1239, 1248], "enjoi": 1239, "await": 1239, "comment": 1239, "issu": [1239, 1240], "thank": 1239, "changelog": 1239, "fraunhoferiw": [1239, 1240, 1241], "commit": [1239, 1240], "style": 1239, "black": 1239, "small": [1239, 1242], "discov": 1239, "flake8": 1239, "now": [1239, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1253, 1254], "pytest": 1239, "unittest": 1239, "workflow": 1239, "docu": 1239, "io": 1239, "doc": [1239, 1252], "html": [1239, 1251], "miss": 1239, "wind_rot": [1239, 1243], "manifest": 1239, "orst": 1239, "pctsinglefil": 1239, "iecti2019": 1239, "iecti2005": 1239, "concept": [1239, 1251], "instal": [1239, 1240], "pip": [1239, 1240], "capabl": [1239, 1240], "As": [1239, 1241, 1254], "pcttwofil": 1239, "windroseoutput": 1239, "histogram": 1239, "ambientwindroseoutput": 1239, "improv": 1239, "downwind": [1239, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "browser": 1239, "featur": [1239, 1249], "wind_ros": 1239, "layout_single_st": 1239, "layout_wind_ros": 1239, "layout_opt": [1239, 1244], "ipynb": 1239, "demonstr": [1239, 1242, 1244, 1248, 1250, 1253, 1254], "wrf": [1239, 1246, 1247], "ambientroseplotoutput": 1239, "multi_height": 1239, "bug": 1239, "veer": 1239, "power_mask": 1239, "solv": [1239, 1244], "cubic": 1239, "forgotten": 1239, "api": [1239, 1240, 1252], "hotfix": 1239, "wsrho2pcttwofil": 1239, "sector_manag": 1239, "sector_man": 1239, "col_model": 1239, "offset": 1239, "compare_wak": 1239, "compar": [1239, 1248, 1249], "yawed_wak": 1239, "width": 1239, "simplifi": 1239, "until": 1239, "converg": [1239, 1251], "accept": 1239, "replac": [1239, 1241], "intuit": 1239, "turboparkix": 1239, "summar": 1239, "bracket": 1239, "eq": 1239, "wrong": 1239, "layout_regular_grid": 1239, "geom_reggrid": 1239, "affect": [1239, 1248], "geopandas_help": 1239, "interior": 1239, "11": [1239, 1241, 1242, 1244, 1248, 1252, 1254], "cleaner": 1239, "treatment": 1239, "slimmer": 1239, "distribut": [1239, 1242, 1244, 1252], "move": [1239, 1244], "irrespect": 1239, "restart": 1239, "complet": [1239, 1242, 1245, 1246, 1249, 1251, 1252, 1253], "incomplet": 1239, "slurm": 1239, "queue": 1239, "system": [1239, 1241, 1242, 1247, 1250, 1252], "timeseries_slurm": 1239, "hpc": 1239, "apigen": 1239, "through": [1239, 1240], "outer": 1239, "consist": [1239, 1242, 1248, 1249, 1250, 1253], "timeseries_100": [1239, 1251], "short": [1239, 1242], "timestep": 1239, "vari": [1239, 1242, 1246], "flow_plots_2d": 1239, "chosen": 1239, "modular": 1240, "steer": 1240, "construct": 1240, "analysi": 1240, "studi": 1240, "comparison": 1240, "simul": [1240, 1242, 1247], "complex": [1240, 1252], "chain": 1240, "perform": 1240, "ow": 1240, "remot": 1240, "enabl": 1240, "well": [1240, 1242, 1244, 1254], "tracker": 1240, "report": 1240, "mit": 1240, "citat": 1240, "conda": 1240, "histori": 1240, "fork": [1240, 1241], "branch": [1240, 1241], "git": [1240, 1241, 1243], "checkout": 1240, "new_branch": 1240, "your": [1240, 1241, 1250], "am": [1240, 1251], "awesom": 1240, "messag": 1240, "push": 1240, "pull": 1240, "request": 1240, "develop": 1240, "flapfoam": 1240, "public": [1240, 1254], "publicli": 1240, "fund": 1240, "research": 1240, "project": 1240, "particular": [1240, 1252], "feder": 1240, "ministri": 1240, "econom": 1240, "affair": 1240, "climat": 1240, "action": [1240, 1247], "bmwk": 1240, "roject": 1240, "smart": 1240, "grant": 1240, "0325851b": 1240, "0325397b": 1240, "03ee3008a": 1240, "educ": 1240, "bmbf": 1240, "framework": 1240, "h2digit": 1240, "03sf0635": 1240, "venv": 1241, "conveni": [1241, 1250], "prefer": 1241, "python3": 1241, "Then": 1241, "activ": 1241, "everi": 1241, "leav": 1241, "deactiv": 1241, "altern": 1241, "dev": 1241, "egg": 1241, "clone": 1241, "cd": 1241, "whenev": 1241, "concern": 1241, "recommend": [1241, 1243], "forg": 1241, "channel": 1241, "while": 1241, "again": [1241, 1244, 1248], "build": 1241, "Such": 1242, "often": [1242, 1247], "terminologi": [1242, 1247, 1250], "three": [1242, 1254], "67": [1242, 1244, 1252], "randomli": 1242, "t0": [1242, 1244, 1248, 1249, 1250, 1252, 1254], "101872": [1242, 1252], "70": [1242, 1243, 1244, 1249, 1252], "1004753": [1242, 1252], "57": [1242, 1244, 1252, 1253], "t1": [1242, 1244, 1248, 1249, 1250, 1252, 1254], "103659": [1242, 1252], "97": [1242, 1244, 1252], "1002993": [1242, 1252], "29": [1242, 1244, 1251, 1252, 1253], "t2": [1242, 1244, 1248, 1250, 1252], "100780": [1242, 1252], "09": [1242, 1252], "1000779": [1242, 1252], "t3": [1242, 1244, 1248, 1250, 1252], "100290": [1242, 1252], "42": [1242, 1244, 1252], "1004330": [1242, 1252], "t4": [1242, 1244, 1248, 1250], "103005": 1242, "1003540": 1242, "t5": [1242, 1244], "100102": 1242, "92": [1242, 1244], "1004849": 1242, "55": [1242, 1244], "t6": [1242, 1244], "104162": 1242, "1001061": 1242, "like": [1242, 1247, 1249], "mesoscal": 1242, "75": [1242, 1243, 1244, 1246, 1251, 1252], "2009": [1242, 1246], "00": [1242, 1244, 1246, 1251, 1252], "37214": [1242, 1246], "42685": [1242, 1246], "28838": [1242, 1246], "31": [1242, 1243, 1244, 1246, 1252], "23": [1242, 1244, 1246, 1252], "27767": [1242, 1246], "36368": [1242, 1246], "30095": [1242, 1246], "At": 1242, "90": [1242, 1244, 1246, 1251], "150": [1242, 1244, 1246, 1252, 1253], "250": [1242, 1244, 1246, 1249, 1254], "o": [1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "16": [1242, 1244, 1246, 1248, 1249, 1252, 1253], "20": [1242, 1243, 1244, 1245, 1246, 1248, 1249, 1252, 1253], "binnd": 1242, "layer": 1242, "64": [1242, 1244, 1251, 1252], "253": 1242, "032": 1242, "542331196166035e": 1242, "65": [1242, 1244, 1252, 1253], "207": 1242, "145": 1242, "0001230528308906": 1242, "49": [1242, 1243, 1244], "46": [1242, 1244, 1251], "116": 1242, "0001563449299843": 1242, "72": [1242, 1243, 1244, 1248], "314": 1242, "048": 1242, "618827331554488e": 1242, "18": [1242, 1244, 1248], "302": 1242, "027": 1242, "694": 1242, "98695302482496e": 1242, "3000": [1242, 1244, 1248, 1254], "2018": 1242, "24": [1242, 1244, 1248, 1252], "172": 1242, "27": [1242, 1244], "51": [1242, 1244], "184": 1242, "13": [1242, 1244, 1246, 1248, 1251], "52": [1242, 1244], "198": 1242, "04": [1242, 1244, 1245], "34": [1242, 1244], "209": [1242, 1244], "93": [1242, 1244], "19": [1242, 1244, 1248, 1252], "78": [1242, 1244, 1252, 1253], "217": 1242, "223": 1242, "26": [1242, 1243, 1244, 1251, 1252], "68": [1242, 1244], "227": 1242, "02": [1242, 1244, 1245], "8000": [1242, 1250, 1252], "2017": [1242, 1252], "62": [1242, 1244, 1252], "244": [1242, 1252], "06": [1242, 1244, 1246, 1251, 1252], "0504": [1242, 1252], "99": [1242, 1244, 1249, 1252], "243": [1242, 1252], "03": [1242, 1244, 1250, 1252], "0514": [1242, 1252], "0522": [1242, 1252], "33": [1242, 1244, 1252], "241": [1242, 1252], "0523": [1242, 1252], "0518": 1242, "242": 1242, "0513": 1242, "12": [1242, 1244, 1248, 1250, 1251, 1253, 1254], "269": 1242, "836": 1242, "344": 1242, "268": 1242, "532": 1242, "267": 1242, "406": 1242, "265": 1242, "981": 1242, "39": [1242, 1243, 1244, 1250, 1251, 1252], "coars": [1242, 1244, 1253], "216": [1242, 1244, 1253], "site": [1242, 1244], "bremen": [1242, 1244, 1249], "germani": [1242, 1244], "00158": [1242, 1244, 1253], "00244": [1242, 1244, 1253], "00319": [1242, 1244, 1253], "00367": 1242, "00042": [1242, 1244, 1253], "veri": [1242, 1243, 1244, 1252], "inhomogen": 1242, "long_nam": 1242, "deg": 1242, "rotat": 1242, "subtitl": 1242, "date": 1242, "2021": 1242, "300": [1242, 1244, 1248, 1254], "2500": [1242, 1243, 1244], "180": 1242, "220": 1242, "120": 1242, "dtu10": 1242, "dtu10mw": [1242, 1245, 1251], "iea15": 1242, "iea15mw": [1242, 1245], "iwt7": [1242, 1245], "nrel5": [1242, 1248, 1250, 1252], "nrel5mw": [1242, 1243, 1244, 1245, 1246, 1248, 1250, 1252, 1253, 1254], "14": [1242, 1244, 1248, 1251, 1252], "nstate": 1242, "ncurv": 1242, "pctcurv": 1242, "categori": 1242, "relative_to": 1242, "parent": 1242, "lt": [1242, 1244, 1250], "posixpath": 1242, "gt": [1242, 1244, 1250], "shown": 1242, "printout": [1242, 1250], "feel": 1242, "invit": 1242, "best": [1243, 1244, 1249], "wai": 1243, "similar": 1243, "claim": 1243, "inlin": [1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "associ": 1243, "home": 1243, "netcfd": 1243, "back": 1243, "our": [1243, 1244, 1245, 1246, 1248, 1249, 1253, 1254], "let": [1243, 1244, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "domain": 1243, "rectangl": 1243, "realiz": [1243, 1254], "instanc": [1243, 1251], "streamlines_100": [1243, 1245], "grid16": [1243, 1245], "jensen_linear_k007": [1243, 1245, 1250], "partial_wakes_model": [1243, 1244, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "auto": [1243, 1244, 1245, 1246, 1248, 1249, 1251, 1252, 1253, 1254], "4000": [1243, 1244, 1249, 1253], "implicit": [1243, 1244, 1252, 1254], "fr": [1243, 1246, 1248, 1250, 1252], "to_datafram": [1243, 1246, 1248, 1250, 1251, 1252, 1254], "scale_unit": [1243, 1251], "201": 1243, "158092": 1243, "491089": 1243, "1474": 1243, "211367": 1243, "208": [1243, 1244], "044994": 1243, "673386": 1243, "1580": 1243, "523022": 1243, "214": [1243, 1244], "523994": 1243, "960601": 1243, "1748": 1243, "171047": 1243, "218": 1243, "242345": 1243, "867297": 1243, "1127": 1243, "597810": 1243, "222": 1243, "297880": 1243, "283373": 1243, "1352": 1243, "715530": 1243, "899315": 1243, "731909": 1243, "808657": 1243, "1614": 1243, "607085": 1243, "1101": 1243, "211997": 1243, "236": 1243, "751304": 1243, "932726": 1243, "1156": 1243, "958672": 1243, "237": 1243, "139685": 1243, "375640": 1243, "142662": 1243, "1406": 1243, "547918": 1243, "801": 1243, "751505": 1243, "484049": 1243, "818854": 1243, "381124": 1243, "1665": 1243, "347000": 1243, "908": 1243, "970303": 1243, "311353": 1243, "703701": 1243, "149847": 1243, "1054": 1243, "871543": 1243, "454": 1243, "760942": 1243, "259090": 1243, "995899": 1243, "857833": 1243, "1185": 1243, "898485": 1243, "690": 1243, "639688": 1243, "676969": 1243, "357075": 1243, "1396": 1243, "122949": 1243, "44": [1243, 1244], "537113": 1243, "352448": 1243, "263710": 1243, "521": 1243, "748653": 1243, "492": 1243, "140844": 1243, "47": [1243, 1244, 1251], "447853": 1243, "960030": 1243, "917024": 1243, "724": 1243, "421405": 1243, "710": 1243, "071241": 1243, "815208": 1243, "580130": 1243, "998": 1243, "581195": 1243, "462887": 1243, "352662": 1243, "621921": 1243, "552147": 1243, "960214": 1243, "363478": 1243, "184792": 1243, "580285": 1243, "552663": 1243, "task": 1244, "detail": [1244, 1247, 1252], "pymoo": 1244, "nice": 1244, "genet": 1244, "optimizer_pymoo": 1244, "gm": 1244, "tackl": 1244, "wind_rose_bremen": [1244, 1249, 1253], "0036700002": [1244, 1253], "next": [1244, 1246, 1248, 1250, 1252, 1253], "1200": 1244, "800": [1244, 1250, 1251], "900": [1244, 1251, 1253], "float64": [1244, 1250], "1500": 1244, "700": 1244, "wish": [1244, 1252, 1253, 1254], "t7": 1244, "t8": 1244, "t9": 1244, "notic": [1244, 1248, 1249, 1251, 1252, 1254], "shortli": 1244, "begin": 1244, "bastankhah_linear_k002": [1244, 1245, 1246, 1248, 1249], "rotor_wd": [1244, 1245, 1246, 1248, 1249, 1252, 1253], "n_obj_cmptn": 1244, "n_con_cmptn": 1244, "impli": 1244, "ga": 1244, "form": [1244, 1252], "n_max_gen": 1244, "pop_siz": 1244, "solver": 1244, "problem_par": 1244, "algo_par": 1244, "seed": 1244, "setup_par": 1244, "term_par": 1244, "ftol": 1244, "xtol": 1244, "print_info": 1244, "sampl": 1244, "float_random": 1244, "floatrandomsampl": 1244, "termin": 1244, "defaultsingleobjectivetermin": 1244, "001": 1244, "n_gen": 1244, "n_eval": 1244, "cv_min": 1244, "cv_avg": 1244, "f_avg": 1244, "f_min": 1244, "257950e": 1244, "094916e": 1244, "180418e": 1244, "141625e": 1244, "279782e": 1244, "157184e": 1244, "404513e": 1244, "577682e": 1244, "579169e": 1244, "703733e": 1244, "350": 1244, "531147e": 1244, "050876e": 1244, "400": 1244, "000000e": 1244, "605222e": 1244, "588240e": 1244, "450": 1244, "103920e": 1244, "527620e": 1244, "582192e": 1244, "550": 1244, "732673e": 1244, "600": [1244, 1246, 1248, 1249], "832754e": 1244, "586968e": 1244, "591846e": 1244, "650": 1244, "055741e": 1244, "588486e": 1244, "604179e": 1244, "8416979966": 1244, "586179e": 1244, "750": [1244, 1254], "0056020975": 1244, "586244e": 1244, "592827e": 1244, "609887e": 1244, "850": 1244, "597835e": 1244, "616432e": 1244, "601994e": 1244, "619099e": 1244, "608318e": 1244, "637494e": 1244, "615190e": 1244, "645683e": 1244, "1050": 1244, "622881e": 1244, "646187e": 1244, "1100": 1244, "631506e": 1244, "653047e": 1244, "1150": 1244, "640921e": 1244, "655091e": 1244, "648388e": 1244, "657861e": 1244, "1250": 1244, "651988e": 1244, "663615e": 1244, "1300": 1244, "655195e": 1244, "1350": 1244, "658165e": 1244, "667660e": 1244, "28": 1244, "1400": 1244, "660791e": 1244, "671652e": 1244, "1450": 1244, "663724e": 1244, "676832e": 1244, "667884e": 1244, "679974e": 1244, "1550": 1244, "672357e": 1244, "685551e": 1244, "1600": 1244, "676653e": 1244, "688468e": 1244, "1650": 1244, "681032e": 1244, "688999e": 1244, "1700": 1244, "684254e": 1244, "692540e": 1244, "1750": 1244, "686841e": 1244, "1800": 1244, "689011e": 1244, "693343e": 1244, "37": [1244, 1251], "1850": 1244, "690736e": 1244, "700848e": 1244, "38": [1244, 1253], "1900": 1244, "692806e": 1244, "701437e": 1244, "1950": 1244, "695244e": 1244, "702613e": 1244, "40": [1244, 1251], "2000": [1244, 1249, 1251], "698077e": 1244, "714461e": 1244, "2050": 1244, "701772e": 1244, "2100": 1244, "705495e": 1244, "716273e": 1244, "43": 1244, "2150": 1244, "709527e": 1244, "720787e": 1244, "2200": 1244, "712644e": 1244, "721430e": 1244, "45": [1244, 1251], "2250": 1244, "715937e": 1244, "722818e": 1244, "2300": 1244, "719261e": 1244, "726242e": 1244, "2350": 1244, "721874e": 1244, "728699e": 1244, "48": 1244, "2400": 1244, "724323e": 1244, "729085e": 1244, "2450": 1244, "726669e": 1244, "731540e": 1244, "729169e": 1244, "736498e": 1244, "2550": 1244, "731473e": 1244, "2600": 1244, "733755e": 1244, "739439e": 1244, "53": 1244, "2650": 1244, "736553e": 1244, "741091e": 1244, "54": [1244, 1251, 1252], "2700": 1244, "737859e": 1244, "2750": 1244, "739620e": 1244, "746115e": 1244, "56": 1244, "2800": 1244, "741132e": 1244, "2850": 1244, "742407e": 1244, "2900": 1244, "743667e": 1244, "59": 1244, "2950": 1244, "744499e": 1244, "747450e": 1244, "745637e": 1244, "749378e": 1244, "61": 1244, "3050": 1244, "746819e": 1244, "750740e": 1244, "3100": 1244, "748079e": 1244, "751545e": 1244, "63": [1244, 1252], "3150": 1244, "749500e": 1244, "752455e": 1244, "3200": 1244, "750617e": 1244, "3250": 1244, "751276e": 1244, "752688e": 1244, "66": [1244, 1251, 1252], "3300": 1244, "751675e": 1244, "753603e": 1244, "3350": 1244, "752037e": 1244, "753628e": 1244, "3400": 1244, "752668e": 1244, "754781e": 1244, "69": 1244, "3450": 1244, "753223e": 1244, "755507e": 1244, "3500": 1244, "753940e": 1244, "755627e": 1244, "71": [1244, 1248], "3550": 1244, "754475e": 1244, "756641e": 1244, "3600": 1244, "754917e": 1244, "756729e": 1244, "3650": 1244, "755482e": 1244, "756732e": 1244, "74": [1244, 1251], "3700": 1244, "755880e": 1244, "756858e": 1244, "3750": 1244, "756292e": 1244, "757238e": 1244, "76": 1244, "3800": 1244, "756666e": 1244, "757649e": 1244, "77": 1244, "3850": 1244, "756985e": 1244, "757750e": 1244, "3900": 1244, "757224e": 1244, "757984e": 1244, "79": [1244, 1250, 1251], "3950": 1244, "757503e": 1244, "758511e": 1244, "80": [1244, 1251, 1253], "757798e": 1244, "759081e": 1244, "81": [1244, 1252, 1253], "4050": 1244, "758090e": 1244, "82": 1244, "4100": 1244, "758474e": 1244, "759855e": 1244, "4150": 1244, "758746e": 1244, "759968e": 1244, "84": [1244, 1246], "4200": 1244, "758965e": 1244, "4250": 1244, "759223e": 1244, "4300": 1244, "759449e": 1244, "87": [1244, 1252], "4350": 1244, "759646e": 1244, "759971e": 1244, "4400": 1244, "759774e": 1244, "760032e": 1244, "4450": 1244, "759883e": 1244, "760064e": 1244, "4500": 1244, "759951e": 1244, "760100e": 1244, "91": [1244, 1253], "4550": 1244, "760006e": 1244, "760142e": 1244, "4600": 1244, "760062e": 1244, "760593e": 1244, "4650": 1244, "760121e": 1244, "760978e": 1244, "94": 1244, "4700": 1244, "760182e": 1244, "4750": 1244, "760257e": 1244, "96": 1244, "4800": 1244, "760395e": 1244, "760997e": 1244, "4850": 1244, "760607e": 1244, "761020e": 1244, "98": [1244, 1246, 1253], "4900": 1244, "760797e": 1244, "761706e": 1244, "4950": 1244, "760918e": 1244, "761763e": 1244, "761054e": 1244, "success": 1244, "28808": 1244, "815290012986": 1244, "x_0000": 1244, "484848e": 1244, "y_0000": 1244, "387982e": 1244, "x_0001": 1244, "999400e": 1244, "y_0001": 1244, "193226e": 1244, "x_0002": 1244, "743332e": 1244, "y_0002": 1244, "853013e": 1244, "x_0003": 1244, "161273e": 1244, "y_0003": 1244, "356752e": 1244, "x_0004": 1244, "010384e": 1244, "y_0004": 1244, "495968e": 1244, "x_0005": 1244, "992900e": 1244, "y_0005": 1244, "499577e": 1244, "x_0006": 1244, "970308e": 1244, "y_0006": 1244, "893921e": 1244, "x_0007": 1244, "136647e": 1244, "y_0007": 1244, "198557e": 1244, "x_0008": 1244, "942851e": 1244, "y_0008": 1244, "147376e": 1244, "x_0009": 1244, "992843e": 1244, "y_0009": 1244, "559152e": 1244, "880882e": 1244, "boundary_0000": 1244, "409687e": 1244, "boundary_0001": 1244, "001485e": 1244, "boundary_0002": 1244, "boundary_0003": 1244, "212439e": 1244, "boundary_0004": 1244, "038416e": 1244, "boundary_0005": 1244, "227091e": 1244, "boundary_0006": 1244, "boundary_0007": 1244, "boundary_0008": 1244, "714927e": 1244, "boundary_0009": 1244, "156536e": 1244, "dist_0_1": 1244, "053034e": 1244, "dist_0_2": 1244, "133692e": 1244, "dist_0_3": 1244, "512186e": 1244, "dist_0_4": 1244, "063629e": 1244, "dist_0_5": 1244, "032833e": 1244, "dist_0_6": 1244, "912219e": 1244, "dist_0_7": 1244, "174197e": 1244, "dist_0_8": 1244, "235491e": 1244, "dist_0_9": 1244, "389174e": 1244, "dist_1_2": 1244, "810253e": 1244, "dist_1_3": 1244, "227849e": 1244, "dist_1_4": 1244, "346207e": 1244, "dist_1_5": 1244, "282549e": 1244, "dist_1_6": 1244, "644388e": 1244, "dist_1_7": 1244, "015225e": 1244, "dist_1_8": 1244, "760754e": 1244, "dist_1_9": 1244, "459327e": 1244, "dist_2_3": 1244, "734121e": 1244, "dist_2_4": 1244, "000907e": 1244, "dist_2_5": 1244, "035690e": 1244, "dist_2_6": 1244, "547630e": 1244, "dist_2_7": 1244, "612574e": 1244, "dist_2_8": 1244, "428297e": 1244, "dist_2_9": 1244, "480372e": 1244, "dist_3_4": 1244, "383697e": 1244, "dist_3_5": 1244, "427543e": 1244, "dist_3_6": 1244, "533256e": 1244, "dist_3_7": 1244, "217365e": 1244, "dist_3_8": 1244, "085619e": 1244, "dist_3_9": 1244, "184343e": 1244, "dist_4_5": 1244, "462646e": 1244, "dist_4_6": 1244, "321302e": 1244, "dist_4_7": 1244, "301324e": 1244, "dist_4_8": 1244, "519941e": 1244, "dist_4_9": 1244, "401477e": 1244, "dist_5_6": 1244, "244685e": 1244, "dist_5_7": 1244, "910567e": 1244, "dist_5_8": 1244, "002368e": 1244, "dist_5_9": 1244, "916621e": 1244, "dist_6_7": 1244, "304425e": 1244, "dist_6_8": 1244, "924854e": 1244, "dist_6_9": 1244, "010247e": 1244, "dist_7_8": 1244, "429886e": 1244, "dist_7_9": 1244, "403714e": 1244, "dist_8_9": 1244, "394927e": 1244, "210": 1244, "211": 1244, "212": 1244, "213": 1244, "215": 1244, "995": 1244, "081": 1244, "109": 1244, "5e": 1244, "448": 1244, "999": 1244, "743": 1244, "6137": 1244, "994": 1244, "338": 1244, "419": 1244, "685": 1244, "147e": 1244, "755": 1244, "00013": 1244, "u2": [1244, 1250], "visual": [1244, 1246, 1248, 1249, 1250, 1251, 1252], "dpar": 1244, "zorder": 1244, "outside_whit": 1244, "anyth": 1244, "organ": 1245, "basic_ctrl": 1245, "farm_pmask": 1245, "pmask": [1245, 1248, 1249], "farm_hubh_data": 1245, "hubh_data": 1245, "farm_kti": 1245, "farm_kti_02": 1245, "kti_02": [1245, 1252], "farm_kti_04": 1245, "kti_04": 1245, "farm_kti_05": 1245, "kti_05": [1245, 1253, 1254], "farm_kti_amb": 1245, "kti_amb": 1245, "farm_kti_amb_02": 1245, "kti_amb_02": 1245, "farm_kti_amb_04": 1245, "kti_amb_04": 1245, "farm_kti_amb_05": 1245, "kti_amb_05": 1245, "farm_thrust2ct": 1245, "farm_yaw2yawm": 1245, "farm_yawm2yaw": 1245, "axiwake10": 1245, "axiwake2": 1245, "axiwake20": 1245, "axiwake3": 1245, "axiwake4": 1245, "axiwake5": 1245, "axiwake6": 1245, "axiwake7": 1245, "axiwake8": 1245, "axiwake9": 1245, "distslic": 1245, "distsliced100": 1245, "distsliced16": 1245, "distsliced25": 1245, "distsliced36": 1245, "distsliced4": 1245, "distsliced400": 1245, "distsliced49": 1245, "distsliced64": 1245, "distsliced81": 1245, "distsliced9": 1245, "grid100": 1245, "grid25": 1245, "grid36": 1245, "grid4": 1245, "grid400": 1245, "grid49": 1245, "grid64": 1245, "grid81": 1245, "grid9": [1245, 1246], "top_hat": 1245, "5mw": [1245, 1249, 1250, 1252], "null_typ": 1245, "rotor_wd_farmo": 1245, "streamlines_1": 1245, "streamlines_10": 1245, "streamlines_100_farmo": 1245, "streamlines_100_yaw": 1245, "streamlines_10_farmo": 1245, "streamlines_10_yaw": 1245, "streamlines_1_farmo": 1245, "streamlines_1_yaw": 1245, "streamlines_5": 1245, "streamlines_50": 1245, "streamlines_500": 1245, "streamlines_500_farmo": 1245, "streamlines_500_yaw": 1245, "streamlines_50_farmo": 1245, "streamlines_50_yaw": 1245, "streamlines_5_farmo": 1245, "streamlines_5_yaw": 1245, "timelines_10min": 1245, "timelines_10": [1245, 1251], "timelines_1km": 1245, "timelines_1min": 1245, "timelines_1": 1245, "timelines_30min": 1245, "timelines_30": 1245, "timelines_60min": 1245, "bastankhah_linear": [1245, 1253], "sp": 1245, "bastankhah_linear_amb": 1245, "linear_amb": 1245, "bastankhah_linear_amb_k002": 1245, "bastankhah_linear_amb_k004": 1245, "bastankhah_linear_k004": [1245, 1251], "bastankhah_linear_lim": 1245, "linear_lim": 1245, "bastankhah_linear_lim_k002": 1245, "bastankhah_linear_lim_k004": 1245, "bastankhah_max": 1245, "bastankhah_max_amb": 1245, "max_amb": 1245, "bastankhah_max_amb_k002": 1245, "bastankhah_max_amb_k004": 1245, "bastankhah_max_k002": 1245, "bastankhah_max_k004": 1245, "bastankhah_product": 1245, "bastankhah_product_k002": 1245, "bastankhah_product_k004": 1245, "bastankhah_product_lim": 1245, "product_lim": 1245, "bastankhah_product_lim_k002": 1245, "bastankhah_product_lim_k004": 1245, "bastankhah_quadrat": [1245, 1252], "bastankhah_quadratic_amb": 1245, "quadratic_amb": 1245, "bastankhah_quadratic_amb_k002": 1245, "bastankhah_quadratic_amb_k004": 1245, "bastankhah_quadratic_k002": 1245, "bastankhah_quadratic_k004": 1245, "crespohernandez_ambti_linear": 1245, "ti_linear": 1245, "crespohernandez_ambti_max": 1245, "ti_max": 1245, "crespohernandez_ambti_quadrat": 1245, "ti_quadrat": 1245, "crespohernandez_linear": 1245, "crespohernandez_linear_k002": 1245, "crespohernandez_max": [1245, 1252, 1253, 1254], "crespohernandez_max_k002": 1245, "crespohernandez_quadrat": 1245, "crespohernandez_quadratic_k002": 1245, "iecti2005_linear": 1245, "19076020221856677": 1245, "iecti2005_max": 1245, "iecti2005_quadrat": 1245, "iecti2019_linear": 1245, "iecti2019_max": 1245, "iecti2019_quadrat": 1245, "jensen_linear": 1245, "jensen_linear_amb": 1245, "jensen_linear_amb_k002": 1245, "jensen_linear_amb_k004": 1245, "jensen_linear_amb_k007": 1245, "jensen_linear_amb_k0075": 1245, "075": 1245, "jensen_linear_k002": 1245, "jensen_linear_k004": 1245, "jensen_linear_k0075": 1245, "jensen_linear_lim": 1245, "jensen_linear_lim_k002": 1245, "jensen_linear_lim_k004": 1245, "jensen_linear_lim_k007": 1245, "jensen_linear_lim_k0075": 1245, "jensen_max": 1245, "jensen_max_amb": 1245, "jensen_max_amb_k002": 1245, "jensen_max_amb_k004": 1245, "jensen_max_amb_k007": 1245, "jensen_max_amb_k0075": 1245, "jensen_max_k002": 1245, "jensen_max_k004": 1245, "jensen_max_k007": 1245, "jensen_max_k0075": 1245, "jensen_product": 1245, "jensen_product_k002": 1245, "jensen_product_k004": 1245, "jensen_product_k007": 1245, "jensen_product_k0075": 1245, "jensen_product_lim": 1245, "jensen_product_lim_k002": 1245, "jensen_product_lim_k004": 1245, "jensen_product_lim_k007": 1245, "jensen_product_lim_k0075": 1245, "jensen_quadrat": 1245, "jensen_quadratic_amb": 1245, "jensen_quadratic_amb_k002": 1245, "jensen_quadratic_amb_k004": 1245, "jensen_quadratic_amb_k007": 1245, "jensen_quadratic_amb_k0075": 1245, "jensen_quadratic_k002": 1245, "jensen_quadratic_k004": 1245, "jensen_quadratic_k007": 1245, "jensen_quadratic_k0075": 1245, "porteagel_linear": [1245, 1254], "porteagel_linear_amb": 1245, "porteagel_linear_amb_k002": 1245, "porteagel_linear_amb_k004": 1245, "porteagel_linear_k002": 1245, "porteagel_linear_k004": 1245, "porteagel_linear_lim": 1245, "porteagel_linear_lim_k002": 1245, "porteagel_linear_lim_k004": 1245, "porteagel_max": 1245, "porteagel_max_amb": 1245, "porteagel_max_amb_k002": 1245, "porteagel_max_amb_k004": 1245, "porteagel_max_k002": 1245, "porteagel_max_k004": 1245, "porteagel_product": 1245, "porteagel_product_k002": 1245, "porteagel_product_k004": 1245, "porteagel_product_lim": 1245, "porteagel_product_lim_k002": 1245, "porteagel_product_lim_k004": 1245, "porteagel_quadrat": 1245, "porteagel_quadratic_amb": 1245, "porteagel_quadratic_amb_k002": 1245, "porteagel_quadratic_amb_k004": 1245, "porteagel_quadratic_k002": 1245, "porteagel_quadratic_k004": 1245, "turboparkix_linear_a002_dx001": 1245, "turboparkix_linear_a002_dx1": 1245, "turboparkix_linear_a002_dx10": 1245, "turboparkix_linear_a002_dx100": 1245, "turboparkix_linear_a002_dx5": 1245, "turboparkix_linear_a002_dx50": 1245, "turboparkix_linear_a004_dx001": 1245, "turboparkix_linear_a004_dx1": 1245, "turboparkix_linear_a004_dx10": 1245, "turboparkix_linear_a004_dx100": 1245, "turboparkix_linear_a004_dx5": 1245, "turboparkix_linear_a004_dx50": 1245, "turboparkix_linear_amb_a002_dx001": 1245, "turboparkix_linear_amb_a002_dx1": 1245, "turboparkix_linear_amb_a002_dx10": 1245, "turboparkix_linear_amb_a002_dx100": 1245, "turboparkix_linear_amb_a002_dx5": 1245, "turboparkix_linear_amb_a002_dx50": 1245, "turboparkix_linear_amb_a004_dx001": 1245, "turboparkix_linear_amb_a004_dx1": 1245, "turboparkix_linear_amb_a004_dx10": 1245, "turboparkix_linear_amb_a004_dx100": 1245, "turboparkix_linear_amb_a004_dx5": 1245, "turboparkix_linear_amb_a004_dx50": 1245, "turboparkix_linear_lim_a002_dx001": 1245, "turboparkix_linear_lim_a002_dx1": 1245, "turboparkix_linear_lim_a002_dx10": 1245, "turboparkix_linear_lim_a002_dx100": 1245, "turboparkix_linear_lim_a002_dx5": 1245, "turboparkix_linear_lim_a002_dx50": 1245, "turboparkix_linear_lim_a004_dx001": 1245, "turboparkix_linear_lim_a004_dx1": 1245, "turboparkix_linear_lim_a004_dx10": 1245, "turboparkix_linear_lim_a004_dx100": 1245, "turboparkix_linear_lim_a004_dx5": 1245, "turboparkix_linear_lim_a004_dx50": 1245, "turboparkix_max_a002_dx001": 1245, "turboparkix_max_a002_dx1": 1245, "turboparkix_max_a002_dx10": 1245, "turboparkix_max_a002_dx100": 1245, "turboparkix_max_a002_dx5": 1245, "turboparkix_max_a002_dx50": 1245, "turboparkix_max_a004_dx001": 1245, "turboparkix_max_a004_dx1": 1245, "turboparkix_max_a004_dx10": 1245, "turboparkix_max_a004_dx100": 1245, "turboparkix_max_a004_dx5": 1245, "turboparkix_max_a004_dx50": 1245, "turboparkix_max_amb_a002_dx001": 1245, "turboparkix_max_amb_a002_dx1": 1245, "turboparkix_max_amb_a002_dx10": 1245, "turboparkix_max_amb_a002_dx100": 1245, "turboparkix_max_amb_a002_dx5": 1245, "turboparkix_max_amb_a002_dx50": 1245, "turboparkix_max_amb_a004_dx001": 1245, "turboparkix_max_amb_a004_dx1": 1245, "turboparkix_max_amb_a004_dx10": 1245, "turboparkix_max_amb_a004_dx100": 1245, "turboparkix_max_amb_a004_dx5": 1245, "turboparkix_max_amb_a004_dx50": 1245, "turboparkix_product_a002_dx001": 1245, "turboparkix_product_a002_dx1": 1245, "turboparkix_product_a002_dx10": 1245, "turboparkix_product_a002_dx100": 1245, "turboparkix_product_a002_dx5": 1245, "turboparkix_product_a002_dx50": 1245, "turboparkix_product_a004_dx001": 1245, "turboparkix_product_a004_dx1": 1245, "turboparkix_product_a004_dx10": 1245, "turboparkix_product_a004_dx100": 1245, "turboparkix_product_a004_dx5": 1245, "turboparkix_product_a004_dx50": 1245, "turboparkix_product_lim_a002_dx001": 1245, "turboparkix_product_lim_a002_dx1": 1245, "turboparkix_product_lim_a002_dx10": 1245, "turboparkix_product_lim_a002_dx100": 1245, "turboparkix_product_lim_a002_dx5": 1245, "turboparkix_product_lim_a002_dx50": 1245, "turboparkix_product_lim_a004_dx001": 1245, "turboparkix_product_lim_a004_dx1": 1245, "turboparkix_product_lim_a004_dx10": 1245, "turboparkix_product_lim_a004_dx100": 1245, "turboparkix_product_lim_a004_dx5": 1245, "turboparkix_product_lim_a004_dx50": 1245, "turboparkix_quadratic_a002_dx001": 1245, "turboparkix_quadratic_a002_dx1": 1245, "turboparkix_quadratic_a002_dx10": 1245, "turboparkix_quadratic_a002_dx100": 1245, "turboparkix_quadratic_a002_dx5": 1245, "turboparkix_quadratic_a002_dx50": 1245, "turboparkix_quadratic_a004_dx001": 1245, "turboparkix_quadratic_a004_dx1": 1245, "turboparkix_quadratic_a004_dx10": 1245, "turboparkix_quadratic_a004_dx100": 1245, "turboparkix_quadratic_a004_dx5": 1245, "turboparkix_quadratic_a004_dx50": 1245, "turboparkix_quadratic_amb_a002_dx001": 1245, "turboparkix_quadratic_amb_a002_dx1": 1245, "turboparkix_quadratic_amb_a002_dx10": 1245, "turboparkix_quadratic_amb_a002_dx100": 1245, "turboparkix_quadratic_amb_a002_dx5": 1245, "turboparkix_quadratic_amb_a002_dx50": 1245, "turboparkix_quadratic_amb_a004_dx001": 1245, "turboparkix_quadratic_amb_a004_dx1": 1245, "turboparkix_quadratic_amb_a004_dx10": 1245, "turboparkix_quadratic_amb_a004_dx100": 1245, "turboparkix_quadratic_amb_a004_dx5": 1245, "turboparkix_quadratic_amb_a004_dx50": 1245, "turbopark_linear_a002": 1245, "turbopark_linear_a004": 1245, "turbopark_linear_amb_a002": 1245, "turbopark_linear_amb_a004": 1245, "turbopark_linear_lim_a002": 1245, "turbopark_linear_lim_a004": 1245, "turbopark_max_a002": 1245, "turbopark_max_a004": 1245, "turbopark_max_amb_a002": 1245, "turbopark_max_amb_a004": 1245, "turbopark_product_a002": 1245, "turbopark_product_a004": 1245, "turbopark_product_lim_a002": 1245, "turbopark_product_lim_a004": 1245, "turbopark_quadratic_a002": 1245, "turbopark_quadratic_a004": 1245, "turbopark_quadratic_amb_a002": 1245, "turbopark_quadratic_amb_a004": 1245, "my_jensen": 1245, "042": 1245, "jensenwake45": 1245, "freshli": 1245, "similarli": [1245, 1248, 1254], "section": [1245, 1247, 1250, 1252, 1254], "explor": 1246, "download": 1246, "newa": 1246, "websit": 1246, "4464": 1246, "stamp": 1246, "mark": 1246, "month": 1246, "kinet": [1246, 1247], "energi": [1246, 1247], "assumpt": 1246, "variat": 1246, "neglect": 1246, "inflow": [1246, 1252], "manual": 1246, "alreadi": [1246, 1250], "howev": [1246, 1254], "neither": [1246, 1248], "goal": 1246, "certain": 1246, "approxim": 1246, "west": [1246, 1249, 1254], "undo": 1246, "earlier": 1246, "p0": [1246, 1248, 1252, 1253], "nfarm": [1246, 1248, 1250, 1251, 1252, 1253, 1254], "1f": [1246, 1248, 1252, 1253], "2f": [1246, 1248, 1252, 1253], "340": [1246, 1249], "14377": 1246, "593022": 1246, "1533": 1246, "584614": 1246, "83636": 1246, "192504": 1246, "1299": 1246, "635898": 1246, "299802": 1246, "1362": 1246, "286874": 1246, "538688": 1246, "1501": 1246, "771092": 1246, "226181": 1246, "1940": 1246, "207249": 1246, "532676": 1246, "4041": 1246, "896723": 1246, "22320": 1246, "131": 1246, "reflect": [1247, 1251, 1254], "script": 1247, "inform": [1247, 1250, 1252], "arbitrari": 1247, "becom": 1247, "reli": 1247, "averag": 1247, "stem": 1247, "henc": [1247, 1248, 1249, 1252], "approach": 1247, "might": 1247, "sdata": [1248, 1254], "exce": 1248, "nor": 1248, "pmax_": 1248, "s_": 1248, "pmax_4": 1248, "6000": [1248, 1249], "pmax_2": 1248, "pmax_0": 1248, "pmax_1": 1248, "pmax_3": 1248, "set_pmax": 1248, "thought": 1248, "sinc": [1248, 1251], "od": 1248, "furthermor": 1248, "somewher": 1248, "present": 1248, "influenc": 1248, "o1": 1248, "000000": [1248, 1250, 1251, 1252, 1254], "100622": 1248, "403": 1248, "460668": 1248, "230759": 1248, "160101": 1248, "836726": 1248, "448432": 1248, "102": [1248, 1251, 1252, 1253], "024826": 1248, "1771": 1248, "969501": 1248, "727": 1248, "422438": 1248, "109672": 1248, "440": 1248, "497551": 1248, "664896": 1248, "328": 1248, "099527": 1248, "346418": 1248, "256": 1248, "059846": 1248, "4562": 1248, "500000": 1248, "218395": 1248, "1934": 1248, "349917": 1248, "026105": 1248, "1202": 1248, "442515": 1248, "419438": 1248, "926": 1248, "179190": 1248, "069268": 1248, "768": 1248, "743105": 1248, "740422": 1248, "265493": 1248, "610241": 1248, "4829": 1248, "480538": 1248, "737726": 1248, "305147": 1248, "704317": 1248, "538785": 1248, "001123": 1248, "463783": 1248, "027022": 1248, "922952": 1248, "572237": 1248, "549852": 1248, "200276": 1248, "124457": 1248, "856675": 1248, "753726": 1248, "552823": 1248, "501976": 1248, "340518": 1248, "re": [1248, 1251], "o0": 1248, "edgecolor": 1248, "white": 1248, "ylorrd": 1248, "vmin": 1248, "vmax": 1248, "nanmax": 1248, "ylgn": 1248, "produc": [1248, 1252], "off": 1249, "persu": 1249, "east": 1249, "wd_min": 1249, "wd_max": 1249, "170": 1249, "191": 1249, "290": 1249, "110": 1249, "correspons": 1249, "fulfil": 1249, "ttype": 1249, "nrel": [1249, 1250, 1252], "d126": [1249, 1250, 1252], "h90": [1249, 1250, 1252], "sector_rul": 1249, "rews_min": 1249, "rews_max": 1249, "orient": 1249, "wa": [1249, 1251], "5001": 1249, "7000": 1249, "high": 1249, "westerli": 1249, "south": 1249, "summari": 1250, "skip": 1250, "own": 1250, "ask": 1250, "519e": 1250, "6e": 1250, "4e": 1250, "2e": 1250, "easili": 1250, "2518": 1250, "600000": 1250, "790000": 1250, "633459": 1250, "1557": 1250, "076947": 1250, "803665": 1250, "176627": 1250, "1290": 1250, "332498": 1250, "808234": 1250, "955794": 1250, "1167": 1250, "325199": 1250, "812210": 1250, "821354": 1250, "1106": 1250, "880886": 1250, "818932": 1250, "linspac": 1250, "15000": 1250, "point_result": 1250, "npoint": 1250, "set_xlabel": 1250, "set_ylabel": 1250, "916": 1250, "principl": 1251, "backward": 1251, "trajectori": 1251, "hit": [1251, 1254], "fall": 1251, "necessari": 1251, "cross": [1251, 1254], "commun": 1251, "inlcud": 1251, "rcparam": 1251, "jshtml": 1251, "101": [1251, 1253], "106": 1251, "defaultconv": 1251, "324e": 1251, "lim": 1251, "000e": 1251, "fail": 1251, "ok": 1251, "behaviour": 1251, "farm_df": [1251, 1254], "1532": 1251, "700000": [1251, 1252], "063574": 1251, "845": 1251, "738040": 1251, "693421": 1251, "640": 1251, "016335": 1251, "enumer": 1251, "013": 1251, "artistanim": 1251, "interv": 1251, "blit": 1251, "repeat_delai": 1251, "fun": [1251, 1252], "206": 1251, "104": 1251, "desir": [1252, 1254], "timeseries_8000": 1252, "test_farm_67": 1252, "further": 1252, "alwai": 1252, "598951": 1252, "307949": 1252, "067607": 1252, "522240": 1252, "728003": 1252, "299": 1252, "208883": 1252, "4868": 1252, "2712": 1252, "819583": 1252, "435150": 1252, "4752": 1252, "878044": 1252, "750000": 1252, "607321": 1252, "4828": 1252, "202797": 1252, "769528": 1252, "3234": 1252, "107125": 1252, "536000": 1252, "turbine_result": 1252, "nresult": 1252, "3067": 1252, "723397": 1252, "2778": 1252, "987770": 1252, "613545": 1252, "555798": 1252, "825445": 1252, "873257": 1252, "2531": 1252, "065918": 1252, "506213": 1252, "713413": 1252, "2702": 1252, "820210": 1252, "540564": 1252, "780747": 1252, "2739": 1252, "058250": 1252, "547812": 1252, "805992": 1252, "2593": 1252, "172270": 1252, "518634": 1252, "737070": 1252, "2625": 1252, "796799": 1252, "525159": 1252, "748704": 1252, "2591": 1252, "950988": 1252, "518390": 1252, "731988": 1252, "2864": 1252, "102273": 1252, "572820": 1252, "860799": 1252, "2571": 1252, "260829": 1252, "514252": 1252, "726062": 1252, "2633": 1252, "819847": 1252, "526764": 1252, "755245": 1252, "343933": 1252, "172137": 1252, "676705": 1252, "994150": 1252, "716189": 1252, "001980": 1252, "705491": 1252, "089536": 1252, "524245": 1252, "072262": 1252, "177": 1252, "205": 1252, "1558": 1252, "seen": 1252, "mean_eff": [1252, 1253], "faster": 1252, "overhead": 1252, "But": 1252, "extrem": 1252, "realli": 1252, "dai": 1252, "nmean": 1252, "launch": 1252, "localclust": 1252, "221dee3f": 1252, "tcp": 1252, "42875": 1252, "gib": 1252, "dashboard": 1252, "8787": 1252, "statu": 1252, "shut": 1252, "down": 1252, "runtim": 1252, "localhost": 1252, "address": 1252, "plenti": 1252, "relat": 1253, "203": 1253, "686": 1253, "perfectli": 1253, "fine": 1253, "aim": 1254, "set_yawm": 1254, "want": 1254, "sensit": 1254, "continu": 1254, "downstream": 1254, "clearli": 1254, "frontal": 1254, "146549": 1254, "042770": 1254, "240": 1254, "co": 1254, "corect": 1254, "fact": 1254, "p_": 1254, "crespohernandez": 1254, "even": 1254, "though": 1254, "most": 1254}, "objects": {"foxes.constants": [[138, 0, 1, "", "AMB_RPOINT_RESULTS", "Identified for ambient rotor point results"], [139, 1, 1, "", "DTYPE", "Default data type for floats"], [262, 0, 1, "", "FARM", "Wind farm identifier"], [263, 0, 1, "", "GW", "The unit giga watt"], [264, 1, 1, "", "ITYPE", "Default data type for int"], [314, 0, 1, "", "KAPPA", "The Van-Karman constant"], [315, 0, 1, "", "MW", "The unit mega watt"], [316, 0, 1, "", "POINT", "Point identifier"], [317, 0, 1, "", "POINTS", "Points identifier"], [318, 0, 1, "", "POP", "Population identifier"], [319, 0, 1, "", "P_UNITS", "Power unit factors relative to watts, key: unit str, value: factor"], [320, 0, 1, "", "RPOINT", "Rotor point identifier"], [321, 0, 1, "", "RPOINTS", "Rotor points identifier"], [322, 0, 1, "", "RWEIGHTS", "Rotor point weights identifier"], [323, 0, 1, "", "STATE", "States identifier"], [324, 0, 1, "", "STATES_SEL", "Identifier for states selection"], [325, 0, 1, "", "STATE_POINT", "Identifier for state-point dimensions"], [326, 0, 1, "", "STATE_SOURCE_TURBINE", "Identifier for the source turbines per state"], [327, 0, 1, "", "STATE_TURBINE", "Identifier for state-turbine dimensions"], [328, 0, 1, "", "TMODELS", "Turbine models identifier"], [329, 0, 1, "", "TMODEL_SELS", "Selected turbine models identifier"], [330, 0, 1, "", "TNAME", "Wind turbine name identifier"], [331, 0, 1, "", "TURBINE", "Wind turbine identifier"], [332, 0, 1, "", "TW", "The unit terra watt"], [333, 0, 1, "", "VALID", "Validity identifier"], [334, 0, 1, "", "VARS", "Variables identifier"], [335, 0, 1, "", "W", "The unit watt"], [336, 0, 1, "", "XYH", "The vector (x, y, height)"], [337, 0, 1, "", "kW", "The unit kilo watt"]], "foxes.constants.DTYPE": [[140, 1, 1, "", "T", "Scalar attribute identical to the corresponding array attribute."], [141, 2, 1, "", "__abs__", "abs(self)"], [142, 2, 1, "", "__add__", "Return self+value."], [143, 2, 1, "", "__and__", "Return self&value."], [144, 2, 1, "", "__array__", "sc.__array__(dtype) return 0-dim array from scalar with specified dtype"], [145, 1, 1, "", "__array_interface__", "Array protocol: Python side"], [146, 1, 1, "", "__array_priority__", "Array priority."], [147, 1, 1, "", "__array_struct__", "Array protocol: struct"], [148, 2, 1, "", "__array_wrap__", "sc.__array_wrap__(obj) return scalar from array"], [149, 2, 1, "", "__bool__", "self != 0"], [150, 2, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [151, 2, 1, "", "__divmod__", "Return divmod(self, value)."], [152, 2, 1, "", "__eq__", "Return self==value."], [153, 2, 1, "", "__float__", "float(self)"], [154, 2, 1, "", "__floordiv__", "Return self//value."], [155, 2, 1, "", "__format__", "NumPy array scalar formatter"], [156, 2, 1, "", "__ge__", "Return self>=value."], [157, 2, 1, "", "__getitem__", "Return self[key]."], [158, 2, 1, "", "__gt__", "Return self>value."], [159, 2, 1, "", "__hash__", "Return hash(self)."], [160, 2, 1, "", "__int__", "int(self)"], [161, 2, 1, "", "__invert__", "~self"], [162, 2, 1, "", "__le__", "Return self<=value."], [163, 2, 1, "", "__lshift__", "Return self<<value."], [164, 2, 1, "", "__lt__", "Return self<value."], [165, 2, 1, "", "__mod__", "Return self%value."], [166, 2, 1, "", "__mul__", "Return self*value."], [167, 2, 1, "", "__ne__", "Return self!=value."], [168, 2, 1, "", "__neg__", "-self"], [169, 2, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [170, 2, 1, "", "__or__", "Return self|value."], [171, 2, 1, "", "__pos__", "+self"], [172, 2, 1, "", "__pow__", "Return pow(self, value, mod)."], [173, 2, 1, "", "__radd__", "Return value+self."], [174, 2, 1, "", "__rand__", "Return value&self."], [175, 2, 1, "", "__rdivmod__", "Return divmod(value, self)."], [176, 2, 1, "", "__reduce__", "Helper for pickle."], [177, 2, 1, "", "__repr__", "Return repr(self)."], [178, 2, 1, "", "__rfloordiv__", "Return value//self."], [179, 2, 1, "", "__rlshift__", "Return value<<self."], [180, 2, 1, "", "__rmod__", "Return value%self."], [181, 2, 1, "", "__rmul__", "Return value*self."], [182, 2, 1, "", "__ror__", "Return value|self."], [183, 2, 1, "", "__rpow__", "Return pow(value, self, mod)."], [184, 2, 1, "", "__rrshift__", "Return value>>self."], [185, 2, 1, "", "__rshift__", "Return self>>value."], [186, 2, 1, "", "__rsub__", "Return value-self."], [187, 2, 1, "", "__rtruediv__", "Return value/self."], [188, 2, 1, "", "__rxor__", "Return value^self."], [189, 2, 1, "", "__sizeof__", "Size of object in memory, in bytes."], [190, 2, 1, "", "__str__", "Return str(self)."], [191, 2, 1, "", "__sub__", "Return self-value."], [192, 2, 1, "", "__truediv__", "Return self/value."], [193, 2, 1, "", "__xor__", "Return self^value."], [194, 2, 1, "", "all", "Scalar method identical to the corresponding array attribute."], [195, 2, 1, "", "any", "Scalar method identical to the corresponding array attribute."], [196, 2, 1, "", "argmax", "Scalar method identical to the corresponding array attribute."], [197, 2, 1, "", "argmin", "Scalar method identical to the corresponding array attribute."], [198, 2, 1, "", "argsort", "Scalar method identical to the corresponding array attribute."], [199, 2, 1, "", "as_integer_ratio", "Return a pair of integers, whose ratio is exactly equal to the original floating point number, and with a positive denominator. Raise OverflowError on infinities and a ValueError on NaNs."], [200, 2, 1, "", "astype", "Scalar method identical to the corresponding array attribute."], [201, 1, 1, "", "base", "Scalar attribute identical to the corresponding array attribute."], [202, 2, 1, "", "byteswap", "Scalar method identical to the corresponding array attribute."], [203, 2, 1, "", "choose", "Scalar method identical to the corresponding array attribute."], [204, 2, 1, "", "clip", "Scalar method identical to the corresponding array attribute."], [205, 2, 1, "", "compress", "Scalar method identical to the corresponding array attribute."], [206, 2, 1, "", "conj", ""], [207, 2, 1, "", "conjugate", "Scalar method identical to the corresponding array attribute."], [208, 2, 1, "", "copy", "Scalar method identical to the corresponding array attribute."], [209, 2, 1, "", "cumprod", "Scalar method identical to the corresponding array attribute."], [210, 2, 1, "", "cumsum", "Scalar method identical to the corresponding array attribute."], [211, 1, 1, "", "data", "Pointer to start of data."], [212, 2, 1, "", "diagonal", "Scalar method identical to the corresponding array attribute."], [213, 1, 1, "", "dtype", "Get array data-descriptor."], [214, 2, 1, "", "dump", "Scalar method identical to the corresponding array attribute."], [215, 2, 1, "", "dumps", "Scalar method identical to the corresponding array attribute."], [216, 2, 1, "", "fill", "Scalar method identical to the corresponding array attribute."], [217, 1, 1, "", "flags", "The integer value of flags."], [218, 1, 1, "", "flat", "A 1-D view of the scalar."], [219, 2, 1, "", "flatten", "Scalar method identical to the corresponding array attribute."], [220, 2, 1, "", "getfield", "Scalar method identical to the corresponding array attribute."], [221, 1, 1, "", "imag", "The imaginary part of the scalar."], [222, 2, 1, "", "is_integer", "Return True if the floating point number is finite with integral value, and False otherwise."], [223, 2, 1, "", "item", "Scalar method identical to the corresponding array attribute."], [224, 2, 1, "", "itemset", "Scalar method identical to the corresponding array attribute."], [225, 1, 1, "", "itemsize", "The length of one element in bytes."], [226, 2, 1, "", "max", "Scalar method identical to the corresponding array attribute."], [227, 2, 1, "", "mean", "Scalar method identical to the corresponding array attribute."], [228, 2, 1, "", "min", "Scalar method identical to the corresponding array attribute."], [229, 1, 1, "", "nbytes", "The length of the scalar in bytes."], [230, 1, 1, "", "ndim", "The number of array dimensions."], [231, 2, 1, "", "newbyteorder", "Return a new dtype with a different byte order."], [232, 2, 1, "", "nonzero", "Scalar method identical to the corresponding array attribute."], [233, 2, 1, "", "prod", "Scalar method identical to the corresponding array attribute."], [234, 2, 1, "", "ptp", "Scalar method identical to the corresponding array attribute."], [235, 2, 1, "", "put", "Scalar method identical to the corresponding array attribute."], [236, 2, 1, "", "ravel", "Scalar method identical to the corresponding array attribute."], [237, 1, 1, "", "real", "The real part of the scalar."], [238, 2, 1, "", "repeat", "Scalar method identical to the corresponding array attribute."], [239, 2, 1, "", "reshape", "Scalar method identical to the corresponding array attribute."], [240, 2, 1, "", "resize", "Scalar method identical to the corresponding array attribute."], [241, 2, 1, "", "round", "Scalar method identical to the corresponding array attribute."], [242, 2, 1, "", "searchsorted", "Scalar method identical to the corresponding array attribute."], [243, 2, 1, "", "setfield", "Scalar method identical to the corresponding array attribute."], [244, 2, 1, "", "setflags", "Scalar method identical to the corresponding array attribute."], [245, 1, 1, "", "shape", "Tuple of array dimensions."], [246, 1, 1, "", "size", "The number of elements in the gentype."], [247, 2, 1, "", "sort", "Scalar method identical to the corresponding array attribute."], [248, 2, 1, "", "squeeze", "Scalar method identical to the corresponding array attribute."], [249, 2, 1, "", "std", "Scalar method identical to the corresponding array attribute."], [250, 1, 1, "", "strides", "Tuple of bytes steps in each dimension."], [251, 2, 1, "", "sum", "Scalar method identical to the corresponding array attribute."], [252, 2, 1, "", "swapaxes", "Scalar method identical to the corresponding array attribute."], [253, 2, 1, "", "take", "Scalar method identical to the corresponding array attribute."], [254, 2, 1, "", "tobytes", ""], [255, 2, 1, "", "tofile", "Scalar method identical to the corresponding array attribute."], [256, 2, 1, "", "tolist", "Scalar method identical to the corresponding array attribute."], [257, 2, 1, "", "tostring", "Scalar method identical to the corresponding array attribute."], [258, 2, 1, "", "trace", "Scalar method identical to the corresponding array attribute."], [259, 2, 1, "", "transpose", "Scalar method identical to the corresponding array attribute."], [260, 2, 1, "", "var", "Scalar method identical to the corresponding array attribute."], [261, 2, 1, "", "view", "Scalar method identical to the corresponding array attribute."]], "foxes.constants.ITYPE": [[265, 2, 1, "", "__abs__", "abs(self)"], [266, 2, 1, "", "__add__", "Return self+value."], [267, 2, 1, "", "__and__", "Return self&value."], [268, 2, 1, "", "__bool__", "self != 0"], [269, 2, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [270, 2, 1, "", "__divmod__", "Return divmod(self, value)."], [271, 2, 1, "", "__eq__", "Return self==value."], [272, 2, 1, "", "__float__", "float(self)"], [273, 2, 1, "", "__floordiv__", "Return self//value."], [274, 2, 1, "", "__ge__", "Return self>=value."], [275, 2, 1, "", "__gt__", "Return self>value."], [276, 2, 1, "", "__hash__", "Return hash(self)."], [277, 2, 1, "", "__index__", "Return self converted to an integer, if self is suitable for use as an index into a list."], [278, 2, 1, "", "__int__", "int(self)"], [279, 2, 1, "", "__invert__", "~self"], [280, 2, 1, "", "__le__", "Return self<=value."], [281, 2, 1, "", "__lshift__", "Return self<<value."], [282, 2, 1, "", "__lt__", "Return self<value."], [283, 2, 1, "", "__mod__", "Return self%value."], [284, 2, 1, "", "__mul__", "Return self*value."], [285, 2, 1, "", "__ne__", "Return self!=value."], [286, 2, 1, "", "__neg__", "-self"], [287, 2, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [288, 2, 1, "", "__or__", "Return self|value."], [289, 2, 1, "", "__pos__", "+self"], [290, 2, 1, "", "__pow__", "Return pow(self, value, mod)."], [291, 2, 1, "", "__radd__", "Return value+self."], [292, 2, 1, "", "__rand__", "Return value&self."], [293, 2, 1, "", "__rdivmod__", "Return divmod(value, self)."], [294, 2, 1, "", "__repr__", "Return repr(self)."], [295, 2, 1, "", "__rfloordiv__", "Return value//self."], [296, 2, 1, "", "__rlshift__", "Return value<<self."], [297, 2, 1, "", "__rmod__", "Return value%self."], [298, 2, 1, "", "__rmul__", "Return value*self."], [299, 2, 1, "", "__ror__", "Return value|self."], [300, 2, 1, "", "__rpow__", "Return pow(value, self, mod)."], [301, 2, 1, "", "__rrshift__", "Return value>>self."], [302, 2, 1, "", "__rshift__", "Return self>>value."], [303, 2, 1, "", "__rsub__", "Return value-self."], [304, 2, 1, "", "__rtruediv__", "Return value/self."], [305, 2, 1, "", "__rxor__", "Return value^self."], [306, 2, 1, "", "__str__", "Return str(self)."], [307, 2, 1, "", "__sub__", "Return self-value."], [308, 2, 1, "", "__truediv__", "Return self/value."], [309, 2, 1, "", "__xor__", "Return self^value."], [310, 2, 1, "", "bit_count", "Computes the number of 1-bits in the absolute value of the input. Analogous to the builtin int.bit_count or popcount in C++."], [311, 1, 1, "", "denominator", "denominator of value (1)"], [312, 2, 1, "", "is_integer", "Return True if the number is finite with integral value."], [313, 1, 1, "", "numerator", "numerator of value (the value itself)"]], "foxes.core": [[0, 3, 1, "", "Algorithm", "Abstract base class for algorithms."], [14, 3, 1, "", "Data", "Container for data and meta data."], [22, 3, 1, "", "DataCalcModel", "Abstract base class for models with that run calculation on xarray Dataset data."], [25, 3, 1, "", "ExtendedStates", "States extended by point data models."], [35, 3, 1, "", "FarmController", "Analyses selected turbine models and handles their call."], [44, 3, 1, "", "FarmDataModel", "Abstract base class for models that modify farm data."], [49, 3, 1, "", "FarmDataModelList", "A list of farm data models."], [57, 3, 1, "", "FarmModel", "A FarmDataModel that operates on the farm level (in contrast to a TurbineModel, which allows application to a subset of turbines)."], [58, 3, 1, "", "Model", "Base class for all models."], [71, 3, 1, "", "PartialWakesModel", "Abstract base class for partial wakes models."], [79, 3, 1, "", "PointDataModel", "Abstract base class for models that modify point based data."], [83, 3, 1, "", "PointDataModelList", "A list of point data models."], [91, 3, 1, "", "RotorModel", "Abstract base class of rotor models."], [100, 3, 1, "", "States", "Abstract base class for states."], [105, 3, 1, "", "Turbine", "An individual wind turbine."], [109, 3, 1, "", "TurbineModel", "Abstract base class for turbine models."], [111, 3, 1, "", "TurbineType", "Abstract base class for turbine type models."], [113, 3, 1, "", "VerticalProfile", "Abstract base class for vertical profiles."], [117, 3, 1, "", "WakeFrame", "Abstract base class for wake frames."], [122, 3, 1, "", "WakeModel", "Abstract base class for wake models."], [126, 3, 1, "", "WakeSuperposition", "Abstract base class for wake superposition models."], [129, 3, 1, "", "WindFarm", "The wind farm."]], "foxes.core.Algorithm": [[1, 2, 1, "", "__init__", "Constructor."], [2, 2, 1, "", "chunked", ""], [3, 2, 1, "", "cleanup", "Cleanup after calculation"], [4, 2, 1, "", "finalize", "Finalizes the algorithm."], [5, 2, 1, "", "finalize_model", "Call the finalization routine of the model, if not to be kept."], [6, 2, 1, "", "get_models_data", "Creates xarray from model input data."], [7, 4, 1, "", "idata_mem", "The current idata memory"], [8, 2, 1, "", "initialize", "Initializes the algorithm."], [9, 2, 1, "", "new", "Run-time algorithm factory."], [10, 2, 1, "", "new_point_data", "Creates a point data xarray object, containing only points."], [11, 2, 1, "", "print", "Print function, based on verbosity."], [12, 2, 1, "", "update_idata", "Add to idata memory, optionally update and return idata object."], [13, 2, 1, "", "update_n_turbines", "Reset the number of turbines, according to self.farm"]], "foxes.core.Data": [[15, 2, 1, "", "__init__", "Constructor."], [16, 2, 1, "", "add", "Add data entry"], [17, 2, 1, "", "from_points", "Create from points"], [18, 4, 1, "", "n_points", "The number of points"], [19, 4, 1, "", "n_states", "The number of states"], [20, 4, 1, "", "n_turbines", "The number of turbines"], [21, 2, 1, "", "states_i0", "Get the state counter for first state in chunk"]], "foxes.core.DataCalcModel": [[23, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [24, 2, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.ExtendedStates": [[26, 2, 1, "", "__init__", "Constructor."], [27, 2, 1, "", "append", "Add a model to the list"], [28, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [29, 2, 1, "", "finalize", "Finalizes the model."], [30, 2, 1, "", "index", "The index list"], [31, 2, 1, "", "initialize", "Initializes the model."], [32, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [33, 2, 1, "", "size", "The total number of states."], [34, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.FarmController": [[36, 2, 1, "", "__init__", "Constructor."], [37, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [38, 2, 1, "", "collect_models", "Analyze and gather turbine models, based on the turbines of the wind farm."], [39, 2, 1, "", "finalize", "Finalizes the model."], [40, 2, 1, "", "initialize", "Initializes the model."], [41, 2, 1, "", "keep", "Add model and all sub models to the keep_models list"], [42, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [43, 2, 1, "", "set_pars", "Set parameters for a turbine model"]], "foxes.core.FarmDataModel": [[45, 2, 1, "", "__init__", "Constructor."], [46, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [47, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [48, 2, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.FarmDataModelList": [[50, 2, 1, "", "__init__", "Constructor."], [51, 2, 1, "", "append", "Add a model to the list"], [52, 2, 1, "", "calculate", "The main model calculation."], [53, 2, 1, "", "finalize", "Finalizes the model."], [54, 2, 1, "", "initialize", "Initializes the model."], [55, 2, 1, "", "keep", "Add model and all sub models to the keep_models list"], [56, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.core.Model": [[59, 2, 1, "", "__init__", "Constructor."], [60, 2, 1, "", "__repr__", "Return repr(self)."], [61, 2, 1, "", "data_to_store", "Adds data from mdata to the local store, intended for iterative runs."], [62, 2, 1, "", "finalize", "Finalizes the model."], [63, 2, 1, "", "from_data_or_store", "Get data from mdata or local store"], [64, 2, 1, "", "get_data", "Getter for a data entry in the model object or provided data sources"], [65, 2, 1, "", "initialize", "Initializes the model."], [66, 4, 1, "", "initialized", "Initialization flag."], [67, 2, 1, "", "keep", "Add model and all sub models to the keep_models list"], [68, 4, 1, "", "model_id", "Unique id based on the model type."], [69, 2, 1, "", "reduce_states", "Modifies the given objects by selecting a subset of states."], [70, 2, 1, "", "var", "Creates a model specific variable name."]], "foxes.core.PartialWakesModel": [[72, 2, 1, "", "__init__", "Constructor."], [73, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [74, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [75, 2, 1, "", "initialize", "Initializes the model."], [76, 2, 1, "", "keep", "Add model and all sub models to the keep_models list"], [77, 2, 1, "", "new", "Run-time partial wakes factory."], [78, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.core.PointDataModel": [[80, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [81, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [82, 2, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.PointDataModelList": [[84, 2, 1, "", "__init__", "Constructor."], [85, 2, 1, "", "append", "Add a model to the list"], [86, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [87, 2, 1, "", "finalize", "Finalizes the model."], [88, 2, 1, "", "initialize", "Initializes the model."], [89, 2, 1, "", "keep", "Add model and all sub models to the keep_models list"], [90, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.core.RotorModel": [[92, 2, 1, "", "__init__", "Constructor."], [93, 2, 1, "", "calculate", "Calculate ambient rotor effective results."], [94, 2, 1, "", "design_points", "The rotor model design points."], [95, 2, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [96, 2, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [97, 2, 1, "", "n_rotor_points", "The number of rotor points"], [98, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [99, 2, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.core.States": [[101, 2, 1, "", "index", "The index list"], [102, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [103, 2, 1, "", "size", "The total number of states."], [104, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.Turbine": [[106, 2, 1, "", "__init__", "Constructor."], [107, 2, 1, "", "add_model", "Add a turbine model to the list."], [108, 2, 1, "", "insert_model", "Insert a turbine model into the list of models."]], "foxes.core.TurbineModel": [[110, 2, 1, "", "calculate", "The main model calculation."]], "foxes.core.TurbineType": [[112, 2, 1, "", "__init__", "Constructor."]], "foxes.core.VerticalProfile": [[114, 2, 1, "", "calculate", "Run the profile calculation."], [115, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."], [116, 2, 1, "", "new", "Run-time profile factory."]], "foxes.core.WakeFrame": [[118, 2, 1, "", "calc_centreline_integral", "Integrates variables along the centreline."], [119, 2, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [120, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [121, 2, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.core.WakeModel": [[123, 2, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [124, 2, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [125, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.core.WakeSuperposition": [[127, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [128, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.core.WindFarm": [[130, 2, 1, "", "__init__", "Constructor."], [131, 2, 1, "", "add_turbine", "Add a wind turbine to the list."], [132, 4, 1, "", "n_turbines", "The number of turbines in the wind farm"], [133, 4, 1, "", "turbine_names", "The list of names of all turbines"]], "foxes.data": [[134, 3, 1, "", "StaticData", "A DataBook filled with static data from this directory."], [136, 5, 1, "", "parse_Pct_file_name", "Parse basic turbine data from file name"], [137, 5, 1, "", "parse_Pct_two_files", "Parse basic turbine data from file names"]], "foxes.data.StaticData": [[135, 2, 1, "", "__init__", "Constructor."]], "foxes.input.farm_layout": [[385, 5, 1, "", "add_from_csv", "Add turbines to wind farm via csv input file."], [386, 5, 1, "", "add_from_df", "Add turbines to wind farm via pandas DataFrame."], [387, 5, 1, "", "add_from_file", "Add turbines from file."], [388, 5, 1, "", "add_from_json", "Add turbimes from a json file."], [389, 5, 1, "", "add_grid", "Add a regular grid of turbines."], [390, 5, 1, "", "add_row", "Add a single row of turbines."]], "foxes.input.states": [[391, 3, 1, "", "FieldDataNC", "Heterogeneous ambient states on a regular horizontal grid in NetCDF format."], [399, 3, 1, "", "MultiHeightStates", "States with multiple heights data per entry."], [410, 3, 1, "", "MultiHeightTimeseries", "Multi-height timeseries states data."], [412, 3, 1, "", "ScanWS", "A given list of wind speeds, all other variables are fixed."], [419, 3, 1, "", "SingleStateStates", "A single uniform state."], [426, 3, 1, "", "StatesTable", "States from a pandas.DataFrame or a pandas readable file."], [437, 3, 1, "", "Timeseries", "Timeseries states data."], [439, 5, 1, "", "create_random_abl_states", "Create random abl states."]], "foxes.input.states.FieldDataNC": [[392, 2, 1, "", "__init__", "Constructor."], [393, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [394, 2, 1, "", "index", "The index list"], [395, 2, 1, "", "initialize", "Initializes the model."], [396, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [397, 2, 1, "", "size", "The total number of states."], [398, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightStates": [[400, 1, 1, "", "RDICT", ""], [401, 2, 1, "", "__init__", "Constructor."], [402, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [403, 2, 1, "", "finalize", "Finalizes the model."], [404, 2, 1, "", "index", "The index list"], [405, 2, 1, "", "initialize", "Initializes the model."], [406, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [407, 2, 1, "", "reset", "Reset the states, optionally select states"], [408, 2, 1, "", "size", "The total number of states."], [409, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightTimeseries": [[411, 1, 1, "", "RDICT", ""]], "foxes.input.states.ScanWS": [[413, 2, 1, "", "__init__", "Constructor."], [414, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [415, 2, 1, "", "initialize", "Initializes the model."], [416, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [417, 2, 1, "", "size", "The total number of states."], [418, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.SingleStateStates": [[420, 2, 1, "", "__init__", "Constructor."], [421, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [422, 2, 1, "", "initialize", "Initializes the model."], [423, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [424, 2, 1, "", "size", "The total number of states."], [425, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.StatesTable": [[427, 1, 1, "", "RDICT", ""], [428, 2, 1, "", "__init__", "Constructor."], [429, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [430, 2, 1, "", "finalize", "Finalizes the model."], [431, 2, 1, "", "index", "The index list"], [432, 2, 1, "", "initialize", "Initializes the model."], [433, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [434, 2, 1, "", "reset", "Reset the states, optionally select states"], [435, 2, 1, "", "size", "The total number of states."], [436, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.Timeseries": [[438, 1, 1, "", "RDICT", ""]], "foxes.input.windio": [[440, 5, 1, "", "read_case", "Reads a WindIO case"]], "foxes.models.farm_controllers": [[441, 3, 1, "", "BasicFarmController", "The basic farm controller, running all turbine models in their order, without conditions."]], "foxes.models.farm_models": [[442, 3, 1, "", "Turbine2FarmModel", "Wrapper that promotes turbine models into farm models, simply by selecting all turbines."]], "foxes.models.farm_models.Turbine2FarmModel": [[443, 2, 1, "", "__init__", "Constructor."], [444, 2, 1, "", "__repr__", "Return repr(self)."], [445, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [446, 2, 1, "", "finalize", "Finalizes the model."], [447, 2, 1, "", "initialize", "Initializes the model."], [448, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.model_book": [[449, 3, 1, "", "Dict", "A slightly enhanced dictionary."], [452, 3, 1, "", "ModelBook", "Container for all kinds of models."]], "foxes.models.model_book.Dict": [[450, 2, 1, "", "__getitem__", "x.__getitem__(y) <==> x[y]"], [451, 2, 1, "", "__init__", "Constructor."]], "foxes.models.model_book.ModelBook": [[453, 2, 1, "", "__getitem__", ""], [454, 2, 1, "", "__init__", "Constructor."], [455, 2, 1, "", "finalize", "Finalizes the model."], [456, 2, 1, "", "print_toc", "Print the contents."]], "foxes.models.partial_wakes": [[457, 3, 1, "", "Mapped", "Partial wake models depending on the wake model (type)."], [465, 3, 1, "", "PartialAxiwake", "Partial wake calculation for axial wake models."], [474, 3, 1, "", "PartialDistSlicedWake", "Partial wakes for distance sliced wake models, making use of their structure."], [483, 3, 1, "", "PartialGrid", "Partial wakes on a grid rotor that may differ from the one in the algorithm."], [486, 3, 1, "", "PartialTopHat", "Partial wakes for top-hat models."], [494, 3, 1, "", "RotorPoints", "Partial wakes calculation directly by the rotor model."]], "foxes.models.partial_wakes.Mapped": [[458, 2, 1, "", "__init__", "Constructor."], [459, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [460, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [461, 2, 1, "", "finalize", "Finalizes the model."], [462, 2, 1, "", "initialize", "Initializes the model."], [463, 2, 1, "", "keep", "Add model and all sub models to the keep_models list"], [464, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialAxiwake": [[466, 2, 1, "", "__init__", "Constructor."], [467, 2, 1, "", "__repr__", "Return repr(self)."], [468, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [469, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [470, 2, 1, "", "finalize", "Finalizes the model."], [471, 2, 1, "", "initialize", "Initializes the model."], [472, 2, 1, "", "keep", "Add model and all sub models to the keep_models list"], [473, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialDistSlicedWake": [[475, 2, 1, "", "__init__", "Constructor."], [476, 2, 1, "", "__repr__", "Return repr(self)."], [477, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [478, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [479, 2, 1, "", "finalize", "Finalizes the model."], [480, 2, 1, "", "initialize", "Initializes the model."], [481, 2, 1, "", "keep", "Add model and all sub models to the keep_models list"], [482, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialGrid": [[484, 2, 1, "", "__init__", "Constructor."], [485, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes.PartialTopHat": [[487, 2, 1, "", "__init__", "Constructor."], [488, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [489, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [490, 2, 1, "", "finalize", "Finalizes the model."], [491, 2, 1, "", "initialize", "Initializes the model."], [492, 2, 1, "", "keep", "Add model and all sub models to the keep_models list"], [493, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.RotorPoints": [[495, 2, 1, "", "__init__", "Constructor."], [496, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [497, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [498, 2, 1, "", "get_wake_points", "Get the wake calculation points."], [499, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.point_models": [[500, 3, 1, "", "SetUniformData", "Set uniform data (can be state dependent)"], [505, 3, 1, "", "TKE2TI", "Calculates TI from TKE, using TI = sqrt( 3/2 * TKE) / WS"], [508, 3, 1, "", "WakeDeltas", "This point model simply subtracts ambient results from waked results."]], "foxes.models.point_models.SetUniformData": [[501, 2, 1, "", "__init__", "Constructor."], [502, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [503, 2, 1, "", "initialize", "Initializes the model."], [504, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.TKE2TI": [[506, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [507, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.WakeDeltas": [[509, 2, 1, "", "__init__", "Constructor."], [510, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [511, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.rotor_models": [[512, 3, 1, "", "CentreRotor", "The centre rotor model."], [518, 3, 1, "", "GridRotor", "The weighted regular grid rotor model, composed maximally of n x n points, possibly kicking out the outside points."]], "foxes.models.rotor_models.CentreRotor": [[513, 2, 1, "", "design_points", "The rotor model design points."], [514, 2, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [515, 2, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [516, 2, 1, "", "n_rotor_points", "The number of rotor points"], [517, 2, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.GridRotor": [[519, 2, 1, "", "__init__", "Constructor."], [520, 2, 1, "", "__repr__", "Return repr(self)."], [521, 2, 1, "", "design_points", "The rotor model design points."], [522, 2, 1, "", "initialize", "Initializes the model."], [523, 2, 1, "", "n_rotor_points", "The number of rotor points"], [524, 2, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.turbine_models": [[525, 3, 1, "", "Calculator", "Calculates variables based on given functions."], [529, 3, 1, "", "LookupTable", "Calculates the data by interpolation of lookup-table data"], [534, 3, 1, "", "PowerMask", "Invokes a maximal power value."], [540, 3, 1, "", "RotorCentreCalc", "Calculates data at the rotor centre"], [546, 3, 1, "", "SectorManagement", "Changes variables based on variable range conditions."], [551, 3, 1, "", "SetFarmVars", "Set farm data variables to given data."], [558, 3, 1, "", "SetXYHD", "Sets basic turbine data, from turbine object to farm data."], [562, 3, 1, "", "TableFactors", "Multiplies variables by factors from a two dimensional table."], [567, 3, 1, "", "Thrust2Ct", "Calculates ct from thrust force data."], [571, 3, 1, "", "YAW2YAWM", "Calculates delta yaw (i.e. YAWM) from absolute yaw (i.e. YAW)"], [574, 3, 1, "", "YAWM2YAW", "Calculates absolute yaw (i.e. YAWM) from delta yaw (i.e. YAWM)"], [577, 3, 1, "", "kTI", "Calculates the wake model parameter k as a linear function of TI."]], "foxes.models.turbine_models.Calculator": [[526, 2, 1, "", "__init__", "Constructor."], [527, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [528, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.LookupTable": [[530, 2, 1, "", "__init__", "Constructor."], [531, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [532, 2, 1, "", "initialize", "Initializes the model."], [533, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.PowerMask": [[535, 2, 1, "", "__init__", "Constructor."], [536, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [537, 2, 1, "", "initialize", "Initializes the model."], [538, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [539, 2, 1, "", "update_P_ct", ""]], "foxes.models.turbine_models.RotorCentreCalc": [[541, 2, 1, "", "__init__", "Constructor."], [542, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [543, 2, 1, "", "finalize", "Finalizes the model."], [544, 2, 1, "", "initialize", "Initializes the model."], [545, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SectorManagement": [[547, 2, 1, "", "__init__", "Constructor."], [548, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [549, 2, 1, "", "initialize", "Initializes the model."], [550, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SetFarmVars": [[552, 2, 1, "", "__init__", "Constructor."], [553, 2, 1, "", "add_var", "Add data for a variable."], [554, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [555, 2, 1, "", "initialize", "Initializes the model."], [556, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [557, 2, 1, "", "reset", "Remove all variables."]], "foxes.models.turbine_models.SetXYHD": [[559, 2, 1, "", "__init__", "Constructor."], [560, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [561, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.TableFactors": [[563, 2, 1, "", "__init__", "Constructor."], [564, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [565, 2, 1, "", "initialize", "Initializes the model."], [566, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.Thrust2Ct": [[568, 2, 1, "", "__init__", "Constructor."], [569, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [570, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAW2YAWM": [[572, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [573, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAWM2YAW": [[575, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [576, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.kTI": [[578, 2, 1, "", "__init__", "Constructor."], [579, 2, 1, "", "__repr__", "Return repr(self)."], [580, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [581, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types": [[582, 3, 1, "", "CpCtFile", "Calculate power and ct by interpolating from cp-ct-curve data file (or pandas DataFrame)."], [584, 3, 1, "", "CpCtFromTwo", "Calculate power and ct by interpolating cp and ct from two files (or two pandas DataFrames)."], [586, 3, 1, "", "NullType", "A turbine type that does not compute any data."], [589, 3, 1, "", "PCtFile", "Calculate power and ct by interpolating from power-ct-curve data file (or pandas DataFrame)."], [595, 3, 1, "", "PCtFromTwo", "Calculate power and ct by interpolating from power curve and ct curve data files."], [601, 3, 1, "", "WsRho2PCtFromTwo", "Calculate air density dependent power and ct values, as given by two individual files."]], "foxes.models.turbine_types.CpCtFile": [[583, 2, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.CpCtFromTwo": [[585, 2, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.NullType": [[587, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [588, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFile": [[590, 2, 1, "", "__init__", "Constructor."], [591, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [592, 2, 1, "", "finalize", "Finalizes the model."], [593, 2, 1, "", "initialize", "Initializes the model."], [594, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFromTwo": [[596, 2, 1, "", "__init__", "Constructor."], [597, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [598, 2, 1, "", "finalize", "Finalizes the model."], [599, 2, 1, "", "initialize", "Initializes the model."], [600, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsRho2PCtFromTwo": [[602, 2, 1, "", "__init__", "Constructor."], [603, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [604, 2, 1, "", "finalize", "Finalizes the model."], [605, 2, 1, "", "initialize", "Initializes the model."], [606, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.vertical_profiles": [[607, 3, 1, "", "ABLLogNeutralWsProfile", "The neutral ABL wind speed log profile."], [610, 3, 1, "", "ABLLogStableWsProfile", "The stable ABL wind speed log profile."], [613, 3, 1, "", "ABLLogUnstableWsProfile", "The unstable ABL wind speed log profile."], [616, 3, 1, "", "ABLLogWsProfile", "The neutral/stable/unstable ABL wind speed log profile."], [619, 3, 1, "", "ShearedProfile", "A wind shear profile, based on a shear exponent."], [622, 3, 1, "", "UniformProfile", "A profile with uniform values."]], "foxes.models.vertical_profiles.ABLLogNeutralWsProfile": [[608, 2, 1, "", "calculate", "Run the profile calculation."], [609, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogStableWsProfile": [[611, 2, 1, "", "calculate", "Run the profile calculation."], [612, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogUnstableWsProfile": [[614, 2, 1, "", "calculate", "Run the profile calculation."], [615, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogWsProfile": [[617, 2, 1, "", "calculate", "Run the profile calculation."], [618, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ShearedProfile": [[620, 2, 1, "", "calculate", "Run the profile calculation."], [621, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.UniformProfile": [[623, 2, 1, "", "__init__", "Constructor"], [624, 2, 1, "", "calculate", "Run the profile calculation."], [625, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.wake_frames": [[626, 3, 1, "", "FarmOrder", "Invokes turbine ordering as defined by the wind farm."], [633, 3, 1, "", "RotorWD", "Align the first axis for each rotor with the local normalized wind direction."], [638, 3, 1, "", "Streamlines", "Streamline following wakes"], [645, 3, 1, "", "Timelines", "Dynamic wakes for spatially uniform timeseries states."], [651, 3, 1, "", "YawedWakes", "Bend the wakes for yawed turbines."]], "foxes.models.wake_frames.FarmOrder": [[627, 2, 1, "", "__init__", "Constructor."], [628, 2, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [629, 2, 1, "", "finalize", "Finalizes the model."], [630, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [631, 2, 1, "", "get_wake_coos", "Calculate wake coordinates."], [632, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.RotorWD": [[634, 2, 1, "", "__init__", "Constructor."], [635, 2, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [636, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [637, 2, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.models.wake_frames.Streamlines": [[639, 2, 1, "", "__init__", "Constructor."], [640, 2, 1, "", "__repr__", "Return repr(self)."], [641, 2, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [642, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [643, 2, 1, "", "get_wake_coos", "Calculate wake coordinates."], [644, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.Timelines": [[646, 2, 1, "", "__init__", "Constructor."], [647, 2, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [648, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [649, 2, 1, "", "get_wake_coos", "Calculate wake coordinates."], [650, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.YawedWakes": [[652, 2, 1, "", "__init__", "Constructor."], [653, 2, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [654, 2, 1, "", "finalize", "Finalizes the model."], [655, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [656, 2, 1, "", "get_wake_coos", "Calculate wake coordinates."], [657, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_models": [[658, 3, 1, "", "AxisymmetricWakeModel", "Abstract base class for wake models that depend on (x, r) separately."], [661, 3, 1, "", "DistSlicedWakeModel", "Abstract base class for wake models for which the x-denpendency can be separated from the yz-dependency."], [669, 3, 1, "", "GaussianWakeModel", "Abstract base class for Gaussian wake models."], [672, 3, 1, "", "TopHatWakeModel", "Abstract base class for top-hat wake models."]], "foxes.models.wake_models.AxisymmetricWakeModel": [[659, 2, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."], [660, 2, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."]], "foxes.models.wake_models.DistSlicedWakeModel": [[662, 2, 1, "", "__init__", "Constructor."], [663, 2, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [664, 2, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [665, 2, 1, "", "finalize", "Finalizes the model."], [666, 2, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [667, 2, 1, "", "initialize", "Initializes the model."], [668, 2, 1, "", "keep", "Add model and all sub models to the keep_models list"]], "foxes.models.wake_models.GaussianWakeModel": [[670, 2, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [671, 2, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.TopHatWakeModel": [[673, 2, 1, "", "__init__", "Constructor."], [674, 2, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [675, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [676, 2, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.ti": [[677, 3, 1, "", "CrespoHernandezTIWake", "The Crespo and Hernandez TI empirical correlation"], [683, 3, 1, "", "IECTIWake", "The TI wake model from IEC-64100-1-2005-8 (2005):"]], "foxes.models.wake_models.ti.CrespoHernandezTIWake": [[678, 2, 1, "", "__init__", "Constructor."], [679, 2, 1, "", "__repr__", "Return repr(self)."], [680, 2, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [681, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [682, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.ti.IECTIWake": [[684, 2, 1, "", "__init__", "Constructor."], [685, 2, 1, "", "__repr__", "Return repr(self)."], [686, 2, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [687, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [688, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind": [[689, 3, 1, "", "BastankhahWake", "The Bastankhah wake model"], [694, 3, 1, "", "JensenWake", "The Jensen wake model."], [700, 3, 1, "", "PorteAgelModel", "Common calculations for the wake model and the wake frame, such that code repetitions can be avoided."], [721, 3, 1, "", "PorteAgelWake", "The Bastankhah PorteAgel wake model"], [726, 3, 1, "", "TurbOParkWake", "The TurbOPark wake model"], [731, 3, 1, "", "TurbOParkWakeIX", "The generalized TurbOPark wake model, integrating TI over the streamline."]], "foxes.models.wake_models.wind.BastankhahWake": [[690, 2, 1, "", "__init__", "Constructor."], [691, 2, 1, "", "__repr__", "Return repr(self)."], [692, 2, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [693, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.JensenWake": [[695, 2, 1, "", "__init__", "Constructor."], [696, 2, 1, "", "__repr__", "Return repr(self)."], [697, 2, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [698, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [699, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.PorteAgelModel": [[701, 1, 1, "", "AMPL_FAR", ""], [702, 1, 1, "", "AMPL_NEAR", ""], [703, 1, 1, "", "CHECK", ""], [704, 1, 1, "", "DELTA_FAR", ""], [705, 1, 1, "", "DELTA_NEAR", ""], [706, 1, 1, "", "MDATA_KEY", ""], [707, 1, 1, "", "NEAR", ""], [708, 1, 1, "", "PARS", ""], [709, 1, 1, "", "R_PC", ""], [710, 1, 1, "", "R_PC_S", ""], [711, 1, 1, "", "SIGMA_Y_FAR", ""], [712, 1, 1, "", "SIGMA_Z_FAR", ""], [713, 1, 1, "", "SP_SEL", ""], [714, 1, 1, "", "X0", ""], [715, 2, 1, "", "__init__", "Constructor."], [716, 2, 1, "", "calc_data", "Calculate common model data, store it in mdata."], [717, 2, 1, "", "clean", "Clean all data"], [718, 2, 1, "", "get_data", "Return data entry"], [719, 2, 1, "", "has_data", "Check if data exists"], [720, 4, 1, "", "pars", "Dictionary of the model parameters"]], "foxes.models.wake_models.wind.PorteAgelWake": [[722, 2, 1, "", "__init__", "Constructor."], [723, 2, 1, "", "__repr__", "Return repr(self)."], [724, 2, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [725, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWake": [[727, 2, 1, "", "__init__", "Constructor."], [728, 2, 1, "", "__repr__", "Return repr(self)."], [729, 2, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [730, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWakeIX": [[732, 2, 1, "", "__init__", "Constructor."], [733, 2, 1, "", "__repr__", "Return repr(self)."], [734, 2, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [735, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_superpositions": [[736, 3, 1, "", "LinearSuperposition", "Linear supersposition of wake model results, optionally rescaled."], [741, 3, 1, "", "MaxSuperposition", "Maximum supersposition of wake model results, optionally rescaled."], [747, 3, 1, "", "ProductSuperposition", "Product wind wake superposition."], [751, 3, 1, "", "QuadraticSuperposition", "Quadratic supersposition of wake model results, optionally rescaled."], [757, 3, 1, "", "TISuperposition", "A collection of superpositions for TI."]], "foxes.models.wake_superpositions.LinearSuperposition": [[737, 2, 1, "", "__init__", "Constructor."], [738, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [739, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [740, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.MaxSuperposition": [[742, 2, 1, "", "__init__", "Constructor."], [743, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [744, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [745, 2, 1, "", "initialize", "Initializes the model."], [746, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.ProductSuperposition": [[748, 2, 1, "", "__init__", "Constructor."], [749, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [750, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.QuadraticSuperposition": [[752, 2, 1, "", "__init__", "Constructor."], [753, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [754, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [755, 2, 1, "", "initialize", "Initializes the model."], [756, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.TISuperposition": [[758, 2, 1, "", "__init__", "Constructor."], [759, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [760, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.opt.constraints": [[896, 3, 1, "", "AreaGeometryConstraint", "Constrains turbine positions to the inside of a given area geometry."], [917, 3, 1, "", "FarmBoundaryConstraint", "Constrains turbine positions to the inside of the wind farm boundary"], [919, 3, 1, "", "MinDistConstraint", "Turbines must keep at least a minimal spatial distance."]], "foxes.opt.constraints.AreaGeometryConstraint": [[897, 2, 1, "", "__init__", "Constructor."], [898, 2, 1, "", "__str__", "Get info string"], [899, 2, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [900, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [901, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [902, 4, 1, "", "component_names", "The names of the components"], [903, 2, 1, "", "finalize", "Finalize the object."], [904, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [905, 2, 1, "", "finalize_population", "Finalization, given the final population data."], [906, 2, 1, "", "initialize", "Initialize the object."], [907, 4, 1, "", "initialized", "Flag for finished initialization"], [908, 2, 1, "", "n_components", "Returns the number of components of the function."], [909, 4, 1, "", "n_vars_float", "The number of float variables"], [910, 4, 1, "", "n_vars_int", "The number of int variables"], [911, 2, 1, "", "rename_vars_float", "Rename float variables."], [912, 2, 1, "", "rename_vars_int", "Rename integer variables."], [913, 4, 1, "", "var_names_float", "The names of the float variables"], [914, 4, 1, "", "var_names_int", "The names of the integer variables"], [915, 2, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [916, 2, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "foxes.opt.constraints.FarmBoundaryConstraint": [[918, 2, 1, "", "__init__", "Constructor."]], "foxes.opt.constraints.MinDistConstraint": [[920, 2, 1, "", "__init__", "Constructor."], [921, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [922, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [923, 2, 1, "", "initialize", "Initialize the constaint."], [924, 2, 1, "", "n_components", "Returns the number of components of the function."], [925, 2, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core": [[926, 3, 1, "", "FarmConstraint", "Abstract base class for foxes wind farm optimization constraints."], [937, 3, 1, "", "FarmObjective", "Abstract base class for foxes wind farm objective functions."], [944, 3, 1, "", "FarmOptProblem", "Abstract base class of wind farm optimization problems."], [986, 3, 1, "", "FarmVarsProblem", "Abstract base class for models that optimize farm variables."], [992, 3, 1, "", "PopStates", "Helper class for vectorized opt population calculation, via artificial states of length n_pop times n_states."]], "foxes.opt.core.FarmConstraint": [[927, 2, 1, "", "__init__", "Constructor."], [928, 2, 1, "", "add_to_layout_figure", "Add to a layout figure"], [929, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [930, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [931, 4, 1, "", "farm", "The wind farm"], [932, 2, 1, "", "n_components", "Returns the number of components of the function."], [933, 4, 1, "", "n_sel_turbines", "The numer of selected turbines"], [934, 2, 1, "", "print_models", "Prints all model names."], [935, 4, 1, "", "sel_turbines", "The list of selected turbines"], [936, 2, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core.FarmObjective": [[938, 2, 1, "", "__init__", "Constraints."], [939, 2, 1, "", "add_to_layout_figure", "Add to a layout figure"], [940, 4, 1, "", "farm", "The wind farm"], [941, 4, 1, "", "n_sel_turbines", "The numer of selected turbines"], [942, 2, 1, "", "print_models", "Prints all model names."], [943, 4, 1, "", "sel_turbines", "The list of selected turbines"]], "foxes.opt.core.FarmOptProblem": [[945, 1, 1, "", "INT_INF", ""], [946, 2, 1, "", "__init__", "Constructor."], [947, 2, 1, "", "add_constraint", "Add a constraint to the problem."], [948, 2, 1, "", "add_objective", "Add an objective to the problem."], [949, 2, 1, "", "add_to_layout_figure", "Add to a layout figure"], [950, 4, 1, "", "all_turbines", "Flag for all turbines optimization"], [951, 2, 1, "", "apply_individual", "Apply new variables to the problem."], [952, 2, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [953, 2, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [954, 2, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [955, 2, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [956, 4, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [957, 4, 1, "", "counter", "The current value of the application counter"], [958, 2, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [959, 2, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [960, 4, 1, "", "farm", "The wind farm"], [961, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [962, 2, 1, "", "finalize_population", "Finalization, given the final population data."], [963, 2, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [964, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [965, 2, 1, "", "initial_values_int", "The initial values of the integer variables."], [966, 2, 1, "", "initialize", "Initialize the object."], [967, 4, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [968, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [969, 2, 1, "", "max_values_int", "The maximal values of the integer variables."], [970, 4, 1, "", "maximize_objs", "Flags for objective maximization"], [971, 4, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [972, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [973, 2, 1, "", "min_values_int", "The minimal values of the integer variables."], [974, 4, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [975, 4, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [976, 4, 1, "", "n_sel_turbines", "The numer of selected turbines"], [977, 4, 1, "", "n_vars_float", "The number of float variables"], [978, 4, 1, "", "n_vars_int", "The number of int variables"], [979, 2, 1, "", "parse_tvar", "Parse foxes variable name and turbine index from turbine variable"], [980, 4, 1, "", "sel_turbines", "The selected turbines"], [981, 2, 1, "", "tvar", "Gets turbine variable name"], [982, 2, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [983, 2, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [984, 2, 1, "", "var_names_float", "The names of float variables."], [985, 2, 1, "", "var_names_int", "The names of integer variables."]], "foxes.opt.core.FarmVarsProblem": [[987, 2, 1, "", "initialize", "Initialize the object."], [988, 2, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [989, 2, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [990, 2, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [991, 2, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."]], "foxes.opt.core.PopStates": [[993, 2, 1, "", "__init__", "Constructor."], [994, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [995, 2, 1, "", "initialize", "Initializes the model."], [996, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [997, 2, 1, "", "size", "The total number of states."], [998, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.opt.objectives": [[999, 3, 1, "", "FarmVarObjective", "Objectives based on farm variables."], [1008, 3, 1, "", "MaxFarmPower", "Maximize the mean wind farm power"], [1010, 3, 1, "", "MaxNTurbines", "Maximizes the number of turrbines."], [1016, 3, 1, "", "MinimalMaxTI", "Minimize the maximal turbine TI"]], "foxes.opt.objectives.FarmVarObjective": [[1000, 2, 1, "", "__init__", "Constructor."], [1001, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1002, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1003, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [1004, 2, 1, "", "initialize", "Initialize the object."], [1005, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1006, 2, 1, "", "n_components", "Returns the number of components of the function."], [1007, 2, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.objectives.MaxFarmPower": [[1009, 2, 1, "", "__init__", "Constructor."]], "foxes.opt.objectives.MaxNTurbines": [[1011, 2, 1, "", "__init__", "Constructor."], [1012, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1013, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1014, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1015, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.objectives.MinimalMaxTI": [[1017, 2, 1, "", "__init__", "Constructor."]], "foxes.opt.problems": [[1018, 3, 1, "", "OptFarmVars", "Optimize a selection of farm variables."]], "foxes.opt.problems.OptFarmVars": [[1019, 2, 1, "", "__init__", "Constructor."], [1020, 2, 1, "", "add_var", "Add a variable."], [1021, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1022, 2, 1, "", "initial_values_int", "The initial values of the int variables."], [1023, 2, 1, "", "initialize", "Initialize the object."], [1024, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1025, 2, 1, "", "max_values_int", "The maximal values of the integer variables."], [1026, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1027, 2, 1, "", "min_values_int", "The minimal values of the integer variables."], [1028, 2, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1029, 2, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1030, 2, 1, "", "var_names_float", "The names of float variables."], [1031, 2, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout": [[1157, 3, 1, "", "FarmLayoutOptProblem", "The turbine positioning optimization problem"], [1166, 3, 1, "", "RegGridsLayoutOptProblem", "Places turbines on several regular grids and optimizes their parameters."], [1182, 3, 1, "", "RegularLayoutOptProblem", "Places turbines on a regular grid and optimizes its parameters."]], "foxes.opt.problems.layout.FarmLayoutOptProblem": [[1158, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [1159, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1160, 2, 1, "", "initialize", "Initialize the object."], [1161, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1162, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1163, 2, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1164, 2, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1165, 2, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.RegGridsLayoutOptProblem": [[1167, 2, 1, "", "__init__", "Constraints."], [1168, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [1169, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1170, 2, 1, "", "initial_values_int", "The initial values of the int variables."], [1171, 2, 1, "", "initialize", "Initialize the object."], [1172, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1173, 2, 1, "", "max_values_int", "The maximal values of the integer variables."], [1174, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1175, 2, 1, "", "min_values_int", "The minimal values of the integer variables."], [1176, 2, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1177, 2, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1178, 2, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1179, 2, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1180, 2, 1, "", "var_names_float", "The names of float variables."], [1181, 2, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.RegularLayoutOptProblem": [[1183, 1, 1, "", "ANGLE", ""], [1184, 1, 1, "", "OFFSET_X", ""], [1185, 1, 1, "", "OFFSET_Y", ""], [1186, 1, 1, "", "SPACING_X", ""], [1187, 1, 1, "", "SPACING_Y", ""], [1188, 2, 1, "", "__init__", "Constructor."], [1189, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [1190, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1191, 2, 1, "", "initialize", "Initialize the object."], [1192, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1193, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1194, 2, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1195, 2, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1196, 2, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts": [[1113, 3, 1, "", "GeomLayout", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes)."], [1123, 3, 1, "", "GeomLayoutGridded", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes), on a fixes background point grid."], [1133, 3, 1, "", "GeomRegGrid", "A regular grid within a boundary geometry."], [1143, 3, 1, "", "GeomRegGrids", "A regular grid within a boundary geometry."]], "foxes.opt.problems.layout.geom_layouts.GeomLayout": [[1114, 2, 1, "", "__init__", "Constructor."], [1115, 2, 1, "", "apply_individual", "Apply new variables to the problem."], [1116, 2, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1117, 2, 1, "", "get_fig", "Return plotly figure axis."], [1118, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1119, 2, 1, "", "initialize", "Initialize the object."], [1120, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1121, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1122, 2, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded": [[1124, 2, 1, "", "__init__", "Constructor."], [1125, 2, 1, "", "apply_individual", "Apply new variables to the problem."], [1126, 2, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1127, 2, 1, "", "get_fig", "Return plotly figure axis."], [1128, 2, 1, "", "initial_values_int", "The initial values of the int variables."], [1129, 2, 1, "", "initialize", "Initialize the object."], [1130, 2, 1, "", "max_values_int", "The maximal values of the int variables."], [1131, 2, 1, "", "min_values_int", "The minimal values of the int variables."], [1132, 2, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrid": [[1134, 2, 1, "", "__init__", "Constructor."], [1135, 2, 1, "", "apply_individual", "Apply new variables to the problem."], [1136, 2, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1137, 2, 1, "", "get_fig", "Return plotly figure axis."], [1138, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1139, 2, 1, "", "initialize", "Initialize the object."], [1140, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1141, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1142, 2, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrids": [[1144, 2, 1, "", "__init__", "Constructor."], [1145, 2, 1, "", "apply_individual", "Apply new variables to the problem."], [1146, 2, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1147, 2, 1, "", "get_fig", "Return plotly figure axis."], [1148, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1149, 2, 1, "", "initial_values_int", "The initial values of the int variables."], [1150, 2, 1, "", "initialize", "Initialize the object."], [1151, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1152, 2, 1, "", "max_values_int", "The maximal values of the integer variables."], [1153, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1154, 2, 1, "", "min_values_int", "The minimal values of the integer variables."], [1155, 2, 1, "", "var_names_float", "The names of float variables."], [1156, 2, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1032, 3, 1, "", "Boundary", "Boundary constraint for purely geometrical layouts problems."], [1037, 3, 1, "", "CFixN", "Fixed number of turbines constraint for purely geometrical layouts problems."], [1042, 3, 1, "", "CMaxN", "Maximal number of turbines constraint for purely geometrical layouts problems."], [1047, 3, 1, "", "CMinDensity", "Minimal turbine density constraint for purely geometrical layouts problems."], [1053, 3, 1, "", "CMinN", "Minimal number of turbines constraint for purely geometrical layouts problems."], [1058, 3, 1, "", "Constraint", "Abstract base class for optimization constraints."], [1063, 3, 1, "", "MinDist", "Minimal distance constraint for purely geometrical layouts problems."], [1069, 3, 1, "", "Valid", "Validity constraint for purely geometrical layouts problems."], [1074, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.constraints.Boundary": [[1033, 2, 1, "", "__init__", "Constructor."], [1034, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1035, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1036, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CFixN": [[1038, 2, 1, "", "__init__", "Constructor."], [1039, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1040, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1041, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN": [[1043, 2, 1, "", "__init__", "Constructor."], [1044, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1045, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1046, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity": [[1048, 2, 1, "", "__init__", "Constructor."], [1049, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1050, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1051, 2, 1, "", "initialize", "Initialize the object."], [1052, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinN": [[1054, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1055, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1056, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1057, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Constraint": [[1059, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1060, 2, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [1061, 2, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [1062, 2, 1, "", "get_bounds", "Returns the bounds for all components."]], "foxes.opt.problems.layout.geom_layouts.constraints.MinDist": [[1064, 2, 1, "", "__init__", "Constructor."], [1065, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1066, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1067, 2, 1, "", "initialize", "Initialize the constaint."], [1068, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Valid": [[1070, 2, 1, "", "__init__", "Constructor."], [1071, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1072, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1073, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1075, 3, 1, "", "MaxDensity", "Maximal turbine density objective for purely geometrical layouts problems."], [1082, 3, 1, "", "MaxGridSpacing", "Maximal grid spacing objective for purely geometrical layouts problems."], [1088, 3, 1, "", "MeMiMaDist", "Mean-min-max distance objective for purely geometrical layouts problems."], [1094, 3, 1, "", "OFixN", "Fixed number of turbines objective for purely geometrical layouts problems."], [1100, 3, 1, "", "OMaxN", "Maximal number of turbines objective for purely geometrical layouts problems."], [1106, 3, 1, "", "OMinN", "Minimal number of turbines objective for purely geometrical layouts problems."], [1109, 3, 1, "", "Objective", "Abstract base class for objective functions."], [1112, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity": [[1076, 2, 1, "", "__init__", "Constructor."], [1077, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1078, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1079, 2, 1, "", "initialize", "Initialize the object."], [1080, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1081, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing": [[1083, 2, 1, "", "__init__", "Constructor."], [1084, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1085, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1086, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1087, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist": [[1089, 2, 1, "", "__init__", "Constructor."], [1090, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1091, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1092, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1093, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OFixN": [[1095, 2, 1, "", "__init__", "Constructor."], [1096, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1097, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1098, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1099, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN": [[1101, 2, 1, "", "__init__", "Constructor."], [1102, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1103, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1104, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1105, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMinN": [[1107, 2, 1, "", "__init__", "Constructor."], [1108, 2, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.opt.problems.layout.geom_layouts.objectives.Objective": [[1110, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1111, 2, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.output": [[761, 3, 1, "", "FarmLayoutOutput", "Plot the farm layout"], [770, 3, 1, "", "FarmResultsEval", "Evaluates farm results data."], [789, 3, 1, "", "FlowPlots2D", "Class for horizontal or vertical 2D flow plots"], [797, 3, 1, "", "Output", "Base class for foxes output."], [801, 3, 1, "", "ResultsWriter", "Writes results farm data to file."], [804, 3, 1, "", "RosePlotOutput", "Class for rose plot creation"], [810, 3, 1, "", "StateTurbineMap", "Creates heat maps with turbines on the one and states on the other axis."], [813, 3, 1, "", "StatesRosePlotOutput", "Class for rose plot creation directly from states"], [815, 3, 1, "", "TurbineTypeCurves", "Creates power and ct curves for turbine types, optionally including derating/boost."]], "foxes.output.FarmLayoutOutput": [[762, 2, 1, "", "__init__", "Constructor."], [763, 2, 1, "", "get_figure", "Creates farm layout figure."], [764, 2, 1, "", "get_layout_data", "Returns wind farm layout."], [765, 2, 1, "", "get_layout_dict", "Returns wind farm layout."], [766, 2, 1, "", "write_csv", "Writes csv layout file."], [767, 2, 1, "", "write_json", "Writes xyh layout file."], [768, 2, 1, "", "write_plot", "Writes the layout plot to file."], [769, 2, 1, "", "write_xyh", "Writes xyh layout file."]], "foxes.output.FarmResultsEval": [[771, 2, 1, "", "__init__", "Constructor."], [772, 2, 1, "", "add_capacity", "Adds capacity to the farm results"], [773, 2, 1, "", "add_efficiency", "Adds efficiency to the farm results"], [774, 2, 1, "", "calc_farm_efficiency", "Calculates farm efficiency"], [775, 2, 1, "", "calc_farm_mean", "Calculates the mean over states and turbines."], [776, 2, 1, "", "calc_farm_sum", "Calculates the sum over states and turbines."], [777, 2, 1, "", "calc_farm_yield", "Calculates yield, P75 and P90 at the farm level"], [778, 2, 1, "", "calc_mean_farm_power", "Calculates the mean total farm power."], [779, 2, 1, "", "calc_states_mean", "Calculates the mean wrt states."], [780, 2, 1, "", "calc_states_std", "Calculates the standard deviation wrt states."], [781, 2, 1, "", "calc_states_sum", "Calculates the sum wrt states."], [782, 2, 1, "", "calc_turbine_mean", "Calculates the mean wrt turbines."], [783, 2, 1, "", "calc_turbine_sum", "Calculates the sum wrt turbines."], [784, 2, 1, "", "calc_turbine_yield", "Calculates the yield per turbine"], [785, 2, 1, "", "reduce_all", "Reduces states and turbine dimension by some operation"], [786, 2, 1, "", "reduce_states", "Reduces the states dimension by some operation"], [787, 2, 1, "", "reduce_turbines", "Reduces the turbine dimension by some operation"], [788, 2, 1, "", "weinsum", "Calculates Einstein sum, adding weights as last argument to the given fields."]], "foxes.output.FlowPlots2D": [[790, 2, 1, "", "__init__", "Constructor."], [791, 2, 1, "", "gen_states_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [792, 2, 1, "", "gen_states_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [793, 2, 1, "", "gen_states_fig_yz", "Generates 2D farm flow figure in a plane."], [794, 2, 1, "", "get_mean_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [795, 2, 1, "", "get_mean_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [796, 2, 1, "", "get_mean_fig_yz", "Generates 2D farm flow figure in a vertical yz-plane."]], "foxes.output.Output": [[798, 2, 1, "", "new", "Run-time output model factory."], [799, 2, 1, "", "print_models", "Prints all model names."], [800, 2, 1, "", "write", "Writes data to file via pandas."]], "foxes.output.ResultsWriter": [[802, 2, 1, "", "__init__", "Constructor."], [803, 2, 1, "", "write_csv", "Writes a csv file"]], "foxes.output.RosePlotOutput": [[805, 2, 1, "", "__init__", "Constructor."], [806, 2, 1, "", "get_data", "Get pandas DataFrame with wind rose data."], [807, 2, 1, "", "get_data_info", "Returns default description for a variable."], [808, 2, 1, "", "get_figure", "Creates px figure object"], [809, 2, 1, "", "write_figure", "Write rose plot to file"]], "foxes.output.StateTurbineMap": [[811, 2, 1, "", "__init__", "Constructor."], [812, 2, 1, "", "plot_map", "Plot the heat map for the selected variable."]], "foxes.output.StatesRosePlotOutput": [[814, 2, 1, "", "__init__", "Constructor."]], "foxes.output.TurbineTypeCurves": [[816, 2, 1, "", "__init__", "Constructor."], [817, 2, 1, "", "plot_curves", "Plot the power or ct curve."]], "foxes.utils": [[818, 3, 1, "", "DataBook", "Container class for file paths, either directly given or as static data within a package."], [826, 3, 1, "", "PandasFileHelper", "This class helps reading and writing data to files via pandas."], [846, 5, 1, "", "all_subclasses", "Searches all classes derived from some base class."], [847, 5, 1, "", "cubic_roots", "Calculate real roots of polynomials of degree 3."], [848, 5, 1, "", "delta_wd", "Calculates wd_b - wd_a."], [1197, 5, 1, "", "read_shp", "Read a shape file"], [1198, 5, 1, "", "read_shp_polygons", "Reads the polygon points from a shp file."], [1214, 5, 1, "", "show_plotly_fig", "Displays a plotly figure in a window"], [1215, 5, 1, "", "shp2csv", "Read shape file, write csv file"], [1216, 5, 1, "", "shp2geom2d", "Read shapefile into geom2d geometry"], [1219, 5, 1, "", "uv2wd", "Calculate wind direction from wind vectors."], [1220, 5, 1, "", "wd2uv", "Calculate wind vectors from wind directions in degrees."], [1221, 5, 1, "", "wd2wdvec", "Calculate wind direction vectors from wind directions in degrees."], [1222, 5, 1, "", "wdvec2wd", "Calculate wind direction from wind direction vectors."]], "foxes.utils.DataBook": [[819, 2, 1, "", "__init__", "Constructor."], [820, 2, 1, "", "add_data_package", "Add static files from a package location."], [821, 2, 1, "", "add_data_package_file", "Add a static file from a package location."], [822, 2, 1, "", "add_file", "Add a file path"], [823, 2, 1, "", "add_files", "Add file paths"], [824, 2, 1, "", "get_file_path", "Get path of a file"], [825, 2, 1, "", "toc", "Get list of contents"]], "foxes.utils.PandasFileHelper": [[827, 1, 1, "", "DATA_FILE_FORMATS", ""], [828, 1, 1, "", "DEFAULT_FORMAT_DICT", ""], [829, 1, 1, "", "DEFAULT_READING_PARAMETERS", ""], [830, 1, 1, "", "DEFAULT_WRITING_PARAMETERS", ""], [831, 2, 1, "", "read_file", "Helper for reading data according to file ending."], [832, 2, 1, "", "write_file", "Helper for writing data according to file ending."]], "foxes.utils.abl.neutral": [[833, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [834, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [835, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.sheared": [[836, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"]], "foxes.utils.abl.stable": [[837, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [838, 5, 1, "", "lgz", "Calculates the log factor for wind speed profiles."], [839, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [840, 5, 1, "", "psi", "The Psi function"], [841, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.unstable": [[842, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [843, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [844, 5, 1, "", "psi", "The Psi function"], [845, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.geom2d": [[849, 3, 1, "", "AreaGeometry", "Abstract base class for closed 2D geometries."], [856, 3, 1, "", "AreaIntersection", "The intersection of area geometries."], [858, 3, 1, "", "AreaUnion", "The union of area geometries."], [866, 3, 1, "", "Circle", "This class represents the area of a circle."], [873, 3, 1, "", "ClosedPolygon", "This class represents a closed 2D polygon."], [880, 3, 1, "", "HalfPlane", "This class represents a half plane in 2d."], [888, 3, 1, "", "InvertedAreaGeometry", "Base class for inverted geometries."]], "foxes.utils.geom2d.AreaGeometry": [[850, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [851, 2, 1, "", "inverse", "Get the inverted geometry"], [852, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [853, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [854, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [855, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.AreaIntersection": [[857, 2, 1, "", "__new__", "Constructor."]], "foxes.utils.geom2d.AreaUnion": [[859, 2, 1, "", "__init__", "Constructor."], [860, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [861, 2, 1, "", "inverse", "Get the inverted geometry"], [862, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [863, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [864, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [865, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.Circle": [[867, 2, 1, "", "__init__", "Cobnstructor."], [868, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [869, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [870, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [871, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [872, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.ClosedPolygon": [[874, 2, 1, "", "__init__", "Constructor."], [875, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [876, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [877, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [878, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [879, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.HalfPlane": [[881, 2, 1, "", "__init__", "Constructor."], [882, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [883, 2, 1, "", "inverse", "Get the inverted geometry"], [884, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [885, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [886, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [887, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.InvertedAreaGeometry": [[889, 2, 1, "", "__init__", "Constructor."], [890, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [891, 2, 1, "", "inverse", "Get the inverted geometry"], [892, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [893, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [894, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [895, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.runners": [[1199, 3, 1, "", "DaskRunner", "Class for function execution via dask"], [1206, 3, 1, "", "DefaultRunner", "Class for default function execution."], [1208, 3, 1, "", "Runner", "Abstract base class for runners."]], "foxes.utils.runners.DaskRunner": [[1200, 2, 1, "", "__init__", "Constructor."], [1201, 2, 1, "", "finalize", "Finallize the runner"], [1202, 2, 1, "", "initialize", "Initialize the runner"], [1203, 2, 1, "", "is_distributed", ""], [1204, 2, 1, "", "print", "Prints if verbosity is not zero"], [1205, 2, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.DefaultRunner": [[1207, 2, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.Runner": [[1209, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1210, 2, 1, "", "finalize", "Finalize the runner"], [1211, 2, 1, "", "initialize", "Initialize the runner"], [1212, 4, 1, "", "initialized", "Initialization flag"], [1213, 2, 1, "", "run", "Runs the given function."]], "foxes.utils.two_circles": [[1217, 5, 1, "", "area", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."], [1218, 5, 1, "", "calc_area", "Calculates the intersection of two circles."]], "foxes.variables": [[338, 0, 1, "", "AMB_CAP", "Ambient capacity, equals AMB_P/P_nominal"], [339, 0, 1, "", "AMB_CT", "The ambient thrust coefficient"], [340, 0, 1, "", "AMB_P", "The ambient power, unit depends on user choice"], [341, 0, 1, "", "AMB_REWS", "Ambient rotor effective wind speed in m/s"], [342, 0, 1, "", "AMB_REWS2", "Ambient rotor effective wind speed in m/s, calculated from second moment"], [343, 0, 1, "", "AMB_REWS3", "Ambient rotor effective wind speed in m/s, calculated from third moment"], [344, 0, 1, "", "AMB_RHO", "The ambient air density in kg/m3"], [345, 0, 1, "", "AMB_T", "The ambient temperature in Kelvin"], [346, 0, 1, "", "AMB_TI", "The ambient turbulence intensity"], [347, 0, 1, "", "AMB_WD", "The ambient wind direction in degrees"], [348, 0, 1, "", "AMB_WS", "The ambient wind speed in m/s"], [349, 0, 1, "", "AMB_YAW", "The ambient absolute yaw angle of  a turbine in degrees"], [350, 0, 1, "", "AMB_YAWM", "The ambient relative yaw angle of  a turbine in degrees"], [351, 0, 1, "", "AMB_YLD", "Ambient yield in GWh/a"], [352, 0, 1, "", "CAP", "Capacity, equals P/P_nominal"], [353, 0, 1, "", "CT", "The thrust coefficient"], [354, 0, 1, "", "D", "The rotor diameter in m"], [355, 0, 1, "", "EFF", "Efficiency, equals P/AMB_P"], [356, 0, 1, "", "H", "The height over ground in m"], [357, 0, 1, "", "K", "Wake growth parameter"], [358, 0, 1, "", "KB", "KTI value for zero TI, K = KB + KTI*TI"], [359, 0, 1, "", "KTI", "Factor between K and TI, K = KB + KTI*TI"], [360, 0, 1, "", "MAX_P", "The maximal power, for derating/boost"], [361, 0, 1, "", "MOL", "The Monin-Ubukhof length in m"], [362, 0, 1, "", "ORDER", "The turbine order"], [363, 0, 1, "", "P", "The power, unit depends on user choice"], [364, 0, 1, "", "PA_ALPHA", "The alpha parameter of the PorteAgel wake model"], [365, 0, 1, "", "PA_BETA", "The beta parameter of the PorteAgel wake model"], [366, 0, 1, "", "REWS", "Rotor effective wind speed in m/s"], [367, 0, 1, "", "REWS2", "Rotor effective wind speed in m/s, calculated from second moment"], [368, 0, 1, "", "REWS3", "Rotor effective wind speed in m/s, calculated from third moment"], [369, 0, 1, "", "RHO", "The air density in kg/m3"], [370, 0, 1, "", "SHEAR", "The shear exponent"], [371, 0, 1, "", "T", "The temperature in Kelvin"], [372, 0, 1, "", "TI", "The turbulence intensity"], [373, 0, 1, "", "TXYH", "The turbine rotor centre coordinate  vector (x, y, height)"], [374, 0, 1, "", "WD", "The wind direction in degrees"], [375, 0, 1, "", "WEIGHT", "The statistical weight of a state"], [376, 0, 1, "", "WS", "The wind speed in m/s"], [377, 0, 1, "", "X", "The x coordinate in m"], [378, 0, 1, "", "Y", "The y coordinate in"], [379, 0, 1, "", "YAW", "The absolute yaw angle of a turbine in degrees"], [380, 0, 1, "", "YAWM", "The relative yaw angle of a turbine in degrees"], [381, 0, 1, "", "YLD", "Yield in GWh/a"], [382, 0, 1, "", "Z0", "The roughness length in m"], [383, 0, 1, "", "amb2var", "Mapping from ambient variable to the corresponding waked variable"], [384, 0, 1, "", "var2amb", "Mapping from variable to the corresponding ambient variable"]]}, "objtypes": {"0": "py:data", "1": "py:attribute", "2": "py:method", "3": "py:class", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "data", "Python data"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "class", "Python class"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"attribut": [0, 14, 25, 35, 44, 49, 58, 71, 83, 91, 105, 111, 129, 391, 399, 419, 426, 442, 449, 452, 457, 465, 474, 486, 500, 508, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 577, 589, 595, 601, 622, 626, 633, 638, 645, 651, 661, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 761, 770, 789, 801, 804, 810, 815, 818, 826, 858, 866, 873, 880, 896, 919, 944, 992, 999, 1010, 1058, 1113, 1123, 1133, 1143, 1166, 1182, 1199], "public": [0, 14, 22, 25, 35, 44, 49, 57, 58, 71, 79, 83, 91, 100, 105, 109, 111, 113, 117, 122, 126, 129, 134, 139, 264, 391, 399, 410, 412, 419, 426, 437, 441, 442, 449, 452, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 761, 770, 789, 797, 801, 804, 810, 813, 815, 818, 826, 849, 856, 858, 866, 873, 880, 888, 896, 917, 919, 926, 937, 944, 986, 992, 999, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1199, 1206, 1208], "member": [0, 14, 22, 25, 35, 44, 49, 57, 58, 71, 79, 83, 91, 100, 105, 109, 111, 113, 117, 122, 126, 129, 134, 139, 264, 391, 399, 410, 412, 419, 426, 437, 441, 442, 449, 452, 457, 465, 474, 483, 486, 494, 500, 505, 508, 512, 518, 525, 529, 534, 540, 546, 551, 558, 562, 567, 571, 574, 577, 582, 584, 586, 589, 595, 601, 607, 610, 613, 616, 619, 622, 626, 633, 638, 645, 651, 658, 661, 669, 672, 677, 683, 689, 694, 700, 721, 726, 731, 736, 741, 747, 751, 757, 761, 770, 789, 797, 801, 804, 810, 813, 815, 818, 826, 849, 856, 858, 866, 873, 880, 888, 896, 917, 919, 926, 937, 944, 986, 992, 999, 1008, 1010, 1016, 1018, 1032, 1037, 1042, 1047, 1053, 1058, 1063, 1069, 1075, 1082, 1088, 1094, 1100, 1106, 1109, 1113, 1123, 1133, 1143, 1157, 1166, 1182, 1199, 1206, 1208], "paramet": [1, 4, 5, 6, 9, 10, 11, 12, 15, 16, 17, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 102, 104, 106, 107, 108, 110, 112, 114, 116, 118, 119, 120, 121, 123, 124, 125, 127, 128, 130, 131, 135, 136, 137, 231, 385, 386, 387, 388, 389, 390, 392, 393, 395, 396, 398, 401, 402, 403, 405, 406, 407, 409, 412, 413, 414, 415, 416, 418, 420, 421, 422, 423, 425, 428, 429, 430, 432, 433, 434, 436, 440, 443, 445, 446, 447, 448, 451, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 509, 510, 511, 514, 515, 519, 522, 526, 527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 541, 542, 543, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 556, 559, 560, 561, 563, 564, 565, 566, 568, 569, 570, 572, 573, 575, 576, 578, 580, 581, 583, 585, 587, 588, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 608, 611, 614, 617, 620, 623, 624, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 678, 680, 681, 682, 684, 686, 687, 688, 690, 692, 693, 695, 697, 698, 699, 715, 716, 718, 719, 722, 724, 725, 727, 729, 730, 732, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 752, 753, 754, 755, 756, 758, 759, 760, 762, 763, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 798, 800, 802, 803, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 854, 855, 857, 859, 860, 864, 865, 867, 868, 871, 872, 874, 875, 878, 879, 881, 882, 886, 887, 889, 890, 894, 895, 897, 899, 900, 901, 903, 904, 905, 906, 911, 912, 918, 920, 921, 922, 923, 927, 928, 929, 930, 938, 939, 946, 947, 948, 949, 951, 952, 953, 954, 955, 958, 959, 961, 962, 963, 966, 979, 981, 982, 983, 987, 988, 989, 990, 991, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1011, 1012, 1013, 1016, 1017, 1019, 1020, 1023, 1028, 1029, 1033, 1034, 1035, 1038, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1055, 1056, 1058, 1060, 1061, 1064, 1065, 1066, 1067, 1070, 1071, 1072, 1074, 1076, 1077, 1078, 1079, 1083, 1084, 1085, 1089, 1090, 1091, 1095, 1096, 1097, 1101, 1102, 1103, 1107, 1112, 1114, 1115, 1116, 1117, 1119, 1124, 1125, 1126, 1127, 1129, 1134, 1135, 1136, 1137, 1139, 1144, 1145, 1146, 1147, 1150, 1158, 1160, 1163, 1164, 1167, 1168, 1171, 1176, 1177, 1178, 1179, 1188, 1189, 1191, 1194, 1195, 1197, 1198, 1200, 1205, 1207, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222], "return": [6, 7, 10, 17, 18, 19, 20, 21, 23, 24, 28, 30, 31, 32, 33, 34, 37, 40, 42, 46, 47, 48, 52, 54, 56, 63, 65, 66, 68, 69, 70, 75, 78, 80, 81, 82, 86, 88, 90, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 110, 114, 115, 118, 119, 120, 121, 127, 128, 132, 133, 136, 137, 150, 231, 269, 393, 394, 395, 396, 397, 398, 402, 404, 405, 406, 408, 409, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 429, 431, 432, 433, 435, 436, 439, 440, 445, 447, 448, 462, 464, 471, 473, 480, 482, 491, 493, 498, 499, 502, 503, 504, 506, 507, 510, 511, 513, 515, 516, 517, 521, 522, 523, 524, 527, 528, 531, 532, 533, 536, 537, 538, 542, 544, 545, 548, 549, 550, 554, 555, 556, 560, 561, 564, 565, 566, 569, 570, 572, 573, 575, 576, 580, 581, 587, 588, 591, 593, 594, 597, 599, 600, 603, 605, 606, 608, 609, 611, 612, 614, 615, 617, 618, 620, 621, 624, 625, 628, 630, 631, 632, 635, 636, 637, 641, 642, 643, 644, 647, 648, 649, 650, 653, 655, 656, 657, 659, 660, 663, 667, 670, 671, 674, 675, 676, 680, 681, 686, 687, 692, 697, 698, 718, 719, 720, 724, 729, 734, 738, 739, 740, 743, 744, 745, 746, 749, 750, 753, 754, 755, 756, 759, 760, 763, 764, 765, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 806, 807, 808, 812, 817, 824, 825, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 861, 862, 863, 864, 865, 869, 870, 871, 872, 876, 877, 878, 879, 883, 884, 885, 886, 887, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 913, 914, 915, 916, 921, 922, 924, 925, 929, 930, 931, 932, 933, 935, 936, 940, 941, 943, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 985, 988, 989, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1012, 1013, 1014, 1015, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1039, 1040, 1041, 1044, 1045, 1046, 1049, 1050, 1052, 1055, 1056, 1057, 1061, 1062, 1065, 1066, 1068, 1071, 1072, 1073, 1074, 1077, 1078, 1080, 1081, 1084, 1085, 1086, 1087, 1090, 1091, 1092, 1093, 1096, 1097, 1098, 1099, 1102, 1103, 1104, 1105, 1108, 1111, 1112, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1205, 1207, 1212, 1213, 1216, 1217, 1218, 1219, 1220, 1221, 1222], "exampl": [150, 222, 269, 310, 312, 1074, 1112, 1238], "note": [150, 269, 1074, 1112], "see": [150, 269], "also": [150, 269], "yield": [791, 792, 793, 794, 795, 796], "rais": [1074, 1112], "api": 1223, "fox": [1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1240, 1247], "constant": 1224, "core": [1225, 1229], "input": 1227, "farm_layout": 1227, "state": [1227, 1242], "windio": 1227, "model": [1228, 1236, 1245], "farm_control": 1228, "farm_model": 1228, "partial_wak": 1228, "point_model": 1228, "rotor_model": 1228, "turbine_model": 1228, "turbine_typ": 1228, "vertical_profil": 1228, "wake_fram": 1228, "wake_model": [1228, 1236], "wake_superposit": 1228, "opt": [1229, 1230, 1231], "problem": [1229, 1230, 1231], "object": [1229, 1231], "constraint": [1229, 1231], "layout": [1230, 1231, 1242, 1244], "geom_layout": [1230, 1231], "output": 1232, "util": [1233, 1234], "abl": [1233, 1234], "geom2d": 1233, "runner": 1233, "two_circl": 1233, "neutral": 1234, "stabl": 1234, "unstabl": 1234, "shear": 1234, "variabl": 1235, "wind": [1236, 1242, 1246, 1249, 1253], "ti": 1236, "citat": 1237, "histori": 1239, "v0": 1239, "1": 1239, "0": 1239, "alpha": 1239, "2": 1239, "3": 1239, "4": 1239, "5": 1239, "6": 1239, "welcom": 1240, "licens": 1240, "content": 1240, "contribut": 1240, "acknowledg": 1240, "instal": 1241, "requir": 1241, "via": 1241, "pip": 1241, "virtual": 1241, "python": 1241, "environ": 1241, "standard": 1241, "user": 1241, "develop": 1241, "conda": 1241, "static": 1242, "data": [1242, 1246, 1252, 1253], "farm": 1242, "test_farm_67": 1242, "csv": 1242, "ambient": 1242, "wrf": 1242, "timeseri": [1242, 1252], "4464": 1242, "gz": 1242, "abl_states_6000": 1242, "timeseries_3000": 1242, "timeseries_8000": 1242, "timeseries_100": 1242, "wind_rose_bremen": 1242, "wind_rot": 1242, "nc": 1242, "power": [1242, 1248], "thrust": 1242, "curv": 1242, "dtu": 1242, "10mw": 1242, "d178d3": 1242, "h119": 1242, "iea": 1242, "15mw": 1242, "d240": 1242, "h150": 1242, "iwt": 1242, "7d5mw": 1242, "d164": 1242, "h100": 1242, "nrel": 1242, "5mw": 1242, "d126": 1242, "h90": 1242, "file": 1242, "path": 1242, "heterogen": 1243, "flow": 1243, "optim": 1244, "The": 1245, "book": 1245, "multi": 1246, "height": 1246, "overview": 1247, "how": 1247, "setup": 1247, "mask": 1248, "sector": 1249, "manag": 1249, "singl": 1250, "row": 1250, "turbin": 1250, "dynam": 1251, "wake": [1251, 1254], "rose": 1253, "yaw": 1254, "rotor": 1254}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Attributes": [[0, "attributes"], [14, "attributes"], [25, "attributes"], [35, "attributes"], [44, "attributes"], [49, "attributes"], [58, "attributes"], [71, "attributes"], [83, "attributes"], [91, "attributes"], [105, "attributes"], [111, "attributes"], [129, "attributes"], [391, "attributes"], [399, "attributes"], [419, "attributes"], [426, "attributes"], [442, "attributes"], [449, "attributes"], [452, "attributes"], [457, "attributes"], [465, "attributes"], [474, "attributes"], [486, "attributes"], [500, "attributes"], [508, "attributes"], [518, "attributes"], [525, "attributes"], [529, "attributes"], [534, "attributes"], [540, "attributes"], [546, "attributes"], [551, "attributes"], [558, "attributes"], [562, "attributes"], [567, "attributes"], [577, "attributes"], [589, "attributes"], [595, "attributes"], [601, "attributes"], [622, "attributes"], [626, "attributes"], [633, "attributes"], [638, "attributes"], [645, "attributes"], [651, "attributes"], [661, "attributes"], [677, "attributes"], [683, "attributes"], [689, "attributes"], [694, "attributes"], [700, "attributes"], [721, "attributes"], [726, "attributes"], [731, "attributes"], [736, "attributes"], [741, "attributes"], [747, "attributes"], [751, "attributes"], [757, "attributes"], [761, "attributes"], [770, "attributes"], [789, "attributes"], [801, "attributes"], [804, "attributes"], [810, "attributes"], [815, "attributes"], [818, "attributes"], [826, "attributes"], [858, "attributes"], [866, "attributes"], [873, "attributes"], [880, "attributes"], [896, "attributes"], [919, "attributes"], [944, "attributes"], [992, "attributes"], [999, "attributes"], [1010, "attributes"], [1058, "attributes"], [1113, "attributes"], [1123, "attributes"], [1133, "attributes"], [1143, "attributes"], [1166, "attributes"], [1182, "attributes"], [1199, "attributes"]], "Public members": [[0, "public-members"], [14, "public-members"], [22, "public-members"], [25, "public-members"], [35, "public-members"], [44, "public-members"], [49, "public-members"], [57, "public-members"], [58, "public-members"], [71, "public-members"], [79, "public-members"], [83, "public-members"], [91, "public-members"], [100, "public-members"], [105, "public-members"], [109, "public-members"], [111, "public-members"], [113, "public-members"], [117, "public-members"], [122, "public-members"], [126, "public-members"], [129, "public-members"], [134, "public-members"], [139, "public-members"], [264, "public-members"], [391, "public-members"], [399, "public-members"], [410, "public-members"], [412, "public-members"], [419, "public-members"], [426, "public-members"], [437, "public-members"], [441, "public-members"], [442, "public-members"], [449, "public-members"], [452, "public-members"], [457, "public-members"], [465, "public-members"], [474, "public-members"], [483, "public-members"], [486, "public-members"], [494, "public-members"], [500, "public-members"], [505, "public-members"], [508, "public-members"], [512, "public-members"], [518, "public-members"], [525, "public-members"], [529, "public-members"], [534, "public-members"], [540, "public-members"], [546, "public-members"], [551, "public-members"], [558, "public-members"], [562, "public-members"], [567, "public-members"], [571, "public-members"], [574, "public-members"], [577, "public-members"], [582, "public-members"], [584, "public-members"], [586, "public-members"], [589, "public-members"], [595, "public-members"], [601, "public-members"], [607, "public-members"], [610, "public-members"], [613, "public-members"], [616, "public-members"], [619, "public-members"], [622, "public-members"], [626, "public-members"], [633, "public-members"], [638, "public-members"], [645, "public-members"], [651, "public-members"], [658, "public-members"], [661, "public-members"], [669, "public-members"], [672, "public-members"], [677, "public-members"], [683, "public-members"], [689, "public-members"], [694, "public-members"], [700, "public-members"], [721, "public-members"], [726, "public-members"], [731, "public-members"], [736, "public-members"], [741, "public-members"], [747, "public-members"], [751, "public-members"], [757, "public-members"], [761, "public-members"], [770, "public-members"], [789, "public-members"], [797, "public-members"], [801, "public-members"], [804, "public-members"], [810, "public-members"], [813, "public-members"], [815, "public-members"], [818, "public-members"], [826, "public-members"], [849, "public-members"], [856, "public-members"], [858, "public-members"], [866, "public-members"], [873, "public-members"], [880, "public-members"], [888, "public-members"], [896, "public-members"], [917, "public-members"], [919, "public-members"], [926, "public-members"], [937, "public-members"], [944, "public-members"], [986, "public-members"], [992, "public-members"], [999, "public-members"], [1008, "public-members"], [1010, "public-members"], [1016, "public-members"], [1018, "public-members"], [1032, "public-members"], [1037, "public-members"], [1042, "public-members"], [1047, "public-members"], [1053, "public-members"], [1058, "public-members"], [1063, "public-members"], [1069, "public-members"], [1075, "public-members"], [1082, "public-members"], [1088, "public-members"], [1094, "public-members"], [1100, "public-members"], [1106, "public-members"], [1109, "public-members"], [1113, "public-members"], [1123, "public-members"], [1133, "public-members"], [1143, "public-members"], [1157, "public-members"], [1166, "public-members"], [1182, "public-members"], [1199, "public-members"], [1206, "public-members"], [1208, "public-members"]], "Parameters": [[1, "parameters"], [4, "parameters"], [5, "parameters"], [6, "parameters"], [9, "parameters"], [10, "parameters"], [11, "parameters"], [12, "parameters"], [15, "parameters"], [16, "parameters"], [17, "parameters"], [21, "parameters"], [23, "parameters"], [24, "parameters"], [26, "parameters"], [27, "parameters"], [28, "parameters"], [29, "parameters"], [31, "parameters"], [32, "parameters"], [34, "parameters"], [36, "parameters"], [37, "parameters"], [38, "parameters"], [39, "parameters"], [40, "parameters"], [41, "parameters"], [42, "parameters"], [43, "parameters"], [45, "parameters"], [46, "parameters"], [47, "parameters"], [48, "parameters"], [50, "parameters"], [51, "parameters"], [52, "parameters"], [53, "parameters"], [54, "parameters"], [55, "parameters"], [56, "parameters"], [61, "parameters"], [62, "parameters"], [63, "parameters"], [64, "parameters"], [65, "parameters"], [67, "parameters"], [69, "parameters"], [70, "parameters"], [72, "parameters"], [73, "parameters"], [74, "parameters"], [75, "parameters"], [76, "parameters"], [77, "parameters"], [78, "parameters"], [80, "parameters"], [82, "parameters"], [84, "parameters"], [85, "parameters"], [86, "parameters"], [87, "parameters"], [88, "parameters"], [89, "parameters"], [90, "parameters"], [92, "parameters"], [93, "parameters"], [95, "parameters"], [96, "parameters"], [98, "parameters"], [102, "parameters"], [104, "parameters"], [106, "parameters"], [107, "parameters"], [108, "parameters"], [110, "parameters"], [112, "parameters"], [114, "parameters"], [116, "parameters"], [118, "parameters"], [119, "parameters"], [120, "parameters"], [121, "parameters"], [123, "parameters"], [124, "parameters"], [125, "parameters"], [127, "parameters"], [128, "parameters"], [130, "parameters"], [131, "parameters"], [135, "parameters"], [136, "parameters"], [137, "parameters"], [231, "parameters"], [385, "parameters"], [386, "parameters"], [387, "parameters"], [388, "parameters"], [389, "parameters"], [390, "parameters"], [392, "parameters"], [393, "parameters"], [395, "parameters"], [396, "parameters"], [398, "parameters"], [401, "parameters"], [402, "parameters"], [403, "parameters"], [405, "parameters"], [406, "parameters"], [407, "parameters"], [409, "parameters"], [412, "parameters"], [413, "parameters"], [414, "parameters"], [415, "parameters"], [416, "parameters"], [418, "parameters"], [420, "parameters"], [421, "parameters"], [422, "parameters"], [423, "parameters"], [425, "parameters"], [428, "parameters"], [429, "parameters"], [430, "parameters"], [432, "parameters"], [433, "parameters"], [434, "parameters"], [436, "parameters"], [440, "parameters"], [443, "parameters"], [445, "parameters"], [446, "parameters"], [447, "parameters"], [448, "parameters"], [451, "parameters"], [454, "parameters"], [455, "parameters"], [456, "parameters"], [458, "parameters"], [459, "parameters"], [460, "parameters"], [461, "parameters"], [462, "parameters"], [463, "parameters"], [464, "parameters"], [466, "parameters"], [468, "parameters"], [469, "parameters"], [470, "parameters"], [471, "parameters"], [472, "parameters"], [473, "parameters"], [475, "parameters"], [477, "parameters"], [478, "parameters"], [479, "parameters"], [480, "parameters"], [481, "parameters"], [482, "parameters"], [484, "parameters"], [485, "parameters"], [487, "parameters"], [488, "parameters"], [489, "parameters"], [490, "parameters"], [491, "parameters"], [492, "parameters"], [493, "parameters"], [495, "parameters"], [496, "parameters"], [497, "parameters"], [498, "parameters"], [499, "parameters"], [501, "parameters"], [502, "parameters"], [503, "parameters"], [504, "parameters"], [506, "parameters"], [507, "parameters"], [509, "parameters"], [510, "parameters"], [511, "parameters"], [514, "parameters"], [515, "parameters"], [519, "parameters"], [522, "parameters"], [526, "parameters"], [527, "parameters"], [528, "parameters"], [530, "parameters"], [531, "parameters"], [532, "parameters"], [533, "parameters"], [535, "parameters"], [536, "parameters"], [537, "parameters"], [538, "parameters"], [541, "parameters"], [542, "parameters"], [543, "parameters"], [544, "parameters"], [545, "parameters"], [547, "parameters"], [548, "parameters"], [549, "parameters"], [550, "parameters"], [552, "parameters"], [553, "parameters"], [554, "parameters"], [555, "parameters"], [556, "parameters"], [559, "parameters"], [560, "parameters"], [561, "parameters"], [563, "parameters"], [564, "parameters"], [565, "parameters"], [566, "parameters"], [568, "parameters"], [569, "parameters"], [570, "parameters"], [572, "parameters"], [573, "parameters"], [575, "parameters"], [576, "parameters"], [578, "parameters"], [580, "parameters"], [581, "parameters"], [583, "parameters"], [585, "parameters"], [587, "parameters"], [588, "parameters"], [590, "parameters"], [591, "parameters"], [592, "parameters"], [593, "parameters"], [594, "parameters"], [596, "parameters"], [597, "parameters"], [598, "parameters"], [599, "parameters"], [600, "parameters"], [602, "parameters"], [603, "parameters"], [604, "parameters"], [605, "parameters"], [606, "parameters"], [608, "parameters"], [611, "parameters"], [614, "parameters"], [617, "parameters"], [620, "parameters"], [623, "parameters"], [624, "parameters"], [627, "parameters"], [628, "parameters"], [629, "parameters"], [630, "parameters"], [631, "parameters"], [632, "parameters"], [634, "parameters"], [635, "parameters"], [636, "parameters"], [637, "parameters"], [639, "parameters"], [641, "parameters"], [642, "parameters"], [643, "parameters"], [644, "parameters"], [646, "parameters"], [647, "parameters"], [648, "parameters"], [649, "parameters"], [650, "parameters"], [652, "parameters"], [653, "parameters"], [654, "parameters"], [655, "parameters"], [656, "parameters"], [657, "parameters"], [659, "parameters"], [660, "parameters"], [662, "parameters"], [663, "parameters"], [664, "parameters"], [665, "parameters"], [666, "parameters"], [667, "parameters"], [668, "parameters"], [670, "parameters"], [671, "parameters"], [673, "parameters"], [674, "parameters"], [675, "parameters"], [676, "parameters"], [678, "parameters"], [680, "parameters"], [681, "parameters"], [682, "parameters"], [684, "parameters"], [686, "parameters"], [687, "parameters"], [688, "parameters"], [690, "parameters"], [692, "parameters"], [693, "parameters"], [695, "parameters"], [697, "parameters"], [698, "parameters"], [699, "parameters"], [715, "parameters"], [716, "parameters"], [718, "parameters"], [719, "parameters"], [722, "parameters"], [724, "parameters"], [725, "parameters"], [727, "parameters"], [729, "parameters"], [730, "parameters"], [732, "parameters"], [734, "parameters"], [735, "parameters"], [737, "parameters"], [738, "parameters"], [739, "parameters"], [740, "parameters"], [742, "parameters"], [743, "parameters"], [744, "parameters"], [745, "parameters"], [746, "parameters"], [748, "parameters"], [749, "parameters"], [750, "parameters"], [752, "parameters"], [753, "parameters"], [754, "parameters"], [755, "parameters"], [756, "parameters"], [758, "parameters"], [759, "parameters"], [760, "parameters"], [762, "parameters"], [763, "parameters"], [766, "parameters"], [767, "parameters"], [768, "parameters"], [769, "parameters"], [771, "parameters"], [772, "parameters"], [773, "parameters"], [775, "parameters"], [776, "parameters"], [777, "parameters"], [778, "parameters"], [779, "parameters"], [781, "parameters"], [782, "parameters"], [783, "parameters"], [784, "parameters"], [785, "parameters"], [786, "parameters"], [787, "parameters"], [788, "parameters"], [790, "parameters"], [791, "parameters"], [792, "parameters"], [793, "parameters"], [794, "parameters"], [795, "parameters"], [796, "parameters"], [798, "parameters"], [800, "parameters"], [802, "parameters"], [803, "parameters"], [805, "parameters"], [806, "parameters"], [807, "parameters"], [808, "parameters"], [809, "parameters"], [811, "parameters"], [812, "parameters"], [813, "parameters"], [814, "parameters"], [816, "parameters"], [817, "parameters"], [818, "parameters"], [819, "parameters"], [820, "parameters"], [821, "parameters"], [822, "parameters"], [823, "parameters"], [824, "parameters"], [825, "parameters"], [831, "parameters"], [832, "parameters"], [833, "parameters"], [834, "parameters"], [835, "parameters"], [836, "parameters"], [837, "parameters"], [838, "parameters"], [839, "parameters"], [840, "parameters"], [841, "parameters"], [842, "parameters"], [843, "parameters"], [844, "parameters"], [845, "parameters"], [846, "parameters"], [847, "parameters"], [848, "parameters"], [850, "parameters"], [854, "parameters"], [855, "parameters"], [857, "parameters"], [859, "parameters"], [860, "parameters"], [864, "parameters"], [865, "parameters"], [867, "parameters"], [868, "parameters"], [871, "parameters"], [872, "parameters"], [874, "parameters"], [875, "parameters"], [878, "parameters"], [879, "parameters"], [881, "parameters"], [882, "parameters"], [886, "parameters"], [887, "parameters"], [889, "parameters"], [890, "parameters"], [894, "parameters"], [895, "parameters"], [897, "parameters"], [899, "parameters"], [900, "parameters"], [901, "parameters"], [903, "parameters"], [904, "parameters"], [905, "parameters"], [906, "parameters"], [911, "parameters"], [912, "parameters"], [918, "parameters"], [920, "parameters"], [921, "parameters"], [922, "parameters"], [923, "parameters"], [927, "parameters"], [928, "parameters"], [929, "parameters"], [930, "parameters"], [938, "parameters"], [939, "parameters"], [946, "parameters"], [947, "parameters"], [948, "parameters"], [949, "parameters"], [951, "parameters"], [952, "parameters"], [953, "parameters"], [954, "parameters"], [955, "parameters"], [958, "parameters"], [959, "parameters"], [961, "parameters"], [962, "parameters"], [963, "parameters"], [966, "parameters"], [979, "parameters"], [981, "parameters"], [982, "parameters"], [983, "parameters"], [987, "parameters"], [988, "parameters"], [989, "parameters"], [990, "parameters"], [991, "parameters"], [993, "parameters"], [994, "parameters"], [995, "parameters"], [996, "parameters"], [998, "parameters"], [1000, "parameters"], [1001, "parameters"], [1002, "parameters"], [1003, "parameters"], [1004, "parameters"], [1008, "parameters"], [1009, "parameters"], [1011, "parameters"], [1012, "parameters"], [1013, "parameters"], [1016, "parameters"], [1017, "parameters"], [1019, "parameters"], [1020, "parameters"], [1023, "parameters"], [1028, "parameters"], [1029, "parameters"], [1033, "parameters"], [1034, "parameters"], [1035, "parameters"], [1038, "parameters"], [1039, "parameters"], [1040, "parameters"], [1043, "parameters"], [1044, "parameters"], [1045, "parameters"], [1048, "parameters"], [1049, "parameters"], [1050, "parameters"], [1051, "parameters"], [1055, "parameters"], [1056, "parameters"], [1058, "parameters"], [1060, "parameters"], [1061, "parameters"], [1064, "parameters"], [1065, "parameters"], [1066, "parameters"], [1067, "parameters"], [1070, "parameters"], [1071, "parameters"], [1072, "parameters"], [1074, "parameters"], [1076, "parameters"], [1077, "parameters"], [1078, "parameters"], [1079, "parameters"], [1083, "parameters"], [1084, "parameters"], [1085, "parameters"], [1089, "parameters"], [1090, "parameters"], [1091, "parameters"], [1095, "parameters"], [1096, "parameters"], [1097, "parameters"], [1101, "parameters"], [1102, "parameters"], [1103, "parameters"], [1107, "parameters"], [1112, "parameters"], [1114, "parameters"], [1115, "parameters"], [1116, "parameters"], [1117, "parameters"], [1119, "parameters"], [1124, "parameters"], [1125, "parameters"], [1126, "parameters"], [1127, "parameters"], [1129, "parameters"], [1134, "parameters"], [1135, "parameters"], [1136, "parameters"], [1137, "parameters"], [1139, "parameters"], [1144, "parameters"], [1145, "parameters"], [1146, "parameters"], [1147, "parameters"], [1150, "parameters"], [1158, "parameters"], [1160, "parameters"], [1163, "parameters"], [1164, "parameters"], [1167, "parameters"], [1168, "parameters"], [1171, "parameters"], [1176, "parameters"], [1177, "parameters"], [1178, "parameters"], [1179, "parameters"], [1188, "parameters"], [1189, "parameters"], [1191, "parameters"], [1194, "parameters"], [1195, "parameters"], [1197, "parameters"], [1198, "parameters"], [1200, "parameters"], [1205, "parameters"], [1207, "parameters"], [1213, "parameters"], [1215, "parameters"], [1216, "parameters"], [1217, "parameters"], [1218, "parameters"], [1219, "parameters"], [1220, "parameters"], [1221, "parameters"], [1222, "parameters"]], "Returns": [[6, "returns"], [7, "returns"], [10, "returns"], [17, "returns"], [18, "returns"], [19, "returns"], [20, "returns"], [21, "returns"], [23, "returns"], [24, "returns"], [28, "returns"], [30, "returns"], [31, "returns"], [32, "returns"], [33, "returns"], [34, "returns"], [37, "returns"], [40, "returns"], [42, "returns"], [46, "returns"], [47, "returns"], [48, "returns"], [52, "returns"], [54, "returns"], [56, "returns"], [63, "returns"], [65, "returns"], [66, "returns"], [68, "returns"], [69, "returns"], [70, "returns"], [75, "returns"], [78, "returns"], [80, "returns"], [81, "returns"], [82, "returns"], [86, "returns"], [88, "returns"], [90, "returns"], [93, "returns"], [94, "returns"], [96, "returns"], [97, "returns"], [98, "returns"], [99, "returns"], [101, "returns"], [102, "returns"], [103, "returns"], [104, "returns"], [110, "returns"], [114, "returns"], [115, "returns"], [118, "returns"], [119, "returns"], [120, "returns"], [121, "returns"], [127, "returns"], [128, "returns"], [132, "returns"], [133, "returns"], [136, "returns"], [137, "returns"], [150, "returns"], [231, "returns"], [269, "returns"], [393, "returns"], [394, "returns"], [395, "returns"], [396, "returns"], [397, "returns"], [398, "returns"], [402, "returns"], [404, "returns"], [405, "returns"], [406, "returns"], [408, "returns"], [409, "returns"], [414, "returns"], [415, "returns"], [416, "returns"], [417, "returns"], [418, "returns"], [421, "returns"], [422, "returns"], [423, "returns"], [424, "returns"], [425, "returns"], [429, "returns"], [431, "returns"], [432, "returns"], [433, "returns"], [435, "returns"], [436, "returns"], [439, "returns"], [440, "returns"], [445, "returns"], [447, "returns"], [448, "returns"], [462, "returns"], [464, "returns"], [471, "returns"], [473, "returns"], [480, "returns"], [482, "returns"], [491, "returns"], [493, "returns"], [498, "returns"], [499, "returns"], [502, "returns"], [503, "returns"], [504, "returns"], [506, "returns"], [507, "returns"], [510, "returns"], [511, "returns"], [513, "returns"], [515, "returns"], [516, "returns"], [517, "returns"], [521, "returns"], [522, "returns"], [523, "returns"], [524, "returns"], [527, "returns"], [528, "returns"], [531, "returns"], [532, "returns"], [533, "returns"], [536, "returns"], [537, "returns"], [538, "returns"], [542, "returns"], [544, "returns"], [545, "returns"], [548, "returns"], [549, "returns"], [550, "returns"], [554, "returns"], [555, "returns"], [556, "returns"], [560, "returns"], [561, "returns"], [564, "returns"], [565, "returns"], [566, "returns"], [569, "returns"], [570, "returns"], [572, "returns"], [573, "returns"], [575, "returns"], [576, "returns"], [580, "returns"], [581, "returns"], [587, "returns"], [588, "returns"], [591, "returns"], [593, "returns"], [594, "returns"], [597, "returns"], [599, "returns"], [600, "returns"], [603, "returns"], [605, "returns"], [606, "returns"], [608, "returns"], [609, "returns"], [611, "returns"], [612, "returns"], [614, "returns"], [615, "returns"], [617, "returns"], [618, "returns"], [620, "returns"], [621, "returns"], [624, "returns"], [625, "returns"], [628, "returns"], [630, "returns"], [631, "returns"], [632, "returns"], [635, "returns"], [636, "returns"], [637, "returns"], [641, "returns"], [642, "returns"], [643, "returns"], [644, "returns"], [647, "returns"], [648, "returns"], [649, "returns"], [650, "returns"], [653, "returns"], [655, "returns"], [656, "returns"], [657, "returns"], [659, "returns"], [660, "returns"], [663, "returns"], [667, "returns"], [670, "returns"], [671, "returns"], [674, "returns"], [675, "returns"], [676, "returns"], [680, "returns"], [681, "returns"], [686, "returns"], [687, "returns"], [692, "returns"], [697, "returns"], [698, "returns"], [718, "returns"], [719, "returns"], [720, "returns"], [724, "returns"], [729, "returns"], [734, "returns"], [738, "returns"], [739, "returns"], [740, "returns"], [743, "returns"], [744, "returns"], [745, "returns"], [746, "returns"], [749, "returns"], [750, "returns"], [753, "returns"], [754, "returns"], [755, "returns"], [756, "returns"], [759, "returns"], [760, "returns"], [763, "returns"], [764, "returns"], [765, "returns"], [774, "returns"], [775, "returns"], [776, "returns"], [777, "returns"], [778, "returns"], [779, "returns"], [781, "returns"], [782, "returns"], [783, "returns"], [784, "returns"], [785, "returns"], [786, "returns"], [787, "returns"], [788, "returns"], [806, "returns"], [807, "returns"], [808, "returns"], [812, "returns"], [817, "returns"], [824, "returns"], [825, "returns"], [831, "returns"], [833, "returns"], [834, "returns"], [835, "returns"], [836, "returns"], [837, "returns"], [838, "returns"], [839, "returns"], [840, "returns"], [841, "returns"], [842, "returns"], [843, "returns"], [844, "returns"], [845, "returns"], [846, "returns"], [847, "returns"], [848, "returns"], [851, "returns"], [852, "returns"], [853, "returns"], [854, "returns"], [855, "returns"], [861, "returns"], [862, "returns"], [863, "returns"], [864, "returns"], [865, "returns"], [869, "returns"], [870, "returns"], [871, "returns"], [872, "returns"], [876, "returns"], [877, "returns"], [878, "returns"], [879, "returns"], [883, "returns"], [884, "returns"], [885, "returns"], [886, "returns"], [887, "returns"], [891, "returns"], [892, "returns"], [893, "returns"], [894, "returns"], [895, "returns"], [898, "returns"], [899, "returns"], [900, "returns"], [901, "returns"], [902, "returns"], [904, "returns"], [905, "returns"], [907, "returns"], [908, "returns"], [909, "returns"], [910, "returns"], [913, "returns"], [914, "returns"], [915, "returns"], [916, "returns"], [921, "returns"], [922, "returns"], [924, "returns"], [925, "returns"], [929, "returns"], [930, "returns"], [931, "returns"], [932, "returns"], [933, "returns"], [935, "returns"], [936, "returns"], [940, "returns"], [941, "returns"], [943, "returns"], [950, "returns"], [951, "returns"], [952, "returns"], [953, "returns"], [954, "returns"], [955, "returns"], [956, "returns"], [957, "returns"], [958, "returns"], [959, "returns"], [960, "returns"], [961, "returns"], [962, "returns"], [963, "returns"], [964, "returns"], [965, "returns"], [967, "returns"], [968, "returns"], [969, "returns"], [970, "returns"], [971, "returns"], [972, "returns"], [973, "returns"], [974, "returns"], [975, "returns"], [976, "returns"], [977, "returns"], [978, "returns"], [979, "returns"], [980, "returns"], [981, "returns"], [984, "returns"], [985, "returns"], [988, "returns"], [989, "returns"], [994, "returns"], [995, "returns"], [996, "returns"], [997, "returns"], [998, "returns"], [1001, "returns"], [1002, "returns"], [1003, "returns"], [1005, "returns"], [1006, "returns"], [1007, "returns"], [1012, "returns"], [1013, "returns"], [1014, "returns"], [1015, "returns"], [1021, "returns"], [1022, "returns"], [1024, "returns"], [1025, "returns"], [1026, "returns"], [1027, "returns"], [1028, "returns"], [1029, "returns"], [1030, "returns"], [1031, "returns"], [1034, "returns"], [1035, "returns"], [1036, "returns"], [1039, "returns"], [1040, "returns"], [1041, "returns"], [1044, "returns"], [1045, "returns"], [1046, "returns"], [1049, "returns"], [1050, "returns"], [1052, "returns"], [1055, "returns"], [1056, "returns"], [1057, "returns"], [1061, "returns"], [1062, "returns"], [1065, "returns"], [1066, "returns"], [1068, "returns"], [1071, "returns"], [1072, "returns"], [1073, "returns"], [1074, "returns"], [1077, "returns"], [1078, "returns"], [1080, "returns"], [1081, "returns"], [1084, "returns"], [1085, "returns"], [1086, "returns"], [1087, "returns"], [1090, "returns"], [1091, "returns"], [1092, "returns"], [1093, "returns"], [1096, "returns"], [1097, "returns"], [1098, "returns"], [1099, "returns"], [1102, "returns"], [1103, "returns"], [1104, "returns"], [1105, "returns"], [1108, "returns"], [1111, "returns"], [1112, "returns"], [1115, "returns"], [1116, "returns"], [1117, "returns"], [1118, "returns"], [1120, "returns"], [1121, "returns"], [1122, "returns"], [1125, "returns"], [1126, "returns"], [1127, "returns"], [1128, "returns"], [1130, "returns"], [1131, "returns"], [1132, "returns"], [1135, "returns"], [1136, "returns"], [1137, "returns"], [1138, "returns"], [1140, "returns"], [1141, "returns"], [1142, "returns"], [1145, "returns"], [1146, "returns"], [1147, "returns"], [1148, "returns"], [1149, "returns"], [1151, "returns"], [1152, "returns"], [1153, "returns"], [1154, "returns"], [1155, "returns"], [1156, "returns"], [1158, "returns"], [1159, "returns"], [1161, "returns"], [1162, "returns"], [1163, "returns"], [1164, "returns"], [1165, "returns"], [1168, "returns"], [1169, "returns"], [1170, "returns"], [1172, "returns"], [1173, "returns"], [1174, "returns"], [1175, "returns"], [1176, "returns"], [1177, "returns"], [1180, "returns"], [1181, "returns"], [1189, "returns"], [1190, "returns"], [1192, "returns"], [1193, "returns"], [1194, "returns"], [1195, "returns"], [1196, "returns"], [1197, "returns"], [1198, "returns"], [1205, "returns"], [1207, "returns"], [1212, "returns"], [1213, "returns"], [1216, "returns"], [1217, "returns"], [1218, "returns"], [1219, "returns"], [1220, "returns"], [1221, "returns"], [1222, "returns"]], "Examples": [[150, "examples"], [222, "examples"], [269, "examples"], [310, "examples"], [312, "examples"], [1074, "examples"], [1112, "examples"], [1238, "examples"]], "Notes": [[150, "notes"], [269, "notes"], [1074, "notes"], [1112, "notes"]], "See Also": [[150, "see-also"], [269, "see-also"]], "Yields": [[791, "yields"], [792, "yields"], [793, "yields"], [794, "yields"], [795, "yields"], [796, "yields"]], "Raises": [[1074, "raises"], [1112, "raises"]], "API": [[1223, "api"]], "foxes.constants": [[1224, "foxes-constants"]], "foxes.core": [[1225, "foxes-core"]], "foxes": [[1226, "foxes"]], "foxes.input": [[1227, "foxes-input"]], "foxes.input.farm_layout": [[1227, "foxes-input-farm-layout"]], "foxes.input.states": [[1227, "foxes-input-states"]], "foxes.input.windio": [[1227, "foxes-input-windio"]], "foxes.models": [[1228, "foxes-models"]], "foxes.models.farm_controllers": [[1228, "foxes-models-farm-controllers"]], "foxes.models.farm_models": [[1228, "foxes-models-farm-models"]], "foxes.models.partial_wakes": [[1228, "foxes-models-partial-wakes"]], "foxes.models.point_models": [[1228, "foxes-models-point-models"]], "foxes.models.rotor_models": [[1228, "foxes-models-rotor-models"]], "foxes.models.turbine_models": [[1228, "foxes-models-turbine-models"]], "foxes.models.turbine_types": [[1228, "foxes-models-turbine-types"]], "foxes.models.vertical_profiles": [[1228, "foxes-models-vertical-profiles"]], "foxes.models.wake_frames": [[1228, "foxes-models-wake-frames"]], "foxes.models.wake_models": [[1228, "foxes-models-wake-models"], [1236, "foxes-models-wake-models"]], "foxes.models.wake_superpositions": [[1228, "foxes-models-wake-superpositions"]], "foxes.opt": [[1229, "foxes-opt"]], "foxes.opt.core": [[1229, "foxes-opt-core"]], "foxes.opt.problems": [[1229, "foxes-opt-problems"], [1230, "foxes-opt-problems"]], "foxes.opt.objectives": [[1229, "foxes-opt-objectives"]], "foxes.opt.constraints": [[1229, "foxes-opt-constraints"]], "foxes.opt.problems.layout": [[1230, "foxes-opt-problems-layout"]], "foxes.opt.problems.layout.geom_layouts": [[1230, "foxes-opt-problems-layout-geom-layouts"], [1231, "foxes-opt-problems-layout-geom-layouts"]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1231, "foxes-opt-problems-layout-geom-layouts-objectives"]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1231, "foxes-opt-problems-layout-geom-layouts-constraints"]], "foxes.output": [[1232, "foxes-output"]], "foxes.utils": [[1233, "foxes-utils"]], "foxes.utils.abl": [[1233, "foxes-utils-abl"]], "foxes.utils.geom2d": [[1233, "foxes-utils-geom2d"]], "foxes.utils.runners": [[1233, "foxes-utils-runners"]], "foxes.utils.two_circles": [[1233, "foxes-utils-two-circles"]], "foxes.utils.abl.neutral": [[1234, "foxes-utils-abl-neutral"]], "foxes.utils.abl.stable": [[1234, "foxes-utils-abl-stable"]], "foxes.utils.abl.unstable": [[1234, "foxes-utils-abl-unstable"]], "foxes.utils.abl.sheared": [[1234, "foxes-utils-abl-sheared"]], "foxes.variables": [[1235, "foxes-variables"]], "foxes.models.wake_models.wind": [[1236, "foxes-models-wake-models-wind"]], "foxes.models.wake_models.ti": [[1236, "foxes-models-wake-models-ti"]], "Citation": [[1237, "citation"]], "History": [[1239, "history"]], "v0.1.0-alpha": [[1239, "v0-1-0-alpha"]], "v0.1.1-alpha": [[1239, "v0-1-1-alpha"]], "v0.1.2-alpha": [[1239, "v0-1-2-alpha"]], "v0.1.3-alpha": [[1239, "v0-1-3-alpha"]], "v0.1.4-alpha": [[1239, "v0-1-4-alpha"]], "v0.2.0-alpha": [[1239, "v0-2-0-alpha"]], "v0.2.1-alpha": [[1239, "v0-2-1-alpha"]], "v0.2.2-alpha": [[1239, "v0-2-2-alpha"]], "v0.2.3-alpha": [[1239, "v0-2-3-alpha"]], "v0.2.4-alpha": [[1239, "v0-2-4-alpha"]], "v0.2.5-alpha": [[1239, "v0-2-5-alpha"]], "v0.2.6-alpha": [[1239, "v0-2-6-alpha"]], "v0.3.0-alpha": [[1239, "v0-3-0-alpha"]], "v0.3.1-alpha": [[1239, "v0-3-1-alpha"]], "v0.3.2-alpha": [[1239, "v0-3-2-alpha"]], "v0.3.3-alpha": [[1239, "v0-3-3-alpha"]], "v0.3.4-alpha": [[1239, "v0-3-4-alpha"]], "v0.3.5-alpha": [[1239, "v0-3-5-alpha"]], "v0.4.0": [[1239, "v0-4-0"]], "v0.4.1": [[1239, "v0-4-1"]], "Welcome to FOXES": [[1240, "welcome-to-foxes"]], "License": [[1240, "license"]], "Contents": [[1240, "contents"]], "Contributing": [[1240, "contributing"]], "Acknowledgements": [[1240, "acknowledgements"]], "Installation": [[1241, "installation"]], "Requirements": [[1241, "requirements"]], "Installation via pip": [[1241, "installation-via-pip"]], "Virtual Python environment": [[1241, "virtual-python-environment"], [1241, "id1"]], "Standard users": [[1241, "standard-users"], [1241, "id2"]], "Developers": [[1241, "developers"], [1241, "id3"]], "Installation via conda": [[1241, "installation-via-conda"]], "Static data": [[1242, "Static-data"]], "Wind farm layout data": [[1242, "Wind-farm-layout-data"]], "test_farm_67.csv": [[1242, "test_farm_67.csv"]], "Ambient states data": [[1242, "Ambient-states-data"]], "WRF-Timeseries-4464.csv.gz": [[1242, "WRF-Timeseries-4464.csv.gz"]], "abl_states_6000.csv.gz": [[1242, "abl_states_6000.csv.gz"]], "timeseries_3000.csv.gz": [[1242, "timeseries_3000.csv.gz"]], "timeseries_8000.csv.gz": [[1242, "timeseries_8000.csv.gz"]], "timeseries_100.csv.gz": [[1242, "timeseries_100.csv.gz"]], "wind_rose_bremen.csv": [[1242, "wind_rose_bremen.csv"]], "wind_rotation.nc": [[1242, "wind_rotation.nc"]], "Power and thrust curves": [[1242, "Power-and-thrust-curves"]], "DTU-10MW-D178d3-H119.csv": [[1242, "DTU-10MW-D178d3-H119.csv"]], "IEA-15MW-D240-H150.csv": [[1242, "IEA-15MW-D240-H150.csv"]], "IWT-7d5MW-D164-H100.csv": [[1242, "IWT-7d5MW-D164-H100.csv"]], "NREL-5MW-D126-H90.csv": [[1242, "NREL-5MW-D126-H90.csv"]], "File paths": [[1242, "File-paths"]], "Heterogeneous flow": [[1243, "Heterogeneous-flow"]], "Layout optimization": [[1244, "Layout-optimization"]], "The model book": [[1245, "The-model-book"]], "Multi-height wind data": [[1246, "Multi-height-wind-data"]], "Overview - how to setup foxes": [[1247, "Overview---how-to-setup-foxes"]], "Power mask": [[1248, "Power-mask"]], "Wind sector management": [[1249, "Wind-sector-management"]], "Single row of turbines": [[1250, "Single-row-of-turbines"]], "Dynamic wakes": [[1251, "Dynamic-wakes"]], "Timeseries data": [[1252, "Timeseries-data"]], "Wind rose data": [[1253, "Wind-rose-data"]], "Yawed rotor wakes": [[1254, "Yawed-rotor-wakes"]]}, "indexentries": {"pep 585": [[150, "index-0"], [269, "index-0"]], "python enhancement proposals": [[150, "index-0"], [269, "index-0"]]}, "docurls": ["_core/Algorithm.html", "_core/Algorithm.__init__.html", "_core/Algorithm.chunked.html", "_core/Algorithm.cleanup.html", "_core/Algorithm.finalize.html", "_core/Algorithm.finalize_model.html", "_core/Algorithm.get_models_data.html", "_core/Algorithm.idata_mem.html", "_core/Algorithm.initialize.html", "_core/Algorithm.new.html", "_core/Algorithm.new_point_data.html", "_core/Algorithm.print.html", "_core/Algorithm.update_idata.html", "_core/Algorithm.update_n_turbines.html", "_core/Data.html", "_core/Data.__init__.html", "_core/Data.add.html", "_core/Data.from_points.html", "_core/Data.n_points.html", "_core/Data.n_states.html", "_core/Data.n_turbines.html", "_core/Data.states_i0.html", "_core/DataCalcModel.html", "_core/DataCalcModel.calculate.html", "_core/DataCalcModel.run_calculation.html", "_core/ExtendedStates.html", "_core/ExtendedStates.__init__.html", "_core/ExtendedStates.append.html", "_core/ExtendedStates.calculate.html", "_core/ExtendedStates.finalize.html", "_core/ExtendedStates.index.html", "_core/ExtendedStates.initialize.html", "_core/ExtendedStates.output_point_vars.html", "_core/ExtendedStates.size.html", "_core/ExtendedStates.weights.html", "_core/FarmController.html", "_core/FarmController.__init__.html", "_core/FarmController.calculate.html", "_core/FarmController.collect_models.html", "_core/FarmController.finalize.html", "_core/FarmController.initialize.html", "_core/FarmController.keep.html", "_core/FarmController.output_farm_vars.html", "_core/FarmController.set_pars.html", "_core/FarmDataModel.html", "_core/FarmDataModel.__init__.html", "_core/FarmDataModel.calculate.html", "_core/FarmDataModel.output_farm_vars.html", "_core/FarmDataModel.run_calculation.html", "_core/FarmDataModelList.html", "_core/FarmDataModelList.__init__.html", "_core/FarmDataModelList.append.html", "_core/FarmDataModelList.calculate.html", "_core/FarmDataModelList.finalize.html", "_core/FarmDataModelList.initialize.html", "_core/FarmDataModelList.keep.html", "_core/FarmDataModelList.output_farm_vars.html", "_core/FarmModel.html", "_core/Model.html", "_core/Model.__init__.html", "_core/Model.__repr__.html", "_core/Model.data_to_store.html", "_core/Model.finalize.html", "_core/Model.from_data_or_store.html", "_core/Model.get_data.html", "_core/Model.initialize.html", "_core/Model.initialized.html", "_core/Model.keep.html", "_core/Model.model_id.html", "_core/Model.reduce_states.html", "_core/Model.var.html", "_core/PartialWakesModel.html", "_core/PartialWakesModel.__init__.html", "_core/PartialWakesModel.contribute_to_wake_deltas.html", "_core/PartialWakesModel.evaluate_results.html", "_core/PartialWakesModel.initialize.html", "_core/PartialWakesModel.keep.html", "_core/PartialWakesModel.new.html", "_core/PartialWakesModel.new_wake_deltas.html", "_core/PointDataModel.html", "_core/PointDataModel.calculate.html", "_core/PointDataModel.output_point_vars.html", "_core/PointDataModel.run_calculation.html", "_core/PointDataModelList.html", "_core/PointDataModelList.__init__.html", "_core/PointDataModelList.append.html", "_core/PointDataModelList.calculate.html", "_core/PointDataModelList.finalize.html", "_core/PointDataModelList.initialize.html", "_core/PointDataModelList.keep.html", "_core/PointDataModelList.output_point_vars.html", "_core/RotorModel.html", "_core/RotorModel.__init__.html", "_core/RotorModel.calculate.html", "_core/RotorModel.design_points.html", "_core/RotorModel.eval_rpoint_results.html", "_core/RotorModel.get_rotor_points.html", "_core/RotorModel.n_rotor_points.html", "_core/RotorModel.output_farm_vars.html", "_core/RotorModel.rotor_point_weights.html", "_core/States.html", "_core/States.index.html", "_core/States.output_point_vars.html", "_core/States.size.html", "_core/States.weights.html", "_core/Turbine.html", "_core/Turbine.__init__.html", "_core/Turbine.add_model.html", "_core/Turbine.insert_model.html", "_core/TurbineModel.html", "_core/TurbineModel.calculate.html", "_core/TurbineType.html", "_core/TurbineType.__init__.html", "_core/VerticalProfile.html", "_core/VerticalProfile.calculate.html", "_core/VerticalProfile.input_vars.html", "_core/VerticalProfile.new.html", "_core/WakeFrame.html", "_core/WakeFrame.calc_centreline_integral.html", "_core/WakeFrame.calc_order.html", "_core/WakeFrame.get_centreline_points.html", "_core/WakeFrame.get_wake_coos.html", "_core/WakeModel.html", "_core/WakeModel.contribute_to_wake_deltas.html", "_core/WakeModel.finalize_wake_deltas.html", "_core/WakeModel.init_wake_deltas.html", "_core/WakeSuperposition.html", "_core/WakeSuperposition.calc_final_wake_delta.html", "_core/WakeSuperposition.calc_wakes_plus_wake.html", "_core/WindFarm.html", "_core/WindFarm.__init__.html", "_core/WindFarm.add_turbine.html", "_core/WindFarm.n_turbines.html", "_core/WindFarm.turbine_names.html", "_data/StaticData.html", "_data/StaticData.__init__.html", "_data/parse_Pct_file_name.html", "_data/parse_Pct_two_files.html", "_foxes/constants/AMB_RPOINT_RESULTS.html", "_foxes/constants/DTYPE.html", "_foxes/constants/DTYPE.T.html", "_foxes/constants/DTYPE.__abs__.html", "_foxes/constants/DTYPE.__add__.html", "_foxes/constants/DTYPE.__and__.html", "_foxes/constants/DTYPE.__array__.html", "_foxes/constants/DTYPE.__array_interface__.html", "_foxes/constants/DTYPE.__array_priority__.html", "_foxes/constants/DTYPE.__array_struct__.html", "_foxes/constants/DTYPE.__array_wrap__.html", "_foxes/constants/DTYPE.__bool__.html", "_foxes/constants/DTYPE.__class_getitem__.html", "_foxes/constants/DTYPE.__divmod__.html", "_foxes/constants/DTYPE.__eq__.html", "_foxes/constants/DTYPE.__float__.html", "_foxes/constants/DTYPE.__floordiv__.html", "_foxes/constants/DTYPE.__format__.html", "_foxes/constants/DTYPE.__ge__.html", "_foxes/constants/DTYPE.__getitem__.html", "_foxes/constants/DTYPE.__gt__.html", "_foxes/constants/DTYPE.__hash__.html", "_foxes/constants/DTYPE.__int__.html", "_foxes/constants/DTYPE.__invert__.html", "_foxes/constants/DTYPE.__le__.html", "_foxes/constants/DTYPE.__lshift__.html", "_foxes/constants/DTYPE.__lt__.html", "_foxes/constants/DTYPE.__mod__.html", "_foxes/constants/DTYPE.__mul__.html", "_foxes/constants/DTYPE.__ne__.html", "_foxes/constants/DTYPE.__neg__.html", "_foxes/constants/DTYPE.__new__.html", "_foxes/constants/DTYPE.__or__.html", "_foxes/constants/DTYPE.__pos__.html", "_foxes/constants/DTYPE.__pow__.html", "_foxes/constants/DTYPE.__radd__.html", "_foxes/constants/DTYPE.__rand__.html", "_foxes/constants/DTYPE.__rdivmod__.html", "_foxes/constants/DTYPE.__reduce__.html", "_foxes/constants/DTYPE.__repr__.html", "_foxes/constants/DTYPE.__rfloordiv__.html", "_foxes/constants/DTYPE.__rlshift__.html", "_foxes/constants/DTYPE.__rmod__.html", "_foxes/constants/DTYPE.__rmul__.html", "_foxes/constants/DTYPE.__ror__.html", "_foxes/constants/DTYPE.__rpow__.html", "_foxes/constants/DTYPE.__rrshift__.html", "_foxes/constants/DTYPE.__rshift__.html", "_foxes/constants/DTYPE.__rsub__.html", "_foxes/constants/DTYPE.__rtruediv__.html", "_foxes/constants/DTYPE.__rxor__.html", "_foxes/constants/DTYPE.__sizeof__.html", "_foxes/constants/DTYPE.__str__.html", "_foxes/constants/DTYPE.__sub__.html", "_foxes/constants/DTYPE.__truediv__.html", "_foxes/constants/DTYPE.__xor__.html", "_foxes/constants/DTYPE.all.html", "_foxes/constants/DTYPE.any.html", "_foxes/constants/DTYPE.argmax.html", "_foxes/constants/DTYPE.argmin.html", "_foxes/constants/DTYPE.argsort.html", "_foxes/constants/DTYPE.as_integer_ratio.html", "_foxes/constants/DTYPE.astype.html", "_foxes/constants/DTYPE.base.html", "_foxes/constants/DTYPE.byteswap.html", "_foxes/constants/DTYPE.choose.html", "_foxes/constants/DTYPE.clip.html", "_foxes/constants/DTYPE.compress.html", "_foxes/constants/DTYPE.conj.html", "_foxes/constants/DTYPE.conjugate.html", "_foxes/constants/DTYPE.copy.html", "_foxes/constants/DTYPE.cumprod.html", "_foxes/constants/DTYPE.cumsum.html", "_foxes/constants/DTYPE.data.html", "_foxes/constants/DTYPE.diagonal.html", "_foxes/constants/DTYPE.dtype.html", "_foxes/constants/DTYPE.dump.html", "_foxes/constants/DTYPE.dumps.html", "_foxes/constants/DTYPE.fill.html", "_foxes/constants/DTYPE.flags.html", "_foxes/constants/DTYPE.flat.html", "_foxes/constants/DTYPE.flatten.html", "_foxes/constants/DTYPE.getfield.html", "_foxes/constants/DTYPE.imag.html", "_foxes/constants/DTYPE.is_integer.html", "_foxes/constants/DTYPE.item.html", "_foxes/constants/DTYPE.itemset.html", "_foxes/constants/DTYPE.itemsize.html", "_foxes/constants/DTYPE.max.html", "_foxes/constants/DTYPE.mean.html", "_foxes/constants/DTYPE.min.html", "_foxes/constants/DTYPE.nbytes.html", "_foxes/constants/DTYPE.ndim.html", "_foxes/constants/DTYPE.newbyteorder.html", "_foxes/constants/DTYPE.nonzero.html", "_foxes/constants/DTYPE.prod.html", "_foxes/constants/DTYPE.ptp.html", "_foxes/constants/DTYPE.put.html", "_foxes/constants/DTYPE.ravel.html", "_foxes/constants/DTYPE.real.html", "_foxes/constants/DTYPE.repeat.html", "_foxes/constants/DTYPE.reshape.html", "_foxes/constants/DTYPE.resize.html", "_foxes/constants/DTYPE.round.html", "_foxes/constants/DTYPE.searchsorted.html", "_foxes/constants/DTYPE.setfield.html", "_foxes/constants/DTYPE.setflags.html", "_foxes/constants/DTYPE.shape.html", "_foxes/constants/DTYPE.size.html", "_foxes/constants/DTYPE.sort.html", "_foxes/constants/DTYPE.squeeze.html", "_foxes/constants/DTYPE.std.html", "_foxes/constants/DTYPE.strides.html", "_foxes/constants/DTYPE.sum.html", "_foxes/constants/DTYPE.swapaxes.html", "_foxes/constants/DTYPE.take.html", "_foxes/constants/DTYPE.tobytes.html", "_foxes/constants/DTYPE.tofile.html", "_foxes/constants/DTYPE.tolist.html", "_foxes/constants/DTYPE.tostring.html", "_foxes/constants/DTYPE.trace.html", "_foxes/constants/DTYPE.transpose.html", "_foxes/constants/DTYPE.var.html", "_foxes/constants/DTYPE.view.html", "_foxes/constants/FARM.html", "_foxes/constants/GW.html", "_foxes/constants/ITYPE.html", "_foxes/constants/ITYPE.__abs__.html", "_foxes/constants/ITYPE.__add__.html", "_foxes/constants/ITYPE.__and__.html", "_foxes/constants/ITYPE.__bool__.html", "_foxes/constants/ITYPE.__class_getitem__.html", "_foxes/constants/ITYPE.__divmod__.html", "_foxes/constants/ITYPE.__eq__.html", "_foxes/constants/ITYPE.__float__.html", "_foxes/constants/ITYPE.__floordiv__.html", "_foxes/constants/ITYPE.__ge__.html", "_foxes/constants/ITYPE.__gt__.html", "_foxes/constants/ITYPE.__hash__.html", "_foxes/constants/ITYPE.__index__.html", "_foxes/constants/ITYPE.__int__.html", "_foxes/constants/ITYPE.__invert__.html", "_foxes/constants/ITYPE.__le__.html", "_foxes/constants/ITYPE.__lshift__.html", "_foxes/constants/ITYPE.__lt__.html", "_foxes/constants/ITYPE.__mod__.html", "_foxes/constants/ITYPE.__mul__.html", "_foxes/constants/ITYPE.__ne__.html", "_foxes/constants/ITYPE.__neg__.html", "_foxes/constants/ITYPE.__new__.html", "_foxes/constants/ITYPE.__or__.html", "_foxes/constants/ITYPE.__pos__.html", "_foxes/constants/ITYPE.__pow__.html", "_foxes/constants/ITYPE.__radd__.html", "_foxes/constants/ITYPE.__rand__.html", "_foxes/constants/ITYPE.__rdivmod__.html", "_foxes/constants/ITYPE.__repr__.html", "_foxes/constants/ITYPE.__rfloordiv__.html", "_foxes/constants/ITYPE.__rlshift__.html", "_foxes/constants/ITYPE.__rmod__.html", "_foxes/constants/ITYPE.__rmul__.html", "_foxes/constants/ITYPE.__ror__.html", "_foxes/constants/ITYPE.__rpow__.html", "_foxes/constants/ITYPE.__rrshift__.html", "_foxes/constants/ITYPE.__rshift__.html", "_foxes/constants/ITYPE.__rsub__.html", "_foxes/constants/ITYPE.__rtruediv__.html", "_foxes/constants/ITYPE.__rxor__.html", "_foxes/constants/ITYPE.__str__.html", "_foxes/constants/ITYPE.__sub__.html", "_foxes/constants/ITYPE.__truediv__.html", "_foxes/constants/ITYPE.__xor__.html", "_foxes/constants/ITYPE.bit_count.html", "_foxes/constants/ITYPE.denominator.html", "_foxes/constants/ITYPE.is_integer.html", "_foxes/constants/ITYPE.numerator.html", "_foxes/constants/KAPPA.html", "_foxes/constants/MW.html", "_foxes/constants/POINT.html", "_foxes/constants/POINTS.html", "_foxes/constants/POP.html", "_foxes/constants/P_UNITS.html", "_foxes/constants/RPOINT.html", "_foxes/constants/RPOINTS.html", "_foxes/constants/RWEIGHTS.html", "_foxes/constants/STATE.html", "_foxes/constants/STATES_SEL.html", "_foxes/constants/STATE_POINT.html", "_foxes/constants/STATE_SOURCE_TURBINE.html", "_foxes/constants/STATE_TURBINE.html", "_foxes/constants/TMODELS.html", "_foxes/constants/TMODEL_SELS.html", "_foxes/constants/TNAME.html", "_foxes/constants/TURBINE.html", "_foxes/constants/TW.html", "_foxes/constants/VALID.html", "_foxes/constants/VARS.html", "_foxes/constants/W.html", "_foxes/constants/XYH.html", "_foxes/constants/kW.html", "_foxes/variables/AMB_CAP.html", "_foxes/variables/AMB_CT.html", "_foxes/variables/AMB_P.html", "_foxes/variables/AMB_REWS.html", "_foxes/variables/AMB_REWS2.html", "_foxes/variables/AMB_REWS3.html", "_foxes/variables/AMB_RHO.html", "_foxes/variables/AMB_T.html", "_foxes/variables/AMB_TI.html", "_foxes/variables/AMB_WD.html", "_foxes/variables/AMB_WS.html", "_foxes/variables/AMB_YAW.html", "_foxes/variables/AMB_YAWM.html", "_foxes/variables/AMB_YLD.html", "_foxes/variables/CAP.html", "_foxes/variables/CT.html", "_foxes/variables/D.html", "_foxes/variables/EFF.html", "_foxes/variables/H.html", "_foxes/variables/K.html", "_foxes/variables/KB.html", "_foxes/variables/KTI.html", "_foxes/variables/MAX_P.html", "_foxes/variables/MOL.html", "_foxes/variables/ORDER.html", "_foxes/variables/P.html", "_foxes/variables/PA_ALPHA.html", "_foxes/variables/PA_BETA.html", "_foxes/variables/REWS.html", "_foxes/variables/REWS2.html", "_foxes/variables/REWS3.html", "_foxes/variables/RHO.html", "_foxes/variables/SHEAR.html", "_foxes/variables/T.html", "_foxes/variables/TI.html", "_foxes/variables/TXYH.html", "_foxes/variables/WD.html", "_foxes/variables/WEIGHT.html", "_foxes/variables/WS.html", "_foxes/variables/X.html", "_foxes/variables/Y.html", "_foxes/variables/YAW.html", "_foxes/variables/YAWM.html", "_foxes/variables/YLD.html", "_foxes/variables/Z0.html", "_foxes/variables/amb2var.html", "_foxes/variables/var2amb.html", "_input/farm_layout/add_from_csv.html", "_input/farm_layout/add_from_df.html", "_input/farm_layout/add_from_file.html", "_input/farm_layout/add_from_json.html", "_input/farm_layout/add_grid.html", "_input/farm_layout/add_row.html", "_input/states/FieldDataNC.html", "_input/states/FieldDataNC.__init__.html", "_input/states/FieldDataNC.calculate.html", "_input/states/FieldDataNC.index.html", "_input/states/FieldDataNC.initialize.html", "_input/states/FieldDataNC.output_point_vars.html", "_input/states/FieldDataNC.size.html", "_input/states/FieldDataNC.weights.html", "_input/states/MultiHeightStates.html", "_input/states/MultiHeightStates.RDICT.html", "_input/states/MultiHeightStates.__init__.html", "_input/states/MultiHeightStates.calculate.html", "_input/states/MultiHeightStates.finalize.html", "_input/states/MultiHeightStates.index.html", "_input/states/MultiHeightStates.initialize.html", "_input/states/MultiHeightStates.output_point_vars.html", "_input/states/MultiHeightStates.reset.html", "_input/states/MultiHeightStates.size.html", "_input/states/MultiHeightStates.weights.html", "_input/states/MultiHeightTimeseries.html", "_input/states/MultiHeightTimeseries.RDICT.html", "_input/states/ScanWS.html", "_input/states/ScanWS.__init__.html", "_input/states/ScanWS.calculate.html", "_input/states/ScanWS.initialize.html", "_input/states/ScanWS.output_point_vars.html", "_input/states/ScanWS.size.html", "_input/states/ScanWS.weights.html", "_input/states/SingleStateStates.html", "_input/states/SingleStateStates.__init__.html", "_input/states/SingleStateStates.calculate.html", "_input/states/SingleStateStates.initialize.html", "_input/states/SingleStateStates.output_point_vars.html", "_input/states/SingleStateStates.size.html", "_input/states/SingleStateStates.weights.html", "_input/states/StatesTable.html", "_input/states/StatesTable.RDICT.html", "_input/states/StatesTable.__init__.html", "_input/states/StatesTable.calculate.html", "_input/states/StatesTable.finalize.html", "_input/states/StatesTable.index.html", "_input/states/StatesTable.initialize.html", "_input/states/StatesTable.output_point_vars.html", "_input/states/StatesTable.reset.html", "_input/states/StatesTable.size.html", "_input/states/StatesTable.weights.html", "_input/states/Timeseries.html", "_input/states/Timeseries.RDICT.html", "_input/states/create_random_abl_states.html", "_input/windio/read_case.html", "_models/farm_controllers/BasicFarmController.html", "_models/farm_models/Turbine2FarmModel.html", "_models/farm_models/Turbine2FarmModel.__init__.html", "_models/farm_models/Turbine2FarmModel.__repr__.html", "_models/farm_models/Turbine2FarmModel.calculate.html", "_models/farm_models/Turbine2FarmModel.finalize.html", "_models/farm_models/Turbine2FarmModel.initialize.html", "_models/farm_models/Turbine2FarmModel.output_farm_vars.html", "_models/model_book/Dict.html", "_models/model_book/Dict.__getitem__.html", "_models/model_book/Dict.__init__.html", "_models/model_book/ModelBook.html", "_models/model_book/ModelBook.__getitem__.html", "_models/model_book/ModelBook.__init__.html", "_models/model_book/ModelBook.finalize.html", "_models/model_book/ModelBook.print_toc.html", "_models/partial_wakes/Mapped.html", "_models/partial_wakes/Mapped.__init__.html", "_models/partial_wakes/Mapped.contribute_to_wake_deltas.html", "_models/partial_wakes/Mapped.evaluate_results.html", "_models/partial_wakes/Mapped.finalize.html", "_models/partial_wakes/Mapped.initialize.html", "_models/partial_wakes/Mapped.keep.html", "_models/partial_wakes/Mapped.new_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.html", "_models/partial_wakes/PartialAxiwake.__init__.html", "_models/partial_wakes/PartialAxiwake.__repr__.html", "_models/partial_wakes/PartialAxiwake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.evaluate_results.html", "_models/partial_wakes/PartialAxiwake.finalize.html", "_models/partial_wakes/PartialAxiwake.initialize.html", "_models/partial_wakes/PartialAxiwake.keep.html", "_models/partial_wakes/PartialAxiwake.new_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.html", "_models/partial_wakes/PartialDistSlicedWake.__init__.html", "_models/partial_wakes/PartialDistSlicedWake.__repr__.html", "_models/partial_wakes/PartialDistSlicedWake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.evaluate_results.html", "_models/partial_wakes/PartialDistSlicedWake.finalize.html", "_models/partial_wakes/PartialDistSlicedWake.initialize.html", "_models/partial_wakes/PartialDistSlicedWake.keep.html", "_models/partial_wakes/PartialDistSlicedWake.new_wake_deltas.html", "_models/partial_wakes/PartialGrid.html", "_models/partial_wakes/PartialGrid.__init__.html", "_models/partial_wakes/PartialGrid.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.html", "_models/partial_wakes/PartialTopHat.__init__.html", "_models/partial_wakes/PartialTopHat.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.evaluate_results.html", "_models/partial_wakes/PartialTopHat.finalize.html", "_models/partial_wakes/PartialTopHat.initialize.html", "_models/partial_wakes/PartialTopHat.keep.html", "_models/partial_wakes/PartialTopHat.new_wake_deltas.html", "_models/partial_wakes/RotorPoints.html", "_models/partial_wakes/RotorPoints.__init__.html", "_models/partial_wakes/RotorPoints.contribute_to_wake_deltas.html", "_models/partial_wakes/RotorPoints.evaluate_results.html", "_models/partial_wakes/RotorPoints.get_wake_points.html", "_models/partial_wakes/RotorPoints.new_wake_deltas.html", "_models/point_models/SetUniformData.html", "_models/point_models/SetUniformData.__init__.html", "_models/point_models/SetUniformData.calculate.html", "_models/point_models/SetUniformData.initialize.html", "_models/point_models/SetUniformData.output_point_vars.html", "_models/point_models/TKE2TI.html", "_models/point_models/TKE2TI.calculate.html", "_models/point_models/TKE2TI.output_point_vars.html", "_models/point_models/WakeDeltas.html", "_models/point_models/WakeDeltas.__init__.html", "_models/point_models/WakeDeltas.calculate.html", "_models/point_models/WakeDeltas.output_point_vars.html", "_models/rotor_models/CentreRotor.html", "_models/rotor_models/CentreRotor.design_points.html", "_models/rotor_models/CentreRotor.eval_rpoint_results.html", "_models/rotor_models/CentreRotor.get_rotor_points.html", "_models/rotor_models/CentreRotor.n_rotor_points.html", "_models/rotor_models/CentreRotor.rotor_point_weights.html", "_models/rotor_models/GridRotor.html", "_models/rotor_models/GridRotor.__init__.html", "_models/rotor_models/GridRotor.__repr__.html", "_models/rotor_models/GridRotor.design_points.html", "_models/rotor_models/GridRotor.initialize.html", "_models/rotor_models/GridRotor.n_rotor_points.html", "_models/rotor_models/GridRotor.rotor_point_weights.html", "_models/turbine_models/Calculator.html", "_models/turbine_models/Calculator.__init__.html", "_models/turbine_models/Calculator.calculate.html", "_models/turbine_models/Calculator.output_farm_vars.html", "_models/turbine_models/LookupTable.html", "_models/turbine_models/LookupTable.__init__.html", "_models/turbine_models/LookupTable.calculate.html", "_models/turbine_models/LookupTable.initialize.html", "_models/turbine_models/LookupTable.output_farm_vars.html", "_models/turbine_models/PowerMask.html", "_models/turbine_models/PowerMask.__init__.html", "_models/turbine_models/PowerMask.calculate.html", "_models/turbine_models/PowerMask.initialize.html", "_models/turbine_models/PowerMask.output_farm_vars.html", "_models/turbine_models/PowerMask.update_P_ct.html", "_models/turbine_models/RotorCentreCalc.html", "_models/turbine_models/RotorCentreCalc.__init__.html", "_models/turbine_models/RotorCentreCalc.calculate.html", "_models/turbine_models/RotorCentreCalc.finalize.html", "_models/turbine_models/RotorCentreCalc.initialize.html", "_models/turbine_models/RotorCentreCalc.output_farm_vars.html", "_models/turbine_models/SectorManagement.html", "_models/turbine_models/SectorManagement.__init__.html", "_models/turbine_models/SectorManagement.calculate.html", "_models/turbine_models/SectorManagement.initialize.html", "_models/turbine_models/SectorManagement.output_farm_vars.html", "_models/turbine_models/SetFarmVars.html", "_models/turbine_models/SetFarmVars.__init__.html", "_models/turbine_models/SetFarmVars.add_var.html", "_models/turbine_models/SetFarmVars.calculate.html", "_models/turbine_models/SetFarmVars.initialize.html", "_models/turbine_models/SetFarmVars.output_farm_vars.html", "_models/turbine_models/SetFarmVars.reset.html", "_models/turbine_models/SetXYHD.html", "_models/turbine_models/SetXYHD.__init__.html", "_models/turbine_models/SetXYHD.calculate.html", "_models/turbine_models/SetXYHD.output_farm_vars.html", "_models/turbine_models/TableFactors.html", "_models/turbine_models/TableFactors.__init__.html", "_models/turbine_models/TableFactors.calculate.html", "_models/turbine_models/TableFactors.initialize.html", "_models/turbine_models/TableFactors.output_farm_vars.html", "_models/turbine_models/Thrust2Ct.html", "_models/turbine_models/Thrust2Ct.__init__.html", "_models/turbine_models/Thrust2Ct.calculate.html", "_models/turbine_models/Thrust2Ct.output_farm_vars.html", "_models/turbine_models/YAW2YAWM.html", "_models/turbine_models/YAW2YAWM.calculate.html", "_models/turbine_models/YAW2YAWM.output_farm_vars.html", "_models/turbine_models/YAWM2YAW.html", "_models/turbine_models/YAWM2YAW.calculate.html", "_models/turbine_models/YAWM2YAW.output_farm_vars.html", "_models/turbine_models/kTI.html", "_models/turbine_models/kTI.__init__.html", "_models/turbine_models/kTI.__repr__.html", "_models/turbine_models/kTI.calculate.html", "_models/turbine_models/kTI.output_farm_vars.html", "_models/turbine_types/CpCtFile.html", "_models/turbine_types/CpCtFile.__init__.html", "_models/turbine_types/CpCtFromTwo.html", "_models/turbine_types/CpCtFromTwo.__init__.html", "_models/turbine_types/NullType.html", "_models/turbine_types/NullType.calculate.html", "_models/turbine_types/NullType.output_farm_vars.html", "_models/turbine_types/PCtFile.html", "_models/turbine_types/PCtFile.__init__.html", "_models/turbine_types/PCtFile.calculate.html", "_models/turbine_types/PCtFile.finalize.html", "_models/turbine_types/PCtFile.initialize.html", "_models/turbine_types/PCtFile.output_farm_vars.html", "_models/turbine_types/PCtFromTwo.html", "_models/turbine_types/PCtFromTwo.__init__.html", "_models/turbine_types/PCtFromTwo.calculate.html", "_models/turbine_types/PCtFromTwo.finalize.html", "_models/turbine_types/PCtFromTwo.initialize.html", "_models/turbine_types/PCtFromTwo.output_farm_vars.html", "_models/turbine_types/WsRho2PCtFromTwo.html", "_models/turbine_types/WsRho2PCtFromTwo.__init__.html", "_models/turbine_types/WsRho2PCtFromTwo.calculate.html", "_models/turbine_types/WsRho2PCtFromTwo.finalize.html", "_models/turbine_types/WsRho2PCtFromTwo.initialize.html", "_models/turbine_types/WsRho2PCtFromTwo.output_farm_vars.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.calculate.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogStableWsProfile.html", "_models/vertical_profiles/ABLLogStableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogStableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogWsProfile.html", "_models/vertical_profiles/ABLLogWsProfile.calculate.html", "_models/vertical_profiles/ABLLogWsProfile.input_vars.html", "_models/vertical_profiles/ShearedProfile.html", "_models/vertical_profiles/ShearedProfile.calculate.html", "_models/vertical_profiles/ShearedProfile.input_vars.html", "_models/vertical_profiles/UniformProfile.html", "_models/vertical_profiles/UniformProfile.__init__.html", "_models/vertical_profiles/UniformProfile.calculate.html", "_models/vertical_profiles/UniformProfile.input_vars.html", "_models/wake_frames/FarmOrder.html", "_models/wake_frames/FarmOrder.__init__.html", "_models/wake_frames/FarmOrder.calc_order.html", "_models/wake_frames/FarmOrder.finalize.html", "_models/wake_frames/FarmOrder.get_centreline_points.html", "_models/wake_frames/FarmOrder.get_wake_coos.html", "_models/wake_frames/FarmOrder.initialize.html", "_models/wake_frames/RotorWD.html", "_models/wake_frames/RotorWD.__init__.html", "_models/wake_frames/RotorWD.calc_order.html", "_models/wake_frames/RotorWD.get_centreline_points.html", "_models/wake_frames/RotorWD.get_wake_coos.html", "_models/wake_frames/Streamlines.html", "_models/wake_frames/Streamlines.__init__.html", "_models/wake_frames/Streamlines.__repr__.html", "_models/wake_frames/Streamlines.calc_order.html", "_models/wake_frames/Streamlines.get_centreline_points.html", "_models/wake_frames/Streamlines.get_wake_coos.html", "_models/wake_frames/Streamlines.initialize.html", "_models/wake_frames/Timelines.html", "_models/wake_frames/Timelines.__init__.html", "_models/wake_frames/Timelines.calc_order.html", "_models/wake_frames/Timelines.get_centreline_points.html", "_models/wake_frames/Timelines.get_wake_coos.html", "_models/wake_frames/Timelines.initialize.html", "_models/wake_frames/YawedWakes.html", "_models/wake_frames/YawedWakes.__init__.html", "_models/wake_frames/YawedWakes.calc_order.html", "_models/wake_frames/YawedWakes.finalize.html", "_models/wake_frames/YawedWakes.get_centreline_points.html", "_models/wake_frames/YawedWakes.get_wake_coos.html", "_models/wake_frames/YawedWakes.initialize.html", "_models/wake_models/AxisymmetricWakeModel.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.html", "_models/wake_models/DistSlicedWakeModel.__init__.html", "_models/wake_models/DistSlicedWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.contribute_to_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.finalize.html", "_models/wake_models/DistSlicedWakeModel.finalize_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.initialize.html", "_models/wake_models/DistSlicedWakeModel.keep.html", "_models/wake_models/GaussianWakeModel.html", "_models/wake_models/GaussianWakeModel.calc_amplitude_sigma_spsel.html", "_models/wake_models/GaussianWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/TopHatWakeModel.html", "_models/wake_models/TopHatWakeModel.__init__.html", "_models/wake_models/TopHatWakeModel.calc_centreline_wake_deltas.html", "_models/wake_models/TopHatWakeModel.calc_wake_radius.html", "_models/wake_models/TopHatWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/ti/CrespoHernandezTIWake.html", "_models/wake_models/ti/CrespoHernandezTIWake.__init__.html", "_models/wake_models/ti/CrespoHernandezTIWake.__repr__.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_wake_radius.html", "_models/wake_models/ti/CrespoHernandezTIWake.init_wake_deltas.html", "_models/wake_models/ti/IECTIWake.html", "_models/wake_models/ti/IECTIWake.__init__.html", "_models/wake_models/ti/IECTIWake.__repr__.html", "_models/wake_models/ti/IECTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/IECTIWake.calc_wake_radius.html", "_models/wake_models/ti/IECTIWake.init_wake_deltas.html", "_models/wake_models/wind/BastankhahWake.html", "_models/wake_models/wind/BastankhahWake.__init__.html", "_models/wake_models/wind/BastankhahWake.__repr__.html", "_models/wake_models/wind/BastankhahWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/BastankhahWake.init_wake_deltas.html", "_models/wake_models/wind/JensenWake.html", "_models/wake_models/wind/JensenWake.__init__.html", "_models/wake_models/wind/JensenWake.__repr__.html", "_models/wake_models/wind/JensenWake.calc_centreline_wake_deltas.html", "_models/wake_models/wind/JensenWake.calc_wake_radius.html", "_models/wake_models/wind/JensenWake.init_wake_deltas.html", "_models/wake_models/wind/PorteAgelModel.html", "_models/wake_models/wind/PorteAgelModel.AMPL_FAR.html", "_models/wake_models/wind/PorteAgelModel.AMPL_NEAR.html", "_models/wake_models/wind/PorteAgelModel.CHECK.html", "_models/wake_models/wind/PorteAgelModel.DELTA_FAR.html", "_models/wake_models/wind/PorteAgelModel.DELTA_NEAR.html", "_models/wake_models/wind/PorteAgelModel.MDATA_KEY.html", "_models/wake_models/wind/PorteAgelModel.NEAR.html", "_models/wake_models/wind/PorteAgelModel.PARS.html", "_models/wake_models/wind/PorteAgelModel.R_PC.html", "_models/wake_models/wind/PorteAgelModel.R_PC_S.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Y_FAR.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Z_FAR.html", "_models/wake_models/wind/PorteAgelModel.SP_SEL.html", "_models/wake_models/wind/PorteAgelModel.X0.html", "_models/wake_models/wind/PorteAgelModel.__init__.html", "_models/wake_models/wind/PorteAgelModel.calc_data.html", "_models/wake_models/wind/PorteAgelModel.clean.html", "_models/wake_models/wind/PorteAgelModel.get_data.html", "_models/wake_models/wind/PorteAgelModel.has_data.html", "_models/wake_models/wind/PorteAgelModel.pars.html", "_models/wake_models/wind/PorteAgelWake.html", "_models/wake_models/wind/PorteAgelWake.__init__.html", "_models/wake_models/wind/PorteAgelWake.__repr__.html", "_models/wake_models/wind/PorteAgelWake.calc_wakes_spsel_x_yz.html", "_models/wake_models/wind/PorteAgelWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWake.html", "_models/wake_models/wind/TurbOParkWake.__init__.html", "_models/wake_models/wind/TurbOParkWake.__repr__.html", "_models/wake_models/wind/TurbOParkWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWakeIX.html", "_models/wake_models/wind/TurbOParkWakeIX.__init__.html", "_models/wake_models/wind/TurbOParkWakeIX.__repr__.html", "_models/wake_models/wind/TurbOParkWakeIX.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWakeIX.init_wake_deltas.html", "_models/wake_superpositions/LinearSuperposition.html", "_models/wake_superpositions/LinearSuperposition.__init__.html", "_models/wake_superpositions/LinearSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/LinearSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/LinearSuperposition.input_farm_vars.html", "_models/wake_superpositions/MaxSuperposition.html", "_models/wake_superpositions/MaxSuperposition.__init__.html", "_models/wake_superpositions/MaxSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/MaxSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/MaxSuperposition.initialize.html", "_models/wake_superpositions/MaxSuperposition.input_farm_vars.html", "_models/wake_superpositions/ProductSuperposition.html", "_models/wake_superpositions/ProductSuperposition.__init__.html", "_models/wake_superpositions/ProductSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/ProductSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.html", "_models/wake_superpositions/QuadraticSuperposition.__init__.html", "_models/wake_superpositions/QuadraticSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/QuadraticSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.initialize.html", "_models/wake_superpositions/QuadraticSuperposition.input_farm_vars.html", "_models/wake_superpositions/TISuperposition.html", "_models/wake_superpositions/TISuperposition.__init__.html", "_models/wake_superpositions/TISuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/TISuperposition.calc_wakes_plus_wake.html", "_output/FarmLayoutOutput.html", "_output/FarmLayoutOutput.__init__.html", "_output/FarmLayoutOutput.get_figure.html", "_output/FarmLayoutOutput.get_layout_data.html", "_output/FarmLayoutOutput.get_layout_dict.html", "_output/FarmLayoutOutput.write_csv.html", "_output/FarmLayoutOutput.write_json.html", "_output/FarmLayoutOutput.write_plot.html", "_output/FarmLayoutOutput.write_xyh.html", "_output/FarmResultsEval.html", "_output/FarmResultsEval.__init__.html", "_output/FarmResultsEval.add_capacity.html", "_output/FarmResultsEval.add_efficiency.html", "_output/FarmResultsEval.calc_farm_efficiency.html", "_output/FarmResultsEval.calc_farm_mean.html", "_output/FarmResultsEval.calc_farm_sum.html", "_output/FarmResultsEval.calc_farm_yield.html", "_output/FarmResultsEval.calc_mean_farm_power.html", "_output/FarmResultsEval.calc_states_mean.html", "_output/FarmResultsEval.calc_states_std.html", "_output/FarmResultsEval.calc_states_sum.html", "_output/FarmResultsEval.calc_turbine_mean.html", "_output/FarmResultsEval.calc_turbine_sum.html", "_output/FarmResultsEval.calc_turbine_yield.html", "_output/FarmResultsEval.reduce_all.html", "_output/FarmResultsEval.reduce_states.html", "_output/FarmResultsEval.reduce_turbines.html", "_output/FarmResultsEval.weinsum.html", "_output/FlowPlots2D.html", "_output/FlowPlots2D.__init__.html", "_output/FlowPlots2D.gen_states_fig_xy.html", "_output/FlowPlots2D.gen_states_fig_xz.html", "_output/FlowPlots2D.gen_states_fig_yz.html", "_output/FlowPlots2D.get_mean_fig_xy.html", "_output/FlowPlots2D.get_mean_fig_xz.html", "_output/FlowPlots2D.get_mean_fig_yz.html", "_output/Output.html", "_output/Output.new.html", "_output/Output.print_models.html", "_output/Output.write.html", "_output/ResultsWriter.html", "_output/ResultsWriter.__init__.html", "_output/ResultsWriter.write_csv.html", "_output/RosePlotOutput.html", "_output/RosePlotOutput.__init__.html", "_output/RosePlotOutput.get_data.html", "_output/RosePlotOutput.get_data_info.html", "_output/RosePlotOutput.get_figure.html", "_output/RosePlotOutput.write_figure.html", "_output/StateTurbineMap.html", "_output/StateTurbineMap.__init__.html", "_output/StateTurbineMap.plot_map.html", "_output/StatesRosePlotOutput.html", "_output/StatesRosePlotOutput.__init__.html", "_output/TurbineTypeCurves.html", "_output/TurbineTypeCurves.__init__.html", "_output/TurbineTypeCurves.plot_curves.html", "_utils/DataBook.html", "_utils/DataBook.__init__.html", "_utils/DataBook.add_data_package.html", "_utils/DataBook.add_data_package_file.html", "_utils/DataBook.add_file.html", "_utils/DataBook.add_files.html", "_utils/DataBook.get_file_path.html", "_utils/DataBook.toc.html", "_utils/PandasFileHelper.html", "_utils/PandasFileHelper.DATA_FILE_FORMATS.html", "_utils/PandasFileHelper.DEFAULT_FORMAT_DICT.html", "_utils/PandasFileHelper.DEFAULT_READING_PARAMETERS.html", "_utils/PandasFileHelper.DEFAULT_WRITING_PARAMETERS.html", "_utils/PandasFileHelper.read_file.html", "_utils/PandasFileHelper.write_file.html", "_utils/abl/neutral/calc_ws.html", "_utils/abl/neutral/logz.html", "_utils/abl/neutral/ustar.html", "_utils/abl/sheared/calc_ws.html", "_utils/abl/stable/calc_ws.html", "_utils/abl/stable/lgz.html", "_utils/abl/stable/logz.html", "_utils/abl/stable/psi.html", "_utils/abl/stable/ustar.html", "_utils/abl/unstable/calc_ws.html", "_utils/abl/unstable/logz.html", "_utils/abl/unstable/psi.html", "_utils/abl/unstable/ustar.html", "_utils/all_subclasses.html", "_utils/cubic_roots.html", "_utils/delta_wd.html", "_utils/geom2d/AreaGeometry.html", "_utils/geom2d/AreaGeometry.add_to_figure.html", "_utils/geom2d/AreaGeometry.inverse.html", "_utils/geom2d/AreaGeometry.p_max.html", "_utils/geom2d/AreaGeometry.p_min.html", "_utils/geom2d/AreaGeometry.points_distance.html", "_utils/geom2d/AreaGeometry.points_inside.html", "_utils/geom2d/AreaIntersection.html", "_utils/geom2d/AreaIntersection.__new__.html", "_utils/geom2d/AreaUnion.html", "_utils/geom2d/AreaUnion.__init__.html", "_utils/geom2d/AreaUnion.add_to_figure.html", "_utils/geom2d/AreaUnion.inverse.html", "_utils/geom2d/AreaUnion.p_max.html", "_utils/geom2d/AreaUnion.p_min.html", "_utils/geom2d/AreaUnion.points_distance.html", "_utils/geom2d/AreaUnion.points_inside.html", "_utils/geom2d/Circle.html", "_utils/geom2d/Circle.__init__.html", "_utils/geom2d/Circle.add_to_figure.html", "_utils/geom2d/Circle.p_max.html", "_utils/geom2d/Circle.p_min.html", "_utils/geom2d/Circle.points_distance.html", "_utils/geom2d/Circle.points_inside.html", "_utils/geom2d/ClosedPolygon.html", "_utils/geom2d/ClosedPolygon.__init__.html", "_utils/geom2d/ClosedPolygon.add_to_figure.html", "_utils/geom2d/ClosedPolygon.p_max.html", "_utils/geom2d/ClosedPolygon.p_min.html", "_utils/geom2d/ClosedPolygon.points_distance.html", "_utils/geom2d/ClosedPolygon.points_inside.html", "_utils/geom2d/HalfPlane.html", "_utils/geom2d/HalfPlane.__init__.html", "_utils/geom2d/HalfPlane.add_to_figure.html", "_utils/geom2d/HalfPlane.inverse.html", "_utils/geom2d/HalfPlane.p_max.html", "_utils/geom2d/HalfPlane.p_min.html", "_utils/geom2d/HalfPlane.points_distance.html", "_utils/geom2d/HalfPlane.points_inside.html", "_utils/geom2d/InvertedAreaGeometry.html", "_utils/geom2d/InvertedAreaGeometry.__init__.html", "_utils/geom2d/InvertedAreaGeometry.add_to_figure.html", "_utils/geom2d/InvertedAreaGeometry.inverse.html", "_utils/geom2d/InvertedAreaGeometry.p_max.html", "_utils/geom2d/InvertedAreaGeometry.p_min.html", "_utils/geom2d/InvertedAreaGeometry.points_distance.html", "_utils/geom2d/InvertedAreaGeometry.points_inside.html", "_utils/opt/constraints/AreaGeometryConstraint.html", "_utils/opt/constraints/AreaGeometryConstraint.__init__.html", "_utils/opt/constraints/AreaGeometryConstraint.__str__.html", "_utils/opt/constraints/AreaGeometryConstraint.ana_deriv.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_population.html", "_utils/opt/constraints/AreaGeometryConstraint.component_names.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_population.html", "_utils/opt/constraints/AreaGeometryConstraint.initialize.html", "_utils/opt/constraints/AreaGeometryConstraint.initialized.html", "_utils/opt/constraints/AreaGeometryConstraint.n_components.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_float.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_int.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_float.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_int.html", "_utils/opt/constraints/FarmBoundaryConstraint.html", "_utils/opt/constraints/FarmBoundaryConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.html", "_utils/opt/constraints/MinDistConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.calc_individual.html", "_utils/opt/constraints/MinDistConstraint.calc_population.html", "_utils/opt/constraints/MinDistConstraint.initialize.html", "_utils/opt/constraints/MinDistConstraint.n_components.html", "_utils/opt/constraints/MinDistConstraint.vardeps_float.html", "_utils/opt/core/FarmConstraint.html", "_utils/opt/core/FarmConstraint.__init__.html", "_utils/opt/core/FarmConstraint.add_to_layout_figure.html", "_utils/opt/core/FarmConstraint.calc_individual.html", "_utils/opt/core/FarmConstraint.calc_population.html", "_utils/opt/core/FarmConstraint.farm.html", "_utils/opt/core/FarmConstraint.n_components.html", "_utils/opt/core/FarmConstraint.n_sel_turbines.html", "_utils/opt/core/FarmConstraint.print_models.html", "_utils/opt/core/FarmConstraint.sel_turbines.html", "_utils/opt/core/FarmConstraint.vardeps_float.html", "_utils/opt/core/FarmObjective.html", "_utils/opt/core/FarmObjective.__init__.html", "_utils/opt/core/FarmObjective.add_to_layout_figure.html", "_utils/opt/core/FarmObjective.farm.html", "_utils/opt/core/FarmObjective.n_sel_turbines.html", "_utils/opt/core/FarmObjective.print_models.html", "_utils/opt/core/FarmObjective.sel_turbines.html", "_utils/opt/core/FarmOptProblem.html", "_utils/opt/core/FarmOptProblem.INT_INF.html", "_utils/opt/core/FarmOptProblem.__init__.html", "_utils/opt/core/FarmOptProblem.add_constraint.html", "_utils/opt/core/FarmOptProblem.add_objective.html", "_utils/opt/core/FarmOptProblem.add_to_layout_figure.html", "_utils/opt/core/FarmOptProblem.all_turbines.html", "_utils/opt/core/FarmOptProblem.apply_individual.html", "_utils/opt/core/FarmOptProblem.apply_population.html", "_utils/opt/core/FarmOptProblem.calc_gradients.html", "_utils/opt/core/FarmOptProblem.check_constraints_individual.html", "_utils/opt/core/FarmOptProblem.check_constraints_population.html", "_utils/opt/core/FarmOptProblem.constraints_tol.html", "_utils/opt/core/FarmOptProblem.counter.html", "_utils/opt/core/FarmOptProblem.evaluate_individual.html", "_utils/opt/core/FarmOptProblem.evaluate_population.html", "_utils/opt/core/FarmOptProblem.farm.html", "_utils/opt/core/FarmOptProblem.finalize_individual.html", "_utils/opt/core/FarmOptProblem.finalize_population.html", "_utils/opt/core/FarmOptProblem.get_gradients.html", "_utils/opt/core/FarmOptProblem.initial_values_float.html", "_utils/opt/core/FarmOptProblem.initial_values_int.html", "_utils/opt/core/FarmOptProblem.initialize.html", "_utils/opt/core/FarmOptProblem.max_values_constraints.html", "_utils/opt/core/FarmOptProblem.max_values_float.html", "_utils/opt/core/FarmOptProblem.max_values_int.html", "_utils/opt/core/FarmOptProblem.maximize_objs.html", "_utils/opt/core/FarmOptProblem.min_values_constraints.html", "_utils/opt/core/FarmOptProblem.min_values_float.html", "_utils/opt/core/FarmOptProblem.min_values_int.html", "_utils/opt/core/FarmOptProblem.n_constraints.html", "_utils/opt/core/FarmOptProblem.n_objectives.html", "_utils/opt/core/FarmOptProblem.n_sel_turbines.html", "_utils/opt/core/FarmOptProblem.n_vars_float.html", "_utils/opt/core/FarmOptProblem.n_vars_int.html", "_utils/opt/core/FarmOptProblem.parse_tvar.html", "_utils/opt/core/FarmOptProblem.sel_turbines.html", "_utils/opt/core/FarmOptProblem.tvar.html", "_utils/opt/core/FarmOptProblem.update_problem_individual.html", "_utils/opt/core/FarmOptProblem.update_problem_population.html", "_utils/opt/core/FarmOptProblem.var_names_float.html", "_utils/opt/core/FarmOptProblem.var_names_int.html", "_utils/opt/core/FarmVarsProblem.html", "_utils/opt/core/FarmVarsProblem.initialize.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_individual.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_population.html", "_utils/opt/core/FarmVarsProblem.update_problem_individual.html", "_utils/opt/core/FarmVarsProblem.update_problem_population.html", "_utils/opt/core/PopStates.html", "_utils/opt/core/PopStates.__init__.html", "_utils/opt/core/PopStates.calculate.html", "_utils/opt/core/PopStates.initialize.html", "_utils/opt/core/PopStates.output_point_vars.html", "_utils/opt/core/PopStates.size.html", "_utils/opt/core/PopStates.weights.html", "_utils/opt/objectives/FarmVarObjective.html", "_utils/opt/objectives/FarmVarObjective.__init__.html", "_utils/opt/objectives/FarmVarObjective.calc_individual.html", "_utils/opt/objectives/FarmVarObjective.calc_population.html", "_utils/opt/objectives/FarmVarObjective.finalize_individual.html", "_utils/opt/objectives/FarmVarObjective.initialize.html", "_utils/opt/objectives/FarmVarObjective.maximize.html", "_utils/opt/objectives/FarmVarObjective.n_components.html", "_utils/opt/objectives/FarmVarObjective.vardeps_float.html", "_utils/opt/objectives/MaxFarmPower.html", "_utils/opt/objectives/MaxFarmPower.__init__.html", "_utils/opt/objectives/MaxNTurbines.html", "_utils/opt/objectives/MaxNTurbines.__init__.html", "_utils/opt/objectives/MaxNTurbines.calc_individual.html", "_utils/opt/objectives/MaxNTurbines.calc_population.html", "_utils/opt/objectives/MaxNTurbines.maximize.html", "_utils/opt/objectives/MaxNTurbines.n_components.html", "_utils/opt/objectives/MinimalMaxTI.html", "_utils/opt/objectives/MinimalMaxTI.__init__.html", "_utils/opt/problems/OptFarmVars.html", "_utils/opt/problems/OptFarmVars.__init__.html", "_utils/opt/problems/OptFarmVars.add_var.html", "_utils/opt/problems/OptFarmVars.initial_values_float.html", "_utils/opt/problems/OptFarmVars.initial_values_int.html", "_utils/opt/problems/OptFarmVars.initialize.html", "_utils/opt/problems/OptFarmVars.max_values_float.html", "_utils/opt/problems/OptFarmVars.max_values_int.html", "_utils/opt/problems/OptFarmVars.min_values_float.html", "_utils/opt/problems/OptFarmVars.min_values_int.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_individual.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_population.html", "_utils/opt/problems/OptFarmVars.var_names_float.html", "_utils/opt/problems/OptFarmVars.var_names_int.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.get_bounds.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintscdist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivescdist.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.var_names_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_int.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_int.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.ANGLE.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.var_names_float.html", "_utils/read_shp.html", "_utils/read_shp_polygons.html", "_utils/runners/DaskRunner.html", "_utils/runners/DaskRunner.__init__.html", "_utils/runners/DaskRunner.finalize.html", "_utils/runners/DaskRunner.initialize.html", "_utils/runners/DaskRunner.is_distributed.html", "_utils/runners/DaskRunner.print.html", "_utils/runners/DaskRunner.run.html", "_utils/runners/DefaultRunner.html", "_utils/runners/DefaultRunner.run.html", "_utils/runners/Runner.html", "_utils/runners/Runner.__init__.html", "_utils/runners/Runner.finalize.html", "_utils/runners/Runner.initialize.html", "_utils/runners/Runner.initialized.html", "_utils/runners/Runner.run.html", "_utils/show_plotly_fig.html", "_utils/shp2csv.html", "_utils/shp2geom2d.html", "_utils/two_circles/area.html", "_utils/two_circles/calc_area.html", "_utils/uv2wd.html", "_utils/wd2uv.html", "_utils/wd2wdvec.html", "_utils/wdvec2wd.html", "api.html", "api_constants.html", "api_core.html", "api_foxes.html", "api_input.html", "api_models.html", "api_opt.html", "api_opt_problems.html", "api_opt_problems_geom.html", "api_output.html", "api_utils.html", "api_utils_abl.html", "api_variables.html", "api_wake_models.html", "citation.html", "examples.html", "history.html", "index.html", "installation.html", "notebooks/data.html", "notebooks/heterogeneous.html", "notebooks/layout_opt.html", "notebooks/model_book.html", "notebooks/multi_height.html", "notebooks/overview.html", "notebooks/power_mask.html", "notebooks/sector_man.html", "notebooks/single_row.html", "notebooks/timelines.html", "notebooks/timeseries.html", "notebooks/wind_rose.html", "notebooks/yawed_wake.html"]})