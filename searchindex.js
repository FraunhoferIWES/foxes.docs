Search.setIndex({"alltitles": {"API": [[1317, null]], "Acknowledgements": [[1337, "acknowledgements"]], "Ambient inflow states": [[1338, "ambient-inflow-states"]], "Ambient states data": [[1343, "Ambient-states-data"]], "Attributes": [[1, null], [18, null], [28, null], [54, null], [60, null], [64, null], [68, null], [73, null], [77, null], [82, null], [88, null], [93, null], [103, null], [163, null], [195, null], [206, null], [222, null], [234, null], [248, null], [255, null], [274, null], [288, null], [301, null], [309, null], [336, null], [346, null], [357, null], [365, null], [382, null], [409, null], [440, null], [451, null], [456, null], [477, null], [501, null], [509, null], [549, null], [556, null], [559, "attributes"], [563, null], [572, null], [576, null], [585, null], [591, null], [600, null], [608, null], [612, null], [622, null], [629, null], [636, null], [641, null], [646, null], [653, null], [659, null], [664, null], [674, null], [679, null], [690, null], [699, null], [715, null], [725, null], [737, null], [745, null], [754, null], [758, null], [762, null], [766, null], [770, null], [777, null], [781, null], [787, null], [794, null], [799, null], [807, null], [814, null], [824, "attributes"], [835, null], [852, "attributes"], [860, "attributes"], [868, "attributes"], [877, "attributes"], [885, "attributes"], [892, "attributes"], [899, "attributes"], [905, "attributes"], [911, "attributes"], [934, null], [939, "attributes"], [945, null], [953, null], [958, null], [963, null], [968, null], [973, null], [979, null], [985, null], [991, null], [997, null], [1003, null], [1009, null], [1015, null], [1021, null], [1027, null], [1032, null], [1041, null], [1068, null], [1074, null], [1077, null], [1087, null], [1090, null], [1095, null], [1100, null], [1116, null], [1119, null], [1124, null], [1127, null], [1135, "attributes"], [1143, null], [1149, null], [1156, null], [1165, null], [1172, null], [1181, null], [1208, null], [1216, null], [1223, null], [1230, null]], "Available engines": [[1348, "Available-engines"]], "Blockage modelling 1": [[1342, null]], "Blockage modelling 2": [[1341, null]], "CentreRotor": [[1351, "CentreRotor"]], "Changelog": [[0, null]], "Citation": [[1335, null]], "Command and options": [[1361, "command-and-options"]], "Contents": [[1337, "contents"]], "Contributing": [[1337, "contributing"]], "DTU-10MW-D178d3-H119.csv": [[1343, "DTU-10MW-D178d3-H119.csv"]], "Default engine": [[1348, "Default-engine"]], "Developers": [[1339, "developers"], [1339, "id6"]], "Downwind algorithm": [[1319, null]], "Downwind algorithm models": [[1319, "downwind-algorithm-models"]], "Dynamic Wakes 1": [[1344, null]], "Dynamic Wakes 2": [[1355, null]], "Dynamic Wakes 3": [[1353, null]], "Engine selection through a with-block": [[1348, "Engine-selection-through-a-with-block"]], "Engine selection through the algorithm": [[1348, "Engine-selection-through-the-algorithm"]], "Examples": [[412, null], [535, null], [536, null], [735, null], [1336, null]], "File paths": [[1343, "File-paths"]], "GridRotor": [[1351, "GridRotor"]], "Ground models": [[1340, "ground-models"]], "Heterogeneous flow": [[1345, null]], "Horizontally homogeneous wake propagation": [[1355, "Horizontally-homogeneous-wake-propagation"]], "IEA-15MW-D240-H150.csv": [[1343, "IEA-15MW-D240-H150.csv"]], "IWT-7d5MW-D164-H100.csv": [[1343, "IWT-7d5MW-D164-H100.csv"]], "Induction model comparison": [[1341, "Induction-model-comparison"]], "Input file structure": [[1361, "input-file-structure"]], "Input parameter files": [[1361, null]], "Inputs": [[1338, null]], "Installation": [[1339, null]], "Installation via conda": [[1339, "installation-via-conda"]], "Installation via pip": [[1339, "installation-via-pip"]], "Iterative algorithm": [[1320, null]], "Iterative algorithm models": [[1320, "iterative-algorithm-models"]], "Journal paper": [[1335, "journal-paper"]], "LevelRotor": [[1351, "LevelRotor"]], "License": [[1337, "license"]], "Manual engine selection": [[1348, "Manual-engine-selection"]], "Model types": [[1340, "model-types"]], "Models": [[1340, null]], "Multi-height wind data": [[1347, null]], "NREL-5MW-D126-H90.csv": [[1343, "NREL-5MW-D126-H90.csv"]], "Notes": [[559, null], [824, null], [852, null], [860, null], [868, null], [876, null], [877, null], [885, null], [892, null], [899, null], [905, null], [911, null], [939, null]], "Optimization": [[1359, null]], "Optional dependencies": [[1339, "optional-dependencies"]], "Overview - how to setup foxes": [[1360, null]], "Parallelization": [[1348, null]], "Parameters": [[3, null], [4, null], [5, null], [7, null], [12, null], [19, null], [20, null], [23, null], [26, null], [29, null], [33, null], [39, null], [40, null], [45, null], [48, null], [49, null], [52, null], [53, null], [55, null], [56, null], [57, null], [58, null], [61, null], [62, null], [63, null], [66, null], [67, null], [70, null], [71, null], [72, null], [74, null], [75, null], [78, null], [79, null], [80, null], [83, null], [84, null], [89, null], [90, null], [91, null], [94, null], [95, null], [96, null], [97, null], [99, null], [100, null], [101, null], [102, null], [104, null], [107, null], [108, null], [111, null], [120, null], [121, null], [122, null], [164, null], [165, null], [166, null], [167, null], [168, null], [171, null], [174, null], [175, null], [176, null], [177, null], [178, null], [183, null], [184, null], [185, null], [186, null], [187, null], [188, null], [189, null], [190, null], [193, null], [194, null], [196, null], [197, null], [198, null], [199, null], [202, null], [204, null], [207, null], [209, null], [210, null], [212, null], [213, null], [217, null], [218, null], [220, null], [221, null], [223, null], [224, null], [225, null], [227, null], [230, null], [232, null], [233, null], [235, null], [236, null], [237, null], [238, null], [239, null], [240, null], [241, null], [244, null], [245, null], [246, null], [249, null], [250, null], [251, null], [253, null], [254, null], [256, null], [258, null], [259, null], [260, null], [261, null], [265, null], [266, null], [267, null], [268, null], [269, null], [270, null], [271, null], [273, null], [277, null], [278, null], [279, null], [281, null], [284, null], [286, null], [287, null], [289, null], [290, null], [291, null], [292, null], [293, null], [294, null], [296, null], [297, null], [300, null], [302, null], [304, null], [305, null], [306, null], [307, null], [310, null], [311, null], [313, null], [314, null], [316, null], [317, null], [321, null], [322, null], [323, null], [324, null], [326, null], [328, null], [329, null], [330, null], [331, null], [335, null], [337, null], [338, null], [339, null], [342, null], [344, null], [345, null], [347, null], [349, null], [352, null], [354, null], [356, null], [358, null], [359, null], [360, null], [361, null], [362, null], [363, null], [364, null], [366, null], [367, null], [374, null], [375, null], [376, null], [377, null], [379, null], [380, null], [381, null], [383, null], [384, null], [385, null], [386, null], [387, null], [391, null], [395, null], [396, null], [397, null], [398, null], [399, null], [400, null], [401, null], [403, null], [405, null], [407, null], [408, null], [410, null], [411, null], [415, null], [416, null], [418, null], [419, null], [423, null], [425, null], [426, null], [430, null], [431, null], [432, null], [433, null], [434, null], [435, null], [436, null], [437, null], [438, null], [439, null], [441, null], [442, null], [445, null], [446, null], [447, null], [449, null], [450, null], [452, null], [453, null], [455, null], [458, null], [460, null], [462, null], [464, null], [465, null], [466, null], [467, null], [469, null], [470, null], [474, null], [476, null], [478, null], [481, null], [483, null], [484, null], [485, null], [488, null], [489, null], [491, null], [492, null], [493, null], [494, null], [495, null], [496, null], [497, null], [499, null], [500, null], [502, null], [503, null], [504, null], [505, null], [508, null], [511, null], [512, null], [514, null], [516, null], [517, null], [518, null], [519, null], [520, null], [523, null], [524, null], [526, null], [527, null], [528, null], [529, null], [532, null], [533, null], [534, null], [537, null], [538, null], [539, null], [540, null], [541, null], [542, null], [543, null], [544, null], [545, null], [546, null], [547, null], [548, null], [551, null], [552, null], [553, null], [554, null], [555, null], [557, null], [558, null], [560, null], [561, null], [564, null], [566, null], [567, null], [573, null], [574, null], [575, null], [577, null], [579, null], [580, null], [582, null], [584, null], [586, null], [588, null], [589, null], [592, null], [593, null], [594, null], [595, null], [598, null], [599, null], [601, null], [602, null], [603, null], [604, null], [606, null], [607, null], [609, null], [610, null], [611, null], [613, null], [614, null], [615, null], [618, null], [619, null], [623, null], [626, null], [630, null], [633, null], [637, null], [639, null], [640, null], [642, null], [643, null], [644, null], [645, null], [647, null], [649, null], [650, null], [651, null], [654, null], [655, null], [656, null], [657, null], [660, null], [661, null], [662, null], [663, null], [665, null], [666, null], [667, null], [668, null], [669, null], [670, null], [672, null], [673, null], [675, null], [676, null], [677, null], [678, null], [680, null], [682, null], [683, null], [685, null], [686, null], [688, null], [689, null], [691, null], [693, null], [694, null], [696, null], [698, null], [700, null], [702, null], [703, null], [704, null], [707, null], [710, null], [711, null], [714, null], [716, null], [718, null], [719, null], [720, null], [721, null], [724, null], [726, null], [728, null], [729, null], [730, null], [731, null], [734, null], [736, null], [738, null], [739, null], [740, null], [741, null], [744, null], [746, null], [748, null], [749, null], [750, null], [753, null], [755, null], [756, null], [759, null], [760, null], [763, null], [764, null], [767, null], [768, null], [771, null], [772, null], [775, null], [778, null], [779, null], [782, null], [784, null], [785, null], [786, null], [788, null], [789, null], [790, null], [791, null], [792, null], [795, null], [796, null], [797, null], [798, null], [800, null], [802, null], [803, null], [804, null], [805, null], [806, null], [808, null], [810, null], [811, null], [812, null], [813, null], [815, null], [817, null], [818, null], [819, null], [820, null], [821, null], [822, null], [823, null], [825, null], [827, null], [828, null], [829, null], [830, null], [833, null], [834, null], [836, null], [837, null], [838, null], [839, null], [840, null], [843, null], [844, null], [845, null], [846, null], [847, null], [848, null], [849, null], [850, null], [853, null], [855, null], [856, null], [857, null], [858, null], [861, null], [863, null], [864, null], [865, null], [866, null], [869, null], [871, null], [872, null], [873, null], [874, null], [878, null], [880, null], [881, null], [882, null], [883, null], [886, null], [888, null], [889, null], [890, null], [893, null], [895, null], [896, null], [897, null], [900, null], [902, null], [903, null], [906, null], [908, null], [909, null], [926, null], [927, null], [929, null], [930, null], [931, null], [935, null], [937, null], [938, null], [940, null], [942, null], [943, null], [946, null], [948, null], [949, null], [950, null], [951, null], [954, null], [956, null], [957, null], [959, null], [961, null], [962, null], [964, null], [966, null], [967, null], [969, null], [971, null], [972, null], [974, null], [976, null], [977, null], [978, null], [980, null], [982, null], [983, null], [984, null], [986, null], [988, null], [989, null], [990, null], [992, null], [994, null], [995, null], [996, null], [998, null], [1000, null], [1001, null], [1002, null], [1004, null], [1006, null], [1007, null], [1008, null], [1010, null], [1012, null], [1013, null], [1014, null], [1016, null], [1018, null], [1019, null], [1020, null], [1022, null], [1024, null], [1025, null], [1026, null], [1028, null], [1029, null], [1030, null], [1033, null], [1034, null], [1037, null], [1038, null], [1039, null], [1040, null], [1042, null], [1043, null], [1044, null], [1046, null], [1047, null], [1048, null], [1049, null], [1050, null], [1052, null], [1053, null], [1054, null], [1055, null], [1056, null], [1057, null], [1058, null], [1059, null], [1060, null], [1062, null], [1063, null], [1064, null], [1065, null], [1066, null], [1067, null], [1069, null], [1070, null], [1071, null], [1073, null], [1075, null], [1076, null], [1078, null], [1079, null], [1080, null], [1082, null], [1083, null], [1084, null], [1085, null], [1086, null], [1088, null], [1089, null], [1090, "parameters"], [1091, null], [1092, null], [1093, null], [1094, null], [1095, "parameters"], [1096, null], [1097, null], [1098, null], [1099, null], [1101, null], [1102, null], [1103, null], [1104, null], [1105, null], [1106, null], [1107, null], [1109, null], [1110, null], [1111, null], [1112, null], [1113, null], [1114, null], [1115, null], [1117, null], [1118, null], [1120, null], [1121, null], [1123, null], [1125, null], [1126, null], [1128, null], [1129, null], [1130, null], [1131, null], [1132, null], [1135, null], [1136, null], [1137, null], [1138, null], [1139, null], [1140, null], [1141, null], [1142, null], [1145, null], [1146, null], [1147, null], [1148, null], [1152, null], [1153, null], [1154, null], [1155, null], [1157, null], [1159, null], [1160, null], [1161, null], [1170, null], [1171, null], [1173, null], [1182, null], [1184, null], [1185, null], [1186, null], [1187, null], [1188, null], [1189, null], [1190, null], [1191, null], [1192, null], [1193, null], [1194, null], [1195, null], [1196, null], [1197, null], [1198, null], [1200, null], [1204, null], [1205, null], [1207, null], [1209, null], [1210, null], [1214, null], [1215, null], [1217, null], [1218, null], [1221, null], [1222, null], [1224, null], [1225, null], [1228, null], [1229, null], [1231, null], [1232, null], [1236, null], [1237, null], [1239, null], [1240, null], [1244, null], [1245, null], [1246, null], [1247, null], [1248, null], [1249, null], [1251, null], [1252, null], [1253, null], [1254, null], [1255, null], [1256, null], [1257, null], [1258, null], [1259, null], [1260, null], [1261, null], [1262, null], [1263, null], [1264, null], [1315, null]], "Parmeters": [[1250, null]], "Partial wakes": [[1340, "partial-wakes"]], "Partial wakes verification": [[1349, null]], "Plot creation and variables": [[1361, "plot-creation-and-variables"]], "Point models": [[1340, "point-models"]], "Power and thrust curves": [[1343, "Power-and-thrust-curves"]], "Power mask": [[1350, null]], "Preparation (optional)": [[1339, "preparation-optional"]], "Public members": [[1, "public-members"], [18, "public-members"], [28, "public-members"], [47, null], [50, null], [54, "public-members"], [60, "public-members"], [64, "public-members"], [68, "public-members"], [73, "public-members"], [77, "public-members"], [82, "public-members"], [86, null], [88, "public-members"], [93, "public-members"], [97, "public-members"], [102, "public-members"], [112, null], [163, "public-members"], [192, null], [195, "public-members"], [203, null], [206, "public-members"], [222, "public-members"], [231, null], [234, "public-members"], [248, "public-members"], [255, "public-members"], [263, null], [264, null], [272, null], [274, "public-members"], [288, "public-members"], [295, null], [301, "public-members"], [309, "public-members"], [319, null], [327, null], [336, "public-members"], [340, null], [343, null], [346, "public-members"], [353, null], [357, "public-members"], [365, "public-members"], [372, null], [378, null], [382, "public-members"], [394, null], [398, "public-members"], [404, null], [406, null], [409, "public-members"], [412, "public-members"], [413, null], [414, null], [417, null], [420, null], [421, null], [422, null], [427, null], [428, null], [429, null], [440, "public-members"], [451, "public-members"], [454, null], [456, "public-members"], [471, null], [473, null], [475, null], [477, "public-members"], [490, null], [492, "public-members"], [501, "public-members"], [509, "public-members"], [525, null], [530, null], [549, "public-members"], [556, "public-members"], [559, "public-members"], [562, null], [563, "public-members"], [569, null], [571, null], [572, "public-members"], [576, "public-members"], [581, null], [583, null], [585, "public-members"], [591, "public-members"], [597, null], [600, "public-members"], [605, null], [608, "public-members"], [612, "public-members"], [616, null], [622, "public-members"], [629, "public-members"], [636, "public-members"], [641, "public-members"], [646, "public-members"], [653, "public-members"], [659, "public-members"], [664, "public-members"], [674, "public-members"], [679, "public-members"], [684, null], [687, null], [690, "public-members"], [695, null], [697, null], [699, "public-members"], [709, null], [715, "public-members"], [725, "public-members"], [735, "public-members"], [737, "public-members"], [745, "public-members"], [754, "public-members"], [758, "public-members"], [762, "public-members"], [766, "public-members"], [770, "public-members"], [774, null], [777, "public-members"], [781, "public-members"], [787, "public-members"], [794, "public-members"], [799, "public-members"], [807, "public-members"], [814, "public-members"], [824, "public-members"], [832, null], [835, "public-members"], [842, null], [845, "public-members"], [852, "public-members"], [860, "public-members"], [868, "public-members"], [876, "public-members"], [877, "public-members"], [885, "public-members"], [892, "public-members"], [899, "public-members"], [905, "public-members"], [911, "public-members"], [934, "public-members"], [939, "public-members"], [945, "public-members"], [953, "public-members"], [958, "public-members"], [963, "public-members"], [968, "public-members"], [973, "public-members"], [979, "public-members"], [985, "public-members"], [991, "public-members"], [997, "public-members"], [1003, "public-members"], [1009, "public-members"], [1015, "public-members"], [1021, "public-members"], [1027, "public-members"], [1032, "public-members"], [1041, "public-members"], [1061, null], [1068, "public-members"], [1074, "public-members"], [1077, "public-members"], [1081, null], [1087, "public-members"], [1090, "public-members"], [1095, "public-members"], [1100, "public-members"], [1108, null], [1116, "public-members"], [1119, "public-members"], [1122, null], [1124, "public-members"], [1127, "public-members"], [1133, null], [1135, "public-members"], [1143, "public-members"], [1149, "public-members"], [1156, "public-members"], [1165, "public-members"], [1172, "public-members"], [1181, "public-members"], [1199, null], [1206, null], [1208, "public-members"], [1216, "public-members"], [1223, "public-members"], [1230, "public-members"], [1238, null]], "Remarks & recommendations": [[1348, "Remarks-&-recommendations"]], "Requirements": [[1339, "requirements"]], "Returns": [[4, "returns"], [5, "returns"], [6, null], [7, "returns"], [8, null], [11, null], [13, null], [14, null], [15, null], [16, null], [17, null], [20, "returns"], [21, null], [22, null], [23, "returns"], [25, null], [27, null], [32, null], [33, "returns"], [34, null], [35, null], [36, null], [37, null], [38, null], [39, "returns"], [40, "returns"], [41, null], [42, null], [43, null], [44, null], [45, "returns"], [46, null], [48, "returns"], [49, "returns"], [52, "returns"], [53, "returns"], [58, "returns"], [59, null], [62, "returns"], [63, "returns"], [66, "returns"], [67, "returns"], [70, "returns"], [72, "returns"], [75, "returns"], [76, null], [80, "returns"], [81, null], [84, "returns"], [85, null], [90, "returns"], [91, "returns"], [92, null], [95, "returns"], [96, "returns"], [104, "returns"], [105, null], [106, null], [108, "returns"], [109, null], [110, null], [111, "returns"], [114, null], [115, null], [116, null], [117, null], [118, null], [119, null], [120, "returns"], [121, "returns"], [122, "returns"], [167, "returns"], [168, "returns"], [169, null], [170, null], [172, null], [173, null], [175, "returns"], [176, "returns"], [178, "returns"], [179, null], [180, null], [182, null], [184, "returns"], [187, "returns"], [193, "returns"], [198, "returns"], [199, "returns"], [200, null], [201, null], [202, "returns"], [204, "returns"], [205, null], [209, "returns"], [210, "returns"], [211, null], [213, "returns"], [215, null], [216, null], [217, "returns"], [220, "returns"], [221, "returns"], [225, "returns"], [226, null], [227, "returns"], [228, null], [229, null], [230, "returns"], [233, "returns"], [236, "returns"], [241, "returns"], [242, null], [243, null], [245, "returns"], [247, null], [250, "returns"], [252, null], [253, "returns"], [254, "returns"], [259, "returns"], [261, "returns"], [262, null], [267, "returns"], [270, "returns"], [271, "returns"], [280, null], [281, "returns"], [282, null], [283, null], [285, null], [287, "returns"], [289, "returns"], [291, "returns"], [292, "returns"], [294, "returns"], [296, "returns"], [298, null], [299, null], [300, "returns"], [305, "returns"], [307, "returns"], [308, null], [311, "returns"], [312, null], [314, "returns"], [315, null], [317, "returns"], [318, null], [320, null], [321, "returns"], [323, "returns"], [325, null], [326, "returns"], [329, "returns"], [330, "returns"], [331, "returns"], [332, null], [333, null], [334, null], [335, "returns"], [341, null], [344, "returns"], [350, null], [351, null], [354, "returns"], [355, null], [359, "returns"], [360, "returns"], [361, "returns"], [362, "returns"], [363, "returns"], [366, "returns"], [370, null], [373, null], [377, "returns"], [379, "returns"], [380, "returns"], [385, "returns"], [386, "returns"], [387, "returns"], [388, null], [389, null], [390, null], [391, "returns"], [392, null], [396, "returns"], [397, "returns"], [400, "returns"], [403, "returns"], [405, "returns"], [407, "returns"], [408, "returns"], [411, "returns"], [415, "returns"], [416, "returns"], [418, "returns"], [419, "returns"], [425, "returns"], [426, "returns"], [430, "returns"], [431, "returns"], [442, "returns"], [443, null], [444, null], [445, "returns"], [446, "returns"], [448, null], [450, "returns"], [453, "returns"], [460, "returns"], [461, null], [463, null], [464, "returns"], [465, "returns"], [468, null], [470, "returns"], [481, "returns"], [482, null], [484, "returns"], [486, null], [487, null], [489, "returns"], [494, "returns"], [495, "returns"], [496, "returns"], [498, null], [500, "returns"], [503, "returns"], [505, "returns"], [506, null], [507, null], [508, "returns"], [512, "returns"], [513, null], [515, null], [517, "returns"], [518, "returns"], [521, null], [522, null], [524, "returns"], [527, "returns"], [532, "returns"], [533, "returns"], [537, "returns"], [538, "returns"], [539, "returns"], [540, "returns"], [541, "returns"], [542, "returns"], [544, "returns"], [546, "returns"], [547, "returns"], [548, "returns"], [552, "returns"], [554, "returns"], [558, "returns"], [561, "returns"], [566, "returns"], [567, "returns"], [568, null], [579, "returns"], [582, "returns"], [588, "returns"], [589, "returns"], [590, null], [593, "returns"], [596, null], [598, "returns"], [599, "returns"], [602, "returns"], [603, "returns"], [604, "returns"], [606, "returns"], [607, "returns"], [610, "returns"], [611, "returns"], [614, "returns"], [615, "returns"], [617, null], [619, "returns"], [620, null], [621, null], [625, null], [627, null], [628, null], [632, null], [634, null], [635, null], [639, "returns"], [640, "returns"], [643, "returns"], [644, "returns"], [645, "returns"], [649, "returns"], [651, "returns"], [652, null], [655, "returns"], [657, "returns"], [658, null], [661, "returns"], [663, "returns"], [667, "returns"], [669, "returns"], [670, "returns"], [676, "returns"], [678, "returns"], [682, "returns"], [683, "returns"], [685, "returns"], [686, "returns"], [688, "returns"], [689, "returns"], [693, "returns"], [694, "returns"], [702, "returns"], [705, null], [706, null], [707, "returns"], [708, null], [711, "returns"], [712, null], [713, null], [714, "returns"], [718, "returns"], [720, "returns"], [722, null], [723, null], [724, "returns"], [728, "returns"], [730, "returns"], [732, null], [733, null], [734, "returns"], [739, "returns"], [741, "returns"], [742, null], [743, null], [744, "returns"], [748, "returns"], [750, "returns"], [751, null], [752, null], [753, "returns"], [756, "returns"], [757, null], [760, "returns"], [761, null], [764, "returns"], [765, null], [768, "returns"], [769, null], [772, "returns"], [773, null], [775, "returns"], [776, null], [779, "returns"], [780, null], [784, "returns"], [785, "returns"], [789, "returns"], [790, "returns"], [791, "returns"], [793, null], [796, "returns"], [797, "returns"], [798, "returns"], [802, "returns"], [803, "returns"], [804, "returns"], [805, "returns"], [810, "returns"], [811, "returns"], [812, "returns"], [813, "returns"], [817, "returns"], [819, "returns"], [820, "returns"], [827, "returns"], [828, "returns"], [829, "returns"], [831, null], [833, "returns"], [834, "returns"], [837, "returns"], [841, null], [843, "returns"], [844, "returns"], [847, "returns"], [848, "returns"], [849, "returns"], [851, null], [858, "returns"], [859, null], [866, "returns"], [867, null], [874, "returns"], [875, null], [884, null], [888, "returns"], [889, "returns"], [890, "returns"], [891, null], [895, "returns"], [896, "returns"], [897, "returns"], [898, null], [902, "returns"], [904, null], [908, "returns"], [910, null], [929, "returns"], [930, "returns"], [932, null], [933, null], [937, "returns"], [938, "returns"], [942, "returns"], [944, null], [948, "returns"], [951, "returns"], [952, null], [956, "returns"], [957, "returns"], [961, "returns"], [962, "returns"], [966, "returns"], [967, "returns"], [971, "returns"], [972, "returns"], [976, "returns"], [977, "returns"], [978, "returns"], [982, "returns"], [983, "returns"], [984, "returns"], [988, "returns"], [989, "returns"], [990, "returns"], [994, "returns"], [995, "returns"], [996, "returns"], [1000, "returns"], [1001, "returns"], [1002, "returns"], [1006, "returns"], [1007, "returns"], [1008, "returns"], [1012, "returns"], [1013, "returns"], [1014, "returns"], [1018, "returns"], [1019, "returns"], [1020, "returns"], [1024, "returns"], [1025, "returns"], [1026, "returns"], [1030, "returns"], [1031, null], [1034, "returns"], [1035, null], [1036, null], [1045, null], [1046, "returns"], [1047, "returns"], [1048, "returns"], [1049, "returns"], [1050, "returns"], [1052, "returns"], [1053, "returns"], [1054, "returns"], [1055, "returns"], [1057, "returns"], [1058, "returns"], [1059, "returns"], [1060, "returns"], [1065, "returns"], [1066, "returns"], [1067, "returns"], [1070, "returns"], [1076, "returns"], [1083, "returns"], [1084, "returns"], [1085, "returns"], [1086, "returns"], [1089, "returns"], [1102, "returns"], [1103, "returns"], [1104, "returns"], [1105, "returns"], [1106, "returns"], [1107, "returns"], [1110, "returns"], [1111, "returns"], [1112, "returns"], [1113, "returns"], [1114, "returns"], [1115, "returns"], [1118, "returns"], [1121, "returns"], [1126, "returns"], [1129, "returns"], [1130, "returns"], [1131, "returns"], [1141, "returns"], [1142, "returns"], [1146, "returns"], [1147, "returns"], [1148, "returns"], [1159, "returns"], [1160, "returns"], [1161, "returns"], [1162, null], [1163, null], [1164, null], [1170, "returns"], [1174, null], [1175, null], [1176, null], [1177, null], [1178, null], [1179, null], [1180, null], [1184, "returns"], [1185, "returns"], [1186, "returns"], [1187, "returns"], [1188, "returns"], [1189, "returns"], [1190, "returns"], [1191, "returns"], [1192, "returns"], [1193, "returns"], [1194, "returns"], [1195, "returns"], [1196, "returns"], [1197, "returns"], [1198, "returns"], [1201, null], [1202, null], [1203, null], [1204, "returns"], [1205, "returns"], [1211, null], [1212, null], [1213, null], [1214, "returns"], [1215, "returns"], [1219, null], [1220, null], [1221, "returns"], [1222, "returns"], [1226, null], [1227, null], [1228, "returns"], [1229, "returns"], [1233, null], [1234, null], [1235, null], [1236, "returns"], [1237, "returns"], [1241, null], [1242, null], [1243, null], [1244, "returns"], [1245, "returns"], [1246, "returns"], [1247, "returns"], [1248, "returns"], [1249, "returns"], [1251, "returns"], [1252, "returns"], [1253, "returns"], [1254, "returns"], [1256, "returns"], [1257, "returns"], [1258, "returns"], [1259, "returns"], [1260, "returns"], [1261, "returns"], [1262, "returns"], [1263, "returns"], [1315, "returns"]], "Rotor model visualizations": [[1351, null]], "Rotor models": [[1340, "rotor-models"]], "Sequential algorithm": [[1321, null]], "Sequential algorithm models": [[1321, "sequential-algorithm-models"]], "Sequential wake propagation": [[1353, "Sequential-wake-propagation"]], "Single row of turbines": [[1354, null]], "Standard users": [[1339, "standard-users"], [1339, "id4"]], "Static data": [[1343, null]], "TLDR; Quick installation guide": [[1339, "tldr-quick-installation-guide"]], "Testing": [[1362, null]], "The model book": [[1346, null]], "Timeseries data": [[1356, null]], "Turbine models": [[1340, "turbine-models"]], "Turbine types": [[1340, "turbine-types"]], "Version specific DOI": [[1335, "version-specific-doi"]], "Vertical profiles": [[1340, "vertical-profiles"]], "Virtual Python environment": [[1339, "virtual-python-environment"], [1339, "id3"]], "WRF-Timeseries-4464.csv.gz": [[1343, "WRF-Timeseries-4464.csv.gz"]], "Wake frames": [[1340, "wake-frames"]], "Wake models": [[1340, "wake-models"]], "Wake propagation in heterogeneous backgrounds": [[1344, "Wake-propagation-in-heterogeneous-backgrounds"]], "Welcome to FOXES": [[1337, null]], "Wind farm blockage": [[1342, "Wind-farm-blockage"]], "Wind farm layout data": [[1343, "Wind-farm-layout-data"]], "Wind farm layouts": [[1338, "wind-farm-layouts"]], "Wind rose data": [[1357, null]], "Wind sector management": [[1352, null]], "Yawed rotor wakes": [[1358, null]], "Yields": [[1056, "yields"], [1062, "yields"], [1063, "yields"], [1064, "yields"], [1092, "yields"], [1097, "yields"], [1132, "yields"]], "abl_states_6000.csv.gz": [[1343, "abl_states_6000.csv.gz"]], "foxes": [[1327, null]], "foxes.algorithms": [[1318, null]], "foxes.config": [[1322, null]], "foxes.constants": [[1323, null]], "foxes.core": [[1324, null]], "foxes.data": [[1325, null]], "foxes.engines": [[1326, null]], "foxes.input": [[1328, null]], "foxes.input.farm_layout": [[1328, "foxes-input-farm-layout"]], "foxes.input.states": [[1328, "foxes-input-states"]], "foxes.input.states.create": [[1328, "foxes-input-states-create"]], "foxes.input.yaml": [[1328, "foxes-input-yaml"]], "foxes.input.yaml.windio": [[1328, "foxes-input-yaml-windio"]], "foxes.models": [[1329, null]], "foxes.models.axial_induction": [[1329, "foxes-models-axial-induction"]], "foxes.models.farm_controllers": [[1329, "foxes-models-farm-controllers"]], "foxes.models.farm_models": [[1329, "foxes-models-farm-models"]], "foxes.models.ground_models": [[1329, "foxes-models-ground-models"]], "foxes.models.partial_wakes": [[1329, "foxes-models-partial-wakes"]], "foxes.models.point_models": [[1329, "foxes-models-point-models"]], "foxes.models.rotor_models": [[1329, "foxes-models-rotor-models"]], "foxes.models.turbine_models": [[1329, "foxes-models-turbine-models"]], "foxes.models.turbine_types": [[1329, "foxes-models-turbine-types"]], "foxes.models.vertical_profiles": [[1329, "foxes-models-vertical-profiles"]], "foxes.models.wake_frames": [[1329, "foxes-models-wake-frames"]], "foxes.models.wake_models": [[1329, "foxes-models-wake-models"], [1334, null]], "foxes.models.wake_models.induction": [[1334, "foxes-models-wake-models-induction"]], "foxes.models.wake_models.ti": [[1334, "foxes-models-wake-models-ti"]], "foxes.models.wake_models.wind": [[1334, "foxes-models-wake-models-wind"]], "foxes.models.wake_superpositions": [[1329, "foxes-models-wake-superpositions"]], "foxes.output": [[1330, null]], "foxes.output.flow_plots_2d": [[1330, "foxes-output-flow-plots-2d"]], "foxes.output.seq_plugins": [[1330, "foxes-output-seq-plugins"]], "foxes.utils": [[1331, null]], "foxes.utils.abl": [[1331, "foxes-utils-abl"]], "foxes.utils.abl.neutral": [[1332, null]], "foxes.utils.abl.sheared": [[1332, "foxes-utils-abl-sheared"]], "foxes.utils.abl.stable": [[1332, "foxes-utils-abl-stable"]], "foxes.utils.abl.unstable": [[1332, "foxes-utils-abl-unstable"]], "foxes.utils.geom2d": [[1331, "foxes-utils-geom2d"]], "foxes.utils.runners": [[1331, "foxes-utils-runners"]], "foxes.utils.two_circles": [[1331, "foxes-utils-two-circles"]], "foxes.variables": [[1333, null]], "foxes_windio": [[1361, "foxes-windio"]], "foxes_yaml": [[1361, "foxes-yaml"]], "grid100": [[1351, "grid100"]], "grid16": [[1351, "grid16"]], "grid25": [[1351, "grid25"]], "grid25_raw": [[1351, "grid25_raw"]], "grid36": [[1351, "grid36"]], "grid4": [[1351, "grid4"]], "grid400": [[1351, "grid400"]], "grid9": [[1351, "grid9"]], "level10": [[1351, "level10"]], "level2": [[1351, "level2"]], "level20": [[1351, "level20"]], "level3": [[1351, "level3"]], "level5": [[1351, "level5"]], "level5_raw": [[1351, "level5_raw"]], "test_farm_67.csv": [[1343, "test_farm_67.csv"]], "timeseries_100.csv.gz": [[1343, "timeseries_100.csv.gz"]], "timeseries_3000.csv.gz": [[1343, "timeseries_3000.csv.gz"]], "timeseries_8000.csv.gz": [[1343, "timeseries_8000.csv.gz"]], "v0.1.0-alpha": [[0, "v0-1-0-alpha"]], "v0.1.1-alpha": [[0, "v0-1-1-alpha"]], "v0.1.2-alpha": [[0, "v0-1-2-alpha"]], "v0.1.3-alpha": [[0, "v0-1-3-alpha"]], "v0.1.4-alpha": [[0, "v0-1-4-alpha"]], "v0.2.0-alpha": [[0, "v0-2-0-alpha"]], "v0.2.1-alpha": [[0, "v0-2-1-alpha"]], "v0.2.2-alpha": [[0, "v0-2-2-alpha"]], "v0.2.3-alpha": [[0, "v0-2-3-alpha"]], "v0.2.4-alpha": [[0, "v0-2-4-alpha"]], "v0.2.5-alpha": [[0, "v0-2-5-alpha"]], "v0.2.6-alpha": [[0, "v0-2-6-alpha"]], "v0.3.0-alpha": [[0, "v0-3-0-alpha"]], "v0.3.1-alpha": [[0, "v0-3-1-alpha"]], "v0.3.2-alpha": [[0, "v0-3-2-alpha"]], "v0.3.3-alpha": [[0, "v0-3-3-alpha"]], "v0.3.4-alpha": [[0, "v0-3-4-alpha"]], "v0.3.5-alpha": [[0, "v0-3-5-alpha"]], "v0.4.0": [[0, "v0-4-0"]], "v0.4.1": [[0, "v0-4-1"]], "v0.4.2": [[0, "v0-4-2"]], "v0.4.3": [[0, "v0-4-3"]], "v0.4.4": [[0, "v0-4-4"]], "v0.4.5": [[0, "v0-4-5"]], "v0.5": [[0, "v0-5"]], "v0.5.1": [[0, "v0-5-1"]], "v0.5.2": [[0, "v0-5-2"]], "v0.5.2.1": [[0, "v0-5-2-1"]], "v0.6": [[0, "v0-6"]], "v0.6.1": [[0, "v0-6-1"]], "v0.6.2": [[0, "v0-6-2"]], "v0.7": [[0, "v0-7"]], "v0.7.1": [[0, "v0-7-1"]], "v0.7.2": [[0, "v0-7-2"]], "v0.7.3": [[0, "v0-7-3"]], "v0.7.4": [[0, "v0-7-4"]], "v0.8": [[0, "v0-8"]], "v0.8.1": [[0, "v0-8-1"]], "v0.8.2": [[0, "v0-8-2"]], "v0.8.3": [[0, "v0-8-3"]], "v1.0": [[0, "v1-0"]], "v1.1": [[0, "v1-1"]], "v1.1.1": [[0, "v1-1-1"]], "v1.2": [[0, "v1-2"]], "v1.2.1": [[0, "v1-2-1"]], "v1.2.2": [[0, "v1-2-2"]], "v1.2.3": [[0, "v1-2-3"]], "v1.2.4": [[0, "v1-2-4"]], "v1.2.5": [[0, "v1-2-5"]], "wind_rose_bremen.csv": [[1343, "wind_rose_bremen.csv"]], "wind_rotation.nc": [[1343, "wind_rotation.nc"]]}, "docurls": ["CHANGELOG.html", "_foxes/algorithms/Downwind.html", "_foxes/algorithms/Downwind.DEFAULT_FARM_OUTPUTS.html", "_foxes/algorithms/Downwind.__init__.html", "_foxes/algorithms/Downwind.calc_farm.html", "_foxes/algorithms/Downwind.calc_points.html", "_foxes/algorithms/Downwind.farm_controller.html", "_foxes/algorithms/Downwind.get_model.html", "_foxes/algorithms/Downwind.ground_models.html", "_foxes/algorithms/Downwind.init_states.html", "_foxes/algorithms/Downwind.initialize.html", "_foxes/algorithms/Downwind.partial_wakes.html", "_foxes/algorithms/Downwind.print_deco.html", "_foxes/algorithms/Downwind.rotor_model.html", "_foxes/algorithms/Downwind.states.html", "_foxes/algorithms/Downwind.sub_models.html", "_foxes/algorithms/Downwind.wake_frame.html", "_foxes/algorithms/Downwind.wake_models.html", "_foxes/algorithms/Iterative.html", "_foxes/algorithms/Iterative.__init__.html", "_foxes/algorithms/Iterative.calc_farm.html", "_foxes/algorithms/Iterative.farm_results_downwind.html", "_foxes/algorithms/Iterative.final_iteration.html", "_foxes/algorithms/Iterative.get_model.html", "_foxes/algorithms/Iterative.initialize.html", "_foxes/algorithms/Iterative.iterations.html", "_foxes/algorithms/Iterative.set_urelax.html", "_foxes/algorithms/Iterative.urelax.html", "_foxes/algorithms/Sequential.html", "_foxes/algorithms/Sequential.__init__.html", "_foxes/algorithms/Sequential.__iter__.html", "_foxes/algorithms/Sequential.__next__.html", "_foxes/algorithms/Sequential.calc_farm.html", "_foxes/algorithms/Sequential.calc_points.html", "_foxes/algorithms/Sequential.counter.html", "_foxes/algorithms/Sequential.cur_farm_results.html", "_foxes/algorithms/Sequential.cur_point_results.html", "_foxes/algorithms/Sequential.farm_results.html", "_foxes/algorithms/Sequential.farm_results_downwind.html", "_foxes/algorithms/Sequential.get_model.html", "_foxes/algorithms/Sequential.get_models_data.html", "_foxes/algorithms/Sequential.index.html", "_foxes/algorithms/Sequential.iterating.html", "_foxes/algorithms/Sequential.point_results.html", "_foxes/algorithms/Sequential.size.html", "_foxes/algorithms/Sequential.states_i0.html", "_foxes/algorithms/Sequential.weight.html", "_foxes/algorithms/downwind/models/FarmWakesCalculation.html", "_foxes/algorithms/downwind/models/FarmWakesCalculation.calculate.html", "_foxes/algorithms/downwind/models/FarmWakesCalculation.output_farm_vars.html", "_foxes/algorithms/downwind/models/InitFarmData.html", "_foxes/algorithms/downwind/models/InitFarmData.__init__.html", "_foxes/algorithms/downwind/models/InitFarmData.calculate.html", "_foxes/algorithms/downwind/models/InitFarmData.output_farm_vars.html", "_foxes/algorithms/downwind/models/PointWakesCalculation.html", "_foxes/algorithms/downwind/models/PointWakesCalculation.__init__.html", "_foxes/algorithms/downwind/models/PointWakesCalculation.calculate.html", "_foxes/algorithms/downwind/models/PointWakesCalculation.initialize.html", "_foxes/algorithms/downwind/models/PointWakesCalculation.output_point_vars.html", "_foxes/algorithms/downwind/models/PointWakesCalculation.sub_models.html", "_foxes/algorithms/downwind/models/ReorderFarmOutput.html", "_foxes/algorithms/downwind/models/ReorderFarmOutput.__init__.html", "_foxes/algorithms/downwind/models/ReorderFarmOutput.calculate.html", "_foxes/algorithms/downwind/models/ReorderFarmOutput.output_farm_vars.html", "_foxes/algorithms/downwind/models/SetAmbFarmResults.html", "_foxes/algorithms/downwind/models/SetAmbFarmResults.__init__.html", "_foxes/algorithms/downwind/models/SetAmbFarmResults.calculate.html", "_foxes/algorithms/downwind/models/SetAmbFarmResults.output_farm_vars.html", "_foxes/algorithms/downwind/models/SetAmbPointResults.html", "_foxes/algorithms/downwind/models/SetAmbPointResults.__init__.html", "_foxes/algorithms/downwind/models/SetAmbPointResults.calculate.html", "_foxes/algorithms/downwind/models/SetAmbPointResults.initialize.html", "_foxes/algorithms/downwind/models/SetAmbPointResults.output_point_vars.html", "_foxes/algorithms/iterative/ConvCrit.html", "_foxes/algorithms/iterative/ConvCrit.__init__.html", "_foxes/algorithms/iterative/ConvCrit.check_converged.html", "_foxes/algorithms/iterative/ConvCrit.get_deltas.html", "_foxes/algorithms/iterative/ConvCritList.html", "_foxes/algorithms/iterative/ConvCritList.__init__.html", "_foxes/algorithms/iterative/ConvCritList.add_crit.html", "_foxes/algorithms/iterative/ConvCritList.check_converged.html", "_foxes/algorithms/iterative/ConvCritList.get_deltas.html", "_foxes/algorithms/iterative/ConvVarDelta.html", "_foxes/algorithms/iterative/ConvVarDelta.__init__.html", "_foxes/algorithms/iterative/ConvVarDelta.check_converged.html", "_foxes/algorithms/iterative/ConvVarDelta.get_deltas.html", "_foxes/algorithms/iterative/DefaultConv.html", "_foxes/algorithms/iterative/DefaultConv.__init__.html", "_foxes/algorithms/iterative/models/FarmWakesCalculation.html", "_foxes/algorithms/iterative/models/FarmWakesCalculation.__init__.html", "_foxes/algorithms/iterative/models/FarmWakesCalculation.calculate.html", "_foxes/algorithms/iterative/models/FarmWakesCalculation.output_farm_vars.html", "_foxes/algorithms/iterative/models/FarmWakesCalculation.sub_models.html", "_foxes/algorithms/iterative/models/URelax.html", "_foxes/algorithms/iterative/models/URelax.__init__.html", "_foxes/algorithms/iterative/models/URelax.calculate.html", "_foxes/algorithms/iterative/models/URelax.output_farm_vars.html", "_foxes/algorithms/sequential/SequentialPlugin.html", "_foxes/algorithms/sequential/SequentialPlugin.__init__.html", "_foxes/algorithms/sequential/SequentialPlugin.finalize.html", "_foxes/algorithms/sequential/SequentialPlugin.initialize.html", "_foxes/algorithms/sequential/SequentialPlugin.update.html", "_foxes/algorithms/sequential/models/SeqState.html", "_foxes/algorithms/sequential/models/SeqState.__init__.html", "_foxes/algorithms/sequential/models/SeqState.calculate.html", "_foxes/algorithms/sequential/models/SeqState.counter.html", "_foxes/algorithms/sequential/models/SeqState.index.html", "_foxes/algorithms/sequential/models/SeqState.initialize.html", "_foxes/algorithms/sequential/models/SeqState.output_point_vars.html", "_foxes/algorithms/sequential/models/SeqState.size.html", "_foxes/algorithms/sequential/models/SeqState.sub_models.html", "_foxes/algorithms/sequential/models/SeqState.weights.html", "_foxes/config/Config.html", "_foxes/config/Config.__init__.html", "_foxes/config/Config.dtype_double.html", "_foxes/config/Config.dtype_int.html", "_foxes/config/Config.input_dir.html", "_foxes/config/Config.nc_engine.html", "_foxes/config/Config.output_dir.html", "_foxes/config/Config.work_dir.html", "_foxes/config/get_input_path.html", "_foxes/config/get_output_path.html", "_foxes/config/get_path.html", "_foxes/constants/AMB_ROTOR_RES.html", "_foxes/constants/BLOCK_CONVERGENCE.html", "_foxes/constants/DTYPE.html", "_foxes/constants/FARM.html", "_foxes/constants/GW.html", "_foxes/constants/INPUT_DIR.html", "_foxes/constants/ITYPE.html", "_foxes/constants/KAPPA.html", "_foxes/constants/MW.html", "_foxes/constants/NC_ENGINE.html", "_foxes/constants/OUTPUT_DIR.html", "_foxes/constants/POINT.html", "_foxes/constants/POINTS.html", "_foxes/constants/POP.html", "_foxes/constants/P_UNITS.html", "_foxes/constants/ROTOR_POINTS.html", "_foxes/constants/ROTOR_WEIGHTS.html", "_foxes/constants/STATE.html", "_foxes/constants/STATES_SEL.html", "_foxes/constants/STATE_SOURCE_ORDERI.html", "_foxes/constants/STATE_TARGET.html", "_foxes/constants/STATE_TARGET_TPOINT.html", "_foxes/constants/STATE_TURBINE.html", "_foxes/constants/TARGET.html", "_foxes/constants/TARGETS.html", "_foxes/constants/TIME.html", "_foxes/constants/TMODELS.html", "_foxes/constants/TMODEL_SELS.html", "_foxes/constants/TNAME.html", "_foxes/constants/TPOINT.html", "_foxes/constants/TPOINTS.html", "_foxes/constants/TURBINE.html", "_foxes/constants/TW.html", "_foxes/constants/TWEIGHTS.html", "_foxes/constants/VALID.html", "_foxes/constants/VARS.html", "_foxes/constants/W.html", "_foxes/constants/WORK_DIR.html", "_foxes/constants/XYH.html", "_foxes/constants/kW.html", "_foxes/core/Algorithm.html", "_foxes/core/Algorithm.__init__.html", "_foxes/core/Algorithm.add_to_chunk_store.html", "_foxes/core/Algorithm.block_convergence.html", "_foxes/core/Algorithm.calc_farm.html", "_foxes/core/Algorithm.calc_points.html", "_foxes/core/Algorithm.chunk_store.html", "_foxes/core/Algorithm.dbook.html", "_foxes/core/Algorithm.del_model_data.html", "_foxes/core/Algorithm.eval_conv_block.html", "_foxes/core/Algorithm.farm.html", "_foxes/core/Algorithm.finalize.html", "_foxes/core/Algorithm.find_chunk_in_store.html", "_foxes/core/Algorithm.get_from_chunk_store.html", "_foxes/core/Algorithm.get_model_data.html", "_foxes/core/Algorithm.get_models_data.html", "_foxes/core/Algorithm.get_models_idata.html", "_foxes/core/Algorithm.idata_mem.html", "_foxes/core/Algorithm.initialize.html", "_foxes/core/Algorithm.mbook.html", "_foxes/core/Algorithm.new.html", "_foxes/core/Algorithm.new_point_data.html", "_foxes/core/Algorithm.print.html", "_foxes/core/Algorithm.print_deco.html", "_foxes/core/Algorithm.reset_chunk_store.html", "_foxes/core/Algorithm.set_running.html", "_foxes/core/Algorithm.store_model_data.html", "_foxes/core/Algorithm.unset_running.html", "_foxes/core/Algorithm.update_n_turbines.html", "_foxes/core/AxialInductionModel.html", "_foxes/core/AxialInductionModel.ct2a.html", "_foxes/core/AxialInductionModel.new.html", "_foxes/core/Data.html", "_foxes/core/Data.__init__.html", "_foxes/core/Data.add.html", "_foxes/core/Data.from_dataset.html", "_foxes/core/Data.get_slice.html", "_foxes/core/Data.n_states.html", "_foxes/core/Data.n_turbines.html", "_foxes/core/Data.states_i0.html", "_foxes/core/DataCalcModel.html", "_foxes/core/DataCalcModel.calculate.html", "_foxes/core/DataCalcModel.output_coords.html", "_foxes/core/Engine.html", "_foxes/core/Engine.__init__.html", "_foxes/core/Engine.__repr__.html", "_foxes/core/Engine.calc_chunk_sizes.html", "_foxes/core/Engine.combine_results.html", "_foxes/core/Engine.entered.html", "_foxes/core/Engine.finalize.html", "_foxes/core/Engine.get_chunk_input_data.html", "_foxes/core/Engine.initialize.html", "_foxes/core/Engine.initialized.html", "_foxes/core/Engine.loop_dims.html", "_foxes/core/Engine.map.html", "_foxes/core/Engine.new.html", "_foxes/core/Engine.print.html", "_foxes/core/Engine.run_calculation.html", "_foxes/core/Engine.select_subsets.html", "_foxes/core/ExtendedStates.html", "_foxes/core/ExtendedStates.__init__.html", "_foxes/core/ExtendedStates.append.html", "_foxes/core/ExtendedStates.calculate.html", "_foxes/core/ExtendedStates.index.html", "_foxes/core/ExtendedStates.output_point_vars.html", "_foxes/core/ExtendedStates.size.html", "_foxes/core/ExtendedStates.sub_models.html", "_foxes/core/ExtendedStates.weights.html", "_foxes/core/FData.html", "_foxes/core/FData.__init__.html", "_foxes/core/FData.from_dataset.html", "_foxes/core/FarmController.html", "_foxes/core/FarmController.__init__.html", "_foxes/core/FarmController.calculate.html", "_foxes/core/FarmController.collect_models.html", "_foxes/core/FarmController.finalize.html", "_foxes/core/FarmController.find_turbine_types.html", "_foxes/core/FarmController.initialize.html", "_foxes/core/FarmController.load_data.html", "_foxes/core/FarmController.needs_rews2.html", "_foxes/core/FarmController.needs_rews3.html", "_foxes/core/FarmController.new.html", "_foxes/core/FarmController.output_farm_vars.html", "_foxes/core/FarmController.set_pars.html", "_foxes/core/FarmController.sub_models.html", "_foxes/core/FarmDataModel.html", "_foxes/core/FarmDataModel.__init__.html", "_foxes/core/FarmDataModel.calculate.html", "_foxes/core/FarmDataModel.ensure_variables.html", "_foxes/core/FarmDataModel.output_coords.html", "_foxes/core/FarmDataModel.output_farm_vars.html", "_foxes/core/FarmDataModel.run_calculation.html", "_foxes/core/FarmDataModelList.html", "_foxes/core/FarmDataModelList.__init__.html", "_foxes/core/FarmDataModelList.__repr__.html", "_foxes/core/FarmDataModelList.append.html", "_foxes/core/FarmDataModelList.calculate.html", "_foxes/core/FarmDataModelList.insert.html", "_foxes/core/FarmDataModelList.output_farm_vars.html", "_foxes/core/FarmDataModelList.sub_models.html", "_foxes/core/FarmModel.html", "_foxes/core/GroundModel.html", "_foxes/core/GroundModel.contribute_to_farm_wakes.html", "_foxes/core/GroundModel.contribute_to_point_wakes.html", "_foxes/core/GroundModel.finalize_farm_wakes.html", "_foxes/core/GroundModel.finalize_point_wakes.html", "_foxes/core/GroundModel.new.html", "_foxes/core/GroundModel.new_farm_wake_deltas.html", "_foxes/core/GroundModel.new_point_wake_deltas.html", "_foxes/core/MData.html", "_foxes/core/MData.__init__.html", "_foxes/core/Model.html", "_foxes/core/Model.__init__.html", "_foxes/core/Model.__repr__.html", "_foxes/core/Model.finalize.html", "_foxes/core/Model.get_data.html", "_foxes/core/Model.initialize.html", "_foxes/core/Model.initialized.html", "_foxes/core/Model.load_data.html", "_foxes/core/Model.model_id.html", "_foxes/core/Model.running.html", "_foxes/core/Model.set_running.html", "_foxes/core/Model.sub_models.html", "_foxes/core/Model.unset_running.html", "_foxes/core/Model.var.html", "_foxes/core/PartialWakesModel.html", "_foxes/core/PartialWakesModel.check_wmodel.html", "_foxes/core/PartialWakesModel.contribute.html", "_foxes/core/PartialWakesModel.finalize_wakes.html", "_foxes/core/PartialWakesModel.get_wake_points.html", "_foxes/core/PartialWakesModel.new.html", "_foxes/core/PartialWakesModel.new_wake_deltas.html", "_foxes/core/PointDataModel.html", "_foxes/core/PointDataModel.calculate.html", "_foxes/core/PointDataModel.ensure_variables.html", "_foxes/core/PointDataModel.output_coords.html", "_foxes/core/PointDataModel.output_point_vars.html", "_foxes/core/PointDataModel.run_calculation.html", "_foxes/core/PointDataModelList.html", "_foxes/core/PointDataModelList.__init__.html", "_foxes/core/PointDataModelList.__repr__.html", "_foxes/core/PointDataModelList.append.html", "_foxes/core/PointDataModelList.calculate.html", "_foxes/core/PointDataModelList.new.html", "_foxes/core/PointDataModelList.output_point_vars.html", "_foxes/core/PointDataModelList.sub_models.html", "_foxes/core/RotorModel.html", "_foxes/core/RotorModel.__init__.html", "_foxes/core/RotorModel.calculate.html", "_foxes/core/RotorModel.design_points.html", "_foxes/core/RotorModel.eval_rpoint_results.html", "_foxes/core/RotorModel.get_rotor_points.html", "_foxes/core/RotorModel.n_rotor_points.html", "_foxes/core/RotorModel.new.html", "_foxes/core/RotorModel.output_farm_vars.html", "_foxes/core/RotorModel.rotor_point_weights.html", "_foxes/core/States.html", "_foxes/core/States.index.html", "_foxes/core/States.load_data.html", "_foxes/core/States.new.html", "_foxes/core/States.output_point_vars.html", "_foxes/core/States.reset.html", "_foxes/core/States.size.html", "_foxes/core/States.weights.html", "_foxes/core/TData.html", "_foxes/core/TData.__init__.html", "_foxes/core/TData.from_dataset.html", "_foxes/core/TData.from_points.html", "_foxes/core/TData.from_tpoints.html", "_foxes/core/TData.n_targets.html", "_foxes/core/TData.n_tpoints.html", "_foxes/core/TData.targets_i0.html", "_foxes/core/TData.tpoint_mean.html", "_foxes/core/Turbine.html", "_foxes/core/Turbine.__init__.html", "_foxes/core/Turbine.add_model.html", "_foxes/core/Turbine.insert_model.html", "_foxes/core/TurbineInductionModel.html", "_foxes/core/TurbineInductionModel.affects_downwind.html", "_foxes/core/TurbineInductionModel.new.html", "_foxes/core/TurbineModel.html", "_foxes/core/TurbineModel.calculate.html", "_foxes/core/TurbineModel.new.html", "_foxes/core/TurbineType.html", "_foxes/core/TurbineType.__init__.html", "_foxes/core/TurbineType.__repr__.html", "_foxes/core/TurbineType.modify_cutin.html", "_foxes/core/TurbineType.needs_rews2.html", "_foxes/core/TurbineType.needs_rews3.html", "_foxes/core/TurbineType.new.html", "_foxes/core/VerticalProfile.html", "_foxes/core/VerticalProfile.calculate.html", "_foxes/core/VerticalProfile.input_vars.html", "_foxes/core/VerticalProfile.new.html", "_foxes/core/WakeFrame.html", "_foxes/core/WakeFrame.__init__.html", "_foxes/core/WakeFrame.calc_centreline_integral.html", "_foxes/core/WakeFrame.calc_order.html", "_foxes/core/WakeFrame.get_centreline_points.html", "_foxes/core/WakeFrame.get_wake_coos.html", "_foxes/core/WakeFrame.get_wake_modelling_data.html", "_foxes/core/WakeFrame.new.html", "_foxes/core/WakeK.html", "_foxes/core/WakeK.__call__.html", "_foxes/core/WakeK.__init__.html", "_foxes/core/WakeK.all_none.html", "_foxes/core/WakeK.is_kTI.html", "_foxes/core/WakeK.repr.html", "_foxes/core/WakeK.use_amb_ti.html", "_foxes/core/WakeModel.html", "_foxes/core/WakeModel.affects_downwind.html", "_foxes/core/WakeModel.contribute.html", "_foxes/core/WakeModel.finalize_wake_deltas.html", "_foxes/core/WakeModel.new.html", "_foxes/core/WakeModel.new_wake_deltas.html", "_foxes/core/WakeSuperposition.html", "_foxes/core/WakeSuperposition.add_wake.html", "_foxes/core/WakeSuperposition.calc_final_wake_delta.html", "_foxes/core/WakeSuperposition.new.html", "_foxes/core/WindFarm.html", "_foxes/core/WindFarm.__init__.html", "_foxes/core/WindFarm.add_turbine.html", "_foxes/core/WindFarm.get_hub_heights.html", "_foxes/core/WindFarm.get_rotor_diameters.html", "_foxes/core/WindFarm.get_xy_bounds.html", "_foxes/core/WindFarm.n_turbines.html", "_foxes/core/WindFarm.turbine_names.html", "_foxes/core/WindFarm.xy_array.html", "_foxes/core/get_engine.html", "_foxes/core/has_engine.html", "_foxes/core/reset_engine.html", "_foxes/data/StaticData.html", "_foxes/data/StaticData.__init__.html", "_foxes/data/parse_Pct_file_name.html", "_foxes/data/parse_Pct_two_files.html", "_foxes/engines/DaskBaseEngine.html", "_foxes/engines/DaskBaseEngine.__init__.html", "_foxes/engines/DaskBaseEngine.chunk_data.html", "_foxes/engines/DaskBaseEngine.finalize.html", "_foxes/engines/DaskBaseEngine.initialize.html", "_foxes/engines/DaskBaseEngine.map.html", "_foxes/engines/DaskEngine.html", "_foxes/engines/DaskEngine.run_calculation.html", "_foxes/engines/DefaultEngine.html", "_foxes/engines/DefaultEngine.map.html", "_foxes/engines/DefaultEngine.run_calculation.html", "_foxes/engines/LocalClusterEngine.html", "_foxes/engines/LocalClusterEngine.__init__.html", "_foxes/engines/LocalClusterEngine.run_calculation.html", "_foxes/engines/MPIEngine.html", "_foxes/engines/MultiprocessEngine.html", "_foxes/engines/NumpyEngine.html", "_foxes/engines/NumpyEngine.map.html", "_foxes/engines/NumpyEngine.run_calculation.html", "_foxes/engines/PoolEngine.html", "_foxes/engines/PoolEngine.map.html", "_foxes/engines/PoolEngine.run_calculation.html", "_foxes/engines/ProcessEngine.html", "_foxes/engines/RayEngine.html", "_foxes/engines/SingleChunkEngine.html", "_foxes/engines/SingleChunkEngine.__init__.html", "_foxes/engines/SingleChunkEngine.__repr__.html", "_foxes/engines/SingleChunkEngine.map.html", "_foxes/engines/SingleChunkEngine.run_calculation.html", "_foxes/engines/SlurmClusterEngine.html", "_foxes/engines/ThreadsEngine.html", "_foxes/engines/XArrayEngine.html", "_foxes/engines/XArrayEngine.map.html", "_foxes/engines/XArrayEngine.run_calculation.html", "_foxes/input/farm_layout/add_from_csv.html", "_foxes/input/farm_layout/add_from_df.html", "_foxes/input/farm_layout/add_from_file.html", "_foxes/input/farm_layout/add_from_json.html", "_foxes/input/farm_layout/add_grid.html", "_foxes/input/farm_layout/add_random.html", "_foxes/input/farm_layout/add_ring.html", "_foxes/input/farm_layout/add_row.html", "_foxes/input/states/FieldDataNC.html", "_foxes/input/states/FieldDataNC.__init__.html", "_foxes/input/states/FieldDataNC.calculate.html", "_foxes/input/states/FieldDataNC.data_source.html", "_foxes/input/states/FieldDataNC.index.html", "_foxes/input/states/FieldDataNC.load_data.html", "_foxes/input/states/FieldDataNC.output_point_vars.html", "_foxes/input/states/FieldDataNC.set_running.html", "_foxes/input/states/FieldDataNC.size.html", "_foxes/input/states/FieldDataNC.unset_running.html", "_foxes/input/states/FieldDataNC.weights.html", "_foxes/input/states/MultiHeightNCStates.html", "_foxes/input/states/MultiHeightNCStates.__init__.html", "_foxes/input/states/MultiHeightNCStates.load_data.html", "_foxes/input/states/MultiHeightNCTimeseries.html", "_foxes/input/states/MultiHeightNCTimeseries.__init__.html", "_foxes/input/states/MultiHeightStates.html", "_foxes/input/states/MultiHeightStates.RDICT.html", "_foxes/input/states/MultiHeightStates.__init__.html", "_foxes/input/states/MultiHeightStates.__repr__.html", "_foxes/input/states/MultiHeightStates.calculate.html", "_foxes/input/states/MultiHeightStates.data_source.html", "_foxes/input/states/MultiHeightStates.finalize.html", "_foxes/input/states/MultiHeightStates.index.html", "_foxes/input/states/MultiHeightStates.load_data.html", "_foxes/input/states/MultiHeightStates.output_point_vars.html", "_foxes/input/states/MultiHeightStates.reset.html", "_foxes/input/states/MultiHeightStates.set_running.html", "_foxes/input/states/MultiHeightStates.size.html", "_foxes/input/states/MultiHeightStates.unset_running.html", "_foxes/input/states/MultiHeightStates.weights.html", "_foxes/input/states/MultiHeightTimeseries.html", "_foxes/input/states/MultiHeightTimeseries.RDICT.html", "_foxes/input/states/OnePointFlowMultiHeightNCTimeseries.html", "_foxes/input/states/OnePointFlowMultiHeightNCTimeseries.__init__.html", "_foxes/input/states/OnePointFlowMultiHeightTimeseries.html", "_foxes/input/states/OnePointFlowMultiHeightTimeseries.__init__.html", "_foxes/input/states/OnePointFlowStates.html", "_foxes/input/states/OnePointFlowStates.__init__.html", "_foxes/input/states/OnePointFlowStates.__repr__.html", "_foxes/input/states/OnePointFlowStates.calc_states_indices.html", "_foxes/input/states/OnePointFlowStates.calculate.html", "_foxes/input/states/OnePointFlowStates.index.html", "_foxes/input/states/OnePointFlowStates.initialize.html", "_foxes/input/states/OnePointFlowStates.output_point_vars.html", "_foxes/input/states/OnePointFlowStates.set_running.html", "_foxes/input/states/OnePointFlowStates.size.html", "_foxes/input/states/OnePointFlowStates.sub_models.html", "_foxes/input/states/OnePointFlowStates.unset_running.html", "_foxes/input/states/OnePointFlowStates.weights.html", "_foxes/input/states/OnePointFlowTimeseries.html", "_foxes/input/states/OnePointFlowTimeseries.__init__.html", "_foxes/input/states/ScanStates.html", "_foxes/input/states/ScanStates.__init__.html", "_foxes/input/states/ScanStates.calculate.html", "_foxes/input/states/ScanStates.load_data.html", "_foxes/input/states/ScanStates.output_point_vars.html", "_foxes/input/states/ScanStates.set_running.html", "_foxes/input/states/ScanStates.size.html", "_foxes/input/states/ScanStates.unset_running.html", "_foxes/input/states/ScanStates.weights.html", "_foxes/input/states/SingleStateStates.html", "_foxes/input/states/SingleStateStates.__init__.html", "_foxes/input/states/SingleStateStates.calculate.html", "_foxes/input/states/SingleStateStates.initialize.html", "_foxes/input/states/SingleStateStates.output_point_vars.html", "_foxes/input/states/SingleStateStates.size.html", "_foxes/input/states/SingleStateStates.sub_models.html", "_foxes/input/states/SingleStateStates.weights.html", "_foxes/input/states/StatesTable.html", "_foxes/input/states/StatesTable.RDICT.html", "_foxes/input/states/StatesTable.__init__.html", "_foxes/input/states/StatesTable.calculate.html", "_foxes/input/states/StatesTable.data_source.html", "_foxes/input/states/StatesTable.finalize.html", "_foxes/input/states/StatesTable.index.html", "_foxes/input/states/StatesTable.initialize.html", "_foxes/input/states/StatesTable.load_data.html", "_foxes/input/states/StatesTable.output_point_vars.html", "_foxes/input/states/StatesTable.reset.html", "_foxes/input/states/StatesTable.set_running.html", "_foxes/input/states/StatesTable.size.html", "_foxes/input/states/StatesTable.sub_models.html", "_foxes/input/states/StatesTable.unset_running.html", "_foxes/input/states/StatesTable.weights.html", "_foxes/input/states/TabStates.html", "_foxes/input/states/TabStates.__init__.html", "_foxes/input/states/TabStates.load_data.html", "_foxes/input/states/TabStates.set_running.html", "_foxes/input/states/TabStates.unset_running.html", "_foxes/input/states/Timeseries.html", "_foxes/input/states/Timeseries.RDICT.html", "_foxes/input/states/create/create_random_abl_states.html", "_foxes/input/states/create/random_timseries_data.html", "_foxes/input/states/create/write_random_abl_states.html", "_foxes/input/yaml/foxes_windio.html", "_foxes/input/yaml/foxes_yaml.html", "_foxes/input/yaml/get_output_obj.html", "_foxes/input/yaml/read_dict.html", "_foxes/input/yaml/read_windio.html", "_foxes/input/yaml/run_dict.html", "_foxes/input/yaml/run_obj_function.html", "_foxes/input/yaml/run_outputs.html", "_foxes/input/yaml/windio/read_attributes.html", "_foxes/input/yaml/windio/read_farm.html", "_foxes/input/yaml/windio/read_layout.html", "_foxes/input/yaml/windio/read_site.html", "_foxes/input/yaml/windio/read_turbine_types.html", "_foxes/input/yaml/windio/read_wind_resource_field.html", "_foxes/models/ModelBook.html", "_foxes/models/ModelBook.__getitem__.html", "_foxes/models/ModelBook.__init__.html", "_foxes/models/ModelBook.default_partial_wakes.html", "_foxes/models/ModelBook.finalize.html", "_foxes/models/ModelBook.get.html", "_foxes/models/ModelBook.print_toc.html", "_foxes/models/axial_inductionBetzAxialInduction.html", "_foxes/models/axial_inductionBetzAxialInduction.__init__.html", "_foxes/models/axial_inductionBetzAxialInduction.ct2a.html", "_foxes/models/axial_inductionMadsenAxialInduction.html", "_foxes/models/axial_inductionMadsenAxialInduction.__init__.html", "_foxes/models/axial_inductionMadsenAxialInduction.ct2a.html", "_foxes/models/farm_controllers/BasicFarmController.html", "_foxes/models/farm_models/Turbine2FarmModel.html", "_foxes/models/farm_models/Turbine2FarmModel.__init__.html", "_foxes/models/farm_models/Turbine2FarmModel.__repr__.html", "_foxes/models/farm_models/Turbine2FarmModel.calculate.html", "_foxes/models/farm_models/Turbine2FarmModel.output_farm_vars.html", "_foxes/models/farm_models/Turbine2FarmModel.sub_models.html", "_foxes/models/ground_modelsGroundMirror.html", "_foxes/models/ground_modelsGroundMirror.__init__.html", "_foxes/models/ground_modelsNoGround.html", "_foxes/models/ground_modelsWakeMirror.html", "_foxes/models/ground_modelsWakeMirror.__init__.html", "_foxes/models/ground_modelsWakeMirror.contribute_to_farm_wakes.html", "_foxes/models/ground_modelsWakeMirror.contribute_to_point_wakes.html", "_foxes/models/partial_wakes/PartialAxiwake.html", "_foxes/models/partial_wakes/PartialAxiwake.__init__.html", "_foxes/models/partial_wakes/PartialAxiwake.__repr__.html", "_foxes/models/partial_wakes/PartialAxiwake.check_wmodel.html", "_foxes/models/partial_wakes/PartialAxiwake.contribute.html", "_foxes/models/partial_wakes/PartialCentre.html", "_foxes/models/partial_wakes/PartialCentre.get_wake_points.html", "_foxes/models/partial_wakes/PartialGrid.html", "_foxes/models/partial_wakes/PartialGrid.__init__.html", "_foxes/models/partial_wakes/PartialSegregated.html", "_foxes/models/partial_wakes/PartialSegregated.__init__.html", "_foxes/models/partial_wakes/PartialSegregated.__repr__.html", "_foxes/models/partial_wakes/PartialSegregated.finalize_wakes.html", "_foxes/models/partial_wakes/PartialSegregated.get_wake_points.html", "_foxes/models/partial_wakes/PartialSegregated.sub_models.html", "_foxes/models/partial_wakes/PartialTopHat.html", "_foxes/models/partial_wakes/PartialTopHat.__init__.html", "_foxes/models/partial_wakes/PartialTopHat.check_wmodel.html", "_foxes/models/partial_wakes/PartialTopHat.contribute.html", "_foxes/models/partial_wakes/PartialTopHat.initialize.html", "_foxes/models/partial_wakes/PartialTopHat.sub_models.html", "_foxes/models/partial_wakes/RotorPoints.html", "_foxes/models/partial_wakes/RotorPoints.finalize_wakes.html", "_foxes/models/partial_wakes/RotorPoints.get_wake_points.html", "_foxes/models/point_models/SetUniformData.html", "_foxes/models/point_models/SetUniformData.__init__.html", "_foxes/models/point_models/SetUniformData.calculate.html", "_foxes/models/point_models/SetUniformData.load_data.html", "_foxes/models/point_models/SetUniformData.output_point_vars.html", "_foxes/models/point_models/TKE2TI.html", "_foxes/models/point_models/TKE2TI.calculate.html", "_foxes/models/point_models/TKE2TI.output_point_vars.html", "_foxes/models/point_models/Ustar2TI.html", "_foxes/models/point_models/Ustar2TI.__init__.html", "_foxes/models/point_models/Ustar2TI.calculate.html", "_foxes/models/point_models/Ustar2TI.output_point_vars.html", "_foxes/models/point_models/WakeDeltas.html", "_foxes/models/point_models/WakeDeltas.__init__.html", "_foxes/models/point_models/WakeDeltas.calculate.html", "_foxes/models/point_models/WakeDeltas.output_point_vars.html", "_foxes/models/rotor_models/CentreRotor.html", "_foxes/models/rotor_models/CentreRotor.design_points.html", "_foxes/models/rotor_models/CentreRotor.eval_rpoint_results.html", "_foxes/models/rotor_models/CentreRotor.get_rotor_points.html", "_foxes/models/rotor_models/CentreRotor.n_rotor_points.html", "_foxes/models/rotor_models/CentreRotor.rotor_point_weights.html", "_foxes/models/rotor_models/GridRotor.html", "_foxes/models/rotor_models/GridRotor.__init__.html", "_foxes/models/rotor_models/GridRotor.__repr__.html", "_foxes/models/rotor_models/GridRotor.design_points.html", "_foxes/models/rotor_models/GridRotor.initialize.html", "_foxes/models/rotor_models/GridRotor.n_rotor_points.html", "_foxes/models/rotor_models/GridRotor.rotor_point_weights.html", "_foxes/models/rotor_models/LevelRotor.html", "_foxes/models/rotor_models/LevelRotor.__init__.html", "_foxes/models/rotor_models/LevelRotor.__repr__.html", "_foxes/models/rotor_models/LevelRotor.design_points.html", "_foxes/models/rotor_models/LevelRotor.initialize.html", "_foxes/models/rotor_models/LevelRotor.n_rotor_points.html", "_foxes/models/rotor_models/LevelRotor.rotor_point_weights.html", "_foxes/models/turbine_models/Calculator.html", "_foxes/models/turbine_models/Calculator.__init__.html", "_foxes/models/turbine_models/Calculator.__repr__.html", "_foxes/models/turbine_models/Calculator.calculate.html", "_foxes/models/turbine_models/Calculator.output_farm_vars.html", "_foxes/models/turbine_models/LookupTable.html", "_foxes/models/turbine_models/LookupTable.__init__.html", "_foxes/models/turbine_models/LookupTable.calculate.html", "_foxes/models/turbine_models/LookupTable.load_data.html", "_foxes/models/turbine_models/LookupTable.output_farm_vars.html", "_foxes/models/turbine_models/PowerMask.html", "_foxes/models/turbine_models/PowerMask.__init__.html", "_foxes/models/turbine_models/PowerMask.__repr__.html", "_foxes/models/turbine_models/PowerMask.calculate.html", "_foxes/models/turbine_models/PowerMask.initialize.html", "_foxes/models/turbine_models/PowerMask.output_farm_vars.html", "_foxes/models/turbine_models/PowerMask.sub_models.html", "_foxes/models/turbine_models/RotorCentreCalc.html", "_foxes/models/turbine_models/RotorCentreCalc.__init__.html", "_foxes/models/turbine_models/RotorCentreCalc.calculate.html", "_foxes/models/turbine_models/RotorCentreCalc.initialize.html", "_foxes/models/turbine_models/RotorCentreCalc.output_farm_vars.html", "_foxes/models/turbine_models/RotorCentreCalc.sub_models.html", "_foxes/models/turbine_models/SectorManagement.html", "_foxes/models/turbine_models/SectorManagement.__init__.html", "_foxes/models/turbine_models/SectorManagement.calculate.html", "_foxes/models/turbine_models/SectorManagement.initialize.html", "_foxes/models/turbine_models/SectorManagement.output_farm_vars.html", "_foxes/models/turbine_models/SetFarmVars.html", "_foxes/models/turbine_models/SetFarmVars.__init__.html", "_foxes/models/turbine_models/SetFarmVars.add_var.html", "_foxes/models/turbine_models/SetFarmVars.calculate.html", "_foxes/models/turbine_models/SetFarmVars.initialize.html", "_foxes/models/turbine_models/SetFarmVars.load_data.html", "_foxes/models/turbine_models/SetFarmVars.output_farm_vars.html", "_foxes/models/turbine_models/SetFarmVars.reset.html", "_foxes/models/turbine_models/SetFarmVars.set_running.html", "_foxes/models/turbine_models/SetFarmVars.unset_running.html", "_foxes/models/turbine_models/TableFactors.html", "_foxes/models/turbine_models/TableFactors.__init__.html", "_foxes/models/turbine_models/TableFactors.calculate.html", "_foxes/models/turbine_models/TableFactors.initialize.html", "_foxes/models/turbine_models/TableFactors.output_farm_vars.html", "_foxes/models/turbine_models/Thrust2Ct.html", "_foxes/models/turbine_models/Thrust2Ct.__init__.html", "_foxes/models/turbine_models/Thrust2Ct.__repr__.html", "_foxes/models/turbine_models/Thrust2Ct.calculate.html", "_foxes/models/turbine_models/Thrust2Ct.output_farm_vars.html", "_foxes/models/turbine_models/YAW2YAWM.html", "_foxes/models/turbine_models/YAW2YAWM.calculate.html", "_foxes/models/turbine_models/YAW2YAWM.output_farm_vars.html", "_foxes/models/turbine_models/YAWM2YAW.html", "_foxes/models/turbine_models/YAWM2YAW.calculate.html", "_foxes/models/turbine_models/YAWM2YAW.output_farm_vars.html", "_foxes/models/turbine_models/kTI.html", "_foxes/models/turbine_models/kTI.__init__.html", "_foxes/models/turbine_models/kTI.__repr__.html", "_foxes/models/turbine_models/kTI.calculate.html", "_foxes/models/turbine_models/kTI.output_farm_vars.html", "_foxes/models/turbine_types/CpCtFile.html", "_foxes/models/turbine_types/CpCtFile.__init__.html", "_foxes/models/turbine_types/CpCtFromTwo.html", "_foxes/models/turbine_types/CpCtFromTwo.__init__.html", "_foxes/models/turbine_types/FromLookupTable.html", "_foxes/models/turbine_types/FromLookupTable.__init__.html", "_foxes/models/turbine_types/FromLookupTable.__repr__.html", "_foxes/models/turbine_types/FromLookupTable.calculate.html", "_foxes/models/turbine_types/FromLookupTable.initialize.html", "_foxes/models/turbine_types/FromLookupTable.modify_cutin.html", "_foxes/models/turbine_types/FromLookupTable.needs_rews2.html", "_foxes/models/turbine_types/FromLookupTable.needs_rews3.html", "_foxes/models/turbine_types/FromLookupTable.output_farm_vars.html", "_foxes/models/turbine_types/FromLookupTable.sub_models.html", "_foxes/models/turbine_types/NullType.html", "_foxes/models/turbine_types/NullType.__init__.html", "_foxes/models/turbine_types/NullType.calculate.html", "_foxes/models/turbine_types/NullType.needs_rews2.html", "_foxes/models/turbine_types/NullType.needs_rews3.html", "_foxes/models/turbine_types/NullType.output_farm_vars.html", "_foxes/models/turbine_types/PCtFile.html", "_foxes/models/turbine_types/PCtFile.__init__.html", "_foxes/models/turbine_types/PCtFile.__repr__.html", "_foxes/models/turbine_types/PCtFile.calculate.html", "_foxes/models/turbine_types/PCtFile.finalize.html", "_foxes/models/turbine_types/PCtFile.load_data.html", "_foxes/models/turbine_types/PCtFile.modify_cutin.html", "_foxes/models/turbine_types/PCtFile.needs_rews2.html", "_foxes/models/turbine_types/PCtFile.needs_rews3.html", "_foxes/models/turbine_types/PCtFile.output_farm_vars.html", "_foxes/models/turbine_types/PCtFromTwo.html", "_foxes/models/turbine_types/PCtFromTwo.__init__.html", "_foxes/models/turbine_types/PCtFromTwo.__repr__.html", "_foxes/models/turbine_types/PCtFromTwo.calculate.html", "_foxes/models/turbine_types/PCtFromTwo.finalize.html", "_foxes/models/turbine_types/PCtFromTwo.load_data.html", "_foxes/models/turbine_types/PCtFromTwo.modify_cutin.html", "_foxes/models/turbine_types/PCtFromTwo.needs_rews2.html", "_foxes/models/turbine_types/PCtFromTwo.needs_rews3.html", "_foxes/models/turbine_types/PCtFromTwo.output_farm_vars.html", "_foxes/models/turbine_types/TBLFile.html", "_foxes/models/turbine_types/TBLFile.__init__.html", "_foxes/models/turbine_types/WsRho2PCtFromTwo.html", "_foxes/models/turbine_types/WsRho2PCtFromTwo.__init__.html", "_foxes/models/turbine_types/WsRho2PCtFromTwo.calculate.html", "_foxes/models/turbine_types/WsRho2PCtFromTwo.finalize.html", "_foxes/models/turbine_types/WsRho2PCtFromTwo.load_data.html", "_foxes/models/turbine_types/WsRho2PCtFromTwo.needs_rews2.html", "_foxes/models/turbine_types/WsRho2PCtFromTwo.needs_rews3.html", "_foxes/models/turbine_types/WsRho2PCtFromTwo.output_farm_vars.html", "_foxes/models/turbine_types/WsTI2PCtFromTwo.html", "_foxes/models/turbine_types/WsTI2PCtFromTwo.__init__.html", "_foxes/models/turbine_types/WsTI2PCtFromTwo.__repr__.html", "_foxes/models/turbine_types/WsTI2PCtFromTwo.calculate.html", "_foxes/models/turbine_types/WsTI2PCtFromTwo.finalize.html", "_foxes/models/turbine_types/WsTI2PCtFromTwo.load_data.html", "_foxes/models/turbine_types/WsTI2PCtFromTwo.needs_rews2.html", "_foxes/models/turbine_types/WsTI2PCtFromTwo.needs_rews3.html", "_foxes/models/turbine_types/WsTI2PCtFromTwo.output_farm_vars.html", "_foxes/models/vertical_profiles/ABLLogNeutralWsProfile.html", "_foxes/models/vertical_profiles/ABLLogNeutralWsProfile.__init__.html", "_foxes/models/vertical_profiles/ABLLogNeutralWsProfile.calculate.html", "_foxes/models/vertical_profiles/ABLLogNeutralWsProfile.input_vars.html", "_foxes/models/vertical_profiles/ABLLogStableWsProfile.html", "_foxes/models/vertical_profiles/ABLLogStableWsProfile.__init__.html", "_foxes/models/vertical_profiles/ABLLogStableWsProfile.calculate.html", "_foxes/models/vertical_profiles/ABLLogStableWsProfile.input_vars.html", "_foxes/models/vertical_profiles/ABLLogUnstableWsProfile.html", "_foxes/models/vertical_profiles/ABLLogUnstableWsProfile.__init__.html", "_foxes/models/vertical_profiles/ABLLogUnstableWsProfile.calculate.html", "_foxes/models/vertical_profiles/ABLLogUnstableWsProfile.input_vars.html", "_foxes/models/vertical_profiles/ABLLogWsProfile.html", "_foxes/models/vertical_profiles/ABLLogWsProfile.__init__.html", "_foxes/models/vertical_profiles/ABLLogWsProfile.calculate.html", "_foxes/models/vertical_profiles/ABLLogWsProfile.input_vars.html", "_foxes/models/vertical_profiles/DataProfile.html", "_foxes/models/vertical_profiles/DataProfile.__init__.html", "_foxes/models/vertical_profiles/DataProfile.calculate.html", "_foxes/models/vertical_profiles/DataProfile.input_vars.html", "_foxes/models/vertical_profiles/ShearedProfile.html", "_foxes/models/vertical_profiles/ShearedProfile.calculate.html", "_foxes/models/vertical_profiles/ShearedProfile.input_vars.html", "_foxes/models/vertical_profiles/UniformProfile.html", "_foxes/models/vertical_profiles/UniformProfile.__init__.html", "_foxes/models/vertical_profiles/UniformProfile.calculate.html", "_foxes/models/vertical_profiles/UniformProfile.input_vars.html", "_foxes/models/wake_frames/DynamicWakes.html", "_foxes/models/wake_frames/DynamicWakes.__init__.html", "_foxes/models/wake_frames/DynamicWakes.__repr__.html", "_foxes/models/wake_frames/DynamicWakes.calc_order.html", "_foxes/models/wake_frames/DynamicWakes.get_wake_coos.html", "_foxes/models/wake_frames/DynamicWakes.initialize.html", "_foxes/models/wake_frames/FarmOrder.html", "_foxes/models/wake_frames/FarmOrder.__init__.html", "_foxes/models/wake_frames/FarmOrder.calc_order.html", "_foxes/models/wake_frames/FarmOrder.get_centreline_points.html", "_foxes/models/wake_frames/FarmOrder.get_wake_coos.html", "_foxes/models/wake_frames/FarmOrder.initialize.html", "_foxes/models/wake_frames/FarmOrder.sub_models.html", "_foxes/models/wake_frames/RotorWD.html", "_foxes/models/wake_frames/RotorWD.__init__.html", "_foxes/models/wake_frames/RotorWD.calc_order.html", "_foxes/models/wake_frames/RotorWD.get_centreline_points.html", "_foxes/models/wake_frames/RotorWD.get_wake_coos.html", "_foxes/models/wake_frames/SeqDynamicWakes.html", "_foxes/models/wake_frames/SeqDynamicWakes.__init__.html", "_foxes/models/wake_frames/SeqDynamicWakes.__repr__.html", "_foxes/models/wake_frames/SeqDynamicWakes.calc_order.html", "_foxes/models/wake_frames/SeqDynamicWakes.get_centreline_points.html", "_foxes/models/wake_frames/SeqDynamicWakes.get_wake_coos.html", "_foxes/models/wake_frames/SeqDynamicWakes.get_wake_modelling_data.html", "_foxes/models/wake_frames/SeqDynamicWakes.initialize.html", "_foxes/models/wake_frames/Streamlines2D.html", "_foxes/models/wake_frames/Streamlines2D.__init__.html", "_foxes/models/wake_frames/Streamlines2D.__repr__.html", "_foxes/models/wake_frames/Streamlines2D.calc_order.html", "_foxes/models/wake_frames/Streamlines2D.get_centreline_points.html", "_foxes/models/wake_frames/Streamlines2D.get_streamline_data.html", "_foxes/models/wake_frames/Streamlines2D.get_wake_coos.html", "_foxes/models/wake_frames/Timelines.html", "_foxes/models/wake_frames/Timelines.__init__.html", "_foxes/models/wake_frames/Timelines.__repr__.html", "_foxes/models/wake_frames/Timelines.calc_order.html", "_foxes/models/wake_frames/Timelines.finalize.html", "_foxes/models/wake_frames/Timelines.get_centreline_points.html", "_foxes/models/wake_frames/Timelines.get_wake_coos.html", "_foxes/models/wake_frames/Timelines.initialize.html", "_foxes/models/wake_frames/Timelines.set_running.html", "_foxes/models/wake_frames/Timelines.unset_running.html", "_foxes/models/wake_frames/YawedWakes.html", "_foxes/models/wake_frames/YawedWakes.__init__.html", "_foxes/models/wake_frames/YawedWakes.__repr__.html", "_foxes/models/wake_frames/YawedWakes.calc_order.html", "_foxes/models/wake_frames/YawedWakes.get_centreline_points.html", "_foxes/models/wake_frames/YawedWakes.get_wake_coos.html", "_foxes/models/wake_frames/YawedWakes.initialize.html", "_foxes/models/wake_frames/YawedWakes.sub_models.html", "_foxes/models/wake_models/AxisymmetricWakeModel.html", "_foxes/models/wake_models/AxisymmetricWakeModel.calc_wakes_x_r.html", "_foxes/models/wake_models/AxisymmetricWakeModel.calc_wakes_x_yz.html", "_foxes/models/wake_models/DistSlicedWakeModel.html", "_foxes/models/wake_models/DistSlicedWakeModel.__init__.html", "_foxes/models/wake_models/DistSlicedWakeModel.calc_wakes_x_yz.html", "_foxes/models/wake_models/DistSlicedWakeModel.contribute.html", "_foxes/models/wake_models/DistSlicedWakeModel.finalize_wake_deltas.html", "_foxes/models/wake_models/DistSlicedWakeModel.initialize.html", "_foxes/models/wake_models/DistSlicedWakeModel.sub_models.html", "_foxes/models/wake_models/GaussianWakeModel.html", "_foxes/models/wake_models/GaussianWakeModel.calc_amplitude_sigma.html", "_foxes/models/wake_models/GaussianWakeModel.calc_wakes_x_r.html", "_foxes/models/wake_models/TopHatWakeModel.html", "_foxes/models/wake_models/TopHatWakeModel.__init__.html", "_foxes/models/wake_models/TopHatWakeModel.calc_centreline.html", "_foxes/models/wake_models/TopHatWakeModel.calc_wake_radius.html", "_foxes/models/wake_models/TopHatWakeModel.calc_wakes_x_r.html", "_foxes/models/wake_models/TopHatWakeModel.initialize.html", "_foxes/models/wake_models/TopHatWakeModel.sub_models.html", "_foxes/models/wake_models/induction/RankineHalfBody.html", "_foxes/models/wake_models/induction/RankineHalfBody.__init__.html", "_foxes/models/wake_models/induction/RankineHalfBody.__repr__.html", "_foxes/models/wake_models/induction/RankineHalfBody.contribute.html", "_foxes/models/wake_models/induction/RankineHalfBody.finalize_wake_deltas.html", "_foxes/models/wake_models/induction/RankineHalfBody.initialize.html", "_foxes/models/wake_models/induction/RankineHalfBody.new_wake_deltas.html", "_foxes/models/wake_models/induction/RankineHalfBody.sub_models.html", "_foxes/models/wake_models/induction/Rathmann.html", "_foxes/models/wake_models/induction/Rathmann.__init__.html", "_foxes/models/wake_models/induction/Rathmann.__repr__.html", "_foxes/models/wake_models/induction/Rathmann.contribute.html", "_foxes/models/wake_models/induction/Rathmann.finalize_wake_deltas.html", "_foxes/models/wake_models/induction/Rathmann.initialize.html", "_foxes/models/wake_models/induction/Rathmann.new_wake_deltas.html", "_foxes/models/wake_models/induction/Rathmann.sub_models.html", "_foxes/models/wake_models/induction/SelfSimilar.html", "_foxes/models/wake_models/induction/SelfSimilar.__init__.html", "_foxes/models/wake_models/induction/SelfSimilar.__repr__.html", "_foxes/models/wake_models/induction/SelfSimilar.contribute.html", "_foxes/models/wake_models/induction/SelfSimilar.finalize_wake_deltas.html", "_foxes/models/wake_models/induction/SelfSimilar.initialize.html", "_foxes/models/wake_models/induction/SelfSimilar.new_wake_deltas.html", "_foxes/models/wake_models/induction/SelfSimilar.sub_models.html", "_foxes/models/wake_models/induction/SelfSimilar2020.html", "_foxes/models/wake_models/induction/VortexSheet.html", "_foxes/models/wake_models/induction/VortexSheet.__init__.html", "_foxes/models/wake_models/induction/VortexSheet.__repr__.html", "_foxes/models/wake_models/induction/VortexSheet.contribute.html", "_foxes/models/wake_models/induction/VortexSheet.finalize_wake_deltas.html", "_foxes/models/wake_models/induction/VortexSheet.initialize.html", "_foxes/models/wake_models/induction/VortexSheet.new_wake_deltas.html", "_foxes/models/wake_models/induction/VortexSheet.sub_models.html", "_foxes/models/wake_models/ti/CrespoHernandezTIWake.html", "_foxes/models/wake_models/ti/CrespoHernandezTIWake.__init__.html", "_foxes/models/wake_models/ti/CrespoHernandezTIWake.__repr__.html", "_foxes/models/wake_models/ti/CrespoHernandezTIWake.calc_centreline.html", "_foxes/models/wake_models/ti/CrespoHernandezTIWake.calc_wake_radius.html", "_foxes/models/wake_models/ti/CrespoHernandezTIWake.new_wake_deltas.html", "_foxes/models/wake_models/ti/CrespoHernandezTIWake.sub_models.html", "_foxes/models/wake_models/ti/IECTIWake.html", "_foxes/models/wake_models/ti/IECTIWake.__init__.html", "_foxes/models/wake_models/ti/IECTIWake.__repr__.html", "_foxes/models/wake_models/ti/IECTIWake.calc_centreline.html", "_foxes/models/wake_models/ti/IECTIWake.calc_wake_radius.html", "_foxes/models/wake_models/ti/IECTIWake.new_wake_deltas.html", "_foxes/models/wake_models/ti/IECTIWake.sub_models.html", "_foxes/models/wake_models/wind/Bastankhah2014.html", "_foxes/models/wake_models/wind/Bastankhah2014.__init__.html", "_foxes/models/wake_models/wind/Bastankhah2014.__repr__.html", "_foxes/models/wake_models/wind/Bastankhah2014.calc_amplitude_sigma.html", "_foxes/models/wake_models/wind/Bastankhah2014.initialize.html", "_foxes/models/wake_models/wind/Bastankhah2014.sub_models.html", "_foxes/models/wake_models/wind/Bastankhah2016.html", "_foxes/models/wake_models/wind/Bastankhah2016.__init__.html", "_foxes/models/wake_models/wind/Bastankhah2016.__repr__.html", "_foxes/models/wake_models/wind/Bastankhah2016.calc_wakes_x_yz.html", "_foxes/models/wake_models/wind/Bastankhah2016.initialize.html", "_foxes/models/wake_models/wind/Bastankhah2016.sub_models.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.AMPL_FAR.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.AMPL_NEAR.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.CHECK.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.DELTA_FAR.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.DELTA_NEAR.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.MDATA_KEY.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.NEAR.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.PARS.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.R_PC.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.R_PC_S.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.SIGMA_Y_FAR.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.SIGMA_Z_FAR.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.ST_SEL.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.X0.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.__init__.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.calc_data.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.clean.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.get_data.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.has_data.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.initialize.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.pars.html", "_foxes/models/wake_models/wind/Bastankhah2016Model.sub_models.html", "_foxes/models/wake_models/wind/JensenWake.html", "_foxes/models/wake_models/wind/JensenWake.__init__.html", "_foxes/models/wake_models/wind/JensenWake.__repr__.html", "_foxes/models/wake_models/wind/JensenWake.calc_centreline.html", "_foxes/models/wake_models/wind/JensenWake.calc_wake_radius.html", "_foxes/models/wake_models/wind/TurbOParkWake.html", "_foxes/models/wake_models/wind/TurbOParkWake.__init__.html", "_foxes/models/wake_models/wind/TurbOParkWake.__repr__.html", "_foxes/models/wake_models/wind/TurbOParkWake.calc_amplitude_sigma.html", "_foxes/models/wake_models/wind/TurbOParkWake.initialize.html", "_foxes/models/wake_models/wind/TurbOParkWake.sub_models.html", "_foxes/models/wake_models/wind/TurbOParkWakeIX.html", "_foxes/models/wake_models/wind/TurbOParkWakeIX.__init__.html", "_foxes/models/wake_models/wind/TurbOParkWakeIX.__repr__.html", "_foxes/models/wake_models/wind/TurbOParkWakeIX.calc_amplitude_sigma.html", "_foxes/models/wake_models/wind/TurbOParkWakeIX.finalize.html", "_foxes/models/wake_models/wind/TurbOParkWakeIX.initialize.html", "_foxes/models/wake_models/wind/TurbOParkWakeIX.new_wake_deltas.html", "_foxes/models/wake_models/wind/TurbOParkWakeIX.sub_models.html", "_foxes/models/wake_superpositions/TILinear.html", "_foxes/models/wake_superpositions/TILinear.__init__.html", "_foxes/models/wake_superpositions/TILinear.__repr__.html", "_foxes/models/wake_superpositions/TILinear.add_wake.html", "_foxes/models/wake_superpositions/TILinear.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/TIMax.html", "_foxes/models/wake_superpositions/TIMax.__init__.html", "_foxes/models/wake_superpositions/TIMax.__repr__.html", "_foxes/models/wake_superpositions/TIMax.add_wake.html", "_foxes/models/wake_superpositions/TIMax.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/TIPow.html", "_foxes/models/wake_superpositions/TIPow.__init__.html", "_foxes/models/wake_superpositions/TIPow.__repr__.html", "_foxes/models/wake_superpositions/TIPow.add_wake.html", "_foxes/models/wake_superpositions/TIPow.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/TIQuadratic.html", "_foxes/models/wake_superpositions/TIQuadratic.__init__.html", "_foxes/models/wake_superpositions/TIQuadratic.__repr__.html", "_foxes/models/wake_superpositions/TIQuadratic.add_wake.html", "_foxes/models/wake_superpositions/TIQuadratic.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/WSLinear.html", "_foxes/models/wake_superpositions/WSLinear.__init__.html", "_foxes/models/wake_superpositions/WSLinear.__repr__.html", "_foxes/models/wake_superpositions/WSLinear.add_wake.html", "_foxes/models/wake_superpositions/WSLinear.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/WSLinear.input_farm_vars.html", "_foxes/models/wake_superpositions/WSLinearLocal.html", "_foxes/models/wake_superpositions/WSLinearLocal.__init__.html", "_foxes/models/wake_superpositions/WSLinearLocal.__repr__.html", "_foxes/models/wake_superpositions/WSLinearLocal.add_wake.html", "_foxes/models/wake_superpositions/WSLinearLocal.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/WSLinearLocal.input_farm_vars.html", "_foxes/models/wake_superpositions/WSMax.html", "_foxes/models/wake_superpositions/WSMax.__init__.html", "_foxes/models/wake_superpositions/WSMax.__repr__.html", "_foxes/models/wake_superpositions/WSMax.add_wake.html", "_foxes/models/wake_superpositions/WSMax.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/WSMax.input_farm_vars.html", "_foxes/models/wake_superpositions/WSMaxLocal.html", "_foxes/models/wake_superpositions/WSMaxLocal.__init__.html", "_foxes/models/wake_superpositions/WSMaxLocal.__repr__.html", "_foxes/models/wake_superpositions/WSMaxLocal.add_wake.html", "_foxes/models/wake_superpositions/WSMaxLocal.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/WSMaxLocal.input_farm_vars.html", "_foxes/models/wake_superpositions/WSPow.html", "_foxes/models/wake_superpositions/WSPow.__init__.html", "_foxes/models/wake_superpositions/WSPow.__repr__.html", "_foxes/models/wake_superpositions/WSPow.add_wake.html", "_foxes/models/wake_superpositions/WSPow.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/WSPow.input_farm_vars.html", "_foxes/models/wake_superpositions/WSPowLocal.html", "_foxes/models/wake_superpositions/WSPowLocal.__init__.html", "_foxes/models/wake_superpositions/WSPowLocal.__repr__.html", "_foxes/models/wake_superpositions/WSPowLocal.add_wake.html", "_foxes/models/wake_superpositions/WSPowLocal.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/WSPowLocal.input_farm_vars.html", "_foxes/models/wake_superpositions/WSProduct.html", "_foxes/models/wake_superpositions/WSProduct.__init__.html", "_foxes/models/wake_superpositions/WSProduct.__repr__.html", "_foxes/models/wake_superpositions/WSProduct.add_wake.html", "_foxes/models/wake_superpositions/WSProduct.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/WSProduct.input_farm_vars.html", "_foxes/models/wake_superpositions/WSQuadratic.html", "_foxes/models/wake_superpositions/WSQuadratic.__init__.html", "_foxes/models/wake_superpositions/WSQuadratic.__repr__.html", "_foxes/models/wake_superpositions/WSQuadratic.add_wake.html", "_foxes/models/wake_superpositions/WSQuadratic.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/WSQuadratic.input_farm_vars.html", "_foxes/models/wake_superpositions/WSQuadraticLocal.html", "_foxes/models/wake_superpositions/WSQuadraticLocal.__init__.html", "_foxes/models/wake_superpositions/WSQuadraticLocal.__repr__.html", "_foxes/models/wake_superpositions/WSQuadraticLocal.add_wake.html", "_foxes/models/wake_superpositions/WSQuadraticLocal.calc_final_wake_delta.html", "_foxes/models/wake_superpositions/WSQuadraticLocal.input_farm_vars.html", "_foxes/output/Animator.html", "_foxes/output/Animator.__init__.html", "_foxes/output/Animator.add_generator.html", "_foxes/output/Animator.animate.html", "_foxes/output/Animator.generators.html", "_foxes/output/FarmLayoutOutput.html", "_foxes/output/FarmLayoutOutput.__init__.html", "_foxes/output/FarmLayoutOutput.get_figure.html", "_foxes/output/FarmLayoutOutput.get_layout_data.html", "_foxes/output/FarmLayoutOutput.get_layout_dict.html", "_foxes/output/FarmLayoutOutput.write_csv.html", "_foxes/output/FarmLayoutOutput.write_json.html", "_foxes/output/FarmLayoutOutput.write_plot.html", "_foxes/output/FarmLayoutOutput.write_xyh.html", "_foxes/output/FarmResultsEval.html", "_foxes/output/FarmResultsEval.__init__.html", "_foxes/output/FarmResultsEval.add_capacity.html", "_foxes/output/FarmResultsEval.add_efficiency.html", "_foxes/output/FarmResultsEval.calc_farm_efficiency.html", "_foxes/output/FarmResultsEval.calc_farm_mean.html", "_foxes/output/FarmResultsEval.calc_farm_sum.html", "_foxes/output/FarmResultsEval.calc_farm_yield.html", "_foxes/output/FarmResultsEval.calc_mean_farm_power.html", "_foxes/output/FarmResultsEval.calc_states_mean.html", "_foxes/output/FarmResultsEval.calc_states_std.html", "_foxes/output/FarmResultsEval.calc_states_sum.html", "_foxes/output/FarmResultsEval.calc_turbine_mean.html", "_foxes/output/FarmResultsEval.calc_turbine_sum.html", "_foxes/output/FarmResultsEval.calc_turbine_yield.html", "_foxes/output/FarmResultsEval.gen_stdata.html", "_foxes/output/FarmResultsEval.reduce_all.html", "_foxes/output/FarmResultsEval.reduce_states.html", "_foxes/output/FarmResultsEval.reduce_turbines.html", "_foxes/output/FarmResultsEval.weinsum.html", "_foxes/output/FlowPlots2D.html", "_foxes/output/FlowPlots2D.gen_states_fig_xy.html", "_foxes/output/FlowPlots2D.gen_states_fig_xz.html", "_foxes/output/FlowPlots2D.gen_states_fig_yz.html", "_foxes/output/FlowPlots2D.get_mean_fig_xy.html", "_foxes/output/FlowPlots2D.get_mean_fig_xz.html", "_foxes/output/FlowPlots2D.get_mean_fig_yz.html", "_foxes/output/Output.html", "_foxes/output/Output.__init__.html", "_foxes/output/Output.get_fpath.html", "_foxes/output/Output.new.html", "_foxes/output/Output.print_models.html", "_foxes/output/Output.write.html", "_foxes/output/PointCalculator.html", "_foxes/output/PointCalculator.__init__.html", "_foxes/output/PointCalculator.calculate.html", "_foxes/output/ResultsWriter.html", "_foxes/output/ResultsWriter.__init__.html", "_foxes/output/ResultsWriter.write_csv.html", "_foxes/output/ResultsWriter.write_nc.html", "_foxes/output/RosePlotOutput.html", "_foxes/output/RosePlotOutput.__init__.html", "_foxes/output/RosePlotOutput.get_data.html", "_foxes/output/RosePlotOutput.get_data_info.html", "_foxes/output/RosePlotOutput.get_figure.html", "_foxes/output/RosePlotOutput.write_figure.html", "_foxes/output/RotorPointPlot.html", "_foxes/output/RotorPointPlot.__init__.html", "_foxes/output/RotorPointPlot.get_point_figure.html", "_foxes/output/SeqFlowAnimationPlugin.html", "_foxes/output/SeqFlowAnimationPlugin.__init__.html", "_foxes/output/SeqFlowAnimationPlugin.gen_images.html", "_foxes/output/SeqFlowAnimationPlugin.initialize.html", "_foxes/output/SeqFlowAnimationPlugin.update.html", "_foxes/output/SeqWakeDebugPlugin.html", "_foxes/output/SeqWakeDebugPlugin.__init__.html", "_foxes/output/SeqWakeDebugPlugin.gen_images.html", "_foxes/output/SeqWakeDebugPlugin.initialize.html", "_foxes/output/SeqWakeDebugPlugin.update.html", "_foxes/output/SliceData.html", "_foxes/output/SliceData.__init__.html", "_foxes/output/SliceData.get_mean_data_xy.html", "_foxes/output/SliceData.get_mean_data_xz.html", "_foxes/output/SliceData.get_mean_data_yz.html", "_foxes/output/SliceData.get_states_data_xy.html", "_foxes/output/SliceData.get_states_data_xz.html", "_foxes/output/SliceData.get_states_data_yz.html", "_foxes/output/SlicesData.html", "_foxes/output/SlicesData.__init__.html", "_foxes/output/SlicesData.get_mean_data_xy.html", "_foxes/output/SlicesData.get_mean_data_xz.html", "_foxes/output/SlicesData.get_mean_data_yz.html", "_foxes/output/SlicesData.get_states_data_xy.html", "_foxes/output/SlicesData.get_states_data_xz.html", "_foxes/output/SlicesData.get_states_data_yz.html", "_foxes/output/StateTurbineMap.html", "_foxes/output/StateTurbineMap.__init__.html", "_foxes/output/StateTurbineMap.plot_map.html", "_foxes/output/StateTurbineTable.html", "_foxes/output/StateTurbineTable.__init__.html", "_foxes/output/StateTurbineTable.get_dataset.html", "_foxes/output/StatesRosePlotOutput.html", "_foxes/output/StatesRosePlotOutput.__init__.html", "_foxes/output/TurbineTypeCurves.html", "_foxes/output/TurbineTypeCurves.__init__.html", "_foxes/output/TurbineTypeCurves.plot_curves.html", "_foxes/output/WindRoseBinPlot.html", "_foxes/output/WindRoseBinPlot.__init__.html", "_foxes/output/WindRoseBinPlot.get_data.html", "_foxes/output/WindRoseBinPlot.get_figure.html", "_foxes/output/WindRoseBinPlot.write_figure.html", "_foxes/output/flow_plots_2d/get_fig.html", "_foxes/output/plt.html", "_foxes/output/plt.savefig.html", "_foxes/utils/DataBook.html", "_foxes/utils/DataBook.__init__.html", "_foxes/utils/DataBook.add_data_package.html", "_foxes/utils/DataBook.add_data_package_file.html", "_foxes/utils/DataBook.add_file.html", "_foxes/utils/DataBook.add_files.html", "_foxes/utils/DataBook.get_file_path.html", "_foxes/utils/DataBook.toc.html", "_foxes/utils/Dict.html", "_foxes/utils/Dict.__getitem__.html", "_foxes/utils/Dict.__init__.html", "_foxes/utils/Dict.from_yaml.html", "_foxes/utils/Dict.get_item.html", "_foxes/utils/Dict.pop_item.html", "_foxes/utils/FDict.html", "_foxes/utils/FDict.__contains__.html", "_foxes/utils/FDict.__getitem__.html", "_foxes/utils/FDict.__init__.html", "_foxes/utils/FDict.add_factory.html", "_foxes/utils/FDict.add_k_factory.html", "_foxes/utils/FDict.get_item.html", "_foxes/utils/Factory.html", "_foxes/utils/Factory.__init__.html", "_foxes/utils/Factory.__str__.html", "_foxes/utils/Factory.check_match.html", "_foxes/utils/Factory.construct.html", "_foxes/utils/Factory.get_examples.html", "_foxes/utils/Factory.name_prefix.html", "_foxes/utils/Factory.name_suffix.html", "_foxes/utils/Factory.variables.html", "_foxes/utils/PandasFileHelper.html", "_foxes/utils/PandasFileHelper.DATA_FILE_FORMATS.html", "_foxes/utils/PandasFileHelper.DEFAULT_FORMAT_DICT.html", "_foxes/utils/PandasFileHelper.DEFAULT_READING_PARAMETERS.html", "_foxes/utils/PandasFileHelper.DEFAULT_WRITING_PARAMETERS.html", "_foxes/utils/PandasFileHelper.read_file.html", "_foxes/utils/PandasFileHelper.write_file.html", "_foxes/utils/ReaderWRG.html", "_foxes/utils/ReaderWRG.__init__.html", "_foxes/utils/ReaderWRG.data.html", "_foxes/utils/ReaderWRG.n_sectors.html", "_foxes/utils/ReaderWRG.nx.html", "_foxes/utils/ReaderWRG.ny.html", "_foxes/utils/ReaderWRG.resolution.html", "_foxes/utils/ReaderWRG.x0.html", "_foxes/utils/ReaderWRG.y0.html", "_foxes/utils/WakeKFactory.html", "_foxes/utils/WakeKFactory.__init__.html", "_foxes/utils/WakeKFactory.__str__.html", "_foxes/utils/abl/neutral/calc_ws.html", "_foxes/utils/abl/neutral/logz.html", "_foxes/utils/abl/neutral/ustar.html", "_foxes/utils/abl/sheared/calc_ws.html", "_foxes/utils/abl/stable/calc_ws.html", "_foxes/utils/abl/stable/logz.html", "_foxes/utils/abl/stable/psi.html", "_foxes/utils/abl/stable/ustar.html", "_foxes/utils/abl/unstable/calc_ws.html", "_foxes/utils/abl/unstable/psi.html", "_foxes/utils/abl/unstable/ustar.html", "_foxes/utils/all_subclasses.html", "_foxes/utils/cubic_roots.html", "_foxes/utils/delta_wd.html", "_foxes/utils/exec_python.html", "_foxes/utils/geom2d/AreaGeometry.html", "_foxes/utils/geom2d/AreaGeometry.add_to_figure.html", "_foxes/utils/geom2d/AreaGeometry.inverse.html", "_foxes/utils/geom2d/AreaGeometry.p_max.html", "_foxes/utils/geom2d/AreaGeometry.p_min.html", "_foxes/utils/geom2d/AreaGeometry.points_distance.html", "_foxes/utils/geom2d/AreaGeometry.points_inside.html", "_foxes/utils/geom2d/AreaIntersection.html", "_foxes/utils/geom2d/AreaIntersection.__new__.html", "_foxes/utils/geom2d/AreaUnion.html", "_foxes/utils/geom2d/AreaUnion.__init__.html", "_foxes/utils/geom2d/AreaUnion.add_to_figure.html", "_foxes/utils/geom2d/AreaUnion.inverse.html", "_foxes/utils/geom2d/AreaUnion.p_max.html", "_foxes/utils/geom2d/AreaUnion.p_min.html", "_foxes/utils/geom2d/AreaUnion.points_distance.html", "_foxes/utils/geom2d/AreaUnion.points_inside.html", "_foxes/utils/geom2d/Circle.html", "_foxes/utils/geom2d/Circle.__init__.html", "_foxes/utils/geom2d/Circle.add_to_figure.html", "_foxes/utils/geom2d/Circle.p_max.html", "_foxes/utils/geom2d/Circle.p_min.html", "_foxes/utils/geom2d/Circle.points_distance.html", "_foxes/utils/geom2d/Circle.points_inside.html", "_foxes/utils/geom2d/ClosedPolygon.html", "_foxes/utils/geom2d/ClosedPolygon.__init__.html", "_foxes/utils/geom2d/ClosedPolygon.add_to_figure.html", "_foxes/utils/geom2d/ClosedPolygon.p_max.html", "_foxes/utils/geom2d/ClosedPolygon.p_min.html", "_foxes/utils/geom2d/ClosedPolygon.points_distance.html", "_foxes/utils/geom2d/ClosedPolygon.points_inside.html", "_foxes/utils/geom2d/HalfPlane.html", "_foxes/utils/geom2d/HalfPlane.__init__.html", "_foxes/utils/geom2d/HalfPlane.add_to_figure.html", "_foxes/utils/geom2d/HalfPlane.inverse.html", "_foxes/utils/geom2d/HalfPlane.p_max.html", "_foxes/utils/geom2d/HalfPlane.p_min.html", "_foxes/utils/geom2d/HalfPlane.points_distance.html", "_foxes/utils/geom2d/HalfPlane.points_inside.html", "_foxes/utils/geom2d/InvertedAreaGeometry.html", "_foxes/utils/geom2d/InvertedAreaGeometry.__init__.html", "_foxes/utils/geom2d/InvertedAreaGeometry.add_to_figure.html", "_foxes/utils/geom2d/InvertedAreaGeometry.inverse.html", "_foxes/utils/geom2d/InvertedAreaGeometry.p_max.html", "_foxes/utils/geom2d/InvertedAreaGeometry.p_min.html", "_foxes/utils/geom2d/InvertedAreaGeometry.points_distance.html", "_foxes/utils/geom2d/InvertedAreaGeometry.points_inside.html", "_foxes/utils/import_module.html", "_foxes/utils/load_module.html", "_foxes/utils/new_cls.html", "_foxes/utils/new_instance.html", "_foxes/utils/print_mem.html", "_foxes/utils/random_xy_square.html", "_foxes/utils/read_shp.html", "_foxes/utils/read_shp_polygons.html", "_foxes/utils/read_tab_file.html", "_foxes/utils/shp2csv.html", "_foxes/utils/shp2geom2d.html", "_foxes/utils/sqrt_reg.html", "_foxes/utils/two_circles/area.html", "_foxes/utils/two_circles/calc_area.html", "_foxes/utils/uv2wd.html", "_foxes/utils/wd2uv.html", "_foxes/utils/wd2wdvec.html", "_foxes/utils/wdvec2wd.html", "_foxes/utils/write_nc.html", "_foxes/variables/AMB_CAP.html", "_foxes/variables/AMB_CT.html", "_foxes/variables/AMB_P.html", "_foxes/variables/AMB_REWS.html", "_foxes/variables/AMB_REWS2.html", "_foxes/variables/AMB_REWS3.html", "_foxes/variables/AMB_RHO.html", "_foxes/variables/AMB_T.html", "_foxes/variables/AMB_TI.html", "_foxes/variables/AMB_WD.html", "_foxes/variables/AMB_WS.html", "_foxes/variables/AMB_YAW.html", "_foxes/variables/AMB_YAWM.html", "_foxes/variables/AMB_YLD.html", "_foxes/variables/CAP.html", "_foxes/variables/CT.html", "_foxes/variables/D.html", "_foxes/variables/DEFAULT_DIGITS.html", "_foxes/variables/EFF.html", "_foxes/variables/H.html", "_foxes/variables/K.html", "_foxes/variables/KB.html", "_foxes/variables/KTI.html", "_foxes/variables/MAX_P.html", "_foxes/variables/MOL.html", "_foxes/variables/ORDER.html", "_foxes/variables/ORDER_INV.html", "_foxes/variables/ORDER_SSEL.html", "_foxes/variables/P.html", "_foxes/variables/PA_ALPHA.html", "_foxes/variables/PA_BETA.html", "_foxes/variables/REWS.html", "_foxes/variables/REWS2.html", "_foxes/variables/REWS3.html", "_foxes/variables/RHO.html", "_foxes/variables/SHEAR.html", "_foxes/variables/T.html", "_foxes/variables/TI.html", "_foxes/variables/TXYH.html", "_foxes/variables/USTAR.html", "_foxes/variables/WD.html", "_foxes/variables/WEIGHT.html", "_foxes/variables/WS.html", "_foxes/variables/X.html", "_foxes/variables/Y.html", "_foxes/variables/YAW.html", "_foxes/variables/YAWM.html", "_foxes/variables/YLD.html", "_foxes/variables/Z0.html", "_foxes/variables/amb2var.html", "_foxes/variables/get_default_digits.html", "_foxes/variables/var2amb.html", "api.html", "api_algorithms.html", "api_algorithms_downwind.html", "api_algorithms_iterative.html", "api_algorithms_sequential.html", "api_config.html", "api_constants.html", "api_core.html", "api_data.html", "api_engines.html", "api_foxes.html", "api_input.html", "api_models.html", "api_output.html", "api_utils.html", "api_utils_abl.html", "api_variables.html", "api_wake_models.html", "citation.html", "examples.html", "index.html", "inputs.html", "installation.html", "models.html", "notebooks/blockage_comparison.html", "notebooks/blockage_farm.html", "notebooks/data.html", "notebooks/dyn_wakes.html", "notebooks/heterogeneous.html", "notebooks/model_book.html", "notebooks/multi_height.html", "notebooks/parallelization.html", "notebooks/partial_wakes.html", "notebooks/power_mask.html", "notebooks/rotor_models.html", "notebooks/sector_man.html", "notebooks/sequential.html", "notebooks/single_row.html", "notebooks/timelines.html", "notebooks/timeseries.html", "notebooks/wind_rose.html", "notebooks/yawed_wake.html", "optimization.html", "overview.html", "parameter_files.html", "testing.html"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "indexentries": {}, "objects": {"foxes.algorithms": [[1, 0, 1, "", "Downwind", "The downwind algorithm."], [18, 0, 1, "", "Iterative", "Iterative calculation of farm data."], [28, 0, 1, "", "Sequential", "A sequential calculation of states without chunking."]], "foxes.algorithms.Downwind": [[2, 1, 1, "", "DEFAULT_FARM_OUTPUTS", ""], [3, 2, 1, "", "__init__", "Constructor."], [4, 2, 1, "", "calc_farm", "Calculate farm data."], [5, 2, 1, "", "calc_points", "Calculate data at a given set of points."], [6, 4, 1, "", "farm_controller", "The farm controller"], [7, 2, 1, "", "get_model", "Get the algorithm specific model"], [8, 4, 1, "", "ground_models", "The ground models"], [9, 2, 1, "", "init_states", "Initialize states, if needed."], [10, 2, 1, "", "initialize", "Initializes the algorithm."], [11, 4, 1, "", "partial_wakes", "The partial wakes models"], [12, 2, 1, "", "print_deco", "Helper function for printing model names"], [13, 4, 1, "", "rotor_model", "The rotor model"], [14, 4, 1, "", "states", "The states"], [15, 2, 1, "", "sub_models", "List of all sub-models"], [16, 4, 1, "", "wake_frame", "The wake frame"], [17, 4, 1, "", "wake_models", "The wake models"]], "foxes.algorithms.Downwind.__init__": [[3, 3, 2, "", "farm", "Constructor."], [3, 3, 2, "", "farm_controller", "Constructor."], [3, 3, 2, "", "ground_models", "Constructor."], [3, 3, 2, "", "kwargs", "Constructor."], [3, 3, 2, "", "mbook", "Constructor."], [3, 3, 2, "", "partial_wakes", "Constructor."], [3, 3, 2, "", "rotor_model", "Constructor."], [3, 3, 2, "", "states", "Constructor."], [3, 3, 2, "", "wake_frame", "Constructor."], [3, 3, 2, "", "wake_models", "Constructor."]], "foxes.algorithms.Downwind.calc_farm": [[4, 3, 2, "", "ambient", "Calculate farm data."], [4, 3, 2, "", "calc_parameters", "Calculate farm data."], [4, 3, 2, "", "finalize", "Calculate farm data."], [4, 3, 2, "", "kwargs", "Calculate farm data."], [4, 3, 2, "", "outputs", "Calculate farm data."]], "foxes.algorithms.Downwind.calc_points": [[5, 3, 2, "", "ambient", "Calculate data at a given set of points."], [5, 3, 2, "", "calc_parameters", "Calculate data at a given set of points."], [5, 3, 2, "", "chunked_results", "Calculate data at a given set of points."], [5, 3, 2, "", "farm_results", "Calculate data at a given set of points."], [5, 3, 2, "", "finalize", "Calculate data at a given set of points."], [5, 3, 2, "", "kwargs", "Calculate data at a given set of points."], [5, 3, 2, "", "outputs", "Calculate data at a given set of points."], [5, 3, 2, "", "persist_mdata", "Calculate data at a given set of points."], [5, 3, 2, "", "persist_pdata", "Calculate data at a given set of points."], [5, 3, 2, "", "point_models", "Calculate data at a given set of points."], [5, 3, 2, "", "points", "Calculate data at a given set of points."], [5, 3, 2, "", "states_isel", "Calculate data at a given set of points."], [5, 3, 2, "", "states_sel", "Calculate data at a given set of points."]], "foxes.algorithms.Downwind.get_model": [[7, 3, 2, "", "name", "Get the algorithm specific model"]], "foxes.algorithms.Downwind.print_deco": [[12, 3, 2, "", "func_name", "Helper function for printing model names"], [12, 3, 2, "", "n_points", "Helper function for printing model names"]], "foxes.algorithms.Iterative": [[19, 2, 1, "", "__init__", "Constructor."], [20, 2, 1, "", "calc_farm", "Calculate farm data."], [21, 4, 1, "", "farm_results_downwind", "Gets the all-chunks farm results in downwind order from the previous iteration"], [22, 4, 1, "", "final_iteration", "Flag for the final iteration"], [23, 2, 1, "", "get_model", "Get the algorithm specific model"], [24, 2, 1, "", "initialize", "Initializes the algorithm."], [25, 4, 1, "", "iterations", "The current iteration number"], [26, 2, 1, "", "set_urelax", "Sets under-relaxation parameters."], [27, 4, 1, "", "urelax", "Returns the under-relaxation parameters"]], "foxes.algorithms.Iterative.__init__": [[19, 3, 2, "", "args", "Constructor."], [19, 3, 2, "", "conv_crit", "Constructor."], [19, 3, 2, "", "kwargs", "Constructor."], [19, 3, 2, "", "max_it", "Constructor."], [19, 3, 2, "", "mod_cutin", "Constructor."]], "foxes.algorithms.Iterative.calc_farm": [[20, 3, 2, "", "finalize", "Calculate farm data."], [20, 3, 2, "", "kwargs", "Calculate farm data."], [20, 3, 2, "", "ret_dwnd_order", "Calculate farm data."]], "foxes.algorithms.Iterative.get_model": [[23, 3, 2, "", "name", "Get the algorithm specific model"]], "foxes.algorithms.Iterative.set_urelax": [[26, 3, 2, "", "entry_point", "Sets under-relaxation parameters."], [26, 3, 2, "", "urel", "Sets under-relaxation parameters."]], "foxes.algorithms.Sequential": [[29, 2, 1, "", "__init__", "Constructor."], [30, 2, 1, "", "__iter__", "Initialize the iterator"], [31, 2, 1, "", "__next__", "Run calculation for current step, then iterate to next"], [32, 2, 1, "", "calc_farm", "Calculate farm data."], [33, 2, 1, "", "calc_points", "Calculate data at a given set of points."], [34, 4, 1, "", "counter", "The current index counter"], [35, 4, 1, "", "cur_farm_results", "The current farm results"], [36, 4, 1, "", "cur_point_results", "The current point results"], [37, 4, 1, "", "farm_results", "The overall farm results"], [38, 4, 1, "", "farm_results_downwind", "The overall farm results, with turbine dimension in downwind order"], [39, 2, 1, "", "get_model", "Get the algorithm specific model"], [40, 2, 1, "", "get_models_data", "Creates xarray from model input data."], [41, 4, 1, "", "index", "The current index"], [42, 4, 1, "", "iterating", "Flag for running iteration"], [43, 4, 1, "", "point_results", "The overall point results"], [44, 4, 1, "", "size", "The total number of iteration steps"], [45, 2, 1, "", "states_i0", "Returns counter or index"], [46, 4, 1, "", "weight", "The current weight array"]], "foxes.algorithms.Sequential.__init__": [[29, 3, 2, "", "ambient", "Constructor."], [29, 3, 2, "", "args", "Constructor."], [29, 3, 2, "", "calc_pars", "Constructor."], [29, 3, 2, "", "farm", "Constructor."], [29, 3, 2, "", "kwargs", "Constructor."], [29, 3, 2, "", "outputs", "Constructor."], [29, 3, 2, "", "plugins", "Constructor."], [29, 3, 2, "", "points", "Constructor."], [29, 3, 2, "", "states", "Constructor."]], "foxes.algorithms.Sequential.calc_points": [[33, 3, 2, "", "farm_results", "Calculate data at a given set of points."], [33, 3, 2, "", "kwargs", "Calculate data at a given set of points."], [33, 3, 2, "", "points", "Calculate data at a given set of points."]], "foxes.algorithms.Sequential.get_model": [[39, 3, 2, "", "name", "Get the algorithm specific model"]], "foxes.algorithms.Sequential.get_models_data": [[40, 3, 2, "", "isel", "Creates xarray from model input data."], [40, 3, 2, "", "sel", "Creates xarray from model input data."]], "foxes.algorithms.Sequential.states_i0": [[45, 3, 2, "", "algo", "Returns counter or index"], [45, 3, 2, "", "counter", "Returns counter or index"]], "foxes.algorithms.downwind.models": [[47, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."], [50, 0, 1, "", "InitFarmData", "Sets basic turbine data and applies downwind order"], [54, 0, 1, "", "PointWakesCalculation", "This model calculates wake effects at points of interest."], [60, 0, 1, "", "ReorderFarmOutput", "Reorders final results to state-turbine dimensions"], [64, 0, 1, "", "SetAmbFarmResults", "This model copies farm data results to ambient results."], [68, 0, 1, "", "SetAmbPointResults", "This model copies point results to ambient results."]], "foxes.algorithms.downwind.models.FarmWakesCalculation": [[48, 2, 1, "", "calculate", "The main model calculation."], [49, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.FarmWakesCalculation.calculate": [[48, 3, 2, "", "algo", "The main model calculation."], [48, 3, 2, "", "fdata", "The main model calculation."], [48, 3, 2, "", "mdata", "The main model calculation."]], "foxes.algorithms.downwind.models.FarmWakesCalculation.output_farm_vars": [[49, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.InitFarmData": [[51, 2, 1, "", "__init__", "Constructor."], [52, 2, 1, "", "calculate", "The main model calculation."], [53, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.InitFarmData.calculate": [[52, 3, 2, "", "algo", "The main model calculation."], [52, 3, 2, "", "fdata", "The main model calculation."], [52, 3, 2, "", "mdata", "The main model calculation."]], "foxes.algorithms.downwind.models.InitFarmData.output_farm_vars": [[53, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.PointWakesCalculation": [[55, 2, 1, "", "__init__", "Constructor."], [56, 2, 1, "", "calculate", "The main model calculation."], [57, 2, 1, "", "initialize", "Initializes the model."], [58, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [59, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.algorithms.downwind.models.PointWakesCalculation.__init__": [[55, 3, 2, "", "emodels", "Constructor."], [55, 3, 2, "", "emodels_cpars", "Constructor."], [55, 3, 2, "", "wake_models", "Constructor."]], "foxes.algorithms.downwind.models.PointWakesCalculation.calculate": [[56, 3, 2, "", "algo", "The main model calculation."], [56, 3, 2, "", "downwind_index", "The main model calculation."], [56, 3, 2, "", "fdata", "The main model calculation."], [56, 3, 2, "", "mdata", "The main model calculation."], [56, 3, 2, "", "tdata", "The main model calculation."]], "foxes.algorithms.downwind.models.PointWakesCalculation.initialize": [[57, 3, 2, "", "algo", "Initializes the model."], [57, 3, 2, "", "force", "Initializes the model."], [57, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.algorithms.downwind.models.PointWakesCalculation.output_point_vars": [[58, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.ReorderFarmOutput": [[61, 2, 1, "", "__init__", "Constructor"], [62, 2, 1, "", "calculate", "The main model calculation."], [63, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.ReorderFarmOutput.__init__": [[61, 3, 2, "", "outputs", "Constructor"]], "foxes.algorithms.downwind.models.ReorderFarmOutput.calculate": [[62, 3, 2, "", "algo", "The main model calculation."], [62, 3, 2, "", "fdata", "The main model calculation."], [62, 3, 2, "", "mdata", "The main model calculation."]], "foxes.algorithms.downwind.models.ReorderFarmOutput.output_farm_vars": [[63, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.SetAmbFarmResults": [[65, 2, 1, "", "__init__", "Constructor."], [66, 2, 1, "", "calculate", "The main model calculation."], [67, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.SetAmbFarmResults.calculate": [[66, 3, 2, "", "algo", "The main model calculation."], [66, 3, 2, "", "fdata", "The main model calculation."], [66, 3, 2, "", "mdata", "The main model calculation."]], "foxes.algorithms.downwind.models.SetAmbFarmResults.output_farm_vars": [[67, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.SetAmbPointResults": [[69, 2, 1, "", "__init__", "Constructor."], [70, 2, 1, "", "calculate", "The main model calculation."], [71, 2, 1, "", "initialize", "Initializes the model."], [72, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.SetAmbPointResults.calculate": [[70, 3, 2, "", "algo", "The main model calculation."], [70, 3, 2, "", "fdata", "The main model calculation."], [70, 3, 2, "", "mdata", "The main model calculation."], [70, 3, 2, "", "pdata", "The main model calculation."]], "foxes.algorithms.downwind.models.SetAmbPointResults.initialize": [[71, 3, 2, "", "algo", "Initializes the model."], [71, 3, 2, "", "force", "Initializes the model."], [71, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.algorithms.downwind.models.SetAmbPointResults.output_point_vars": [[72, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.algorithms.iterative": [[73, 0, 1, "", "ConvCrit", "Abstract base class for convergence criteria"], [77, 0, 1, "", "ConvCritList", "A list of convergence criteria"], [82, 0, 1, "", "ConvVarDelta", "Requires convergence of a selection of variables."], [86, 0, 1, "", "DefaultConv", "Default convergence criteria."]], "foxes.algorithms.iterative.ConvCrit": [[74, 2, 1, "", "__init__", "Constructor."], [75, 2, 1, "", "check_converged", "Check convergence criteria."], [76, 2, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvCrit.__init__": [[74, 3, 2, "", "name", "Constructor."]], "foxes.algorithms.iterative.ConvCrit.check_converged": [[75, 3, 2, "", "algo", "Check convergence criteria."], [75, 3, 2, "", "prev_results", "Check convergence criteria."], [75, 3, 2, "", "results", "Check convergence criteria."], [75, 3, 2, "", "verbosity", "Check convergence criteria."]], "foxes.algorithms.iterative.ConvCritList": [[78, 2, 1, "", "__init__", "Constructor."], [79, 2, 1, "", "add_crit", "Add a convergence criterion"], [80, 2, 1, "", "check_converged", "Check convergence criteria."], [81, 2, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvCritList.__init__": [[78, 3, 2, "", "crits", "Constructor."], [78, 3, 2, "", "name", "Constructor."]], "foxes.algorithms.iterative.ConvCritList.add_crit": [[79, 3, 2, "", "crit", "Add a convergence criterion"]], "foxes.algorithms.iterative.ConvCritList.check_converged": [[80, 3, 2, "", "algo", "Check convergence criteria."], [80, 3, 2, "", "prev_results", "Check convergence criteria."], [80, 3, 2, "", "results", "Check convergence criteria."], [80, 3, 2, "", "verbosity", "Check convergence criteria."]], "foxes.algorithms.iterative.ConvVarDelta": [[83, 2, 1, "", "__init__", "Constructor."], [84, 2, 1, "", "check_converged", "Check convergence criteria."], [85, 2, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvVarDelta.__init__": [[83, 3, 2, "", "limits", "Constructor."], [83, 3, 2, "", "name", "Constructor."], [83, 3, 2, "", "wd_vars", "Constructor."]], "foxes.algorithms.iterative.ConvVarDelta.check_converged": [[84, 3, 2, "", "algo", "Check convergence criteria."], [84, 3, 2, "", "prev_results", "Check convergence criteria."], [84, 3, 2, "", "results", "Check convergence criteria."], [84, 3, 2, "", "verbosity", "Check convergence criteria."]], "foxes.algorithms.iterative.DefaultConv": [[87, 2, 1, "", "__init__", "Constructor."]], "foxes.algorithms.iterative.models": [[88, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."], [93, 0, 1, "", "URelax", "Apply under-relaxation to selected variables during iterations."]], "foxes.algorithms.iterative.models.FarmWakesCalculation": [[89, 2, 1, "", "__init__", "Constructor."], [90, 2, 1, "", "calculate", "The main model calculation."], [91, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [92, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.algorithms.iterative.models.FarmWakesCalculation.__init__": [[89, 3, 2, "", "urelax", "Constructor."]], "foxes.algorithms.iterative.models.FarmWakesCalculation.calculate": [[90, 3, 2, "", "algo", "The main model calculation."], [90, 3, 2, "", "fdata", "The main model calculation."], [90, 3, 2, "", "mdata", "The main model calculation."]], "foxes.algorithms.iterative.models.FarmWakesCalculation.output_farm_vars": [[91, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.algorithms.iterative.models.URelax": [[94, 2, 1, "", "__init__", "Constructor."], [95, 2, 1, "", "calculate", "The main model calculation."], [96, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.iterative.models.URelax.__init__": [[94, 3, 2, "", "urel", "Constructor."]], "foxes.algorithms.iterative.models.URelax.calculate": [[95, 3, 2, "", "algo", "The main model calculation."], [95, 3, 2, "", "fdata", "The main model calculation."], [95, 3, 2, "", "mdata", "The main model calculation."]], "foxes.algorithms.iterative.models.URelax.output_farm_vars": [[96, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.algorithms.sequential": [[97, 0, 1, "", "SequentialPlugin", "Base class for plugins that are updated with each sequential iteration"]], "foxes.algorithms.sequential.SequentialPlugin": [[98, 2, 1, "", "__init__", "Constructor."], [99, 2, 1, "", "finalize", "Finalize data based on the final iterator"], [100, 2, 1, "", "initialize", "Initialize data based on the intial iterator"], [101, 2, 1, "", "update", "Updates data based on current iteration"]], "foxes.algorithms.sequential.SequentialPlugin.finalize": [[99, 3, 2, "", "algo", "Finalize data based on the final iterator"]], "foxes.algorithms.sequential.SequentialPlugin.initialize": [[100, 3, 2, "", "algo", "Initialize data based on the intial iterator"]], "foxes.algorithms.sequential.SequentialPlugin.update": [[101, 3, 2, "", "algo", "Updates data based on current iteration"], [101, 3, 2, "", "fres", "Updates data based on current iteration"], [101, 3, 2, "", "pres", "Updates data based on current iteration"]], "foxes.algorithms.sequential.models": [[102, 0, 1, "", "SeqState", "A single state during sequential iteration, just serving as a structural placeholder"]], "foxes.algorithms.sequential.models.SeqState": [[103, 2, 1, "", "__init__", "Constructor."], [104, 2, 1, "", "calculate", "The main model calculation."], [105, 4, 1, "", "counter", "The current index counter"], [106, 2, 1, "", "index", "The index list"], [107, 2, 1, "", "initialize", "Initializes the model."], [108, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [109, 2, 1, "", "size", "The total number of states."], [110, 2, 1, "", "sub_models", "List of all sub-models"], [111, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.algorithms.sequential.models.SeqState.__init__": [[103, 3, 2, "", "states", "Constructor."]], "foxes.algorithms.sequential.models.SeqState.calculate": [[104, 3, 2, "", "algo", "The main model calculation."], [104, 3, 2, "", "fdata", "The main model calculation."], [104, 3, 2, "", "mdata", "The main model calculation."], [104, 3, 2, "", "tdata", "The main model calculation."]], "foxes.algorithms.sequential.models.SeqState.initialize": [[107, 3, 2, "", "algo", "Initializes the model."], [107, 3, 2, "", "force", "Initializes the model."], [107, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.algorithms.sequential.models.SeqState.output_point_vars": [[108, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.algorithms.sequential.models.SeqState.weights": [[111, 3, 2, "", "algo", "The statistical weights of all states."]], "foxes.config": [[112, 0, 1, "", "Config", "Container for configurational data"], [120, 5, 1, "", "get_input_path", "Gets path object, respecting the configurations input directory"], [121, 5, 1, "", "get_output_path", "Gets path object, respecting the configurations output directory"], [122, 5, 1, "", "get_path", "Gets path object, respecting the base directory"]], "foxes.config.Config": [[113, 2, 1, "", "__init__", "Constructor"], [114, 4, 1, "", "dtype_double", "The default double data type"], [115, 4, 1, "", "dtype_int", "The default int data type"], [116, 4, 1, "", "input_dir", "The input base directory"], [117, 4, 1, "", "nc_engine", "The NetCDF engine"], [118, 4, 1, "", "output_dir", "The default output directory"], [119, 4, 1, "", "work_dir", "The foxes working directory"]], "foxes.config.get_input_path": [[120, 3, 2, "", "pth", "Gets path object, respecting the configurations input directory"]], "foxes.config.get_output_path": [[121, 3, 2, "", "pth", "Gets path object, respecting the configurations output directory"]], "foxes.config.get_path": [[122, 3, 2, "", "base", "Gets path object, respecting the base directory"], [122, 3, 2, "", "pth", "Gets path object, respecting the base directory"]], "foxes.constants": [[123, 6, 1, "", "AMB_ROTOR_RES", "Identifier for ambient rotor point results"], [124, 6, 1, "", "BLOCK_CONVERGENCE", "Identifier for convergence blocking signal"], [125, 6, 1, "", "DTYPE", "Identifier for default double data type"], [126, 6, 1, "", "FARM", "Wind farm identifier"], [127, 6, 1, "", "GW", "The unit gigawatt"], [128, 6, 1, "", "INPUT_DIR", "Identifier for the input base directory"], [129, 6, 1, "", "ITYPE", "Identifier for default integer data type"], [130, 6, 1, "", "KAPPA", "The Von Karman constant"], [131, 6, 1, "", "MW", "The unit megawatt"], [132, 6, 1, "", "NC_ENGINE", "Identifier for the NetCDF engine"], [133, 6, 1, "", "OUTPUT_DIR", "Identifier for the default output directory"], [134, 6, 1, "", "POINT", "Point identifier"], [135, 6, 1, "", "POINTS", "Points identifier"], [136, 6, 1, "", "POP", "Population identifier"], [137, 6, 1, "", "P_UNITS", "Power unit factors relative to watts, key: unit str, value: factor"], [138, 6, 1, "", "ROTOR_POINTS", "Identifier for rotor points"], [139, 6, 1, "", "ROTOR_WEIGHTS", "Identifier for rotor point weights"], [140, 6, 1, "", "STATE", "States identifier"], [141, 6, 1, "", "STATES_SEL", "Identifier for states selection"], [142, 6, 1, "", "STATE_SOURCE_ORDERI", "Identifier for order index of wake causing turbines"], [143, 6, 1, "", "STATE_TARGET", "Identifier for state-target dimensions"], [144, 6, 1, "", "STATE_TARGET_TPOINT", "Identifier for state-target-tpoints dimensions"], [145, 6, 1, "", "STATE_TURBINE", "Identifier for state-turbine dimensions"], [146, 6, 1, "", "TARGET", "Target identifier"], [147, 6, 1, "", "TARGETS", "Targets identifier"], [148, 6, 1, "", "TIME", "Time identifier"], [149, 6, 1, "", "TMODELS", "Turbine models identifier"], [150, 6, 1, "", "TMODEL_SELS", "Selected turbine models identifier"], [151, 6, 1, "", "TNAME", "Wind turbine name identifier"], [152, 6, 1, "", "TPOINT", "Target point identifier"], [153, 6, 1, "", "TPOINTS", "Points per target identifier"], [154, 6, 1, "", "TURBINE", "Wind turbine identifier"], [155, 6, 1, "", "TW", "The unit terawatt"], [156, 6, 1, "", "TWEIGHTS", "Target point weights identifier"], [157, 6, 1, "", "VALID", "Validity identifier"], [158, 6, 1, "", "VARS", "Variables identifier"], [159, 6, 1, "", "W", "The unit watt"], [160, 6, 1, "", "WORK_DIR", "Identifier for the working directory"], [161, 6, 1, "", "XYH", "The vector (x, y, height)"], [162, 6, 1, "", "kW", "The unit kilowatt"]], "foxes.core": [[163, 0, 1, "", "Algorithm", "Abstract base class for algorithms."], [192, 0, 1, "", "AxialInductionModel", "Abstract base class for axial induction models"], [195, 0, 1, "", "Data", "Container for numpy array data and the associated meta data."], [203, 0, 1, "", "DataCalcModel", "Abstract base class for models that run calculation on xarray Dataset data."], [206, 0, 1, "", "Engine", "Abstract base clas for foxes calculation engines"], [222, 0, 1, "", "ExtendedStates", "States extended by point data models."], [231, 0, 1, "", "FData", "Container for foxes farm data."], [234, 0, 1, "", "FarmController", "Analyses selected turbine models and handles their call."], [248, 0, 1, "", "FarmDataModel", "Abstract base class for models that modify farm data."], [255, 0, 1, "", "FarmDataModelList", "A list of farm data models."], [263, 0, 1, "", "FarmModel", "A FarmDataModel that operates on the farm level (in contrast to a TurbineModel, which allows application to a subset of turbines)."], [264, 0, 1, "", "GroundModel", "Base class for ground models."], [272, 0, 1, "", "MData", "Container for foxes model data."], [274, 0, 1, "", "Model", "Base class for all models."], [288, 0, 1, "", "PartialWakesModel", "Abstract base class for partial wakes models."], [295, 0, 1, "", "PointDataModel", "Abstract base class for models that modify point based data."], [301, 0, 1, "", "PointDataModelList", "A list of point data models."], [309, 0, 1, "", "RotorModel", "Abstract base class of rotor models."], [319, 0, 1, "", "States", "Abstract base class for states."], [327, 0, 1, "", "TData", "Container for foxes target data."], [336, 0, 1, "", "Turbine", "An individual wind turbine."], [340, 0, 1, "", "TurbineInductionModel", "Abstract base class for turbine induction models."], [343, 0, 1, "", "TurbineModel", "Abstract base class for turbine models."], [346, 0, 1, "", "TurbineType", "Abstract base class for turbine type models."], [353, 0, 1, "", "VerticalProfile", "Abstract base class for vertical profiles."], [357, 0, 1, "", "WakeFrame", "Abstract base class for wake frames."], [365, 0, 1, "", "WakeK", "Handler for the wake growth parameter k"], [372, 0, 1, "", "WakeModel", "Abstract base class for wake models."], [378, 0, 1, "", "WakeSuperposition", "Abstract base class for wake superposition models."], [382, 0, 1, "", "WindFarm", "The wind farm."], [391, 5, 1, "", "get_engine", "Gets the global calculation engine"], [392, 5, 1, "", "has_engine", "Flag that checks if engine has been set"], [393, 5, 1, "", "reset_engine", "Resets the global calculation engine"]], "foxes.core.Algorithm": [[164, 2, 1, "", "__init__", "Constructor."], [165, 2, 1, "", "add_to_chunk_store", "Add data to the chunk store"], [166, 2, 1, "", "block_convergence", "Switch on convergence block during iterative run"], [167, 2, 1, "", "calc_farm", "Calculate farm data."], [168, 2, 1, "", "calc_points", "Calculate points data."], [169, 4, 1, "", "chunk_store", "The current chunk store"], [170, 4, 1, "", "dbook", "The data book"], [171, 2, 1, "", "del_model_data", "Remove stored model data"], [172, 2, 1, "", "eval_conv_block", "Evaluate convergence block, removing blocks on the fly"], [173, 4, 1, "", "farm", "The wind farm"], [174, 2, 1, "", "finalize", "Finalizes the algorithm."], [175, 2, 1, "", "find_chunk_in_store", "Finds indices in chunk store"], [176, 2, 1, "", "get_from_chunk_store", "Get data to the chunk store"], [177, 2, 1, "", "get_model_data", "Gets model data from memory"], [178, 2, 1, "", "get_models_data", "Creates xarray from model input data."], [179, 2, 1, "", "get_models_idata", "Returns idata object of models"], [180, 4, 1, "", "idata_mem", "The current idata memory"], [181, 2, 1, "", "initialize", "Initializes the algorithm."], [182, 4, 1, "", "mbook", "The model book"], [183, 2, 1, "", "new", "Run-time algorithm factory."], [184, 2, 1, "", "new_point_data", "Creates a point data xarray object, containing only points."], [185, 2, 1, "", "print", "Print function, based on verbosity."], [186, 2, 1, "", "print_deco", "Helper function for printing model names"], [187, 2, 1, "", "reset_chunk_store", "Resets the chunk store"], [188, 2, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [189, 2, 1, "", "store_model_data", "Store model data"], [190, 2, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"], [191, 2, 1, "", "update_n_turbines", "Reset the number of turbines, according to self.farm"]], "foxes.core.Algorithm.__init__": [[164, 3, 2, "", "dbook", "Constructor."], [164, 3, 2, "", "engine_pars", "Constructor."], [164, 3, 2, "", "farm", "Constructor."], [164, 3, 2, "", "mbook", "Constructor."], [164, 3, 2, "", "verbosity", "Constructor."]], "foxes.core.Algorithm.add_to_chunk_store": [[165, 3, 2, "", "copy", "Add data to the chunk store"], [165, 3, 2, "", "data", "Add data to the chunk store"], [165, 3, 2, "", "mdata", "Add data to the chunk store"], [165, 3, 2, "", "name", "Add data to the chunk store"], [165, 3, 2, "", "tdata", "Add data to the chunk store"]], "foxes.core.Algorithm.block_convergence": [[166, 3, 2, "", "kwargs", "Switch on convergence block during iterative run"]], "foxes.core.Algorithm.calc_farm": [[167, 3, 2, "", "args", "Calculate farm data."], [167, 3, 2, "", "kwargs", "Calculate farm data."]], "foxes.core.Algorithm.calc_points": [[168, 3, 2, "", "args", "Calculate points data."], [168, 3, 2, "", "isel", "Calculate points data."], [168, 3, 2, "", "kwargs", "Calculate points data."], [168, 3, 2, "", "sel", "Calculate points data."]], "foxes.core.Algorithm.del_model_data": [[171, 3, 2, "", "model", "Remove stored model data"]], "foxes.core.Algorithm.finalize": [[174, 3, 2, "", "clear_mem", "Finalizes the algorithm."]], "foxes.core.Algorithm.find_chunk_in_store": [[175, 3, 2, "", "error", "Finds indices in chunk store"], [175, 3, 2, "", "mdata", "Finds indices in chunk store"], [175, 3, 2, "", "prev_s", "Finds indices in chunk store"], [175, 3, 2, "", "prev_t", "Finds indices in chunk store"], [175, 3, 2, "", "tdata", "Finds indices in chunk store"]], "foxes.core.Algorithm.get_from_chunk_store": [[176, 3, 2, "", "error", "Get data to the chunk store"], [176, 3, 2, "", "mdata", "Get data to the chunk store"], [176, 3, 2, "", "name", "Get data to the chunk store"], [176, 3, 2, "", "prev_s", "Get data to the chunk store"], [176, 3, 2, "", "prev_t", "Get data to the chunk store"], [176, 3, 2, "", "ret_inds", "Get data to the chunk store"], [176, 3, 2, "", "tdata", "Get data to the chunk store"]], "foxes.core.Algorithm.get_model_data": [[177, 3, 2, "", "model", "Gets model data from memory"]], "foxes.core.Algorithm.get_models_data": [[178, 3, 2, "", "idata", "Creates xarray from model input data."], [178, 3, 2, "", "isel", "Creates xarray from model input data."], [178, 3, 2, "", "sel", "Creates xarray from model input data."]], "foxes.core.Algorithm.new": [[183, 3, 2, "", "algo_type", "Run-time algorithm factory."], [183, 3, 2, "", "args", "Run-time algorithm factory."], [183, 3, 2, "", "kwargs", "Run-time algorithm factory."]], "foxes.core.Algorithm.new_point_data": [[184, 3, 2, "", "n_states", "Creates a point data xarray object, containing only points."], [184, 3, 2, "", "points", "Creates a point data xarray object, containing only points."], [184, 3, 2, "", "states_indices", "Creates a point data xarray object, containing only points."]], "foxes.core.Algorithm.print": [[185, 3, 2, "", "args", "Print function, based on verbosity."], [185, 3, 2, "", "kwargs", "Print function, based on verbosity."], [185, 3, 2, "", "vlim", "Print function, based on verbosity."]], "foxes.core.Algorithm.print_deco": [[186, 3, 2, "", "func_name", "Helper function for printing model names"], [186, 3, 2, "", "n_points", "Helper function for printing model names"]], "foxes.core.Algorithm.reset_chunk_store": [[187, 3, 2, "", "new_chunk_store", "Resets the chunk store"]], "foxes.core.Algorithm.set_running": [[188, 3, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [188, 3, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [188, 3, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [188, 3, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [188, 3, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes.core.Algorithm.store_model_data": [[189, 3, 2, "", "force", "Store model data"], [189, 3, 2, "", "idata", "Store model data"], [189, 3, 2, "", "model", "Store model data"]], "foxes.core.Algorithm.unset_running": [[190, 3, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [190, 3, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [190, 3, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [190, 3, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [190, 3, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes.core.AxialInductionModel": [[193, 2, 1, "", "ct2a", "Computes induction from ct"], [194, 2, 1, "", "new", "Run-time axial induction model factory."]], "foxes.core.AxialInductionModel.ct2a": [[193, 3, 2, "", "ct", "Computes induction from ct"]], "foxes.core.AxialInductionModel.new": [[194, 3, 2, "", "args", "Run-time axial induction model factory."], [194, 3, 2, "", "induction_type", "Run-time axial induction model factory."], [194, 3, 2, "", "kwargs", "Run-time axial induction model factory."]], "foxes.core.Data": [[196, 2, 1, "", "__init__", "Constructor."], [197, 2, 1, "", "add", "Add data entry"], [198, 2, 1, "", "from_dataset", "Create Data object from a dataset"], [199, 2, 1, "", "get_slice", "Get a slice of data."], [200, 4, 1, "", "n_states", "The number of states"], [201, 4, 1, "", "n_turbines", "The number of turbines"], [202, 2, 1, "", "states_i0", "Get the state counter for first state in chunk"]], "foxes.core.Data.__init__": [[196, 3, 2, "", "data", "Constructor."], [196, 3, 2, "", "dims", "Constructor."], [196, 3, 2, "", "loop_dims", "Constructor."], [196, 3, 2, "", "name", "Constructor."], [196, 3, 2, "", "states_i0", "Constructor."]], "foxes.core.Data.add": [[197, 3, 2, "", "data", "Add data entry"], [197, 3, 2, "", "dims", "Add data entry"], [197, 3, 2, "", "name", "Add data entry"]], "foxes.core.Data.from_dataset": [[198, 3, 2, "", "args", "Create Data object from a dataset"], [198, 3, 2, "", "callback", "Create Data object from a dataset"], [198, 3, 2, "", "copy", "Create Data object from a dataset"], [198, 3, 2, "", "ds", "Create Data object from a dataset"], [198, 3, 2, "", "kwargs", "Create Data object from a dataset"], [198, 3, 2, "", "s_states", "Create Data object from a dataset"]], "foxes.core.Data.get_slice": [[199, 3, 2, "", "dim_map", "Get a slice of data."], [199, 3, 2, "", "name", "Get a slice of data."], [199, 3, 2, "", "s", "Get a slice of data."], [199, 3, 2, "", "variables", "Get a slice of data."]], "foxes.core.Data.states_i0": [[202, 3, 2, "", "counter", "Get the state counter for first state in chunk"]], "foxes.core.DataCalcModel": [[204, 2, 1, "", "calculate", "The main model calculation."], [205, 2, 1, "", "output_coords", "Gets the coordinates of all output arrays"]], "foxes.core.DataCalcModel.calculate": [[204, 3, 2, "", "algo", "The main model calculation."], [204, 3, 2, "", "data", "The main model calculation."], [204, 3, 2, "", "parameters", "The main model calculation."]], "foxes.core.Engine": [[207, 2, 1, "", "__init__", "Constructor."], [208, 2, 1, "", "__repr__", "Return repr(self)."], [209, 2, 1, "", "calc_chunk_sizes", "Computes the sizes of states and points chunks"], [210, 2, 1, "", "combine_results", "Combines chunk results into final Dataset"], [211, 4, 1, "", "entered", "Flag that this model has been entered."], [212, 2, 1, "", "finalize", "Finalizes the engine."], [213, 2, 1, "", "get_chunk_input_data", "Extracts the data for a single chunk calculation"], [214, 2, 1, "", "initialize", "Initializes the engine."], [215, 4, 1, "", "initialized", "Initialization flag."], [216, 4, 1, "", "loop_dims", "Gets the loop dimensions (possibly chunked)"], [217, 2, 1, "", "map", "Runs a function on a list of files"], [218, 2, 1, "", "new", "Run-time engine factory."], [219, 2, 1, "", "print", "Prints based on verbosity"], [220, 2, 1, "", "run_calculation", "Runs the model calculation"], [221, 2, 1, "", "select_subsets", "Takes subsets of datasets"]], "foxes.core.Engine.__init__": [[207, 3, 2, "", "chunk_size_points", "Constructor."], [207, 3, 2, "", "chunk_size_states", "Constructor."], [207, 3, 2, "", "n_procs", "Constructor."], [207, 3, 2, "", "verbosity", "Constructor."]], "foxes.core.Engine.calc_chunk_sizes": [[209, 3, 2, "", "n_states", "Computes the sizes of states and points chunks"], [209, 3, 2, "", "n_targets", "Computes the sizes of states and points chunks"]], "foxes.core.Engine.combine_results": [[210, 3, 2, "", "algo", "Combines chunk results into final Dataset"], [210, 3, 2, "", "goal_data", "Combines chunk results into final Dataset"], [210, 3, 2, "", "iterative", "Combines chunk results into final Dataset"], [210, 3, 2, "", "model_data", "Combines chunk results into final Dataset"], [210, 3, 2, "", "n_chunks_states", "Combines chunk results into final Dataset"], [210, 3, 2, "", "n_chunks_targets", "Combines chunk results into final Dataset"], [210, 3, 2, "", "out_coords", "Combines chunk results into final Dataset"], [210, 3, 2, "", "out_vars", "Combines chunk results into final Dataset"], [210, 3, 2, "", "results", "Combines chunk results into final Dataset"]], "foxes.core.Engine.finalize": [[212, 3, 2, "", "traceback", "Finalizes the engine."], [212, 3, 2, "", "type", "Finalizes the engine."], [212, 3, 2, "", "value", "Finalizes the engine."]], "foxes.core.Engine.get_chunk_input_data": [[213, 3, 2, "", "algo", "Extracts the data for a single chunk calculation"], [213, 3, 2, "", "farm_data", "Extracts the data for a single chunk calculation"], [213, 3, 2, "", "model_data", "Extracts the data for a single chunk calculation"], [213, 3, 2, "", "out_vars", "Extracts the data for a single chunk calculation"], [213, 3, 2, "", "point_data", "Extracts the data for a single chunk calculation"], [213, 3, 2, "", "states_i0_i1", "Extracts the data for a single chunk calculation"], [213, 3, 2, "", "targets_i0_i1", "Extracts the data for a single chunk calculation"]], "foxes.core.Engine.map": [[217, 3, 2, "", "args", "Runs a function on a list of files"], [217, 3, 2, "", "func", "Runs a function on a list of files"], [217, 3, 2, "", "inputs", "Runs a function on a list of files"], [217, 3, 2, "", "kwargs", "Runs a function on a list of files"]], "foxes.core.Engine.new": [[218, 3, 2, "", "args", "Run-time engine factory."], [218, 3, 2, "", "engine_type", "Run-time engine factory."], [218, 3, 2, "", "kwargs", "Run-time engine factory."]], "foxes.core.Engine.print": [[219, 3, 2, "", "args", "Prints based on verbosity"], [219, 3, 2, "", "kwargs", "Prints based on verbosity"], [219, 3, 2, "", "level", "Prints based on verbosity"]], "foxes.core.Engine.run_calculation": [[220, 3, 2, "", "algo", "Runs the model calculation"], [220, 3, 2, "", "farm_data", "Runs the model calculation"], [220, 3, 2, "", "model", "Runs the model calculation"], [220, 3, 2, "", "model_data", "Runs the model calculation"], [220, 3, 2, "", "point_data", "Runs the model calculation"]], "foxes.core.Engine.select_subsets": [[221, 3, 2, "", "datasets", "Takes subsets of datasets"], [221, 3, 2, "", "isel", "Takes subsets of datasets"], [221, 3, 2, "", "sel", "Takes subsets of datasets"]], "foxes.core.ExtendedStates": [[223, 2, 1, "", "__init__", "Constructor."], [224, 2, 1, "", "append", "Add a model to the list"], [225, 2, 1, "", "calculate", "The main model calculation."], [226, 2, 1, "", "index", "The index list"], [227, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [228, 2, 1, "", "size", "The total number of states."], [229, 2, 1, "", "sub_models", "List of all sub-models"], [230, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.ExtendedStates.__init__": [[223, 3, 2, "", "point_models", "Constructor."], [223, 3, 2, "", "states", "Constructor."]], "foxes.core.ExtendedStates.append": [[224, 3, 2, "", "model", "Add a model to the list"]], "foxes.core.ExtendedStates.calculate": [[225, 3, 2, "", "algo", "The main model calculation."], [225, 3, 2, "", "fdata", "The main model calculation."], [225, 3, 2, "", "mdata", "The main model calculation."], [225, 3, 2, "", "tdata", "The main model calculation."]], "foxes.core.ExtendedStates.output_point_vars": [[227, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.core.ExtendedStates.weights": [[230, 3, 2, "", "algo", "The statistical weights of all states."]], "foxes.core.FData": [[232, 2, 1, "", "__init__", "Constructor"], [233, 2, 1, "", "from_dataset", "Create Data object from a dataset"]], "foxes.core.FData.__init__": [[232, 3, 2, "", "args", "Constructor"], [232, 3, 2, "", "kwargs", "Constructor"], [232, 3, 2, "", "name", "Constructor"]], "foxes.core.FData.from_dataset": [[233, 3, 2, "", "args", "Create Data object from a dataset"], [233, 3, 2, "", "callback", "Create Data object from a dataset"], [233, 3, 2, "", "ds", "Create Data object from a dataset"], [233, 3, 2, "", "kwargs", "Create Data object from a dataset"], [233, 3, 2, "", "mdata", "Create Data object from a dataset"]], "foxes.core.FarmController": [[235, 2, 1, "", "__init__", "Constructor."], [236, 2, 1, "", "calculate", "The main model calculation."], [237, 2, 1, "", "collect_models", "Analyze and gather turbine models, based on the turbines of the wind farm."], [238, 2, 1, "", "finalize", "Finalizes the model."], [239, 2, 1, "", "find_turbine_types", "Collects the turbine types."], [240, 2, 1, "", "initialize", "Initializes the model."], [241, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [242, 2, 1, "", "needs_rews2", "Returns flag for requiring REWS2 variable"], [243, 2, 1, "", "needs_rews3", "Returns flag for requiring REWS3 variable"], [244, 2, 1, "", "new", "Run-time farm controller factory."], [245, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [246, 2, 1, "", "set_pars", "Set parameters for a turbine model"], [247, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.core.FarmController.__init__": [[235, 3, 2, "", "pars", "Constructor."]], "foxes.core.FarmController.calculate": [[236, 3, 2, "", "algo", "The main model calculation."], [236, 3, 2, "", "downwind_index", "The main model calculation."], [236, 3, 2, "", "fdata", "The main model calculation."], [236, 3, 2, "", "mdata", "The main model calculation."], [236, 3, 2, "", "pre_rotor", "The main model calculation."]], "foxes.core.FarmController.collect_models": [[237, 3, 2, "", "algo", "Analyze and gather turbine models, based on the turbines of the wind farm."]], "foxes.core.FarmController.finalize": [[238, 3, 2, "", "algo", "Finalizes the model."], [238, 3, 2, "", "verbosity", "Finalizes the model."]], "foxes.core.FarmController.find_turbine_types": [[239, 3, 2, "", "algo", "Collects the turbine types."]], "foxes.core.FarmController.initialize": [[240, 3, 2, "", "algo", "Initializes the model."], [240, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.core.FarmController.load_data": [[241, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [241, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.core.FarmController.new": [[244, 3, 2, "", "args", "Run-time farm controller factory."], [244, 3, 2, "", "controller_type", "Run-time farm controller factory."], [244, 3, 2, "", "kwargs", "Run-time farm controller factory."]], "foxes.core.FarmController.output_farm_vars": [[245, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.core.FarmController.set_pars": [[246, 3, 2, "", "calc_pars", "Set parameters for a turbine model"], [246, 3, 2, "", "final_pars", "Set parameters for a turbine model"], [246, 3, 2, "", "init_pars", "Set parameters for a turbine model"], [246, 3, 2, "", "model_name", "Set parameters for a turbine model"]], "foxes.core.FarmDataModel": [[249, 2, 1, "", "__init__", "Constructor."], [250, 2, 1, "", "calculate", "The main model calculation."], [251, 2, 1, "", "ensure_variables", "Add variables to fdata, initialized with NaN"], [252, 2, 1, "", "output_coords", "Gets the coordinates of all output arrays"], [253, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [254, 2, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.FarmDataModel.__init__": [[249, 3, 2, "", "pre_rotor", "Constructor."]], "foxes.core.FarmDataModel.calculate": [[250, 3, 2, "", "algo", "The main model calculation."], [250, 3, 2, "", "fdata", "The main model calculation."], [250, 3, 2, "", "mdata", "The main model calculation."]], "foxes.core.FarmDataModel.ensure_variables": [[251, 3, 2, "", "algo", "Add variables to fdata, initialized with NaN"], [251, 3, 2, "", "fdata", "Add variables to fdata, initialized with NaN"], [251, 3, 2, "", "mdata", "Add variables to fdata, initialized with NaN"]], "foxes.core.FarmDataModel.output_farm_vars": [[253, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.core.FarmDataModel.run_calculation": [[254, 3, 2, "", "algo", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [254, 3, 2, "", "calc_pars", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [254, 3, 2, "", "data", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [254, 3, 2, "", "out_vars", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.FarmDataModelList": [[256, 2, 1, "", "__init__", "Constructor."], [257, 2, 1, "", "__repr__", "Return repr(self)."], [258, 2, 1, "", "append", "Add a model to the list"], [259, 2, 1, "", "calculate", "The main model calculation."], [260, 2, 1, "", "insert", "Insert a model into the list"], [261, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [262, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.core.FarmDataModelList.__init__": [[256, 3, 2, "", "models", "Constructor."]], "foxes.core.FarmDataModelList.append": [[258, 3, 2, "", "model", "Add a model to the list"]], "foxes.core.FarmDataModelList.calculate": [[259, 3, 2, "", "algo", "The main model calculation."], [259, 3, 2, "", "fdata", "The main model calculation."], [259, 3, 2, "", "mdata", "The main model calculation."], [259, 3, 2, "", "parameters", "The main model calculation."]], "foxes.core.FarmDataModelList.insert": [[260, 3, 2, "", "index", "Insert a model into the list"], [260, 3, 2, "", "model", "Insert a model into the list"]], "foxes.core.FarmDataModelList.output_farm_vars": [[261, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.core.GroundModel": [[265, 2, 1, "", "contribute_to_farm_wakes", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [266, 2, 1, "", "contribute_to_point_wakes", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [267, 2, 1, "", "finalize_farm_wakes", "Updates the wake_deltas at the selected target downwind index."], [268, 2, 1, "", "finalize_point_wakes", "Finalize the wake calculation."], [269, 2, 1, "", "new", "Run-time ground model factory."], [270, 2, 1, "", "new_farm_wake_deltas", "Creates new initial wake deltas, filled with zeros."], [271, 2, 1, "", "new_point_wake_deltas", "Creates new empty wake delta arrays."]], "foxes.core.GroundModel.contribute_to_farm_wakes": [[265, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [265, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [265, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [265, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [265, 3, 2, "", "pwake", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [265, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [265, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [265, 3, 2, "", "wmodel", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.core.GroundModel.contribute_to_point_wakes": [[266, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [266, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [266, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [266, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [266, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [266, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [266, 3, 2, "", "wmodel", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.core.GroundModel.finalize_farm_wakes": [[267, 3, 2, "", "algo", "Updates the wake_deltas at the selected target downwind index."], [267, 3, 2, "", "amb_res", "Updates the wake_deltas at the selected target downwind index."], [267, 3, 2, "", "downwind_index", "Updates the wake_deltas at the selected target downwind index."], [267, 3, 2, "", "fdata", "Updates the wake_deltas at the selected target downwind index."], [267, 3, 2, "", "mdata", "Updates the wake_deltas at the selected target downwind index."], [267, 3, 2, "", "pwake", "Updates the wake_deltas at the selected target downwind index."], [267, 3, 2, "", "rpoint_weights", "Updates the wake_deltas at the selected target downwind index."], [267, 3, 2, "", "tdata", "Updates the wake_deltas at the selected target downwind index."], [267, 3, 2, "", "wake_deltas", "Updates the wake_deltas at the selected target downwind index."], [267, 3, 2, "", "wmodel", "Updates the wake_deltas at the selected target downwind index."]], "foxes.core.GroundModel.finalize_point_wakes": [[268, 3, 2, "", "algo", "Finalize the wake calculation."], [268, 3, 2, "", "amb_results", "Finalize the wake calculation."], [268, 3, 2, "", "fdata", "Finalize the wake calculation."], [268, 3, 2, "", "mdata", "Finalize the wake calculation."], [268, 3, 2, "", "wake_deltas", "Finalize the wake calculation."], [268, 3, 2, "", "wmodel", "Finalize the wake calculation."]], "foxes.core.GroundModel.new": [[269, 3, 2, "", "args", "Run-time ground model factory."], [269, 3, 2, "", "ground_type", "Run-time ground model factory."], [269, 3, 2, "", "kwargs", "Run-time ground model factory."]], "foxes.core.GroundModel.new_farm_wake_deltas": [[270, 3, 2, "", "algo", "Creates new initial wake deltas, filled with zeros."], [270, 3, 2, "", "fdata", "Creates new initial wake deltas, filled with zeros."], [270, 3, 2, "", "mdata", "Creates new initial wake deltas, filled with zeros."], [270, 3, 2, "", "pwake", "Creates new initial wake deltas, filled with zeros."], [270, 3, 2, "", "tdata", "Creates new initial wake deltas, filled with zeros."], [270, 3, 2, "", "wmodel", "Creates new initial wake deltas, filled with zeros."]], "foxes.core.GroundModel.new_point_wake_deltas": [[271, 3, 2, "", "algo", "Creates new empty wake delta arrays."], [271, 3, 2, "", "fdata", "Creates new empty wake delta arrays."], [271, 3, 2, "", "mdata", "Creates new empty wake delta arrays."], [271, 3, 2, "", "tdata", "Creates new empty wake delta arrays."], [271, 3, 2, "", "wmodel", "Creates new empty wake delta arrays."]], "foxes.core.MData": [[273, 2, 1, "", "__init__", "Constructor"]], "foxes.core.MData.__init__": [[273, 3, 2, "", "args", "Constructor"], [273, 3, 2, "", "kwargs", "Constructor"], [273, 3, 2, "", "name", "Constructor"]], "foxes.core.Model": [[275, 2, 1, "", "__init__", "Constructor."], [276, 2, 1, "", "__repr__", "Return repr(self)."], [277, 2, 1, "", "finalize", "Finalizes the model."], [278, 2, 1, "", "get_data", "Getter for a data entry in the model object or provided data sources"], [279, 2, 1, "", "initialize", "Initializes the model."], [280, 4, 1, "", "initialized", "Initialization flag."], [281, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [282, 4, 1, "", "model_id", "Unique id based on the model type."], [283, 4, 1, "", "running", "Flag for currently running models"], [284, 2, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [285, 2, 1, "", "sub_models", "List of all sub-models"], [286, 2, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"], [287, 2, 1, "", "var", "Creates a model specific variable name."]], "foxes.core.Model.finalize": [[277, 3, 2, "", "algo", "Finalizes the model."], [277, 3, 2, "", "verbosity", "Finalizes the model."]], "foxes.core.Model.get_data": [[278, 3, 2, "", "accept_nan", "Getter for a data entry in the model object or provided data sources"], [278, 3, 2, "", "accept_none", "Getter for a data entry in the model object or provided data sources"], [278, 3, 2, "", "algo", "Getter for a data entry in the model object or provided data sources"], [278, 3, 2, "", "downwind_index", "Getter for a data entry in the model object or provided data sources"], [278, 3, 2, "", "fdata", "Getter for a data entry in the model object or provided data sources"], [278, 3, 2, "", "lookup", "Getter for a data entry in the model object or provided data sources"], [278, 3, 2, "", "mdata", "Getter for a data entry in the model object or provided data sources"], [278, 3, 2, "", "selection", "Getter for a data entry in the model object or provided data sources"], [278, 3, 2, "", "target", "Getter for a data entry in the model object or provided data sources"], [278, 3, 2, "", "tdata", "Getter for a data entry in the model object or provided data sources"], [278, 3, 2, "", "upcast", "Getter for a data entry in the model object or provided data sources"], [278, 3, 2, "", "variable", "Getter for a data entry in the model object or provided data sources"]], "foxes.core.Model.initialize": [[279, 3, 2, "", "algo", "Initializes the model."], [279, 3, 2, "", "force", "Initializes the model."], [279, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.core.Model.load_data": [[281, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [281, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.core.Model.set_running": [[284, 3, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [284, 3, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [284, 3, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [284, 3, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [284, 3, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes.core.Model.unset_running": [[286, 3, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [286, 3, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [286, 3, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [286, 3, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [286, 3, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes.core.Model.var": [[287, 3, 2, "", "v", "Creates a model specific variable name."]], "foxes.core.PartialWakesModel": [[289, 2, 1, "", "check_wmodel", "Checks the wake model type"], [290, 2, 1, "", "contribute", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [291, 2, 1, "", "finalize_wakes", "Updates the wake_deltas at the selected target downwind index."], [292, 2, 1, "", "get_wake_points", "Get the wake calculation points, and their weights."], [293, 2, 1, "", "new", "Run-time partial wakes model factory."], [294, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.core.PartialWakesModel.check_wmodel": [[289, 3, 2, "", "error", "Checks the wake model type"], [289, 3, 2, "", "wmodel", "Checks the wake model type"]], "foxes.core.PartialWakesModel.contribute": [[290, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [290, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [290, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [290, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [290, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [290, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [290, 3, 2, "", "wmodel", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.core.PartialWakesModel.finalize_wakes": [[291, 3, 2, "", "algo", "Updates the wake_deltas at the selected target downwind index."], [291, 3, 2, "", "amb_res", "Updates the wake_deltas at the selected target downwind index."], [291, 3, 2, "", "downwind_index", "Updates the wake_deltas at the selected target downwind index."], [291, 3, 2, "", "fdata", "Updates the wake_deltas at the selected target downwind index."], [291, 3, 2, "", "mdata", "Updates the wake_deltas at the selected target downwind index."], [291, 3, 2, "", "rpoint_weights", "Updates the wake_deltas at the selected target downwind index."], [291, 3, 2, "", "tdata", "Updates the wake_deltas at the selected target downwind index."], [291, 3, 2, "", "wake_deltas", "Updates the wake_deltas at the selected target downwind index."], [291, 3, 2, "", "wmodel", "Updates the wake_deltas at the selected target downwind index."]], "foxes.core.PartialWakesModel.get_wake_points": [[292, 3, 2, "", "algo", "Get the wake calculation points, and their weights."], [292, 3, 2, "", "fdata", "Get the wake calculation points, and their weights."], [292, 3, 2, "", "mdata", "Get the wake calculation points, and their weights."]], "foxes.core.PartialWakesModel.new": [[293, 3, 2, "", "args", "Run-time partial wakes model factory."], [293, 3, 2, "", "kwargs", "Run-time partial wakes model factory."], [293, 3, 2, "", "pwakes_type", "Run-time partial wakes model factory."]], "foxes.core.PartialWakesModel.new_wake_deltas": [[294, 3, 2, "", "algo", "Creates new initial wake deltas, filled with zeros."], [294, 3, 2, "", "fdata", "Creates new initial wake deltas, filled with zeros."], [294, 3, 2, "", "mdata", "Creates new initial wake deltas, filled with zeros."], [294, 3, 2, "", "tdata", "Creates new initial wake deltas, filled with zeros."], [294, 3, 2, "", "wmodel", "Creates new initial wake deltas, filled with zeros."]], "foxes.core.PointDataModel": [[296, 2, 1, "", "calculate", "The main model calculation."], [297, 2, 1, "", "ensure_variables", "Add variables to tdata, initialized with NaN"], [298, 2, 1, "", "output_coords", "Gets the coordinates of all output arrays"], [299, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [300, 2, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.PointDataModel.calculate": [[296, 3, 2, "", "algo", "The main model calculation."], [296, 3, 2, "", "fdata", "The main model calculation."], [296, 3, 2, "", "mdata", "The main model calculation."], [296, 3, 2, "", "tdata", "The main model calculation."]], "foxes.core.PointDataModel.ensure_variables": [[297, 3, 2, "", "algo", "Add variables to tdata, initialized with NaN"], [297, 3, 2, "", "fdata", "Add variables to tdata, initialized with NaN"], [297, 3, 2, "", "mdata", "Add variables to tdata, initialized with NaN"], [297, 3, 2, "", "tdata", "Add variables to tdata, initialized with NaN"]], "foxes.core.PointDataModel.output_point_vars": [[299, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.core.PointDataModel.run_calculation": [[300, 3, 2, "", "algo", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [300, 3, 2, "", "calc_pars", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [300, 3, 2, "", "data", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [300, 3, 2, "", "out_vars", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.PointDataModelList": [[302, 2, 1, "", "__init__", "Constructor."], [303, 2, 1, "", "__repr__", "Return repr(self)."], [304, 2, 1, "", "append", "Add a model to the list"], [305, 2, 1, "", "calculate", "The main model calculation."], [306, 2, 1, "", "new", "Run-time point model factory."], [307, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [308, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.core.PointDataModelList.__init__": [[302, 3, 2, "", "models", "Constructor."]], "foxes.core.PointDataModelList.append": [[304, 3, 2, "", "model", "Add a model to the list"]], "foxes.core.PointDataModelList.calculate": [[305, 3, 2, "", "algo", "The main model calculation."], [305, 3, 2, "", "fdata", "The main model calculation."], [305, 3, 2, "", "mdata", "The main model calculation."], [305, 3, 2, "", "parameters", "The main model calculation."], [305, 3, 2, "", "tdata", "The main model calculation."]], "foxes.core.PointDataModelList.new": [[306, 3, 2, "", "args", "Run-time point model factory."], [306, 3, 2, "", "kwargs", "Run-time point model factory."], [306, 3, 2, "", "model_type", "Run-time point model factory."]], "foxes.core.PointDataModelList.output_point_vars": [[307, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.core.RotorModel": [[310, 2, 1, "", "__init__", "Constructor."], [311, 2, 1, "", "calculate", "Calculate ambient rotor effective results."], [312, 2, 1, "", "design_points", "The rotor model design points."], [313, 2, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [314, 2, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [315, 2, 1, "", "n_rotor_points", "The number of rotor points"], [316, 2, 1, "", "new", "Run-time rotor model factory."], [317, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [318, 2, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.core.RotorModel.__init__": [[310, 3, 2, "", "calc_vars", "Constructor."]], "foxes.core.RotorModel.calculate": [[311, 3, 2, "", "algo", "Calculate ambient rotor effective results."], [311, 3, 2, "", "downwind_index", "Calculate ambient rotor effective results."], [311, 3, 2, "", "fdata", "Calculate ambient rotor effective results."], [311, 3, 2, "", "mdata", "Calculate ambient rotor effective results."], [311, 3, 2, "", "rpoints", "Calculate ambient rotor effective results."], [311, 3, 2, "", "store_amb_res", "Calculate ambient rotor effective results."], [311, 3, 2, "", "store_rpoints", "Calculate ambient rotor effective results."], [311, 3, 2, "", "store_rweights", "Calculate ambient rotor effective results."], [311, 3, 2, "", "weights", "Calculate ambient rotor effective results."]], "foxes.core.RotorModel.eval_rpoint_results": [[313, 3, 2, "", "algo", "Evaluate rotor point results."], [313, 3, 2, "", "copy_to_ambient", "Evaluate rotor point results."], [313, 3, 2, "", "downwind_index", "Evaluate rotor point results."], [313, 3, 2, "", "fdata", "Evaluate rotor point results."], [313, 3, 2, "", "mdata", "Evaluate rotor point results."], [313, 3, 2, "", "tdata", "Evaluate rotor point results."], [313, 3, 2, "", "weights", "Evaluate rotor point results."]], "foxes.core.RotorModel.get_rotor_points": [[314, 3, 2, "", "algo", "Calculates rotor points from design points."], [314, 3, 2, "", "fdata", "Calculates rotor points from design points."], [314, 3, 2, "", "mdata", "Calculates rotor points from design points."]], "foxes.core.RotorModel.new": [[316, 3, 2, "", "args", "Run-time rotor model factory."], [316, 3, 2, "", "kwargs", "Run-time rotor model factory."], [316, 3, 2, "", "rmodel_type", "Run-time rotor model factory."]], "foxes.core.RotorModel.output_farm_vars": [[317, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.core.States": [[320, 2, 1, "", "index", "The index list"], [321, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [322, 2, 1, "", "new", "Run-time states factory."], [323, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [324, 2, 1, "", "reset", "Reset the states, optionally select states"], [325, 2, 1, "", "size", "The total number of states."], [326, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.States.load_data": [[321, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [321, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.core.States.new": [[322, 3, 2, "", "args", "Run-time states factory."], [322, 3, 2, "", "kwargs", "Run-time states factory."], [322, 3, 2, "", "states_type", "Run-time states factory."]], "foxes.core.States.output_point_vars": [[323, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.core.States.reset": [[324, 3, 2, "", "algo", "Reset the states, optionally select states"], [324, 3, 2, "", "states_loc", "Reset the states, optionally select states"], [324, 3, 2, "", "states_sel", "Reset the states, optionally select states"], [324, 3, 2, "", "verbosity", "Reset the states, optionally select states"]], "foxes.core.States.weights": [[326, 3, 2, "", "algo", "The statistical weights of all states."]], "foxes.core.TData": [[328, 2, 1, "", "__init__", "Constructor"], [329, 2, 1, "", "from_dataset", "Create Data object from a dataset"], [330, 2, 1, "", "from_points", "Create from points"], [331, 2, 1, "", "from_tpoints", "Create from points at targets"], [332, 4, 1, "", "n_targets", "The number of targets"], [333, 4, 1, "", "n_tpoints", "The number of points per target"], [334, 2, 1, "", "targets_i0", "Get the target counter for first target in chunk"], [335, 2, 1, "", "tpoint_mean", "Take the mean over target points"]], "foxes.core.TData.__init__": [[328, 3, 2, "", "args", "Constructor"], [328, 3, 2, "", "kwargs", "Constructor"], [328, 3, 2, "", "name", "Constructor"]], "foxes.core.TData.from_dataset": [[329, 3, 2, "", "args", "Create Data object from a dataset"], [329, 3, 2, "", "callback", "Create Data object from a dataset"], [329, 3, 2, "", "ds", "Create Data object from a dataset"], [329, 3, 2, "", "kwargs", "Create Data object from a dataset"], [329, 3, 2, "", "mdata", "Create Data object from a dataset"], [329, 3, 2, "", "s_targets", "Create Data object from a dataset"]], "foxes.core.TData.from_points": [[330, 3, 2, "", "data", "Create from points"], [330, 3, 2, "", "dims", "Create from points"], [330, 3, 2, "", "kwargs", "Create from points"], [330, 3, 2, "", "name", "Create from points"], [330, 3, 2, "", "points", "Create from points"]], "foxes.core.TData.from_tpoints": [[331, 3, 2, "", "data", "Create from points at targets"], [331, 3, 2, "", "dims", "Create from points at targets"], [331, 3, 2, "", "kwargs", "Create from points at targets"], [331, 3, 2, "", "name", "Create from points at targets"], [331, 3, 2, "", "tpoints", "Create from points at targets"], [331, 3, 2, "", "tweights", "Create from points at targets"]], "foxes.core.TData.tpoint_mean": [[335, 3, 2, "", "variable", "Take the mean over target points"]], "foxes.core.Turbine": [[337, 2, 1, "", "__init__", "Constructor."], [338, 2, 1, "", "add_model", "Add a turbine model to the list."], [339, 2, 1, "", "insert_model", "Insert a turbine model into the list of models."]], "foxes.core.Turbine.__init__": [[337, 3, 2, "", "D", "Constructor."], [337, 3, 2, "", "H", "Constructor."], [337, 3, 2, "", "index", "Constructor."], [337, 3, 2, "", "models_state_sel", "Constructor."], [337, 3, 2, "", "name", "Constructor."], [337, 3, 2, "", "turbine_models", "Constructor."], [337, 3, 2, "", "xy", "Constructor."]], "foxes.core.Turbine.add_model": [[338, 3, 2, "", "model", "Add a turbine model to the list."], [338, 3, 2, "", "states_sel", "Add a turbine model to the list."]], "foxes.core.Turbine.insert_model": [[339, 3, 2, "", "index", "Insert a turbine model into the list of models."], [339, 3, 2, "", "model", "Insert a turbine model into the list of models."], [339, 3, 2, "", "states_sel", "Insert a turbine model into the list of models."]], "foxes.core.TurbineInductionModel": [[341, 4, 1, "", "affects_downwind", "Flag for downwind or upwind effects on other turbines"], [342, 2, 1, "", "new", "Run-time turbine induction model factory."]], "foxes.core.TurbineInductionModel.new": [[342, 3, 2, "", "args", "Run-time turbine induction model factory."], [342, 3, 2, "", "induction_type", "Run-time turbine induction model factory."], [342, 3, 2, "", "kwargs", "Run-time turbine induction model factory."]], "foxes.core.TurbineModel": [[344, 2, 1, "", "calculate", "The main model calculation."], [345, 2, 1, "", "new", "Run-time turbine model factory."]], "foxes.core.TurbineModel.calculate": [[344, 3, 2, "", "algo", "The main model calculation."], [344, 3, 2, "", "fdata", "The main model calculation."], [344, 3, 2, "", "mdata", "The main model calculation."], [344, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.core.TurbineModel.new": [[345, 3, 2, "", "args", "Run-time turbine model factory."], [345, 3, 2, "", "kwargs", "Run-time turbine model factory."], [345, 3, 2, "", "tmodel_type", "Run-time turbine model factory."]], "foxes.core.TurbineType": [[347, 2, 1, "", "__init__", "Constructor."], [348, 2, 1, "", "__repr__", "Return repr(self)."], [349, 2, 1, "", "modify_cutin", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [350, 2, 1, "", "needs_rews2", "Returns flag for requiring REWS2 variable"], [351, 2, 1, "", "needs_rews3", "Returns flag for requiring REWS3 variable"], [352, 2, 1, "", "new", "Run-time turbine type factory."]], "foxes.core.TurbineType.__init__": [[347, 3, 2, "", "D", "Constructor."], [347, 3, 2, "", "H", "Constructor."], [347, 3, 2, "", "P_nominal", "Constructor."], [347, 3, 2, "", "P_unit", "Constructor."], [347, 3, 2, "", "name", "Constructor."]], "foxes.core.TurbineType.modify_cutin": [[349, 3, 2, "", "modify_P", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [349, 3, 2, "", "modify_ct", "Modify the data such that a discontinuity at cutin wind speed is avoided"]], "foxes.core.TurbineType.new": [[352, 3, 2, "", "args", "Run-time turbine type factory."], [352, 3, 2, "", "kwargs", "Run-time turbine type factory."], [352, 3, 2, "", "ttype_type", "Run-time turbine type factory."]], "foxes.core.VerticalProfile": [[354, 2, 1, "", "calculate", "Run the profile calculation."], [355, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."], [356, 2, 1, "", "new", "Run-time vertical profile factory."]], "foxes.core.VerticalProfile.calculate": [[354, 3, 2, "", "heights", "Run the profile calculation."], [354, 3, 2, "", "tdata", "Run the profile calculation."]], "foxes.core.VerticalProfile.new": [[356, 3, 2, "", "args", "Run-time vertical profile factory."], [356, 3, 2, "", "kwargs", "Run-time vertical profile factory."], [356, 3, 2, "", "profile_type", "Run-time vertical profile factory."]], "foxes.core.WakeFrame": [[358, 2, 1, "", "__init__", "Constructor."], [359, 2, 1, "", "calc_centreline_integral", "Integrates variables along the centreline."], [360, 2, 1, "", "calc_order", "Calculates the order of turbine evaluation."], [361, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [362, 2, 1, "", "get_wake_coos", "Calculate wake coordinates of rotor points."], [363, 2, 1, "", "get_wake_modelling_data", "Return data that is required for computing the wake from source turbines to evaluation points."], [364, 2, 1, "", "new", "Run-time wake frame factory."]], "foxes.core.WakeFrame.__init__": [[358, 3, 2, "", "max_length_km", "Constructor."]], "foxes.core.WakeFrame.calc_centreline_integral": [[359, 3, 2, "", "algo", "Integrates variables along the centreline."], [359, 3, 2, "", "downwind_index", "Integrates variables along the centreline."], [359, 3, 2, "", "dx", "Integrates variables along the centreline."], [359, 3, 2, "", "fdata", "Integrates variables along the centreline."], [359, 3, 2, "", "ipars", "Integrates variables along the centreline."], [359, 3, 2, "", "mdata", "Integrates variables along the centreline."], [359, 3, 2, "", "self_wake", "Integrates variables along the centreline."], [359, 3, 2, "", "variables", "Integrates variables along the centreline."], [359, 3, 2, "", "wake_models", "Integrates variables along the centreline."], [359, 3, 2, "", "x", "Integrates variables along the centreline."]], "foxes.core.WakeFrame.calc_order": [[360, 3, 2, "", "algo", "Calculates the order of turbine evaluation."], [360, 3, 2, "", "fdata", "Calculates the order of turbine evaluation."], [360, 3, 2, "", "mdata", "Calculates the order of turbine evaluation."]], "foxes.core.WakeFrame.get_centreline_points": [[361, 3, 2, "", "algo", "Gets the points along the centreline for given values of x."], [361, 3, 2, "", "downwind_index", "Gets the points along the centreline for given values of x."], [361, 3, 2, "", "fdata", "Gets the points along the centreline for given values of x."], [361, 3, 2, "", "mdata", "Gets the points along the centreline for given values of x."], [361, 3, 2, "", "x", "Gets the points along the centreline for given values of x."]], "foxes.core.WakeFrame.get_wake_coos": [[362, 3, 2, "", "algo", "Calculate wake coordinates of rotor points."], [362, 3, 2, "", "downwind_index", "Calculate wake coordinates of rotor points."], [362, 3, 2, "", "fdata", "Calculate wake coordinates of rotor points."], [362, 3, 2, "", "mdata", "Calculate wake coordinates of rotor points."], [362, 3, 2, "", "tdata", "Calculate wake coordinates of rotor points."]], "foxes.core.WakeFrame.get_wake_modelling_data": [[363, 3, 2, "", "algo", "Return data that is required for computing the wake from source turbines to evaluation points."], [363, 3, 2, "", "downwind_index", "Return data that is required for computing the wake from source turbines to evaluation points."], [363, 3, 2, "", "fdata", "Return data that is required for computing the wake from source turbines to evaluation points."], [363, 3, 2, "", "states0", "Return data that is required for computing the wake from source turbines to evaluation points."], [363, 3, 2, "", "target", "Return data that is required for computing the wake from source turbines to evaluation points."], [363, 3, 2, "", "tdata", "Return data that is required for computing the wake from source turbines to evaluation points."], [363, 3, 2, "", "variable", "Return data that is required for computing the wake from source turbines to evaluation points."]], "foxes.core.WakeFrame.new": [[364, 3, 2, "", "args", "Run-time wake frame factory."], [364, 3, 2, "", "kwargs", "Run-time wake frame factory."], [364, 3, 2, "", "wframe_type", "Run-time wake frame factory."]], "foxes.core.WakeK": [[366, 2, 1, "", "__call__", "Gets the k value"], [367, 2, 1, "", "__init__", "Constructor."], [368, 4, 1, "", "all_none", "Flag for k=ka=kb=None"], [369, 4, 1, "", "is_kTI", "Flag for ka != 0"], [370, 2, 1, "", "repr", "Provides the representative string"], [371, 4, 1, "", "use_amb_ti", "Flag for using ambient ti"]], "foxes.core.WakeK.__call__": [[366, 3, 2, "", "amb_ti", "Gets the k value"], [366, 3, 2, "", "args", "Gets the k value"], [366, 3, 2, "", "kwargs", "Gets the k value"], [366, 3, 2, "", "lookup_k", "Gets the k value"], [366, 3, 2, "", "lookup_ti", "Gets the k value"], [366, 3, 2, "", "ti", "Gets the k value"]], "foxes.core.WakeK.__init__": [[367, 3, 2, "", "k", "Constructor."], [367, 3, 2, "", "k_var", "Constructor."], [367, 3, 2, "", "ka", "Constructor."], [367, 3, 2, "", "kb", "Constructor."], [367, 3, 2, "", "ti_var", "Constructor."]], "foxes.core.WakeModel": [[373, 4, 1, "", "affects_downwind", "Flag for downwind or upwind effects on other turbines"], [374, 2, 1, "", "contribute", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [375, 2, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [376, 2, 1, "", "new", "Run-time wake model factory."], [377, 2, 1, "", "new_wake_deltas", "Creates new empty wake delta arrays."]], "foxes.core.WakeModel.contribute": [[374, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [374, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [374, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [374, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [374, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [374, 3, 2, "", "wake_coos", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [374, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.core.WakeModel.finalize_wake_deltas": [[375, 3, 2, "", "algo", "Finalize the wake calculation."], [375, 3, 2, "", "amb_results", "Finalize the wake calculation."], [375, 3, 2, "", "fdata", "Finalize the wake calculation."], [375, 3, 2, "", "mdata", "Finalize the wake calculation."], [375, 3, 2, "", "wake_deltas", "Finalize the wake calculation."]], "foxes.core.WakeModel.new": [[376, 3, 2, "", "args", "Run-time wake model factory."], [376, 3, 2, "", "kwargs", "Run-time wake model factory."], [376, 3, 2, "", "wmodel_type", "Run-time wake model factory."]], "foxes.core.WakeModel.new_wake_deltas": [[377, 3, 2, "", "algo", "Creates new empty wake delta arrays."], [377, 3, 2, "", "fdata", "Creates new empty wake delta arrays."], [377, 3, 2, "", "mdata", "Creates new empty wake delta arrays."], [377, 3, 2, "", "tdata", "Creates new empty wake delta arrays."]], "foxes.core.WakeSuperposition": [[379, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [380, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [381, 2, 1, "", "new", "Run-time wake superposition model factory."]], "foxes.core.WakeSuperposition.add_wake": [[379, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [379, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [379, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [379, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [379, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [379, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [379, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [379, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [379, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.core.WakeSuperposition.calc_final_wake_delta": [[380, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [380, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [380, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [380, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [380, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [380, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.core.WakeSuperposition.new": [[381, 3, 2, "", "args", "Run-time wake superposition model factory."], [381, 3, 2, "", "kwargs", "Run-time wake superposition model factory."], [381, 3, 2, "", "superp_type", "Run-time wake superposition model factory."]], "foxes.core.WindFarm": [[383, 2, 1, "", "__init__", "Constructor."], [384, 2, 1, "", "add_turbine", "Add a wind turbine to the list."], [385, 2, 1, "", "get_hub_heights", "Gets the hub heights"], [386, 2, 1, "", "get_rotor_diameters", "Gets the rotor diameters"], [387, 2, 1, "", "get_xy_bounds", "Returns min max points of the wind farm ground points"], [388, 4, 1, "", "n_turbines", "The number of turbines in the wind farm"], [389, 4, 1, "", "turbine_names", "The list of names of all turbines"], [390, 4, 1, "", "xy_array", "Returns an array of the wind farm ground points"]], "foxes.core.WindFarm.__init__": [[383, 3, 2, "", "boundary", "Constructor."], [383, 3, 2, "", "name", "Constructor."]], "foxes.core.WindFarm.add_turbine": [[384, 3, 2, "", "turbine", "Add a wind turbine to the list."], [384, 3, 2, "", "verbosity", "Add a wind turbine to the list."]], "foxes.core.WindFarm.get_hub_heights": [[385, 3, 2, "", "algo", "Gets the hub heights"]], "foxes.core.WindFarm.get_rotor_diameters": [[386, 3, 2, "", "algo", "Gets the rotor diameters"]], "foxes.core.WindFarm.get_xy_bounds": [[387, 3, 2, "", "algo", "Returns min max points of the wind farm ground points"], [387, 3, 2, "", "extra_space", "Returns min max points of the wind farm ground points"]], "foxes.core.get_engine": [[391, 3, 2, "", "default", "Gets the global calculation engine"], [391, 3, 2, "", "error", "Gets the global calculation engine"]], "foxes.data": [[394, 0, 1, "", "StaticData", "A DataBook filled with static data from this directory."], [396, 5, 1, "", "parse_Pct_file_name", "Parse basic turbine data from file name"], [397, 5, 1, "", "parse_Pct_two_files", "Parse basic turbine data from file names"]], "foxes.data.StaticData": [[395, 2, 1, "", "__init__", "Constructor."]], "foxes.data.parse_Pct_file_name": [[396, 3, 2, "", "file_name", "Parse basic turbine data from file name"]], "foxes.data.parse_Pct_two_files": [[397, 3, 2, "", "file_name_A", "Parse basic turbine data from file names"], [397, 3, 2, "", "file_name_B", "Parse basic turbine data from file names"]], "foxes.engines": [[398, 0, 1, "", "DaskBaseEngine", "Abstract base class for foxes calculations with dask."], [404, 0, 1, "", "DaskEngine", "The dask engine for delayed foxes calculations."], [406, 0, 1, "", "DefaultEngine", "The case size dependent default engine."], [409, 0, 1, "", "LocalClusterEngine", "The dask engine for foxes calculations on a local cluster."], [412, 0, 1, "", "MPIEngine", "The MPI engine for foxes calculations."], [413, 0, 1, "", "MultiprocessEngine", "The multiprocessing engine for foxes calculations."], [414, 0, 1, "", "NumpyEngine", "The numpy engine for foxes calculations."], [417, 0, 1, "", "PoolEngine", "Abstract engine for pool type parallelizations."], [420, 0, 1, "", "ProcessEngine", "The processes engine for foxes calculations."], [421, 0, 1, "", "RayEngine", "The ray engine for foxes calculations."], [422, 0, 1, "", "SingleChunkEngine", "Runs computations in a single chunk."], [427, 0, 1, "", "SlurmClusterEngine", "The dask engine for foxes calculations on a SLURM cluster."], [428, 0, 1, "", "ThreadsEngine", "The threads engine for foxes calculations."], [429, 0, 1, "", "XArrayEngine", "The engine for foxes calculations via xarray.apply_ufunc."]], "foxes.engines.DaskBaseEngine": [[399, 2, 1, "", "__init__", "Constructor."], [400, 2, 1, "", "chunk_data", "Applies the selected chunking"], [401, 2, 1, "", "finalize", "Finalizes the engine."], [402, 2, 1, "", "initialize", "Initializes the engine."], [403, 2, 1, "", "map", "Runs a function on a list of files"]], "foxes.engines.DaskBaseEngine.__init__": [[399, 3, 2, "", "args", "Constructor."], [399, 3, 2, "", "dask_config", "Constructor."], [399, 3, 2, "", "kwargs", "Constructor."], [399, 3, 2, "", "progress_bar", "Constructor."]], "foxes.engines.DaskBaseEngine.chunk_data": [[400, 3, 2, "", "data", "Applies the selected chunking"]], "foxes.engines.DaskBaseEngine.finalize": [[401, 3, 2, "", "exit_args", "Finalizes the engine."], [401, 3, 2, "", "exit_kwargs", "Finalizes the engine."]], "foxes.engines.DaskBaseEngine.map": [[403, 3, 2, "", "args", "Runs a function on a list of files"], [403, 3, 2, "", "func", "Runs a function on a list of files"], [403, 3, 2, "", "inputs", "Runs a function on a list of files"], [403, 3, 2, "", "kwargs", "Runs a function on a list of files"]], "foxes.engines.DaskEngine": [[405, 2, 1, "", "run_calculation", "Runs the model calculation"]], "foxes.engines.DaskEngine.run_calculation": [[405, 3, 2, "", "algo", "Runs the model calculation"], [405, 3, 2, "", "calc_pars", "Runs the model calculation"], [405, 3, 2, "", "chunk_store", "Runs the model calculation"], [405, 3, 2, "", "farm_data", "Runs the model calculation"], [405, 3, 2, "", "isel", "Runs the model calculation"], [405, 3, 2, "", "iterative", "Runs the model calculation"], [405, 3, 2, "", "model", "Runs the model calculation"], [405, 3, 2, "", "model_data", "Runs the model calculation"], [405, 3, 2, "", "out_vars", "Runs the model calculation"], [405, 3, 2, "", "point_data", "Runs the model calculation"], [405, 3, 2, "", "sel", "Runs the model calculation"]], "foxes.engines.DefaultEngine": [[407, 2, 1, "", "map", "Runs a function on a list of files"], [408, 2, 1, "", "run_calculation", "Runs the model calculation"]], "foxes.engines.DefaultEngine.map": [[407, 3, 2, "", "args", "Runs a function on a list of files"], [407, 3, 2, "", "func", "Runs a function on a list of files"], [407, 3, 2, "", "inputs", "Runs a function on a list of files"], [407, 3, 2, "", "kwargs", "Runs a function on a list of files"]], "foxes.engines.DefaultEngine.run_calculation": [[408, 3, 2, "", "algo", "Runs the model calculation"], [408, 3, 2, "", "farm_data", "Runs the model calculation"], [408, 3, 2, "", "kwargs", "Runs the model calculation"], [408, 3, 2, "", "model", "Runs the model calculation"], [408, 3, 2, "", "model_data", "Runs the model calculation"], [408, 3, 2, "", "point_data", "Runs the model calculation"]], "foxes.engines.LocalClusterEngine": [[410, 2, 1, "", "__init__", "Constructor."], [411, 2, 1, "", "run_calculation", "Runs the model calculation"]], "foxes.engines.LocalClusterEngine.__init__": [[410, 3, 2, "", "args", "Constructor."], [410, 3, 2, "", "client_pars", "Constructor."], [410, 3, 2, "", "cluster_pars", "Constructor."], [410, 3, 2, "", "kwargs", "Constructor."]], "foxes.engines.LocalClusterEngine.run_calculation": [[411, 3, 2, "", "algo", "Runs the model calculation"], [411, 3, 2, "", "calc_pars", "Runs the model calculation"], [411, 3, 2, "", "chunk_store", "Runs the model calculation"], [411, 3, 2, "", "farm_data", "Runs the model calculation"], [411, 3, 2, "", "isel", "Runs the model calculation"], [411, 3, 2, "", "iterative", "Runs the model calculation"], [411, 3, 2, "", "model", "Runs the model calculation"], [411, 3, 2, "", "model_data", "Runs the model calculation"], [411, 3, 2, "", "out_vars", "Runs the model calculation"], [411, 3, 2, "", "point_data", "Runs the model calculation"], [411, 3, 2, "", "sel", "Runs the model calculation"]], "foxes.engines.NumpyEngine": [[415, 2, 1, "", "map", "Runs a function on a list of files"], [416, 2, 1, "", "run_calculation", "Runs the model calculation"]], "foxes.engines.NumpyEngine.map": [[415, 3, 2, "", "args", "Runs a function on a list of files"], [415, 3, 2, "", "func", "Runs a function on a list of files"], [415, 3, 2, "", "inputs", "Runs a function on a list of files"], [415, 3, 2, "", "kwargs", "Runs a function on a list of files"]], "foxes.engines.NumpyEngine.run_calculation": [[416, 3, 2, "", "algo", "Runs the model calculation"], [416, 3, 2, "", "calc_pars", "Runs the model calculation"], [416, 3, 2, "", "chunk_store", "Runs the model calculation"], [416, 3, 2, "", "farm_data", "Runs the model calculation"], [416, 3, 2, "", "isel", "Runs the model calculation"], [416, 3, 2, "", "iterative", "Runs the model calculation"], [416, 3, 2, "", "model", "Runs the model calculation"], [416, 3, 2, "", "model_data", "Runs the model calculation"], [416, 3, 2, "", "out_vars", "Runs the model calculation"], [416, 3, 2, "", "point_data", "Runs the model calculation"], [416, 3, 2, "", "sel", "Runs the model calculation"]], "foxes.engines.PoolEngine": [[418, 2, 1, "", "map", "Runs a function on a list of files"], [419, 2, 1, "", "run_calculation", "Runs the model calculation"]], "foxes.engines.PoolEngine.map": [[418, 3, 2, "", "args", "Runs a function on a list of files"], [418, 3, 2, "", "func", "Runs a function on a list of files"], [418, 3, 2, "", "inputs", "Runs a function on a list of files"], [418, 3, 2, "", "kwargs", "Runs a function on a list of files"]], "foxes.engines.PoolEngine.run_calculation": [[419, 3, 2, "", "algo", "Runs the model calculation"], [419, 3, 2, "", "calc_pars", "Runs the model calculation"], [419, 3, 2, "", "chunk_store", "Runs the model calculation"], [419, 3, 2, "", "farm_data", "Runs the model calculation"], [419, 3, 2, "", "isel", "Runs the model calculation"], [419, 3, 2, "", "iterative", "Runs the model calculation"], [419, 3, 2, "", "model", "Runs the model calculation"], [419, 3, 2, "", "model_data", "Runs the model calculation"], [419, 3, 2, "", "out_vars", "Runs the model calculation"], [419, 3, 2, "", "point_data", "Runs the model calculation"], [419, 3, 2, "", "sel", "Runs the model calculation"]], "foxes.engines.SingleChunkEngine": [[423, 2, 1, "", "__init__", "Constructor."], [424, 2, 1, "", "__repr__", "Return repr(self)."], [425, 2, 1, "", "map", "Runs a function on a list of files"], [426, 2, 1, "", "run_calculation", "Runs the model calculation"]], "foxes.engines.SingleChunkEngine.__init__": [[423, 3, 2, "", "args", "Constructor."], [423, 3, 2, "", "kwargs", "Constructor."]], "foxes.engines.SingleChunkEngine.map": [[425, 3, 2, "", "args", "Runs a function on a list of files"], [425, 3, 2, "", "func", "Runs a function on a list of files"], [425, 3, 2, "", "inputs", "Runs a function on a list of files"], [425, 3, 2, "", "kwargs", "Runs a function on a list of files"]], "foxes.engines.SingleChunkEngine.run_calculation": [[426, 3, 2, "", "algo", "Runs the model calculation"], [426, 3, 2, "", "calc_pars", "Runs the model calculation"], [426, 3, 2, "", "chunk_store", "Runs the model calculation"], [426, 3, 2, "", "farm_data", "Runs the model calculation"], [426, 3, 2, "", "isel", "Runs the model calculation"], [426, 3, 2, "", "iterative", "Runs the model calculation"], [426, 3, 2, "", "model", "Runs the model calculation"], [426, 3, 2, "", "model_data", "Runs the model calculation"], [426, 3, 2, "", "out_vars", "Runs the model calculation"], [426, 3, 2, "", "point_data", "Runs the model calculation"], [426, 3, 2, "", "sel", "Runs the model calculation"]], "foxes.engines.XArrayEngine": [[430, 2, 1, "", "map", "Runs a function on a list of files"], [431, 2, 1, "", "run_calculation", "Runs the model calculation"]], "foxes.engines.XArrayEngine.map": [[430, 3, 2, "", "args", "Runs a function on a list of files"], [430, 3, 2, "", "func", "Runs a function on a list of files"], [430, 3, 2, "", "inputs", "Runs a function on a list of files"], [430, 3, 2, "", "kwargs", "Runs a function on a list of files"]], "foxes.engines.XArrayEngine.run_calculation": [[431, 3, 2, "", "algo", "Runs the model calculation"], [431, 3, 2, "", "calc_pars", "Runs the model calculation"], [431, 3, 2, "", "chunk_store", "Runs the model calculation"], [431, 3, 2, "", "farm_data", "Runs the model calculation"], [431, 3, 2, "", "isel", "Runs the model calculation"], [431, 3, 2, "", "iterative", "Runs the model calculation"], [431, 3, 2, "", "model", "Runs the model calculation"], [431, 3, 2, "", "model_data", "Runs the model calculation"], [431, 3, 2, "", "out_vars", "Runs the model calculation"], [431, 3, 2, "", "persist", "Runs the model calculation"], [431, 3, 2, "", "point_data", "Runs the model calculation"], [431, 3, 2, "", "sel", "Runs the model calculation"]], "foxes.input.farm_layout": [[432, 5, 1, "", "add_from_csv", "Add turbines to wind farm via csv input file."], [433, 5, 1, "", "add_from_df", "Add turbines to wind farm via pandas DataFrame."], [434, 5, 1, "", "add_from_file", "Add turbines from file."], [435, 5, 1, "", "add_from_json", "Add turbimes from a json file."], [436, 5, 1, "", "add_grid", "Add a regular grid of turbines."], [437, 5, 1, "", "add_random", "Add turbines that lie randomly within a square"], [438, 5, 1, "", "add_ring", "Add a ring of turbines."], [439, 5, 1, "", "add_row", "Add a single row of turbines."]], "foxes.input.farm_layout.add_from_csv": [[432, 3, 2, "", "col_D", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "col_H", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "col_id", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "col_index", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "col_name", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "col_turbine_type", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "col_x", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "col_y", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "cols_models_post", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "cols_models_pre", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "data_source", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "farm", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "turbine_base_name", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "turbine_base_name_count_shift", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "turbine_ids", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "turbine_parameters", "Add turbines to wind farm via csv input file."], [432, 3, 2, "", "verbosity", "Add turbines to wind farm via csv input file."]], "foxes.input.farm_layout.add_from_df": [[433, 3, 2, "", "args", "Add turbines to wind farm via pandas DataFrame."], [433, 3, 2, "", "data_source", "Add turbines to wind farm via pandas DataFrame."], [433, 3, 2, "", "farm", "Add turbines to wind farm via pandas DataFrame."], [433, 3, 2, "", "kwargs", "Add turbines to wind farm via pandas DataFrame."]], "foxes.input.farm_layout.add_from_file": [[434, 3, 2, "", "args", "Add turbines from file."], [434, 3, 2, "", "dbook", "Add turbines from file."], [434, 3, 2, "", "farm", "Add turbines from file."], [434, 3, 2, "", "file_path", "Add turbines from file."], [434, 3, 2, "", "kwargs", "Add turbines from file."], [434, 3, 2, "", "verbosity", "Add turbines from file."]], "foxes.input.farm_layout.add_from_json": [[435, 3, 2, "", "farm", "Add turbimes from a json file."], [435, 3, 2, "", "file_path", "Add turbimes from a json file."], [435, 3, 2, "", "set_farm_name", "Add turbimes from a json file."], [435, 3, 2, "", "turbine_parameters", "Add turbimes from a json file."], [435, 3, 2, "", "verbosity", "Add turbimes from a json file."]], "foxes.input.farm_layout.add_grid": [[436, 3, 2, "", "farm", "Add a regular grid of turbines."], [436, 3, 2, "", "indices", "Add a regular grid of turbines."], [436, 3, 2, "", "names", "Add a regular grid of turbines."], [436, 3, 2, "", "step_vectors", "Add a regular grid of turbines."], [436, 3, 2, "", "steps", "Add a regular grid of turbines."], [436, 3, 2, "", "turbine_parameters", "Add a regular grid of turbines."], [436, 3, 2, "", "verbosity", "Add a regular grid of turbines."], [436, 3, 2, "", "xy_base", "Add a regular grid of turbines."]], "foxes.input.farm_layout.add_random": [[437, 3, 2, "", "centre", "Add turbines that lie randomly within a square"], [437, 3, 2, "", "farm", "Add turbines that lie randomly within a square"], [437, 3, 2, "", "min_dist", "Add turbines that lie randomly within a square"], [437, 3, 2, "", "n_turbines", "Add turbines that lie randomly within a square"], [437, 3, 2, "", "seed", "Add turbines that lie randomly within a square"], [437, 3, 2, "", "turbine_parameters", "Add turbines that lie randomly within a square"], [437, 3, 2, "", "verbosity", "Add turbines that lie randomly within a square"]], "foxes.input.farm_layout.add_ring": [[438, 3, 2, "", "dist", "Add a ring of turbines."], [438, 3, 2, "", "farm", "Add a ring of turbines."], [438, 3, 2, "", "indices", "Add a ring of turbines."], [438, 3, 2, "", "n_turbines", "Add a ring of turbines."], [438, 3, 2, "", "names", "Add a ring of turbines."], [438, 3, 2, "", "offset_deg", "Add a ring of turbines."], [438, 3, 2, "", "turbine_parameters", "Add a ring of turbines."], [438, 3, 2, "", "verbosity", "Add a ring of turbines."], [438, 3, 2, "", "xy_base", "Add a ring of turbines."]], "foxes.input.farm_layout.add_row": [[439, 3, 2, "", "farm", "Add a single row of turbines."], [439, 3, 2, "", "indices", "Add a single row of turbines."], [439, 3, 2, "", "n_turbines", "Add a single row of turbines."], [439, 3, 2, "", "names", "Add a single row of turbines."], [439, 3, 2, "", "turbine_parameters", "Add a single row of turbines."], [439, 3, 2, "", "verbosity", "Add a single row of turbines."], [439, 3, 2, "", "xy_base", "Add a single row of turbines."], [439, 3, 2, "", "xy_step", "Add a single row of turbines."]], "foxes.input.states": [[440, 0, 1, "", "FieldDataNC", "Heterogeneous ambient states on a regular horizontal grid in NetCDF format."], [451, 0, 1, "", "MultiHeightNCStates", "Multi-height states from xarray Dataset."], [454, 0, 1, "", "MultiHeightNCTimeseries", "Multi-height timeseries from xarray Dataset."], [456, 0, 1, "", "MultiHeightStates", "States with multiple heights data per entry."], [471, 0, 1, "", "MultiHeightTimeseries", "Multi-height timeseries states data."], [473, 0, 1, "", "OnePointFlowMultiHeightNCTimeseries", "Inhomogeneous inflow from height dependent homogeneous timeseries data at one point based on NetCDF input"], [475, 0, 1, "", "OnePointFlowMultiHeightTimeseries", "Inhomogeneous inflow from height dependent homogeneous timeseries data at one point"], [477, 0, 1, "", "OnePointFlowStates", "Time-evolving states based on horizontally homogeneous timeseries data"], [490, 0, 1, "", "OnePointFlowTimeseries", "Inhomogeneous inflow from homogeneous timeseries data at one point"], [492, 0, 1, "", "ScanStates", "Scan over selected variables"], [501, 0, 1, "", "SingleStateStates", "A single uniform state."], [509, 0, 1, "", "StatesTable", "States from a pandas.DataFrame or a pandas readable file."], [525, 0, 1, "", "TabStates", "States created from a single tab file"], [530, 0, 1, "", "Timeseries", "Timeseries states data."]], "foxes.input.states.FieldDataNC": [[441, 2, 1, "", "__init__", "Constructor."], [442, 2, 1, "", "calculate", "The main model calculation."], [443, 4, 1, "", "data_source", "The data source"], [444, 2, 1, "", "index", "The index list"], [445, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [446, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [447, 2, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [448, 2, 1, "", "size", "The total number of states."], [449, 2, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"], [450, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.FieldDataNC.__init__": [[441, 3, 2, "", "bounds_extra_space", "Constructor."], [441, 3, 2, "", "data_source", "Constructor."], [441, 3, 2, "", "fixed_vars", "Constructor."], [441, 3, 2, "", "h_coord", "Constructor."], [441, 3, 2, "", "interp_nans", "Constructor."], [441, 3, 2, "", "interpn_pars", "Constructor."], [441, 3, 2, "", "isel", "Constructor."], [441, 3, 2, "", "load_mode", "Constructor."], [441, 3, 2, "", "output_vars", "Constructor."], [441, 3, 2, "", "sel", "Constructor."], [441, 3, 2, "", "states_coord", "Constructor."], [441, 3, 2, "", "time_format", "Constructor."], [441, 3, 2, "", "var2ncvar", "Constructor."], [441, 3, 2, "", "weight_ncvar", "Constructor."], [441, 3, 2, "", "x_coord", "Constructor."], [441, 3, 2, "", "y_coord", "Constructor."]], "foxes.input.states.FieldDataNC.calculate": [[442, 3, 2, "", "algo", "The main model calculation."], [442, 3, 2, "", "fdata", "The main model calculation."], [442, 3, 2, "", "mdata", "The main model calculation."], [442, 3, 2, "", "tdata", "The main model calculation."]], "foxes.input.states.FieldDataNC.load_data": [[445, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [445, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.input.states.FieldDataNC.output_point_vars": [[446, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.input.states.FieldDataNC.set_running": [[447, 3, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [447, 3, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [447, 3, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [447, 3, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [447, 3, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes.input.states.FieldDataNC.unset_running": [[449, 3, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [449, 3, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [449, 3, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [449, 3, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [449, 3, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes.input.states.FieldDataNC.weights": [[450, 3, 2, "", "algo", "The statistical weights of all states."]], "foxes.input.states.MultiHeightNCStates": [[452, 2, 1, "", "__init__", "Constructor."], [453, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."]], "foxes.input.states.MultiHeightNCStates.__init__": [[452, 3, 2, "", "args", "Constructor."], [452, 3, 2, "", "data_source", "Constructor."], [452, 3, 2, "", "format_times_func", "Constructor."], [452, 3, 2, "", "h_coord", "Constructor."], [452, 3, 2, "", "heights", "Constructor."], [452, 3, 2, "", "kwargs", "Constructor."], [452, 3, 2, "", "state_coord", "Constructor."], [452, 3, 2, "", "xr_read_pars", "Constructor."]], "foxes.input.states.MultiHeightNCStates.load_data": [[453, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [453, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.input.states.MultiHeightNCTimeseries": [[455, 2, 1, "", "__init__", "Constructor."]], "foxes.input.states.MultiHeightNCTimeseries.__init__": [[455, 3, 2, "", "args", "Constructor."], [455, 3, 2, "", "kwargs", "Constructor."], [455, 3, 2, "", "time_coord", "Constructor."]], "foxes.input.states.MultiHeightStates": [[457, 1, 1, "", "RDICT", ""], [458, 2, 1, "", "__init__", "Constructor."], [459, 2, 1, "", "__repr__", "Return repr(self)."], [460, 2, 1, "", "calculate", "The main model calculation."], [461, 4, 1, "", "data_source", "The data source"], [462, 2, 1, "", "finalize", "Finalizes the model."], [463, 2, 1, "", "index", "The index list"], [464, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [465, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [466, 2, 1, "", "reset", "Reset the states, optionally select states"], [467, 2, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [468, 2, 1, "", "size", "The total number of states."], [469, 2, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"], [470, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightStates.__init__": [[458, 3, 2, "", "data_source", "Constructor."], [458, 3, 2, "", "fixed_vars", "Constructor."], [458, 3, 2, "", "heights", "Constructor."], [458, 3, 2, "", "ipars", "Constructor."], [458, 3, 2, "", "output_vars", "Constructor."], [458, 3, 2, "", "pd_read_pars", "Constructor."], [458, 3, 2, "", "states_loc", "Constructor."], [458, 3, 2, "", "states_sel", "Constructor."], [458, 3, 2, "", "var2col", "Constructor."]], "foxes.input.states.MultiHeightStates.calculate": [[460, 3, 2, "", "algo", "The main model calculation."], [460, 3, 2, "", "fdata", "The main model calculation."], [460, 3, 2, "", "mdata", "The main model calculation."], [460, 3, 2, "", "tdata", "The main model calculation."]], "foxes.input.states.MultiHeightStates.finalize": [[462, 3, 2, "", "algo", "Finalizes the model."], [462, 3, 2, "", "verbosity", "Finalizes the model."]], "foxes.input.states.MultiHeightStates.load_data": [[464, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [464, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.input.states.MultiHeightStates.output_point_vars": [[465, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.input.states.MultiHeightStates.reset": [[466, 3, 2, "", "algo", "Reset the states, optionally select states"], [466, 3, 2, "", "states_loc", "Reset the states, optionally select states"], [466, 3, 2, "", "states_sel", "Reset the states, optionally select states"], [466, 3, 2, "", "verbosity", "Reset the states, optionally select states"]], "foxes.input.states.MultiHeightStates.set_running": [[467, 3, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [467, 3, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [467, 3, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [467, 3, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [467, 3, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes.input.states.MultiHeightStates.unset_running": [[469, 3, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [469, 3, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [469, 3, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [469, 3, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [469, 3, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes.input.states.MultiHeightStates.weights": [[470, 3, 2, "", "algo", "The statistical weights of all states."]], "foxes.input.states.MultiHeightTimeseries": [[472, 1, 1, "", "RDICT", ""]], "foxes.input.states.OnePointFlowMultiHeightNCTimeseries": [[474, 2, 1, "", "__init__", "Constructor."]], "foxes.input.states.OnePointFlowMultiHeightNCTimeseries.__init__": [[474, 3, 2, "", "args", "Constructor."], [474, 3, 2, "", "kwargs", "Constructor."]], "foxes.input.states.OnePointFlowMultiHeightTimeseries": [[476, 2, 1, "", "__init__", "Constructor."]], "foxes.input.states.OnePointFlowMultiHeightTimeseries.__init__": [[476, 3, 2, "", "args", "Constructor."], [476, 3, 2, "", "kwargs", "Constructor."]], "foxes.input.states.OnePointFlowStates": [[478, 2, 1, "", "__init__", "Constructor."], [479, 2, 1, "", "__repr__", "Return repr(self)."], [480, 2, 1, "", "calc_states_indices", ""], [481, 2, 1, "", "calculate", "The main model calculation."], [482, 2, 1, "", "index", "The index list"], [483, 2, 1, "", "initialize", "Initializes the model."], [484, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [485, 2, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [486, 2, 1, "", "size", "The total number of states."], [487, 2, 1, "", "sub_models", "List of all sub-models"], [488, 2, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"], [489, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.OnePointFlowStates.__init__": [[478, 3, 2, "", "base_states", "Constructor."], [478, 3, 2, "", "base_states_args", "Constructor."], [478, 3, 2, "", "base_states_kwargs", "Constructor."], [478, 3, 2, "", "dt_min", "Constructor."], [478, 3, 2, "", "ref_xy", "Constructor."], [478, 3, 2, "", "tl_heights", "Constructor."]], "foxes.input.states.OnePointFlowStates.calc_states_indices": [[480, 3, 2, "", "algo", ""], [480, 3, 2, "", "hi", ""], [480, 3, 2, "", "mdata", ""], [480, 3, 2, "", "points", ""], [480, 3, 2, "", "ref_xy", ""]], "foxes.input.states.OnePointFlowStates.calculate": [[481, 3, 2, "", "algo", "The main model calculation."], [481, 3, 2, "", "fdata", "The main model calculation."], [481, 3, 2, "", "mdata", "The main model calculation."], [481, 3, 2, "", "tdata", "The main model calculation."]], "foxes.input.states.OnePointFlowStates.initialize": [[483, 3, 2, "", "algo", "Initializes the model."], [483, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.input.states.OnePointFlowStates.output_point_vars": [[484, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.input.states.OnePointFlowStates.set_running": [[485, 3, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [485, 3, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [485, 3, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [485, 3, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [485, 3, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes.input.states.OnePointFlowStates.unset_running": [[488, 3, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [488, 3, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [488, 3, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [488, 3, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [488, 3, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes.input.states.OnePointFlowStates.weights": [[489, 3, 2, "", "algo", "The statistical weights of all states."]], "foxes.input.states.OnePointFlowTimeseries": [[491, 2, 1, "", "__init__", "Constructor."]], "foxes.input.states.OnePointFlowTimeseries.__init__": [[491, 3, 2, "", "args", "Constructor."], [491, 3, 2, "", "kwargs", "Constructor."], [491, 3, 2, "", "ref_xy", "Constructor."], [491, 3, 2, "", "tl_heights", "Constructor."]], "foxes.input.states.ScanStates": [[493, 2, 1, "", "__init__", "Constructor."], [494, 2, 1, "", "calculate", "The main model calculation."], [495, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [496, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [497, 2, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [498, 2, 1, "", "size", "The total number of states."], [499, 2, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"], [500, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.ScanStates.__init__": [[493, 3, 2, "", "kwargs", "Constructor."], [493, 3, 2, "", "scans", "Constructor."]], "foxes.input.states.ScanStates.calculate": [[494, 3, 2, "", "algo", "The main model calculation."], [494, 3, 2, "", "fdata", "The main model calculation."], [494, 3, 2, "", "mdata", "The main model calculation."], [494, 3, 2, "", "tdata", "The main model calculation."]], "foxes.input.states.ScanStates.load_data": [[495, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [495, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.input.states.ScanStates.output_point_vars": [[496, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.input.states.ScanStates.set_running": [[497, 3, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [497, 3, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [497, 3, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [497, 3, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [497, 3, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes.input.states.ScanStates.unset_running": [[499, 3, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [499, 3, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [499, 3, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [499, 3, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [499, 3, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes.input.states.ScanStates.weights": [[500, 3, 2, "", "algo", "The statistical weights of all states."]], "foxes.input.states.SingleStateStates": [[502, 2, 1, "", "__init__", "Constructor."], [503, 2, 1, "", "calculate", "The main model calculation."], [504, 2, 1, "", "initialize", "Initializes the model."], [505, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [506, 2, 1, "", "size", "The total number of states."], [507, 2, 1, "", "sub_models", "List of all sub-models"], [508, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.SingleStateStates.__init__": [[502, 3, 2, "", "profdata", "Constructor."], [502, 3, 2, "", "profiles", "Constructor."], [502, 3, 2, "", "rho", "Constructor."], [502, 3, 2, "", "ti", "Constructor."], [502, 3, 2, "", "wd", "Constructor."], [502, 3, 2, "", "ws", "Constructor."]], "foxes.input.states.SingleStateStates.calculate": [[503, 3, 2, "", "algo", "The main model calculation."], [503, 3, 2, "", "fdata", "The main model calculation."], [503, 3, 2, "", "mdata", "The main model calculation."], [503, 3, 2, "", "tdata", "The main model calculation."]], "foxes.input.states.SingleStateStates.initialize": [[504, 3, 2, "", "algo", "Initializes the model."], [504, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.input.states.SingleStateStates.output_point_vars": [[505, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.input.states.SingleStateStates.weights": [[508, 3, 2, "", "algo", "The statistical weights of all states."]], "foxes.input.states.StatesTable": [[510, 1, 1, "", "RDICT", ""], [511, 2, 1, "", "__init__", "Constructor."], [512, 2, 1, "", "calculate", "The main model calculation."], [513, 4, 1, "", "data_source", "The data source"], [514, 2, 1, "", "finalize", "Finalizes the model."], [515, 2, 1, "", "index", "The index list"], [516, 2, 1, "", "initialize", "Initializes the model."], [517, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [518, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [519, 2, 1, "", "reset", "Reset the states, optionally select states"], [520, 2, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [521, 2, 1, "", "size", "The total number of states."], [522, 2, 1, "", "sub_models", "List of all sub-models"], [523, 2, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"], [524, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.StatesTable.__init__": [[511, 3, 2, "", "data_source", "Constructor."], [511, 3, 2, "", "fixed_vars", "Constructor."], [511, 3, 2, "", "output_vars", "Constructor."], [511, 3, 2, "", "pd_read_pars", "Constructor."], [511, 3, 2, "", "profiles", "Constructor."], [511, 3, 2, "", "states_loc", "Constructor."], [511, 3, 2, "", "states_sel", "Constructor."], [511, 3, 2, "", "var2col", "Constructor."]], "foxes.input.states.StatesTable.calculate": [[512, 3, 2, "", "algo", "The main model calculation."], [512, 3, 2, "", "fdata", "The main model calculation."], [512, 3, 2, "", "mdata", "The main model calculation."], [512, 3, 2, "", "tdata", "The main model calculation."]], "foxes.input.states.StatesTable.finalize": [[514, 3, 2, "", "algo", "Finalizes the model."], [514, 3, 2, "", "verbosity", "Finalizes the model."]], "foxes.input.states.StatesTable.initialize": [[516, 3, 2, "", "algo", "Initializes the model."], [516, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.input.states.StatesTable.load_data": [[517, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [517, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.input.states.StatesTable.output_point_vars": [[518, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.input.states.StatesTable.reset": [[519, 3, 2, "", "algo", "Reset the states, optionally select states"], [519, 3, 2, "", "states_loc", "Reset the states, optionally select states"], [519, 3, 2, "", "states_sel", "Reset the states, optionally select states"], [519, 3, 2, "", "verbosity", "Reset the states, optionally select states"]], "foxes.input.states.StatesTable.set_running": [[520, 3, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [520, 3, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [520, 3, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [520, 3, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [520, 3, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes.input.states.StatesTable.unset_running": [[523, 3, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [523, 3, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [523, 3, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [523, 3, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [523, 3, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes.input.states.StatesTable.weights": [[524, 3, 2, "", "algo", "The statistical weights of all states."]], "foxes.input.states.TabStates": [[526, 2, 1, "", "__init__", "Constructor."], [527, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [528, 2, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [529, 2, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"]], "foxes.input.states.TabStates.__init__": [[526, 3, 2, "", "args", "Constructor."], [526, 3, 2, "", "data_source", "Constructor."], [526, 3, 2, "", "kwargs", "Constructor."], [526, 3, 2, "", "normalize", "Constructor."]], "foxes.input.states.TabStates.load_data": [[527, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [527, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.input.states.TabStates.set_running": [[528, 3, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [528, 3, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [528, 3, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [528, 3, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [528, 3, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes.input.states.TabStates.unset_running": [[529, 3, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [529, 3, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [529, 3, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [529, 3, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [529, 3, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes.input.states.Timeseries": [[531, 1, 1, "", "RDICT", ""]], "foxes.input.states.create": [[532, 5, 1, "", "create_random_abl_states", "Create random abl states."], [533, 5, 1, "", "random_timseries_data", "Creates random uniform timeseries data"], [534, 5, 1, "", "write_random_abl_states", "Writes random abl states to file"]], "foxes.input.states.create.create_random_abl_states": [[532, 3, 2, "", "cols_minmax", "Create random abl states."], [532, 3, 2, "", "mol_abs_range", "Create random abl states."], [532, 3, 2, "", "n_states", "Create random abl states."], [532, 3, 2, "", "normalize", "Create random abl states."], [532, 3, 2, "", "var2col", "Create random abl states."]], "foxes.input.states.create.random_timseries_data": [[533, 3, 2, "", "data_ranges", "Creates random uniform timeseries data"], [533, 3, 2, "", "freq", "Creates random uniform timeseries data"], [533, 3, 2, "", "iname", "Creates random uniform timeseries data"], [533, 3, 2, "", "n_times", "Creates random uniform timeseries data"], [533, 3, 2, "", "seed", "Creates random uniform timeseries data"], [533, 3, 2, "", "start_time", "Creates random uniform timeseries data"]], "foxes.input.states.create.write_random_abl_states": [[534, 3, 2, "", "cols_minmax", "Writes random abl states to file"], [534, 3, 2, "", "digits", "Writes random abl states to file"], [534, 3, 2, "", "file_path", "Writes random abl states to file"], [534, 3, 2, "", "kwargs", "Writes random abl states to file"], [534, 3, 2, "", "mol_abs_range", "Writes random abl states to file"], [534, 3, 2, "", "n_states", "Writes random abl states to file"], [534, 3, 2, "", "normalize", "Writes random abl states to file"], [534, 3, 2, "", "var2col", "Writes random abl states to file"], [534, 3, 2, "", "verbosity", "Writes random abl states to file"]], "foxes.input.yaml": [[535, 5, 1, "", "foxes_windio", "Command line tool for running foxes from windio yaml file input."], [536, 5, 1, "", "foxes_yaml", "Command line tool for running foxes from yaml file input."], [537, 5, 1, "", "get_output_obj", "Create the output object"], [538, 5, 1, "", "read_dict", "Read dictionary input into foxes objects"], [539, 5, 1, "", "read_windio", "Translate windio data to foxes input data"], [540, 5, 1, "", "run_dict", "Runs foxes from dictionary input"], [541, 5, 1, "", "run_obj_function", "Runs a function of an object"], [542, 5, 1, "", "run_outputs", "Run outputs from dict."]], "foxes.input.yaml.get_output_obj": [[537, 3, 2, "", "algo", "Create the output object"], [537, 3, 2, "", "extra_sig={}", "Create the output object"], [537, 3, 2, "", "farm_results=None", "Create the output object"], [537, 3, 2, "", "ocls", "Create the output object"], [537, 3, 2, "", "odict", "Create the output object"], [537, 3, 2, "", "point_results=None", "Create the output object"]], "foxes.input.yaml.get_output_obj.base_class=&lt;class &#x27;foxes.output.output": [[537, 3, 2, "", "Output&#x27;&gt;", "Create the output object"]], "foxes.input.yaml.read_dict": [[538, 3, 2, "", "algo", "Read dictionary input into foxes objects"], [538, 3, 2, "", "algo_pars", "Read dictionary input into foxes objects"], [538, 3, 2, "", "engine_pars", "Read dictionary input into foxes objects"], [538, 3, 2, "", "farm", "Read dictionary input into foxes objects"], [538, 3, 2, "", "idict", "Read dictionary input into foxes objects"], [538, 3, 2, "", "input_dir", "Read dictionary input into foxes objects"], [538, 3, 2, "", "iterative", "Read dictionary input into foxes objects"], [538, 3, 2, "", "mbook", "Read dictionary input into foxes objects"], [538, 3, 2, "", "output_dir", "Read dictionary input into foxes objects"], [538, 3, 2, "", "states", "Read dictionary input into foxes objects"], [538, 3, 2, "", "verbosity", "Read dictionary input into foxes objects"], [538, 3, 2, "", "work_dir", "Read dictionary input into foxes objects"]], "foxes.input.yaml.read_windio": [[539, 3, 2, "", "verbosity", "Translate windio data to foxes input data"], [539, 3, 2, "", "wio_dict", "Translate windio data to foxes input data"]], "foxes.input.yaml.run_dict": [[540, 3, 2, "", "args", "Runs foxes from dictionary input"], [540, 3, 2, "", "idict", "Runs foxes from dictionary input"], [540, 3, 2, "", "kwargs", "Runs foxes from dictionary input"], [540, 3, 2, "", "verbosity", "Runs foxes from dictionary input"]], "foxes.input.yaml.run_obj_function": [[541, 3, 2, "", "algo", "Runs a function of an object"], [541, 3, 2, "", "fdict", "Runs a function of an object"], [541, 3, 2, "", "obj", "Runs a function of an object"], [541, 3, 2, "", "rlabels", "Runs a function of an object"], [541, 3, 2, "", "verbosity", "Runs a function of an object"]], "foxes.input.yaml.run_outputs": [[542, 3, 2, "", "algo", "Run outputs from dict."], [542, 3, 2, "", "extra_sig", "Run outputs from dict."], [542, 3, 2, "", "farm_results", "Run outputs from dict."], [542, 3, 2, "", "idict", "Run outputs from dict."], [542, 3, 2, "", "point_results", "Run outputs from dict."], [542, 3, 2, "", "ret_rlabels", "Run outputs from dict."], [542, 3, 2, "", "verbosity", "Run outputs from dict."]], "foxes.input.yaml.windio": [[543, 5, 1, "", "read_attributes", "Reads the attributes part of windio"], [544, 5, 1, "", "read_farm", "Reads the wind farm information"], [545, 5, 1, "", "read_layout", "Read wind farm layout from windio input"], [546, 5, 1, "", "read_site", "Reads the site information"], [547, 5, 1, "", "read_turbine_types", "Reads the turbine type from windio"], [548, 5, 1, "", "read_wind_resource_field", "Reads wind resource data into fields and dims"]], "foxes.input.yaml.windio.read_attributes": [[543, 3, 2, "", "idict", "Reads the attributes part of windio"], [543, 3, 2, "", "mbook", "Reads the attributes part of windio"], [543, 3, 2, "", "verbosity", "Reads the attributes part of windio"], [543, 3, 2, "", "wio_attrs", "Reads the attributes part of windio"]], "foxes.input.yaml.windio.read_farm": [[544, 3, 2, "", "mbook", "Reads the wind farm information"], [544, 3, 2, "", "verbosity", "Reads the wind farm information"], [544, 3, 2, "", "wio_dict", "Reads the wind farm information"]], "foxes.input.yaml.windio.read_layout": [[545, 3, 2, "", "farm", "Read wind farm layout from windio input"], [545, 3, 2, "", "ldict", "Read wind farm layout from windio input"], [545, 3, 2, "", "lname", "Read wind farm layout from windio input"], [545, 3, 2, "", "ttypes", "Read wind farm layout from windio input"], [545, 3, 2, "", "verbosity", "Read wind farm layout from windio input"]], "foxes.input.yaml.windio.read_site": [[546, 3, 2, "", "verbosity", "Reads the site information"], [546, 3, 2, "", "wio_dict", "Reads the site information"]], "foxes.input.yaml.windio.read_turbine_types": [[547, 3, 2, "", "mbook", "Reads the turbine type from windio"], [547, 3, 2, "", "verbosity", "Reads the turbine type from windio"], [547, 3, 2, "", "wio_farm", "Reads the turbine type from windio"], [547, 3, 2, "", "ws_exp_P", "Reads the turbine type from windio"], [547, 3, 2, "", "ws_exp_ct", "Reads the turbine type from windio"]], "foxes.input.yaml.windio.read_wind_resource_field": [[548, 3, 2, "", "coords", "Reads wind resource data into fields and dims"], [548, 3, 2, "", "dims", "Reads wind resource data into fields and dims"], [548, 3, 2, "", "fields", "Reads wind resource data into fields and dims"], [548, 3, 2, "", "name", "Reads wind resource data into fields and dims"], [548, 3, 2, "", "verbosity", "Reads wind resource data into fields and dims"], [548, 3, 2, "", "wio_data", "Reads wind resource data into fields and dims"]], "foxes.models": [[549, 0, 1, "", "ModelBook", "Container for all kinds of models."]], "foxes.models.ModelBook": [[550, 2, 1, "", "__getitem__", ""], [551, 2, 1, "", "__init__", "Constructor."], [552, 2, 1, "", "default_partial_wakes", "Gets a default partial wakes model name for a given wake model"], [553, 2, 1, "", "finalize", "Finalizes the model."], [554, 2, 1, "", "get", "Gets a model object."], [555, 2, 1, "", "print_toc", "Print the contents."]], "foxes.models.ModelBook.__getitem__": [[550, 3, 2, "", "key", ""]], "foxes.models.ModelBook.__init__": [[551, 3, 2, "", "Pct_file", "Constructor."]], "foxes.models.ModelBook.default_partial_wakes": [[552, 3, 2, "", "wake_model", "Gets a default partial wakes model name for a given wake model"]], "foxes.models.ModelBook.finalize": [[553, 3, 2, "", "algo", "Finalizes the model."], [553, 3, 2, "", "verbosity", "Finalizes the model."]], "foxes.models.ModelBook.get": [[554, 3, 2, "", "args", "Gets a model object."], [554, 3, 2, "", "class_name", "Gets a model object."], [554, 3, 2, "", "kwargs", "Gets a model object."], [554, 3, 2, "", "model_type", "Gets a model object."], [554, 3, 2, "", "name", "Gets a model object."]], "foxes.models.ModelBook.print_toc": [[555, 3, 2, "", "search", "Print the contents."], [555, 3, 2, "", "subset", "Print the contents."]], "foxes.models.axial_induction": [[556, 0, 1, "", "BetzAxialInduction", "The classic axial induction from 1D momentum theory"], [559, 0, 1, "", "MadsenAxialInduction", "Computes the induction factor through polynomial fit, extending validity for high ct values"]], "foxes.models.axial_induction.BetzAxialInduction": [[557, 2, 1, "", "__init__", "Constructor."], [558, 2, 1, "", "ct2a", "Computes induction from ct"]], "foxes.models.axial_induction.BetzAxialInduction.__init__": [[557, 3, 2, "", "ct_max", "Constructor."]], "foxes.models.axial_induction.BetzAxialInduction.ct2a": [[558, 3, 2, "", "ct", "Computes induction from ct"]], "foxes.models.axial_induction.MadsenAxialInduction": [[560, 2, 1, "", "__init__", "Constructor."], [561, 2, 1, "", "ct2a", "Computes induction from ct"]], "foxes.models.axial_induction.MadsenAxialInduction.__init__": [[560, 3, 2, "", "k1", "Constructor."], [560, 3, 2, "", "k2", "Constructor."], [560, 3, 2, "", "k3", "Constructor."]], "foxes.models.axial_induction.MadsenAxialInduction.ct2a": [[561, 3, 2, "", "ct", "Computes induction from ct"]], "foxes.models.farm_controllers": [[562, 0, 1, "", "BasicFarmController", "The basic farm controller, running all turbine models in their order, without conditions."]], "foxes.models.farm_models": [[563, 0, 1, "", "Turbine2FarmModel", "Wrapper that promotes turbine models into farm models, simply by selecting all turbines."]], "foxes.models.farm_models.Turbine2FarmModel": [[564, 2, 1, "", "__init__", "Constructor."], [565, 2, 1, "", "__repr__", "Return repr(self)."], [566, 2, 1, "", "calculate", "The main model calculation."], [567, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [568, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.farm_models.Turbine2FarmModel.__init__": [[564, 3, 2, "", "turbine_model", "Constructor."]], "foxes.models.farm_models.Turbine2FarmModel.calculate": [[566, 3, 2, "", "algo", "The main model calculation."], [566, 3, 2, "", "fdata", "The main model calculation."], [566, 3, 2, "", "mdata", "The main model calculation."], [566, 3, 2, "", "parameters", "The main model calculation."]], "foxes.models.farm_models.Turbine2FarmModel.output_farm_vars": [[567, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.ground_models": [[569, 0, 1, "", "GroundMirror", "Wake reflection from the ground."], [571, 0, 1, "", "NoGround", "No ground effects"], [572, 0, 1, "", "WakeMirror", "Wake reflection from ground and/or other horizontal planes."]], "foxes.models.ground_models.GroundMirror": [[570, 2, 1, "", "__init__", "Constructor."]], "foxes.models.ground_models.WakeMirror": [[573, 2, 1, "", "__init__", "Constructor."], [574, 2, 1, "", "contribute_to_farm_wakes", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [575, 2, 1, "", "contribute_to_point_wakes", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.models.ground_models.WakeMirror.__init__": [[573, 3, 2, "", "heights", "Constructor."]], "foxes.models.ground_models.WakeMirror.contribute_to_farm_wakes": [[574, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [574, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [574, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [574, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [574, 3, 2, "", "pwake", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [574, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [574, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [574, 3, 2, "", "wmodel", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.models.ground_models.WakeMirror.contribute_to_point_wakes": [[575, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [575, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [575, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [575, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [575, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [575, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [575, 3, 2, "", "wmodel", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes": [[576, 0, 1, "", "PartialAxiwake", "Partial wake calculation for axial wake models."], [581, 0, 1, "", "PartialCentre", "Partial wakes calculated only at the rotor centre point."], [583, 0, 1, "", "PartialGrid", "Partial wakes on a grid rotor that may differ from the one in the algorithm."], [585, 0, 1, "", "PartialSegregated", "Add the averaged wake effects to the separately averaged ambient rotor results"], [591, 0, 1, "", "PartialTopHat", "Partial wakes for top-hat models."], [597, 0, 1, "", "RotorPoints", "Partial wakes calculation directly by the rotor model."]], "foxes.models.partial_wakes.PartialAxiwake": [[577, 2, 1, "", "__init__", "Constructor."], [578, 2, 1, "", "__repr__", "Return repr(self)."], [579, 2, 1, "", "check_wmodel", "Checks the wake model type"], [580, 2, 1, "", "contribute", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes.PartialAxiwake.__init__": [[577, 3, 2, "", "n", "Constructor."]], "foxes.models.partial_wakes.PartialAxiwake.check_wmodel": [[579, 3, 2, "", "error", "Checks the wake model type"], [579, 3, 2, "", "wmodel", "Checks the wake model type"]], "foxes.models.partial_wakes.PartialAxiwake.contribute": [[580, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [580, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [580, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [580, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [580, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [580, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [580, 3, 2, "", "wmodel", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes.PartialCentre": [[582, 2, 1, "", "get_wake_points", "Get the wake calculation points, and their weights."]], "foxes.models.partial_wakes.PartialCentre.get_wake_points": [[582, 3, 2, "", "algo", "Get the wake calculation points, and their weights."], [582, 3, 2, "", "fdata", "Get the wake calculation points, and their weights."], [582, 3, 2, "", "mdata", "Get the wake calculation points, and their weights."]], "foxes.models.partial_wakes.PartialGrid": [[584, 2, 1, "", "__init__", "Constructor."]], "foxes.models.partial_wakes.PartialGrid.__init__": [[584, 3, 2, "", "args", "Constructor."], [584, 3, 2, "", "kwargs", "Constructor."]], "foxes.models.partial_wakes.PartialSegregated": [[586, 2, 1, "", "__init__", "Constructor."], [587, 2, 1, "", "__repr__", "Return repr(self)."], [588, 2, 1, "", "finalize_wakes", "Updates the wake_deltas at the selected target downwind index."], [589, 2, 1, "", "get_wake_points", "Get the wake calculation points, and their weights."], [590, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.partial_wakes.PartialSegregated.__init__": [[586, 3, 2, "", "rotor_model", "Constructor."]], "foxes.models.partial_wakes.PartialSegregated.finalize_wakes": [[588, 3, 2, "", "algo", "Updates the wake_deltas at the selected target downwind index."], [588, 3, 2, "", "amb_res", "Updates the wake_deltas at the selected target downwind index."], [588, 3, 2, "", "downwind_index", "Updates the wake_deltas at the selected target downwind index."], [588, 3, 2, "", "fdata", "Updates the wake_deltas at the selected target downwind index."], [588, 3, 2, "", "mdata", "Updates the wake_deltas at the selected target downwind index."], [588, 3, 2, "", "rpoint_weights", "Updates the wake_deltas at the selected target downwind index."], [588, 3, 2, "", "tdata", "Updates the wake_deltas at the selected target downwind index."], [588, 3, 2, "", "wake_deltas", "Updates the wake_deltas at the selected target downwind index."], [588, 3, 2, "", "wmodel", "Updates the wake_deltas at the selected target downwind index."]], "foxes.models.partial_wakes.PartialSegregated.get_wake_points": [[589, 3, 2, "", "algo", "Get the wake calculation points, and their weights."], [589, 3, 2, "", "fdata", "Get the wake calculation points, and their weights."], [589, 3, 2, "", "mdata", "Get the wake calculation points, and their weights."]], "foxes.models.partial_wakes.PartialTopHat": [[592, 2, 1, "", "__init__", "Constructor."], [593, 2, 1, "", "check_wmodel", "Checks the wake model type"], [594, 2, 1, "", "contribute", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [595, 2, 1, "", "initialize", "Initializes the model."], [596, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.partial_wakes.PartialTopHat.__init__": [[592, 3, 2, "", "rotor_model", "Constructor."]], "foxes.models.partial_wakes.PartialTopHat.check_wmodel": [[593, 3, 2, "", "error", "Checks the wake model type"], [593, 3, 2, "", "wmodel", "Checks the wake model type"]], "foxes.models.partial_wakes.PartialTopHat.contribute": [[594, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [594, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [594, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [594, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [594, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [594, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [594, 3, 2, "", "wmodel", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes.PartialTopHat.initialize": [[595, 3, 2, "", "algo", "Initializes the model."], [595, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.partial_wakes.RotorPoints": [[598, 2, 1, "", "finalize_wakes", "Updates the wake_deltas at the selected target downwind index."], [599, 2, 1, "", "get_wake_points", "Get the wake calculation points, and their weights."]], "foxes.models.partial_wakes.RotorPoints.finalize_wakes": [[598, 3, 2, "", "algo", "Updates the wake_deltas at the selected target downwind index."], [598, 3, 2, "", "amb_res", "Updates the wake_deltas at the selected target downwind index."], [598, 3, 2, "", "downwind_index", "Updates the wake_deltas at the selected target downwind index."], [598, 3, 2, "", "fdata", "Updates the wake_deltas at the selected target downwind index."], [598, 3, 2, "", "mdata", "Updates the wake_deltas at the selected target downwind index."], [598, 3, 2, "", "rpoint_weights", "Updates the wake_deltas at the selected target downwind index."], [598, 3, 2, "", "tdata", "Updates the wake_deltas at the selected target downwind index."], [598, 3, 2, "", "wake_deltas", "Updates the wake_deltas at the selected target downwind index."], [598, 3, 2, "", "wmodel", "Updates the wake_deltas at the selected target downwind index."]], "foxes.models.partial_wakes.RotorPoints.get_wake_points": [[599, 3, 2, "", "algo", "Get the wake calculation points, and their weights."], [599, 3, 2, "", "fdata", "Get the wake calculation points, and their weights."], [599, 3, 2, "", "mdata", "Get the wake calculation points, and their weights."]], "foxes.models.point_models": [[600, 0, 1, "", "SetUniformData", "Set uniform data (can be state dependent)"], [605, 0, 1, "", "TKE2TI", "Calculates TI from TKE, using TI = sqrt( 3/2 * TKE) / WS"], [608, 0, 1, "", "Ustar2TI", "Calculates TI from Ustar, using TI = Ustar / (kappa*WS)"], [612, 0, 1, "", "WakeDeltas", "This point model simply subtracts ambient results from waked results."]], "foxes.models.point_models.SetUniformData": [[601, 2, 1, "", "__init__", "Constructor."], [602, 2, 1, "", "calculate", "The main model calculation."], [603, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [604, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.SetUniformData.__init__": [[601, 3, 2, "", "data_source", "Constructor."], [601, 3, 2, "", "output_vars", "Constructor."], [601, 3, 2, "", "pd_read_pars", "Constructor."], [601, 3, 2, "", "var2col", "Constructor."]], "foxes.models.point_models.SetUniformData.calculate": [[602, 3, 2, "", "algo", "The main model calculation."], [602, 3, 2, "", "fdata", "The main model calculation."], [602, 3, 2, "", "mdata", "The main model calculation."], [602, 3, 2, "", "pdata", "The main model calculation."]], "foxes.models.point_models.SetUniformData.load_data": [[603, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [603, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.models.point_models.SetUniformData.output_point_vars": [[604, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.point_models.TKE2TI": [[606, 2, 1, "", "calculate", "The main model calculation."], [607, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.TKE2TI.calculate": [[606, 3, 2, "", "algo", "The main model calculation."], [606, 3, 2, "", "fdata", "The main model calculation."], [606, 3, 2, "", "mdata", "The main model calculation."], [606, 3, 2, "", "pdata", "The main model calculation."]], "foxes.models.point_models.TKE2TI.output_point_vars": [[607, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.point_models.Ustar2TI": [[609, 2, 1, "", "__init__", "Constructor"], [610, 2, 1, "", "calculate", "The main model calculation."], [611, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.Ustar2TI.__init__": [[609, 3, 2, "", "kwargs", "Constructor"], [609, 3, 2, "", "max_ti", "Constructor"]], "foxes.models.point_models.Ustar2TI.calculate": [[610, 3, 2, "", "algo", "The main model calculation."], [610, 3, 2, "", "fdata", "The main model calculation."], [610, 3, 2, "", "mdata", "The main model calculation."], [610, 3, 2, "", "pdata", "The main model calculation."]], "foxes.models.point_models.Ustar2TI.output_point_vars": [[611, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.point_models.WakeDeltas": [[613, 2, 1, "", "__init__", "Constructor."], [614, 2, 1, "", "calculate", "The main model calculation."], [615, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.WakeDeltas.__init__": [[613, 3, 2, "", "normalize", "Constructor."], [613, 3, 2, "", "vars", "Constructor."]], "foxes.models.point_models.WakeDeltas.calculate": [[614, 3, 2, "", "algo", "The main model calculation."], [614, 3, 2, "", "fdata", "The main model calculation."], [614, 3, 2, "", "mdata", "The main model calculation."], [614, 3, 2, "", "pdata", "The main model calculation."]], "foxes.models.point_models.WakeDeltas.output_point_vars": [[615, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.rotor_models": [[616, 0, 1, "", "CentreRotor", "The centre rotor model."], [622, 0, 1, "", "GridRotor", "The weighted regular grid rotor model, composed maximally of n x n points, possibly kicking out the outside points."], [629, 0, 1, "", "LevelRotor", "The weighted regular rotor level model, composed of of n points between lower and upper blade tip. Calculates a height-dependent REWS"]], "foxes.models.rotor_models.CentreRotor": [[617, 2, 1, "", "design_points", "The rotor model design points."], [618, 2, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [619, 2, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [620, 2, 1, "", "n_rotor_points", "The number of rotor points"], [621, 2, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.CentreRotor.eval_rpoint_results": [[618, 3, 2, "", "algo", "Evaluate rotor point results."], [618, 3, 2, "", "copy_to_ambient", "Evaluate rotor point results."], [618, 3, 2, "", "downwind_index", "Evaluate rotor point results."], [618, 3, 2, "", "fdata", "Evaluate rotor point results."], [618, 3, 2, "", "mdata", "Evaluate rotor point results."], [618, 3, 2, "", "rpoint_results", "Evaluate rotor point results."], [618, 3, 2, "", "weights", "Evaluate rotor point results."]], "foxes.models.rotor_models.CentreRotor.get_rotor_points": [[619, 3, 2, "", "algo", "Calculates rotor points from design points."], [619, 3, 2, "", "fdata", "Calculates rotor points from design points."], [619, 3, 2, "", "mdata", "Calculates rotor points from design points."]], "foxes.models.rotor_models.GridRotor": [[623, 2, 1, "", "__init__", "Constructor."], [624, 2, 1, "", "__repr__", "Return repr(self)."], [625, 2, 1, "", "design_points", "The rotor model design points."], [626, 2, 1, "", "initialize", "Initializes the model."], [627, 2, 1, "", "n_rotor_points", "The number of rotor points"], [628, 2, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.GridRotor.__init__": [[623, 3, 2, "", "kwargs", "Constructor."], [623, 3, 2, "", "n", "Constructor."], [623, 3, 2, "", "nint", "Constructor."], [623, 3, 2, "", "reduce", "Constructor."]], "foxes.models.rotor_models.GridRotor.initialize": [[626, 3, 2, "", "algo", "Initializes the model."], [626, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.rotor_models.LevelRotor": [[630, 2, 1, "", "__init__", "Constructor."], [631, 2, 1, "", "__repr__", "Return repr(self)."], [632, 2, 1, "", "design_points", "The rotor model design points."], [633, 2, 1, "", "initialize", "Initializes the model."], [634, 2, 1, "", "n_rotor_points", "The number of rotor points"], [635, 2, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.LevelRotor.__init__": [[630, 3, 2, "", "kwargs", "Constructor."], [630, 3, 2, "", "n", "Constructor."], [630, 3, 2, "", "nint", "Constructor."], [630, 3, 2, "", "reduce", "Constructor."]], "foxes.models.rotor_models.LevelRotor.initialize": [[633, 3, 2, "", "algo", "Initializes the model."], [633, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.turbine_models": [[636, 0, 1, "", "Calculator", "Calculates variables based on given functions."], [641, 0, 1, "", "LookupTable", "Calculates the data by interpolation of lookup-table data"], [646, 0, 1, "", "PowerMask", "Invokes a maximal power value."], [653, 0, 1, "", "RotorCentreCalc", "Calculates data at the rotor centre"], [659, 0, 1, "", "SectorManagement", "Changes variables based on variable range conditions."], [664, 0, 1, "", "SetFarmVars", "Set farm data variables to given data."], [674, 0, 1, "", "TableFactors", "Multiplies variables by factors from a two dimensional table."], [679, 0, 1, "", "Thrust2Ct", "Calculates ct from thrust force data."], [684, 0, 1, "", "YAW2YAWM", "Calculates delta yaw (i.e. YAWM) from absolute yaw (i.e. YAW)"], [687, 0, 1, "", "YAWM2YAW", "Calculates absolute yaw (i.e. YAWM) from delta yaw (i.e. YAWM)"], [690, 0, 1, "", "kTI", "Calculates the wake model parameter k as a linear function of TI."]], "foxes.models.turbine_models.Calculator": [[637, 2, 1, "", "__init__", "Constructor."], [638, 2, 1, "", "__repr__", "Return repr(self)."], [639, 2, 1, "", "calculate", "The main model calculation."], [640, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.Calculator.__init__": [[637, 3, 2, "", "func", "Constructor."], [637, 3, 2, "", "in_vars", "Constructor."], [637, 3, 2, "", "kwargs", "Constructor."], [637, 3, 2, "", "out_vars", "Constructor."]], "foxes.models.turbine_models.Calculator.calculate": [[639, 3, 2, "", "algo", "The main model calculation."], [639, 3, 2, "", "fdata", "The main model calculation."], [639, 3, 2, "", "mdata", "The main model calculation."], [639, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_models.Calculator.output_farm_vars": [[640, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_models.LookupTable": [[642, 2, 1, "", "__init__", "Constructor."], [643, 2, 1, "", "calculate", "The main model calculation."], [644, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [645, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.LookupTable.__init__": [[642, 3, 2, "", "data_source", "Constructor."], [642, 3, 2, "", "input_vars", "Constructor."], [642, 3, 2, "", "interpn_args", "Constructor."], [642, 3, 2, "", "kwargs", "Constructor."], [642, 3, 2, "", "output_vars", "Constructor."], [642, 3, 2, "", "pd_file_read_pars", "Constructor."], [642, 3, 2, "", "varmap", "Constructor."], [642, 3, 2, "", "xr_interp_args", "Constructor."]], "foxes.models.turbine_models.LookupTable.calculate": [[643, 3, 2, "", "algo", "The main model calculation."], [643, 3, 2, "", "fdata", "The main model calculation."], [643, 3, 2, "", "mdata", "The main model calculation."], [643, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_models.LookupTable.load_data": [[644, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [644, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.models.turbine_models.LookupTable.output_farm_vars": [[645, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_models.PowerMask": [[647, 2, 1, "", "__init__", "Constructor."], [648, 2, 1, "", "__repr__", "Return repr(self)."], [649, 2, 1, "", "calculate", "The main model calculation."], [650, 2, 1, "", "initialize", "Initializes the model."], [651, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [652, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.turbine_models.PowerMask.__init__": [[647, 3, 2, "", "P_lim", "Constructor."], [647, 3, 2, "", "factor_P", "Constructor."], [647, 3, 2, "", "induction", "Constructor."], [647, 3, 2, "", "var_ws_P", "Constructor."]], "foxes.models.turbine_models.PowerMask.calculate": [[649, 3, 2, "", "algo", "The main model calculation."], [649, 3, 2, "", "fdata", "The main model calculation."], [649, 3, 2, "", "mdata", "The main model calculation."], [649, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_models.PowerMask.initialize": [[650, 3, 2, "", "algo", "Initializes the model."], [650, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.turbine_models.PowerMask.output_farm_vars": [[651, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_models.RotorCentreCalc": [[654, 2, 1, "", "__init__", "Constructor."], [655, 2, 1, "", "calculate", "The main model calculation."], [656, 2, 1, "", "initialize", "Initializes the model."], [657, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [658, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.turbine_models.RotorCentreCalc.__init__": [[654, 3, 2, "", "calc_vars", "Constructor."]], "foxes.models.turbine_models.RotorCentreCalc.calculate": [[655, 3, 2, "", "algo", "The main model calculation."], [655, 3, 2, "", "fdata", "The main model calculation."], [655, 3, 2, "", "mdata", "The main model calculation."], [655, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_models.RotorCentreCalc.initialize": [[656, 3, 2, "", "algo", "Initializes the model."], [656, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.turbine_models.RotorCentreCalc.output_farm_vars": [[657, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SectorManagement": [[660, 2, 1, "", "__init__", "Constructor."], [661, 2, 1, "", "calculate", "The main model calculation."], [662, 2, 1, "", "initialize", "Initializes the model."], [663, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SectorManagement.__init__": [[660, 3, 2, "", "col_tinds", "Constructor."], [660, 3, 2, "", "col_tnames", "Constructor."], [660, 3, 2, "", "colmap", "Constructor."], [660, 3, 2, "", "data_source", "Constructor."], [660, 3, 2, "", "pd_file_read_pars", "Constructor."], [660, 3, 2, "", "range_vars", "Constructor."], [660, 3, 2, "", "target_vars", "Constructor."], [660, 3, 2, "", "var_periods", "Constructor."]], "foxes.models.turbine_models.SectorManagement.calculate": [[661, 3, 2, "", "algo", "The main model calculation."], [661, 3, 2, "", "fdata", "The main model calculation."], [661, 3, 2, "", "mdata", "The main model calculation."], [661, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_models.SectorManagement.initialize": [[662, 3, 2, "", "algo", "Initializes the model."], [662, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.turbine_models.SectorManagement.output_farm_vars": [[663, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SetFarmVars": [[665, 2, 1, "", "__init__", "Constructor."], [666, 2, 1, "", "add_var", "Add data for a variable."], [667, 2, 1, "", "calculate", "The main model calculation."], [668, 2, 1, "", "initialize", "Initializes the model."], [669, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [670, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [671, 2, 1, "", "reset", "Remove all variables."], [672, 2, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [673, 2, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"]], "foxes.models.turbine_models.SetFarmVars.__init__": [[665, 3, 2, "", "once", "Constructor."], [665, 3, 2, "", "pre_rotor", "Constructor."]], "foxes.models.turbine_models.SetFarmVars.add_var": [[666, 3, 2, "", "data", "Add data for a variable."], [666, 3, 2, "", "var", "Add data for a variable."]], "foxes.models.turbine_models.SetFarmVars.calculate": [[667, 3, 2, "", "algo", "The main model calculation."], [667, 3, 2, "", "fdata", "The main model calculation."], [667, 3, 2, "", "mdata", "The main model calculation."], [667, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_models.SetFarmVars.initialize": [[668, 3, 2, "", "algo", "Initializes the model."], [668, 3, 2, "", "force", "Initializes the model."], [668, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.turbine_models.SetFarmVars.load_data": [[669, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [669, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.models.turbine_models.SetFarmVars.output_farm_vars": [[670, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SetFarmVars.set_running": [[672, 3, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [672, 3, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [672, 3, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [672, 3, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [672, 3, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes.models.turbine_models.SetFarmVars.unset_running": [[673, 3, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [673, 3, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [673, 3, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [673, 3, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [673, 3, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes.models.turbine_models.TableFactors": [[675, 2, 1, "", "__init__", "Constructor."], [676, 2, 1, "", "calculate", "The main model calculation."], [677, 2, 1, "", "initialize", "Initializes the model."], [678, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.TableFactors.__init__": [[675, 3, 2, "", "col_var", "Constructor."], [675, 3, 2, "", "data_source", "Constructor."], [675, 3, 2, "", "ipars", "Constructor."], [675, 3, 2, "", "output_vars", "Constructor."], [675, 3, 2, "", "pd_file_read_pars", "Constructor."], [675, 3, 2, "", "row_var", "Constructor."]], "foxes.models.turbine_models.TableFactors.calculate": [[676, 3, 2, "", "algo", "The main model calculation."], [676, 3, 2, "", "fdata", "The main model calculation."], [676, 3, 2, "", "mdata", "The main model calculation."], [676, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_models.TableFactors.initialize": [[677, 3, 2, "", "algo", "Initializes the model."], [677, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.turbine_models.TableFactors.output_farm_vars": [[678, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_models.Thrust2Ct": [[680, 2, 1, "", "__init__", "Constructor."], [681, 2, 1, "", "__repr__", "Return repr(self)."], [682, 2, 1, "", "calculate", "The main model calculation."], [683, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.Thrust2Ct.__init__": [[680, 3, 2, "", "thrust_var", "Constructor."], [680, 3, 2, "", "var_ws_ct", "Constructor."]], "foxes.models.turbine_models.Thrust2Ct.calculate": [[682, 3, 2, "", "algo", "The main model calculation."], [682, 3, 2, "", "fdata", "The main model calculation."], [682, 3, 2, "", "mdata", "The main model calculation."], [682, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_models.Thrust2Ct.output_farm_vars": [[683, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAW2YAWM": [[685, 2, 1, "", "calculate", "The main model calculation."], [686, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAW2YAWM.calculate": [[685, 3, 2, "", "algo", "The main model calculation."], [685, 3, 2, "", "fdata", "The main model calculation."], [685, 3, 2, "", "mdata", "The main model calculation."], [685, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_models.YAW2YAWM.output_farm_vars": [[686, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAWM2YAW": [[688, 2, 1, "", "calculate", "The main model calculation."], [689, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAWM2YAW.calculate": [[688, 3, 2, "", "algo", "The main model calculation."], [688, 3, 2, "", "fdata", "The main model calculation."], [688, 3, 2, "", "mdata", "The main model calculation."], [688, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_models.YAWM2YAW.output_farm_vars": [[689, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_models.kTI": [[691, 2, 1, "", "__init__", "Constructor."], [692, 2, 1, "", "__repr__", "Return repr(self)."], [693, 2, 1, "", "calculate", "The main model calculation."], [694, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.kTI.__init__": [[691, 3, 2, "", "kTI", "Constructor."], [691, 3, 2, "", "k_var", "Constructor."], [691, 3, 2, "", "kb", "Constructor."], [691, 3, 2, "", "ti_val", "Constructor."], [691, 3, 2, "", "ti_var", "Constructor."]], "foxes.models.turbine_models.kTI.calculate": [[693, 3, 2, "", "algo", "The main model calculation."], [693, 3, 2, "", "fdata", "The main model calculation."], [693, 3, 2, "", "mdata", "The main model calculation."], [693, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_models.kTI.output_farm_vars": [[694, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_types": [[695, 0, 1, "", "CpCtFile", "Calculate power and ct by interpolating from cp-ct-curve data file (or pandas DataFrame)."], [697, 0, 1, "", "CpCtFromTwo", "Calculate power and ct by interpolating cp and ct from two files (or two pandas DataFrames)."], [699, 0, 1, "", "FromLookupTable", "Calculate power and ct by interpolating by using a lookup-table"], [709, 0, 1, "", "NullType", "A turbine type that does not compute any data."], [715, 0, 1, "", "PCtFile", "Calculate power and ct by interpolating from power-ct-curve data file (or pandas DataFrame)."], [725, 0, 1, "", "PCtFromTwo", "Calculate power and ct by interpolating from power curve and ct curve data files."], [735, 0, 1, "", "TBLFile", "Reads turbine data from a TBL file."], [737, 0, 1, "", "WsRho2PCtFromTwo", "Calculate air density dependent power and ct values, as given by two individual files."], [745, 0, 1, "", "WsTI2PCtFromTwo", "Calculate turbulent intensity dependent power and ct values, as given by two individual files."]], "foxes.models.turbine_types.CpCtFile": [[696, 2, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.CpCtFile.__init__": [[696, 3, 2, "", "col_cp", "Constructor."], [696, 3, 2, "", "col_ws", "Constructor."], [696, 3, 2, "", "data_source", "Constructor."], [696, 3, 2, "", "parameters", "Constructor."], [696, 3, 2, "", "pd_file_read_pars", "Constructor."], [696, 3, 2, "", "rho", "Constructor."]], "foxes.models.turbine_types.CpCtFromTwo": [[698, 2, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.CpCtFromTwo.__init__": [[698, 3, 2, "", "col_cp", "Constructor."], [698, 3, 2, "", "col_ws_cp_file", "Constructor."], [698, 3, 2, "", "data_source_cp", "Constructor."], [698, 3, 2, "", "data_source_ct", "Constructor."], [698, 3, 2, "", "parameters", "Constructor."], [698, 3, 2, "", "pd_file_read_pars_cp", "Constructor."], [698, 3, 2, "", "pd_file_read_pars_ct", "Constructor."], [698, 3, 2, "", "rho", "Constructor."]], "foxes.models.turbine_types.FromLookupTable": [[700, 2, 1, "", "__init__", "Constructor."], [701, 2, 1, "", "__repr__", "Return repr(self)."], [702, 2, 1, "", "calculate", "The main model calculation."], [703, 2, 1, "", "initialize", "Initializes the model."], [704, 2, 1, "", "modify_cutin", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [705, 2, 1, "", "needs_rews2", "Returns flag for requiring REWS2 variable"], [706, 2, 1, "", "needs_rews3", "Returns flag for requiring REWS3 variable"], [707, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [708, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.turbine_types.FromLookupTable.__init__": [[700, 3, 2, "", "data_source", "Constructor."], [700, 3, 2, "", "input_vars", "Constructor."], [700, 3, 2, "", "interpn_args", "Constructor."], [700, 3, 2, "", "lookup_pars", "Constructor."], [700, 3, 2, "", "p_P", "Constructor."], [700, 3, 2, "", "p_ct", "Constructor."], [700, 3, 2, "", "parameters", "Constructor."], [700, 3, 2, "", "pd_file_read_pars", "Constructor."], [700, 3, 2, "", "rho", "Constructor."], [700, 3, 2, "", "var_ws_P", "Constructor."], [700, 3, 2, "", "var_ws_ct", "Constructor."], [700, 3, 2, "", "varmap", "Constructor."]], "foxes.models.turbine_types.FromLookupTable.calculate": [[702, 3, 2, "", "algo", "The main model calculation."], [702, 3, 2, "", "fdata", "The main model calculation."], [702, 3, 2, "", "mdata", "The main model calculation."], [702, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_types.FromLookupTable.initialize": [[703, 3, 2, "", "algo", "Initializes the model."], [703, 3, 2, "", "force", "Initializes the model."], [703, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.turbine_types.FromLookupTable.modify_cutin": [[704, 3, 2, "", "a", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [704, 3, 2, "", "b", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [704, 3, 2, "", "iterations", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [704, 3, 2, "", "modify_P", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [704, 3, 2, "", "modify_ct", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [704, 3, 2, "", "steps", "Modify the data such that a discontinuity at cutin wind speed is avoided"]], "foxes.models.turbine_types.FromLookupTable.output_farm_vars": [[707, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_types.NullType": [[710, 2, 1, "", "__init__", "Constructor."], [711, 2, 1, "", "calculate", "The main model calculation."], [712, 2, 1, "", "needs_rews2", "Returns flag for requiring REWS2 variable"], [713, 2, 1, "", "needs_rews3", "Returns flag for requiring REWS3 variable"], [714, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.NullType.__init__": [[710, 3, 2, "", "args", "Constructor."], [710, 3, 2, "", "kwargs", "Constructor."], [710, 3, 2, "", "needs_rews2", "Constructor."], [710, 3, 2, "", "needs_rews3", "Constructor."]], "foxes.models.turbine_types.NullType.calculate": [[711, 3, 2, "", "algo", "The main model calculation."], [711, 3, 2, "", "fdata", "The main model calculation."], [711, 3, 2, "", "mdata", "The main model calculation."], [711, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_types.NullType.output_farm_vars": [[714, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFile": [[716, 2, 1, "", "__init__", "Constructor."], [717, 2, 1, "", "__repr__", "Return repr(self)."], [718, 2, 1, "", "calculate", "The main model calculation."], [719, 2, 1, "", "finalize", "Finalizes the model."], [720, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [721, 2, 1, "", "modify_cutin", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [722, 2, 1, "", "needs_rews2", "Returns flag for requiring REWS2 variable"], [723, 2, 1, "", "needs_rews3", "Returns flag for requiring REWS3 variable"], [724, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFile.__init__": [[716, 3, 2, "", "col_P", "Constructor."], [716, 3, 2, "", "col_ct", "Constructor."], [716, 3, 2, "", "col_ws", "Constructor."], [716, 3, 2, "", "data_source", "Constructor."], [716, 3, 2, "", "p_P", "Constructor."], [716, 3, 2, "", "p_ct", "Constructor."], [716, 3, 2, "", "parameters", "Constructor."], [716, 3, 2, "", "pd_file_read_pars", "Constructor."], [716, 3, 2, "", "rho", "Constructor."], [716, 3, 2, "", "var_ws_P", "Constructor."], [716, 3, 2, "", "var_ws_ct", "Constructor."]], "foxes.models.turbine_types.PCtFile.calculate": [[718, 3, 2, "", "algo", "The main model calculation."], [718, 3, 2, "", "fdata", "The main model calculation."], [718, 3, 2, "", "mdata", "The main model calculation."], [718, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_types.PCtFile.finalize": [[719, 3, 2, "", "algo", "Finalizes the model."], [719, 3, 2, "", "verbosity", "Finalizes the model."]], "foxes.models.turbine_types.PCtFile.load_data": [[720, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [720, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.models.turbine_types.PCtFile.modify_cutin": [[721, 3, 2, "", "a", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [721, 3, 2, "", "b", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [721, 3, 2, "", "iterations", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [721, 3, 2, "", "modify_P", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [721, 3, 2, "", "modify_ct", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [721, 3, 2, "", "steps", "Modify the data such that a discontinuity at cutin wind speed is avoided"]], "foxes.models.turbine_types.PCtFile.output_farm_vars": [[724, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFromTwo": [[726, 2, 1, "", "__init__", "Constructor."], [727, 2, 1, "", "__repr__", "Return repr(self)."], [728, 2, 1, "", "calculate", "The main model calculation."], [729, 2, 1, "", "finalize", "Finalizes the model."], [730, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [731, 2, 1, "", "modify_cutin", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [732, 2, 1, "", "needs_rews2", "Returns flag for requiring REWS2 variable"], [733, 2, 1, "", "needs_rews3", "Returns flag for requiring REWS3 variable"], [734, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFromTwo.__init__": [[726, 3, 2, "", "col_P", "Constructor."], [726, 3, 2, "", "col_ct", "Constructor."], [726, 3, 2, "", "col_ws_P_file", "Constructor."], [726, 3, 2, "", "col_ws_ct_file", "Constructor."], [726, 3, 2, "", "data_source_P", "Constructor."], [726, 3, 2, "", "data_source_ct", "Constructor."], [726, 3, 2, "", "p_P", "Constructor."], [726, 3, 2, "", "p_ct", "Constructor."], [726, 3, 2, "", "parameters", "Constructor."], [726, 3, 2, "", "pd_file_read_pars_P", "Constructor."], [726, 3, 2, "", "pd_file_read_pars_ct", "Constructor."], [726, 3, 2, "", "rho", "Constructor."], [726, 3, 2, "", "var_ws_P", "Constructor."], [726, 3, 2, "", "var_ws_ct", "Constructor."]], "foxes.models.turbine_types.PCtFromTwo.calculate": [[728, 3, 2, "", "algo", "The main model calculation."], [728, 3, 2, "", "fdata", "The main model calculation."], [728, 3, 2, "", "mdata", "The main model calculation."], [728, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_types.PCtFromTwo.finalize": [[729, 3, 2, "", "algo", "Finalizes the model."], [729, 3, 2, "", "verbosity", "Finalizes the model."]], "foxes.models.turbine_types.PCtFromTwo.load_data": [[730, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [730, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.models.turbine_types.PCtFromTwo.modify_cutin": [[731, 3, 2, "", "a", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [731, 3, 2, "", "b", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [731, 3, 2, "", "iterations", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [731, 3, 2, "", "modify_P", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [731, 3, 2, "", "modify_ct", "Modify the data such that a discontinuity at cutin wind speed is avoided"], [731, 3, 2, "", "steps", "Modify the data such that a discontinuity at cutin wind speed is avoided"]], "foxes.models.turbine_types.PCtFromTwo.output_farm_vars": [[734, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_types.TBLFile": [[736, 2, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.TBLFile.__init__": [[736, 3, 2, "", "parameters", "Constructor."], [736, 3, 2, "", "rho", "Constructor."], [736, 3, 2, "", "tbl_file", "Constructor."]], "foxes.models.turbine_types.WsRho2PCtFromTwo": [[738, 2, 1, "", "__init__", "Constructor."], [739, 2, 1, "", "calculate", "The main model calculation."], [740, 2, 1, "", "finalize", "Finalizes the model."], [741, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [742, 2, 1, "", "needs_rews2", "Returns flag for requiring REWS2 variable"], [743, 2, 1, "", "needs_rews3", "Returns flag for requiring REWS3 variable"], [744, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsRho2PCtFromTwo.__init__": [[738, 3, 2, "", "data_source_P", "Constructor."], [738, 3, 2, "", "data_source_ct", "Constructor."], [738, 3, 2, "", "interpn_pars_P", "Constructor."], [738, 3, 2, "", "interpn_pars_ct", "Constructor."], [738, 3, 2, "", "p_P", "Constructor."], [738, 3, 2, "", "p_ct", "Constructor."], [738, 3, 2, "", "parameters", "Constructor."], [738, 3, 2, "", "pd_file_read_pars_P", "Constructor."], [738, 3, 2, "", "pd_file_read_pars_ct", "Constructor."], [738, 3, 2, "", "var_ws_P", "Constructor."], [738, 3, 2, "", "var_ws_ct", "Constructor."]], "foxes.models.turbine_types.WsRho2PCtFromTwo.calculate": [[739, 3, 2, "", "algo", "The main model calculation."], [739, 3, 2, "", "fdata", "The main model calculation."], [739, 3, 2, "", "mdata", "The main model calculation."], [739, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_types.WsRho2PCtFromTwo.finalize": [[740, 3, 2, "", "algo", "Finalizes the model."], [740, 3, 2, "", "verbosity", "Finalizes the model."]], "foxes.models.turbine_types.WsRho2PCtFromTwo.load_data": [[741, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [741, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.models.turbine_types.WsRho2PCtFromTwo.output_farm_vars": [[744, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsTI2PCtFromTwo": [[746, 2, 1, "", "__init__", "Constructor."], [747, 2, 1, "", "__repr__", "Return repr(self)."], [748, 2, 1, "", "calculate", "The main model calculation."], [749, 2, 1, "", "finalize", "Finalizes the model."], [750, 2, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [751, 2, 1, "", "needs_rews2", "Returns flag for requiring REWS2 variable"], [752, 2, 1, "", "needs_rews3", "Returns flag for requiring REWS3 variable"], [753, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsTI2PCtFromTwo.__init__": [[746, 3, 2, "", "data_source_P", "Constructor."], [746, 3, 2, "", "data_source_ct", "Constructor."], [746, 3, 2, "", "interpn_pars_P", "Constructor."], [746, 3, 2, "", "interpn_pars_ct", "Constructor."], [746, 3, 2, "", "p_P", "Constructor."], [746, 3, 2, "", "p_ct", "Constructor."], [746, 3, 2, "", "parameters", "Constructor."], [746, 3, 2, "", "pd_file_read_pars_P", "Constructor."], [746, 3, 2, "", "pd_file_read_pars_ct", "Constructor."], [746, 3, 2, "", "rho", "Constructor."], [746, 3, 2, "", "var_ws_P", "Constructor."], [746, 3, 2, "", "var_ws_ct", "Constructor."]], "foxes.models.turbine_types.WsTI2PCtFromTwo.calculate": [[748, 3, 2, "", "algo", "The main model calculation."], [748, 3, 2, "", "fdata", "The main model calculation."], [748, 3, 2, "", "mdata", "The main model calculation."], [748, 3, 2, "", "st_sel", "The main model calculation."]], "foxes.models.turbine_types.WsTI2PCtFromTwo.finalize": [[749, 3, 2, "", "algo", "Finalizes the model."], [749, 3, 2, "", "verbosity", "Finalizes the model."]], "foxes.models.turbine_types.WsTI2PCtFromTwo.load_data": [[750, 3, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [750, 3, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes.models.turbine_types.WsTI2PCtFromTwo.output_farm_vars": [[753, 3, 2, "", "algo", "The variables which are being modified by the model."]], "foxes.models.vertical_profiles": [[754, 0, 1, "", "ABLLogNeutralWsProfile", "The neutral ABL wind speed log profile."], [758, 0, 1, "", "ABLLogStableWsProfile", "The stable ABL wind speed log profile."], [762, 0, 1, "", "ABLLogUnstableWsProfile", "The unstable ABL wind speed log profile."], [766, 0, 1, "", "ABLLogWsProfile", "The neutral/stable/unstable ABL wind speed log profile."], [770, 0, 1, "", "DataProfile", "A profile based on numerical data."], [774, 0, 1, "", "ShearedProfile", "A wind shear profile, based on a shear exponent."], [777, 0, 1, "", "UniformProfile", "A profile with uniform values."]], "foxes.models.vertical_profiles.ABLLogNeutralWsProfile": [[755, 2, 1, "", "__init__", "Constructor."], [756, 2, 1, "", "calculate", "Run the profile calculation."], [757, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.__init__": [[755, 3, 2, "", "args", "Constructor."], [755, 3, 2, "", "kwargs", "Constructor."], [755, 3, 2, "", "ustar_input", "Constructor."]], "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.calculate": [[756, 3, 2, "", "data", "Run the profile calculation."], [756, 3, 2, "", "heights", "Run the profile calculation."]], "foxes.models.vertical_profiles.ABLLogStableWsProfile": [[759, 2, 1, "", "__init__", "Constructor."], [760, 2, 1, "", "calculate", "Run the profile calculation."], [761, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogStableWsProfile.__init__": [[759, 3, 2, "", "args", "Constructor."], [759, 3, 2, "", "kwargs", "Constructor."], [759, 3, 2, "", "ustar_input", "Constructor."]], "foxes.models.vertical_profiles.ABLLogStableWsProfile.calculate": [[760, 3, 2, "", "data", "Run the profile calculation."], [760, 3, 2, "", "heights", "Run the profile calculation."]], "foxes.models.vertical_profiles.ABLLogUnstableWsProfile": [[763, 2, 1, "", "__init__", "Constructor."], [764, 2, 1, "", "calculate", "Run the profile calculation."], [765, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.__init__": [[763, 3, 2, "", "args", "Constructor."], [763, 3, 2, "", "kwargs", "Constructor."], [763, 3, 2, "", "ustar_input", "Constructor."]], "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.calculate": [[764, 3, 2, "", "data", "Run the profile calculation."], [764, 3, 2, "", "heights", "Run the profile calculation."]], "foxes.models.vertical_profiles.ABLLogWsProfile": [[767, 2, 1, "", "__init__", "Constructor."], [768, 2, 1, "", "calculate", "Run the profile calculation."], [769, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogWsProfile.__init__": [[767, 3, 2, "", "args", "Constructor."], [767, 3, 2, "", "kwargs", "Constructor."], [767, 3, 2, "", "ustar_input", "Constructor."]], "foxes.models.vertical_profiles.ABLLogWsProfile.calculate": [[768, 3, 2, "", "data", "Run the profile calculation."], [768, 3, 2, "", "heights", "Run the profile calculation."]], "foxes.models.vertical_profiles.DataProfile": [[771, 2, 1, "", "__init__", "Constructor"], [772, 2, 1, "", "calculate", "Run the profile calculation."], [773, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.DataProfile.__init__": [[771, 3, 2, "", "col_var", "Constructor"], [771, 3, 2, "", "col_z", "Constructor"], [771, 3, 2, "", "data_source", "Constructor"], [771, 3, 2, "", "interp_pars", "Constructor"], [771, 3, 2, "", "pd_read_pars", "Constructor"], [771, 3, 2, "", "variable", "Constructor"]], "foxes.models.vertical_profiles.DataProfile.calculate": [[772, 3, 2, "", "data", "Run the profile calculation."], [772, 3, 2, "", "heights", "Run the profile calculation."]], "foxes.models.vertical_profiles.ShearedProfile": [[775, 2, 1, "", "calculate", "Run the profile calculation."], [776, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ShearedProfile.calculate": [[775, 3, 2, "", "data", "Run the profile calculation."], [775, 3, 2, "", "heights", "Run the profile calculation."]], "foxes.models.vertical_profiles.UniformProfile": [[778, 2, 1, "", "__init__", "Constructor"], [779, 2, 1, "", "calculate", "Run the profile calculation."], [780, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.UniformProfile.__init__": [[778, 3, 2, "", "variable", "Constructor"]], "foxes.models.vertical_profiles.UniformProfile.calculate": [[779, 3, 2, "", "data", "Run the profile calculation."], [779, 3, 2, "", "heights", "Run the profile calculation."]], "foxes.models.wake_frames": [[781, 0, 1, "", "DynamicWakes", "Dynamic wakes for any kind of timeseries states."], [787, 0, 1, "", "FarmOrder", "Invokes turbine ordering as defined by the wind farm."], [794, 0, 1, "", "RotorWD", "Align the first axis for each rotor with the local normalized wind direction."], [799, 0, 1, "", "SeqDynamicWakes", "Dynamic wakes for the sequential algorithm."], [807, 0, 1, "", "Streamlines2D", "Streamline following wakes"], [814, 0, 1, "", "Timelines", "Dynamic wakes for spatially uniform timeseries states."], [824, 0, 1, "", "YawedWakes", "Bend the wakes for yawed turbines, based on the Bastankhah 2016 wake model"]], "foxes.models.wake_frames.DynamicWakes": [[782, 2, 1, "", "__init__", "Constructor."], [783, 2, 1, "", "__repr__", "Return repr(self)."], [784, 2, 1, "", "calc_order", "Calculates the order of turbine evaluation."], [785, 2, 1, "", "get_wake_coos", "Calculate wake coordinates of rotor points."], [786, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.DynamicWakes.__init__": [[782, 3, 2, "", "cl_ipars", "Constructor."], [782, 3, 2, "", "dt_min", "Constructor."], [782, 3, 2, "", "kwargs", "Constructor."], [782, 3, 2, "", "max_age", "Constructor."], [782, 3, 2, "", "max_age_mean_ws", "Constructor."], [782, 3, 2, "", "max_length_km", "Constructor."]], "foxes.models.wake_frames.DynamicWakes.calc_order": [[784, 3, 2, "", "algo", "Calculates the order of turbine evaluation."], [784, 3, 2, "", "fdata", "Calculates the order of turbine evaluation."], [784, 3, 2, "", "mdata", "Calculates the order of turbine evaluation."]], "foxes.models.wake_frames.DynamicWakes.get_wake_coos": [[785, 3, 2, "", "algo", "Calculate wake coordinates of rotor points."], [785, 3, 2, "", "downwind_index", "Calculate wake coordinates of rotor points."], [785, 3, 2, "", "fdata", "Calculate wake coordinates of rotor points."], [785, 3, 2, "", "mdata", "Calculate wake coordinates of rotor points."], [785, 3, 2, "", "tdata", "Calculate wake coordinates of rotor points."]], "foxes.models.wake_frames.DynamicWakes.initialize": [[786, 3, 2, "", "algo", "Initializes the model."], [786, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_frames.FarmOrder": [[788, 2, 1, "", "__init__", "Constructor."], [789, 2, 1, "", "calc_order", "Calculates the order of turbine evaluation."], [790, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [791, 2, 1, "", "get_wake_coos", "Calculate wake coordinates of rotor points."], [792, 2, 1, "", "initialize", "Initializes the model."], [793, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_frames.FarmOrder.__init__": [[788, 3, 2, "", "base_frame", "Constructor."], [788, 3, 2, "", "kwargs", "Constructor."]], "foxes.models.wake_frames.FarmOrder.calc_order": [[789, 3, 2, "", "algo", "Calculates the order of turbine evaluation."], [789, 3, 2, "", "fdata", "Calculates the order of turbine evaluation."], [789, 3, 2, "", "mdata", "Calculates the order of turbine evaluation."]], "foxes.models.wake_frames.FarmOrder.get_centreline_points": [[790, 3, 2, "", "algo", "Gets the points along the centreline for given values of x."], [790, 3, 2, "", "downwind_index", "Gets the points along the centreline for given values of x."], [790, 3, 2, "", "fdata", "Gets the points along the centreline for given values of x."], [790, 3, 2, "", "mdata", "Gets the points along the centreline for given values of x."], [790, 3, 2, "", "x", "Gets the points along the centreline for given values of x."]], "foxes.models.wake_frames.FarmOrder.get_wake_coos": [[791, 3, 2, "", "algo", "Calculate wake coordinates of rotor points."], [791, 3, 2, "", "downwind_index", "Calculate wake coordinates of rotor points."], [791, 3, 2, "", "fdata", "Calculate wake coordinates of rotor points."], [791, 3, 2, "", "mdata", "Calculate wake coordinates of rotor points."], [791, 3, 2, "", "tdata", "Calculate wake coordinates of rotor points."]], "foxes.models.wake_frames.FarmOrder.initialize": [[792, 3, 2, "", "algo", "Initializes the model."], [792, 3, 2, "", "force", "Initializes the model."], [792, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_frames.RotorWD": [[795, 2, 1, "", "__init__", "Constructor."], [796, 2, 1, "", "calc_order", "Calculates the order of turbine evaluation."], [797, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [798, 2, 1, "", "get_wake_coos", "Calculate wake coordinates of rotor points."]], "foxes.models.wake_frames.RotorWD.__init__": [[795, 3, 2, "", "kwargs", "Constructor."], [795, 3, 2, "", "var_wd", "Constructor."]], "foxes.models.wake_frames.RotorWD.calc_order": [[796, 3, 2, "", "algo", "Calculates the order of turbine evaluation."], [796, 3, 2, "", "fdata", "Calculates the order of turbine evaluation."], [796, 3, 2, "", "mdata", "Calculates the order of turbine evaluation."]], "foxes.models.wake_frames.RotorWD.get_centreline_points": [[797, 3, 2, "", "algo", "Gets the points along the centreline for given values of x."], [797, 3, 2, "", "downwind_index", "Gets the points along the centreline for given values of x."], [797, 3, 2, "", "fdata", "Gets the points along the centreline for given values of x."], [797, 3, 2, "", "mdata", "Gets the points along the centreline for given values of x."], [797, 3, 2, "", "x", "Gets the points along the centreline for given values of x."]], "foxes.models.wake_frames.RotorWD.get_wake_coos": [[798, 3, 2, "", "algo", "Calculate wake coordinates of rotor points."], [798, 3, 2, "", "downwind_index", "Calculate wake coordinates of rotor points."], [798, 3, 2, "", "fdata", "Calculate wake coordinates of rotor points."], [798, 3, 2, "", "mdata", "Calculate wake coordinates of rotor points."], [798, 3, 2, "", "tdata", "Calculate wake coordinates of rotor points."]], "foxes.models.wake_frames.SeqDynamicWakes": [[800, 2, 1, "", "__init__", "Constructor."], [801, 2, 1, "", "__repr__", "Return repr(self)."], [802, 2, 1, "", "calc_order", "Calculates the order of turbine evaluation."], [803, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [804, 2, 1, "", "get_wake_coos", "Calculate wake coordinates of rotor points."], [805, 2, 1, "", "get_wake_modelling_data", "Return data that is required for computing the wake from source turbines to evaluation points."], [806, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.SeqDynamicWakes.__init__": [[800, 3, 2, "", "cl_ipars", "Constructor."], [800, 3, 2, "", "dt_min", "Constructor."], [800, 3, 2, "", "kwargs", "Constructor."]], "foxes.models.wake_frames.SeqDynamicWakes.calc_order": [[802, 3, 2, "", "algo", "Calculates the order of turbine evaluation."], [802, 3, 2, "", "fdata", "Calculates the order of turbine evaluation."], [802, 3, 2, "", "mdata", "Calculates the order of turbine evaluation."]], "foxes.models.wake_frames.SeqDynamicWakes.get_centreline_points": [[803, 3, 2, "", "algo", "Gets the points along the centreline for given values of x."], [803, 3, 2, "", "downwind_index", "Gets the points along the centreline for given values of x."], [803, 3, 2, "", "fdata", "Gets the points along the centreline for given values of x."], [803, 3, 2, "", "mdata", "Gets the points along the centreline for given values of x."], [803, 3, 2, "", "x", "Gets the points along the centreline for given values of x."]], "foxes.models.wake_frames.SeqDynamicWakes.get_wake_coos": [[804, 3, 2, "", "algo", "Calculate wake coordinates of rotor points."], [804, 3, 2, "", "downwind_index", "Calculate wake coordinates of rotor points."], [804, 3, 2, "", "fdata", "Calculate wake coordinates of rotor points."], [804, 3, 2, "", "mdata", "Calculate wake coordinates of rotor points."], [804, 3, 2, "", "tdata", "Calculate wake coordinates of rotor points."]], "foxes.models.wake_frames.SeqDynamicWakes.get_wake_modelling_data": [[805, 3, 2, "", "algo", "Return data that is required for computing the wake from source turbines to evaluation points."], [805, 3, 2, "", "downwind_index", "Return data that is required for computing the wake from source turbines to evaluation points."], [805, 3, 2, "", "fdata", "Return data that is required for computing the wake from source turbines to evaluation points."], [805, 3, 2, "", "states0", "Return data that is required for computing the wake from source turbines to evaluation points."], [805, 3, 2, "", "target", "Return data that is required for computing the wake from source turbines to evaluation points."], [805, 3, 2, "", "tdata", "Return data that is required for computing the wake from source turbines to evaluation points."], [805, 3, 2, "", "variable", "Return data that is required for computing the wake from source turbines to evaluation points."]], "foxes.models.wake_frames.SeqDynamicWakes.initialize": [[806, 3, 2, "", "algo", "Initializes the model."], [806, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_frames.Streamlines2D": [[808, 2, 1, "", "__init__", "Constructor."], [809, 2, 1, "", "__repr__", "Return repr(self)."], [810, 2, 1, "", "calc_order", "Calculates the order of turbine evaluation."], [811, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [812, 2, 1, "", "get_streamline_data", "Gets streamline data, generating it on the fly"], [813, 2, 1, "", "get_wake_coos", "Calculate wake coordinates of rotor points."]], "foxes.models.wake_frames.Streamlines2D.__init__": [[808, 3, 2, "", "cl_ipars", "Constructor."], [808, 3, 2, "", "kwargs", "Constructor."], [808, 3, 2, "", "max_length_km", "Constructor."], [808, 3, 2, "", "step", "Constructor."]], "foxes.models.wake_frames.Streamlines2D.calc_order": [[810, 3, 2, "", "algo", "Calculates the order of turbine evaluation."], [810, 3, 2, "", "fdata", "Calculates the order of turbine evaluation."], [810, 3, 2, "", "mdata", "Calculates the order of turbine evaluation."]], "foxes.models.wake_frames.Streamlines2D.get_centreline_points": [[811, 3, 2, "", "algo", "Gets the points along the centreline for given values of x."], [811, 3, 2, "", "downwind_index", "Gets the points along the centreline for given values of x."], [811, 3, 2, "", "fdata", "Gets the points along the centreline for given values of x."], [811, 3, 2, "", "mdata", "Gets the points along the centreline for given values of x."], [811, 3, 2, "", "x", "Gets the points along the centreline for given values of x."]], "foxes.models.wake_frames.Streamlines2D.get_streamline_data": [[812, 3, 2, "", "algo", "Gets streamline data, generating it on the fly"], [812, 3, 2, "", "fdata", "Gets streamline data, generating it on the fly"], [812, 3, 2, "", "mdata", "Gets streamline data, generating it on the fly"]], "foxes.models.wake_frames.Streamlines2D.get_wake_coos": [[813, 3, 2, "", "algo", "Calculate wake coordinates of rotor points."], [813, 3, 2, "", "downwind_index", "Calculate wake coordinates of rotor points."], [813, 3, 2, "", "fdata", "Calculate wake coordinates of rotor points."], [813, 3, 2, "", "mdata", "Calculate wake coordinates of rotor points."], [813, 3, 2, "", "tdata", "Calculate wake coordinates of rotor points."]], "foxes.models.wake_frames.Timelines": [[815, 2, 1, "", "__init__", "Constructor."], [816, 2, 1, "", "__repr__", "Return repr(self)."], [817, 2, 1, "", "calc_order", "Calculates the order of turbine evaluation."], [818, 2, 1, "", "finalize", "Finalizes the model."], [819, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [820, 2, 1, "", "get_wake_coos", "Calculate wake coordinates of rotor points."], [821, 2, 1, "", "initialize", "Initializes the model."], [822, 2, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [823, 2, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"]], "foxes.models.wake_frames.Timelines.__init__": [[815, 3, 2, "", "cl_ipars", "Constructor."], [815, 3, 2, "", "dt_min", "Constructor."], [815, 3, 2, "", "kwargs", "Constructor."], [815, 3, 2, "", "max_length_km", "Constructor."]], "foxes.models.wake_frames.Timelines.calc_order": [[817, 3, 2, "", "algo", "Calculates the order of turbine evaluation."], [817, 3, 2, "", "fdata", "Calculates the order of turbine evaluation."], [817, 3, 2, "", "mdata", "Calculates the order of turbine evaluation."]], "foxes.models.wake_frames.Timelines.finalize": [[818, 3, 2, "", "algo", "Finalizes the model."], [818, 3, 2, "", "verbosity", "Finalizes the model."]], "foxes.models.wake_frames.Timelines.get_centreline_points": [[819, 3, 2, "", "algo", "Gets the points along the centreline for given values of x."], [819, 3, 2, "", "downwind_index", "Gets the points along the centreline for given values of x."], [819, 3, 2, "", "fdata", "Gets the points along the centreline for given values of x."], [819, 3, 2, "", "mdata", "Gets the points along the centreline for given values of x."], [819, 3, 2, "", "x", "Gets the points along the centreline for given values of x."]], "foxes.models.wake_frames.Timelines.get_wake_coos": [[820, 3, 2, "", "algo", "Calculate wake coordinates of rotor points."], [820, 3, 2, "", "downwind_index", "Calculate wake coordinates of rotor points."], [820, 3, 2, "", "fdata", "Calculate wake coordinates of rotor points."], [820, 3, 2, "", "mdata", "Calculate wake coordinates of rotor points."], [820, 3, 2, "", "tdata", "Calculate wake coordinates of rotor points."]], "foxes.models.wake_frames.Timelines.initialize": [[821, 3, 2, "", "algo", "Initializes the model."], [821, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_frames.Timelines.set_running": [[822, 3, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [822, 3, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [822, 3, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [822, 3, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [822, 3, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes.models.wake_frames.Timelines.unset_running": [[823, 3, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [823, 3, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [823, 3, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [823, 3, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [823, 3, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes.models.wake_frames.YawedWakes": [[825, 2, 1, "", "__init__", "Constructor."], [826, 2, 1, "", "__repr__", "Return repr(self)."], [827, 2, 1, "", "calc_order", "Calculates the order of turbine evaluation."], [828, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [829, 2, 1, "", "get_wake_coos", "Calculate wake coordinates of rotor points."], [830, 2, 1, "", "initialize", "Initializes the model."], [831, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_frames.YawedWakes.__init__": [[825, 3, 2, "", "alpha", "Constructor."], [825, 3, 2, "", "base_frame", "Constructor."], [825, 3, 2, "", "beta", "Constructor."], [825, 3, 2, "", "induction", "Constructor."], [825, 3, 2, "", "max_length_km", "Constructor."], [825, 3, 2, "", "wake_k", "Constructor."]], "foxes.models.wake_frames.YawedWakes.calc_order": [[827, 3, 2, "", "algo", "Calculates the order of turbine evaluation."], [827, 3, 2, "", "fdata", "Calculates the order of turbine evaluation."], [827, 3, 2, "", "mdata", "Calculates the order of turbine evaluation."]], "foxes.models.wake_frames.YawedWakes.get_centreline_points": [[828, 3, 2, "", "algo", "Gets the points along the centreline for given values of x."], [828, 3, 2, "", "downwind_index", "Gets the points along the centreline for given values of x."], [828, 3, 2, "", "fdata", "Gets the points along the centreline for given values of x."], [828, 3, 2, "", "mdata", "Gets the points along the centreline for given values of x."], [828, 3, 2, "", "x", "Gets the points along the centreline for given values of x."]], "foxes.models.wake_frames.YawedWakes.get_wake_coos": [[829, 3, 2, "", "algo", "Calculate wake coordinates of rotor points."], [829, 3, 2, "", "downwind_index", "Calculate wake coordinates of rotor points."], [829, 3, 2, "", "fdata", "Calculate wake coordinates of rotor points."], [829, 3, 2, "", "mdata", "Calculate wake coordinates of rotor points."], [829, 3, 2, "", "tdata", "Calculate wake coordinates of rotor points."]], "foxes.models.wake_frames.YawedWakes.initialize": [[830, 3, 2, "", "algo", "Initializes the model."], [830, 3, 2, "", "force", "Initializes the model."], [830, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models": [[832, 0, 1, "", "AxisymmetricWakeModel", "Abstract base class for wake models that depend on (x, r) separately."], [835, 0, 1, "", "DistSlicedWakeModel", "Abstract base class for wake models for which the x-denpendency can be separated from the yz-dependency."], [842, 0, 1, "", "GaussianWakeModel", "Abstract base class for Gaussian wake models."], [845, 0, 1, "", "TopHatWakeModel", "Abstract base class for top-hat wake models."]], "foxes.models.wake_models.AxisymmetricWakeModel": [[833, 2, 1, "", "calc_wakes_x_r", "Calculate wake deltas."], [834, 2, 1, "", "calc_wakes_x_yz", "Calculate wake deltas."]], "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_x_r": [[833, 3, 2, "", "algo", "Calculate wake deltas."], [833, 3, 2, "", "downwind_index", "Calculate wake deltas."], [833, 3, 2, "", "fdata", "Calculate wake deltas."], [833, 3, 2, "", "mdata", "Calculate wake deltas."], [833, 3, 2, "", "r", "Calculate wake deltas."], [833, 3, 2, "", "tdata", "Calculate wake deltas."], [833, 3, 2, "", "x", "Calculate wake deltas."]], "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_x_yz": [[834, 3, 2, "", "algo", "Calculate wake deltas."], [834, 3, 2, "", "downwind_index", "Calculate wake deltas."], [834, 3, 2, "", "fdata", "Calculate wake deltas."], [834, 3, 2, "", "mdata", "Calculate wake deltas."], [834, 3, 2, "", "tdata", "Calculate wake deltas."], [834, 3, 2, "", "x", "Calculate wake deltas."], [834, 3, 2, "", "yz", "Calculate wake deltas."]], "foxes.models.wake_models.DistSlicedWakeModel": [[836, 2, 1, "", "__init__", "Constructor."], [837, 2, 1, "", "calc_wakes_x_yz", "Calculate wake deltas."], [838, 2, 1, "", "contribute", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [839, 2, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [840, 2, 1, "", "initialize", "Initializes the model."], [841, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.DistSlicedWakeModel.__init__": [[836, 3, 2, "", "superpositions", "Constructor."]], "foxes.models.wake_models.DistSlicedWakeModel.calc_wakes_x_yz": [[837, 3, 2, "", "algo", "Calculate wake deltas."], [837, 3, 2, "", "downwind_index", "Calculate wake deltas."], [837, 3, 2, "", "fdata", "Calculate wake deltas."], [837, 3, 2, "", "mdata", "Calculate wake deltas."], [837, 3, 2, "", "tdata", "Calculate wake deltas."], [837, 3, 2, "", "x", "Calculate wake deltas."], [837, 3, 2, "", "yz", "Calculate wake deltas."]], "foxes.models.wake_models.DistSlicedWakeModel.contribute": [[838, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [838, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [838, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [838, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [838, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [838, 3, 2, "", "wake_coos", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [838, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.models.wake_models.DistSlicedWakeModel.finalize_wake_deltas": [[839, 3, 2, "", "algo", "Finalize the wake calculation."], [839, 3, 2, "", "amb_results", "Finalize the wake calculation."], [839, 3, 2, "", "fdata", "Finalize the wake calculation."], [839, 3, 2, "", "mdata", "Finalize the wake calculation."], [839, 3, 2, "", "wake_deltas", "Finalize the wake calculation."]], "foxes.models.wake_models.DistSlicedWakeModel.initialize": [[840, 3, 2, "", "algo", "Initializes the model."], [840, 3, 2, "", "force", "Initializes the model."], [840, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models.GaussianWakeModel": [[843, 2, 1, "", "calc_amplitude_sigma", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [844, 2, 1, "", "calc_wakes_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.GaussianWakeModel.calc_amplitude_sigma": [[843, 3, 2, "", "algo", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [843, 3, 2, "", "downwind_index", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [843, 3, 2, "", "fdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [843, 3, 2, "", "mdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [843, 3, 2, "", "tdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [843, 3, 2, "", "x", "Calculate the amplitude and the sigma, both depend only on x (not on r)."]], "foxes.models.wake_models.GaussianWakeModel.calc_wakes_x_r": [[844, 3, 2, "", "algo", "Calculate wake deltas."], [844, 3, 2, "", "downwind_index", "Calculate wake deltas."], [844, 3, 2, "", "fdata", "Calculate wake deltas."], [844, 3, 2, "", "mdata", "Calculate wake deltas."], [844, 3, 2, "", "r", "Calculate wake deltas."], [844, 3, 2, "", "tdata", "Calculate wake deltas."], [844, 3, 2, "", "x", "Calculate wake deltas."]], "foxes.models.wake_models.TopHatWakeModel": [[846, 2, 1, "", "__init__", "Constructor."], [847, 2, 1, "", "calc_centreline", "Calculate centre line results of wake deltas."], [848, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [849, 2, 1, "", "calc_wakes_x_r", "Calculate wake deltas."], [850, 2, 1, "", "initialize", "Initializes the model."], [851, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.TopHatWakeModel.__init__": [[846, 3, 2, "", "induction", "Constructor."], [846, 3, 2, "", "superpositions", "Constructor."]], "foxes.models.wake_models.TopHatWakeModel.calc_centreline": [[847, 3, 2, "", "algo", "Calculate centre line results of wake deltas."], [847, 3, 2, "", "ct", "Calculate centre line results of wake deltas."], [847, 3, 2, "", "downwind_index", "Calculate centre line results of wake deltas."], [847, 3, 2, "", "fdata", "Calculate centre line results of wake deltas."], [847, 3, 2, "", "mdata", "Calculate centre line results of wake deltas."], [847, 3, 2, "", "st_sel", "Calculate centre line results of wake deltas."], [847, 3, 2, "", "tdata", "Calculate centre line results of wake deltas."], [847, 3, 2, "", "wake_r", "Calculate centre line results of wake deltas."], [847, 3, 2, "", "x", "Calculate centre line results of wake deltas."]], "foxes.models.wake_models.TopHatWakeModel.calc_wake_radius": [[848, 3, 2, "", "algo", "Calculate the wake radius, depending on x only (not r)."], [848, 3, 2, "", "ct", "Calculate the wake radius, depending on x only (not r)."], [848, 3, 2, "", "downwind_index", "Calculate the wake radius, depending on x only (not r)."], [848, 3, 2, "", "fdata", "Calculate the wake radius, depending on x only (not r)."], [848, 3, 2, "", "mdata", "Calculate the wake radius, depending on x only (not r)."], [848, 3, 2, "", "tdata", "Calculate the wake radius, depending on x only (not r)."], [848, 3, 2, "", "x", "Calculate the wake radius, depending on x only (not r)."]], "foxes.models.wake_models.TopHatWakeModel.calc_wakes_x_r": [[849, 3, 2, "", "algo", "Calculate wake deltas."], [849, 3, 2, "", "downwind_index", "Calculate wake deltas."], [849, 3, 2, "", "fdata", "Calculate wake deltas."], [849, 3, 2, "", "mdata", "Calculate wake deltas."], [849, 3, 2, "", "r", "Calculate wake deltas."], [849, 3, 2, "", "tdata", "Calculate wake deltas."], [849, 3, 2, "", "x", "Calculate wake deltas."]], "foxes.models.wake_models.TopHatWakeModel.initialize": [[850, 3, 2, "", "algo", "Initializes the model."], [850, 3, 2, "", "force", "Initializes the model."], [850, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models.induction": [[852, 0, 1, "", "RankineHalfBody", "The Rankine half body induction wake model"], [860, 0, 1, "", "Rathmann", "The Rathmann induction wake model"], [868, 0, 1, "", "SelfSimilar", "The self-similar induction wake model from Troldborg and Meyer Forsting"], [876, 0, 1, "", "SelfSimilar2020", "The self-similar 2020 induction wake model from Troldborg and Meyer Forsting"], [877, 0, 1, "", "VortexSheet", "The Vortex Sheet model implemented with a radial dependency"]], "foxes.models.wake_models.induction.RankineHalfBody": [[853, 2, 1, "", "__init__", "Constructor."], [854, 2, 1, "", "__repr__", "Return repr(self)."], [855, 2, 1, "", "contribute", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [856, 2, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [857, 2, 1, "", "initialize", "Initializes the model."], [858, 2, 1, "", "new_wake_deltas", "Creates new empty wake delta arrays."], [859, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.induction.RankineHalfBody.__init__": [[853, 3, 2, "", "induction", "Constructor."]], "foxes.models.wake_models.induction.RankineHalfBody.contribute": [[855, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [855, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [855, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [855, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [855, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [855, 3, 2, "", "wake_coos", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [855, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.models.wake_models.induction.RankineHalfBody.finalize_wake_deltas": [[856, 3, 2, "", "algo", "Finalize the wake calculation."], [856, 3, 2, "", "amb_results", "Finalize the wake calculation."], [856, 3, 2, "", "fdata", "Finalize the wake calculation."], [856, 3, 2, "", "mdata", "Finalize the wake calculation."], [856, 3, 2, "", "wake_deltas", "Finalize the wake calculation."]], "foxes.models.wake_models.induction.RankineHalfBody.initialize": [[857, 3, 2, "", "algo", "Initializes the model."], [857, 3, 2, "", "force", "Initializes the model."], [857, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models.induction.RankineHalfBody.new_wake_deltas": [[858, 3, 2, "", "algo", "Creates new empty wake delta arrays."], [858, 3, 2, "", "fdata", "Creates new empty wake delta arrays."], [858, 3, 2, "", "mdata", "Creates new empty wake delta arrays."], [858, 3, 2, "", "tdata", "Creates new empty wake delta arrays."]], "foxes.models.wake_models.induction.Rathmann": [[861, 2, 1, "", "__init__", "Constructor."], [862, 2, 1, "", "__repr__", "Return repr(self)."], [863, 2, 1, "", "contribute", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [864, 2, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [865, 2, 1, "", "initialize", "Initializes the model."], [866, 2, 1, "", "new_wake_deltas", "Creates new empty wake delta arrays."], [867, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.induction.Rathmann.__init__": [[861, 3, 2, "", "induction", "Constructor."], [861, 3, 2, "", "pre_rotor_only", "Constructor."], [861, 3, 2, "", "superposition", "Constructor."]], "foxes.models.wake_models.induction.Rathmann.contribute": [[863, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [863, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [863, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [863, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [863, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [863, 3, 2, "", "wake_coos", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [863, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.models.wake_models.induction.Rathmann.finalize_wake_deltas": [[864, 3, 2, "", "algo", "Finalize the wake calculation."], [864, 3, 2, "", "amb_results", "Finalize the wake calculation."], [864, 3, 2, "", "fdata", "Finalize the wake calculation."], [864, 3, 2, "", "mdata", "Finalize the wake calculation."], [864, 3, 2, "", "wake_deltas", "Finalize the wake calculation."]], "foxes.models.wake_models.induction.Rathmann.initialize": [[865, 3, 2, "", "algo", "Initializes the model."], [865, 3, 2, "", "force", "Initializes the model."], [865, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models.induction.Rathmann.new_wake_deltas": [[866, 3, 2, "", "algo", "Creates new empty wake delta arrays."], [866, 3, 2, "", "fdata", "Creates new empty wake delta arrays."], [866, 3, 2, "", "mdata", "Creates new empty wake delta arrays."], [866, 3, 2, "", "tdata", "Creates new empty wake delta arrays."]], "foxes.models.wake_models.induction.SelfSimilar": [[869, 2, 1, "", "__init__", "Constructor."], [870, 2, 1, "", "__repr__", "Return repr(self)."], [871, 2, 1, "", "contribute", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [872, 2, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [873, 2, 1, "", "initialize", "Initializes the model."], [874, 2, 1, "", "new_wake_deltas", "Creates new empty wake delta arrays."], [875, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.induction.SelfSimilar.__init__": [[869, 3, 2, "", "gamma", "Constructor."], [869, 3, 2, "", "induction", "Constructor."], [869, 3, 2, "", "pre_rotor_only", "Constructor."], [869, 3, 2, "", "superposition", "Constructor."]], "foxes.models.wake_models.induction.SelfSimilar.contribute": [[871, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [871, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [871, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [871, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [871, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [871, 3, 2, "", "wake_coos", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [871, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.models.wake_models.induction.SelfSimilar.finalize_wake_deltas": [[872, 3, 2, "", "algo", "Finalize the wake calculation."], [872, 3, 2, "", "amb_results", "Finalize the wake calculation."], [872, 3, 2, "", "fdata", "Finalize the wake calculation."], [872, 3, 2, "", "mdata", "Finalize the wake calculation."], [872, 3, 2, "", "wake_deltas", "Finalize the wake calculation."]], "foxes.models.wake_models.induction.SelfSimilar.initialize": [[873, 3, 2, "", "algo", "Initializes the model."], [873, 3, 2, "", "force", "Initializes the model."], [873, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models.induction.SelfSimilar.new_wake_deltas": [[874, 3, 2, "", "algo", "Creates new empty wake delta arrays."], [874, 3, 2, "", "fdata", "Creates new empty wake delta arrays."], [874, 3, 2, "", "mdata", "Creates new empty wake delta arrays."], [874, 3, 2, "", "tdata", "Creates new empty wake delta arrays."]], "foxes.models.wake_models.induction.VortexSheet": [[878, 2, 1, "", "__init__", "Constructor."], [879, 2, 1, "", "__repr__", "Return repr(self)."], [880, 2, 1, "", "contribute", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [881, 2, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [882, 2, 1, "", "initialize", "Initializes the model."], [883, 2, 1, "", "new_wake_deltas", "Initialize wake delta storage."], [884, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.induction.VortexSheet.__init__": [[878, 3, 2, "", "induction", "Constructor."], [878, 3, 2, "", "pre_rotor_only", "Constructor."], [878, 3, 2, "", "superposition", "Constructor."]], "foxes.models.wake_models.induction.VortexSheet.contribute": [[880, 3, 2, "", "algo", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [880, 3, 2, "", "downwind_index", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [880, 3, 2, "", "fdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [880, 3, 2, "", "mdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [880, 3, 2, "", "tdata", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [880, 3, 2, "", "wake_coos", "Modifies wake deltas at target points by contributions from the specified wake source turbines."], [880, 3, 2, "", "wake_deltas", "Modifies wake deltas at target points by contributions from the specified wake source turbines."]], "foxes.models.wake_models.induction.VortexSheet.finalize_wake_deltas": [[881, 3, 2, "", "algo", "Finalize the wake calculation."], [881, 3, 2, "", "amb_results", "Finalize the wake calculation."], [881, 3, 2, "", "fdata", "Finalize the wake calculation."], [881, 3, 2, "", "mdata", "Finalize the wake calculation."], [881, 3, 2, "", "wake_deltas", "Finalize the wake calculation."]], "foxes.models.wake_models.induction.VortexSheet.initialize": [[882, 3, 2, "", "algo", "Initializes the model."], [882, 3, 2, "", "force", "Initializes the model."], [882, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models.induction.VortexSheet.new_wake_deltas": [[883, 3, 2, "", "algo", "Initialize wake delta storage."], [883, 3, 2, "", "fdata", "Initialize wake delta storage."], [883, 3, 2, "", "mdata", "Initialize wake delta storage."], [883, 3, 2, "", "tdata", "Initialize wake delta storage."]], "foxes.models.wake_models.ti": [[885, 0, 1, "", "CrespoHernandezTIWake", "The Crespo and Hernandez TI empirical correlation"], [892, 0, 1, "", "IECTIWake", "The TI wake model from IEC-64100-1-2005-8 (2005):"]], "foxes.models.wake_models.ti.CrespoHernandezTIWake": [[886, 2, 1, "", "__init__", "Constructor."], [887, 2, 1, "", "__repr__", "Return repr(self)."], [888, 2, 1, "", "calc_centreline", "Calculate centre line results of wake deltas."], [889, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [890, 2, 1, "", "new_wake_deltas", "Creates new empty wake delta arrays."], [891, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.ti.CrespoHernandezTIWake.__init__": [[886, 3, 2, "", "a_far", "Constructor."], [886, 3, 2, "", "a_near", "Constructor."], [886, 3, 2, "", "e1", "Constructor."], [886, 3, 2, "", "e2", "Constructor."], [886, 3, 2, "", "e3", "Constructor."], [886, 3, 2, "", "induction", "Constructor."], [886, 3, 2, "", "near_wake_D", "Constructor."], [886, 3, 2, "", "sbeta_factor", "Constructor."], [886, 3, 2, "", "superposition", "Constructor."], [886, 3, 2, "", "use_ambti", "Constructor."], [886, 3, 2, "", "wake_k", "Constructor."]], "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_centreline": [[888, 3, 2, "", "algo", "Calculate centre line results of wake deltas."], [888, 3, 2, "", "ct", "Calculate centre line results of wake deltas."], [888, 3, 2, "", "downwind_index", "Calculate centre line results of wake deltas."], [888, 3, 2, "", "fdata", "Calculate centre line results of wake deltas."], [888, 3, 2, "", "mdata", "Calculate centre line results of wake deltas."], [888, 3, 2, "", "st_sel", "Calculate centre line results of wake deltas."], [888, 3, 2, "", "tdata", "Calculate centre line results of wake deltas."], [888, 3, 2, "", "wake_r", "Calculate centre line results of wake deltas."], [888, 3, 2, "", "x", "Calculate centre line results of wake deltas."]], "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_wake_radius": [[889, 3, 2, "", "algo", "Calculate the wake radius, depending on x only (not r)."], [889, 3, 2, "", "ct", "Calculate the wake radius, depending on x only (not r)."], [889, 3, 2, "", "downwind_index", "Calculate the wake radius, depending on x only (not r)."], [889, 3, 2, "", "fdata", "Calculate the wake radius, depending on x only (not r)."], [889, 3, 2, "", "mdata", "Calculate the wake radius, depending on x only (not r)."], [889, 3, 2, "", "tdata", "Calculate the wake radius, depending on x only (not r)."], [889, 3, 2, "", "x", "Calculate the wake radius, depending on x only (not r)."]], "foxes.models.wake_models.ti.CrespoHernandezTIWake.new_wake_deltas": [[890, 3, 2, "", "algo", "Creates new empty wake delta arrays."], [890, 3, 2, "", "fdata", "Creates new empty wake delta arrays."], [890, 3, 2, "", "mdata", "Creates new empty wake delta arrays."], [890, 3, 2, "", "tdata", "Creates new empty wake delta arrays."]], "foxes.models.wake_models.ti.IECTIWake": [[893, 2, 1, "", "__init__", "Constructor."], [894, 2, 1, "", "__repr__", "Return repr(self)."], [895, 2, 1, "", "calc_centreline", "Calculate centre line results of wake deltas."], [896, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [897, 2, 1, "", "new_wake_deltas", "Creates new empty wake delta arrays."], [898, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.ti.IECTIWake.__init__": [[893, 3, 2, "", "iec_type", "Constructor."], [893, 3, 2, "", "induction", "Constructor."], [893, 3, 2, "", "opening_angle", "Constructor."], [893, 3, 2, "", "superposition", "Constructor."], [893, 3, 2, "", "wake_k", "Constructor."]], "foxes.models.wake_models.ti.IECTIWake.calc_centreline": [[895, 3, 2, "", "algo", "Calculate centre line results of wake deltas."], [895, 3, 2, "", "ct", "Calculate centre line results of wake deltas."], [895, 3, 2, "", "downwind_index", "Calculate centre line results of wake deltas."], [895, 3, 2, "", "fdata", "Calculate centre line results of wake deltas."], [895, 3, 2, "", "mdata", "Calculate centre line results of wake deltas."], [895, 3, 2, "", "st_sel", "Calculate centre line results of wake deltas."], [895, 3, 2, "", "tdata", "Calculate centre line results of wake deltas."], [895, 3, 2, "", "wake_r", "Calculate centre line results of wake deltas."], [895, 3, 2, "", "x", "Calculate centre line results of wake deltas."]], "foxes.models.wake_models.ti.IECTIWake.calc_wake_radius": [[896, 3, 2, "", "algo", "Calculate the wake radius, depending on x only (not r)."], [896, 3, 2, "", "ct", "Calculate the wake radius, depending on x only (not r)."], [896, 3, 2, "", "downwind_index", "Calculate the wake radius, depending on x only (not r)."], [896, 3, 2, "", "fdata", "Calculate the wake radius, depending on x only (not r)."], [896, 3, 2, "", "mdata", "Calculate the wake radius, depending on x only (not r)."], [896, 3, 2, "", "tdata", "Calculate the wake radius, depending on x only (not r)."], [896, 3, 2, "", "x", "Calculate the wake radius, depending on x only (not r)."]], "foxes.models.wake_models.ti.IECTIWake.new_wake_deltas": [[897, 3, 2, "", "algo", "Creates new empty wake delta arrays."], [897, 3, 2, "", "fdata", "Creates new empty wake delta arrays."], [897, 3, 2, "", "mdata", "Creates new empty wake delta arrays."], [897, 3, 2, "", "tdata", "Creates new empty wake delta arrays."]], "foxes.models.wake_models.wind": [[899, 0, 1, "", "Bastankhah2014", "The Bastankhah 2014 wake model"], [905, 0, 1, "", "Bastankhah2016", "The Bastankhah 2016 wake model"], [911, 0, 1, "", "Bastankhah2016Model", "Common calculations for the wake model and the wake frame, such that code repetitions can be avoided."], [934, 0, 1, "", "JensenWake", "The Jensen wake model."], [939, 0, 1, "", "TurbOParkWake", "The TurbOPark wake model"], [945, 0, 1, "", "TurbOParkWakeIX", "The generalized TurbOPark wake model, integrating TI over the streamline."]], "foxes.models.wake_models.wind.Bastankhah2014": [[900, 2, 1, "", "__init__", "Constructor."], [901, 2, 1, "", "__repr__", "Return repr(self)."], [902, 2, 1, "", "calc_amplitude_sigma", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [903, 2, 1, "", "initialize", "Initializes the model."], [904, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.wind.Bastankhah2014.__init__": [[900, 3, 2, "", "induction", "Constructor."], [900, 3, 2, "", "sbeta_factor", "Constructor."], [900, 3, 2, "", "superposition", "Constructor."], [900, 3, 2, "", "wake_k", "Constructor."]], "foxes.models.wake_models.wind.Bastankhah2014.calc_amplitude_sigma": [[902, 3, 2, "", "algo", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [902, 3, 2, "", "downwind_index", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [902, 3, 2, "", "fdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [902, 3, 2, "", "mdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [902, 3, 2, "", "tdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [902, 3, 2, "", "x", "Calculate the amplitude and the sigma, both depend only on x (not on r)."]], "foxes.models.wake_models.wind.Bastankhah2014.initialize": [[903, 3, 2, "", "algo", "Initializes the model."], [903, 3, 2, "", "force", "Initializes the model."], [903, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models.wind.Bastankhah2016": [[906, 2, 1, "", "__init__", "Constructor."], [907, 2, 1, "", "__repr__", "Return repr(self)."], [908, 2, 1, "", "calc_wakes_x_yz", "Calculate wake deltas."], [909, 2, 1, "", "initialize", "Initializes the model."], [910, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.wind.Bastankhah2016.__init__": [[906, 3, 2, "", "alpha", "Constructor."], [906, 3, 2, "", "beta", "Constructor."], [906, 3, 2, "", "induction", "Constructor."], [906, 3, 2, "", "superposition", "Constructor."], [906, 3, 2, "", "wake_k", "Constructor."]], "foxes.models.wake_models.wind.Bastankhah2016.calc_wakes_x_yz": [[908, 3, 2, "", "algo", "Calculate wake deltas."], [908, 3, 2, "", "downwind_index", "Calculate wake deltas."], [908, 3, 2, "", "fdata", "Calculate wake deltas."], [908, 3, 2, "", "mdata", "Calculate wake deltas."], [908, 3, 2, "", "tdata", "Calculate wake deltas."], [908, 3, 2, "", "x", "Calculate wake deltas."], [908, 3, 2, "", "yz", "Calculate wake deltas."]], "foxes.models.wake_models.wind.Bastankhah2016.initialize": [[909, 3, 2, "", "algo", "Initializes the model."], [909, 3, 2, "", "force", "Initializes the model."], [909, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models.wind.Bastankhah2016Model": [[912, 1, 1, "", "AMPL_FAR", ""], [913, 1, 1, "", "AMPL_NEAR", ""], [914, 1, 1, "", "CHECK", ""], [915, 1, 1, "", "DELTA_FAR", ""], [916, 1, 1, "", "DELTA_NEAR", ""], [917, 1, 1, "", "MDATA_KEY", ""], [918, 1, 1, "", "NEAR", ""], [919, 1, 1, "", "PARS", ""], [920, 1, 1, "", "R_PC", ""], [921, 1, 1, "", "R_PC_S", ""], [922, 1, 1, "", "SIGMA_Y_FAR", ""], [923, 1, 1, "", "SIGMA_Z_FAR", ""], [924, 1, 1, "", "ST_SEL", ""], [925, 1, 1, "", "X0", ""], [926, 2, 1, "", "__init__", "Constructor."], [927, 2, 1, "", "calc_data", "Calculate common model data, store it in mdata."], [928, 2, 1, "", "clean", "Clean all data"], [929, 2, 1, "", "get_data", "Return data entry"], [930, 2, 1, "", "has_data", "Check if data exists"], [931, 2, 1, "", "initialize", "Initializes the model."], [932, 4, 1, "", "pars", "Dictionary of the model parameters"], [933, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.wind.Bastankhah2016Model.__init__": [[926, 3, 2, "", "alpha", "Constructor."], [926, 3, 2, "", "beta", "Constructor."], [926, 3, 2, "", "induction", "Constructor."]], "foxes.models.wake_models.wind.Bastankhah2016Model.calc_data": [[927, 3, 2, "", "algo", "Calculate common model data, store it in mdata."], [927, 3, 2, "", "downwind_index", "Calculate common model data, store it in mdata."], [927, 3, 2, "", "fdata", "Calculate common model data, store it in mdata."], [927, 3, 2, "", "gamma", "Calculate common model data, store it in mdata."], [927, 3, 2, "", "k", "Calculate common model data, store it in mdata."], [927, 3, 2, "", "mdata", "Calculate common model data, store it in mdata."], [927, 3, 2, "", "tdata", "Calculate common model data, store it in mdata."], [927, 3, 2, "", "x", "Calculate common model data, store it in mdata."]], "foxes.models.wake_models.wind.Bastankhah2016Model.clean": [[928, 3, 2, "", "mdata", "Clean all data"]], "foxes.models.wake_models.wind.Bastankhah2016Model.get_data": [[929, 3, 2, "", "key", "Return data entry"], [929, 3, 2, "", "mdata", "Return data entry"]], "foxes.models.wake_models.wind.Bastankhah2016Model.has_data": [[930, 3, 2, "", "downwind_index", "Check if data exists"], [930, 3, 2, "", "mdata", "Check if data exists"], [930, 3, 2, "", "x", "Check if data exists"]], "foxes.models.wake_models.wind.Bastankhah2016Model.initialize": [[931, 3, 2, "", "algo", "Initializes the model."], [931, 3, 2, "", "force", "Initializes the model."], [931, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models.wind.JensenWake": [[935, 2, 1, "", "__init__", "Constructor."], [936, 2, 1, "", "__repr__", "Return repr(self)."], [937, 2, 1, "", "calc_centreline", "Calculate centre line results of wake deltas."], [938, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."]], "foxes.models.wake_models.wind.JensenWake.__init__": [[935, 3, 2, "", "induction", "Constructor."], [935, 3, 2, "", "superposition", "Constructor."], [935, 3, 2, "", "wake_k", "Constructor."]], "foxes.models.wake_models.wind.JensenWake.calc_centreline": [[937, 3, 2, "", "algo", "Calculate centre line results of wake deltas."], [937, 3, 2, "", "ct", "Calculate centre line results of wake deltas."], [937, 3, 2, "", "downwind_index", "Calculate centre line results of wake deltas."], [937, 3, 2, "", "fdata", "Calculate centre line results of wake deltas."], [937, 3, 2, "", "mdata", "Calculate centre line results of wake deltas."], [937, 3, 2, "", "st_sel", "Calculate centre line results of wake deltas."], [937, 3, 2, "", "tdata", "Calculate centre line results of wake deltas."], [937, 3, 2, "", "wake_r", "Calculate centre line results of wake deltas."], [937, 3, 2, "", "x", "Calculate centre line results of wake deltas."]], "foxes.models.wake_models.wind.JensenWake.calc_wake_radius": [[938, 3, 2, "", "algo", "Calculate the wake radius, depending on x only (not r)."], [938, 3, 2, "", "ct", "Calculate the wake radius, depending on x only (not r)."], [938, 3, 2, "", "downwind_index", "Calculate the wake radius, depending on x only (not r)."], [938, 3, 2, "", "fdata", "Calculate the wake radius, depending on x only (not r)."], [938, 3, 2, "", "mdata", "Calculate the wake radius, depending on x only (not r)."], [938, 3, 2, "", "tdata", "Calculate the wake radius, depending on x only (not r)."], [938, 3, 2, "", "x", "Calculate the wake radius, depending on x only (not r)."]], "foxes.models.wake_models.wind.TurbOParkWake": [[940, 2, 1, "", "__init__", "Constructor."], [941, 2, 1, "", "__repr__", "Return repr(self)."], [942, 2, 1, "", "calc_amplitude_sigma", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [943, 2, 1, "", "initialize", "Initializes the model."], [944, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.wind.TurbOParkWake.__init__": [[940, 3, 2, "", "c1", "Constructor."], [940, 3, 2, "", "c2", "Constructor."], [940, 3, 2, "", "induction", "Constructor."], [940, 3, 2, "", "sbeta_factor", "Constructor."], [940, 3, 2, "", "superposition", "Constructor."], [940, 3, 2, "", "wake_k", "Constructor."]], "foxes.models.wake_models.wind.TurbOParkWake.calc_amplitude_sigma": [[942, 3, 2, "", "algo", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [942, 3, 2, "", "downwind_index", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [942, 3, 2, "", "fdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [942, 3, 2, "", "mdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [942, 3, 2, "", "tdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [942, 3, 2, "", "x", "Calculate the amplitude and the sigma, both depend only on x (not on r)."]], "foxes.models.wake_models.wind.TurbOParkWake.initialize": [[943, 3, 2, "", "algo", "Initializes the model."], [943, 3, 2, "", "force", "Initializes the model."], [943, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models.wind.TurbOParkWakeIX": [[946, 2, 1, "", "__init__", "Constructor."], [947, 2, 1, "", "__repr__", "Return repr(self)."], [948, 2, 1, "", "calc_amplitude_sigma", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [949, 2, 1, "", "finalize", "Finalizes the model."], [950, 2, 1, "", "initialize", "Initializes the model."], [951, 2, 1, "", "new_wake_deltas", "Creates new empty wake delta arrays."], [952, 2, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.wind.TurbOParkWakeIX.__init__": [[946, 3, 2, "", "dx", "Constructor."], [946, 3, 2, "", "induction", "Constructor."], [946, 3, 2, "", "ipars", "Constructor."], [946, 3, 2, "", "sbeta_factor", "Constructor."], [946, 3, 2, "", "self_wake", "Constructor."], [946, 3, 2, "", "superposition", "Constructor."], [946, 3, 2, "", "wake_k", "Constructor."]], "foxes.models.wake_models.wind.TurbOParkWakeIX.calc_amplitude_sigma": [[948, 3, 2, "", "algo", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [948, 3, 2, "", "downwind_index", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [948, 3, 2, "", "fdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [948, 3, 2, "", "mdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [948, 3, 2, "", "tdata", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [948, 3, 2, "", "x", "Calculate the amplitude and the sigma, both depend only on x (not on r)."]], "foxes.models.wake_models.wind.TurbOParkWakeIX.finalize": [[949, 3, 2, "", "algo", "Finalizes the model."], [949, 3, 2, "", "verbosity", "Finalizes the model."]], "foxes.models.wake_models.wind.TurbOParkWakeIX.initialize": [[950, 3, 2, "", "algo", "Initializes the model."], [950, 3, 2, "", "force", "Initializes the model."], [950, 3, 2, "", "verbosity", "Initializes the model."]], "foxes.models.wake_models.wind.TurbOParkWakeIX.new_wake_deltas": [[951, 3, 2, "", "algo", "Creates new empty wake delta arrays."], [951, 3, 2, "", "fdata", "Creates new empty wake delta arrays."], [951, 3, 2, "", "mdata", "Creates new empty wake delta arrays."], [951, 3, 2, "", "tdata", "Creates new empty wake delta arrays."]], "foxes.models.wake_superpositions": [[953, 0, 1, "", "TILinear", "Linear wake superposition for TI."], [958, 0, 1, "", "TIMax", "Max wake superposition for TI."], [963, 0, 1, "", "TIPow", "Power wake superposition for TI."], [968, 0, 1, "", "TIQuadratic", "Quadratic wake superposition for TI."], [973, 0, 1, "", "WSLinear", "Linear superposition of wind deficit results"], [979, 0, 1, "", "WSLinearLocal", "Local linear superposition of wind deficit results"], [985, 0, 1, "", "WSMax", "Max superposition of wind deficit results"], [991, 0, 1, "", "WSMaxLocal", "Local max superposition of wind deficit results"], [997, 0, 1, "", "WSPow", "Power superposition of wind deficit results"], [1003, 0, 1, "", "WSPowLocal", "Local power superposition of wind deficit results"], [1009, 0, 1, "", "WSProduct", "Product superposition of wind deficit results"], [1015, 0, 1, "", "WSQuadratic", "Quadratic superposition of wind deficit results"], [1021, 0, 1, "", "WSQuadraticLocal", "Local quadratic superposition of wind deficit results"]], "foxes.models.wake_superpositions.TILinear": [[954, 2, 1, "", "__init__", "Constructor."], [955, 2, 1, "", "__repr__", "Return repr(self)."], [956, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [957, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.TILinear.__init__": [[954, 3, 2, "", "superp_to_amb", "Constructor."]], "foxes.models.wake_superpositions.TILinear.add_wake": [[956, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [956, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [956, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [956, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [956, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [956, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [956, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [956, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [956, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.TILinear.calc_final_wake_delta": [[957, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [957, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [957, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [957, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [957, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [957, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.TIMax": [[959, 2, 1, "", "__init__", "Constructor."], [960, 2, 1, "", "__repr__", "Return repr(self)."], [961, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [962, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.TIMax.__init__": [[959, 3, 2, "", "superp_to_amb", "Constructor."]], "foxes.models.wake_superpositions.TIMax.add_wake": [[961, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [961, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [961, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [961, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [961, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [961, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [961, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [961, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [961, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.TIMax.calc_final_wake_delta": [[962, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [962, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [962, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [962, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [962, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [962, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.TIPow": [[964, 2, 1, "", "__init__", "Constructor."], [965, 2, 1, "", "__repr__", "Return repr(self)."], [966, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [967, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.TIPow.__init__": [[964, 3, 2, "", "pow", "Constructor."], [964, 3, 2, "", "superp_to_amb", "Constructor."]], "foxes.models.wake_superpositions.TIPow.add_wake": [[966, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [966, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [966, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [966, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [966, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [966, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [966, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [966, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [966, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.TIPow.calc_final_wake_delta": [[967, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [967, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [967, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [967, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [967, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [967, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.TIQuadratic": [[969, 2, 1, "", "__init__", "Constructor."], [970, 2, 1, "", "__repr__", "Return repr(self)."], [971, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [972, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.TIQuadratic.__init__": [[969, 3, 2, "", "superp_to_amb", "Constructor."]], "foxes.models.wake_superpositions.TIQuadratic.add_wake": [[971, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [971, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [971, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [971, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [971, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [971, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [971, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [971, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [971, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.TIQuadratic.calc_final_wake_delta": [[972, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [972, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [972, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [972, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [972, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [972, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.WSLinear": [[974, 2, 1, "", "__init__", "Constructor."], [975, 2, 1, "", "__repr__", "Return repr(self)."], [976, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [977, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [978, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSLinear.__init__": [[974, 3, 2, "", "lim_high", "Constructor."], [974, 3, 2, "", "lim_low", "Constructor."], [974, 3, 2, "", "scale_amb", "Constructor."]], "foxes.models.wake_superpositions.WSLinear.add_wake": [[976, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [976, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [976, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [976, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [976, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [976, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [976, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [976, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [976, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.WSLinear.calc_final_wake_delta": [[977, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [977, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [977, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [977, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [977, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [977, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.WSLinear.input_farm_vars": [[978, 3, 2, "", "algo", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSLinearLocal": [[980, 2, 1, "", "__init__", "Constructor."], [981, 2, 1, "", "__repr__", "Return repr(self)."], [982, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [983, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [984, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSLinearLocal.__init__": [[980, 3, 2, "", "lim_high", "Constructor."], [980, 3, 2, "", "lim_low", "Constructor."]], "foxes.models.wake_superpositions.WSLinearLocal.add_wake": [[982, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [982, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [982, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [982, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [982, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [982, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [982, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [982, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [982, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.WSLinearLocal.calc_final_wake_delta": [[983, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [983, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [983, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [983, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [983, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [983, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.WSLinearLocal.input_farm_vars": [[984, 3, 2, "", "algo", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSMax": [[986, 2, 1, "", "__init__", "Constructor."], [987, 2, 1, "", "__repr__", "Return repr(self)."], [988, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [989, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [990, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSMax.__init__": [[986, 3, 2, "", "lim_high", "Constructor."], [986, 3, 2, "", "lim_low", "Constructor."], [986, 3, 2, "", "scale_amb", "Constructor."]], "foxes.models.wake_superpositions.WSMax.add_wake": [[988, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [988, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [988, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [988, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [988, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [988, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [988, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [988, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [988, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.WSMax.calc_final_wake_delta": [[989, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [989, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [989, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [989, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [989, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [989, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.WSMax.input_farm_vars": [[990, 3, 2, "", "algo", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSMaxLocal": [[992, 2, 1, "", "__init__", "Constructor."], [993, 2, 1, "", "__repr__", "Return repr(self)."], [994, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [995, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [996, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSMaxLocal.__init__": [[992, 3, 2, "", "lim_high", "Constructor."], [992, 3, 2, "", "lim_low", "Constructor."]], "foxes.models.wake_superpositions.WSMaxLocal.add_wake": [[994, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [994, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [994, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [994, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [994, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [994, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [994, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [994, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [994, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.WSMaxLocal.calc_final_wake_delta": [[995, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [995, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [995, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [995, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [995, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [995, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.WSMaxLocal.input_farm_vars": [[996, 3, 2, "", "algo", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSPow": [[998, 2, 1, "", "__init__", "Constructor."], [999, 2, 1, "", "__repr__", "Return repr(self)."], [1000, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [1001, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [1002, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSPow.__init__": [[998, 3, 2, "", "lim_high", "Constructor."], [998, 3, 2, "", "lim_low", "Constructor."], [998, 3, 2, "", "pow", "Constructor."], [998, 3, 2, "", "scale_amb", "Constructor."]], "foxes.models.wake_superpositions.WSPow.add_wake": [[1000, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [1000, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [1000, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [1000, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [1000, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [1000, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [1000, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [1000, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [1000, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.WSPow.calc_final_wake_delta": [[1001, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [1001, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [1001, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [1001, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [1001, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [1001, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.WSPow.input_farm_vars": [[1002, 3, 2, "", "algo", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSPowLocal": [[1004, 2, 1, "", "__init__", "Constructor."], [1005, 2, 1, "", "__repr__", "Return repr(self)."], [1006, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [1007, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [1008, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSPowLocal.__init__": [[1004, 3, 2, "", "lim_high", "Constructor."], [1004, 3, 2, "", "lim_low", "Constructor."], [1004, 3, 2, "", "pow", "Constructor."]], "foxes.models.wake_superpositions.WSPowLocal.add_wake": [[1006, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [1006, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [1006, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [1006, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [1006, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [1006, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [1006, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [1006, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [1006, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.WSPowLocal.calc_final_wake_delta": [[1007, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [1007, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [1007, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [1007, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [1007, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [1007, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.WSPowLocal.input_farm_vars": [[1008, 3, 2, "", "algo", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSProduct": [[1010, 2, 1, "", "__init__", "Constructor."], [1011, 2, 1, "", "__repr__", "Return repr(self)."], [1012, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [1013, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [1014, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSProduct.__init__": [[1010, 3, 2, "", "lim_high", "Constructor."], [1010, 3, 2, "", "lim_low", "Constructor."]], "foxes.models.wake_superpositions.WSProduct.add_wake": [[1012, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [1012, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [1012, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [1012, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [1012, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [1012, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [1012, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [1012, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [1012, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.WSProduct.calc_final_wake_delta": [[1013, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [1013, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [1013, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [1013, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [1013, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [1013, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.WSProduct.input_farm_vars": [[1014, 3, 2, "", "algo", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSQuadratic": [[1016, 2, 1, "", "__init__", "Constructor."], [1017, 2, 1, "", "__repr__", "Return repr(self)."], [1018, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [1019, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [1020, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSQuadratic.__init__": [[1016, 3, 2, "", "lim_high", "Constructor."], [1016, 3, 2, "", "lim_low", "Constructor."], [1016, 3, 2, "", "scale_amb", "Constructor."]], "foxes.models.wake_superpositions.WSQuadratic.add_wake": [[1018, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [1018, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [1018, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [1018, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [1018, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [1018, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [1018, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [1018, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [1018, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.WSQuadratic.calc_final_wake_delta": [[1019, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [1019, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [1019, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [1019, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [1019, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [1019, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.WSQuadratic.input_farm_vars": [[1020, 3, 2, "", "algo", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSQuadraticLocal": [[1022, 2, 1, "", "__init__", "Constructor."], [1023, 2, 1, "", "__repr__", "Return repr(self)."], [1024, 2, 1, "", "add_wake", "Add a wake delta to previous wake deltas, at rotor points."], [1025, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [1026, 2, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.WSQuadraticLocal.__init__": [[1022, 3, 2, "", "lim_high", "Constructor."], [1022, 3, 2, "", "lim_low", "Constructor."]], "foxes.models.wake_superpositions.WSQuadraticLocal.add_wake": [[1024, 3, 2, "", "algo", "Add a wake delta to previous wake deltas, at rotor points."], [1024, 3, 2, "", "downwind_index", "Add a wake delta to previous wake deltas, at rotor points."], [1024, 3, 2, "", "fdata", "Add a wake delta to previous wake deltas, at rotor points."], [1024, 3, 2, "", "mdata", "Add a wake delta to previous wake deltas, at rotor points."], [1024, 3, 2, "", "st_sel", "Add a wake delta to previous wake deltas, at rotor points."], [1024, 3, 2, "", "tdata", "Add a wake delta to previous wake deltas, at rotor points."], [1024, 3, 2, "", "variable", "Add a wake delta to previous wake deltas, at rotor points."], [1024, 3, 2, "", "wake_delta", "Add a wake delta to previous wake deltas, at rotor points."], [1024, 3, 2, "", "wake_model_result", "Add a wake delta to previous wake deltas, at rotor points."]], "foxes.models.wake_superpositions.WSQuadraticLocal.calc_final_wake_delta": [[1025, 3, 2, "", "algo", "Calculate the final wake delta after adding all contributions."], [1025, 3, 2, "", "amb_results", "Calculate the final wake delta after adding all contributions."], [1025, 3, 2, "", "fdata", "Calculate the final wake delta after adding all contributions."], [1025, 3, 2, "", "mdata", "Calculate the final wake delta after adding all contributions."], [1025, 3, 2, "", "variable", "Calculate the final wake delta after adding all contributions."], [1025, 3, 2, "", "wake_delta", "Calculate the final wake delta after adding all contributions."]], "foxes.models.wake_superpositions.WSQuadraticLocal.input_farm_vars": [[1026, 3, 2, "", "algo", "The variables which are needed for running the model."]], "foxes.output": [[1027, 0, 1, "", "Animator", "Creates an animation from generators that yield lists of artists."], [1032, 0, 1, "", "FarmLayoutOutput", "Plot the farm layout"], [1041, 0, 1, "", "FarmResultsEval", "Evaluates farm results data."], [1061, 0, 1, "", "FlowPlots2D", "Class for horizontal or vertical 2D flow plots"], [1068, 0, 1, "", "Output", "Base class for foxes output."], [1074, 0, 1, "", "PointCalculator", "Computes results at given points"], [1077, 0, 1, "", "ResultsWriter", "Writes results farm data to file."], [1081, 0, 1, "", "RosePlotOutput", "Class for rose plot creation"], [1087, 0, 1, "", "RotorPointPlot", "Visualizes rotor points and their weights."], [1090, 0, 1, "", "SeqFlowAnimationPlugin", "Plugin for creating data for a 2D flow animation during sequential iterations"], [1095, 0, 1, "", "SeqWakeDebugPlugin", "Plugin for creating wake debug plots in animations"], [1100, 0, 1, "", "SliceData", "Create data for horizontal or vertical 2D slices"], [1108, 0, 1, "", "SlicesData", "Create data for horizontal or vertical 2D slices, all in a single Dataset"], [1116, 0, 1, "", "StateTurbineMap", "Creates heat maps with turbines on one axis and states on the other axis."], [1119, 0, 1, "", "StateTurbineTable", "Creates tables of state-turbine type data"], [1122, 0, 1, "", "StatesRosePlotOutput", "Class for rose plot creation directly from states"], [1124, 0, 1, "", "TurbineTypeCurves", "Creates power and ct curves for turbine types, optionally including derating/boost."], [1127, 0, 1, "", "WindRoseBinPlot", "Plots mean data in wind rose bins"], [1133, 0, 1, "", "plt", "Class that runs plt commands"]], "foxes.output.Animator": [[1028, 2, 1, "", "__init__", "Constructor."], [1029, 2, 1, "", "add_generator", "Add a generator."], [1030, 2, 1, "", "animate", "Create the animation"], [1031, 4, 1, "", "generators", "The artist generators"]], "foxes.output.Animator.__init__": [[1028, 3, 2, "", "fig", "Constructor."]], "foxes.output.Animator.add_generator": [[1029, 3, 2, "", "gen", "Add a generator."]], "foxes.output.Animator.animate": [[1030, 3, 2, "", "kwargs", "Create the animation"], [1030, 3, 2, "", "verbosity", "Create the animation"]], "foxes.output.FarmLayoutOutput": [[1033, 2, 1, "", "__init__", "Constructor."], [1034, 2, 1, "", "get_figure", "Creates farm layout figure."], [1035, 2, 1, "", "get_layout_data", "Returns wind farm layout."], [1036, 2, 1, "", "get_layout_dict", "Returns wind farm layout."], [1037, 2, 1, "", "write_csv", "Writes csv layout file."], [1038, 2, 1, "", "write_json", "Writes xyh layout file."], [1039, 2, 1, "", "write_plot", "Writes the layout plot to file."], [1040, 2, 1, "", "write_xyh", "Writes xyh layout file."]], "foxes.output.FarmLayoutOutput.__init__": [[1033, 3, 2, "", "D", "Constructor."], [1033, 3, 2, "", "farm", "Constructor."], [1033, 3, 2, "", "farm_results", "Constructor."], [1033, 3, 2, "", "from_results", "Constructor."], [1033, 3, 2, "", "kwargs", "Constructor."], [1033, 3, 2, "", "results_state", "Constructor."]], "foxes.output.FarmLayoutOutput.get_figure": [[1034, 3, 2, "", "anno_delx", "Creates farm layout figure."], [1034, 3, 2, "", "anno_dely", "Creates farm layout figure."], [1034, 3, 2, "", "annotate", "Creates farm layout figure."], [1034, 3, 2, "", "ax", "Creates farm layout figure."], [1034, 3, 2, "", "bargs", "Creates farm layout figure."], [1034, 3, 2, "", "color_by", "Creates farm layout figure."], [1034, 3, 2, "", "fig", "Creates farm layout figure."], [1034, 3, 2, "", "figsize", "Creates farm layout figure."], [1034, 3, 2, "", "fontsize", "Creates farm layout figure."], [1034, 3, 2, "", "kwargs", "Creates farm layout figure."], [1034, 3, 2, "", "normalize_D", "Creates farm layout figure."], [1034, 3, 2, "", "ret_im", "Creates farm layout figure."], [1034, 3, 2, "", "title", "Creates farm layout figure."]], "foxes.output.FarmLayoutOutput.write_csv": [[1037, 3, 2, "", "algo", "Writes csv layout file."], [1037, 3, 2, "", "file_name", "Writes csv layout file."], [1037, 3, 2, "", "type_col", "Writes csv layout file."]], "foxes.output.FarmLayoutOutput.write_json": [[1038, 3, 2, "", "file_name", "Writes xyh layout file."]], "foxes.output.FarmLayoutOutput.write_plot": [[1039, 3, 2, "", "file_name", "Writes the layout plot to file."], [1039, 3, 2, "", "fontsize", "Writes the layout plot to file."], [1039, 3, 2, "", "kwargs", "Writes the layout plot to file."]], "foxes.output.FarmLayoutOutput.write_xyh": [[1040, 3, 2, "", "file_path", "Writes xyh layout file."]], "foxes.output.FarmResultsEval": [[1042, 2, 1, "", "__init__", "Constructor."], [1043, 2, 1, "", "add_capacity", "Adds capacity to the farm results"], [1044, 2, 1, "", "add_efficiency", "Adds efficiency to the farm results"], [1045, 2, 1, "", "calc_farm_efficiency", "Calculates farm efficiency"], [1046, 2, 1, "", "calc_farm_mean", "Calculates the mean over states and turbines."], [1047, 2, 1, "", "calc_farm_sum", "Calculates the sum over states and turbines."], [1048, 2, 1, "", "calc_farm_yield", "Calculates yield, P75 and P90 at the farm level"], [1049, 2, 1, "", "calc_mean_farm_power", "Calculates the mean total farm power."], [1050, 2, 1, "", "calc_states_mean", "Calculates the mean wrt states."], [1051, 2, 1, "", "calc_states_std", "Calculates the standard deviation wrt states."], [1052, 2, 1, "", "calc_states_sum", "Calculates the sum wrt states."], [1053, 2, 1, "", "calc_turbine_mean", "Calculates the mean wrt turbines."], [1054, 2, 1, "", "calc_turbine_sum", "Calculates the sum wrt turbines."], [1055, 2, 1, "", "calc_turbine_yield", "Calculates the yield per turbine"], [1056, 2, 1, "", "gen_stdata", "Generates state-turbine data, intended to be used in animations"], [1057, 2, 1, "", "reduce_all", "Reduces states and turbine dimension by some operation"], [1058, 2, 1, "", "reduce_states", "Reduces the states dimension by some operation"], [1059, 2, 1, "", "reduce_turbines", "Reduces the turbine dimension by some operation"], [1060, 2, 1, "", "weinsum", "Calculates Einstein sum, adding weights as last argument to the given fields."]], "foxes.output.FarmResultsEval.__init__": [[1042, 3, 2, "", "farm_results", "Constructor."]], "foxes.output.FarmResultsEval.add_capacity": [[1043, 3, 2, "", "P_nom", "Adds capacity to the farm results"], [1043, 3, 2, "", "algo", "Adds capacity to the farm results"], [1043, 3, 2, "", "ambient", "Adds capacity to the farm results"], [1043, 3, 2, "", "verbosity", "Adds capacity to the farm results"]], "foxes.output.FarmResultsEval.add_efficiency": [[1044, 3, 2, "", "verbosity", "Adds efficiency to the farm results"]], "foxes.output.FarmResultsEval.calc_farm_mean": [[1046, 3, 2, "", "vars", "Calculates the mean over states and turbines."]], "foxes.output.FarmResultsEval.calc_farm_sum": [[1047, 3, 2, "", "vars", "Calculates the sum over states and turbines."]], "foxes.output.FarmResultsEval.calc_farm_yield": [[1048, 3, 2, "", "kwargs", "Calculates yield, P75 and P90 at the farm level"], [1048, 3, 2, "", "power_uncert", "Calculates yield, P75 and P90 at the farm level"], [1048, 3, 2, "", "turbine_yield", "Calculates yield, P75 and P90 at the farm level"]], "foxes.output.FarmResultsEval.calc_mean_farm_power": [[1049, 3, 2, "", "ambient", "Calculates the mean total farm power."]], "foxes.output.FarmResultsEval.calc_states_mean": [[1050, 3, 2, "", "use_weights", "Calculates the mean wrt states."], [1050, 3, 2, "", "vars", "Calculates the mean wrt states."]], "foxes.output.FarmResultsEval.calc_states_std": [[1051, 3, 2, "", "vars", "Calculates the standard deviation wrt states."]], "foxes.output.FarmResultsEval.calc_states_sum": [[1052, 3, 2, "", "vars", "Calculates the sum wrt states."]], "foxes.output.FarmResultsEval.calc_turbine_mean": [[1053, 3, 2, "", "vars", "Calculates the mean wrt turbines."]], "foxes.output.FarmResultsEval.calc_turbine_sum": [[1054, 3, 2, "", "vars", "Calculates the sum wrt turbines."]], "foxes.output.FarmResultsEval.calc_turbine_yield": [[1055, 3, 2, "", "P_unit_W", "Calculates the yield per turbine"], [1055, 3, 2, "", "algo", "Calculates the yield per turbine"], [1055, 3, 2, "", "ambient", "Calculates the yield per turbine"], [1055, 3, 2, "", "annual", "Calculates the yield per turbine"], [1055, 3, 2, "", "delta_t", "Calculates the yield per turbine"], [1055, 3, 2, "", "hours", "Calculates the yield per turbine"]], "foxes.output.FarmResultsEval.gen_stdata": [[1056, 3, 2, "", "animated", "Generates state-turbine data, intended to be used in animations"], [1056, 3, 2, "", "ax", "Generates state-turbine data, intended to be used in animations"], [1056, 3, 2, "", "fig", "Generates state-turbine data, intended to be used in animations"], [1056, 3, 2, "", "figsize", "Generates state-turbine data, intended to be used in animations"], [1056, 3, 2, "", "legloc", "Generates state-turbine data, intended to be used in animations"], [1056, 3, 2, "", "ret_im", "Generates state-turbine data, intended to be used in animations"], [1056, 3, 2, "", "turbines", "Generates state-turbine data, intended to be used in animations"], [1056, 3, 2, "", "variable", "Generates state-turbine data, intended to be used in animations"]], "foxes.output.FarmResultsEval.reduce_all": [[1057, 3, 2, "", "states_op", "Reduces states and turbine dimension by some operation"], [1057, 3, 2, "", "turbines_op", "Reduces states and turbine dimension by some operation"]], "foxes.output.FarmResultsEval.reduce_states": [[1058, 3, 2, "", "vars_op", "Reduces the states dimension by some operation"]], "foxes.output.FarmResultsEval.reduce_turbines": [[1059, 3, 2, "", "vars_op", "Reduces the turbine dimension by some operation"]], "foxes.output.FarmResultsEval.weinsum": [[1060, 3, 2, "", "rhs", "Calculates Einstein sum, adding weights as last argument to the given fields."], [1060, 3, 2, "", "vars", "Calculates Einstein sum, adding weights as last argument to the given fields."]], "foxes.output.FlowPlots2D": [[1062, 2, 1, "", "gen_states_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [1063, 2, 1, "", "gen_states_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [1064, 2, 1, "", "gen_states_fig_yz", "Generates 2D farm flow figure in a vertical yz-plane."], [1065, 2, 1, "", "get_mean_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [1066, 2, 1, "", "get_mean_fig_xz", "Generates 2D farm flow figure in a horizontal xz-plane."], [1067, 2, 1, "", "get_mean_fig_yz", "Generates 2D farm flow figure in a horizontal yz-plane."]], "foxes.output.FlowPlots2D.gen_states_fig_xy": [[1062, 3, 2, "", "add_bar", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "animated", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "ax", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "cmap", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "fig", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "figsize", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "kwargs", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "levels", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "precalc", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "quiver_n", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "quiver_pars", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "ret_im", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "ret_state", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "rotor_color", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "title", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "var", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "vlabel", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "vmax", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "vmin", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "xlabel", "Generates 2D farm flow figure in a horizontal xy-plane."], [1062, 3, 2, "", "ylabel", "Generates 2D farm flow figure in a horizontal xy-plane."]], "foxes.output.FlowPlots2D.gen_states_fig_xz": [[1063, 3, 2, "", "add_bar", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "animated", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "ax", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "cmap", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "fig", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "figsize", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "kwargs", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "levels", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "precalc", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "quiver_n", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "quiver_pars", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "ret_im", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "ret_state", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "rotor_color", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "title", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "var", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "vlabel", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "vmax", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "vmin", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "x_direction", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "xlabel", "Generates 2D farm flow figure in a vertical xz-plane."], [1063, 3, 2, "", "zlabel", "Generates 2D farm flow figure in a vertical xz-plane."]], "foxes.output.FlowPlots2D.gen_states_fig_yz": [[1064, 3, 2, "", "add_bar", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "animated", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "ax", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "cmap", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "fig", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "figsize", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "kwargs", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "levels", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "precalc", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "quiver_n", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "quiver_pars", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "ret_im", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "ret_state", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "rotor_color", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "title", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "var", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "vlabel", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "vmax", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "vmin", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "x_direction", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "ylabel", "Generates 2D farm flow figure in a vertical yz-plane."], [1064, 3, 2, "", "zlabel", "Generates 2D farm flow figure in a vertical yz-plane."]], "foxes.output.FlowPlots2D.get_mean_fig_xy": [[1065, 3, 2, "", "add_bar", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "animated", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "ax", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "cmap", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "fig", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "figsize", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "kwargs", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "levels", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "quiver_n", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "quiver_pars", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "ret_data", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "ret_im", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "ret_state", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "title", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "var", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "vlabel", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "vmax", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "vmin", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "xlabel", "Generates 2D farm flow figure in a horizontal xy-plane."], [1065, 3, 2, "", "ylabel", "Generates 2D farm flow figure in a horizontal xy-plane."]], "foxes.output.FlowPlots2D.get_mean_fig_xz": [[1066, 3, 2, "", "add_bar", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "animated", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "ax", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "cmap", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "fig", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "figsize", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "kwargs", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "levels", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "quiver_n", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "quiver_pars", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "ret_data", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "ret_im", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "ret_state", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "title", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "var", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "vlabel", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "vmax", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "vmin", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "x_direction", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "xlabel", "Generates 2D farm flow figure in a horizontal xz-plane."], [1066, 3, 2, "", "zlabel", "Generates 2D farm flow figure in a horizontal xz-plane."]], "foxes.output.FlowPlots2D.get_mean_fig_yz": [[1067, 3, 2, "", "add_bar", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "animated", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "ax", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "cmap", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "fig", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "figsize", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "kwargs", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "levels", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "quiver_n", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "quiver_pars", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "ret_data", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "ret_im", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "ret_state", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "title", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "var", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "vlabel", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "vmax", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "vmin", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "x_direction", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "ylabel", "Generates 2D farm flow figure in a horizontal yz-plane."], [1067, 3, 2, "", "zlabel", "Generates 2D farm flow figure in a horizontal yz-plane."]], "foxes.output.Output": [[1069, 2, 1, "", "__init__", "Constructor."], [1070, 2, 1, "", "get_fpath", "Gets the total file path"], [1071, 2, 1, "", "new", "Run-time output model factory."], [1072, 2, 1, "", "print_models", "Prints all model names."], [1073, 2, 1, "", "write", "Writes data to file via pandas."]], "foxes.output.Output.__init__": [[1069, 3, 2, "", "out_dir", "Constructor."], [1069, 3, 2, "", "out_fname_fun", "Constructor."]], "foxes.output.Output.get_fpath": [[1070, 3, 2, "", "fname", "Gets the total file path"]], "foxes.output.Output.new": [[1071, 3, 2, "", "args", "Run-time output model factory."], [1071, 3, 2, "", "kwargs", "Run-time output model factory."], [1071, 3, 2, "", "output_type", "Run-time output model factory."]], "foxes.output.Output.write": [[1073, 3, 2, "", "data", "Writes data to file via pandas."], [1073, 3, 2, "", "file_name", "Writes data to file via pandas."], [1073, 3, 2, "", "format_col2var", "Writes data to file via pandas."], [1073, 3, 2, "", "format_dict", "Writes data to file via pandas."], [1073, 3, 2, "", "kwargs", "Writes data to file via pandas."]], "foxes.output.PointCalculator": [[1075, 2, 1, "", "__init__", "Constructor."], [1076, 2, 1, "", "calculate", "Calculate point results"]], "foxes.output.PointCalculator.__init__": [[1075, 3, 2, "", "algo", "Constructor."], [1075, 3, 2, "", "farm_results", "Constructor."], [1075, 3, 2, "", "kwargs", "Constructor."]], "foxes.output.PointCalculator.calculate": [[1076, 3, 2, "", "args", "Calculate point results"], [1076, 3, 2, "", "kwargs", "Calculate point results"], [1076, 3, 2, "", "points", "Calculate point results"], [1076, 3, 2, "", "states_mean", "Calculate point results"], [1076, 3, 2, "", "to_file", "Calculate point results"], [1076, 3, 2, "", "weight_turbine", "Calculate point results"], [1076, 3, 2, "", "write_pars", "Calculate point results"], [1076, 3, 2, "", "write_vars", "Calculate point results"]], "foxes.output.ResultsWriter": [[1078, 2, 1, "", "__init__", "Constructor."], [1079, 2, 1, "", "write_csv", "Writes a csv file"], [1080, 2, 1, "", "write_nc", "Writes a netCDF file"]], "foxes.output.ResultsWriter.__init__": [[1078, 3, 2, "", "data", "Constructor."], [1078, 3, 2, "", "farm_results", "Constructor."], [1078, 3, 2, "", "kwargs", "Constructor."]], "foxes.output.ResultsWriter.write_csv": [[1079, 3, 2, "", "file_name", "Writes a csv file"], [1079, 3, 2, "", "kwargs", "Writes a csv file"], [1079, 3, 2, "", "state_turbine_table", "Writes a csv file"], [1079, 3, 2, "", "turbine_names", "Writes a csv file"], [1079, 3, 2, "", "variables", "Writes a csv file"], [1079, 3, 2, "", "verbosity", "Writes a csv file"]], "foxes.output.ResultsWriter.write_nc": [[1080, 3, 2, "", "file_name", "Writes a netCDF file"], [1080, 3, 2, "", "kwargs", "Writes a netCDF file"], [1080, 3, 2, "", "turbine_names", "Writes a netCDF file"], [1080, 3, 2, "", "variables", "Writes a netCDF file"], [1080, 3, 2, "", "verbosity", "Writes a netCDF file"]], "foxes.output.RosePlotOutput": [[1082, 2, 1, "", "__init__", "Constructor."], [1083, 2, 1, "", "get_data", "Generates the plot data"], [1084, 2, 1, "", "get_data_info", "Returns default description for a variable."], [1085, 2, 1, "", "get_figure", "Creates the figure"], [1086, 2, 1, "", "write_figure", "Write rose plot to file"]], "foxes.output.RosePlotOutput.__init__": [[1082, 3, 2, "", "farm_results", "Constructor."], [1082, 3, 2, "", "kwargs", "Constructor."], [1082, 3, 2, "", "point_results", "Constructor."], [1082, 3, 2, "", "use_points", "Constructor."]], "foxes.output.RosePlotOutput.get_data": [[1083, 3, 2, "", "add_inf", "Generates the plot data"], [1083, 3, 2, "", "point", "Generates the plot data"], [1083, 3, 2, "", "turbine", "Generates the plot data"], [1083, 3, 2, "", "wd_sectors", "Generates the plot data"], [1083, 3, 2, "", "wd_var", "Generates the plot data"], [1083, 3, 2, "", "ws_bins", "Generates the plot data"], [1083, 3, 2, "", "ws_var", "Generates the plot data"]], "foxes.output.RosePlotOutput.get_data_info": [[1084, 3, 2, "", "dname", "Returns default description for a variable."]], "foxes.output.RosePlotOutput.get_figure": [[1085, 3, 2, "", "ax", "Creates the figure"], [1085, 3, 2, "", "cmap", "Creates the figure"], [1085, 3, 2, "", "fig", "Creates the figure"], [1085, 3, 2, "", "figsize", "Creates the figure"], [1085, 3, 2, "", "freq_delta", "Creates the figure"], [1085, 3, 2, "", "kwargs", "Creates the figure"], [1085, 3, 2, "", "legend_pars", "Creates the figure"], [1085, 3, 2, "", "ret_data", "Creates the figure"], [1085, 3, 2, "", "title", "Creates the figure"], [1085, 3, 2, "", "wd_sectors", "Creates the figure"], [1085, 3, 2, "", "wd_var", "Creates the figure"], [1085, 3, 2, "", "ws_bins", "Creates the figure"], [1085, 3, 2, "", "ws_var", "Creates the figure"]], "foxes.output.RosePlotOutput.write_figure": [[1086, 3, 2, "", "args", "Write rose plot to file"], [1086, 3, 2, "", "file_name", "Write rose plot to file"], [1086, 3, 2, "", "kwargs", "Write rose plot to file"], [1086, 3, 2, "", "ret_data", "Write rose plot to file"]], "foxes.output.RotorPointPlot": [[1088, 2, 1, "", "__init__", "Constructor."], [1089, 2, 1, "", "get_point_figure", "Get a scatter plot of the rotor points."]], "foxes.output.RotorPointPlot.__init__": [[1088, 3, 2, "", "algo", "Constructor."], [1088, 3, 2, "", "kwargs", "Constructor."], [1088, 3, 2, "", "rotor_model", "Constructor."]], "foxes.output.RotorPointPlot.get_point_figure": [[1089, 3, 2, "", "ax", "Get a scatter plot of the rotor points."], [1089, 3, 2, "", "fig", "Get a scatter plot of the rotor points."], [1089, 3, 2, "", "figsize", "Get a scatter plot of the rotor points."], [1089, 3, 2, "", "kwargs", "Get a scatter plot of the rotor points."], [1089, 3, 2, "", "title", "Get a scatter plot of the rotor points."]], "foxes.output.SeqFlowAnimationPlugin": [[1091, 2, 1, "", "__init__", "Constructor."], [1092, 2, 1, "", "gen_images", "The plotting axis"], [1093, 2, 1, "", "initialize", "Initialize data based on the intial iterator"], [1094, 2, 1, "", "update", "Updates data based on current iteration"]], "foxes.output.SeqFlowAnimationPlugin.__init__": [[1091, 3, 2, "", "orientation", "Constructor."], [1091, 3, 2, "", "pars", "Constructor."]], "foxes.output.SeqFlowAnimationPlugin.gen_images": [[1092, 3, 2, "", "ax", "The plotting axis"]], "foxes.output.SeqFlowAnimationPlugin.initialize": [[1093, 3, 2, "", "algo", "Initialize data based on the intial iterator"]], "foxes.output.SeqFlowAnimationPlugin.update": [[1094, 3, 2, "", "algo", "Updates data based on current iteration"], [1094, 3, 2, "", "fres", "Updates data based on current iteration"], [1094, 3, 2, "", "pres", "Updates data based on current iteration"]], "foxes.output.SeqWakeDebugPlugin": [[1096, 2, 1, "", "__init__", "Constructor."], [1097, 2, 1, "", "gen_images", "The plotting axis"], [1098, 2, 1, "", "initialize", "Initialize data based on the intial iterator"], [1099, 2, 1, "", "update", "Updates data based on current iteration"]], "foxes.output.SeqWakeDebugPlugin.__init__": [[1096, 3, 2, "", "ppars", "Constructor."], [1096, 3, 2, "", "show_p", "Constructor."], [1096, 3, 2, "", "show_v", "Constructor."], [1096, 3, 2, "", "vpars", "Constructor."]], "foxes.output.SeqWakeDebugPlugin.gen_images": [[1097, 3, 2, "", "ax", "The plotting axis"]], "foxes.output.SeqWakeDebugPlugin.initialize": [[1098, 3, 2, "", "algo", "Initialize data based on the intial iterator"]], "foxes.output.SeqWakeDebugPlugin.update": [[1099, 3, 2, "", "algo", "Updates data based on current iteration"], [1099, 3, 2, "", "fres", "Updates data based on current iteration"], [1099, 3, 2, "", "pres", "Updates data based on current iteration"]], "foxes.output.SliceData": [[1101, 2, 1, "", "__init__", "Constructor."], [1102, 2, 1, "", "get_mean_data_xy", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1103, 2, 1, "", "get_mean_data_xz", "Creates mean data of 2D farm flow slices in an xz-plane."], [1104, 2, 1, "", "get_mean_data_yz", "Creates mean data of 2D farm flow slices in a yz-plane."], [1105, 2, 1, "", "get_states_data_xy", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1106, 2, 1, "", "get_states_data_xz", "Creates states data of 2D farm flow slices in an xz-plane."], [1107, 2, 1, "", "get_states_data_yz", "Creates states data of 2D farm flow slices in a yz-plane."]], "foxes.output.SliceData.__init__": [[1101, 3, 2, "", "algo", "Constructor."], [1101, 3, 2, "", "farm_results", "Constructor."], [1101, 3, 2, "", "kwargs", "Constructor."], [1101, 3, 2, "", "verbosity_delta", "Constructor."]], "foxes.output.SliceData.get_mean_data_xy": [[1102, 3, 2, "", "data_format", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "kwargs", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "label_map", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "n_img_points", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "normalize_v", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "normalize_x", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "normalize_y", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "normalize_z", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "resolution", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "ret_grid", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "ret_states", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "states_isel", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "states_sel", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "to_file", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "variables", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "verbosity", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "vmax", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "vmin", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "weight_turbine", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "write_pars", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "xmax", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "xmin", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "xspace", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "ymax", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "ymin", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "yspace", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."], [1102, 3, 2, "", "z", "Creates mean data of 2D farm flow slices in a horizontal xy-plane."]], "foxes.output.SliceData.get_mean_data_xz": [[1103, 3, 2, "", "data_format", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "kwargs", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "label_map", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "n_img_points", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "normalize_v", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "normalize_x", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "normalize_y", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "normalize_z", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "resolution", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "ret_grid", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "ret_states", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "states_isel", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "states_sel", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "to_file", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "variables", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "verbosity", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "vmax", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "vmin", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "weight_turbine", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "write_pars", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "x_direction", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "xmax", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "xmin", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "xspace", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "y", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "zmax", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "zmin", "Creates mean data of 2D farm flow slices in an xz-plane."], [1103, 3, 2, "", "zspace", "Creates mean data of 2D farm flow slices in an xz-plane."]], "foxes.output.SliceData.get_mean_data_yz": [[1104, 3, 2, "", "data_format", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "kwargs", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "label_map", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "n_img_points", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "normalize_v", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "normalize_x", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "normalize_y", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "normalize_z", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "resolution", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "ret_grid", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "ret_states", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "states_isel", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "states_sel", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "to_file", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "variables", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "verbosity", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "vmax", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "vmin", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "weight_turbine", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "write_pars", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "x", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "x_direction", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "ymax", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "ymin", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "yspace", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "zmax", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "zmin", "Creates mean data of 2D farm flow slices in a yz-plane."], [1104, 3, 2, "", "zspace", "Creates mean data of 2D farm flow slices in a yz-plane."]], "foxes.output.SliceData.get_states_data_xy": [[1105, 3, 2, "", "data_format", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "kwargs", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "label_map", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "n_img_points", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "normalize_v", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "normalize_x", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "normalize_y", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "normalize_z", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "resolution", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "ret_grid", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "ret_states", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "states_isel", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "states_sel", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "to_file", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "variables", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "verbosity", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "vmax", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "vmin", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "write_pars", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "xmax", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "xmin", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "xspace", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "ymax", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "ymin", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "yspace", "Creates states data of 2D farm flow slices in a horizontal xy-plane."], [1105, 3, 2, "", "z", "Creates states data of 2D farm flow slices in a horizontal xy-plane."]], "foxes.output.SliceData.get_states_data_xz": [[1106, 3, 2, "", "data_format", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "kwargs", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "label_map", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "n_img_points", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "normalize_v", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "normalize_x", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "normalize_y", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "normalize_z", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "resolution", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "ret_grid", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "ret_states", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "states_isel", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "states_sel", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "to_file", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "variables", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "verbosity", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "vmax", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "vmin", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "write_pars", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "x_direction", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "xmax", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "xmin", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "xspace", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "y", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "zmax", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "zmin", "Creates states data of 2D farm flow slices in an xz-plane."], [1106, 3, 2, "", "zspace", "Creates states data of 2D farm flow slices in an xz-plane."]], "foxes.output.SliceData.get_states_data_yz": [[1107, 3, 2, "", "data_format", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "kwargs", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "label_map", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "n_img_points", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "normalize_v", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "normalize_x", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "normalize_y", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "normalize_z", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "resolution", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "ret_grid", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "ret_states", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "states_isel", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "states_sel", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "to_file", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "variables", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "verbosity", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "vmax", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "vmin", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "write_pars", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "x", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "x_direction", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "ymax", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "ymin", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "yspace", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "zmax", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "zmin", "Creates states data of 2D farm flow slices in a yz-plane."], [1107, 3, 2, "", "zspace", "Creates states data of 2D farm flow slices in a yz-plane."]], "foxes.output.SlicesData": [[1109, 2, 1, "", "__init__", "Constructor."], [1110, 2, 1, "", "get_mean_data_xy", "Creates mean data of 2D farm flow slices in a xy-plane."], [1111, 2, 1, "", "get_mean_data_xz", "Creates mean data of 2D farm flow slices in a xz-plane."], [1112, 2, 1, "", "get_mean_data_yz", "Creates mean data of 2D farm flow slices in a yz-plane."], [1113, 2, 1, "", "get_states_data_xy", "Creates states data of 2D farm flow slices in a xy-plane."], [1114, 2, 1, "", "get_states_data_xz", "Creates states data of 2D farm flow slices in a xz-plane."], [1115, 2, 1, "", "get_states_data_yz", "Creates states data of 2D farm flow slices in a yz-plane."]], "foxes.output.SlicesData.__init__": [[1109, 3, 2, "", "algo", "Constructor."], [1109, 3, 2, "", "farm_results", "Constructor."], [1109, 3, 2, "", "kwargs", "Constructor."], [1109, 3, 2, "", "verbosity_delta", "Constructor."]], "foxes.output.SlicesData.get_mean_data_xy": [[1110, 3, 2, "", "args", "Creates mean data of 2D farm flow slices in a xy-plane."], [1110, 3, 2, "", "kwargs", "Creates mean data of 2D farm flow slices in a xy-plane."], [1110, 3, 2, "", "verbosity", "Creates mean data of 2D farm flow slices in a xy-plane."], [1110, 3, 2, "", "z_list", "Creates mean data of 2D farm flow slices in a xy-plane."]], "foxes.output.SlicesData.get_mean_data_xz": [[1111, 3, 2, "", "args", "Creates mean data of 2D farm flow slices in a xz-plane."], [1111, 3, 2, "", "kwargs", "Creates mean data of 2D farm flow slices in a xz-plane."], [1111, 3, 2, "", "verbosity", "Creates mean data of 2D farm flow slices in a xz-plane."], [1111, 3, 2, "", "y_list", "Creates mean data of 2D farm flow slices in a xz-plane."]], "foxes.output.SlicesData.get_mean_data_yz": [[1112, 3, 2, "", "args", "Creates mean data of 2D farm flow slices in a yz-plane."], [1112, 3, 2, "", "kwargs", "Creates mean data of 2D farm flow slices in a yz-plane."], [1112, 3, 2, "", "verbosity", "Creates mean data of 2D farm flow slices in a yz-plane."], [1112, 3, 2, "", "x_list", "Creates mean data of 2D farm flow slices in a yz-plane."]], "foxes.output.SlicesData.get_states_data_xy": [[1113, 3, 2, "", "args", "Creates states data of 2D farm flow slices in a xy-plane."], [1113, 3, 2, "", "kwargs", "Creates states data of 2D farm flow slices in a xy-plane."], [1113, 3, 2, "", "verbosity", "Creates states data of 2D farm flow slices in a xy-plane."], [1113, 3, 2, "", "z_list", "Creates states data of 2D farm flow slices in a xy-plane."]], "foxes.output.SlicesData.get_states_data_xz": [[1114, 3, 2, "", "args", "Creates states data of 2D farm flow slices in a xz-plane."], [1114, 3, 2, "", "kwargs", "Creates states data of 2D farm flow slices in a xz-plane."], [1114, 3, 2, "", "verbosity", "Creates states data of 2D farm flow slices in a xz-plane."], [1114, 3, 2, "", "y_list", "Creates states data of 2D farm flow slices in a xz-plane."]], "foxes.output.SlicesData.get_states_data_yz": [[1115, 3, 2, "", "args", "Creates states data of 2D farm flow slices in a yz-plane."], [1115, 3, 2, "", "kwargs", "Creates states data of 2D farm flow slices in a yz-plane."], [1115, 3, 2, "", "verbosity", "Creates states data of 2D farm flow slices in a yz-plane."], [1115, 3, 2, "", "x_list", "Creates states data of 2D farm flow slices in a yz-plane."]], "foxes.output.StateTurbineMap": [[1117, 2, 1, "", "__init__", "Constructor."], [1118, 2, 1, "", "plot_map", "Plot the heat map for the selected variable."]], "foxes.output.StateTurbineMap.__init__": [[1117, 3, 2, "", "farm_results", "Constructor."], [1117, 3, 2, "", "kwargs", "Constructor."]], "foxes.output.StateTurbineMap.plot_map": [[1118, 3, 2, "", "ax", "Plot the heat map for the selected variable."], [1118, 3, 2, "", "figsize", "Plot the heat map for the selected variable."], [1118, 3, 2, "", "kwargs", "Plot the heat map for the selected variable."], [1118, 3, 2, "", "rotate_xlabels", "Plot the heat map for the selected variable."], [1118, 3, 2, "", "title", "Plot the heat map for the selected variable."], [1118, 3, 2, "", "variable", "Plot the heat map for the selected variable."]], "foxes.output.StateTurbineTable": [[1120, 2, 1, "", "__init__", "Constructor."], [1121, 2, 1, "", "get_dataset", "Creates a dataset object"]], "foxes.output.StateTurbineTable.__init__": [[1120, 3, 2, "", "farm_results", "Constructor."], [1120, 3, 2, "", "kwargs", "Constructor."]], "foxes.output.StateTurbineTable.get_dataset": [[1121, 3, 2, "", "isel", "Creates a dataset object"], [1121, 3, 2, "", "kwargs", "Creates a dataset object"], [1121, 3, 2, "", "name_map", "Creates a dataset object"], [1121, 3, 2, "", "sel", "Creates a dataset object"], [1121, 3, 2, "", "to_file", "Creates a dataset object"], [1121, 3, 2, "", "variables", "Creates a dataset object"]], "foxes.output.StatesRosePlotOutput": [[1123, 2, 1, "", "__init__", "Constructor."]], "foxes.output.StatesRosePlotOutput.__init__": [[1123, 3, 2, "", "kwargs", "Constructor."], [1123, 3, 2, "", "mbook", "Constructor."], [1123, 3, 2, "", "point", "Constructor."], [1123, 3, 2, "", "states", "Constructor."], [1123, 3, 2, "", "ws_var", "Constructor."]], "foxes.output.TurbineTypeCurves": [[1125, 2, 1, "", "__init__", "Constructor."], [1126, 2, 1, "", "plot_curves", "Plot the power or ct curve."]], "foxes.output.TurbineTypeCurves.__init__": [[1125, 3, 2, "", "kwargs", "Constructor."], [1125, 3, 2, "", "mbook", "Constructor."]], "foxes.output.TurbineTypeCurves.plot_curves": [[1126, 3, 2, "", "P_max", "Plot the power or ct curve."], [1126, 3, 2, "", "axs", "Plot the power or ct curve."], [1126, 3, 2, "", "figsize", "Plot the power or ct curve."], [1126, 3, 2, "", "kwargs", "Plot the power or ct curve."], [1126, 3, 2, "", "pmax_args", "Plot the power or ct curve."], [1126, 3, 2, "", "rho", "Plot the power or ct curve."], [1126, 3, 2, "", "ti", "Plot the power or ct curve."], [1126, 3, 2, "", "titles", "Plot the power or ct curve."], [1126, 3, 2, "", "turbine_type", "Plot the power or ct curve."], [1126, 3, 2, "", "variables", "Plot the power or ct curve."], [1126, 3, 2, "", "ws_max", "Plot the power or ct curve."], [1126, 3, 2, "", "ws_min", "Plot the power or ct curve."], [1126, 3, 2, "", "ws_step", "Plot the power or ct curve."], [1126, 3, 2, "", "x_label", "Plot the power or ct curve."], [1126, 3, 2, "", "y_labels", "Plot the power or ct curve."]], "foxes.output.WindRoseBinPlot": [[1128, 2, 1, "", "__init__", "Constructor"], [1129, 2, 1, "", "get_data", "Generates the plot data"], [1130, 2, 1, "", "get_figure", "Creates the figure"], [1131, 2, 1, "", "write_figure", "Write rose plot to file"]], "foxes.output.WindRoseBinPlot.__init__": [[1128, 3, 2, "", "farm_results", "Constructor"], [1128, 3, 2, "", "kwargs", "Constructor"]], "foxes.output.WindRoseBinPlot.get_data": [[1129, 3, 2, "", "contraction", "Generates the plot data"], [1129, 3, 2, "", "turbine", "Generates the plot data"], [1129, 3, 2, "", "variable", "Generates the plot data"], [1129, 3, 2, "", "wd_sectors", "Generates the plot data"], [1129, 3, 2, "", "wd_var", "Generates the plot data"], [1129, 3, 2, "", "ws_bins", "Generates the plot data"], [1129, 3, 2, "", "ws_var", "Generates the plot data"]], "foxes.output.WindRoseBinPlot.get_figure": [[1130, 3, 2, "", "ax", "Creates the figure"], [1130, 3, 2, "", "contraction", "Creates the figure"], [1130, 3, 2, "", "fig", "Creates the figure"], [1130, 3, 2, "", "figsize", "Creates the figure"], [1130, 3, 2, "", "kwargs", "Creates the figure"], [1130, 3, 2, "", "ret_data", "Creates the figure"], [1130, 3, 2, "", "title", "Creates the figure"], [1130, 3, 2, "", "turbine", "Creates the figure"], [1130, 3, 2, "", "variable", "Creates the figure"], [1130, 3, 2, "", "wd_sectors", "Creates the figure"], [1130, 3, 2, "", "wd_var", "Creates the figure"], [1130, 3, 2, "", "ws_bins", "Creates the figure"], [1130, 3, 2, "", "ws_var", "Creates the figure"]], "foxes.output.WindRoseBinPlot.write_figure": [[1131, 3, 2, "", "args", "Write rose plot to file"], [1131, 3, 2, "", "file_name", "Write rose plot to file"], [1131, 3, 2, "", "kwargs", "Write rose plot to file"], [1131, 3, 2, "", "ret_data", "Write rose plot to file"]], "foxes.output.flow_plots_2d": [[1132, 5, 1, "", "get_fig", "Helper function that creates the flow image plot."]], "foxes.output.flow_plots_2d.get_fig": [[1132, 3, 2, "", "add_bar", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "animated", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "ax", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "cmap", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "data", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "fig", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "figsize", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "invert_axis", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "levels", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "quiv", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "ret_im", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "ret_state", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "s", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "show_rotor_dict", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "si", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "title", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "var", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "vlabel", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "vmax", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "vmin", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "x_pos", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "xlabel", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "y_pos", "Helper function that creates the flow image plot."], [1132, 3, 2, "", "ylabel", "Helper function that creates the flow image plot."]], "foxes.output.plt": [[1134, 2, 1, "", "savefig", ""]], "foxes.output.plt.savefig": [[1134, 3, 2, "", "args", ""], [1134, 3, 2, "", "fname", ""], [1134, 3, 2, "", "kwargs", ""]], "foxes.utils": [[1135, 0, 1, "", "DataBook", "Container class for file paths, either directly given or as static data within a package."], [1143, 0, 1, "", "Dict", "A slightly enhanced dictionary."], [1149, 0, 1, "", "FDict", "A dictionary with factory support"], [1156, 0, 1, "", "Factory", "Constructs objects from a choice of allowed constructor parameters"], [1165, 0, 1, "", "PandasFileHelper", "This class helps reading and writing data to files via pandas."], [1172, 0, 1, "", "ReaderWRG", "A reader for WRG files"], [1181, 0, 1, "", "WakeKFactory", "A factory that automatically handles wake_k parameters"], [1195, 5, 1, "", "all_subclasses", "Searches all classes derived from some base class."], [1196, 5, 1, "", "cubic_roots", "Calculate real roots of polynomials of degree 3."], [1197, 5, 1, "", "delta_wd", "Calculates wd_b - wd_a."], [1198, 5, 1, "", "exec_python", "Executes strings that start with the indicator as python commands, returns one value"], [1246, 5, 1, "", "import_module", "Imports a module dynamically."], [1247, 5, 1, "", "load_module", "Imports a module from a file path"], [1248, 5, 1, "", "new_cls", "Run-time class selector."], [1249, 5, 1, "", "new_instance", "Run-time factory."], [1250, 5, 1, "", "print_mem", "Prints the memory consumption of a model and its components"], [1251, 5, 1, "", "random_xy_square", "Creates random xy positions within a square, with mean (0, 0)"], [1252, 5, 1, "", "read_shp", "Read a shapefile file"], [1253, 5, 1, "", "read_shp_polygons", "Reads the polygon points from a shp file."], [1254, 5, 1, "", "read_tab_file", "Reads a tab file into a Dataset"], [1255, 5, 1, "", "shp2csv", "Read shapefile file, write csv file"], [1256, 5, 1, "", "shp2geom2d", "Read shapefile into geom2d geometry"], [1257, 5, 1, "", "sqrt_reg", "A regularized sqrt function, producing non-zero values also for smallish negative x."], [1260, 5, 1, "", "uv2wd", "Calculate wind direction from wind vectors."], [1261, 5, 1, "", "wd2uv", "Calculate wind vectors from wind directions in degrees."], [1262, 5, 1, "", "wd2wdvec", "Calculate wind direction vectors from wind directions in degrees."], [1263, 5, 1, "", "wdvec2wd", "Calculate wind direction from wind direction vectors."], [1264, 5, 1, "", "write_nc", "Writes a dataset to netCDF file"]], "foxes.utils.DataBook": [[1136, 2, 1, "", "__init__", "Constructor."], [1137, 2, 1, "", "add_data_package", "Add static files from a package location."], [1138, 2, 1, "", "add_data_package_file", "Add a static file from a package location."], [1139, 2, 1, "", "add_file", "Add a file path"], [1140, 2, 1, "", "add_files", "Add file paths"], [1141, 2, 1, "", "get_file_path", "Get path of a file"], [1142, 2, 1, "", "toc", "Get list of contents"]], "foxes.utils.DataBook.__init__": [[1136, 3, 2, "", "data_book", "Constructor."]], "foxes.utils.DataBook.add_data_package": [[1137, 3, 2, "", "context", "Add static files from a package location."], [1137, 3, 2, "", "file_sfx", "Add static files from a package location."], [1137, 3, 2, "", "package", "Add static files from a package location."]], "foxes.utils.DataBook.add_data_package_file": [[1138, 3, 2, "", "context", "Add a static file from a package location."], [1138, 3, 2, "", "file_name", "Add a static file from a package location."], [1138, 3, 2, "", "package", "Add a static file from a package location."]], "foxes.utils.DataBook.add_file": [[1139, 3, 2, "", "context", "Add a file path"], [1139, 3, 2, "", "file_path", "Add a file path"]], "foxes.utils.DataBook.add_files": [[1140, 3, 2, "", "context", "Add file paths"], [1140, 3, 2, "", "file_paths", "Add file paths"]], "foxes.utils.DataBook.get_file_path": [[1141, 3, 2, "", "check_raw", "Get path of a file"], [1141, 3, 2, "", "context", "Get path of a file"], [1141, 3, 2, "", "errors", "Get path of a file"], [1141, 3, 2, "", "file_name", "Get path of a file"]], "foxes.utils.DataBook.toc": [[1142, 3, 2, "", "context", "Get list of contents"]], "foxes.utils.Dict": [[1144, 2, 1, "", "__getitem__", "Return self[key]."], [1145, 2, 1, "", "__init__", "Constructor."], [1146, 2, 1, "", "from_yaml", "Reads a yaml file"], [1147, 2, 1, "", "get_item", "Gets an item, prints readable error if not found"], [1148, 2, 1, "", "pop_item", "Pops an item, prints readable error if not found"]], "foxes.utils.Dict.__getitem__": [[1144, 3, 2, "", "key", "Return self[key]."]], "foxes.utils.Dict.__init__": [[1145, 3, 2, "", "args", "Constructor."], [1145, 3, 2, "", "kwargs", "Constructor."], [1145, 3, 2, "", "name", "Constructor."]], "foxes.utils.Dict.from_yaml": [[1146, 3, 2, "", "verbosity", "Reads a yaml file"], [1146, 3, 2, "", "yml_file", "Reads a yaml file"]], "foxes.utils.Dict.get_item": [[1147, 3, 2, "", "deflt", "Gets an item, prints readable error if not found"], [1147, 3, 2, "", "key", "Gets an item, prints readable error if not found"], [1147, 3, 2, "", "prnt", "Gets an item, prints readable error if not found"]], "foxes.utils.Dict.pop_item": [[1148, 3, 2, "", "deflt", "Pops an item, prints readable error if not found"], [1148, 3, 2, "", "key", "Pops an item, prints readable error if not found"], [1148, 3, 2, "", "prnt", "Pops an item, prints readable error if not found"]], "foxes.utils.FDict": [[1150, 2, 1, "", "__contains__", "True if the dictionary has the specified key, else False."], [1151, 2, 1, "", "__getitem__", "Return self[key]."], [1152, 2, 1, "", "__init__", "Constructor."], [1153, 2, 1, "", "add_factory", "Adds a Factory object."], [1154, 2, 1, "", "add_k_factory", "Adds a WakeKFactory."], [1155, 2, 1, "", "get_item", "Gets an item, prints readable error if not found"]], "foxes.utils.FDict.__contains__": [[1150, 3, 2, "", "key", "True if the dictionary has the specified key, else False."]], "foxes.utils.FDict.__getitem__": [[1151, 3, 2, "", "key", "Return self[key]."]], "foxes.utils.FDict.__init__": [[1152, 3, 2, "", "args", "Constructor."], [1152, 3, 2, "", "kwargs", "Constructor."], [1152, 3, 2, "", "store_created", "Constructor."]], "foxes.utils.FDict.add_factory": [[1153, 3, 2, "", "args", "Adds a Factory object."], [1153, 3, 2, "", "factory", "Adds a Factory object."], [1153, 3, 2, "", "kwargs", "Adds a Factory object."]], "foxes.utils.FDict.add_k_factory": [[1154, 3, 2, "", "args", "Adds a WakeKFactory."], [1154, 3, 2, "", "kwargs", "Adds a WakeKFactory."]], "foxes.utils.FDict.get_item": [[1155, 3, 2, "", "key", "Gets an item, prints readable error if not found"], [1155, 3, 2, "", "prnt", "Gets an item, prints readable error if not found"]], "foxes.utils.Factory": [[1157, 2, 1, "", "__init__", "Constructor."], [1158, 2, 1, "", "__str__", "String representation"], [1159, 2, 1, "", "check_match", "Tests if a name matches the template and constructs parameters"], [1160, 2, 1, "", "construct", "Create an object of the base class."], [1161, 2, 1, "", "get_examples", "Create example names from given values"], [1162, 4, 1, "", "name_prefix", "The beginning of the name template"], [1163, 4, 1, "", "name_suffix", "The ending of the name template"], [1164, 4, 1, "", "variables", "The list of variables"]], "foxes.utils.Factory.__init__": [[1157, 3, 2, "", "args", "Constructor."], [1157, 3, 2, "", "base", "Constructor."], [1157, 3, 2, "", "example_vars", "Constructor."], [1157, 3, 2, "", "hints", "Constructor."], [1157, 3, 2, "", "kwargs", "Constructor."], [1157, 3, 2, "", "name_template", "Constructor."], [1157, 3, 2, "", "options", "Constructor."], [1157, 3, 2, "", "var2arg", "Constructor."]], "foxes.utils.Factory.check_match": [[1159, 3, 2, "", "error", "Tests if a name matches the template and constructs parameters"], [1159, 3, 2, "", "name", "Tests if a name matches the template and constructs parameters"], [1159, 3, 2, "", "ret_pars", "Tests if a name matches the template and constructs parameters"]], "foxes.utils.Factory.construct": [[1160, 3, 2, "", "name", "Create an object of the base class."]], "foxes.utils.Factory.get_examples": [[1161, 3, 2, "", "var_values", "Create example names from given values"]], "foxes.utils.PandasFileHelper": [[1166, 1, 1, "", "DATA_FILE_FORMATS", ""], [1167, 1, 1, "", "DEFAULT_FORMAT_DICT", ""], [1168, 1, 1, "", "DEFAULT_READING_PARAMETERS", ""], [1169, 1, 1, "", "DEFAULT_WRITING_PARAMETERS", ""], [1170, 2, 1, "", "read_file", "Helper for reading data according to file ending."], [1171, 2, 1, "", "write_file", "Helper for writing data according to file ending."]], "foxes.utils.PandasFileHelper.read_file": [[1170, 3, 2, "", "file_path", "Helper for reading data according to file ending."], [1170, 3, 2, "", "kwargs", "Helper for reading data according to file ending."]], "foxes.utils.PandasFileHelper.write_file": [[1171, 3, 2, "", "data", "Helper for writing data according to file ending."], [1171, 3, 2, "", "file_path", "Helper for writing data according to file ending."], [1171, 3, 2, "", "format_dict", "Helper for writing data according to file ending."], [1171, 3, 2, "", "kwargs", "Helper for writing data according to file ending."]], "foxes.utils.ReaderWRG": [[1173, 2, 1, "", "__init__", "Constructor"], [1174, 4, 1, "", "data", "The WRG data"], [1175, 4, 1, "", "n_sectors", "The number of wind direction sectors"], [1176, 4, 1, "", "nx", "The number of points in x direction"], [1177, 4, 1, "", "ny", "The number of points in y direction"], [1178, 4, 1, "", "resolution", "The horizontal resolution"], [1179, 4, 1, "", "x0", "The lower left x coordinate"], [1180, 4, 1, "", "y0", "The lower left y coordinate"]], "foxes.utils.ReaderWRG.__init__": [[1173, 3, 2, "", "fpath", "Constructor"]], "foxes.utils.WakeKFactory": [[1182, 2, 1, "", "__init__", "Constructor."], [1183, 2, 1, "", "__str__", "String representation"]], "foxes.utils.WakeKFactory.__init__": [[1182, 3, 2, "", "args", "Constructor."], [1182, 3, 2, "", "base", "Constructor."], [1182, 3, 2, "", "hints", "Constructor."], [1182, 3, 2, "", "kwargs", "Constructor."], [1182, 3, 2, "", "name_template", "Constructor."]], "foxes.utils.abl.neutral": [[1184, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [1185, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [1186, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.neutral.calc_ws": [[1184, 3, 2, "", "height", "Calculate wind speeds at given height"], [1184, 3, 2, "", "kappa", "Calculate wind speeds at given height"], [1184, 3, 2, "", "ustar", "Calculate wind speeds at given height"], [1184, 3, 2, "", "z0", "Calculate wind speeds at given height"]], "foxes.utils.abl.neutral.logz": [[1185, 3, 2, "", "height", "Calculates the log factor for wind speed profiles."], [1185, 3, 2, "", "z0", "Calculates the log factor for wind speed profiles."]], "foxes.utils.abl.neutral.ustar": [[1186, 3, 2, "", "h_ref", "Calculates the friction velocity, based on reference data."], [1186, 3, 2, "", "kappa", "Calculates the friction velocity, based on reference data."], [1186, 3, 2, "", "ws_ref", "Calculates the friction velocity, based on reference data."], [1186, 3, 2, "", "z0", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.sheared": [[1187, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"]], "foxes.utils.abl.sheared.calc_ws": [[1187, 3, 2, "", "WS0", "Calculate wind speeds at given height"], [1187, 3, 2, "", "height", "Calculate wind speeds at given height"], [1187, 3, 2, "", "height0", "Calculate wind speeds at given height"], [1187, 3, 2, "", "shear", "Calculate wind speeds at given height"]], "foxes.utils.abl.stable": [[1188, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [1189, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [1190, 5, 1, "", "psi", "The Psi function"], [1191, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.stable.calc_ws": [[1188, 3, 2, "", "height", "Calculate wind speeds at given height"], [1188, 3, 2, "", "kappa", "Calculate wind speeds at given height"], [1188, 3, 2, "", "psi", "Calculate wind speeds at given height"], [1188, 3, 2, "", "ustar", "Calculate wind speeds at given height"], [1188, 3, 2, "", "z0", "Calculate wind speeds at given height"]], "foxes.utils.abl.stable.logz": [[1189, 3, 2, "", "height", "Calculates the log factor for wind speed profiles."], [1189, 3, 2, "", "z0", "Calculates the log factor for wind speed profiles."]], "foxes.utils.abl.stable.psi": [[1190, 3, 2, "", "height", "The Psi function"], [1190, 3, 2, "", "mol", "The Psi function"]], "foxes.utils.abl.stable.ustar": [[1191, 3, 2, "", "h_ref", "Calculates the friction velocity, based on reference data."], [1191, 3, 2, "", "kappa", "Calculates the friction velocity, based on reference data."], [1191, 3, 2, "", "mol", "Calculates the friction velocity, based on reference data."], [1191, 3, 2, "", "ws_ref", "Calculates the friction velocity, based on reference data."], [1191, 3, 2, "", "z0", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.unstable": [[1192, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [1193, 5, 1, "", "psi", "The Psi function"], [1194, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.unstable.calc_ws": [[1192, 3, 2, "", "height", "Calculate wind speeds at given height"], [1192, 3, 2, "", "kappa", "Calculate wind speeds at given height"], [1192, 3, 2, "", "psi", "Calculate wind speeds at given height"], [1192, 3, 2, "", "ustar", "Calculate wind speeds at given height"], [1192, 3, 2, "", "z0", "Calculate wind speeds at given height"]], "foxes.utils.abl.unstable.psi": [[1193, 3, 2, "", "height", "The Psi function"], [1193, 3, 2, "", "mol", "The Psi function"]], "foxes.utils.abl.unstable.ustar": [[1194, 3, 2, "", "h_ref", "Calculates the friction velocity, based on reference data."], [1194, 3, 2, "", "kappa", "Calculates the friction velocity, based on reference data."], [1194, 3, 2, "", "mol", "Calculates the friction velocity, based on reference data."], [1194, 3, 2, "", "ws_ref", "Calculates the friction velocity, based on reference data."], [1194, 3, 2, "", "z0", "Calculates the friction velocity, based on reference data."]], "foxes.utils.all_subclasses": [[1195, 3, 2, "", "cls", "Searches all classes derived from some base class."]], "foxes.utils.cubic_roots": [[1196, 3, 2, "", "a0", "Calculate real roots of polynomials of degree 3."], [1196, 3, 2, "", "a1", "Calculate real roots of polynomials of degree 3."], [1196, 3, 2, "", "a2", "Calculate real roots of polynomials of degree 3."], [1196, 3, 2, "", "a3", "Calculate real roots of polynomials of degree 3."]], "foxes.utils.delta_wd": [[1197, 3, 2, "", "wd_a", "Calculates wd_b - wd_a."], [1197, 3, 2, "", "wd_b", "Calculates wd_b - wd_a."]], "foxes.utils.exec_python": [[1198, 3, 2, "", "&#x27;AssertionError&#x27;: &lt;class &#x27;AssertionError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;AttributeError&#x27;: &lt;class &#x27;AttributeError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;BaseException&#x27;: &lt;class &#x27;BaseException&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;BaseExceptionGroup&#x27;: &lt;class &#x27;BaseExceptionGroup&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;BlockingIOError&#x27;: &lt;class &#x27;BlockingIOError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;BrokenPipeError&#x27;: &lt;class &#x27;BrokenPipeError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;BufferError&#x27;: &lt;class &#x27;BufferError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;BytesWarning&#x27;: &lt;class &#x27;BytesWarning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ChildProcessError&#x27;: &lt;class &#x27;ChildProcessError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ConnectionAbortedError&#x27;: &lt;class &#x27;ConnectionAbortedError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ConnectionError&#x27;: &lt;class &#x27;ConnectionError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ConnectionRefusedError&#x27;: &lt;class &#x27;ConnectionRefusedError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ConnectionResetError&#x27;: &lt;class &#x27;ConnectionResetError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;DeprecationWarning&#x27;: &lt;class &#x27;DeprecationWarning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;EOFError&#x27;: &lt;class &#x27;EOFError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;Ellipsis&#x27;: Ellipsis", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;EncodingWarning&#x27;: &lt;class &#x27;EncodingWarning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;EnvironmentError&#x27;: &lt;class &#x27;OSError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;Exception&#x27;: &lt;class &#x27;Exception&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ExceptionGroup&#x27;: &lt;class &#x27;ExceptionGroup&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;False&#x27;: False", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;FileExistsError&#x27;: &lt;class &#x27;FileExistsError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;FileNotFoundError&#x27;: &lt;class &#x27;FileNotFoundError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;FloatingPointError&#x27;: &lt;class &#x27;FloatingPointError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;FutureWarning&#x27;: &lt;class &#x27;FutureWarning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;GeneratorExit&#x27;: &lt;class &#x27;GeneratorExit&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;IOError&#x27;: &lt;class &#x27;OSError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ImportError&#x27;: &lt;class &#x27;ImportError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ImportWarning&#x27;: &lt;class &#x27;ImportWarning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;IndentationError&#x27;: &lt;class &#x27;IndentationError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;IndexError&#x27;: &lt;class &#x27;IndexError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;InterruptedError&#x27;: &lt;class &#x27;InterruptedError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;IsADirectoryError&#x27;: &lt;class &#x27;IsADirectoryError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;KeyError&#x27;: &lt;class &#x27;KeyError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;KeyboardInterrupt&#x27;: &lt;class &#x27;KeyboardInterrupt&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;LookupError&#x27;: &lt;class &#x27;LookupError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;MemoryError&#x27;: &lt;class &#x27;MemoryError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ModuleNotFoundError&#x27;: &lt;class &#x27;ModuleNotFoundError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;NameError&#x27;: &lt;class &#x27;NameError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;None&#x27;: None", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;NotADirectoryError&#x27;: &lt;class &#x27;NotADirectoryError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;NotImplemented&#x27;: NotImplemented", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;NotImplementedError&#x27;: &lt;class &#x27;NotImplementedError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;OSError&#x27;: &lt;class &#x27;OSError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;OverflowError&#x27;: &lt;class &#x27;OverflowError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;PendingDeprecationWarning&#x27;: &lt;class &#x27;PendingDeprecationWarning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;PermissionError&#x27;: &lt;class &#x27;PermissionError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ProcessLookupError&#x27;: &lt;class &#x27;ProcessLookupError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;RecursionError&#x27;: &lt;class &#x27;RecursionError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ReferenceError&#x27;: &lt;class &#x27;ReferenceError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ResourceWarning&#x27;: &lt;class &#x27;ResourceWarning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;RuntimeError&#x27;: &lt;class &#x27;RuntimeError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;RuntimeWarning&#x27;: &lt;class &#x27;RuntimeWarning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;StopAsyncIteration&#x27;: &lt;class &#x27;StopAsyncIteration&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;StopIteration&#x27;: &lt;class &#x27;StopIteration&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;SyntaxError&#x27;: &lt;class &#x27;SyntaxError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;SyntaxWarning&#x27;: &lt;class &#x27;SyntaxWarning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;SystemError&#x27;: &lt;class &#x27;SystemError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;SystemExit&#x27;: &lt;class &#x27;SystemExit&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;TabError&#x27;: &lt;class &#x27;TabError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;TimeoutError&#x27;: &lt;class &#x27;TimeoutError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;True&#x27;: True", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;TypeError&#x27;: &lt;class &#x27;TypeError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;UnboundLocalError&#x27;: &lt;class &#x27;UnboundLocalError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;UnicodeDecodeError&#x27;: &lt;class &#x27;UnicodeDecodeError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;UnicodeEncodeError&#x27;: &lt;class &#x27;UnicodeEncodeError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;UnicodeError&#x27;: &lt;class &#x27;UnicodeError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;UnicodeTranslateError&#x27;: &lt;class &#x27;UnicodeTranslateError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;UnicodeWarning&#x27;: &lt;class &#x27;UnicodeWarning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;UserWarning&#x27;: &lt;class &#x27;UserWarning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ValueError&#x27;: &lt;class &#x27;ValueError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;Warning&#x27;: &lt;class &#x27;Warning&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ZeroDivisionError&#x27;: &lt;class &#x27;ZeroDivisionError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;__build_class__&#x27;: &lt;built-in function __build_class__&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;__debug__&#x27;: True", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;__doc__&#x27;: &quot;Built-in functions", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;__doc__&#x27;: None", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;__import__&#x27;: &lt;built-in function __import__&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;__name__&#x27;: &#x27;builtins&#x27;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;__package__&#x27;: &#x27;&#x27;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;__spec__&#x27;: ModuleSpec(name=&#x27;builtins&#x27;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;abs&#x27;: &lt;built-in function abs&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;aiter&#x27;: &lt;built-in function aiter&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;all&#x27;: &lt;built-in function all&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;anext&#x27;: &lt;built-in function anext&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;any&#x27;: &lt;built-in function any&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ascii&#x27;: &lt;built-in function ascii&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;bin&#x27;: &lt;built-in function bin&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;bool&#x27;: &lt;class &#x27;bool&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;breakpoint&#x27;: &lt;built-in function breakpoint&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;bytearray&#x27;: &lt;class &#x27;bytearray&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;bytes&#x27;: &lt;class &#x27;bytes&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;callable&#x27;: &lt;built-in function callable&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;chr&#x27;: &lt;built-in function chr&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;classmethod&#x27;: &lt;class &#x27;classmethod&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;compile&#x27;: &lt;built-in function compile&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;complex&#x27;: &lt;class &#x27;complex&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;credits&#x27;:     Thanks to CWI", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;delattr&#x27;: &lt;built-in function delattr&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;dict&#x27;: &lt;class &#x27;dict&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;dir&#x27;: &lt;built-in function dir&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;divmod&#x27;: &lt;built-in function divmod&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;enumerate&#x27;: &lt;class &#x27;enumerate&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;eval&#x27;: &lt;built-in function eval&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;exec&#x27;: &lt;built-in function exec&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;exec_python&#x27;: &lt;function exec_python&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;filter&#x27;: &lt;class &#x27;filter&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;float&#x27;: &lt;class &#x27;float&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;format&#x27;: &lt;built-in function format&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;frozenset&#x27;: &lt;class &#x27;frozenset&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;getattr&#x27;: &lt;built-in function getattr&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;globals&#x27;: &lt;built-in function globals&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;hasattr&#x27;: &lt;built-in function hasattr&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;hash&#x27;: &lt;built-in function hash&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;help&#x27;: Type help() for interactive help", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;hex&#x27;: &lt;built-in function hex&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;id&#x27;: &lt;built-in function id&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;input&#x27;: &lt;built-in function input&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;int&#x27;: &lt;class &#x27;int&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;isinstance&#x27;: &lt;built-in function isinstance&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;issubclass&#x27;: &lt;built-in function issubclass&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;iter&#x27;: &lt;built-in function iter&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;len&#x27;: &lt;built-in function len&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;license&#x27;: Type license() to see the full license text", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;list&#x27;: &lt;class &#x27;list&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;locals&#x27;: &lt;built-in function locals&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;map&#x27;: &lt;class &#x27;map&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;max&#x27;: &lt;built-in function max&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;memoryview&#x27;: &lt;class &#x27;memoryview&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;min&#x27;: &lt;built-in function min&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;next&#x27;: &lt;built-in function next&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;object&#x27;: &lt;class &#x27;object&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;oct&#x27;: &lt;built-in function oct&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;open&#x27;: &lt;built-in function open&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;ord&#x27;: &lt;built-in function ord&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;pow&#x27;: &lt;built-in function pow&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;print&#x27;: &lt;built-in function print&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;property&#x27;: &lt;class &#x27;property&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;range&#x27;: &lt;class &#x27;range&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;repr&#x27;: &lt;built-in function repr&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;reversed&#x27;: &lt;class &#x27;reversed&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;round&#x27;: &lt;built-in function round&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;set&#x27;: &lt;class &#x27;set&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;setattr&#x27;: &lt;built-in function setattr&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;slice&#x27;: &lt;class &#x27;slice&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;sorted&#x27;: &lt;built-in function sorted&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;staticmethod&#x27;: &lt;class &#x27;staticmethod&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;str&#x27;: &lt;class &#x27;str&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;sum&#x27;: &lt;built-in function sum&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;super&#x27;: &lt;class &#x27;super&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;tuple&#x27;: &lt;class &#x27;tuple&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;type&#x27;: &lt;class &#x27;type&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;vars&#x27;: &lt;built-in function vars&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "&#x27;zip&#x27;: &lt;class &#x27;zip&#x27;&gt;}", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "CNRI", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "but can be useful in modules that provide\\nobjects with the same name as a built-in value", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "exceptions", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "globals={&#x27;__builtins__&#x27;: {&#x27;ArithmeticError&#x27;: &lt;class &#x27;ArithmeticError&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "indicator=&#x27;%&#x27;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "locals={}", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "newline=&#x27;;&#x27;", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "origin=&#x27;built-in&#x27;)", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "s", "Executes strings that start with the indicator as python commands, returns one value"], [1198, 3, 2, "", "types", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;__cached__&#x27;: &#x27;/home/jonas/gits/wakes/foxes/foxes/utils/__pycache__/exec_python.cpython-312": [[1198, 3, 2, "", "pyc&#x27;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;__file__&#x27;: &#x27;/home/jonas/gits/wakes/foxes/foxes/utils/exec_python": [[1198, 3, 2, "", "py&#x27;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;__loader__&#x27;: &lt;_frozen_importlib_external": [[1198, 3, 2, "", "SourceFileLoader object&gt;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib": [[1198, 3, 2, "", "BuiltinImporter&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;__name__&#x27;: &#x27;foxes.utils": [[1198, 3, 2, "", "exec_python&#x27;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;__package__&#x27;: &#x27;foxes": [[1198, 3, 2, "", "utils&#x27;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;__spec__&#x27;: ModuleSpec(name=&#x27;foxes.utils": [[1198, 3, 2, "", "exec_python&#x27;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;copyright&#x27;: Copyright (c) 2001-2023 Python Software Foundation. All Rights Reserved.  Copyright (c) 2000 BeOpen.com. All Rights Reserved.  Copyright (c) 1995-2001 Corporation for National Research Initiatives. All Rights Reserved": [[1198, 3, 2, "", "  Copyright (c) 1991-1995 Stichting Mathematisch Centrum", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;exit&#x27;: Use exit() or Ctrl-D (i.e": [[1198, 3, 2, "", " EOF) to exit", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;np&#x27;: &lt;module &#x27;numpy&#x27; from &#x27;/home/jonas/venv/foxes/lib/python3.12/site-packages/numpy/__init__": [[1198, 3, 2, "", "py&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;pd&#x27;: &lt;module &#x27;pandas&#x27; from &#x27;/home/jonas/venv/foxes/lib/python3.12/site-packages/pandas/__init__": [[1198, 3, 2, "", "py&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;plt&#x27;: &lt;module &#x27;matplotlib.pyplot&#x27; from &#x27;/home/jonas/venv/foxes/lib/python3.12/site-packages/matplotlib/pyplot": [[1198, 3, 2, "", "py&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;quit&#x27;: Use quit() or Ctrl-D (i.e": [[1198, 3, 2, "", " EOF) to exit", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.&#x27;xr&#x27;: &lt;module &#x27;xarray&#x27; from &#x27;/home/jonas/venv/foxes/lib/python3.12/site-packages/xarray/__init__": [[1198, 3, 2, "", "py&#x27;&gt;}", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.Amsterdam. All Rights Reserved": [[1198, 3, 2, "", "", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.BeOpen": [[1198, 3, 2, "", "com", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.Zope Corporation and a cast of thousands     for supporting Python development.  See www.python.org for more information": [[1198, 3, 2, "", "", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.and other objects": [[1198, 3, 2, "", "\\n\\nThis module provides direct access to all &#x27;built-in&#x27;\\nidentifiers of Python; for example", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.builtins.len is\\nthe full name for the built-in function len()": [[1198, 3, 2, "", "\\n\\nThis module is not normally accessed explicitly by most\\napplications", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.but in\\nwhich the built-in of that name is also needed": [[1198, 3, 2, "", "&quot;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.loader=&lt;_frozen_importlib_external": [[1198, 3, 2, "", "SourceFileLoader object&gt;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.loader=&lt;class &#x27;_frozen_importlib": [[1198, 3, 2, "", "BuiltinImporter&#x27;&gt;", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.or help(object) for help about object": [[1198, 3, 2, "", "", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.exec_python.origin=&#x27;/home/jonas/gits/wakes/foxes/foxes/utils/exec_python": [[1198, 3, 2, "", "py&#x27;)", "Executes strings that start with the indicator as python commands, returns one value"]], "foxes.utils.geom2d": [[1199, 0, 1, "", "AreaGeometry", "Abstract base class for closed 2D geometries."], [1206, 0, 1, "", "AreaIntersection", "The intersection of area geometries."], [1208, 0, 1, "", "AreaUnion", "The union of area geometries."], [1216, 0, 1, "", "Circle", "This class represents the area of a circle."], [1223, 0, 1, "", "ClosedPolygon", "This class represents a closed 2D polygon."], [1230, 0, 1, "", "HalfPlane", "This class represents a half plane in 2d."], [1238, 0, 1, "", "InvertedAreaGeometry", "Base class for inverted geometries."]], "foxes.utils.geom2d.AreaGeometry": [[1200, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1201, 2, 1, "", "inverse", "Get the inverted geometry"], [1202, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [1203, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [1204, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1205, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.AreaGeometry.add_to_figure": [[1200, 3, 2, "", "ax", "Add image to (x,y) figure."], [1200, 3, 2, "", "fill_mode", "Add image to (x,y) figure."], [1200, 3, 2, "", "pars_boundary", "Add image to (x,y) figure."], [1200, 3, 2, "", "pars_distance", "Add image to (x,y) figure."], [1200, 3, 2, "", "show_boundary", "Add image to (x,y) figure."]], "foxes.utils.geom2d.AreaGeometry.points_distance": [[1204, 3, 2, "", "points", "Calculates point distances wrt boundary."], [1204, 3, 2, "", "return_nearest", "Calculates point distances wrt boundary."]], "foxes.utils.geom2d.AreaGeometry.points_inside": [[1205, 3, 2, "", "points", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.AreaIntersection": [[1207, 2, 1, "", "__new__", "Constructor."]], "foxes.utils.geom2d.AreaIntersection.__new__": [[1207, 3, 2, "", "cls", "Constructor."], [1207, 3, 2, "", "geometries", "Constructor."]], "foxes.utils.geom2d.AreaUnion": [[1209, 2, 1, "", "__init__", "Constructor."], [1210, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1211, 2, 1, "", "inverse", "Get the inverted geometry"], [1212, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [1213, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [1214, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1215, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.AreaUnion.__init__": [[1209, 3, 2, "", "geometries", "Constructor."]], "foxes.utils.geom2d.AreaUnion.add_to_figure": [[1210, 3, 2, "", "ax", "Add image to (x,y) figure."], [1210, 3, 2, "", "fill_mode", "Add image to (x,y) figure."], [1210, 3, 2, "", "pars_boundary", "Add image to (x,y) figure."], [1210, 3, 2, "", "pars_distance", "Add image to (x,y) figure."], [1210, 3, 2, "", "show_boundary", "Add image to (x,y) figure."]], "foxes.utils.geom2d.AreaUnion.points_distance": [[1214, 3, 2, "", "points", "Calculates point distances wrt boundary."], [1214, 3, 2, "", "return_nearest", "Calculates point distances wrt boundary."]], "foxes.utils.geom2d.AreaUnion.points_inside": [[1215, 3, 2, "", "points", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.Circle": [[1217, 2, 1, "", "__init__", "Constructor."], [1218, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1219, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [1220, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [1221, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1222, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.Circle.__init__": [[1217, 3, 2, "", "centre", "Constructor."], [1217, 3, 2, "", "radius", "Constructor."]], "foxes.utils.geom2d.Circle.add_to_figure": [[1218, 3, 2, "", "ax", "Add image to (x,y) figure."], [1218, 3, 2, "", "fill_mode", "Add image to (x,y) figure."], [1218, 3, 2, "", "pars_boundary", "Add image to (x,y) figure."], [1218, 3, 2, "", "pars_distance", "Add image to (x,y) figure."], [1218, 3, 2, "", "show_boundary", "Add image to (x,y) figure."]], "foxes.utils.geom2d.Circle.points_distance": [[1221, 3, 2, "", "points", "Calculates point distances wrt boundary."], [1221, 3, 2, "", "return_nearest", "Calculates point distances wrt boundary."]], "foxes.utils.geom2d.Circle.points_inside": [[1222, 3, 2, "", "points", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.ClosedPolygon": [[1224, 2, 1, "", "__init__", "Constructor."], [1225, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1226, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [1227, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [1228, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1229, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.ClosedPolygon.__init__": [[1224, 3, 2, "", "points", "Constructor."]], "foxes.utils.geom2d.ClosedPolygon.add_to_figure": [[1225, 3, 2, "", "ax", "Add image to (x,y) figure."], [1225, 3, 2, "", "fill_mode", "Add image to (x,y) figure."], [1225, 3, 2, "", "pars_boundary", "Add image to (x,y) figure."], [1225, 3, 2, "", "pars_distance", "Add image to (x,y) figure."], [1225, 3, 2, "", "show_boundary", "Add image to (x,y) figure."]], "foxes.utils.geom2d.ClosedPolygon.points_distance": [[1228, 3, 2, "", "points", "Calculates point distances wrt boundary."], [1228, 3, 2, "", "return_nearest", "Calculates point distances wrt boundary."]], "foxes.utils.geom2d.ClosedPolygon.points_inside": [[1229, 3, 2, "", "points", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.HalfPlane": [[1231, 2, 1, "", "__init__", "Constructor."], [1232, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1233, 2, 1, "", "inverse", "Get the inverted geometry"], [1234, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [1235, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [1236, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1237, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.HalfPlane.__init__": [[1231, 3, 2, "", "centre", "Constructor."], [1231, 3, 2, "", "n", "Constructor."]], "foxes.utils.geom2d.HalfPlane.add_to_figure": [[1232, 3, 2, "", "ax", "Add image to (x,y) figure."], [1232, 3, 2, "", "fill_mode", "Add image to (x,y) figure."], [1232, 3, 2, "", "pars_boundary", "Add image to (x,y) figure."], [1232, 3, 2, "", "pars_distance", "Add image to (x,y) figure."], [1232, 3, 2, "", "show_boundary", "Add image to (x,y) figure."]], "foxes.utils.geom2d.HalfPlane.points_distance": [[1236, 3, 2, "", "points", "Calculates point distances wrt boundary."], [1236, 3, 2, "", "return_nearest", "Calculates point distances wrt boundary."]], "foxes.utils.geom2d.HalfPlane.points_inside": [[1237, 3, 2, "", "points", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.InvertedAreaGeometry": [[1239, 2, 1, "", "__init__", "Constructor."], [1240, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1241, 2, 1, "", "inverse", "Get the inverted geometry"], [1242, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [1243, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [1244, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1245, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.InvertedAreaGeometry.__init__": [[1239, 3, 2, "", "geometry", "Constructor."]], "foxes.utils.geom2d.InvertedAreaGeometry.add_to_figure": [[1240, 3, 2, "", "ax", "Add image to (x,y) figure."], [1240, 3, 2, "", "fill_mode", "Add image to (x,y) figure."], [1240, 3, 2, "", "pars_boundary", "Add image to (x,y) figure."], [1240, 3, 2, "", "pars_distance", "Add image to (x,y) figure."], [1240, 3, 2, "", "show_boundary", "Add image to (x,y) figure."]], "foxes.utils.geom2d.InvertedAreaGeometry.points_distance": [[1244, 3, 2, "", "points", "Calculates point distances wrt boundary."], [1244, 3, 2, "", "return_nearest", "Calculates point distances wrt boundary."]], "foxes.utils.geom2d.InvertedAreaGeometry.points_inside": [[1245, 3, 2, "", "points", "Tests if points are inside the geometry."]], "foxes.utils.import_module": [[1246, 3, 2, "", "conda_hint", "Imports a module dynamically."], [1246, 3, 2, "", "name", "Imports a module dynamically."], [1246, 3, 2, "", "package", "Imports a module dynamically."], [1246, 3, 2, "", "pip_hint", "Imports a module dynamically."]], "foxes.utils.load_module": [[1247, 3, 2, "", "name", "Imports a module from a file path"], [1247, 3, 2, "", "path", "Imports a module from a file path"]], "foxes.utils.new_cls": [[1248, 3, 2, "", "base_cls", "Run-time class selector."], [1248, 3, 2, "", "cls_name", "Run-time class selector."]], "foxes.utils.new_instance": [[1249, 3, 2, "", "args", "Run-time factory."], [1249, 3, 2, "", "base_cls", "Run-time factory."], [1249, 3, 2, "", "cls_name", "Run-time factory."], [1249, 3, 2, "", "kwargs", "Run-time factory."]], "foxes.utils.print_mem": [[1250, 3, 2, "", "max_csize", "Prints the memory consumption of a model and its components"], [1250, 3, 2, "", "min_csize", "Prints the memory consumption of a model and its components"], [1250, 3, 2, "", "obj", "Prints the memory consumption of a model and its components"], [1250, 3, 2, "", "pre_str", "Prints the memory consumption of a model and its components"]], "foxes.utils.random_xy_square": [[1251, 3, 2, "", "growth", "Creates random xy positions within a square, with mean (0, 0)"], [1251, 3, 2, "", "min_dist", "Creates random xy positions within a square, with mean (0, 0)"], [1251, 3, 2, "", "n", "Creates random xy positions within a square, with mean (0, 0)"], [1251, 3, 2, "", "seed", "Creates random xy positions within a square, with mean (0, 0)"], [1251, 3, 2, "", "verbosity", "Creates random xy positions within a square, with mean (0, 0)"], [1251, 3, 2, "", "xmax_ini", "Creates random xy positions within a square, with mean (0, 0)"]], "foxes.utils.read_shp": [[1252, 3, 2, "", "fname", "Read a shapefile file"], [1252, 3, 2, "", "kwargs", "Read a shapefile file"]], "foxes.utils.read_shp_polygons": [[1253, 3, 2, "", "fname", "Reads the polygon points from a shp file."], [1253, 3, 2, "", "geom_col", "Reads the polygon points from a shp file."], [1253, 3, 2, "", "kwargs", "Reads the polygon points from a shp file."], [1253, 3, 2, "", "name_col", "Reads the polygon points from a shp file."], [1253, 3, 2, "", "names", "Reads the polygon points from a shp file."], [1253, 3, 2, "", "ret_utm_zone", "Reads the polygon points from a shp file."], [1253, 3, 2, "", "to_utm", "Reads the polygon points from a shp file."]], "foxes.utils.read_tab_file": [[1254, 3, 2, "", "fname", "Reads a tab file into a Dataset"], [1254, 3, 2, "", "normalize", "Reads a tab file into a Dataset"]], "foxes.utils.shp2csv": [[1255, 3, 2, "", "ifile", "Read shapefile file, write csv file"], [1255, 3, 2, "", "in_kwargs", "Read shapefile file, write csv file"], [1255, 3, 2, "", "ofile", "Read shapefile file, write csv file"], [1255, 3, 2, "", "out_kwargs", "Read shapefile file, write csv file"], [1255, 3, 2, "", "verbosity", "Read shapefile file, write csv file"]], "foxes.utils.shp2geom2d": [[1256, 3, 2, "", "args", "Read shapefile into geom2d geometry"], [1256, 3, 2, "", "kwargs", "Read shapefile into geom2d geometry"], [1256, 3, 2, "", "ret_utm_zone", "Read shapefile into geom2d geometry"]], "foxes.utils.sqrt_reg": [[1257, 3, 2, "", "x", "A regularized sqrt function, producing non-zero values also for smallish negative x."], [1257, 3, 2, "", "x0", "A regularized sqrt function, producing non-zero values also for smallish negative x."]], "foxes.utils.two_circles": [[1258, 5, 1, "", "area", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."], [1259, 5, 1, "", "calc_area", "Calculates the intersection of two circles."]], "foxes.utils.two_circles.area": [[1258, 3, 2, "", "d", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."], [1258, 3, 2, "", "r1", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."], [1258, 3, 2, "", "r2", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."]], "foxes.utils.two_circles.calc_area": [[1259, 3, 2, "", "d", "Calculates the intersection of two circles."], [1259, 3, 2, "", "r1", "Calculates the intersection of two circles."], [1259, 3, 2, "", "r2", "Calculates the intersection of two circles."]], "foxes.utils.uv2wd": [[1260, 3, 2, "", "axis", "Calculate wind direction from wind vectors."], [1260, 3, 2, "", "uv", "Calculate wind direction from wind vectors."]], "foxes.utils.wd2uv": [[1261, 3, 2, "", "axis", "Calculate wind vectors from wind directions in degrees."], [1261, 3, 2, "", "wd", "Calculate wind vectors from wind directions in degrees."], [1261, 3, 2, "", "ws", "Calculate wind vectors from wind directions in degrees."]], "foxes.utils.wd2wdvec": [[1262, 3, 2, "", "axis", "Calculate wind direction vectors from wind directions in degrees."], [1262, 3, 2, "", "wd", "Calculate wind direction vectors from wind directions in degrees."], [1262, 3, 2, "", "ws", "Calculate wind direction vectors from wind directions in degrees."]], "foxes.utils.wdvec2wd": [[1263, 3, 2, "", "axis", "Calculate wind direction from wind direction vectors."], [1263, 3, 2, "", "wdvec", "Calculate wind direction from wind direction vectors."]], "foxes.utils.write_nc": [[1264, 3, 2, "", "complevel", "Writes a dataset to netCDF file"], [1264, 3, 2, "", "ds", "Writes a dataset to netCDF file"], [1264, 3, 2, "", "fpath", "Writes a dataset to netCDF file"], [1264, 3, 2, "", "kwargs", "Writes a dataset to netCDF file"], [1264, 3, 2, "", "round", "Writes a dataset to netCDF file"], [1264, 3, 2, "", "verbosity", "Writes a dataset to netCDF file"]], "foxes.variables": [[1265, 6, 1, "", "AMB_CAP", "Ambient capacity, equals AMB_P/P_nominal"], [1266, 6, 1, "", "AMB_CT", "The ambient thrust coefficient"], [1267, 6, 1, "", "AMB_P", "The ambient power, unit depends on user choice"], [1268, 6, 1, "", "AMB_REWS", "Ambient rotor effective wind speed in m/s"], [1269, 6, 1, "", "AMB_REWS2", "Ambient rotor effective wind speed in m/s, calculated from second moment"], [1270, 6, 1, "", "AMB_REWS3", "Ambient rotor effective wind speed in m/s, calculated from third moment"], [1271, 6, 1, "", "AMB_RHO", "The ambient air density in kg/m3"], [1272, 6, 1, "", "AMB_T", "The ambient temperature in Kelvin"], [1273, 6, 1, "", "AMB_TI", "The ambient turbulence intensity"], [1274, 6, 1, "", "AMB_WD", "The ambient wind direction in degrees"], [1275, 6, 1, "", "AMB_WS", "The ambient wind speed in m/s"], [1276, 6, 1, "", "AMB_YAW", "The ambient absolute yaw angle of  a turbine in degrees"], [1277, 6, 1, "", "AMB_YAWM", "The ambient relative yaw angle of  a turbine in degrees"], [1278, 6, 1, "", "AMB_YLD", "Ambient yield in GWh/a"], [1279, 6, 1, "", "CAP", "Capacity, equals P/P_nominal"], [1280, 6, 1, "", "CT", "The thrust coefficient"], [1281, 6, 1, "", "D", "The rotor diameter in m"], [1282, 6, 1, "", "DEFAULT_DIGITS", "The default output digits"], [1283, 6, 1, "", "EFF", "Efficiency, equals P/AMB_P"], [1284, 6, 1, "", "H", "The height over ground in m"], [1285, 6, 1, "", "K", "Wake growth parameter"], [1286, 6, 1, "", "KB", "KTI value for zero TI, K = KB + KTI*TI"], [1287, 6, 1, "", "KTI", "Factor between K and TI, K = KB + KTI*TI"], [1288, 6, 1, "", "MAX_P", "The maximal power, for derating/boost"], [1289, 6, 1, "", "MOL", "The Monin\u2013Obukhov length in m"], [1290, 6, 1, "", "ORDER", "The turbine order"], [1291, 6, 1, "", "ORDER_INV", "The inverse of the turbine order"], [1292, 6, 1, "", "ORDER_SSEL", "The states selection for applying the order"], [1293, 6, 1, "", "P", "The power, unit depends on user choice"], [1294, 6, 1, "", "PA_ALPHA", "The alpha parameter of the PorteAgel wake model"], [1295, 6, 1, "", "PA_BETA", "The beta parameter of the PorteAgel wake model"], [1296, 6, 1, "", "REWS", "Rotor effective wind speed in m/s"], [1297, 6, 1, "", "REWS2", "Rotor effective wind speed in m/s, calculated from second moment"], [1298, 6, 1, "", "REWS3", "Rotor effective wind speed in m/s, calculated from third moment"], [1299, 6, 1, "", "RHO", "The air density in kg/m3"], [1300, 6, 1, "", "SHEAR", "The shear exponent"], [1301, 6, 1, "", "T", "The temperature in Kelvin"], [1302, 6, 1, "", "TI", "The turbulence intensity"], [1303, 6, 1, "", "TXYH", "The turbine rotor centre coordinate  vector (x, y, height)"], [1304, 6, 1, "", "USTAR", "The friction velocity in m/s"], [1305, 6, 1, "", "WD", "The wind direction in degrees"], [1306, 6, 1, "", "WEIGHT", "The statistical weight of a state"], [1307, 6, 1, "", "WS", "The wind speed in m/s"], [1308, 6, 1, "", "X", "The x coordinate in m"], [1309, 6, 1, "", "Y", "The y coordinate in m"], [1310, 6, 1, "", "YAW", "The absolute yaw angle of a turbine in degrees"], [1311, 6, 1, "", "YAWM", "The relative yaw angle of a turbine in degrees"], [1312, 6, 1, "", "YLD", "Yield in GWh/a"], [1313, 6, 1, "", "Z0", "The roughness length in m"], [1314, 6, 1, "", "amb2var", "Mapping from ambient variable to the corresponding waked variable"], [1315, 5, 1, "", "get_default_digits", "Gets the default number of output digits"], [1316, 6, 1, "", "var2amb", "Mapping from variable to the corresponding ambient variable"]], "foxes.variables.get_default_digits": [[1315, 3, 2, "", "variable", "Gets the default number of output digits"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "objtypes": {"0": "py:class", "1": "py:attribute", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:function", "6": "py:data"}, "terms": {"": [0, 40, 44, 47, 50, 54, 60, 64, 68, 88, 93, 102, 178, 179, 195, 196, 199, 203, 222, 231, 234, 248, 254, 255, 263, 272, 278, 295, 300, 301, 309, 319, 327, 343, 346, 370, 440, 441, 443, 451, 454, 456, 461, 471, 473, 475, 477, 490, 492, 501, 509, 513, 525, 530, 537, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 1060, 1102, 1103, 1104, 1105, 1106, 1107, 1132, 1196, 1198, 1268, 1269, 1270, 1275, 1296, 1297, 1298, 1304, 1307, 1331, 1333, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "0": [1, 18, 28, 47, 50, 54, 57, 60, 64, 68, 71, 73, 75, 77, 80, 82, 84, 86, 88, 93, 94, 102, 107, 130, 137, 163, 164, 175, 176, 188, 190, 192, 203, 206, 207, 222, 234, 238, 240, 241, 248, 255, 263, 264, 274, 277, 279, 281, 284, 286, 288, 295, 301, 309, 312, 319, 321, 324, 340, 343, 346, 353, 357, 358, 365, 369, 372, 378, 384, 432, 434, 435, 436, 437, 438, 439, 440, 445, 447, 449, 451, 453, 454, 456, 457, 462, 464, 466, 467, 469, 471, 472, 473, 475, 477, 483, 485, 488, 490, 492, 495, 497, 499, 501, 504, 509, 510, 514, 516, 517, 519, 520, 523, 525, 527, 528, 529, 530, 531, 532, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 553, 556, 557, 559, 560, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 595, 597, 600, 603, 605, 608, 612, 616, 617, 622, 625, 626, 629, 632, 633, 636, 641, 644, 646, 647, 650, 653, 656, 659, 660, 662, 664, 668, 669, 672, 673, 674, 677, 679, 684, 687, 690, 695, 697, 699, 700, 703, 704, 709, 715, 716, 719, 720, 721, 725, 726, 729, 730, 731, 735, 737, 738, 740, 741, 745, 746, 749, 750, 754, 758, 762, 766, 770, 774, 777, 781, 786, 787, 792, 794, 799, 806, 807, 814, 815, 818, 821, 822, 823, 824, 825, 830, 832, 835, 840, 842, 845, 850, 852, 857, 860, 865, 868, 873, 876, 877, 882, 885, 886, 892, 899, 900, 903, 905, 906, 909, 911, 931, 934, 939, 940, 943, 945, 946, 949, 950, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1030, 1034, 1043, 1044, 1061, 1063, 1064, 1066, 1067, 1074, 1076, 1079, 1080, 1083, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1126, 1129, 1130, 1146, 1184, 1186, 1188, 1191, 1192, 1194, 1196, 1198, 1250, 1251, 1255, 1257, 1261, 1262, 1264, 1323, 1331, 1332, 1337, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1361], "00": [533, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "000000": [1350, 1354, 1355, 1356, 1358], "000000000": [1348, 1353], "0001": 1346, "0001230528308906": 1343, "0001563449299843": 1343, "0002": 1348, "0002arrai": 1348, "00033": 885, "00042": [1343, 1357], "000e": [1342, 1344, 1355], "001": 1346, "00114009": 1342, "00158": [1343, 1357], "001880": 1350, "001_dx100": 1346, "002": 899, "00244": [1343, 1357], "00319": [1343, 1357], "00367": 1343, "0036700002": 1357, "004": [1340, 1346], "00546394": 1348, "006e": 1342, "008": 1353, "008e": 1342, "00arrai": 1348, "00it": 1348, "01": [533, 899, 1257, 1331, 1342, 1343, 1345, 1346, 1347, 1348, 1355, 1356], "011e": 1342, "012039": 885, "012903": 1356, "013": [1344, 1355], "0167": 885, "01818": 1353, "01t00": 1348, "01t01": 1348, "01t02": 1348, "02": [1251, 1342, 1343, 1346, 1348], "021033": 1356, "022063": [939, 945], "02214303": 1348, "027": 1343, "02820137": 1342, "02arrai": 1348, "02d": 1353, "02it": 1348, "03": [735, 1342, 1343, 1348, 1353, 1354, 1355, 1356], "032": 1343, "0325": 886, "0325397b": 1337, "0325851b": 1337, "03463212": 1342, "03873": 1009, "03arrai": [1342, 1348], "03ee3008a": 1337, "03sf0635": 1337, "04": [1340, 1341, 1342, 1343, 1344, 1346, 1348, 1356], "042": 1346, "0447358": 1348, "048": 1343, "049066": 1345, "04_dx100": 1346, "04arrai": [1342, 1348], "05": [745, 1126, 1340, 1342, 1343, 1348, 1349, 1350, 1352, 1357, 1358], "050318": 1356, "0504": [1343, 1356], "0513": 1343, "0514": [1343, 1356], "0518": 1343, "0522": [1343, 1356], "0523": [1343, 1356], "053010": 1350, "05347866": 1342, "05464": 1335, "055085": 1356, "0586": [559, 560], "05924991": 1342, "05e": 1342, "05it": 1358, "06": [745, 1342, 1343, 1344, 1347, 1348, 1355, 1356], "06269347": 1348, "06307007": 1348, "063345": 1350, "06336152": 1348, "06398366": 1348, "06428775": 1348, "06453622": 1348, "06495339": 1342, "064e": 1348, "0654317": 1348, "06578986": 1342, "06622469": 1348, "06it": 1349, "07": [745, 824, 825, 905, 906, 1342, 1343, 1344, 1345, 1348, 1355], "07219706": 1342, "07354617": 1342, "073887": 1348, "07479419": 1342, "075": 1346, "076947": 1354, "07797421": 1342, "07873832": 1342, "08": [1342, 1348, 1355], "08118561": 1348, "084442": 1348, "08463402": 1342, "08488862": 1348, "08658875": 1348, "08658958": 1348, "0868863": 1342, "08783168": 1348, "0883": [559, 560], "08it": 1358, "09": [1342, 1343, 1348, 1356], "09020148": 1342, "093786": 1350, "094e": 1355, "095677": 1348, "09567727": 1348, "096026": 1350, "099583": 1356, "099e": 1355, "0arrai": [1342, 1347, 1348], "1": [1, 18, 28, 93, 94, 112, 137, 163, 164, 185, 195, 206, 207, 209, 219, 231, 272, 278, 312, 327, 382, 384, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 432, 434, 435, 436, 437, 438, 439, 532, 534, 539, 543, 545, 546, 559, 617, 618, 625, 632, 695, 696, 698, 700, 716, 726, 735, 736, 737, 738, 746, 868, 869, 876, 885, 892, 939, 940, 1027, 1030, 1032, 1034, 1041, 1043, 1044, 1061, 1079, 1080, 1100, 1101, 1108, 1109, 1126, 1143, 1146, 1147, 1148, 1149, 1196, 1198, 1251, 1255, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1323, 1328, 1331, 1334, 1336, 1337, 1338, 1340, 1341, 1343, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "10": [0, 559, 824, 868, 876, 877, 885, 899, 905, 911, 939, 945, 1198, 1335, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "100": [0, 456, 646, 647, 695, 697, 699, 704, 715, 721, 725, 731, 735, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1352, 1354, 1355, 1356, 1357, 1358], "1000": [137, 441, 646, 647, 1055, 1254, 1323, 1342, 1344, 1347, 1349, 1350, 1352, 1353, 1355, 1356, 1357, 1358], "10000": [1341, 1342, 1346, 1348], "100000": 1350, "1000000": [137, 1323], "1000000000": [137, 1323], "1000000000000": [137, 1323], "1000779": [1343, 1356], "1001": 1349, "100102": 1343, "1001061": 1343, "1002": [0, 868, 876, 877], "100290": [1343, 1356], "1002993": [1343, 1356], "1003540": 1343, "1004330": [1343, 1356], "1004753": [1343, 1356], "1004849": 1343, "100780": [1343, 1356], "100coordin": 1348, "101084205": 1337, "1016": [885, 899], "1017": [824, 905, 911], "101872": [1343, 1356], "102": 735, "103005": 1343, "103181": 1348, "103659": [1343, 1356], "103kb": 1353, "104162": 1343, "104mb": 1348, "1050": 1342, "1054": 1345, "10639": 1348, "10640": 1348, "10641": 1348, "10642": 1348, "10643": 1348, "1066": 1358, "106903": 1350, "1088": [885, 939, 945], "10it": [1344, 1349], "10t05": 1353, "10t06": 1353, "10t07": 1353, "10t08": 1353, "10t09": 1353, "10t10": 1353, "10t11": 1353, "10t12": 1353, "10t13": 1353, "10t14": 1353, "10t15": 1353, "10t16": 1353, "10t17": 1353, "10t18": 1353, "10t19": 1353, "10t20": 1353, "10t21": 1353, "10t22": 1353, "10t23": 1353, "11": [0, 1339, 1342, 1343, 1348, 1350, 1351, 1356, 1358], "110": 1352, "1106": 1354, "110762": 1350, "111": 1353, "11128772": 1342, "1127": 1345, "1156": 1345, "116": 1343, "1167": 1354, "1168": 1342, "116827": 1356, "1172": 1342, "1179": 1342, "1183": 1342, "1185": 1345, "1188": 1342, "119": [1198, 1342, 1346, 1348], "119290": 1355, "119e": 1355, "11kb": 1342, "11t00": 1353, "11t01": 1353, "11t02": 1353, "11t03": 1353, "11t04": 1353, "11t05": 1353, "11t06": 1353, "11t07": 1353, "11t08": 1353, "11t09": 1353, "11t10": 1353, "11t11": 1353, "11t12": 1353, "11t13": 1353, "11t14": 1353, "11t15": 1353, "11t16": 1353, "11t17": 1353, "11t18": 1353, "11t19": 1353, "11t20": 1353, "11t21": 1353, "11t22": 1353, "11t23": 1353, "12": [0, 412, 868, 876, 1127, 1129, 1130, 1198, 1339, 1342, 1343, 1348, 1350, 1351, 1352, 1353, 1354, 1355, 1357, 1358, 1361], "120": [1340, 1342, 1343, 1344, 1353, 1355], "1200": [1342, 1350], "1203": 1342, "121": 1352, "1216": 1348, "1218": 1350, "122": [1348, 1352], "122949": 1345, "1250": 1342, "126": 1346, "1260": 1342, "12610195": 1342, "127": 1348, "129": [1347, 1350], "1290": 1354, "1294": 1342, "12kb": 1347, "12t00": 1353, "12t01": 1353, "12t02": 1353, "12t03": 1353, "12t04": 1353, "12t05": 1353, "12t06": 1353, "12t07": 1353, "12t08": 1353, "12t09": 1353, "12t10": 1353, "12t11": 1353, "13": [0, 1339, 1342, 1343, 1347, 1348, 1350, 1351, 1355], "1300": 1342, "1301": 1342, "1311": 1342, "1324": 1342, "1334": 1348, "13375661": 1342, "1343": 1342, "1350": 1342, "1352": 1345, "1368": 1342, "1396": 1345, "1397": 1348, "13977828": 1348, "14": [877, 1342, 1343, 1347, 1348, 1350, 1351, 1355, 1356], "1400": 1342, "1406": [1342, 1345], "141": 1348, "1413": 1342, "1418": 735, "143": 1348, "14313392": 1342, "143680": 1356, "14402911": 1342, "144203": 1345, "145": 1343, "1450": 1342, "1456": 1356, "145984": 1356, "1460": 1347, "1468": 1342, "1473": 1342, "1474": 1345, "147671": 1356, "1484": 1342, "1496": 1342, "149890": 1347, "15": [885, 1342, 1343, 1345, 1347, 1348, 1350, 1351, 1352, 1355, 1356, 1357, 1361], "150": [1342, 1343, 1346, 1347, 1356, 1357], "15000": [1346, 1347, 1354], "15017697": 1348, "1502": 1348, "1502arrai": 1348, "1503": 1342, "151": 1350, "1511": 1342, "1512": 1347, "152294": 1350, "15292029": 1342, "15318621": 1348, "1532": 1355, "1533": 1342, "15467746": 1348, "1557": 1354, "15573179": 1348, "1557arrai": 1348, "15666303": 1348, "15784041": 1348, "157e": 1342, "1580": 1345, "15805114": 1348, "1581": 1348, "16": [1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1354, 1355, 1356, 1357, 1358, 1361], "1600": 1342, "161371": 1345, "1614": 1345, "1617": 1342, "16302865": 1342, "164": 1346, "1650": 1342, "166": 1356, "1665": 1345, "16822775": 1348, "16b": 1348, "16it": 1349, "17": [885, 1342, 1343, 1348, 1350, 1355, 1357], "170": [1348, 1350, 1352], "1700": 1342, "1704": 1342, "170545": 1348, "17054545": 1348, "171047": 1345, "172": 1343, "1734": 1342, "173606": 1358, "1742": [885, 939, 945], "1748": 1345, "175": 735, "1750": 1342, "1753": 1342, "17636906": 1342, "17645903": 1342, "176627": 1354, "1770": 1342, "1771": 1350, "1772": 1348, "178": [1342, 1346, 1348], "1787": 1342, "179": 1344, "17arrai": 1348, "18": [1342, 1343, 1347, 1348, 1350, 1361], "180": 1343, "1800": [1342, 1350], "1805": 1342, "1812": 1356, "181480": 1350, "18161771": 1342, "1834": 1342, "184": 1343, "1850": 1342, "186188": 1356, "187742": 1345, "1880": 1356, "19": [1342, 1343, 1347, 1350, 1356], "19074": 1358, "191": 1352, "1910": 1342, "19756212": 1342, "198": [1343, 1350], "198707": 1347, "1991": 1198, "1995": 1198, "1996": 1340, "1d": [556, 1329, 1341], "1e": 1342, "1f": [1347, 1350, 1356, 1357], "1kb": [1348, 1354], "1min": [1340, 1346, 1353], "1turbin": 1342, "2": [336, 337, 387, 390, 436, 438, 439, 440, 441, 532, 534, 605, 735, 834, 837, 868, 876, 899, 900, 908, 939, 945, 1034, 1196, 1198, 1202, 1203, 1204, 1205, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1242, 1243, 1244, 1245, 1251, 1253, 1258, 1259, 1329, 1336, 1337, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1356, 1357, 1358, 1361], "20": [695, 697, 699, 704, 715, 721, 725, 731, 735, 781, 782, 807, 808, 868, 876, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1350, 1352, 1353, 1355, 1356, 1357], "200": [622, 623, 629, 630, 1342, 1343, 1347, 1358], "2000": [533, 1198, 1342, 1348, 1352], "20000": [814, 815, 1346], "2001": 1198, "2005": [892, 893, 1334, 1346], "2009": [1343, 1347], "20096644": 1342, "2009_31": 892, "201": [1345, 1347], "2010": 1009, "2011": [868, 876, 877], "2012": 0, "2014": [899, 1334, 1340], "2016": [0, 824, 905, 911, 1329, 1334, 1340], "2017": [868, 876, 1341, 1343, 1356], "2018": [1343, 1353], "2019": [852, 892, 893, 1340, 1341, 1346], "202": 1348, "2020": [559, 868, 876, 1334, 1341], "2021": 1343, "2022": 1340, "2023": [860, 868, 876, 1198, 1335, 1343, 1355], "205": 1356, "2050": 1342, "207": 1343, "2074944": 1342, "208": 1345, "209": 1343, "20911122": 1348, "21": [892, 893, 1342, 1343, 1345, 1347, 1348, 1350, 1356, 1361], "2100": [735, 1342], "21105": 1335, "211367": 1345, "21255": 1357, "2137": [868, 876], "214": 1345, "2150": 1342, "2153": 1342, "21555429": 1348, "216": [1343, 1352, 1357], "21653738": 1348, "217": 1343, "218": 1345, "2186": 1342, "2199": 1342, "21it": 1349, "22": [735, 1342, 1343, 1348, 1350, 1356], "220": 1343, "2200": 1342, "2209": 1342, "2219": 1342, "222": 1345, "222715": 1356, "223": 1343, "2233": 1342, "223533": 1348, "225": [695, 696, 698, 735, 736, 737, 1126, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1348, 1349, 1350, 1352, 1354, 1355, 1356, 1357, 1358, 1361], "2250": 1342, "2251": 1342, "225378": 1350, "22569029": 1342, "225arrai": [1342, 1348], "2265": [939, 945], "22673359": 1342, "227": 1343, "228kb": 1347, "22945066": 1342, "2299": [1342, 1356], "22it": 1355, "23": [1342, 1343, 1347, 1348, 1353, 1356], "230": 1353, "234": 1348, "2356875": 1342, "236": 1345, "23620357": 1348, "236204": 1348, "237": 1345, "23755919": 1348, "2383": 1356, "2392": 1356, "23943763": 1342, "24": [1342, 1343, 1348, 1350, 1356], "240": [1346, 1358], "2400": [1342, 1350], "24000": 1347, "2408": 1356, "241": [1343, 1356], "24121905": 1348, "242": 1343, "243": [1343, 1356], "2435": 1356, "244": [1343, 1356], "24443455": 1342, "2450": 1342, "2457": 1356, "246": [559, 560], "247780": 1345, "249557": 1350, "24it": 1355, "25": [0, 886, 939, 940, 945, 946, 1342, 1343, 1346, 1349, 1350], "250": [1342, 1343, 1347, 1352, 1358], "2500": [1342, 1343, 1344, 1345], "25082391": 1348, "2518": 1354, "253": 1343, "25476076": 1342, "2550": 1342, "256": 1350, "2564": 1356, "257e": 1348, "25it": 1355, "26": [1342, 1343, 1345, 1348, 1349, 1356], "2600": 1342, "2609": 1356, "26132479": 1342, "262006": 1345, "262615": 1350, "2638": 1356, "265": 1343, "2650": 1342, "267": 1343, "268": 1343, "269": [1342, 1343], "27": [1342, 1343, 1347, 1348, 1349, 1353, 1354, 1355], "270": [0, 1061, 1063, 1064, 1066, 1067, 1103, 1104, 1106, 1107, 1341, 1342, 1343, 1347, 1349, 1350, 1354, 1358], "27494108": 1342, "275": 737, "27512229": 1342, "2756": 1356, "276034": 1356, "27767": [1343, 1347], "27806733": 1348, "27t05": 1348, "27t06": 1348, "27t07": 1348, "28": [1342, 1348, 1353], "2800": 1342, "28063677": 1342, "283373": 1345, "285": 1353, "2850": 1342, "28507283": 1342, "28804821": 1348, "28838": [1343, 1347], "28b": 1348, "28it": 1349, "29": [1342, 1343, 1349, 1356], "290": [735, 1352], "2900": 1342, "29336085": 1348, "2950": 1342, "29854459": 1342, "299": 1356, "29e": 1348, "29it": [1349, 1355], "2_0": 1346, "2_dx100": 1346, "2_kb0": 1346, "2d": [0, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1090, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1199, 1223, 1230, 1330, 1331, 1341, 1357], "2f": [1344, 1347, 1350, 1355, 1356, 1357], "3": [5, 28, 29, 33, 184, 292, 311, 312, 314, 330, 331, 361, 362, 374, 582, 589, 599, 605, 617, 619, 625, 632, 735, 785, 790, 791, 797, 798, 803, 804, 811, 813, 819, 820, 828, 829, 838, 855, 863, 871, 880, 1035, 1076, 1085, 1123, 1132, 1196, 1198, 1282, 1329, 1331, 1333, 1336, 1337, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1354, 1355, 1356, 1357, 1358, 1361], "30": [825, 1126, 1342, 1343, 1344, 1347, 1348, 1349, 1355, 1356, 1357, 1358], "300": [1342, 1343, 1350, 1358], "3000": [1342, 1343, 1347, 1350, 1355, 1357, 1358], "30000": [357, 358], "3000height": 1347, "30095": [1343, 1347], "301": 1350, "302": 1343, "3021": 735, "303121": 1345, "3050": 1342, "3067": 1356, "307": 1348, "308": 1348, "308e": 1342, "3097": 1348, "30it": 1349, "31": [1342, 1343, 1345, 1347, 1349, 1356], "310": 1348, "31049503": 1342, "311": 1348, "312": [1198, 1348], "31250889": 1348, "312arrai": 1348, "313": 1348, "313664": 1345, "31375786": 1348, "314": 1343, "314050": 1350, "31411": 1358, "32": [886, 1342, 1345], "3200": 1342, "323": 1348, "32441913": 1348, "325199": 1354, "3290": 1348, "32b": 1347, "32u": [1253, 1256], "33": [1342, 1343, 1348, 1349, 1356, 1357], "332498": 1354, "334366": 1356, "3364": 1348, "33856": [1344, 1355], "34": [1342, 1343, 1349], "340": [1347, 1348, 1352], "344": 1343, "347000": 1345, "348633": 1350, "34it": [1344, 1349], "35": [1342, 1343, 1344, 1349, 1355], "352448": 1345, "352662": 1345, "35583402": 1342, "357075": 1345, "3575024": 1348, "35it": 1345, "36": [1342, 1343, 1349], "360": 660, "362": 886, "3627": 1342, "3628": 1342, "3630": 1342, "3633": 1342, "363478": 1345, "36368": [1343, 1347], "3638": 1342, "3642": 1342, "3654": 1342, "3661": 1342, "368e": 1342, "36953937": 1342, "37": [1342, 1349], "37214": [1343, 1347], "372918": 1350, "3730": 1342, "3750291": 892, "375640": 1345, "3769261": 1348, "38": [1342, 1348], "38362019": 1342, "384285": 1350, "384b": 1342, "38845129": 1342, "38it": 1355, "39": [1342, 1343, 1344, 1345, 1346, 1347, 1348, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "3904": 735, "39139": 1348, "39385269": 1342, "3944": 1348, "396261": 1350, "398e": 1348, "3arrai": [1342, 1348], "3d": 0, "3f": [1165, 1167], "4": [735, 812, 885, 1282, 1333, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "40": [1342, 1347, 1348], "400": 1342, "4000": [1342, 1344, 1348, 1352], "401": 1355, "401579": 1348, "4023241": 1348, "40247265": 1342, "403": 1350, "404e": 1355, "406": 1343, "40b": 1354, "40it": [1348, 1356], "40kb": 1348, "41": [130, 1184, 1186, 1188, 1191, 1192, 1194, 1323, 1332, 1342, 1344], "416355": 1350, "41856192": 1348, "419935": 1358, "42": [1342, 1343, 1348, 1356], "420645": 1356, "421405": 1345, "42521": 1354, "42619428": 1348, "42685": [1343, 1347], "429893": 1356, "43": 1342, "43094316": 1342, "4321m": 1340, "433e": [1342, 1348], "436837": 1348, "43683738": 1348, "43699931": 1342, "43838158": 1342, "44": [1342, 1345, 1348], "440": 1350, "440b": 1353, "444": 735, "445084": 1350, "4451": 1350, "4464": 1347, "44991959": 1342, "44it": [1348, 1349], "45": [735, 1342, 1344, 1357], "450": 1342, "45013909": 1348, "451": [0, 877], "452153": 1350, "452899": 1345, "4562": 1350, "4567": 1354, "45717031": 1342, "458187": 1355, "458987": 1347, "459901": 1356, "45it": 1344, "46": [1342, 1343], "464325": 1356, "4646": 1347, "46522037": 1342, "465593": 1345, "468": 1353, "47": [1342, 1345, 1348], "472": 1358, "472361": 1348, "47236142": 1348, "475399": 1350, "476610": 1356, "476878": 1350, "47714691": 1348, "4777": 1356, "478592": 1356, "47arrai": 1342, "47it": 1349, "48": [1342, 1347, 1358], "481": 1355, "481726": 1356, "4843": 1356, "48484798": 1348, "4849": 1348, "4853": 1348, "4868": 1356, "487086": 1356, "488279": 1345, "48coordin": 1342, "49": [1343, 1345], "490711": 1356, "491": 1350, "491089": 1345, "491558": 1356, "4929382": 1342, "496": 1349, "497": 1349, "498": 1349, "499": 1349, "49it": 1349, "4_dx100": 1346, "4_kb0": 1346, "4d": [0, 1349], "4e": 1342, "4f": [1073, 1165, 1167, 1171], "4kb": 1353, "4mb": 1348, "5": [559, 735, 781, 782, 877, 885, 939, 940, 1087, 1089, 1282, 1333, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "50": [456, 532, 534, 1198, 1342, 1343, 1347, 1348, 1352, 1357], "500": [1102, 1103, 1104, 1105, 1106, 1107, 1251, 1331, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1357], "5000": [532, 534, 1340, 1344, 1346, 1348, 1350, 1353, 1355, 1356], "500000": 1350, "5000m": 1346, "5000turbin": 1348, "5001": 1352, "500kb": 1348, "500m": 1342, "50334765": 1342, "5061": 735, "506817": 1356, "506e": 1353, "50870375": 1342, "51": [1343, 1353], "512884": 1356, "512kb": 1354, "51816992": 1342, "5194": 559, "519e": 1354, "52": [1343, 1353], "52031435": 1348, "521": [1345, 1355], "521429": 1348, "52142919": 1348, "521975": 1356, "522878": 1350, "523": 1342, "523022": 1345, "52334815": 1342, "5238": 1348, "527781": 1356, "528483": 1345, "528kb": 1347, "53": 1348, "530254": 1356, "53097653": 1342, "532": 1343, "534548": 1350, "536000": 1356, "53818917": 1348, "5399971": 1342, "54": [1348, 1353], "5400": 1348, "542331196166035e": 1343, "542681": 1345, "5433": 1348, "5443": 1353, "5464": 1335, "547918": 1345, "5485": 1348, "55": [704, 721, 731, 1343, 1348, 1353], "550": 1342, "55004756": 1342, "551317": 1356, "551817": 1355, "551830": 1355, "55186954": 1342, "552663": 1345, "55328369": 1342, "555045": 1345, "55869066": 1342, "56": 1348, "560020": 1356, "560767": 1350, "563693": 1350, "564008": 1356, "568e": 1355, "56arrai": 1348, "57": [1343, 1348, 1356], "576b": 1342, "578": 1350, "5796": 1348, "58": [824, 825, 905, 906, 1343, 1350], "580130": 1345, "580285": 1345, "581195": 1345, "581430": 1348, "583392": 1356, "58470499": 1348, "584e": 1342, "58it": 1344, "593225": 1347, "595": [824, 905, 911], "59550525": 1342, "597810": 1345, "59966544": 1342, "5d": [387, 440, 441], "5f": [1165, 1167], "5km": 1346, "5mb": 1348, "5mw": [1340, 1346, 1352, 1354, 1361], "6": [576, 577, 735, 892, 893, 1282, 1333, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "60": [456, 1344, 1353, 1355], "600": [1342, 1347, 1350, 1352, 1353], "6000": [1350, 1352], "600000": 1354, "607085": 1345, "6092633": 1342, "6101": 1348, "6105": 885, "610500": 1356, "613545": 1356, "6151291": 1342, "618827331554488e": 1343, "62": [1343, 1348, 1356], "621921": 1345, "62228383": 1348, "622e": 1342, "6243858": 1342, "625": 885, "62773546": 1348, "628197": 1356, "628299": 1347, "62910205": 1342, "63": [1348, 1356], "63001": 1345, "63259116": 1342, "633459": 1354, "63554043": 1348, "636004": 1342, "63706155": 1348, "637062": 1348, "63775728": 1342, "6379": 735, "64": [1343, 1348, 1356], "640e": 1342, "64100": [892, 1334], "64265163": 1342, "642754": 1356, "643e": 1342, "645e": 1342, "64kb": 1354, "65": [1343, 1349, 1356, 1357], "650": 1342, "651819": 1350, "6596": [885, 939, 945], "65e": 1342, "66": 1356, "662e": 1342, "663709": 1350, "67": [1343, 1356], "670": 1357, "67129007": 1342, "673386": 1345, "673e": 1342, "67485874": 1342, "67504595": 1342, "67it": 1355, "68": [1343, 1348], "680276": 1345, "680559": 1348, "68294887": 1342, "68526736": 1342, "68550034": 1342, "68574518": 1342, "691": 877, "692583": 1347, "694": 1343, "69564997": 1342, "6960": 1348, "6961": 1348, "697": 877, "697787": 1350, "69896283": 1342, "6f": [1165, 1167], "7": [735, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "70": [1343, 1345, 1348, 1352, 1356], "7000": [1198, 1352, 1353], "700000": [1355, 1356], "70073211": 1348, "702": 1355, "703701": 1345, "70370122": 1342, "705093": 1356, "70601022": 1342, "707": 1348, "70739148": 1348, "708787": 1348, "7087873": 1348, "70902791": 1348, "71": 1348, "71002993": 1342, "71363755": 1348, "714437": 1350, "715530": 1345, "71561883": 1342, "71960451": 1342, "71arrai": 1348, "71it": 1354, "72": [1343, 1345], "722e": 1342, "723397": 1356, "724": 1345, "72b": 1353, "73": [886, 1349], "731909": 1345, "731e": 1342, "732653": 1350, "7339": 1348, "735e": 1342, "738": 1350, "73837785": 1342, "73924843": 1342, "74": 1344, "74216201": 1342, "748653": 1345, "749581": 1356, "75": [1343, 1345, 1347, 1348, 1356], "750": 1358, "7500": 1346, "750000": 1356, "75068399": 1348, "7526868": 1348, "75570909": 1342, "756149": 1345, "756156": 1348, "758": 1348, "75801975": 1348, "758519": 1342, "758e": 1342, "76": [1348, 1357], "76034502": 1342, "76128718": 1342, "763e": 1342, "76458387": 1348, "76465933": 1348, "77": 1348, "77579844": 1342, "77599446": 1342, "776814": 1356, "776arrai": 1342, "77816491": 1348, "77it": 1355, "78": [1343, 1348, 1349], "780044": 1356, "78261081": 1342, "785152": 1356, "78796353": 1342, "78it": 1349, "79": 1354, "790000": 1354, "791530": 1356, "793888": 1356, "796e": 1348, "79it": [1349, 1355], "8": [892, 939, 940, 1009, 1032, 1034, 1039, 1334, 1335, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1361], "80": [1344, 1357], "800": [735, 1342, 1344, 1353, 1354, 1355], "8000": [1343, 1354, 1356], "801178": 1356, "803665": 1354, "806173": 1350, "806876": 1355, "80791824": 1348, "808234": 1354, "80976448": 1342, "80kb": 1348, "81": [1348, 1353, 1356, 1357], "810": 735, "812210": 1354, "814": [1342, 1348, 1353], "81476999": 1342, "814849": 1348, "81484941": 1348, "814arrai": 1342, "81647422": 1342, "8165": 1342, "81672549": 1342, "81715389": 1342, "8172": 1342, "81731524": 1342, "81750584": 1342, "81759101": 1342, "81766848": 1342, "81769509": 1342, "8184853": 1342, "818854": 1345, "818932": 1354, "819769": 1345, "81it": [1344, 1349], "82": 1348, "820": 735, "821354": 1354, "823401": 1350, "82527504": 1348, "8256": 1348, "82678858": 1342, "82716779": 1348, "82753765": 1342, "82953897": 1342, "83": [886, 1348], "830": 735, "8329491": 1348, "83495453": 1348, "835285": 1348, "83528514": 1348, "835936": 1356, "836": 1343, "83767057": 1342, "83786169": 1342, "839e": 1342, "84": 1348, "840554": 1350, "84457499": 1342, "84568037": 1342, "849e": 1348, "84it": 1344, "85": 1348, "850": 1342, "850753": 1356, "85145363": 1342, "852422": 1350, "85525979": 1348, "85895388": 1348, "85899394": 1342, "85913481": 1342, "85916516": 1348, "86": [1335, 1348], "860217": 1356, "861136": 1350, "862504": 1356, "86451775": 1342, "867297": 1345, "86775368": 1342, "86834479": 1348, "86887979": 1348, "87": 1350, "87003462": 1342, "87024851": 1348, "87089819": 1342, "87152353": 1342, "871543": 1345, "87182832": 1342, "8720001": 1342, "8724777": 1342, "87312066": 1342, "873257": 1356, "874": 735, "87466317": 1342, "874904": 1356, "875521": 1356, "8787": 1348, "88": [700, 716, 726, 738, 746, 1343, 1356, 1358], "880886": 1354, "88613124": 1342, "88971723": 1342, "89": 1348, "89109071": 1342, "89197906": 1342, "89275601": 1342, "89357026": 1342, "89445526": 1342, "89588288": 1342, "898485": 1345, "898576": 1356, "89it": 1355, "8b": [1342, 1354], "8coordin": 1347, "8d6ca3d82151bad815f78addf9b5c1c6": 1258, "8km": 1340, "8m": 1341, "9": [0, 735, 1264, 1339, 1342, 1343, 1344, 1345, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1358, 1361], "90": [1343, 1346, 1347, 1348], "900": [1342, 1355, 1357], "90000323": 1342, "900005": 1350, "90394756": 1342, "904246": 1345, "90443849": 1342, "90455836": 1348, "90460543": 1342, "90473057": 1342, "90497911": 1342, "90520769": 1342, "90530738": 1342, "90643494": 1342, "90658694": 1342, "907209": 1356, "90736008": 1342, "9074arrai": 1342, "90786757": 1342, "90806287": 1348, "90826572": 1342, "90851556": 1342, "90871749": 1342, "90875577": 1342, "90887712": 1342, "90956347": 1342, "91072196": 1342, "91103535": 1342, "9111": 1342, "91114978": 1342, "91122745": 1342, "91136944": 1342, "91144979": 1342, "91284126": 1342, "91378165": 1348, "914426": 1350, "916": 1354, "91602074": 1342, "91662556": 1342, "91685644": 1342, "91838617": 1342, "91920818": 1348, "91921633": 1348, "91935924": 1342, "919371": 1348, "91937135": 1348, "91948746": 1342, "92": [1342, 1343, 1348], "92032182": 1342, "92155136": 1342, "921920": 1348, "921e": 1348, "9231956": 1342, "92324777": 1342, "92465372": 1342, "92473132": 1348, "928": 1342, "92832072": 1342, "92863625": 1348, "929624": 1350, "92arrai": 1348, "93": [1343, 1347, 1348, 1357], "93034593": 1342, "932216": 1350, "932726": 1345, "93465089": 1342, "9347257": 1342, "9349": 1348, "93586271": 1342, "93592999": 1342, "93644596": 1348, "93722645": 1348, "93805698": 1342, "9382": 1348, "93it": 1347, "94376765": 1342, "944": 1342, "94469817": 1342, "945e": 1348, "9463012": 1342, "946766": 1350, "94802134": 1348, "95": [885, 1343], "950": [737, 1342], "95129556": 1342, "95149737": 1342, "95387404": 1348, "95560321": 1342, "955794": 1354, "958531": 1356, "95863371": 1348, "958672": 1345, "95963768": 1342, "959755": 1348, "959818": 1348, "95981825": 1348, "960030": 1345, "960214": 1345, "960601": 1345, "962317": 1356, "96kb": 1347, "97": [1343, 1347, 1348, 1356], "97042572": 1342, "97076712": 1342, "97191414": 1348, "97491761": 1348, "975": 737, "977087": 1350, "97it": 1349, "981": 1343, "98305013": 1342, "98695302482496e": 1343, "99": [1343, 1348, 1352, 1356], "9920": 1348, "995899": 1345, "996": 1349, "996e": 1355, "997": 1349, "997697": 1350, "998": [1345, 1349], "999": 1349, "9999": 906, "99999": [556, 557], "9d38b810": 1348, "A": [28, 77, 102, 184, 255, 259, 263, 301, 305, 394, 395, 501, 709, 735, 770, 774, 777, 852, 868, 876, 885, 899, 1029, 1055, 1135, 1136, 1143, 1149, 1156, 1157, 1172, 1181, 1182, 1257, 1320, 1321, 1324, 1325, 1328, 1329, 1331, 1338, 1340, 1342, 1343, 1345, 1351, 1361], "And": 1341, "As": [0, 1339, 1342, 1344, 1358], "At": 1343, "Be": 1348, "By": [255, 301, 1342, 1358], "For": [0, 203, 336, 337, 532, 534, 540, 542, 646, 735, 885, 930, 1126, 1156, 1157, 1338, 1339, 1340, 1342, 1343, 1344, 1346, 1348, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1358, 1361, 1362], "If": [0, 199, 313, 477, 478, 491, 554, 618, 691, 824, 886, 905, 1079, 1080, 1196, 1253, 1339, 1340, 1348, 1350, 1351, 1356, 1361], "In": [0, 313, 618, 1196, 1338, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "It": [1060, 1337, 1338, 1339, 1345, 1347, 1348, 1350, 1352], "NEAR": [911, 918], "No": [571, 1034, 1329, 1342], "On": [860, 868, 876, 1353], "One": [440, 441, 1345, 1349], "Or": [600, 601], "Such": [241, 281, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750, 1343, 1351], "The": [0, 1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 127, 130, 131, 155, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 244, 245, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 278, 279, 281, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 477, 478, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 556, 557, 558, 561, 562, 563, 564, 566, 567, 572, 573, 574, 575, 576, 577, 579, 580, 582, 585, 586, 588, 589, 591, 592, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 707, 709, 711, 714, 715, 716, 718, 719, 720, 721, 724, 725, 726, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 744, 745, 746, 748, 749, 750, 753, 754, 756, 757, 758, 760, 761, 762, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 860, 861, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 876, 877, 878, 880, 881, 882, 883, 885, 886, 888, 889, 890, 892, 893, 895, 896, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 926, 927, 929, 930, 931, 934, 935, 937, 938, 939, 940, 942, 943, 945, 946, 948, 949, 950, 951, 953, 954, 956, 957, 958, 959, 961, 962, 963, 964, 966, 967, 968, 969, 971, 972, 973, 976, 977, 978, 979, 982, 983, 984, 985, 988, 989, 990, 991, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1153, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1280, 1281, 1282, 1284, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1313, 1315, 1317, 1319, 1322, 1323, 1324, 1326, 1327, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1356, 1357, 1358, 1360, 1361, 1362], "Their": [309, 310], "Then": 1339, "There": [1340, 1348], "These": [0, 1258, 1329, 1344, 1345, 1347, 1348, 1351, 1355, 1358], "Will": 3, "With": 1353, "_": [1156, 1157, 1182, 1340, 1346], "__build_class__": 1198, "__builtins__": 1198, "__cached__": 1198, "__call__": [365, 366], "__contains__": [1149, 1150], "__debug__": 1198, "__doc__": 1198, "__file__": 1198, "__getitem__": [112, 195, 231, 272, 327, 549, 550, 1143, 1144, 1149, 1151], "__import__": 1198, "__init__": 1198, "__iter__": [28, 30], "__loader__": 1198, "__name__": 1198, "__next__": [28, 31], "__package__": 1198, "__pycache__": 1198, "__repr__": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 206, 208, 222, 234, 248, 255, 257, 263, 264, 274, 276, 288, 295, 301, 303, 309, 319, 340, 343, 346, 348, 353, 357, 365, 372, 378, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 424, 427, 428, 429, 440, 451, 454, 456, 459, 471, 473, 475, 477, 479, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 565, 569, 571, 572, 576, 578, 581, 583, 585, 587, 591, 597, 600, 605, 608, 612, 616, 622, 624, 629, 631, 636, 638, 641, 646, 648, 653, 659, 664, 674, 679, 681, 684, 687, 690, 692, 695, 697, 699, 701, 709, 715, 717, 725, 727, 735, 737, 745, 747, 754, 758, 762, 766, 770, 774, 777, 781, 783, 787, 794, 799, 801, 807, 809, 814, 816, 824, 826, 832, 835, 842, 845, 852, 854, 860, 862, 868, 870, 876, 877, 879, 885, 887, 892, 894, 899, 901, 905, 907, 911, 934, 936, 939, 941, 945, 947, 953, 955, 958, 960, 963, 965, 968, 970, 973, 975, 979, 981, 985, 987, 991, 993, 997, 999, 1003, 1005, 1009, 1011, 1015, 1017, 1021, 1023], "__spec__": 1198, "__str__": [1156, 1158, 1181, 1183], "__weight": [622, 623], "_ambka": 1346, "_description_": 1051, "_dx": 1346, "_frozen_importlib": 1198, "_frozen_importlib_extern": 1198, "_k": [0, 1346], "_ka": 1346, "_kb": [1340, 1346], "_raw": [1346, 1351], "_type_": 1051, "a0": [1196, 1331], "a1": [1196, 1331], "a2": [1196, 1331], "a3": [1196, 1331], "a_b": 0, "a_far": [885, 886], "a_near": [885, 886], "aagaard": 559, "ab": 1198, "abc": [206, 274, 1324], "abil": [832, 835], "abl": [0, 532, 534, 754, 758, 762, 766, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1328, 1329, 1338], "abl_states_6000": 1340, "abllogneutralwsprofil": [754, 755, 756, 757, 1329], "abllogstablewsprofil": [758, 759, 760, 761, 1329, 1342], "abllogunstablewsprofil": [762, 763, 764, 765, 1329], "abllogwsprofil": [766, 767, 768, 769, 1329, 1340, 1343], "about": [1060, 1198, 1348, 1350], "abov": [0, 1103, 1104, 1106, 1107, 1337, 1338, 1339, 1340, 1341, 1344, 1348, 1349, 1350, 1352, 1358, 1361], "absolut": [0, 120, 121, 122, 684, 687, 1276, 1310, 1329, 1333, 1340, 1358, 1361], "abstract": [0, 73, 75, 76, 163, 192, 193, 203, 204, 205, 206, 220, 248, 250, 253, 263, 288, 291, 292, 295, 296, 299, 309, 312, 315, 318, 319, 325, 326, 340, 343, 344, 346, 350, 351, 353, 354, 355, 357, 360, 362, 372, 374, 378, 379, 380, 398, 417, 832, 833, 835, 837, 842, 843, 845, 847, 848, 1199, 1202, 1203, 1204, 1205, 1206, 1317, 1320, 1324, 1326, 1331, 1334, 1340], "accept": [0, 1338, 1341, 1348, 1361], "accept_nan": 278, "accept_non": 278, "access": [0, 1198, 1327, 1340, 1348], "accord": [1, 18, 28, 163, 191, 434, 576, 629, 630, 766, 1165, 1170, 1171, 1340, 1346, 1348, 1352], "accordingli": [622, 623], "account": 1342, "accur": [0, 1340], "accuraci": [860, 868, 876, 1349], "achiev": 1353, "act": [1340, 1349], "action": 1337, "activ": [1339, 1348], "actual": [0, 622, 623, 1062, 1063, 1064, 1156, 1157, 1339, 1347, 1350, 1354], "ad": [0, 309, 310, 378, 380, 642, 883, 953, 957, 958, 962, 963, 967, 968, 972, 973, 977, 979, 983, 985, 989, 991, 995, 997, 1001, 1003, 1007, 1009, 1013, 1015, 1019, 1021, 1025, 1041, 1060, 1062, 1063, 1064, 1328, 1337, 1338, 1339, 1340, 1342, 1344, 1346, 1348, 1352, 1353, 1354, 1356, 1357, 1358, 1361], "add": [0, 1, 18, 28, 47, 50, 54, 60, 64, 68, 77, 79, 88, 93, 102, 163, 165, 188, 190, 195, 197, 222, 224, 231, 234, 248, 251, 255, 258, 263, 272, 284, 286, 295, 297, 301, 304, 309, 318, 319, 327, 336, 338, 343, 346, 378, 379, 382, 384, 394, 432, 433, 434, 435, 436, 437, 438, 439, 440, 447, 449, 451, 454, 456, 467, 469, 471, 473, 475, 477, 485, 488, 490, 492, 497, 499, 501, 509, 520, 523, 525, 528, 529, 530, 562, 563, 585, 600, 605, 608, 612, 616, 621, 622, 628, 629, 635, 636, 641, 646, 653, 659, 664, 666, 672, 673, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 822, 823, 883, 953, 956, 958, 961, 963, 966, 968, 971, 973, 976, 979, 982, 985, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 1027, 1029, 1034, 1041, 1043, 1044, 1062, 1063, 1064, 1065, 1066, 1067, 1083, 1132, 1135, 1137, 1138, 1139, 1140, 1149, 1153, 1154, 1199, 1200, 1206, 1208, 1210, 1216, 1218, 1223, 1225, 1230, 1232, 1238, 1240, 1254, 1328, 1329, 1338, 1340, 1342, 1344, 1346, 1350, 1351, 1352, 1353, 1354, 1355, 1356], "add_bar": [1062, 1063, 1064, 1065, 1066, 1067, 1132], "add_capac": [1041, 1043, 1356, 1361], "add_crit": [77, 79], "add_data_packag": [394, 1135, 1137], "add_data_package_fil": [394, 1135, 1138], "add_effici": [1041, 1044, 1356, 1357, 1361], "add_factori": [1149, 1153], "add_fil": [394, 1135, 1139, 1140], "add_from_csv": [432, 433, 1328, 1338], "add_from_df": [0, 433, 1328], "add_from_fil": [434, 1328, 1338, 1343, 1356, 1361], "add_from_json": [435, 1328], "add_gener": [1027, 1029, 1344, 1353, 1355], "add_grid": [436, 1328, 1338, 1342, 1344, 1345, 1353, 1355, 1357], "add_inf": [1083, 1361], "add_k_factori": [1149, 1154], "add_model": [336, 338], "add_r": [0, 438, 1328], "add_random": [0, 437, 1328, 1338, 1348], "add_row": [439, 1328, 1338, 1341, 1347, 1350, 1352, 1354], "add_subplot": [1352, 1361], "add_to_chunk_stor": [1, 18, 28, 163, 165, 166], "add_to_figur": [1199, 1200, 1206, 1208, 1210, 1216, 1218, 1223, 1225, 1230, 1232, 1238, 1240], "add_turbin": [382, 384, 432, 437, 1338, 1342, 1349, 1358], "add_var": [664, 666, 1349, 1350, 1358], "add_wak": [378, 379, 953, 956, 958, 961, 963, 966, 968, 971, 973, 976, 979, 982, 985, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024], "addit": [0, 3, 4, 5, 29, 183, 194, 198, 218, 233, 244, 254, 269, 293, 300, 306, 316, 322, 329, 330, 331, 342, 345, 352, 356, 359, 364, 376, 381, 399, 405, 410, 411, 416, 419, 423, 426, 431, 432, 433, 437, 440, 441, 501, 502, 526, 538, 540, 609, 623, 630, 637, 642, 696, 698, 700, 710, 716, 726, 736, 738, 746, 755, 759, 763, 767, 770, 771, 782, 788, 795, 800, 808, 815, 945, 946, 1033, 1039, 1062, 1063, 1064, 1065, 1066, 1067, 1071, 1075, 1076, 1078, 1079, 1080, 1082, 1085, 1086, 1088, 1089, 1090, 1091, 1095, 1096, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1117, 1118, 1120, 1121, 1123, 1125, 1126, 1130, 1131, 1182, 1249, 1252, 1253, 1255, 1264, 1338, 1339, 1340, 1342, 1348, 1352, 1359], "addition": [1338, 1361], "address": [0, 1348], "advantag": 1353, "advic": [0, 1246], "aep": 1337, "aeroelast": 559, "affair": 1337, "affect": [0, 1340, 1350], "affects_downwind": [340, 341, 372, 373, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945], "after": [4, 5, 20, 188, 223, 284, 313, 378, 380, 432, 447, 467, 485, 497, 520, 528, 618, 646, 672, 822, 953, 957, 958, 962, 963, 967, 968, 972, 973, 977, 979, 983, 985, 989, 991, 995, 997, 1001, 1003, 1007, 1009, 1013, 1015, 1019, 1021, 1025, 1102, 1103, 1104, 1105, 1106, 1107, 1340, 1348, 1349, 1350, 1352, 1357], "afterward": 1348, "again": [0, 440, 441, 1339, 1348, 1350], "against": [1261, 1262], "agel": [824, 899, 905, 911, 1340, 1358], "aglo": 1342, "aim": 1358, "air": [0, 319, 501, 502, 696, 698, 699, 700, 715, 716, 725, 726, 736, 737, 745, 746, 1126, 1271, 1299, 1329, 1333, 1345, 1347], "aiter": 1198, "al": [860, 868, 876, 877, 1340, 1341], "alexand": [860, 868, 876, 1341], "algo": [1, 18, 28, 45, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 75, 77, 80, 82, 84, 86, 88, 90, 91, 93, 95, 96, 97, 99, 100, 101, 102, 104, 107, 108, 111, 163, 188, 190, 192, 203, 204, 206, 210, 213, 220, 222, 225, 227, 230, 234, 236, 237, 238, 239, 240, 241, 245, 248, 250, 251, 253, 254, 255, 259, 261, 263, 264, 265, 266, 267, 268, 270, 271, 274, 277, 278, 279, 281, 284, 286, 288, 290, 291, 292, 294, 295, 296, 297, 299, 300, 301, 305, 307, 309, 311, 313, 314, 317, 319, 321, 323, 324, 326, 340, 343, 344, 346, 353, 357, 359, 360, 361, 362, 363, 365, 372, 374, 375, 377, 378, 379, 380, 382, 385, 386, 387, 398, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 440, 442, 445, 446, 447, 449, 450, 451, 453, 454, 456, 460, 462, 464, 465, 466, 467, 469, 470, 471, 473, 475, 477, 480, 481, 483, 484, 485, 488, 489, 490, 492, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 508, 509, 512, 514, 516, 517, 518, 519, 520, 523, 524, 525, 527, 528, 529, 530, 537, 538, 539, 541, 542, 549, 553, 556, 559, 562, 563, 566, 567, 569, 571, 572, 574, 575, 576, 580, 581, 582, 583, 585, 588, 589, 591, 594, 595, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 622, 626, 629, 633, 636, 639, 640, 641, 643, 644, 645, 646, 649, 650, 651, 653, 655, 656, 657, 659, 661, 662, 663, 664, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 697, 699, 702, 703, 707, 709, 711, 714, 715, 718, 719, 720, 724, 725, 728, 729, 730, 734, 735, 737, 739, 740, 741, 744, 745, 748, 749, 750, 753, 754, 758, 762, 766, 770, 774, 777, 781, 784, 785, 786, 787, 789, 790, 791, 792, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 852, 855, 856, 857, 858, 860, 863, 864, 865, 866, 868, 871, 872, 873, 874, 876, 877, 880, 881, 882, 883, 885, 888, 889, 890, 892, 895, 896, 897, 899, 902, 903, 905, 908, 909, 911, 927, 931, 934, 937, 938, 939, 942, 943, 945, 948, 949, 950, 951, 953, 956, 957, 958, 961, 962, 963, 966, 967, 968, 971, 972, 973, 976, 977, 978, 979, 982, 983, 984, 985, 988, 989, 990, 991, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1032, 1037, 1041, 1043, 1055, 1061, 1074, 1075, 1076, 1087, 1088, 1090, 1093, 1094, 1095, 1098, 1099, 1100, 1101, 1108, 1109, 1328, 1340, 1341, 1342, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "algo_par": 538, "algo_typ": [1, 18, 28, 163, 183, 1361], "algorithm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 204, 210, 213, 220, 225, 227, 230, 236, 237, 238, 239, 240, 241, 245, 250, 251, 253, 254, 259, 261, 265, 266, 267, 268, 270, 271, 277, 278, 279, 281, 284, 286, 290, 291, 292, 294, 296, 297, 300, 305, 307, 311, 313, 314, 317, 321, 323, 326, 344, 359, 360, 361, 362, 363, 374, 375, 377, 379, 380, 385, 386, 387, 405, 408, 411, 416, 419, 426, 431, 442, 445, 446, 447, 449, 450, 453, 460, 462, 464, 465, 467, 469, 470, 481, 483, 484, 485, 488, 489, 494, 495, 496, 497, 499, 500, 503, 504, 505, 508, 512, 514, 516, 517, 518, 520, 523, 524, 527, 528, 529, 537, 538, 539, 541, 542, 553, 566, 567, 574, 575, 580, 582, 583, 585, 588, 589, 591, 592, 594, 595, 598, 599, 602, 603, 604, 606, 607, 610, 611, 614, 615, 618, 619, 626, 633, 639, 640, 643, 644, 645, 649, 650, 651, 655, 656, 657, 661, 662, 663, 667, 668, 669, 670, 672, 673, 676, 677, 678, 682, 683, 685, 686, 688, 689, 693, 694, 702, 703, 707, 711, 714, 718, 719, 720, 724, 728, 729, 730, 734, 739, 740, 741, 744, 748, 749, 750, 753, 784, 785, 786, 787, 789, 790, 791, 792, 796, 797, 798, 799, 802, 803, 804, 805, 806, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 833, 834, 837, 838, 839, 840, 843, 844, 847, 848, 849, 850, 855, 856, 857, 858, 863, 864, 865, 866, 871, 872, 873, 874, 880, 881, 882, 883, 888, 889, 890, 895, 896, 897, 902, 903, 908, 909, 927, 931, 937, 938, 942, 943, 948, 949, 950, 951, 956, 957, 961, 962, 966, 967, 971, 972, 976, 977, 978, 982, 983, 984, 988, 989, 990, 994, 995, 996, 1000, 1001, 1002, 1006, 1007, 1008, 1012, 1013, 1014, 1018, 1019, 1020, 1024, 1025, 1026, 1037, 1043, 1055, 1074, 1075, 1087, 1088, 1090, 1093, 1094, 1095, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1317, 1324, 1329, 1330, 1337, 1340, 1341, 1342, 1344, 1345, 1347, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1361], "align": [794, 1329], "all": [0, 1, 3, 5, 15, 18, 21, 28, 47, 48, 50, 52, 54, 56, 59, 60, 62, 64, 66, 68, 70, 88, 90, 92, 93, 95, 102, 104, 110, 111, 163, 188, 192, 203, 204, 205, 209, 222, 225, 229, 230, 234, 236, 241, 247, 248, 250, 252, 255, 259, 262, 263, 264, 267, 274, 281, 284, 285, 288, 291, 295, 296, 298, 301, 305, 308, 309, 313, 319, 321, 326, 340, 343, 344, 346, 353, 357, 360, 365, 372, 378, 380, 382, 389, 440, 441, 442, 445, 447, 450, 451, 453, 454, 456, 460, 464, 467, 470, 471, 473, 475, 477, 481, 485, 487, 489, 490, 492, 494, 495, 497, 500, 501, 503, 507, 508, 509, 512, 517, 520, 522, 524, 525, 527, 528, 530, 549, 556, 559, 562, 563, 566, 568, 569, 571, 572, 576, 581, 583, 585, 588, 590, 591, 596, 597, 598, 600, 602, 603, 605, 606, 608, 610, 612, 614, 616, 618, 622, 629, 636, 637, 639, 641, 643, 644, 646, 649, 652, 653, 655, 658, 659, 661, 664, 667, 669, 671, 672, 674, 676, 679, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 702, 708, 709, 711, 715, 718, 720, 725, 728, 730, 735, 737, 739, 741, 745, 748, 750, 754, 758, 762, 766, 770, 774, 777, 781, 784, 787, 789, 793, 794, 796, 799, 802, 807, 810, 814, 817, 822, 824, 827, 831, 832, 835, 841, 842, 845, 851, 852, 859, 860, 867, 868, 875, 876, 877, 884, 885, 891, 892, 898, 899, 904, 905, 910, 911, 928, 933, 934, 939, 944, 945, 952, 953, 957, 958, 962, 963, 967, 968, 972, 973, 977, 979, 983, 985, 989, 991, 995, 997, 1001, 1003, 1007, 1009, 1013, 1015, 1019, 1021, 1025, 1032, 1034, 1041, 1060, 1061, 1068, 1072, 1074, 1076, 1077, 1079, 1080, 1081, 1087, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1195, 1198, 1253, 1259, 1317, 1324, 1327, 1328, 1329, 1330, 1331, 1335, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1357, 1359, 1360, 1361], "all_non": [365, 368], "all_subclass": [1195, 1331], "allow": [0, 263, 532, 534, 1156, 1250, 1324, 1331, 1344], "along": [0, 357, 359, 361, 622, 623, 629, 630, 781, 787, 790, 794, 797, 799, 803, 807, 811, 814, 819, 824, 828, 1329, 1340, 1341, 1342, 1354, 1358], "alpha": [824, 825, 905, 906, 911, 926, 1294, 1333, 1342, 1344, 1349, 1353, 1355], "alreadi": [1348, 1354], "also": [0, 20, 176, 357, 1034, 1198, 1257, 1331, 1337, 1338, 1339, 1340, 1342, 1343, 1344, 1347, 1348, 1350, 1352, 1355, 1356, 1358, 1360, 1361], "alter": 1361, "altern": [1339, 1340, 1342, 1347, 1348], "alwai": [1348, 1351, 1356], "am": 1337, "amb2var": [1314, 1333], "amb_cap": [1165, 1167, 1265, 1314, 1316, 1333, 1356], "amb_ct": [1, 2, 18, 28, 1165, 1167, 1266, 1314, 1316, 1333, 1342, 1348, 1353, 1354], "amb_p": [1, 2, 18, 28, 1165, 1167, 1265, 1267, 1283, 1314, 1316, 1333, 1342, 1345, 1348, 1350, 1353, 1354, 1356], "amb_r": [264, 267, 288, 291, 569, 571, 572, 576, 581, 583, 585, 588, 591, 597, 598], "amb_result": [264, 268, 340, 372, 375, 380, 569, 571, 572, 832, 835, 839, 842, 845, 852, 856, 860, 864, 868, 872, 876, 877, 881, 885, 892, 899, 905, 934, 939, 945, 957, 962, 967, 972, 977, 983, 989, 995, 1001, 1007, 1013, 1019, 1025], "amb_rew": [1, 2, 18, 28, 1123, 1129, 1130, 1165, 1167, 1268, 1314, 1316, 1333, 1342, 1345, 1348, 1350, 1353, 1354, 1355, 1356, 1361], "amb_rews2": [1165, 1167, 1269, 1314, 1316, 1333, 1342, 1348, 1353, 1354], "amb_rews3": [1165, 1167, 1270, 1314, 1316, 1333, 1342, 1348, 1353, 1354], "amb_rho": [1, 2, 18, 28, 1165, 1167, 1271, 1314, 1316, 1333, 1342, 1348, 1353, 1354], "amb_rotor_r": [123, 1323], "amb_t": [1165, 1167, 1272, 1314, 1316, 1333], "amb_ti": [0, 1, 2, 18, 28, 366, 1165, 1167, 1273, 1314, 1316, 1333, 1340, 1342, 1346, 1348, 1354], "amb_w": [1165, 1167, 1275, 1314, 1316, 1333, 1343, 1347, 1352, 1354, 1356, 1357], "amb_wd": [1, 2, 18, 28, 660, 1081, 1083, 1085, 1122, 1127, 1129, 1130, 1165, 1167, 1274, 1314, 1316, 1333, 1342, 1348, 1354], "amb_yaw": [1165, 1167, 1276, 1314, 1316, 1333, 1342, 1348], "amb_yawm": [1277, 1314, 1316, 1333], "amb_yld": [1165, 1167, 1278, 1314, 1316, 1333, 1356], "ambient": [0, 1, 3, 4, 5, 28, 29, 64, 68, 123, 267, 268, 291, 309, 310, 311, 313, 319, 365, 366, 371, 375, 380, 440, 538, 585, 588, 598, 612, 613, 616, 618, 622, 629, 839, 856, 864, 872, 881, 885, 886, 953, 954, 957, 958, 959, 962, 963, 964, 967, 968, 969, 972, 973, 974, 977, 983, 985, 986, 989, 995, 997, 998, 1001, 1007, 1013, 1015, 1016, 1019, 1025, 1041, 1043, 1049, 1055, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1314, 1316, 1319, 1323, 1328, 1329, 1333, 1337, 1340, 1341, 1342, 1344, 1347, 1349, 1350, 1351, 1353, 1354, 1356, 1357, 1360], "ambientroseplotoutput": 0, "ambientwindroseoutput": 0, "ambka": [0, 1340, 1346], "among": 1342, "ampl_far": [911, 912], "ampl_near": [911, 913], "amplitud": [842, 843, 899, 902, 939, 942, 945, 948], "amsi": [843, 902, 942, 948], "amsterdam": 1198, "an": [0, 112, 195, 231, 272, 278, 327, 336, 382, 390, 541, 622, 623, 754, 755, 758, 759, 762, 763, 766, 767, 787, 892, 1027, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1083, 1100, 1103, 1106, 1132, 1143, 1147, 1148, 1149, 1155, 1156, 1157, 1160, 1196, 1318, 1324, 1327, 1328, 1330, 1338, 1339, 1340, 1342, 1344, 1345, 1347, 1348, 1351, 1352, 1353, 1355, 1356, 1358, 1360, 1361], "analys": [234, 1324], "analysi": [0, 1337], "analyt": [899, 1340], "analyz": [234, 237, 562, 1198, 1250], "anext": 1198, "ang": 559, "angl": [893, 927, 1276, 1277, 1310, 1311, 1333, 1340, 1345, 1358], "ani": [0, 709, 781, 1030, 1197, 1198, 1251, 1260, 1261, 1262, 1263, 1329, 1337, 1338, 1339, 1340, 1344, 1345, 1346, 1348, 1353, 1355, 1356, 1358, 1361], "anigen": 1353, "anim": [0, 1027, 1028, 1029, 1030, 1031, 1041, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1090, 1095, 1132, 1330, 1344, 1353, 1355], "anno_d": [1034, 1344, 1353, 1355], "anno_delx": [1034, 1344, 1353, 1355], "annot": [1032, 1034, 1344, 1347, 1353, 1355, 1356, 1357], "annual": [1041, 1055, 1347, 1356, 1357], "anom": [1344, 1355], "anoth": [1259, 1349, 1353, 1357, 1358], "api": [0, 1337, 1340, 1342, 1348, 1356], "apigen": 0, "appear": [0, 336, 337, 892, 1338, 1340, 1350, 1356, 1358], "append": [222, 224, 255, 258, 301, 304, 1353], "appli": [0, 3, 50, 93, 278, 379, 380, 398, 400, 404, 409, 427, 429, 883, 956, 957, 961, 962, 966, 967, 971, 972, 976, 977, 982, 983, 988, 989, 994, 995, 1000, 1001, 1006, 1007, 1012, 1013, 1018, 1019, 1024, 1025, 1048, 1292, 1319, 1320, 1329, 1333, 1338, 1340, 1342, 1348, 1358, 1361], "applic": [0, 263, 1324, 1328, 1337, 1340, 1353, 1361], "apply_ufunc": [0, 47, 50, 54, 60, 64, 68, 88, 93, 102, 195, 196, 203, 222, 234, 248, 254, 255, 263, 295, 300, 301, 309, 319, 343, 346, 429, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 1326, 1348], "approach": [1340, 1342, 1344, 1349, 1355], "approxim": [0, 1349], "ar": [0, 1, 47, 49, 50, 53, 54, 58, 60, 63, 64, 67, 68, 72, 88, 91, 93, 96, 97, 102, 108, 163, 199, 203, 222, 227, 234, 245, 248, 253, 255, 261, 263, 295, 299, 301, 307, 309, 310, 312, 313, 317, 319, 323, 343, 346, 357, 378, 432, 437, 440, 446, 451, 454, 456, 465, 471, 473, 475, 477, 484, 490, 492, 496, 501, 505, 509, 518, 525, 530, 562, 563, 567, 576, 600, 604, 605, 607, 608, 611, 612, 615, 616, 617, 618, 622, 625, 629, 632, 636, 637, 640, 641, 645, 646, 651, 653, 654, 657, 659, 660, 663, 664, 670, 674, 675, 678, 679, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 707, 709, 714, 715, 724, 725, 734, 735, 737, 744, 745, 753, 852, 860, 868, 876, 883, 973, 978, 979, 984, 985, 990, 991, 996, 997, 1002, 1003, 1008, 1009, 1014, 1015, 1020, 1021, 1026, 1057, 1058, 1059, 1073, 1079, 1080, 1082, 1083, 1156, 1157, 1182, 1199, 1205, 1206, 1208, 1215, 1216, 1222, 1223, 1229, 1230, 1237, 1238, 1245, 1258, 1321, 1326, 1329, 1331, 1334, 1336, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1354, 1355, 1356, 1357, 1358, 1361, 1362], "arang": 1344, "arbitrari": [0, 1338, 1360], "area": [0, 576, 622, 623, 1200, 1206, 1208, 1210, 1216, 1218, 1225, 1232, 1240, 1253, 1258, 1259, 1331, 1341, 1351], "areageometri": [382, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1216, 1223, 1230, 1238, 1239, 1256, 1331], "areaintersect": [1206, 1207, 1331], "areaunion": [1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1331], "arg": [1, 18, 19, 28, 29, 102, 163, 167, 168, 183, 185, 192, 194, 195, 198, 206, 217, 218, 219, 222, 231, 232, 233, 234, 244, 264, 269, 272, 273, 288, 293, 301, 306, 309, 316, 319, 322, 327, 328, 329, 340, 342, 343, 345, 346, 352, 353, 356, 357, 364, 365, 366, 372, 376, 378, 381, 398, 399, 403, 404, 406, 407, 409, 410, 412, 413, 414, 415, 417, 418, 420, 421, 422, 423, 425, 427, 428, 429, 430, 433, 434, 440, 451, 452, 454, 455, 456, 471, 473, 474, 475, 476, 477, 490, 491, 492, 501, 509, 525, 526, 530, 540, 549, 554, 556, 559, 562, 569, 571, 572, 576, 581, 583, 584, 585, 591, 597, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 710, 715, 725, 735, 737, 745, 754, 755, 758, 759, 762, 763, 766, 767, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1032, 1041, 1051, 1061, 1068, 1071, 1074, 1076, 1077, 1081, 1086, 1087, 1100, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1122, 1124, 1127, 1131, 1133, 1134, 1143, 1145, 1149, 1152, 1153, 1154, 1156, 1157, 1181, 1182, 1249, 1256, 1328, 1331, 1361], "argument": [0, 19, 20, 29, 45, 185, 212, 217, 232, 254, 273, 300, 328, 366, 401, 403, 407, 415, 418, 425, 430, 478, 537, 542, 554, 637, 755, 759, 763, 767, 1030, 1034, 1039, 1041, 1060, 1076, 1085, 1089, 1110, 1111, 1112, 1113, 1114, 1115, 1118, 1126, 1130, 1145, 1156, 1157, 1182, 1256, 1340, 1342, 1343, 1348, 1350, 1351, 1356, 1361], "arithmeticerror": 1198, "around": [0, 1341, 1342], "arrai": [0, 28, 46, 47, 48, 50, 52, 54, 56, 60, 62, 64, 66, 68, 70, 88, 90, 93, 95, 102, 104, 195, 203, 204, 205, 217, 222, 225, 234, 236, 248, 250, 252, 255, 259, 263, 264, 271, 295, 296, 298, 301, 305, 309, 319, 335, 336, 337, 340, 343, 344, 346, 360, 366, 372, 377, 382, 390, 403, 407, 415, 418, 425, 430, 437, 440, 442, 451, 454, 456, 460, 471, 473, 475, 477, 481, 490, 492, 494, 501, 503, 509, 512, 525, 530, 562, 563, 566, 569, 571, 572, 600, 602, 605, 606, 608, 610, 612, 614, 616, 622, 629, 636, 637, 639, 641, 643, 646, 649, 653, 655, 659, 661, 664, 667, 674, 676, 679, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 702, 709, 711, 715, 718, 725, 728, 735, 737, 739, 745, 748, 784, 789, 796, 802, 810, 817, 827, 832, 835, 842, 845, 852, 858, 860, 866, 868, 874, 876, 885, 890, 892, 897, 899, 905, 934, 939, 945, 951, 1060, 1196, 1197, 1253, 1260, 1261, 1262, 1263, 1324, 1340, 1342, 1344, 1345, 1347, 1348, 1349, 1353, 1355, 1358, 1361], "array_lik": [106, 184, 195, 196, 226, 320, 336, 337, 436, 444, 463, 482, 515, 532, 534], "articl": [860, 868, 876, 939, 945, 1335], "artifici": 1353, "artist": [0, 1027, 1029, 1031, 1056, 1092, 1097, 1330], "artistanim": 1030, "arxiv": 1009, "ascii": 1198, "ask": 1354, "assencio": 1258, "assertionerror": 1198, "associ": [195, 1324, 1338, 1340, 1345, 1351, 1361], "assum": [199, 600, 601, 1258, 1355], "assumpt": 1347, "atmospher": [1328, 1329, 1337, 1338, 1343], "attempt": 1361, "attribut": [543, 1328, 1342, 1343, 1347, 1348], "attributeerror": 1198, "author": [1335, 1343], "auto": 534, "autograd": 0, "autom": 0, "automat": [0, 206, 207, 241, 281, 309, 310, 311, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750, 1034, 1055, 1102, 1103, 1104, 1105, 1106, 1107, 1181, 1331, 1340, 1356], "avail": [0, 1329, 1334, 1336, 1337, 1339, 1340, 1343, 1351, 1356, 1361], "averag": [0, 585, 586, 1329, 1340, 1347, 1351], "avoid": [346, 349, 695, 697, 699, 704, 709, 715, 721, 725, 731, 735, 737, 745, 911, 1062, 1063, 1064, 1334, 1342, 1358], "await": 0, "awar": 1348, "awesom": 1337, "ax": [1034, 1041, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1085, 1087, 1089, 1090, 1092, 1095, 1097, 1116, 1118, 1126, 1130, 1132, 1199, 1200, 1206, 1208, 1210, 1216, 1218, 1223, 1225, 1230, 1232, 1238, 1240, 1341, 1342, 1343, 1344, 1347, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1361], "ax1": [1352, 1361], "ax2": [1352, 1361], "axi": [794, 1034, 1062, 1063, 1064, 1065, 1066, 1067, 1084, 1090, 1092, 1095, 1097, 1103, 1104, 1106, 1107, 1116, 1118, 1126, 1132, 1200, 1210, 1218, 1225, 1232, 1240, 1260, 1261, 1262, 1263, 1329, 1330, 1331, 1340, 1354, 1358], "axial": [0, 192, 194, 556, 559, 576, 1324, 1329, 1340, 1341], "axial_induct": [556, 557, 558, 559, 560, 561, 1346], "axialinductionmodel": [0, 192, 193, 194, 549, 556, 559, 646, 647, 825, 845, 846, 852, 853, 860, 861, 868, 869, 877, 878, 886, 899, 900, 905, 906, 911, 926, 935, 939, 940, 945, 946, 1324, 1329], "axisymmetr": 1340, "axisymmetricwakemodel": [832, 833, 834, 842, 845, 1334, 1340], "axiwak": [1340, 1346, 1349], "axiwake4": 1349, "axiwake5": 1346, "axiwake6": [1348, 1349], "axiwake9": 1349, "b": [0, 704, 721, 731, 852, 1156, 1157, 1182, 1337, 1341, 1361], "back": [0, 1264, 1345], "background": [0, 1336, 1338, 1340, 1345, 1351], "backward": [175, 176, 1355], "bar": [398, 399, 1062, 1063, 1064, 1065, 1066, 1067, 1132], "barg": 1034, "base": [0, 1, 3, 18, 20, 28, 47, 48, 50, 52, 54, 56, 60, 62, 64, 66, 68, 70, 73, 88, 90, 93, 95, 97, 99, 100, 101, 102, 104, 112, 116, 122, 128, 163, 185, 192, 203, 204, 206, 219, 222, 223, 225, 232, 234, 236, 237, 248, 250, 255, 259, 263, 264, 273, 274, 282, 288, 295, 296, 301, 305, 309, 319, 328, 340, 343, 344, 346, 353, 357, 360, 365, 372, 378, 398, 399, 404, 406, 409, 410, 412, 413, 414, 417, 420, 421, 422, 423, 427, 428, 429, 432, 436, 438, 439, 440, 442, 451, 452, 454, 455, 456, 460, 471, 473, 474, 475, 476, 477, 478, 481, 490, 491, 492, 493, 494, 501, 503, 509, 512, 525, 530, 537, 549, 556, 559, 562, 563, 566, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 602, 605, 606, 608, 609, 610, 612, 614, 616, 622, 623, 629, 630, 636, 639, 641, 643, 646, 649, 653, 655, 659, 661, 664, 667, 674, 676, 679, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 702, 709, 711, 715, 718, 725, 728, 735, 737, 739, 745, 748, 754, 758, 762, 766, 770, 774, 777, 781, 782, 784, 787, 788, 789, 794, 795, 796, 799, 800, 802, 807, 808, 810, 814, 815, 817, 824, 827, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 893, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1033, 1068, 1075, 1078, 1082, 1088, 1090, 1093, 1094, 1095, 1098, 1099, 1101, 1117, 1120, 1123, 1125, 1128, 1135, 1152, 1156, 1157, 1160, 1181, 1182, 1186, 1191, 1194, 1195, 1199, 1238, 1248, 1249, 1317, 1320, 1321, 1322, 1323, 1324, 1326, 1328, 1329, 1330, 1331, 1332, 1334, 1337, 1339, 1340, 1341, 1344, 1346, 1347, 1348, 1351, 1352, 1353, 1357, 1358, 1361], "base_cl": [1248, 1249, 1331], "base_class": [537, 549], "base_fram": [787, 788, 824, 825], "base_st": [477, 478], "base_states_arg": [477, 478], "base_states_kwarg": 478, "baseexcept": 1198, "baseexceptiongroup": 1198, "basic": [50, 336, 396, 397, 562, 576, 1319, 1325, 1327, 1329, 1347, 1353], "basic_ctrl": [3, 1346, 1348], "basicfarmcontrol": [562, 1329, 1346, 1348], "bastankhah": [0, 824, 899, 905, 911, 1329, 1334, 1340, 1358], "bastankhah025": 0, "bastankhah025_": 1346, "bastankhah025_linear": 1346, "bastankhah025_linear_ambka0": 1346, "bastankhah025_linear_k0": 1346, "bastankhah025_linear_ka0": 1346, "bastankhah025_linear_lim_k004": 1342, "bastankhah025_linear_loc_k004": 1353, "bastankhah025b_": 1346, "bastankhah025b_linear": 1346, "bastankhah025b_linear_ambka0": 1346, "bastankhah025b_linear_k0": 1346, "bastankhah025b_linear_ka0": 1346, "bastankhah2014": [0, 899, 900, 901, 902, 903, 904, 1334, 1346, 1348], "bastankhah2014_": [1340, 1346], "bastankhah2014_linear": [1340, 1346, 1357], "bastankhah2014_linear_ambka0": 1346, "bastankhah2014_linear_k0": 1346, "bastankhah2014_linear_k002": [1350, 1352], "bastankhah2014_linear_k004": [1348, 1349, 1361], "bastankhah2014_linear_ka0": 1346, "bastankhah2014_linear_ka02": 1347, "bastankhah2014_linear_ka02_kb0012": 1340, "bastankhah2014_linear_lim_k004": 1355, "bastankhah2014_linear_loc_k004": 1344, "bastankhah2014_quadratic_ka02": 1356, "bastankhah2014b_": 1346, "bastankhah2014b_linear": 1346, "bastankhah2014b_linear_ambka0": 1346, "bastankhah2014b_linear_k0": 1346, "bastankhah2014b_linear_ka0": 1346, "bastankhah2016": [0, 905, 906, 907, 908, 909, 910, 1334, 1342, 1346], "bastankhah2016_": [1340, 1346], "bastankhah2016_linear": [1346, 1358], "bastankhah2016_linear_ambka0": 1346, "bastankhah2016_linear_k0": 1346, "bastankhah2016_linear_ka0": 1346, "bastankhah2016_linear_lim_ambka04": 1340, "bastankhah2016_linear_lim_k004": 1342, "bastankhah2016b_": 1346, "bastankhah2016b_linear": 1346, "bastankhah2016b_linear_ambka0": 1346, "bastankhah2016b_linear_k0": 1346, "bastankhah2016b_linear_ka0": 1346, "bastankhah2016model": [824, 905, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 1334], "bastankhah_linear": 1357, "bastankhah_quadrat": 1356, "bastankhahwak": 0, "becaus": 1341, "becom": 1360, "been": [0, 206, 211, 215, 280, 392, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 1318, 1320, 1324, 1337, 1348, 1353, 1359, 1361], "befor": [0, 187, 198, 233, 248, 249, 329, 432, 665, 1062, 1063, 1064, 1102, 1103, 1104, 1105, 1106, 1107, 1250, 1341, 1342, 1348, 1353, 1359], "begin": [1156, 1162, 1348], "behaviour": [1342, 1355], "behind": [1340, 1341, 1349, 1361], "being": [0, 47, 49, 50, 53, 54, 58, 60, 63, 64, 67, 68, 72, 88, 91, 93, 96, 102, 108, 222, 227, 234, 245, 248, 253, 255, 261, 263, 295, 299, 301, 307, 309, 317, 319, 323, 343, 346, 440, 446, 451, 454, 456, 465, 471, 473, 475, 477, 484, 490, 492, 496, 501, 505, 509, 518, 525, 530, 562, 563, 567, 600, 604, 605, 607, 608, 611, 612, 615, 616, 622, 629, 636, 640, 641, 645, 646, 651, 653, 657, 659, 663, 664, 670, 674, 678, 679, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 707, 709, 714, 715, 724, 725, 734, 735, 737, 744, 745, 753, 1250, 1338, 1341, 1346, 1348], "belong": 1344, "below": [0, 646, 1103, 1104, 1106, 1107, 1339, 1341, 1361], "bend": [0, 824, 1329, 1340, 1358], "benefit": 1353, "beopen": 1198, "bernhard": 1335, "best": [1345, 1348, 1352], "beta": [0, 824, 825, 905, 906, 911, 926, 1295, 1333], "better": 1348, "between": [0, 93, 94, 437, 438, 629, 704, 721, 731, 1251, 1258, 1259, 1287, 1329, 1333, 1342, 1344, 1345, 1347, 1349, 1353], "betz": [0, 647, 845, 846, 886, 893, 934, 935, 1346], "betzaxialinduct": [0, 556, 557, 558, 1329, 1346], "bewar": 1351, "beyond": 906, "bibtex": 1335, "bin": [0, 1083, 1085, 1127, 1129, 1130, 1198, 1330, 1339, 1343, 1356, 1357], "binnd": 1343, "black": 0, "blade": [559, 629, 1329], "blh_mirror_h": [1340, 1346], "blh_mirror_h500": [1342, 1346], "blob": 1196, "block": [1, 18, 28, 124, 163, 166, 172, 1323, 1337, 1344], "block_converg": [1, 18, 28, 124, 163, 166, 1323], "blockag": [0, 852, 860, 868, 876, 877, 1334, 1336, 1337, 1340], "blockage_comparison": 0, "blockingioerror": 1198, "bmbf": 1337, "bmodel": 1342, "bmwk": 1337, "bname": 1342, "bodi": [0, 852, 1334, 1341, 1342], "book": [0, 1, 3, 18, 28, 163, 164, 170, 182, 336, 337, 395, 434, 538, 543, 545, 547, 835, 836, 846, 1123, 1124, 1125, 1126, 1135, 1136, 1336, 1337, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1350, 1351, 1352, 1354, 1355, 1356, 1360, 1361], "bool": [4, 5, 20, 22, 28, 29, 42, 45, 57, 71, 75, 80, 84, 107, 165, 172, 174, 175, 176, 189, 198, 202, 210, 211, 215, 236, 242, 243, 248, 249, 278, 279, 280, 283, 289, 311, 313, 338, 339, 341, 344, 349, 350, 351, 359, 373, 379, 391, 392, 398, 399, 405, 411, 416, 419, 426, 431, 432, 435, 440, 441, 526, 532, 534, 538, 542, 548, 579, 593, 612, 613, 618, 622, 623, 629, 630, 639, 643, 649, 655, 661, 664, 665, 667, 668, 676, 682, 685, 688, 693, 702, 703, 704, 705, 706, 710, 711, 712, 713, 718, 721, 722, 723, 728, 731, 732, 733, 739, 742, 743, 748, 751, 752, 754, 755, 758, 759, 762, 763, 766, 767, 792, 830, 833, 834, 837, 840, 843, 844, 847, 849, 850, 857, 860, 861, 865, 868, 869, 873, 877, 878, 882, 885, 886, 888, 895, 902, 903, 908, 909, 930, 931, 937, 942, 943, 945, 946, 948, 950, 956, 961, 966, 971, 973, 974, 976, 982, 985, 986, 988, 994, 997, 998, 1000, 1006, 1012, 1015, 1016, 1018, 1024, 1032, 1033, 1034, 1043, 1049, 1050, 1055, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1079, 1080, 1082, 1083, 1085, 1086, 1095, 1096, 1102, 1103, 1104, 1105, 1106, 1107, 1130, 1131, 1132, 1141, 1147, 1148, 1149, 1152, 1155, 1159, 1198, 1200, 1204, 1210, 1214, 1218, 1221, 1225, 1228, 1232, 1236, 1240, 1244, 1253, 1254, 1256, 1348], "boolean": [336, 337], "boost": [0, 646, 647, 1124, 1288, 1330, 1333, 1340, 1350, 1352], "both": [0, 600, 601, 842, 843, 899, 902, 939, 942, 945, 948, 1082, 1339, 1340, 1341, 1342, 1350, 1356, 1357], "bound": [0, 359, 440], "boundari": [382, 383, 1034, 1199, 1200, 1204, 1206, 1208, 1210, 1214, 1216, 1218, 1221, 1223, 1225, 1228, 1230, 1232, 1236, 1238, 1240, 1244, 1342, 1343, 1346], "bounds_error": [440, 1345], "bounds_extra_spac": [440, 441], "bracket": 0, "branch": [1337, 1339], "breakpoint": 1198, "bremen": [1343, 1352], "broadcast": [1259, 1261, 1262], "brokenpipeerror": 1198, "browser": 0, "buffererror": 1198, "bug": 0, "build": [1339, 1340], "built": 1198, "builtin": 1198, "builtinimport": 1198, "bundari": [1204, 1214, 1221, 1236, 1244], "byte": 1198, "bytearrai": 1198, "byteswarn": 1198, "bz2": [1165, 1166, 1168, 1169], "c": [0, 1156, 1157, 1182, 1198, 1339, 1358, 1359], "c1": [939, 940], "c2": [939, 940], "calc": 1349, "calc_amplitude_sigma": [842, 843, 899, 902, 939, 942, 945, 948], "calc_area": [1259, 1331], "calc_centrelin": [845, 847, 885, 888, 892, 895, 934, 937], "calc_centreline_integr": [357, 359, 781, 787, 794, 799, 807, 814, 824], "calc_chunk_s": [206, 209, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429], "calc_data": [911, 927], "calc_farm": [0, 1, 4, 18, 20, 28, 32, 163, 167, 1341, 1342, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1354, 1355, 1356, 1357, 1358, 1361], "calc_farm_effici": [1041, 1045, 1347, 1356, 1357], "calc_farm_mean": [1041, 1046], "calc_farm_sum": [1041, 1047], "calc_farm_yield": [1041, 1048, 1347, 1357], "calc_final_wake_delta": [378, 380, 953, 957, 958, 962, 963, 967, 968, 972, 973, 977, 979, 983, 985, 989, 991, 995, 997, 1001, 1003, 1007, 1009, 1013, 1015, 1019, 1021, 1025], "calc_mean_farm_pow": [1041, 1049, 1347, 1350, 1356, 1357], "calc_ord": [357, 360, 781, 784, 787, 789, 794, 796, 799, 802, 807, 810, 814, 817, 824, 827], "calc_par": [28, 29, 47, 50, 54, 60, 64, 68, 88, 93, 102, 222, 234, 246, 248, 254, 255, 263, 295, 300, 301, 309, 319, 343, 346, 405, 411, 416, 419, 426, 431, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745], "calc_paramet": [1, 4, 5], "calc_point": [0, 1, 5, 18, 28, 33, 163, 168, 1076, 1102, 1103, 1104, 1105, 1106, 1107, 1340, 1341, 1342, 1348, 1354], "calc_states_indic": [473, 475, 477, 480, 490], "calc_states_mean": [1041, 1050], "calc_states_std": [1041, 1051], "calc_states_sum": [1041, 1052], "calc_turbine_mean": [1041, 1053], "calc_turbine_sum": [1041, 1054], "calc_turbine_yield": [1041, 1048, 1055, 1356], "calc_var": [309, 310, 616, 653, 654], "calc_w": [1184, 1187, 1188, 1192, 1332], "calc_wake_radiu": [845, 848, 885, 889, 892, 896, 934, 938], "calc_wakes_x_r": [832, 833, 842, 844, 845, 849, 885, 892, 899, 934, 939, 945], "calc_wakes_x_yz": [832, 834, 835, 837, 842, 845, 885, 892, 899, 905, 908, 934, 939, 945], "calcul": [0, 1, 4, 5, 18, 20, 21, 28, 29, 31, 32, 33, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 66, 67, 68, 70, 71, 72, 75, 80, 84, 88, 90, 91, 93, 95, 96, 102, 104, 107, 108, 111, 163, 167, 168, 188, 190, 195, 196, 203, 204, 206, 210, 213, 220, 222, 225, 227, 230, 234, 236, 237, 238, 240, 241, 245, 246, 248, 250, 251, 253, 254, 255, 259, 261, 263, 264, 265, 266, 267, 268, 270, 271, 277, 279, 281, 284, 286, 288, 290, 291, 292, 294, 295, 296, 297, 300, 301, 305, 307, 309, 310, 311, 313, 314, 317, 319, 321, 323, 326, 340, 343, 344, 346, 353, 354, 355, 357, 359, 360, 361, 362, 372, 374, 375, 377, 378, 379, 380, 391, 393, 398, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 440, 441, 442, 445, 446, 447, 449, 450, 451, 453, 454, 456, 460, 462, 464, 465, 467, 469, 470, 471, 473, 475, 477, 478, 481, 483, 484, 485, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 508, 509, 512, 514, 516, 517, 518, 520, 523, 524, 525, 527, 528, 529, 530, 538, 553, 562, 563, 566, 567, 569, 571, 572, 574, 575, 576, 580, 581, 582, 583, 585, 588, 589, 591, 594, 595, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 622, 626, 629, 630, 633, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 697, 699, 702, 703, 707, 709, 711, 714, 715, 718, 719, 720, 724, 725, 728, 729, 730, 734, 735, 737, 739, 740, 741, 744, 745, 748, 749, 750, 753, 754, 756, 757, 758, 760, 761, 762, 764, 765, 766, 768, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 784, 785, 786, 787, 789, 790, 791, 792, 794, 796, 797, 798, 799, 802, 803, 804, 806, 807, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 852, 855, 856, 857, 858, 860, 861, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 876, 877, 878, 880, 881, 882, 883, 885, 886, 888, 889, 890, 892, 893, 895, 896, 897, 899, 902, 903, 905, 908, 909, 911, 927, 931, 934, 937, 938, 939, 942, 943, 945, 948, 949, 950, 951, 953, 956, 957, 958, 961, 962, 963, 966, 967, 968, 971, 972, 973, 976, 977, 978, 979, 982, 983, 984, 985, 988, 989, 990, 991, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1032, 1033, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1060, 1062, 1063, 1064, 1074, 1075, 1076, 1081, 1100, 1101, 1109, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1194, 1196, 1197, 1199, 1204, 1206, 1208, 1214, 1216, 1221, 1223, 1228, 1230, 1236, 1238, 1244, 1258, 1259, 1260, 1261, 1262, 1263, 1269, 1270, 1297, 1298, 1317, 1318, 1319, 1320, 1321, 1324, 1326, 1329, 1330, 1331, 1332, 1333, 1334, 1340, 1342, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1352, 1354, 1355, 1356, 1357, 1358, 1360], "calib3d": 1196, "call": [0, 12, 163, 186, 203, 217, 234, 254, 255, 300, 301, 403, 407, 415, 418, 425, 430, 540, 541, 542, 646, 1062, 1063, 1064, 1324, 1329, 1338, 1339, 1340, 1342, 1344, 1348, 1349, 1350, 1354, 1355, 1358, 1360, 1361], "callabl": [217, 403, 407, 415, 418, 425, 430, 1198], "callback": [195, 198, 231, 233, 272, 329], "calul": 1340, "can": [0, 346, 600, 835, 911, 1062, 1063, 1064, 1198, 1327, 1328, 1329, 1334, 1335, 1337, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361], "cap": [1165, 1167, 1279, 1282, 1314, 1316, 1333, 1356], "capabl": [0, 1337], "capac": [0, 1041, 1043, 1265, 1279, 1333, 1356], "care": 1348, "carri": [1340, 1348, 1349], "case": [0, 313, 406, 440, 618, 1055, 1082, 1118, 1126, 1141, 1159, 1246, 1326, 1337, 1338, 1340, 1342, 1344, 1348, 1350, 1352, 1353, 1354, 1355, 1358], "cast": 1198, "categori": 1343, "caus": [0, 56, 142, 265, 266, 290, 362, 374, 379, 574, 575, 580, 594, 785, 791, 798, 804, 813, 820, 829, 838, 847, 848, 855, 863, 871, 880, 888, 889, 895, 896, 930, 937, 938, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024, 1323, 1340, 1342, 1344, 1349], "caution": 1340, "cd": [1339, 1362], "center": 1349, "centr": [0, 1, 3, 312, 437, 581, 616, 617, 625, 632, 653, 781, 782, 799, 800, 807, 808, 814, 815, 845, 847, 885, 888, 892, 895, 934, 937, 1216, 1217, 1230, 1231, 1258, 1259, 1303, 1329, 1331, 1333, 1340, 1341, 1342, 1343, 1344, 1346, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1356, 1357, 1358], "centrelin": [0, 357, 359, 361, 781, 787, 790, 794, 797, 799, 803, 807, 811, 814, 819, 824, 828, 945, 946, 1340, 1341], "centreline_pt": 1341, "centrerotor": [616, 617, 618, 619, 620, 621, 1329, 1346, 1348], "centrum": 1198, "certain": [0, 1340], "cf": [1340, 1352, 1353], "chain": 1337, "chang": [0, 659, 660, 1329, 1337, 1339, 1342, 1343, 1347], "changelog": 1337, "channel": 1339, "characterist": 885, "check": [0, 73, 75, 77, 80, 82, 84, 86, 288, 289, 392, 537, 542, 576, 579, 581, 583, 585, 591, 593, 597, 911, 914, 930, 1141, 1159, 1258, 1324, 1342, 1344, 1348, 1355, 1356, 1361], "check_converg": [73, 75, 77, 80, 82, 84, 86], "check_match": [1156, 1159], "check_raw": [394, 1135, 1141], "check_wmodel": [288, 289, 576, 579, 581, 583, 585, 591, 593, 597], "checkout": 1337, "childprocesserror": 1198, "chk": [289, 579, 593], "choic": [0, 336, 347, 440, 441, 1034, 1057, 1058, 1059, 1156, 1267, 1293, 1331, 1333, 1337, 1338, 1340, 1342, 1344, 1347, 1348, 1349, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1361], "chois": 0, "choos": [1339, 1341, 1342, 1347, 1350, 1357, 1360], "chose": [1340, 1351], "chosen": [0, 1340, 1348], "chr": 1198, "chunk": [0, 1, 5, 18, 21, 28, 47, 48, 50, 52, 54, 56, 60, 62, 64, 66, 68, 70, 88, 90, 93, 95, 102, 104, 163, 165, 169, 175, 176, 187, 192, 195, 202, 203, 204, 206, 207, 209, 210, 213, 216, 222, 225, 231, 234, 236, 241, 248, 250, 255, 259, 263, 264, 272, 274, 281, 288, 295, 296, 301, 305, 309, 319, 321, 327, 334, 340, 343, 344, 346, 353, 357, 360, 365, 372, 378, 398, 400, 404, 405, 406, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 440, 441, 442, 445, 451, 453, 454, 456, 460, 464, 471, 473, 475, 477, 481, 490, 492, 494, 495, 501, 503, 509, 512, 517, 525, 527, 530, 556, 559, 562, 563, 566, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 602, 603, 605, 606, 608, 610, 612, 614, 616, 622, 629, 636, 639, 641, 643, 644, 646, 649, 653, 655, 659, 661, 664, 667, 669, 674, 676, 679, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 702, 709, 711, 715, 718, 720, 725, 728, 730, 735, 737, 739, 741, 745, 748, 750, 754, 758, 762, 766, 770, 774, 777, 781, 784, 787, 789, 794, 796, 799, 802, 807, 810, 814, 817, 824, 827, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1318, 1321, 1326, 1337, 1340, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "chunk_data": [398, 400, 404, 409, 427, 429], "chunk_size_point": [206, 207, 406, 412, 414, 417, 420, 421, 428, 1344, 1345, 1347, 1348, 1350, 1354, 1355, 1356, 1357, 1358], "chunk_size_st": [206, 207, 406, 412, 413, 414, 417, 420, 421, 428, 1344, 1345, 1347, 1348, 1349, 1350, 1354, 1355, 1356, 1357, 1358], "chunk_sizes_st": 209, "chunk_sizes_target": 209, "chunk_stor": [1, 18, 28, 163, 169, 187, 405, 411, 416, 419, 426, 431], "chunked_result": 5, "chunki_st": 210, "chunki_target": 210, "circl": [576, 591, 622, 623, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1258, 1259, 1331, 1340], "citat": 1337, "cite": 1335, "cl": [1195, 1206, 1207, 1248, 1331], "cl_del": [847, 888, 895, 937], "cl_ipar": [781, 782, 799, 800, 807, 808, 814, 815], "cla": [206, 1324], "claim": 1345, "class": [0, 1, 3, 18, 20, 28, 47, 50, 54, 60, 64, 68, 73, 77, 82, 86, 88, 93, 97, 102, 112, 163, 183, 192, 194, 195, 203, 206, 218, 222, 231, 232, 234, 244, 248, 255, 263, 264, 269, 272, 273, 274, 288, 293, 295, 301, 306, 309, 316, 319, 322, 327, 328, 336, 340, 342, 343, 345, 346, 352, 353, 356, 357, 364, 365, 372, 376, 378, 381, 382, 394, 398, 399, 404, 406, 409, 410, 412, 413, 414, 417, 420, 421, 422, 423, 427, 428, 429, 440, 451, 452, 454, 455, 456, 471, 473, 474, 475, 476, 477, 490, 491, 492, 493, 501, 509, 525, 530, 537, 549, 554, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 609, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 696, 697, 698, 699, 700, 709, 710, 715, 716, 725, 726, 735, 736, 737, 738, 745, 746, 754, 758, 762, 766, 770, 774, 777, 781, 782, 787, 788, 794, 795, 799, 800, 807, 808, 814, 815, 824, 825, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 886, 892, 893, 899, 900, 905, 906, 911, 934, 935, 939, 940, 945, 946, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1027, 1032, 1033, 1041, 1061, 1068, 1071, 1074, 1075, 1077, 1078, 1081, 1082, 1087, 1088, 1090, 1095, 1100, 1101, 1108, 1109, 1116, 1117, 1119, 1120, 1122, 1123, 1124, 1125, 1127, 1128, 1133, 1135, 1143, 1149, 1152, 1156, 1157, 1160, 1165, 1172, 1181, 1182, 1195, 1198, 1199, 1206, 1208, 1216, 1223, 1230, 1238, 1248, 1249, 1317, 1319, 1320, 1321, 1322, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1334, 1337, 1338, 1340, 1343, 1344, 1346, 1348, 1353, 1355, 1358, 1361], "class_nam": [549, 554], "classic": [0, 556, 1329, 1340], "classif": 1334, "classmethod": [1, 7, 18, 23, 28, 39, 102, 112, 163, 183, 192, 194, 195, 198, 206, 218, 222, 231, 233, 234, 244, 264, 269, 272, 288, 293, 301, 306, 309, 316, 319, 322, 327, 329, 330, 331, 340, 342, 343, 345, 346, 352, 353, 356, 357, 364, 372, 376, 378, 381, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 569, 571, 572, 576, 581, 583, 585, 591, 597, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1032, 1041, 1061, 1068, 1071, 1072, 1074, 1077, 1081, 1084, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1143, 1146, 1149, 1165, 1170, 1171, 1198], "clean": [911, 928], "cleaner": 0, "clear": [174, 1360], "clear_mem": [1, 18, 28, 163, 174], "clearli": [1341, 1342, 1349, 1358], "client": [409, 410], "client_par": [409, 410, 427], "climat": 1337, "clone": [1339, 1362], "close": [1199, 1223, 1331, 1340, 1341, 1344, 1345, 1353, 1355, 1361], "closedpolygon": [1223, 1224, 1225, 1226, 1227, 1228, 1229, 1331], "cls_name": [1248, 1249, 1331], "cluster": [0, 409, 410, 427, 1326, 1337, 1348], "cluster_par": [409, 410, 427], "cmap": [1062, 1063, 1064, 1065, 1066, 1067, 1085, 1132, 1350, 1361], "cnri": 1198, "co": [852, 1348, 1358], "coars": [1343, 1357], "code": [0, 163, 911, 1334, 1337, 1338, 1339, 1348, 1361], "coeffici": [0, 559, 560, 704, 721, 731, 1196, 1266, 1280, 1333, 1340, 1342, 1350], "col_cp": [695, 696, 698], "col_ct": [715, 716, 725, 726, 1340], "col_d": 432, "col_h": [432, 1338], "col_i": [432, 1338], "col_id": 432, "col_index": 432, "col_model": 0, "col_nam": 432, "col_p": [715, 716, 725, 726, 1340], "col_tind": 660, "col_tnam": [660, 1352], "col_turbine_typ": 432, "col_var": [674, 675, 770, 771], "col_w": [695, 696, 715, 716, 725, 1340], "col_ws_cp_fil": 698, "col_ws_ct_fil": 726, "col_ws_p_fil": [725, 726], "col_x": [432, 1338], "col_z": [770, 771], "collect": [163, 234, 239, 562, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1132, 1354, 1360], "collect_model": [234, 237, 562], "colmap": [660, 1352], "color": [0, 1034, 1062, 1063, 1064, 1065, 1066, 1067, 1085, 1132, 1200, 1210, 1218, 1225, 1232, 1240, 1344, 1356], "color_bi": [1032, 1034, 1347, 1356, 1357], "colorbar": 0, "colormap": [1062, 1063, 1064, 1065, 1066, 1067], "colour": 1341, "cols_minmax": [532, 534], "cols_models_post": 432, "cols_models_pr": 432, "column": [432, 456, 458, 509, 511, 532, 534, 600, 601, 641, 642, 660, 674, 675, 696, 698, 700, 715, 716, 725, 726, 737, 745, 771, 1037, 1073, 1079, 1080, 1165, 1171, 1196, 1253, 1340, 1343, 1347, 1348, 1349, 1350, 1352, 1355, 1356], "com": [0, 860, 868, 876, 1196, 1198, 1258, 1337, 1339, 1361, 1362], "combin": [0, 206, 210, 278, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 953, 954, 958, 959, 963, 964, 968, 969, 1339, 1340, 1341, 1342, 1344, 1349, 1351, 1353, 1358, 1361], "combine_result": [206, 210, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429], "come": [0, 311, 1337, 1338, 1343, 1352], "command": [0, 412, 535, 536, 1133, 1198, 1200, 1210, 1218, 1225, 1232, 1240, 1328, 1330, 1331, 1339, 1348], "comment": 0, "commit": [0, 1337], "common": [255, 301, 824, 905, 911, 927, 1334], "commun": [1344, 1361], "compar": [0, 1341, 1350, 1352, 1359], "compare_wak": 0, "comparis": 1341, "comparison": [0, 1336, 1337, 1342, 1349], "compat": [0, 289, 579, 593], "compil": 1198, "complet": [0, 1342, 1343, 1346, 1347, 1348, 1352], "complevel": 1264, "complex": [1198, 1337, 1361], "compon": [1250, 1260, 1261, 1263, 1331], "compos": [0, 622, 629, 1329, 1361], "compress": 1264, "comput": [0, 28, 48, 52, 56, 62, 66, 70, 90, 95, 104, 192, 193, 204, 206, 209, 225, 236, 250, 259, 288, 296, 305, 311, 344, 357, 360, 363, 378, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 442, 460, 481, 494, 503, 512, 556, 558, 559, 561, 566, 602, 606, 608, 609, 610, 614, 639, 643, 649, 655, 661, 667, 676, 682, 685, 688, 693, 702, 709, 711, 718, 728, 739, 748, 781, 784, 787, 789, 794, 796, 799, 802, 805, 807, 810, 814, 817, 824, 827, 905, 1074, 1123, 1318, 1321, 1326, 1329, 1330, 1337, 1338, 1340, 1344, 1345, 1347, 1348, 1349, 1353, 1354, 1355, 1356, 1357, 1358], "concept": [0, 1341, 1355], "concern": [0, 1339, 1348], "concret": [1317, 1329, 1334, 1340, 1351], "concurr": [0, 1337], "conda": [0, 1337, 1359], "conda_hint": 1246, "condit": [0, 562, 659, 824, 905, 911, 1258, 1329, 1338, 1341, 1342, 1352, 1354, 1358, 1360], "config": [0, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 1317, 1339], "configur": [0, 112, 120, 121, 398, 399, 1317, 1322], "confus": 0, "connectionabortederror": 1198, "connectionerror": 1198, "connectionrefusederror": 1198, "connectionreseterror": 1198, "consid": [0, 359, 945, 946, 1348, 1356], "consider": 0, "consist": [0, 45, 327, 1342, 1343, 1350, 1351, 1352, 1354, 1357], "constant": [0, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 1184, 1186, 1188, 1191, 1192, 1194, 1317, 1333, 1341, 1344, 1350, 1356, 1358], "constrict": 1342, "construct": [198, 233, 329, 1156, 1159, 1160, 1331, 1337, 1351], "constructor": [0, 1, 3, 18, 19, 28, 29, 47, 50, 51, 54, 55, 60, 61, 64, 65, 68, 69, 73, 74, 77, 78, 82, 83, 86, 87, 88, 89, 93, 94, 97, 98, 102, 103, 112, 113, 163, 164, 183, 192, 194, 195, 196, 198, 203, 206, 207, 218, 222, 223, 231, 232, 233, 234, 235, 244, 248, 249, 255, 256, 263, 264, 269, 272, 273, 274, 275, 288, 293, 295, 301, 302, 306, 309, 310, 316, 319, 322, 327, 328, 329, 330, 331, 336, 337, 340, 342, 343, 345, 346, 347, 352, 353, 356, 357, 358, 364, 365, 367, 372, 376, 378, 381, 382, 383, 394, 395, 398, 399, 404, 406, 409, 410, 412, 413, 414, 417, 420, 421, 422, 423, 427, 428, 429, 440, 441, 451, 452, 454, 455, 456, 458, 471, 473, 474, 475, 476, 477, 478, 490, 491, 492, 493, 501, 502, 509, 511, 525, 526, 530, 549, 551, 556, 557, 559, 560, 562, 563, 564, 569, 570, 571, 572, 573, 576, 577, 581, 583, 584, 585, 586, 591, 592, 597, 600, 601, 605, 608, 609, 612, 613, 616, 622, 623, 629, 630, 636, 637, 641, 642, 646, 647, 653, 654, 659, 660, 664, 665, 674, 675, 679, 680, 684, 687, 690, 691, 695, 696, 697, 698, 699, 700, 709, 710, 715, 716, 725, 726, 735, 736, 737, 738, 745, 746, 754, 755, 758, 759, 762, 763, 766, 767, 770, 771, 774, 777, 778, 781, 782, 787, 788, 794, 795, 799, 800, 807, 808, 814, 815, 824, 825, 832, 835, 836, 842, 845, 846, 852, 853, 860, 861, 868, 869, 876, 877, 878, 885, 886, 892, 893, 899, 900, 905, 906, 911, 926, 934, 935, 939, 940, 945, 946, 953, 954, 958, 959, 963, 964, 968, 969, 973, 974, 979, 980, 985, 986, 991, 992, 997, 998, 1003, 1004, 1009, 1010, 1015, 1016, 1021, 1022, 1027, 1028, 1032, 1033, 1041, 1042, 1061, 1068, 1069, 1071, 1074, 1075, 1077, 1078, 1081, 1082, 1087, 1088, 1090, 1091, 1095, 1096, 1100, 1101, 1108, 1109, 1116, 1117, 1119, 1120, 1122, 1123, 1124, 1125, 1127, 1128, 1133, 1135, 1136, 1143, 1145, 1149, 1152, 1153, 1154, 1156, 1157, 1172, 1173, 1181, 1182, 1206, 1207, 1208, 1209, 1216, 1217, 1223, 1224, 1230, 1231, 1238, 1239, 1249, 1331, 1340, 1342, 1346, 1348, 1351, 1356, 1361], "consult": 852, "consumpt": [1250, 1331], "contain": [1, 18, 28, 112, 163, 184, 195, 196, 199, 231, 272, 327, 330, 331, 549, 1135, 1137, 1138, 1147, 1148, 1253, 1322, 1324, 1327, 1328, 1329, 1331, 1340, 1345, 1346, 1349, 1350, 1351, 1354, 1356, 1360], "content": [394, 549, 555, 1135, 1142, 1356], "context": [394, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1348, 1353], "continu": [1344, 1358], "contour": [0, 1132], "contourf": [1062, 1063, 1064, 1065, 1066, 1067, 1132], "contract": [0, 1046, 1047, 1057, 1129, 1130, 1337], "contrast": [263, 1196, 1324, 1340, 1344], "contribut": [264, 265, 266, 288, 290, 340, 372, 374, 378, 380, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 591, 594, 597, 832, 835, 838, 842, 845, 852, 855, 860, 863, 868, 871, 876, 877, 880, 885, 892, 899, 905, 934, 939, 945, 953, 957, 958, 962, 963, 967, 968, 972, 973, 977, 979, 983, 985, 989, 991, 995, 997, 1001, 1003, 1007, 1009, 1013, 1015, 1019, 1021, 1025, 1342], "contribute_to_farm_wak": [264, 265, 569, 571, 572, 574], "contribute_to_point_wak": [264, 266, 569, 571, 572, 575], "control": [1, 3, 6, 18, 28, 234, 244, 549, 562, 1329, 1348], "controller_typ": [234, 244, 562], "conv_crit": [18, 19, 1342], "convcrit": [18, 19, 73, 74, 75, 76, 77, 78, 79, 82, 1320], "convcritlist": [77, 78, 79, 80, 81, 1320], "conveni": [1339, 1354], "convent": [438, 1060, 1196, 1340], "converg": [0, 1, 18, 19, 28, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 86, 124, 163, 166, 172, 1318, 1320, 1323, 1342, 1344, 1355], "convert": [1253, 1354], "convvardelta": [82, 83, 84, 85, 86, 1320], "coodin": 0, "coord": [40, 178, 179, 189, 241, 281, 321, 445, 453, 464, 495, 517, 527, 548, 603, 644, 669, 720, 730, 741, 750], "coordin": [40, 47, 50, 54, 60, 64, 68, 88, 93, 102, 178, 203, 205, 210, 222, 234, 248, 252, 255, 263, 295, 298, 301, 309, 312, 319, 343, 346, 357, 359, 361, 362, 374, 405, 411, 416, 419, 426, 431, 437, 440, 441, 451, 452, 454, 455, 456, 471, 473, 475, 477, 478, 490, 491, 492, 501, 509, 525, 530, 548, 562, 563, 600, 605, 608, 612, 616, 617, 622, 625, 629, 632, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 781, 785, 787, 790, 791, 794, 797, 798, 799, 803, 804, 807, 811, 813, 814, 819, 820, 824, 828, 829, 838, 855, 863, 871, 880, 1032, 1033, 1102, 1103, 1104, 1105, 1106, 1107, 1172, 1179, 1180, 1251, 1253, 1303, 1308, 1309, 1333, 1340, 1342, 1343, 1345, 1347, 1348, 1353, 1354, 1355], "copi": [1, 18, 28, 64, 68, 163, 165, 198, 313, 618, 1319], "copy_to_ambi": [313, 618], "copyright": 1198, "core": [0, 1, 3, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 23, 28, 29, 39, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 67, 68, 70, 71, 72, 75, 80, 84, 88, 90, 91, 92, 93, 95, 96, 102, 103, 104, 107, 108, 110, 111, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 398, 405, 406, 408, 411, 414, 416, 417, 419, 422, 426, 431, 435, 436, 438, 439, 440, 442, 445, 446, 447, 449, 450, 453, 456, 460, 462, 464, 465, 467, 469, 470, 477, 478, 481, 483, 484, 485, 487, 488, 489, 492, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 512, 514, 516, 517, 518, 520, 523, 524, 527, 528, 529, 537, 538, 539, 541, 542, 544, 545, 546, 549, 552, 553, 556, 559, 562, 563, 564, 566, 567, 568, 571, 572, 574, 575, 579, 580, 582, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 622, 626, 629, 633, 636, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 699, 702, 703, 707, 708, 709, 711, 714, 715, 718, 719, 720, 724, 725, 728, 729, 730, 734, 737, 739, 740, 741, 744, 745, 748, 749, 750, 753, 754, 758, 762, 766, 770, 774, 777, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 908, 909, 910, 911, 926, 927, 929, 930, 931, 933, 934, 935, 937, 938, 939, 940, 942, 943, 944, 945, 946, 948, 949, 950, 951, 952, 953, 956, 957, 958, 961, 962, 963, 966, 967, 968, 971, 972, 973, 976, 977, 978, 979, 982, 983, 984, 985, 988, 989, 990, 991, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1037, 1043, 1055, 1087, 1088, 1123, 1317, 1319, 1320, 1321, 1326, 1327, 1328, 1329, 1334, 1348], "corect": 1358, "corner": 1345, "corpor": 1198, "correct": [0, 699, 700, 715, 716, 725, 726, 745, 746, 787, 885, 886, 892, 1009, 1329, 1340, 1349, 1350, 1354], "correl": [885, 1334], "correspond": [0, 199, 202, 646, 1260, 1263, 1314, 1316, 1333, 1339, 1340, 1346, 1347, 1348, 1352, 1361], "correspons": 1352, "costruct": 1340, "could": [0, 1340, 1342, 1347, 1352, 1354], "count": [0, 1340], "counter": [28, 34, 45, 102, 105, 195, 202, 231, 272, 327, 334, 1132], "coupl": 1353, "cover": 576, "cp": [0, 695, 696, 697, 698, 1329, 1340], "cpctfile": [0, 695, 696, 1329], "cpctfromtwo": [0, 697, 698, 1329], "cpp": 1196, "cpu_count": [0, 1348], "cpython": 1198, "creat": [0, 1, 18, 28, 40, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 178, 184, 192, 195, 198, 203, 222, 231, 233, 234, 241, 248, 255, 263, 264, 270, 271, 272, 274, 281, 287, 288, 294, 295, 301, 309, 319, 321, 327, 329, 330, 331, 340, 343, 346, 353, 357, 365, 372, 377, 378, 440, 445, 451, 453, 454, 456, 464, 471, 473, 475, 477, 478, 490, 492, 495, 501, 509, 517, 525, 527, 530, 532, 533, 534, 537, 554, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 603, 605, 608, 612, 616, 622, 629, 636, 641, 644, 646, 653, 659, 664, 669, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 720, 725, 730, 735, 737, 741, 745, 750, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 858, 860, 866, 868, 874, 876, 877, 885, 890, 892, 897, 899, 905, 911, 934, 939, 945, 951, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1027, 1030, 1032, 1034, 1061, 1081, 1085, 1090, 1095, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1121, 1122, 1124, 1127, 1130, 1132, 1149, 1152, 1156, 1157, 1160, 1161, 1182, 1251, 1330, 1331, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1361], "create_random_abl_st": [532, 1328], "creation": [0, 363, 538, 551, 805, 1081, 1122, 1317, 1328, 1330, 1353], "credit": 1198, "crespo": [885, 1334, 1340], "crespohernandez": [0, 1358], "crespohernandez_": [1340, 1346], "crespohernandez_linear": 1346, "crespohernandez_linear_ambka0": 1346, "crespohernandez_linear_k0": 1346, "crespohernandez_linear_ka0": 1346, "crespohernandez_max": [1356, 1357], "crespohernandez_max_ka0213_kb003": 1340, "crespohernandez_max_ka04": 1356, "crespohernandeztiwak": [0, 885, 886, 887, 888, 889, 890, 891, 1334, 1346], "crit": [77, 78, 79], "criteria": [18, 19, 73, 74, 75, 77, 78, 80, 82, 83, 84, 86, 1320, 1342, 1348], "criterion": [77, 79], "cross": [1340, 1344, 1358], "crucial": 1351, "csv": [0, 396, 397, 432, 433, 456, 735, 1032, 1037, 1077, 1079, 1165, 1166, 1168, 1169, 1255, 1328, 1331, 1338, 1340, 1344, 1347, 1352, 1353, 1354, 1355, 1356, 1357, 1361], "ct": [0, 1, 2, 18, 28, 192, 193, 349, 547, 551, 556, 557, 558, 559, 561, 646, 679, 680, 695, 697, 698, 699, 700, 704, 715, 716, 721, 725, 726, 731, 735, 737, 738, 745, 746, 847, 848, 869, 885, 886, 888, 889, 892, 895, 896, 906, 934, 937, 938, 1124, 1126, 1165, 1167, 1280, 1282, 1314, 1316, 1329, 1330, 1333, 1340, 1342, 1343, 1344, 1348, 1350, 1354, 1355, 1358], "ct2a": [192, 193, 556, 558, 559, 561, 869, 1329], "ct_max": [556, 557, 906], "ctrl": 1198, "cubic": 0, "cubic_loc": 1344, "cubic_root": [0, 1196, 1331], "cur_farm_result": [28, 35], "cur_point_result": [28, 36], "current": [1, 18, 25, 28, 31, 34, 35, 36, 41, 42, 46, 47, 50, 54, 60, 64, 68, 75, 80, 84, 88, 93, 97, 100, 101, 102, 105, 163, 169, 172, 180, 192, 203, 222, 234, 248, 255, 263, 264, 274, 283, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1090, 1093, 1094, 1095, 1098, 1099, 1329, 1338, 1340, 1348, 1352, 1361], "curtail": 1340, "curv": [0, 349, 551, 695, 696, 698, 704, 715, 721, 725, 726, 731, 736, 737, 738, 745, 746, 1124, 1126, 1329, 1330, 1337, 1338, 1342, 1350], "cut": 1342, "cutin": [19, 346, 349, 695, 697, 699, 704, 709, 715, 721, 725, 731, 735, 737, 745, 1342], "cwd": 0, "cwi": 1198, "cylind": 1341, "d": [0, 1, 2, 18, 28, 40, 178, 195, 198, 210, 231, 233, 272, 327, 329, 336, 337, 346, 347, 387, 396, 397, 440, 441, 735, 877, 885, 886, 1032, 1033, 1198, 1258, 1259, 1264, 1281, 1331, 1333, 1340, 1341, 1342, 1346, 1348, 1349], "d100d5": 1340, "d126": [1352, 1354, 1361], "d_": 441, "dashboard": 1348, "dask": [0, 5, 203, 398, 399, 404, 409, 427, 440, 441, 1326, 1337, 1339, 1348], "dask_config": [398, 399, 404, 429], "dask_jobqueu": 1348, "dask_par": 1348, "daskbaseengin": [398, 399, 400, 401, 402, 403, 404, 409, 410, 429, 1326], "daskengin": [0, 404, 405, 1326, 1348], "daskrunn": [0, 1345, 1356], "data": [0, 1, 4, 5, 18, 20, 28, 32, 33, 40, 45, 47, 48, 50, 52, 54, 56, 57, 60, 62, 64, 66, 68, 70, 71, 88, 90, 93, 95, 97, 99, 100, 101, 102, 104, 107, 112, 114, 115, 125, 129, 163, 164, 165, 167, 168, 170, 171, 175, 176, 177, 178, 184, 188, 189, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 210, 213, 217, 220, 221, 222, 225, 231, 232, 233, 234, 236, 241, 248, 250, 251, 254, 255, 259, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 278, 279, 281, 284, 286, 288, 290, 291, 292, 294, 295, 296, 297, 300, 301, 305, 309, 311, 313, 314, 319, 321, 327, 328, 329, 330, 331, 335, 336, 340, 343, 344, 346, 349, 353, 354, 357, 359, 360, 361, 362, 363, 365, 366, 372, 374, 375, 377, 378, 379, 380, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 441, 442, 443, 445, 447, 449, 451, 452, 453, 454, 456, 458, 460, 461, 464, 467, 469, 471, 473, 475, 477, 478, 481, 485, 488, 490, 492, 494, 495, 497, 499, 501, 502, 503, 509, 511, 512, 513, 517, 520, 523, 525, 526, 527, 528, 529, 530, 532, 533, 537, 539, 542, 543, 544, 545, 546, 547, 548, 556, 559, 562, 563, 566, 569, 571, 572, 574, 575, 576, 580, 581, 582, 583, 585, 588, 589, 591, 594, 597, 598, 599, 600, 601, 602, 603, 605, 606, 608, 610, 612, 614, 616, 618, 619, 622, 629, 636, 639, 641, 642, 643, 644, 646, 649, 653, 655, 659, 660, 661, 664, 666, 667, 668, 669, 672, 673, 674, 675, 676, 679, 682, 684, 685, 687, 688, 690, 691, 693, 695, 696, 697, 698, 699, 700, 702, 703, 704, 709, 711, 715, 716, 718, 720, 721, 725, 726, 728, 730, 731, 735, 737, 738, 739, 741, 745, 746, 748, 750, 754, 756, 758, 760, 762, 764, 766, 768, 770, 771, 772, 774, 775, 777, 779, 781, 782, 784, 785, 787, 789, 790, 791, 792, 794, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 810, 811, 812, 813, 814, 815, 817, 819, 820, 822, 823, 824, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 852, 855, 856, 857, 858, 860, 863, 864, 865, 866, 868, 871, 872, 873, 874, 876, 877, 880, 881, 882, 883, 885, 886, 888, 889, 890, 892, 895, 896, 897, 899, 902, 903, 905, 908, 909, 911, 927, 928, 929, 930, 931, 934, 937, 938, 939, 942, 943, 945, 948, 950, 951, 953, 956, 957, 958, 961, 962, 963, 966, 967, 968, 971, 972, 973, 976, 977, 979, 982, 983, 985, 988, 989, 991, 994, 995, 997, 1000, 1001, 1003, 1006, 1007, 1009, 1012, 1013, 1015, 1018, 1019, 1021, 1024, 1025, 1032, 1033, 1041, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1085, 1086, 1087, 1090, 1093, 1094, 1095, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1121, 1122, 1124, 1127, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1142, 1146, 1147, 1148, 1165, 1170, 1171, 1172, 1174, 1186, 1191, 1194, 1252, 1254, 1317, 1319, 1320, 1322, 1323, 1324, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1336, 1337, 1338, 1340, 1341, 1342, 1344, 1345, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1358, 1361], "data_book": [395, 1135, 1136], "data_file_format": [1165, 1166], "data_format": [1102, 1103, 1104, 1105, 1106, 1107], "data_ndarrai": [40, 178, 179, 189, 241, 281, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750], "data_prio": 278, "data_rang": 533, "data_sourc": [432, 433, 440, 441, 443, 451, 452, 454, 456, 458, 461, 471, 509, 511, 513, 525, 526, 530, 600, 601, 641, 642, 659, 660, 674, 675, 695, 696, 699, 700, 715, 716, 770, 771, 1328, 1340, 1343, 1344, 1345, 1347, 1348, 1350, 1352, 1353, 1355, 1356, 1357, 1358, 1361], "data_source_cp": [697, 698], "data_source_ct": [697, 698, 725, 726, 737, 738, 745, 746], "data_source_p": [725, 726, 737, 738, 745, 746], "data_stash": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 188, 190, 192, 203, 222, 234, 248, 255, 263, 264, 274, 284, 286, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 447, 449, 451, 454, 456, 467, 469, 471, 473, 475, 477, 485, 488, 490, 492, 497, 499, 501, 509, 520, 523, 525, 528, 529, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 672, 673, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 822, 823, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "data_v": 770, "data_var": [40, 178, 179, 189, 241, 281, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750], "data_z": 770, "dataarrai": [221, 1348], "databook": [164, 394, 395, 434, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1325, 1331], "datacalcmodel": [0, 203, 204, 205, 220, 248, 295, 405, 408, 411, 416, 419, 426, 431, 1324], "datafram": [0, 432, 433, 452, 456, 458, 509, 511, 532, 533, 534, 600, 601, 641, 642, 659, 660, 674, 675, 695, 696, 697, 698, 699, 700, 715, 716, 725, 726, 737, 738, 745, 746, 771, 1048, 1050, 1052, 1053, 1054, 1055, 1058, 1059, 1073, 1077, 1078, 1081, 1086, 1102, 1103, 1104, 1105, 1106, 1107, 1131, 1170, 1171, 1174, 1328, 1329, 1338, 1349, 1350, 1352, 1354, 1356, 1358], "dataprofil": [0, 770, 771, 772, 773, 1329], "dataset": [0, 4, 5, 18, 20, 32, 33, 35, 36, 37, 38, 40, 43, 75, 80, 84, 101, 167, 168, 178, 184, 195, 198, 203, 206, 210, 213, 220, 221, 231, 233, 254, 272, 300, 327, 329, 398, 400, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 440, 441, 451, 454, 526, 537, 540, 542, 1032, 1033, 1041, 1042, 1074, 1075, 1076, 1078, 1082, 1083, 1085, 1094, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1127, 1128, 1129, 1254, 1264, 1324, 1328, 1330, 1331, 1342, 1347, 1348, 1353, 1354], "datasetdimens": [1342, 1347, 1348], "datatset": 21, "date": 1343, "datetim": [440, 441, 452], "datetime64": [1055, 1348, 1353], "datetimeindex": 1348, "dbase": 1135, "dbook": [1, 18, 28, 163, 164, 170, 434, 1343], "dct": 1146, "deactiv": 1339, "debug": [0, 1095, 1330, 1337], "decid": [1339, 1348], "deduc": 1246, "def": 1349, "default": [0, 4, 5, 18, 19, 40, 60, 61, 86, 106, 112, 114, 115, 118, 125, 129, 133, 164, 178, 179, 226, 320, 359, 391, 406, 434, 444, 452, 456, 463, 482, 509, 515, 538, 549, 551, 552, 585, 591, 592, 642, 691, 869, 906, 1037, 1038, 1039, 1040, 1043, 1055, 1081, 1084, 1089, 1122, 1147, 1148, 1165, 1253, 1264, 1282, 1315, 1320, 1323, 1324, 1326, 1333, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1350, 1351, 1352, 1354, 1356, 1357, 1358, 1361], "default_digit": [1282, 1333], "default_farm_output": [1, 2, 18, 28], "default_format_dict": [1165, 1167], "default_partial_wak": [549, 552], "default_reading_paramet": [1165, 1168], "default_writing_paramet": [1165, 1169], "defaultconv": [86, 87, 1320, 1342, 1344, 1355], "defaultengin": [0, 406, 407, 408, 1326, 1345, 1347, 1348, 1350, 1352, 1354, 1356, 1358], "defaultrunn": 0, "deficit": [0, 900, 906, 935, 940, 946, 973, 974, 979, 985, 986, 991, 997, 998, 1003, 1009, 1015, 1016, 1021, 1329, 1334, 1340, 1341, 1342, 1344, 1356, 1357, 1358], "defin": [0, 336, 787, 1329, 1333, 1340, 1341, 1344, 1350, 1352, 1355, 1358, 1360], "deflt": [112, 195, 231, 272, 327, 1143, 1147, 1148, 1149], "deg": [82, 83, 1343, 1344], "degre": [0, 438, 1118, 1196, 1261, 1262, 1274, 1276, 1277, 1305, 1310, 1311, 1331, 1333, 1341, 1342, 1349, 1358], "del_model_data": [1, 18, 28, 163, 171], "delai": [404, 1326], "delattr": 1198, "delta": [0, 73, 76, 77, 81, 82, 85, 86, 264, 265, 266, 267, 268, 270, 271, 288, 290, 291, 294, 340, 372, 374, 375, 377, 378, 379, 380, 477, 478, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 588, 591, 594, 597, 598, 612, 613, 646, 647, 684, 687, 781, 782, 799, 800, 814, 815, 832, 833, 834, 835, 837, 838, 839, 842, 844, 845, 847, 849, 852, 855, 856, 858, 860, 863, 864, 866, 868, 871, 872, 874, 876, 877, 880, 881, 883, 885, 888, 890, 892, 895, 897, 899, 905, 908, 934, 937, 939, 945, 951, 953, 954, 956, 957, 958, 959, 961, 962, 963, 964, 966, 967, 968, 969, 971, 972, 973, 976, 977, 979, 982, 983, 985, 988, 989, 991, 994, 995, 997, 1000, 1001, 1003, 1006, 1007, 1009, 1012, 1013, 1015, 1018, 1019, 1021, 1024, 1025, 1034, 1055, 1085, 1197, 1329, 1340, 1342, 1344, 1353, 1355], "delta_far": [911, 915], "delta_near": [911, 916], "delta_t": 1055, "delta_wd": [1197, 1331], "demand": 1348, "demonstr": [0, 1341, 1343, 1350, 1354, 1357, 1358], "denot": [735, 1340], "denpend": [835, 1334], "densiti": [0, 319, 501, 502, 696, 698, 699, 700, 715, 716, 725, 726, 736, 737, 745, 746, 1126, 1271, 1299, 1329, 1333, 1345, 1347], "depend": [0, 203, 313, 406, 473, 475, 576, 600, 601, 618, 629, 700, 716, 726, 737, 738, 745, 746, 832, 835, 842, 843, 845, 848, 877, 885, 889, 892, 896, 899, 902, 934, 938, 939, 942, 945, 948, 1267, 1293, 1326, 1328, 1329, 1333, 1334, 1337, 1338, 1340, 1344, 1345, 1347, 1348, 1351, 1355, 1358, 1362], "dependeci": 0, "deprecationwarn": 1198, "derat": [0, 646, 1124, 1288, 1330, 1333, 1350, 1352], "deriv": [0, 183, 194, 218, 244, 269, 293, 306, 316, 322, 342, 345, 352, 356, 364, 376, 381, 868, 876, 1071, 1195, 1248, 1249, 1331, 1340, 1341], "describ": [319, 1328, 1338, 1339, 1340, 1343, 1345, 1348, 1354, 1361], "descript": [1081, 1084, 1122, 1317, 1318, 1328, 1329, 1334, 1348], "design": [309, 312, 314, 616, 617, 619, 622, 625, 629, 632, 1338], "design_point": [309, 312, 616, 617, 622, 625, 629, 632], "desir": [1121, 1340, 1348, 1358], "detail": [0, 1339, 1348, 1360], "determin": [0, 825, 905, 906, 911, 926, 1055, 1340, 1344], "dev": 1339, "develop": [0, 1198, 1337, 1361], "deviat": [1041, 1051, 1340], "df": [1174, 1341, 1342], "diamet": [0, 336, 337, 346, 347, 382, 386, 432, 629, 630, 885, 1032, 1033, 1034, 1281, 1329, 1333, 1340, 1341], "dict": [1, 3, 4, 5, 8, 11, 17, 19, 20, 26, 27, 28, 29, 40, 48, 52, 54, 55, 56, 62, 66, 70, 76, 81, 82, 83, 85, 90, 93, 94, 95, 104, 112, 164, 166, 167, 168, 169, 178, 179, 180, 183, 185, 187, 188, 189, 190, 194, 195, 196, 198, 199, 204, 210, 217, 218, 221, 225, 232, 233, 234, 235, 236, 241, 244, 246, 250, 254, 259, 265, 266, 267, 268, 269, 270, 271, 273, 281, 284, 286, 290, 291, 293, 294, 296, 300, 305, 306, 311, 316, 321, 322, 328, 329, 330, 331, 342, 344, 345, 352, 354, 356, 359, 364, 366, 374, 375, 376, 377, 381, 391, 396, 397, 398, 399, 401, 403, 405, 407, 409, 410, 411, 415, 416, 418, 419, 423, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 449, 451, 452, 453, 455, 456, 458, 460, 464, 467, 469, 474, 476, 477, 478, 481, 485, 488, 491, 492, 493, 494, 495, 497, 499, 501, 502, 503, 509, 511, 512, 517, 520, 523, 526, 527, 528, 529, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 566, 574, 575, 580, 584, 588, 594, 598, 600, 601, 602, 603, 606, 609, 610, 614, 618, 623, 630, 637, 639, 641, 642, 643, 644, 649, 653, 654, 655, 660, 661, 667, 669, 672, 673, 675, 676, 682, 685, 688, 693, 696, 698, 699, 700, 702, 710, 711, 715, 716, 718, 720, 725, 726, 728, 730, 736, 737, 738, 739, 741, 745, 746, 748, 750, 755, 756, 759, 760, 763, 764, 767, 768, 770, 771, 772, 775, 779, 781, 782, 788, 795, 799, 800, 807, 808, 814, 815, 822, 823, 824, 825, 833, 834, 835, 836, 837, 838, 839, 844, 846, 847, 849, 855, 856, 858, 863, 864, 866, 871, 872, 874, 880, 881, 883, 886, 888, 890, 893, 895, 897, 900, 905, 906, 908, 932, 935, 937, 940, 945, 946, 951, 1030, 1033, 1034, 1036, 1039, 1046, 1047, 1048, 1057, 1058, 1059, 1062, 1063, 1064, 1065, 1066, 1067, 1071, 1073, 1075, 1076, 1078, 1079, 1080, 1082, 1085, 1086, 1088, 1089, 1090, 1091, 1095, 1096, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1117, 1118, 1120, 1121, 1123, 1125, 1126, 1128, 1130, 1131, 1132, 1135, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1152, 1153, 1154, 1156, 1157, 1159, 1161, 1165, 1170, 1171, 1182, 1198, 1200, 1210, 1218, 1225, 1232, 1240, 1249, 1252, 1253, 1255, 1256, 1264, 1322, 1324, 1328, 1331, 1344, 1345, 1352, 1353, 1355], "dictionari": [0, 168, 188, 190, 221, 284, 286, 447, 449, 467, 469, 485, 488, 497, 499, 520, 523, 528, 529, 538, 539, 540, 542, 543, 672, 673, 822, 823, 911, 932, 1073, 1143, 1145, 1149, 1150, 1171, 1328, 1331, 1340, 1348, 1349], "diego": 1258, "differ": [0, 583, 1329, 1334, 1340, 1341, 1343, 1344, 1345, 1348, 1349, 1352, 1361], "digit": [534, 1264, 1282, 1315, 1333, 1340], "dim": [195, 196, 197, 198, 205, 216, 231, 233, 252, 272, 298, 327, 329, 330, 331, 548, 1328], "dim_arrai": [40, 178, 179, 189, 241, 281, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750], "dim_map": [195, 199, 231, 272, 327], "dim_name_str": [40, 178, 179, 189, 241, 281, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750], "dim_tupl": [40, 178, 179, 189, 241, 281, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750], "dimens": [0, 4, 5, 20, 28, 32, 33, 38, 60, 143, 144, 145, 167, 168, 184, 195, 196, 197, 199, 206, 216, 231, 278, 313, 330, 331, 363, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 548, 618, 805, 1041, 1057, 1058, 1059, 1076, 1262, 1319, 1323, 1329, 1342, 1343, 1347, 1348, 1353, 1354, 1358], "dimension": [0, 674, 1329, 1330, 1351], "dimensionless": [0, 1009, 1344], "dir": 1198, "direct": [0, 82, 83, 319, 438, 501, 502, 622, 623, 629, 630, 794, 795, 1063, 1064, 1066, 1067, 1083, 1085, 1102, 1103, 1104, 1105, 1106, 1107, 1129, 1130, 1172, 1175, 1176, 1177, 1197, 1198, 1230, 1231, 1260, 1261, 1262, 1263, 1274, 1305, 1318, 1319, 1327, 1329, 1331, 1333, 1340, 1341, 1342, 1343, 1345, 1347, 1349, 1351, 1352, 1354, 1356, 1357, 1358], "directli": [0, 597, 1122, 1135, 1327, 1329, 1330, 1331, 1334, 1341, 1348, 1352], "directori": [0, 112, 116, 118, 119, 120, 121, 122, 128, 133, 160, 394, 538, 539, 1068, 1069, 1322, 1323, 1325, 1339, 1361], "disc": [0, 576, 591, 1340, 1351], "discontinu": [346, 349, 695, 697, 699, 704, 709, 715, 721, 725, 731, 735, 737, 745], "discov": 0, "discret": [0, 1340], "discuss": 1355, "disk": 0, "displai": [1348, 1356, 1357, 1361], "dist": [438, 1200, 1204, 1210, 1214, 1218, 1221, 1225, 1228, 1232, 1236, 1240, 1244, 1328, 1340], "dist_insid": [1200, 1210, 1218, 1225, 1232, 1240], "dist_outsid": [1200, 1210, 1218, 1225, 1232, 1240], "distanc": [0, 437, 438, 885, 886, 1199, 1200, 1204, 1206, 1208, 1210, 1214, 1216, 1218, 1221, 1223, 1225, 1228, 1230, 1232, 1236, 1238, 1240, 1244, 1251, 1258, 1259, 1331, 1341, 1358], "distribut": [0, 1337, 1343, 1344, 1348, 1356], "distslicedwakemodel": [832, 835, 836, 837, 838, 839, 840, 841, 905, 1334, 1340], "divid": [612, 613, 1102, 1103, 1104, 1105, 1106, 1107, 1348], "divmod": 1198, "dk": 892, "dname": [1081, 1084, 1122], "do": [0, 28, 278, 1321, 1329, 1338, 1340, 1344, 1347, 1348, 1349, 1353, 1355, 1361], "doc": [0, 1339], "docu": 0, "document": [0, 892, 1348, 1359], "doe": [709, 1329, 1340, 1344, 1347, 1348, 1350, 1353], "doi": [0, 559, 824, 868, 876, 877, 885, 899, 905, 911, 1337], "domain": 1345, "don": [0, 1351], "done": [1342, 1344, 1348, 1349, 1352, 1353, 1355], "dot": 1340, "doubl": [0, 112, 114, 125, 1323], "doubt": 1348, "down": [0, 1341, 1348, 1357], "download": 1347, "downstream": [1340, 1342, 1358], "downwind": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 29, 38, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 236, 264, 265, 266, 267, 278, 288, 290, 291, 311, 313, 340, 341, 359, 361, 362, 363, 372, 373, 374, 379, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 588, 591, 594, 597, 598, 618, 785, 790, 791, 797, 798, 803, 804, 805, 811, 813, 819, 820, 828, 829, 832, 833, 834, 835, 837, 838, 842, 843, 844, 845, 847, 848, 849, 852, 855, 860, 863, 868, 871, 876, 877, 880, 885, 888, 889, 892, 895, 896, 899, 902, 905, 908, 927, 934, 937, 938, 939, 942, 945, 948, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024, 1318, 1320, 1321, 1340, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1356, 1357, 1358, 1361], "downwind_index": [54, 56, 234, 236, 265, 266, 267, 278, 288, 290, 291, 311, 313, 340, 357, 359, 361, 362, 363, 372, 374, 378, 379, 562, 574, 575, 576, 580, 581, 583, 585, 588, 591, 594, 597, 598, 618, 781, 785, 787, 790, 791, 794, 797, 798, 799, 803, 804, 805, 807, 811, 813, 814, 819, 820, 824, 828, 829, 832, 833, 834, 835, 837, 838, 842, 843, 844, 845, 847, 848, 849, 852, 855, 860, 863, 868, 871, 876, 877, 880, 885, 888, 889, 892, 895, 896, 899, 902, 905, 908, 911, 927, 930, 934, 937, 938, 939, 942, 945, 948, 953, 956, 958, 961, 963, 966, 968, 971, 973, 976, 979, 982, 985, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024], "dpoint": [312, 617, 625, 632], "drama": 1353, "drop": 0, "dt": [1340, 1346], "dt_min": [477, 478, 781, 782, 799, 800, 814, 815, 1346, 1355], "dtp": [114, 115], "dtu": 892, "dtu10": 1343, "dtu10mw": [1340, 1341, 1342, 1343, 1344, 1346, 1348, 1349, 1353, 1355], "dtype": [125, 452, 1323, 1342, 1347, 1348], "dtype_doubl": [112, 114], "dtype_int": [112, 115], "due": [0, 45, 1329, 1340, 1342, 1352], "dummi": [45, 212], "durat": 1055, "dure": [0, 1, 18, 21, 28, 93, 102, 163, 166, 195, 196, 241, 281, 321, 440, 441, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750, 1090, 1320, 1321, 1330, 1340, 1344, 1346, 1348, 1356], "dwnd": [341, 373], "dx": [359, 945, 946, 1346], "dyn_wak": [0, 1340, 1346, 1348], "dyn_wakes_": [1340, 1346], "dyn_wakes_8km": 1344, "dynam": [0, 554, 781, 799, 814, 1246, 1329, 1331, 1336, 1337, 1338, 1340], "dynamicwak": [0, 781, 782, 783, 784, 785, 786, 1329, 1337, 1344, 1346, 1353, 1355], "d\u00f6renk\u00e4mper": 1335, "e": [0, 203, 387, 412, 440, 441, 532, 534, 600, 601, 646, 647, 684, 687, 939, 1073, 1156, 1157, 1171, 1182, 1198, 1253, 1256, 1327, 1329, 1337, 1339, 1340, 1341, 1342, 1345, 1346, 1347, 1348, 1351, 1353, 1355, 1358, 1361, 1362], "e1": [885, 886], "e2": [885, 886], "e3": [885, 886], "each": [0, 97, 203, 217, 231, 234, 259, 305, 327, 336, 337, 403, 407, 415, 418, 425, 430, 532, 534, 540, 542, 737, 745, 794, 833, 834, 837, 844, 849, 908, 930, 1043, 1062, 1065, 1066, 1067, 1126, 1156, 1157, 1254, 1321, 1329, 1338, 1340, 1341, 1342, 1343, 1348, 1350, 1351, 1354, 1355, 1356, 1357, 1358], "easiest": 1361, "easili": [1353, 1354], "east": 1352, "ech": [1063, 1064], "econom": 1337, "edgecolor": 1350, "educ": 1337, "eff": [1045, 1165, 1167, 1282, 1283, 1333, 1356, 1361], "effect": [0, 47, 54, 88, 288, 309, 311, 340, 341, 372, 373, 571, 585, 591, 616, 622, 629, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945, 1268, 1269, 1270, 1296, 1297, 1298, 1319, 1320, 1329, 1333, 1340, 1341, 1342, 1344, 1349, 1350, 1351, 1352, 1357, 1358], "effici": [0, 1041, 1044, 1045, 1283, 1333, 1337, 1340, 1347, 1348, 1350, 1356, 1357], "egg": [1339, 1361], "einstein": [0, 1041, 1060], "einsum": 1060, "either": [0, 210, 213, 313, 387, 440, 441, 451, 452, 456, 458, 509, 511, 600, 601, 618, 674, 675, 893, 1090, 1091, 1132, 1135, 1331, 1333, 1338, 1339, 1340, 1344, 1348, 1352, 1355], "element": [559, 622, 623, 629, 630, 1351, 1361], "ellipsi": 1198, "els": [618, 1149, 1150, 1348, 1349], "emodel": [54, 55], "emodels_cpar": [54, 55], "empir": [885, 1334], "empti": [264, 271, 340, 372, 377, 569, 571, 572, 832, 835, 842, 845, 852, 858, 860, 866, 868, 874, 876, 885, 890, 892, 897, 899, 905, 934, 939, 945, 951, 1338], "enabl": 0, "encodingwarn": 1198, "end": [213, 440, 441, 1060, 1137, 1156, 1163, 1165, 1170, 1171], "energi": [860, 868, 876, 877, 1337, 1340, 1347, 1361], "enforc": 1361, "eng": [1339, 1348], "eng0": 1339, "engin": [0, 112, 117, 132, 164, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 391, 392, 393, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 538, 1317, 1323, 1324, 1337, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "engine_par": [163, 164, 538], "engine_typ": [206, 218, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429], "enhanc": [0, 1143, 1331], "enjoi": 0, "ensur": [278, 1341, 1342, 1348], "ensure_vari": [47, 50, 54, 60, 64, 68, 88, 93, 102, 222, 234, 248, 251, 255, 263, 295, 297, 301, 309, 319, 343, 346, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745], "enter": [206, 211, 278, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 432], "enti": [540, 542], "entri": [0, 1, 18, 26, 28, 40, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 178, 179, 189, 192, 195, 197, 203, 222, 231, 234, 241, 248, 255, 263, 264, 272, 274, 278, 281, 288, 295, 301, 309, 319, 321, 327, 336, 340, 343, 346, 353, 357, 365, 372, 378, 440, 445, 451, 453, 454, 456, 464, 471, 473, 475, 477, 490, 492, 495, 501, 509, 517, 525, 527, 530, 540, 542, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 603, 605, 608, 612, 616, 622, 629, 636, 641, 644, 646, 653, 659, 664, 669, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 720, 725, 730, 735, 737, 741, 745, 750, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 929, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1073, 1171, 1328, 1343, 1352], "entry_point": [18, 26, 28], "enumer": [1198, 1341, 1342], "environ": [0, 28, 1321], "environmenterror": 1198, "eof": 1198, "eoferror": 1198, "eq": 0, "eqn": 885, "equal": [1265, 1279, 1283, 1333, 1338, 1340, 1351], "equat": [0, 1009], "equival": [0, 1009, 1340, 1344, 1351, 1356, 1358], "error": [112, 175, 176, 195, 231, 272, 278, 288, 289, 327, 391, 394, 440, 576, 579, 581, 583, 585, 591, 593, 597, 892, 1135, 1141, 1143, 1147, 1148, 1149, 1155, 1156, 1159, 1324, 1348, 1356], "especi": 1348, "estim": 0, "et": [860, 868, 876, 877, 1340, 1341], "etc": [0, 1034, 1340, 1346, 1361], "euflow": [0, 1361], "europ": 1337, "eval": 1198, "eval_conv_block": [1, 18, 28, 163, 172], "eval_rpoint_result": [309, 313, 616, 618, 622, 629], "evalu": [0, 1, 18, 28, 54, 55, 73, 76, 77, 81, 82, 85, 86, 163, 172, 309, 313, 354, 357, 360, 362, 363, 374, 576, 577, 616, 618, 622, 629, 756, 760, 764, 768, 772, 775, 779, 781, 784, 785, 787, 789, 791, 794, 796, 798, 799, 802, 804, 805, 807, 810, 813, 814, 817, 820, 824, 827, 829, 832, 838, 855, 863, 871, 880, 883, 1041, 1123, 1184, 1185, 1187, 1188, 1189, 1192, 1198, 1257, 1320, 1321, 1329, 1330, 1335, 1337, 1338, 1340, 1344, 1346, 1348, 1349, 1352, 1353, 1354, 1355, 1356, 1360], "even": [1348, 1358], "everi": [28, 29, 629, 630, 1338, 1339, 1353], "everrul": 1361, "everyth": [0, 1348, 1359], "evolv": [477, 1328], "exact": [1340, 1349], "exactli": [40, 178, 179, 189, 241, 281, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750, 1340], "exampl": [0, 456, 1126, 1156, 1157, 1161, 1198, 1329, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361], "example_var": 1157, "exce": 1350, "exceed": [440, 532, 534], "except": [231, 1198], "exceptiongroup": 1198, "exclud": 0, "exec": 1198, "exec_python": [1198, 1331], "execut": [5, 48, 52, 56, 62, 66, 70, 90, 95, 104, 204, 223, 225, 236, 250, 259, 296, 305, 344, 360, 442, 460, 481, 494, 503, 512, 566, 602, 606, 610, 614, 639, 643, 649, 655, 661, 667, 676, 682, 685, 688, 693, 702, 711, 718, 728, 739, 748, 784, 789, 796, 802, 810, 817, 827, 1198, 1329, 1331, 1339, 1348], "exercis": 1349, "exist": [57, 71, 107, 189, 279, 660, 668, 703, 792, 830, 840, 850, 857, 865, 873, 882, 903, 909, 911, 930, 931, 943, 950, 1141, 1340, 1346, 1348, 1354, 1358], "exit": [212, 401, 1198], "exit_arg": [398, 401, 404, 409, 427, 429], "exit_kwarg": [398, 401, 404, 409, 427, 429], "expans": 1340, "expect": [313, 396, 397, 618, 660, 674, 1338, 1340, 1345, 1347, 1348], "experiment": [824, 905, 911], "explain": [0, 1348], "explicit": [0, 1246, 1345], "explicitli": [0, 1198, 1340, 1348], "explor": [1347, 1348], "expon": [0, 547, 700, 716, 726, 738, 746, 774, 1187, 1300, 1329, 1333, 1358], "export": [0, 1165], "express": 1060, "extend": [222, 559, 1320, 1321, 1324, 1329, 1335, 1337], "extendedst": [0, 222, 223, 224, 225, 226, 227, 228, 229, 230, 1324], "extern": 1348, "extra": [54, 55, 387, 440, 441, 537, 542, 1102, 1103, 1104, 1105, 1106, 1107, 1317], "extra_sig": [537, 542], "extra_spac": [382, 387], "extract": [206, 213, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 548, 1253], "f": [198, 233, 278, 329, 636, 637, 1068, 1069, 1196, 1341, 1342, 1344, 1347, 1349, 1350, 1353, 1355, 1356, 1357, 1358], "fact": [1342, 1358], "factor": [0, 93, 94, 137, 559, 646, 647, 674, 675, 885, 886, 899, 900, 939, 940, 945, 946, 1185, 1189, 1251, 1287, 1323, 1329, 1332, 1333, 1340, 1358], "factor_p": [646, 647], "factori": [0, 1, 18, 28, 102, 163, 183, 192, 194, 206, 218, 222, 234, 244, 264, 269, 288, 293, 301, 306, 309, 316, 319, 322, 340, 342, 343, 345, 346, 352, 353, 356, 357, 364, 372, 376, 378, 381, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 569, 571, 572, 576, 581, 583, 585, 591, 597, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1032, 1041, 1061, 1068, 1071, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1149, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1181, 1182, 1249, 1331, 1340, 1346], "fail": [0, 1246, 1340, 1342, 1355], "fall": [0, 1264, 1344, 1355], "fals": [0, 1, 4, 5, 18, 20, 28, 29, 47, 50, 54, 57, 60, 64, 68, 71, 88, 93, 102, 107, 163, 174, 176, 189, 192, 195, 202, 203, 222, 231, 248, 249, 255, 263, 264, 272, 274, 278, 279, 288, 295, 301, 309, 311, 313, 319, 327, 340, 343, 346, 353, 357, 365, 372, 378, 405, 411, 416, 419, 426, 431, 432, 440, 441, 451, 454, 456, 471, 492, 542, 556, 559, 563, 569, 571, 572, 576, 581, 583, 585, 597, 600, 605, 608, 612, 613, 616, 618, 636, 641, 664, 665, 668, 679, 684, 687, 690, 695, 697, 699, 703, 709, 710, 715, 725, 735, 737, 745, 754, 755, 758, 759, 762, 763, 766, 767, 770, 774, 777, 787, 792, 794, 807, 824, 830, 832, 835, 840, 842, 845, 850, 852, 857, 860, 861, 865, 868, 869, 873, 876, 877, 878, 882, 885, 886, 892, 899, 903, 905, 909, 911, 931, 934, 939, 943, 945, 950, 953, 958, 963, 968, 973, 974, 979, 985, 986, 991, 997, 998, 1003, 1009, 1015, 1016, 1021, 1032, 1033, 1034, 1041, 1043, 1049, 1055, 1062, 1063, 1064, 1065, 1066, 1067, 1074, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1085, 1086, 1102, 1103, 1104, 1105, 1106, 1107, 1122, 1127, 1130, 1131, 1132, 1149, 1150, 1156, 1159, 1198, 1199, 1200, 1204, 1206, 1208, 1210, 1214, 1216, 1221, 1223, 1228, 1230, 1236, 1238, 1240, 1244, 1253, 1256, 1331, 1342, 1345, 1346, 1348, 1351], "far": [0, 825, 905, 906, 911, 926], "farm": [0, 1, 3, 4, 5, 6, 18, 20, 21, 28, 29, 32, 33, 35, 37, 38, 47, 48, 52, 56, 62, 64, 66, 70, 75, 80, 84, 88, 90, 95, 101, 104, 126, 163, 164, 167, 173, 191, 213, 220, 225, 231, 234, 236, 237, 244, 248, 250, 251, 255, 259, 263, 265, 266, 267, 268, 270, 271, 278, 290, 291, 292, 294, 296, 297, 305, 309, 311, 313, 314, 336, 337, 344, 359, 360, 361, 362, 363, 374, 375, 377, 379, 380, 382, 383, 387, 388, 390, 405, 408, 411, 416, 419, 426, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 460, 481, 494, 503, 512, 537, 538, 540, 542, 544, 545, 547, 549, 562, 563, 566, 574, 575, 580, 582, 588, 589, 594, 598, 599, 602, 606, 610, 614, 618, 619, 636, 637, 639, 643, 649, 655, 661, 664, 667, 676, 682, 685, 688, 691, 693, 702, 711, 718, 728, 739, 748, 784, 785, 787, 789, 790, 791, 796, 797, 798, 802, 803, 804, 805, 810, 811, 812, 813, 817, 819, 820, 824, 827, 828, 829, 833, 834, 837, 838, 839, 843, 844, 847, 848, 849, 852, 855, 856, 858, 860, 863, 864, 866, 868, 871, 872, 874, 876, 880, 881, 883, 886, 888, 889, 890, 895, 896, 897, 902, 905, 908, 927, 937, 938, 942, 948, 951, 956, 957, 961, 962, 966, 967, 971, 972, 976, 977, 982, 983, 988, 989, 994, 995, 1000, 1001, 1006, 1007, 1012, 1013, 1018, 1019, 1024, 1025, 1032, 1033, 1034, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1074, 1075, 1077, 1078, 1081, 1082, 1094, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1127, 1128, 1318, 1319, 1320, 1323, 1324, 1327, 1328, 1329, 1330, 1335, 1336, 1337, 1339, 1340, 1341, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1360], "farm_calc": [1041, 1348], "farm_control": [1, 3, 6, 18, 28, 549, 562, 1346], "farm_data": [206, 213, 220, 398, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431], "farm_df": [1355, 1358], "farm_hubh_data": 1346, "farm_kti": 1346, "farm_kti_amb": 1346, "farm_layout": [432, 433, 434, 435, 436, 437, 438, 439, 1338, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1361], "farm_model": [549, 563, 564, 565, 566, 567, 568, 1346], "farm_pmask": 1346, "farm_result": [1, 4, 5, 18, 20, 28, 32, 33, 37, 167, 537, 540, 542, 1032, 1033, 1041, 1042, 1061, 1074, 1075, 1077, 1078, 1081, 1082, 1083, 1100, 1101, 1108, 1109, 1116, 1117, 1119, 1120, 1127, 1128, 1341, 1342, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "farm_results_downwind": [18, 21, 28, 38], "farm_thrust2ct": 1346, "farm_yaw2yawm": 1346, "farm_yawm2yaw": 1346, "farm_yield": 1048, "farmcontrol": [1, 6, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 549, 562, 1324, 1329], "farmdatamodel": [47, 50, 60, 64, 88, 93, 234, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 263, 309, 343, 1319, 1320, 1324], "farmdatamodellist": [234, 255, 256, 257, 258, 259, 260, 261, 262, 1324], "farmlayoutoutput": [0, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1330, 1342, 1343, 1344, 1347, 1348, 1352, 1353, 1355, 1356, 1357, 1361], "farmmodel": [263, 549, 563, 1324, 1329], "farmoptproblem": 0, "farmord": [787, 788, 789, 790, 791, 792, 793, 799, 1329, 1346], "farmresultsev": [0, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1330, 1337, 1344, 1347, 1350, 1355, 1356, 1357, 1361], "farmvarsproblem": 0, "farmwakescalcul": [47, 48, 49, 88, 89, 90, 91, 92, 1319, 1320, 1348], "farmwakescalculation_instance1": 1348, "fast": [1196, 1337, 1340, 1348, 1349], "faster": 1348, "fc": [278, 363, 805, 1344, 1350, 1358], "fdata": [0, 47, 48, 50, 52, 54, 56, 60, 62, 64, 66, 68, 70, 88, 90, 93, 95, 102, 104, 210, 213, 222, 225, 231, 232, 233, 234, 236, 248, 250, 251, 255, 259, 263, 264, 265, 266, 267, 268, 270, 271, 278, 288, 290, 291, 292, 294, 295, 296, 297, 301, 305, 309, 311, 313, 314, 319, 340, 343, 344, 346, 357, 359, 360, 361, 362, 363, 372, 374, 375, 377, 378, 379, 380, 440, 442, 451, 454, 456, 460, 471, 473, 475, 477, 481, 490, 492, 494, 501, 503, 509, 512, 525, 530, 562, 563, 566, 569, 571, 572, 574, 575, 576, 580, 581, 582, 583, 585, 588, 589, 591, 594, 597, 598, 599, 600, 602, 605, 606, 608, 610, 612, 614, 616, 618, 619, 622, 629, 636, 639, 641, 643, 646, 649, 653, 655, 659, 661, 664, 667, 674, 676, 679, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 702, 709, 711, 715, 718, 725, 728, 735, 737, 739, 745, 748, 781, 784, 785, 787, 789, 790, 791, 794, 796, 797, 798, 799, 802, 803, 804, 805, 807, 810, 811, 812, 813, 814, 817, 819, 820, 824, 827, 828, 829, 832, 833, 834, 835, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 852, 855, 856, 858, 860, 863, 864, 866, 868, 871, 872, 874, 876, 877, 880, 881, 883, 885, 888, 889, 890, 892, 895, 896, 897, 899, 902, 905, 908, 911, 927, 934, 937, 938, 939, 942, 945, 948, 951, 953, 956, 957, 958, 961, 962, 963, 966, 967, 968, 971, 972, 973, 976, 977, 979, 982, 983, 985, 988, 989, 991, 994, 995, 997, 1000, 1001, 1003, 1006, 1007, 1009, 1012, 1013, 1015, 1018, 1019, 1021, 1024, 1025, 1324], "fdict": [0, 541, 549, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1328, 1331], "featur": [0, 1352], "feder": 1337, "feel": 1343, "fernando": [824, 899, 905, 911], "field": [0, 548, 1009, 1041, 1060, 1102, 1103, 1104, 1105, 1106, 1107, 1328, 1338, 1340, 1342, 1344, 1345, 1349, 1354, 1357, 1358, 1360], "fielddatanc": [0, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 1328, 1337, 1338, 1345], "fig": [1027, 1028, 1029, 1031, 1034, 1041, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1085, 1087, 1089, 1130, 1132, 1341, 1342, 1343, 1344, 1345, 1347, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "figsiz": [1032, 1034, 1041, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1085, 1087, 1089, 1116, 1118, 1126, 1130, 1132, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1354, 1355, 1356, 1357, 1361], "figur": [0, 1027, 1028, 1032, 1034, 1056, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1081, 1085, 1089, 1092, 1097, 1122, 1127, 1130, 1132, 1199, 1200, 1206, 1208, 1210, 1216, 1218, 1223, 1225, 1230, 1232, 1238, 1240, 1341, 1342, 1352, 1354, 1356, 1361], "file": [0, 112, 195, 206, 217, 231, 272, 327, 394, 396, 397, 398, 403, 404, 406, 407, 409, 412, 413, 414, 415, 417, 418, 420, 421, 422, 425, 427, 428, 429, 430, 432, 433, 434, 435, 440, 441, 451, 452, 456, 458, 509, 511, 525, 526, 534, 535, 536, 551, 600, 601, 642, 659, 660, 674, 675, 695, 696, 697, 698, 699, 700, 715, 716, 725, 726, 735, 736, 737, 738, 745, 746, 892, 1032, 1037, 1038, 1039, 1040, 1041, 1061, 1068, 1069, 1070, 1073, 1074, 1076, 1077, 1079, 1080, 1081, 1086, 1087, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1116, 1119, 1121, 1122, 1124, 1127, 1131, 1133, 1135, 1137, 1138, 1139, 1140, 1141, 1143, 1146, 1149, 1165, 1170, 1171, 1172, 1173, 1247, 1252, 1253, 1254, 1255, 1264, 1325, 1327, 1328, 1329, 1330, 1331, 1337, 1338, 1339, 1340, 1344, 1345, 1347, 1352, 1354, 1355, 1356, 1357, 1360], "file_man": 1138, "file_nam": [394, 396, 1032, 1037, 1038, 1039, 1041, 1061, 1068, 1073, 1074, 1077, 1079, 1080, 1081, 1086, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1131, 1133, 1135, 1138, 1141, 1325, 1327], "file_name_a": [397, 1325, 1327], "file_name_b": [397, 1325, 1327], "file_path": [394, 434, 435, 534, 1032, 1040, 1135, 1139, 1140, 1165, 1170, 1171, 1328, 1361], "file_sfx": [394, 1135, 1137], "fileexistserror": 1198, "filenotfounderror": 1198, "fill": [264, 270, 271, 288, 294, 377, 394, 440, 548, 569, 571, 572, 576, 581, 583, 585, 591, 597, 858, 866, 874, 890, 897, 951, 1200, 1210, 1218, 1225, 1232, 1240, 1325], "fill_mod": [1200, 1210, 1216, 1218, 1223, 1225, 1230, 1232, 1240], "fill_valu": 440, "filter": 1198, "final": [0, 1, 4, 5, 18, 20, 22, 28, 47, 50, 54, 60, 64, 68, 88, 93, 97, 99, 102, 163, 174, 192, 203, 206, 210, 212, 222, 234, 238, 246, 248, 255, 263, 264, 267, 268, 274, 277, 288, 291, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 375, 378, 380, 398, 401, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 451, 454, 456, 462, 471, 473, 475, 477, 490, 492, 501, 509, 514, 525, 530, 549, 553, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 588, 591, 597, 598, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 719, 725, 729, 735, 737, 740, 745, 749, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 818, 824, 832, 835, 839, 842, 845, 852, 856, 860, 864, 868, 872, 876, 877, 881, 885, 892, 899, 905, 911, 934, 939, 945, 949, 953, 957, 958, 962, 963, 967, 968, 972, 973, 974, 977, 979, 980, 983, 985, 986, 989, 991, 992, 995, 997, 998, 1001, 1003, 1004, 1007, 1009, 1010, 1013, 1015, 1016, 1019, 1021, 1022, 1025, 1090, 1095, 1319, 1341, 1342, 1343, 1344, 1348, 1349, 1352, 1355, 1357], "final_iter": [18, 22, 28], "final_par": [234, 246, 562], "final_wake_delta": [267, 291, 380, 588, 598, 957, 962, 967, 972, 977, 983, 989, 995, 1001, 1007, 1013, 1019, 1025], "finalis": 1341, "finalize_farm_wak": [264, 267, 569, 571, 572], "finalize_point_wak": [264, 268, 569, 571, 572], "finalize_wak": [288, 291, 576, 581, 583, 585, 588, 591, 597, 598], "finalize_wake_delta": [340, 372, 375, 832, 835, 839, 842, 845, 852, 856, 860, 864, 868, 872, 876, 877, 881, 885, 892, 899, 905, 934, 939, 945], "find": [0, 1, 18, 28, 163, 175, 1317, 1325], "find_chunk_in_stor": [1, 18, 28, 163, 175], "find_turbine_typ": [234, 239, 562], "finish": 1342, "first": [0, 26, 75, 80, 84, 195, 196, 202, 222, 231, 272, 278, 327, 334, 397, 533, 735, 737, 745, 794, 1329, 1338, 1339, 1340, 1341, 1342, 1344, 1347, 1348, 1349, 1356, 1357, 1358], "fit": [559, 1329], "fix": [0, 327, 456, 458, 509, 511, 1156, 1157, 1342], "fixed_var": [440, 441, 456, 458, 509, 511, 530, 1340, 1343, 1344, 1345, 1348, 1350, 1352, 1355, 1356, 1357, 1358, 1361], "flag": [0, 1, 4, 5, 18, 20, 22, 28, 29, 42, 45, 47, 50, 54, 60, 64, 68, 75, 80, 84, 88, 93, 102, 163, 165, 175, 176, 192, 198, 203, 206, 210, 211, 215, 222, 234, 236, 242, 243, 248, 249, 255, 263, 264, 274, 278, 280, 283, 288, 289, 295, 301, 309, 319, 340, 341, 343, 346, 349, 350, 351, 353, 357, 359, 365, 368, 369, 371, 372, 373, 378, 391, 392, 398, 399, 404, 405, 406, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 435, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 542, 548, 556, 559, 562, 563, 569, 571, 572, 576, 579, 581, 583, 585, 591, 593, 597, 600, 605, 608, 612, 616, 622, 623, 629, 630, 636, 641, 646, 653, 659, 664, 665, 674, 679, 684, 687, 690, 695, 697, 699, 704, 705, 706, 709, 710, 712, 713, 715, 721, 722, 723, 725, 731, 732, 733, 735, 737, 742, 743, 745, 751, 752, 754, 755, 758, 759, 762, 763, 766, 767, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 886, 892, 899, 905, 911, 934, 939, 945, 946, 953, 958, 963, 968, 973, 974, 979, 985, 986, 991, 997, 998, 1003, 1009, 1015, 1016, 1021, 1032, 1033, 1034, 1043, 1049, 1050, 1055, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1079, 1082, 1085, 1086, 1095, 1096, 1102, 1103, 1104, 1105, 1106, 1107, 1130, 1131, 1132, 1141, 1147, 1148, 1149, 1152, 1155, 1159, 1204, 1214, 1221, 1228, 1236, 1244, 1324, 1337, 1339], "flake8": 0, "flapfoam": 1337, "flappi": [0, 1337], "float": [82, 83, 193, 336, 337, 346, 347, 357, 358, 359, 367, 387, 437, 438, 440, 441, 452, 456, 458, 477, 478, 491, 501, 502, 556, 557, 558, 559, 560, 561, 572, 573, 608, 609, 646, 647, 691, 696, 698, 699, 700, 704, 715, 716, 721, 725, 726, 731, 736, 738, 745, 746, 770, 771, 777, 778, 781, 782, 799, 800, 807, 808, 814, 815, 824, 825, 869, 885, 886, 893, 899, 900, 905, 906, 911, 926, 939, 940, 945, 946, 963, 964, 973, 974, 979, 980, 985, 986, 991, 992, 997, 998, 1003, 1004, 1009, 1010, 1015, 1016, 1021, 1022, 1032, 1033, 1034, 1043, 1045, 1048, 1049, 1055, 1062, 1063, 1064, 1065, 1066, 1067, 1083, 1085, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1118, 1126, 1129, 1130, 1132, 1178, 1179, 1180, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1198, 1216, 1217, 1251, 1257, 1258, 1261, 1262, 1343], "float32": 1347, "float3250": 1347, "float64": [1342, 1348, 1353, 1354], "float640": [1342, 1348], "float641": [1342, 1348], "float6411": 1348, "float64119": [1342, 1348], "float64141": 1348, "float64178": [1342, 1348], "float64270": 1342, "float643": 1342, "float644": 1348, "float647": 1342, "float648": [1342, 1348], "float649": 1348, "floatingpointerror": 1198, "flow": [0, 852, 877, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1090, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1132, 1330, 1336, 1337, 1338, 1340, 1341, 1342, 1344, 1347, 1353, 1354, 1355, 1360], "flow_plots_2d": [0, 1132], "flowplots2d": [0, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1330, 1341, 1342, 1344, 1345, 1347, 1348, 1354, 1355, 1357, 1358], "fly": [0, 1, 18, 28, 163, 172, 267, 268, 291, 375, 440, 441, 548, 588, 598, 807, 812, 839, 856, 864, 872, 881, 883, 1337], "fmu": [28, 1321], "fname": [1032, 1041, 1061, 1068, 1069, 1070, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1134, 1252, 1253, 1254, 1331, 1361], "fnc": 852, "folder": [0, 1336], "follow": [0, 438, 456, 807, 892, 1329, 1336, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1355, 1356, 1357, 1358, 1360, 1361], "followind": 735, "folow": 1340, "fontsiz": [1032, 1034, 1039], "forc": [1, 5, 18, 28, 47, 50, 54, 57, 60, 64, 68, 71, 88, 93, 102, 107, 163, 189, 192, 203, 222, 248, 255, 263, 264, 274, 279, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 451, 454, 456, 471, 492, 538, 540, 556, 559, 563, 569, 571, 572, 576, 581, 583, 585, 597, 600, 605, 608, 612, 616, 636, 641, 664, 668, 679, 684, 687, 690, 695, 697, 699, 703, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 787, 792, 794, 807, 824, 830, 832, 835, 840, 842, 845, 850, 852, 857, 860, 865, 868, 873, 876, 877, 882, 885, 892, 899, 903, 905, 909, 911, 931, 934, 939, 943, 945, 950, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1329, 1339], "forg": [0, 1339, 1359], "forget": 1348, "forgotten": 0, "fork": [0, 1337, 1339, 1361], "form": 1356, "format": [0, 396, 397, 440, 441, 452, 456, 1036, 1073, 1102, 1103, 1104, 1105, 1106, 1107, 1165, 1171, 1198, 1328, 1337, 1343, 1345, 1361], "format_col2var": [1032, 1041, 1061, 1068, 1073, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133], "format_dict": [1032, 1041, 1061, 1068, 1073, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1165, 1171], "format_times_func": 452, "former": 0, "formul": [312, 617, 625, 632, 1352], "forst": [860, 868, 876, 1334, 1341], "forward": [432, 434, 435, 436, 437, 438, 439, 566, 1034, 1073, 1102, 1103, 1104, 1105, 1106, 1107, 1170, 1171, 1348], "found": [0, 112, 175, 176, 195, 199, 231, 234, 272, 327, 391, 554, 825, 1141, 1143, 1147, 1148, 1149, 1155, 1264, 1328, 1335, 1338, 1339, 1340, 1346, 1354, 1356, 1359], "foundat": 1198, "four": [0, 1341, 1345], "fox": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1319, 1320, 1321, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1361, 1362], "foxes_opt": [0, 1359], "foxes_windio": [0, 535, 1328, 1337], "foxes_yaml": [0, 536, 1328, 1337], "fpath": [1070, 1172, 1173, 1264, 1347], "fr": [1345, 1347, 1350, 1354, 1356], "frame": [0, 1, 3, 16, 18, 28, 288, 312, 357, 359, 361, 362, 364, 374, 456, 549, 600, 601, 617, 625, 632, 781, 785, 787, 788, 790, 791, 794, 797, 798, 799, 803, 804, 807, 811, 813, 814, 819, 820, 824, 825, 828, 829, 838, 855, 863, 871, 880, 911, 1252, 1324, 1329, 1334, 1337, 1344, 1345, 1348, 1353, 1355, 1358], "framework": [1337, 1361], "frandsen": [0, 892, 893, 939, 940, 1340], "fraunhof": [0, 1337], "fraunhoferiw": [0, 1337, 1339, 1362], "frazer": 852, "fre": [21, 97, 101, 1032, 1090, 1094, 1095, 1099, 1349], "frederik": 559, "freq": [533, 1348], "freq_delta": 1085, "frequenc": [533, 1085, 1254], "fresh": 0, "freshli": [1342, 1346], "friction": [0, 1184, 1186, 1188, 1191, 1192, 1194, 1304, 1332, 1333], "from": [0, 1, 18, 21, 28, 40, 47, 50, 54, 60, 64, 68, 88, 93, 102, 120, 121, 163, 177, 178, 190, 192, 193, 195, 198, 199, 203, 210, 222, 223, 231, 233, 234, 248, 255, 263, 264, 265, 266, 272, 274, 278, 286, 288, 290, 295, 301, 309, 311, 314, 319, 327, 329, 330, 331, 340, 343, 346, 353, 357, 359, 363, 365, 372, 374, 378, 394, 395, 396, 397, 401, 434, 435, 438, 440, 441, 449, 451, 454, 456, 458, 469, 471, 473, 475, 477, 478, 488, 490, 492, 499, 501, 509, 511, 523, 525, 529, 530, 532, 534, 535, 536, 538, 540, 542, 545, 547, 556, 558, 559, 561, 562, 563, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 591, 592, 594, 597, 600, 601, 605, 608, 612, 616, 619, 622, 629, 636, 641, 642, 646, 653, 659, 660, 664, 673, 674, 679, 684, 687, 690, 695, 697, 699, 700, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 782, 787, 788, 794, 799, 800, 805, 807, 814, 815, 823, 824, 825, 832, 835, 838, 842, 845, 852, 855, 860, 863, 868, 871, 876, 877, 880, 885, 886, 892, 899, 905, 911, 934, 939, 940, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1027, 1032, 1033, 1062, 1063, 1064, 1073, 1076, 1102, 1103, 1104, 1105, 1106, 1107, 1121, 1122, 1123, 1126, 1135, 1136, 1137, 1138, 1156, 1157, 1161, 1195, 1198, 1246, 1247, 1253, 1260, 1261, 1262, 1263, 1269, 1270, 1297, 1298, 1314, 1316, 1325, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1337, 1338, 1339, 1340, 1341, 1342, 1344, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1354, 1355, 1356, 1358, 1361], "from_dataset": [195, 198, 231, 233, 272, 327, 329], "from_point": [327, 330], "from_r": [1032, 1033], "from_result": [1032, 1033], "from_tpoint": [327, 331], "from_yaml": [112, 195, 231, 272, 327, 1143, 1146, 1149], "fromlookupt": [0, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 1329], "front": [1341, 1342], "frontal": 1358, "frozenset": 1198, "fulfil": 1352, "full": [0, 868, 876, 1198, 1338, 1343, 1347, 1348, 1349], "fulli": [1046, 1047, 1057], "fun": 1355, "func": [206, 217, 398, 403, 404, 406, 407, 409, 412, 413, 414, 415, 417, 418, 420, 421, 422, 425, 427, 428, 429, 430, 636, 637], "func_nam": [1, 12, 18, 28, 163, 186], "function": [0, 1, 12, 18, 28, 48, 52, 56, 62, 66, 70, 90, 95, 104, 163, 185, 186, 188, 190, 198, 203, 204, 206, 212, 217, 220, 225, 233, 236, 250, 254, 255, 259, 284, 286, 296, 300, 301, 305, 313, 324, 329, 344, 360, 398, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 442, 447, 449, 452, 456, 458, 460, 466, 467, 469, 481, 485, 488, 494, 497, 499, 503, 509, 511, 512, 519, 520, 523, 528, 529, 537, 540, 541, 542, 566, 602, 606, 610, 614, 618, 636, 637, 639, 643, 649, 655, 661, 667, 672, 673, 676, 682, 685, 688, 690, 693, 702, 711, 718, 728, 739, 748, 784, 789, 796, 802, 810, 817, 822, 823, 827, 1068, 1069, 1073, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1132, 1156, 1157, 1182, 1188, 1190, 1192, 1193, 1196, 1198, 1257, 1258, 1317, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1338, 1340, 1341, 1343, 1346, 1347, 1348, 1349, 1353, 1359, 1361], "fund": 1337, "further": [735, 1356], "furthermor": [1337, 1348, 1350], "futur": [0, 412, 1337, 1348], "futurewarn": 1198, "fv": [1073, 1126, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "g": [0, 387, 412, 440, 441, 646, 647, 852, 939, 1073, 1156, 1157, 1171, 1182, 1253, 1256, 1327, 1329, 1337, 1339, 1340, 1341, 1342, 1345, 1346, 1347, 1348, 1354, 1358, 1361], "g_pt": [1102, 1103, 1104, 1105, 1106, 1107], "gamma": [869, 911, 927, 1346, 1358], "gather": [234, 237, 562], "gaussian": [842, 939, 1334, 1340, 1349], "gaussianwakemodel": [842, 843, 844, 899, 939, 945, 1334, 1340], "gdata": [1062, 1063, 1064], "gen": [1027, 1029, 1031], "gen_imag": [1090, 1092, 1095, 1097, 1353], "gen_states_fig_xi": [1061, 1062, 1341, 1342, 1344, 1345, 1348, 1354, 1355, 1358], "gen_states_fig_xz": [0, 1061, 1063, 1342, 1347], "gen_states_fig_yz": [1061, 1064, 1358], "gen_stdata": [1041, 1056, 1344, 1355], "gener": [0, 787, 807, 812, 945, 1027, 1029, 1031, 1041, 1056, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1081, 1083, 1122, 1127, 1129, 1330, 1334, 1341, 1342, 1343, 1344, 1348, 1361], "generatorexit": 1198, "geodatafram": 1252, "geom": 1256, "geom2d": [382, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1256], "geom_col": 1253, "geom_reggrid": 0, "geometr": 0, "geometri": [1199, 1201, 1205, 1206, 1207, 1208, 1209, 1211, 1215, 1216, 1222, 1223, 1229, 1230, 1233, 1237, 1238, 1239, 1241, 1245, 1253, 1256, 1331], "geomlayout": 0, "geomlayoutgrid": 0, "geomreggrid": 0, "geopanda": [1252, 1253, 1255], "geopandas_help": 0, "georg": 559, "germani": 1343, "get": [0, 1, 7, 18, 21, 23, 28, 39, 47, 50, 54, 60, 64, 68, 73, 76, 77, 81, 82, 85, 86, 88, 93, 102, 112, 120, 121, 122, 163, 176, 177, 195, 199, 202, 203, 205, 206, 216, 222, 231, 234, 248, 252, 255, 263, 272, 288, 292, 295, 298, 301, 309, 319, 327, 334, 343, 346, 357, 361, 365, 366, 382, 385, 386, 391, 394, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 549, 552, 554, 562, 563, 576, 581, 582, 583, 585, 589, 591, 597, 599, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 781, 787, 790, 794, 797, 799, 803, 807, 811, 812, 814, 819, 824, 828, 1032, 1041, 1061, 1068, 1070, 1074, 1077, 1081, 1087, 1089, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1135, 1141, 1142, 1143, 1147, 1149, 1155, 1199, 1201, 1206, 1208, 1211, 1216, 1223, 1230, 1233, 1238, 1241, 1315, 1322, 1324, 1341, 1342, 1343], "get_centreline_point": [357, 361, 781, 787, 790, 794, 797, 799, 803, 807, 811, 814, 819, 824, 828], "get_chunk_input_data": [206, 213, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429], "get_data": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 248, 255, 263, 264, 274, 278, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 366, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 929, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1081, 1083, 1085, 1122, 1127, 1129], "get_data_info": [1081, 1084, 1122], "get_dataset": [1119, 1121], "get_default_digit": 1315, "get_delta": [73, 76, 77, 81, 82, 85, 86], "get_engin": [391, 1324, 1348], "get_exampl": [1156, 1161], "get_fig": 1132, "get_figur": [1032, 1034, 1039, 1081, 1085, 1086, 1122, 1127, 1130, 1131, 1342, 1343, 1344, 1347, 1348, 1352, 1353, 1355, 1356, 1357, 1361], "get_file_path": [394, 1135, 1141, 1343, 1344, 1347], "get_fpath": [1032, 1041, 1061, 1068, 1070, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133], "get_from_chunk_stor": [1, 18, 28, 163, 176], "get_hub_height": [382, 385], "get_input_path": [120, 1322], "get_item": [112, 195, 231, 272, 327, 1143, 1147, 1149, 1155], "get_layout_data": [1032, 1035], "get_layout_dict": [1032, 1036], "get_mean_data_xi": [1061, 1065, 1100, 1102, 1108, 1110], "get_mean_data_xz": [1061, 1066, 1100, 1103, 1108, 1111], "get_mean_data_yz": [1061, 1067, 1100, 1104, 1108, 1112], "get_mean_fig_xi": [1061, 1065, 1357], "get_mean_fig_xz": [1061, 1066], "get_mean_fig_yz": [1061, 1067], "get_model": [1, 7, 18, 23, 28, 39], "get_model_data": [1, 18, 28, 163, 177], "get_models_data": [1, 18, 28, 40, 163, 178], "get_models_idata": [1, 18, 28, 163, 179], "get_output_obj": [537, 1328], "get_output_path": [121, 1322], "get_path": [122, 1322], "get_plot": 1349, "get_point_figur": [1087, 1089, 1351], "get_rotor_diamet": [382, 386], "get_rotor_point": [309, 314, 616, 619, 622, 629], "get_slic": [195, 199, 231, 272, 327], "get_states_data_xi": [1061, 1062, 1100, 1105, 1108, 1113], "get_states_data_xz": [1061, 1063, 1100, 1106, 1108, 1114], "get_states_data_yz": [1061, 1064, 1100, 1107, 1108, 1115], "get_streamline_data": [807, 812], "get_wake_coo": [357, 362, 781, 785, 787, 791, 794, 798, 799, 804, 807, 813, 814, 820, 824, 829], "get_wake_modelling_data": [357, 363, 781, 787, 794, 799, 805, 807, 814, 824], "get_wake_point": [288, 292, 576, 581, 582, 583, 585, 589, 591, 597, 599], "get_xy_bound": [382, 387], "getattr": 1198, "getter": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 248, 255, 263, 264, 274, 278, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "gib": 1348, "gigawatt": [127, 1323], "git": [1198, 1337, 1339, 1347, 1355, 1357, 1361, 1362], "github": [0, 1196, 1336, 1337, 1339, 1361, 1362], "give": [0, 787, 1341], "given": [0, 1, 5, 18, 28, 33, 336, 337, 357, 361, 478, 549, 552, 554, 636, 664, 691, 737, 745, 781, 782, 787, 790, 794, 797, 799, 803, 807, 811, 814, 819, 824, 828, 886, 905, 1041, 1043, 1048, 1055, 1060, 1062, 1063, 1064, 1074, 1082, 1083, 1135, 1141, 1156, 1161, 1184, 1187, 1188, 1192, 1246, 1329, 1330, 1331, 1332, 1340, 1344, 1349, 1352], "global": [357, 391, 393, 1198, 1324, 1340, 1343, 1348], "gmodel": 1342, "go": 1355, "goal": 1353, "goal_data": 210, "good": 1348, "grant": 1337, "greater": 1251, "gribben": [852, 1341], "grid": [0, 436, 440, 559, 583, 585, 622, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1132, 1328, 1329, 1338, 1340, 1342, 1345, 1346, 1347, 1349, 1351, 1357], "grid100": 1349, "grid16": [1345, 1349], "grid25": [1355, 1361], "grid36": 1342, "grid4": 1349, "grid400": 1349, "grid9": [1346, 1349], "grid9_raw": 1346, "grid_data": [1102, 1103, 1104, 1105, 1106, 1107], "gridrotor": [584, 585, 622, 623, 624, 625, 626, 627, 628, 1329, 1346], "gridspec_kw": [1344, 1355], "grotor": 585, "ground": [0, 1, 3, 8, 18, 28, 264, 269, 336, 337, 382, 387, 390, 549, 569, 571, 572, 1284, 1329, 1333, 1337, 1342], "ground_mirror": [1340, 1342, 1346], "ground_model": [1, 3, 8, 18, 28, 549, 569, 570, 571, 572, 573, 574, 575, 1340, 1342, 1346], "ground_typ": [264, 269, 569, 571, 572], "groundmirror": [0, 569, 570, 1329, 1346], "groundmodel": [0, 1, 8, 264, 265, 266, 267, 268, 269, 270, 271, 549, 571, 572, 1329], "growth": [0, 365, 885, 886, 892, 893, 899, 934, 939, 945, 1251, 1285, 1324, 1333, 1340, 1346, 1357], "gt": [1342, 1343, 1346, 1347, 1348, 1353, 1354], "guid": 1337, "guidelin": 1339, "gw": [127, 137, 347, 1323, 1337], "gwh": [1055, 1278, 1312, 1333, 1347, 1356, 1357], "gz": [0, 1165, 1166, 1168, 1169, 1340, 1344, 1347, 1353, 1355, 1356, 1357, 1361], "h": [0, 1, 2, 18, 28, 336, 337, 346, 347, 396, 397, 441, 452, 533, 735, 1035, 1284, 1333, 1338, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1354, 1361], "h120": 1340, "h2digit": 1337, "h5": [1165, 1166, 1168, 1169], "h5netcdf": 0, "h90": [1352, 1354, 1361], "h_coord": [440, 441, 451, 452, 1345, 1347], "h_ref": [1186, 1191, 1194, 1332], "ha": [0, 40, 178, 179, 189, 206, 211, 215, 231, 241, 280, 281, 321, 392, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 445, 453, 464, 495, 517, 527, 555, 603, 644, 669, 720, 730, 741, 750, 1149, 1150, 1261, 1262, 1318, 1320, 1324, 1337, 1340, 1341, 1344, 1345, 1347, 1348, 1350, 1352, 1353, 1355, 1356, 1359, 1361], "had": 0, "half": [0, 852, 1230, 1331, 1334, 1341, 1342], "halfplan": [1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1331], "hand": [0, 1060, 1340], "handi": 1068, "handl": [0, 234, 1181, 1324, 1331, 1337, 1349], "handler": [365, 885, 892, 899, 934, 939, 945, 1324], "hard": 0, "has_data": [911, 930], "has_engin": [392, 1324], "hasattr": 1198, "hash": 1198, "hassankassem": 0, "hat": [591, 845, 1329, 1334, 1340, 1349, 1358], "have": [0, 4, 5, 20, 32, 33, 167, 168, 313, 618, 636, 637, 1076, 1259, 1329, 1339, 1340, 1342, 1344, 1347, 1348, 1350, 1352, 1353, 1354, 1357, 1359, 1361], "hawk": [852, 1341], "header": 735, "heat": [0, 1116, 1118, 1330], "height": [0, 161, 336, 337, 346, 347, 353, 354, 382, 385, 432, 440, 441, 451, 452, 454, 456, 458, 471, 473, 475, 477, 478, 491, 572, 573, 629, 630, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 775, 777, 779, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1284, 1303, 1328, 1329, 1332, 1333, 1336, 1337, 1338, 1340, 1342, 1343, 1345, 1346, 1351, 1353, 1354], "height0": [1187, 1332], "height_ratio": [1344, 1355], "heightpandasindexpandasindex": 1347, "helg": 559, "help": [1165, 1198, 1331], "helper": [0, 1, 12, 18, 28, 163, 186, 1068, 1132, 1165, 1170, 1171, 1317, 1331], "henc": [1341, 1344, 1350, 1352], "here": [0, 188, 190, 241, 281, 284, 286, 321, 445, 447, 449, 453, 464, 467, 469, 485, 488, 495, 497, 499, 517, 520, 523, 527, 528, 529, 603, 644, 669, 672, 673, 720, 730, 741, 750, 822, 823, 824, 886, 905, 1327, 1328, 1337, 1340, 1341, 1342, 1343, 1344, 1347, 1348, 1350, 1352, 1354, 1356, 1357, 1358, 1359, 1361], "hernandez": [885, 1334, 1340], "heterogen": [440, 1328, 1336, 1337, 1338, 1340, 1347], "hex": 1198, "hh": 385, "hi": [473, 475, 477, 480, 490], "high": [559, 1329, 1340, 1352], "higher": [0, 646], "hint": [1156, 1157, 1181, 1182], "histogram": 0, "hit": 1358, "home": [1198, 1347, 1355, 1357], "homogen": [0, 473, 475, 477, 478, 490, 1328, 1336, 1338, 1340, 1353], "horizon": 1337, "horizont": [0, 440, 477, 478, 572, 1061, 1062, 1065, 1066, 1067, 1100, 1102, 1105, 1108, 1172, 1178, 1328, 1329, 1330, 1336, 1338, 1340, 1343, 1345, 1347, 1353, 1354], "hotfix": 0, "hour": 1055, "hous": 0, "how": [0, 175, 176, 1337, 1338, 1342, 1347, 1348, 1349, 1350, 1356, 1357], "howev": [1338, 1341, 1348, 1358, 1361], "hpc": [0, 1348], "html": [0, 1344, 1353, 1355], "http": [0, 559, 824, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 939, 945, 1009, 1196, 1258, 1335, 1337, 1339, 1348, 1361, 1362], "hub": [0, 336, 337, 346, 347, 382, 385, 432, 1329, 1340, 1347, 1353, 1354], "hubh_data": 1346, "i": [0, 1, 18, 28, 34, 47, 48, 50, 52, 54, 56, 60, 62, 64, 66, 68, 70, 88, 90, 93, 95, 102, 104, 105, 163, 172, 192, 203, 204, 222, 225, 234, 236, 241, 242, 243, 248, 250, 254, 255, 259, 263, 264, 274, 278, 281, 288, 289, 295, 296, 300, 301, 305, 309, 312, 313, 319, 321, 336, 340, 343, 344, 346, 349, 350, 351, 353, 357, 360, 363, 365, 372, 378, 391, 432, 434, 440, 442, 445, 451, 453, 454, 456, 460, 464, 471, 473, 475, 477, 481, 490, 492, 494, 495, 501, 503, 509, 512, 517, 525, 527, 530, 532, 534, 540, 542, 556, 559, 562, 563, 566, 569, 571, 572, 576, 579, 581, 583, 585, 591, 592, 593, 597, 600, 601, 602, 603, 605, 606, 608, 610, 612, 614, 616, 617, 618, 622, 623, 625, 629, 632, 636, 637, 639, 641, 643, 644, 646, 649, 653, 655, 659, 661, 664, 667, 669, 674, 676, 679, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 700, 702, 704, 705, 706, 709, 711, 712, 713, 715, 716, 718, 720, 721, 722, 723, 725, 726, 728, 730, 731, 732, 733, 735, 737, 739, 741, 742, 743, 745, 746, 748, 750, 751, 752, 754, 758, 762, 766, 770, 774, 777, 781, 782, 784, 787, 789, 794, 796, 799, 802, 805, 807, 810, 814, 817, 824, 827, 832, 833, 834, 835, 837, 842, 843, 844, 845, 847, 849, 852, 860, 868, 876, 877, 885, 888, 892, 893, 895, 899, 902, 905, 908, 911, 934, 937, 939, 942, 945, 948, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1048, 1068, 1078, 1118, 1121, 1126, 1159, 1198, 1204, 1205, 1214, 1215, 1221, 1222, 1228, 1229, 1236, 1237, 1244, 1245, 1321, 1329, 1333, 1334, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "i0": [45, 175, 176], "id": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 248, 255, 263, 264, 274, 282, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 432, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1198, 1337], "idata": [0, 1, 18, 28, 40, 163, 169, 174, 178, 179, 180, 189, 241, 281, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750], "idata_mem": [1, 18, 28, 163, 180], "idea": [0, 576, 1009, 1350], "ident": [1338, 1345, 1358], "identifi": [0, 123, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 278, 363, 805, 1317, 1323, 1355], "idict": [538, 539, 540, 542, 543, 1328], "ie": 1329, "iea15": 1343, "iea15mw": [1343, 1346], "iec": [892, 1334], "iec_typ": [892, 893, 1346], "iecti2005": 0, "iecti2005_": 1346, "iecti2005_linear": 1346, "iecti2005k_": 1346, "iecti2005k_linear": 1346, "iecti2005k_linear_ambka0": 1346, "iecti2005k_linear_k0": 1346, "iecti2005k_linear_ka0": 1346, "iecti2019": 0, "iecti2019_": [1340, 1346], "iecti2019_linear": 1346, "iecti2019_max": 1358, "iecti2019_quart": 1342, "iecti2019k_": 1346, "iecti2019k_linear": 1346, "iecti2019k_linear_ambka0": 1346, "iecti2019k_linear_k0": 1346, "iecti2019k_linear_ka0": 1346, "iectiwak": [892, 893, 894, 895, 896, 897, 898, 1334, 1346], "ifil": [1255, 1331], "ignor": [735, 1340, 1348], "im": [1034, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1132], "imag": [0, 1034, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1102, 1103, 1104, 1105, 1106, 1107, 1132, 1199, 1200, 1206, 1208, 1210, 1216, 1218, 1223, 1225, 1230, 1232, 1238, 1240, 1348, 1353], "imagin": 1342, "img": [1092, 1097], "immut": [1147, 1148, 1155], "impact": 559, "implement": [0, 559, 877, 892, 1334, 1338, 1340, 1341], "impli": 1344, "implicit": [1345, 1358], "import": [1246, 1247, 1331, 1339, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "import_modul": [1246, 1331], "importerror": 1198, "importwarn": 1198, "improv": 0, "imput": 1337, "in0": [636, 637], "in1": [636, 637], "in_dir": [128, 1323], "in_kwarg": [1255, 1331], "in_var": [636, 637], "inam": [533, 1255], "includ": [0, 222, 1124, 1137, 1330, 1339, 1340, 1343, 1344, 1347, 1349, 1357, 1358], "inclus": 0, "incom": 165, "incompat": 0, "incomplet": 0, "incorrectli": 0, "increas": [1334, 1340, 1348], "ind": [175, 176], "indentationerror": 1198, "independ": [600, 601, 1338, 1340, 1355], "index": [0, 28, 34, 41, 45, 56, 102, 105, 106, 142, 168, 188, 190, 196, 202, 221, 222, 226, 236, 255, 260, 264, 265, 266, 267, 278, 284, 286, 288, 290, 291, 311, 313, 319, 320, 324, 334, 336, 337, 339, 359, 361, 362, 363, 374, 379, 405, 411, 416, 419, 426, 431, 432, 440, 441, 444, 447, 449, 451, 454, 456, 458, 463, 466, 467, 469, 471, 473, 475, 477, 482, 485, 488, 490, 492, 497, 499, 501, 509, 511, 515, 519, 520, 523, 525, 528, 529, 530, 533, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 588, 591, 594, 597, 598, 618, 660, 672, 673, 785, 790, 791, 797, 798, 803, 804, 805, 811, 813, 819, 820, 822, 823, 828, 829, 833, 834, 837, 838, 843, 844, 847, 848, 849, 855, 863, 871, 880, 888, 889, 895, 896, 902, 908, 927, 930, 937, 938, 942, 948, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024, 1032, 1033, 1034, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1083, 1102, 1103, 1104, 1129, 1130, 1132, 1258, 1323, 1342, 1343, 1344, 1347, 1348, 1349, 1350, 1352, 1353, 1356, 1358], "index_col": [451, 454, 456, 457, 471, 472, 509, 510, 525, 530, 531, 1344], "indexerror": 1198, "indic": [0, 1, 5, 18, 28, 33, 106, 163, 175, 184, 226, 320, 436, 438, 439, 444, 463, 482, 515, 1034, 1062, 1063, 1064, 1079, 1080, 1102, 1103, 1104, 1105, 1106, 1107, 1132, 1182, 1198, 1331, 1344, 1355, 1357], "individu": [203, 336, 346, 737, 745, 852, 860, 868, 876, 1181, 1324, 1327, 1329, 1340, 1342, 1348, 1353], "induct": [0, 192, 193, 194, 340, 342, 549, 556, 558, 559, 561, 646, 647, 825, 845, 846, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 893, 899, 900, 905, 906, 911, 926, 934, 935, 939, 940, 945, 946, 1324, 1329, 1336, 1340, 1342, 1346, 1348], "induction_model": [549, 1341], "induction_rhb": 0, "induction_typ": [192, 194, 340, 342, 556, 559, 852, 860, 868, 876, 877], "indx": 41, "infer": [434, 435, 1354], "inferno": 1361, "infin": 1083, "infinit": 1341, "inflow": [0, 473, 475, 478, 490, 1328, 1337, 1340, 1344, 1347, 1355, 1356], "influenc": [1342, 1350], "info": [1100, 1101, 1109, 1348], "inform": [544, 546, 1198, 1328, 1338, 1344, 1354, 1360], "inhomogen": [0, 473, 475, 490, 1328, 1338, 1340, 1343, 1344], "init": [566, 1137, 1138], "init_par": [234, 246, 562], "init_st": [1, 9, 18, 28], "initfarmdata": [50, 51, 52, 53, 1319, 1348], "initfarmdata_instance1": 1348, "initi": [0, 1, 9, 10, 18, 24, 28, 30, 47, 50, 54, 57, 60, 64, 68, 71, 88, 93, 97, 100, 102, 107, 163, 181, 192, 196, 203, 206, 210, 213, 214, 215, 220, 222, 234, 240, 246, 248, 251, 255, 263, 264, 270, 274, 279, 280, 288, 294, 295, 297, 301, 309, 319, 330, 331, 340, 343, 346, 353, 357, 365, 372, 378, 398, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 440, 441, 451, 454, 456, 471, 473, 475, 477, 483, 490, 492, 501, 504, 509, 516, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 595, 597, 600, 605, 608, 612, 616, 622, 626, 629, 633, 636, 641, 646, 650, 653, 656, 659, 662, 664, 668, 674, 677, 679, 684, 687, 690, 695, 697, 699, 703, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 786, 787, 792, 794, 799, 806, 807, 814, 821, 824, 830, 832, 835, 840, 842, 845, 850, 852, 857, 860, 865, 868, 873, 876, 877, 882, 883, 885, 892, 899, 903, 905, 909, 911, 931, 934, 939, 943, 945, 950, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1090, 1093, 1095, 1098, 1198, 1251, 1340, 1342, 1343, 1344, 1348, 1349, 1352, 1355, 1357], "inlcud": 1355, "inlin": [1341, 1342, 1344, 1345, 1347, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "input": [0, 1, 18, 28, 40, 112, 116, 120, 128, 163, 178, 204, 206, 217, 221, 254, 300, 353, 355, 398, 403, 404, 406, 407, 409, 412, 413, 414, 415, 417, 418, 420, 421, 422, 425, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 636, 637, 641, 642, 700, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 978, 984, 990, 996, 1002, 1008, 1014, 1020, 1026, 1198, 1255, 1317, 1322, 1323, 1329, 1333, 1337, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1360], "input_dir": [0, 112, 116, 128, 538, 1323], "input_farm_var": [973, 978, 979, 984, 985, 990, 991, 996, 997, 1002, 1003, 1008, 1009, 1014, 1015, 1020, 1021, 1026], "input_var": [353, 355, 641, 642, 699, 700, 754, 757, 758, 761, 762, 765, 766, 769, 770, 773, 774, 776, 777, 780, 978, 984, 990, 996, 1002, 1008, 1014, 1020, 1026], "insert": [255, 260, 336, 339, 1261, 1262], "insert_model": [336, 339], "insid": [1199, 1205, 1206, 1208, 1215, 1216, 1222, 1223, 1229, 1230, 1231, 1237, 1238, 1245, 1345], "inside_": [1200, 1210, 1218, 1225, 1232, 1240], "inside_slategrai": [1200, 1210, 1240], "instal": [0, 1246, 1337, 1348, 1359, 1361, 1362], "instanc": [0, 1160, 1249, 1340, 1345, 1355, 1361], "instead": [0, 4, 5, 202, 432, 440, 441, 456, 458, 509, 511, 885, 886, 973, 974, 985, 986, 997, 998, 1015, 1016, 1079, 1080, 1338, 1339, 1340, 1348, 1355, 1358, 1361], "int": [1, 12, 18, 19, 25, 34, 41, 44, 45, 56, 57, 71, 75, 80, 84, 105, 107, 109, 112, 115, 163, 164, 175, 176, 184, 185, 186, 188, 190, 196, 200, 201, 202, 206, 207, 209, 210, 228, 236, 238, 240, 241, 260, 265, 266, 267, 277, 278, 279, 281, 282, 284, 286, 290, 291, 311, 313, 315, 321, 324, 325, 332, 333, 334, 336, 337, 339, 359, 361, 362, 363, 374, 379, 384, 388, 432, 434, 435, 436, 437, 438, 439, 445, 447, 448, 449, 453, 456, 458, 462, 464, 466, 467, 468, 469, 483, 485, 486, 488, 495, 497, 498, 499, 504, 506, 509, 511, 514, 516, 517, 519, 520, 521, 523, 527, 528, 529, 532, 533, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 574, 575, 576, 577, 580, 588, 594, 595, 598, 603, 618, 620, 622, 623, 626, 627, 629, 630, 633, 634, 644, 650, 656, 662, 668, 669, 672, 673, 677, 703, 704, 719, 720, 721, 729, 730, 731, 740, 741, 749, 750, 771, 781, 782, 785, 786, 790, 791, 792, 797, 798, 803, 804, 805, 806, 811, 813, 818, 819, 820, 821, 822, 823, 828, 829, 830, 833, 834, 837, 838, 840, 843, 844, 847, 848, 849, 850, 855, 857, 863, 865, 871, 873, 880, 882, 888, 889, 895, 896, 902, 903, 908, 909, 927, 931, 937, 938, 942, 943, 948, 949, 950, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024, 1030, 1032, 1033, 1034, 1039, 1043, 1044, 1055, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1079, 1080, 1083, 1085, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1129, 1130, 1132, 1146, 1175, 1176, 1177, 1198, 1250, 1251, 1253, 1255, 1260, 1261, 1262, 1263, 1264, 1315, 1343], "int64": [1342, 1348, 1353, 1354], "int640": [1342, 1348], "int640arrai": 1342, "int6444": 1348, "int6476": 1348, "integ": [106, 115, 129, 226, 320, 444, 463, 482, 515, 1323], "integr": [0, 357, 359, 622, 623, 629, 630, 781, 787, 794, 799, 807, 814, 824, 945, 946, 1334, 1340, 1346], "intend": [1041, 1056, 1337, 1340, 1348, 1351], "intens": [0, 319, 745, 1273, 1302, 1329, 1333, 1334, 1340, 1345, 1356, 1357, 1358], "interact": 1198, "interest": [5, 28, 29, 33, 54, 1126, 1319, 1329, 1341, 1344, 1354, 1355, 1360], "interfac": [0, 1328], "interior": 0, "intern": [0, 642, 700, 1337], "interp1d": [458, 642, 700], "interp_nan": [440, 441], "interp_par": [770, 771], "interpn": [440, 441, 477, 675, 737, 738, 745, 746], "interpn_arg": [642, 700], "interpn_par": [440, 441], "interpn_pars_ct": [738, 746], "interpn_pars_p": [738, 746], "interpol": [0, 359, 440, 441, 458, 477, 641, 642, 675, 695, 697, 699, 715, 725, 737, 738, 745, 746, 770, 771, 781, 782, 799, 800, 807, 808, 814, 815, 1329], "interpret": [0, 1338, 1361], "interruptederror": 1198, "intersect": [1206, 1258, 1259, 1331], "interv": 1353, "intial": [97, 100, 1090, 1093, 1095, 1098], "intp_par": 477, "introduc": [0, 646, 1334, 1337], "intuit": 0, "invers": [1199, 1201, 1206, 1208, 1211, 1216, 1223, 1230, 1233, 1238, 1241, 1291, 1333, 1358], "invert": [1132, 1199, 1201, 1206, 1208, 1211, 1216, 1223, 1230, 1233, 1238, 1241, 1331], "invert_axi": 1132, "invertedareageometri": [1201, 1211, 1233, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1331], "investig": [1342, 1344, 1349], "invit": 1343, "invok": [0, 646, 787, 852, 860, 868, 876, 1329, 1337, 1339, 1342, 1356, 1357, 1358], "involv": [0, 1348], "inx": [636, 637], "io": 0, "ioerror": 1198, "iop": [939, 945], "iopscienc": [939, 945], "ipar": [359, 458, 675, 945, 946], "ipars_ct": [737, 745], "ipars_p": [737, 745], "ipynb": 0, "irrespect": 0, "is_kti": [365, 369], "isadirectoryerror": 1198, "isel": [1, 18, 28, 40, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 168, 178, 188, 190, 192, 203, 206, 221, 222, 234, 248, 255, 263, 264, 274, 284, 286, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 398, 404, 405, 406, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 440, 441, 447, 449, 451, 454, 456, 467, 469, 471, 473, 475, 477, 485, 488, 490, 492, 497, 499, 501, 509, 520, 523, 525, 528, 529, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 672, 673, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 822, 823, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1119, 1121], "isinst": 1198, "issu": [0, 1337], "issubclass": 1198, "item": [112, 195, 231, 272, 327, 1143, 1147, 1148, 1149, 1155, 1342, 1349], "iter": [0, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 42, 44, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 163, 166, 210, 278, 363, 405, 411, 416, 419, 426, 431, 538, 695, 697, 699, 704, 715, 721, 725, 731, 735, 787, 805, 1090, 1093, 1094, 1095, 1098, 1099, 1198, 1318, 1321, 1330, 1340, 1341, 1342, 1344, 1353, 1355], "itr": 42, "its": [0, 526, 559, 1062, 1063, 1064, 1250, 1331, 1337, 1348, 1354, 1360], "ityp": [129, 1323], "iw": [0, 1337, 1343], "iwt7": [1343, 1346], "j": [885, 899, 939], "jensen": [934, 1334, 1340, 1346], "jensen_": [0, 1340, 1346], "jensen_linear": 1346, "jensen_linear_ambka0": 1346, "jensen_linear_k0": 1346, "jensen_linear_k004": 1349, "jensen_linear_k007": [1345, 1354], "jensen_linear_k0075": 0, "jensen_linear_ka0": 1346, "jensen_quadratic_k0075": [1340, 1346], "jensenwak": [0, 934, 935, 936, 937, 938, 1334, 1346], "jfm": [824, 905, 911], "job": [0, 1068], "jona": [1198, 1335, 1347, 1355, 1357], "joss": 1335, "journal": 1337, "jshtml": [1344, 1353, 1355], "json": [435, 1036, 1328, 1338], "jump": 0, "jupyt": 1336, "just": [0, 102, 1321, 1350, 1359], "juul": 559, "k": [0, 365, 366, 367, 368, 690, 691, 885, 886, 892, 893, 899, 911, 927, 934, 939, 945, 1285, 1286, 1287, 1324, 1329, 1333, 1340, 1346, 1348, 1356, 1357], "k1": [559, 560], "k2": [559, 560], "k3": [559, 560], "k_var": [365, 367, 690, 691, 886, 1346], "ka": [0, 365, 367, 368, 369, 1340, 1346], "kappa": [130, 608, 1184, 1186, 1188, 1191, 1192, 1194, 1323, 1329, 1332], "karman": [130, 1184, 1186, 1188, 1191, 1192, 1194, 1323], "kb": [0, 365, 367, 368, 690, 691, 1286, 1287, 1333, 1340, 1346], "keep": 1339, "keep_model": 0, "kei": [1, 3, 4, 5, 8, 11, 17, 28, 29, 48, 52, 56, 62, 66, 70, 82, 83, 90, 95, 104, 112, 137, 169, 180, 188, 190, 195, 196, 204, 210, 225, 231, 236, 250, 259, 265, 266, 267, 268, 270, 271, 272, 278, 284, 286, 290, 291, 294, 296, 305, 311, 327, 330, 331, 344, 363, 374, 375, 377, 442, 447, 449, 460, 467, 469, 481, 485, 488, 492, 493, 494, 497, 499, 501, 502, 503, 509, 511, 512, 520, 523, 528, 529, 532, 533, 534, 537, 542, 545, 547, 549, 550, 566, 574, 575, 580, 588, 594, 598, 602, 606, 610, 614, 618, 639, 643, 649, 653, 654, 655, 661, 667, 672, 673, 676, 682, 685, 688, 693, 702, 711, 718, 728, 739, 748, 805, 822, 823, 833, 834, 835, 836, 837, 838, 839, 844, 846, 847, 849, 855, 856, 858, 863, 864, 866, 871, 872, 874, 880, 881, 883, 888, 890, 895, 897, 908, 911, 929, 937, 951, 1057, 1058, 1059, 1073, 1079, 1080, 1135, 1142, 1143, 1144, 1147, 1148, 1149, 1150, 1151, 1155, 1161, 1165, 1169, 1253, 1323, 1346], "kelvin": [1272, 1301, 1333], "kept": 0, "keyboardinterrupt": 1198, "keyerror": [175, 176, 1141, 1198], "keyword": [19, 167, 168, 185, 217, 403, 407, 415, 418, 425, 430, 1256], "kg": [1271, 1299, 1333], "kick": [622, 1329], "kilojoul": 0, "kilowatt": [162, 1323], "kind": [0, 549, 781, 1327, 1329, 1337, 1345, 1358], "kinet": [1340, 1347], "km": [357, 358, 782, 808, 814, 815, 825, 1344], "know": 1348, "known": 366, "kti": [0, 690, 691, 692, 693, 694, 1286, 1287, 1329, 1333, 1340, 1346, 1356], "kti_": 1346, "kti_0": 1346, "kti_02": 1356, "kti_05": [1357, 1358], "kti_amb": 1346, "kti_amb_": 1346, "kti_amb_0": 1346, "kw": [137, 162, 346, 347, 646, 647, 735, 1055, 1323, 1340, 1346, 1348], "kwarg": [1, 3, 4, 5, 18, 19, 20, 28, 29, 33, 102, 163, 166, 167, 168, 183, 185, 192, 194, 198, 206, 217, 218, 219, 222, 231, 232, 233, 234, 244, 264, 269, 272, 273, 288, 293, 301, 306, 309, 316, 319, 322, 327, 328, 329, 330, 331, 340, 342, 343, 345, 346, 352, 353, 356, 357, 364, 366, 372, 376, 378, 381, 398, 399, 403, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 420, 421, 422, 423, 425, 427, 428, 429, 430, 433, 434, 440, 451, 452, 454, 455, 456, 471, 473, 474, 475, 476, 477, 490, 491, 492, 493, 501, 509, 525, 526, 530, 534, 540, 549, 554, 556, 559, 562, 569, 571, 572, 576, 581, 583, 584, 585, 591, 597, 608, 609, 616, 622, 623, 629, 630, 636, 637, 641, 642, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 710, 715, 725, 735, 737, 745, 754, 755, 758, 759, 762, 763, 766, 767, 770, 774, 777, 781, 782, 787, 788, 794, 795, 799, 800, 807, 808, 814, 815, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1027, 1030, 1032, 1033, 1034, 1039, 1041, 1048, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1087, 1088, 1089, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1133, 1134, 1143, 1145, 1149, 1152, 1153, 1154, 1156, 1157, 1165, 1170, 1171, 1181, 1182, 1249, 1252, 1253, 1256, 1264, 1328, 1331], "l": [939, 1349], "label": [106, 226, 320, 336, 337, 444, 463, 482, 515, 1062, 1063, 1064, 1065, 1066, 1067, 1085, 1118, 1126, 1132, 1341, 1342, 1343, 1344, 1349, 1352, 1356], "label_map": [1102, 1103, 1104, 1105, 1106, 1107], "labl": 1126, "lambda": [1344, 1353, 1355], "laptop": 1348, "larg": [0, 1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 188, 190, 192, 203, 222, 234, 248, 255, 263, 264, 274, 284, 286, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 447, 449, 451, 454, 456, 467, 469, 471, 473, 475, 477, 485, 488, 490, 492, 497, 499, 501, 509, 520, 523, 525, 528, 529, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 672, 673, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 822, 823, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1337, 1340, 1348], "larsen": 559, "last": [26, 1041, 1060, 1196, 1339], "later": [1350, 1353, 1356], "latest": [101, 1094, 1099, 1339], "latter": [0, 313, 576, 618, 782, 1253, 1350, 1352, 1356, 1358], "launch": 1348, "layer": [1342, 1343, 1346], "layout": [0, 545, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1328, 1330, 1337, 1353, 1355, 1356, 1361], "layout_opt": 0, "layout_regular_grid": 0, "layout_single_st": 0, "layout_wind_ros": 0, "lazi": [0, 440, 441, 1337], "ldict": [545, 1328], "lead": 1349, "least": 1338, "leav": 1339, "left": [1172, 1179, 1180, 1355], "legend": [1056, 1084, 1085, 1341, 1342, 1344, 1349], "legend_par": 1085, "legloc": [1056, 1344, 1355], "len": [1198, 1344, 1349], "length": [0, 357, 358, 436, 532, 534, 782, 808, 814, 815, 825, 1147, 1148, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1194, 1289, 1313, 1333, 1340, 1343, 1344, 1346, 1347, 1348], "less": [0, 1340, 1349, 1355], "let": [1342, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1355, 1356, 1357, 1358, 1361], "letter": [1253, 1256], "level": [0, 57, 71, 75, 80, 84, 107, 163, 164, 188, 190, 206, 207, 219, 238, 240, 241, 263, 277, 279, 281, 284, 286, 321, 324, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 432, 434, 435, 436, 437, 438, 439, 445, 447, 449, 453, 462, 464, 466, 467, 469, 483, 485, 488, 495, 497, 499, 504, 514, 516, 517, 519, 520, 523, 527, 528, 529, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 595, 603, 626, 629, 630, 633, 644, 650, 656, 662, 668, 669, 672, 673, 677, 703, 719, 720, 729, 730, 740, 741, 749, 750, 786, 792, 806, 818, 821, 822, 823, 830, 840, 850, 857, 865, 873, 882, 903, 909, 931, 943, 949, 950, 1030, 1041, 1043, 1044, 1048, 1062, 1063, 1064, 1065, 1066, 1067, 1079, 1080, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1132, 1146, 1251, 1255, 1264, 1317, 1324, 1327, 1329, 1342, 1346, 1351, 1353], "level10": 1347, "level5": 1346, "level5_raw": 1346, "levelrotor": [0, 629, 630, 631, 632, 633, 634, 635, 1329, 1346], "li": 559, "lib": 1198, "libmamba": 1339, "librari": 1354, "licens": 1198, "lie": [437, 1328], "lighter": 0, "like": [0, 28, 217, 403, 407, 415, 418, 425, 430, 437, 1321, 1338, 1339, 1340, 1343, 1347, 1352, 1361], "lim": [1342, 1344, 1355], "lim_high": [973, 974, 979, 980, 985, 986, 991, 992, 997, 998, 1003, 1004, 1009, 1010, 1015, 1016, 1021, 1022, 1346], "lim_low": [973, 974, 979, 980, 985, 986, 991, 992, 997, 998, 1003, 1004, 1009, 1010, 1015, 1016, 1021, 1022, 1346], "limit": [0, 82, 83, 185, 608, 609, 906, 973, 974, 979, 980, 985, 986, 991, 992, 997, 998, 1003, 1004, 1009, 1010, 1015, 1016, 1021, 1022, 1338, 1340], "line": [0, 535, 536, 735, 781, 782, 799, 800, 807, 808, 814, 815, 845, 847, 885, 888, 892, 895, 934, 937, 1062, 1063, 1064, 1095, 1096, 1132, 1198, 1200, 1210, 1218, 1225, 1232, 1240, 1328, 1339, 1341, 1342, 1347, 1351, 1354, 1361], "linear": [0, 690, 953, 954, 958, 959, 963, 964, 968, 969, 973, 979, 1329, 1340, 1344, 1346, 1357], "linear_loc": 1344, "linearli": [440, 441, 852, 860, 868, 876, 1344], "linearsuperposit": 0, "linestyl": [1341, 1342, 1349], "linewidth": 1349, "link": [1337, 1348], "linspac": [1198, 1341, 1342, 1349, 1354], "linux": 1348, "list": [0, 1, 3, 4, 5, 15, 18, 28, 29, 33, 47, 49, 50, 53, 54, 55, 58, 59, 60, 61, 63, 64, 67, 68, 72, 77, 78, 82, 83, 88, 91, 92, 93, 96, 102, 106, 108, 110, 163, 192, 195, 196, 199, 203, 206, 210, 213, 216, 217, 221, 222, 223, 224, 226, 227, 229, 234, 245, 247, 248, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 274, 285, 288, 295, 299, 300, 301, 302, 304, 305, 307, 308, 309, 310, 317, 319, 320, 323, 324, 336, 337, 338, 339, 340, 343, 346, 353, 355, 357, 359, 365, 372, 378, 382, 384, 389, 394, 398, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 436, 438, 439, 440, 441, 444, 446, 451, 452, 454, 456, 458, 463, 465, 466, 471, 473, 475, 477, 478, 482, 484, 487, 490, 491, 492, 496, 501, 505, 507, 509, 511, 515, 518, 519, 522, 525, 530, 540, 542, 555, 556, 559, 562, 563, 567, 568, 569, 571, 572, 573, 576, 581, 583, 585, 590, 591, 596, 597, 600, 601, 604, 605, 607, 608, 611, 612, 613, 615, 616, 622, 629, 636, 637, 640, 641, 642, 645, 646, 651, 652, 653, 657, 658, 659, 660, 663, 664, 670, 674, 675, 678, 679, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 700, 707, 708, 709, 714, 715, 724, 725, 734, 735, 737, 744, 745, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 773, 774, 776, 777, 780, 781, 787, 793, 794, 799, 807, 814, 824, 831, 832, 835, 841, 842, 845, 851, 852, 859, 860, 867, 868, 875, 876, 877, 884, 885, 891, 892, 898, 899, 904, 905, 910, 911, 933, 934, 939, 944, 945, 952, 953, 958, 963, 968, 973, 978, 979, 984, 985, 990, 991, 996, 997, 1002, 1003, 1008, 1009, 1014, 1015, 1020, 1021, 1026, 1027, 1029, 1031, 1043, 1046, 1047, 1050, 1052, 1053, 1054, 1056, 1076, 1079, 1080, 1083, 1085, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1121, 1126, 1129, 1130, 1135, 1137, 1140, 1142, 1149, 1156, 1157, 1161, 1164, 1165, 1181, 1195, 1198, 1207, 1208, 1209, 1253, 1317, 1320, 1321, 1324, 1327, 1330, 1338, 1340, 1341, 1342, 1343, 1346, 1348, 1349, 1350, 1351, 1361], "lname": [545, 1328], "lo": [1344, 1353, 1355], "load": [0, 1, 5, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 241, 248, 255, 263, 264, 274, 281, 288, 295, 301, 309, 319, 321, 340, 343, 346, 353, 357, 365, 372, 378, 440, 441, 445, 451, 453, 454, 456, 464, 471, 473, 475, 477, 490, 492, 495, 501, 509, 517, 525, 527, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 603, 605, 608, 612, 616, 622, 629, 636, 641, 644, 646, 653, 659, 664, 669, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 720, 725, 730, 735, 737, 741, 745, 750, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1337, 1345, 1348], "load_data": [0, 1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 241, 248, 255, 263, 264, 274, 281, 288, 295, 301, 309, 319, 321, 340, 343, 346, 353, 357, 365, 372, 378, 440, 445, 451, 453, 454, 456, 464, 471, 473, 475, 477, 490, 492, 495, 501, 509, 517, 525, 527, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 603, 605, 608, 612, 616, 622, 629, 636, 641, 644, 646, 653, 659, 664, 669, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 720, 725, 730, 735, 737, 741, 745, 750, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "load_mod": [440, 441, 1345], "load_modul": [1247, 1331], "loader": 1198, "loc": [324, 456, 458, 466, 509, 511, 519, 1349, 1350, 1352], "local": [0, 409, 794, 885, 886, 979, 991, 1003, 1021, 1198, 1326, 1329, 1337, 1339, 1340, 1343, 1344, 1348, 1353], "local_clust": [0, 1348], "localclust": 1348, "localclusterengin": [0, 409, 410, 411, 427, 1326, 1348], "locat": [394, 616, 1056, 1135, 1137, 1138, 1261, 1262, 1339, 1343, 1344, 1349, 1351, 1352, 1358, 1361], "log": [754, 758, 762, 766, 1185, 1189, 1329, 1332, 1340], "logz": [1185, 1189, 1332], "long": [0, 1084, 1340], "long_nam": 1343, "longer": 0, "look": [3, 835, 836, 846, 1055, 1338, 1342, 1343, 1344, 1347, 1349, 1352, 1357, 1361], "lookup": [0, 1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 248, 255, 263, 264, 274, 278, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 366, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 642, 646, 647, 653, 659, 664, 674, 679, 680, 684, 687, 690, 695, 697, 699, 700, 709, 715, 716, 725, 726, 735, 737, 738, 745, 746, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1055, 1329, 1340], "lookup_k": [365, 366], "lookup_par": 700, "lookup_ti": [365, 366], "lookuperror": 1198, "lookupt": [0, 641, 642, 643, 644, 645, 700, 1329, 1340], "loop": [0, 195, 196, 206, 216, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 1196, 1341, 1344, 1348, 1353, 1355], "loop_dim": [195, 196, 206, 216, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429], "lot": 1348, "lower": [0, 629, 973, 974, 979, 980, 985, 986, 991, 992, 997, 998, 1003, 1004, 1009, 1010, 1015, 1016, 1021, 1022, 1056, 1172, 1179, 1180, 1329, 1344, 1355], "lt": [1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1353, 1354, 1355, 1356, 1357, 1358], "luka": 1335, "lw": 1349, "lz": [1185, 1189], "m": [6, 8, 11, 13, 14, 16, 17, 278, 387, 412, 440, 441, 456, 737, 745, 807, 808, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1102, 1103, 1104, 1105, 1106, 1107, 1268, 1269, 1270, 1275, 1281, 1284, 1289, 1296, 1297, 1298, 1304, 1307, 1308, 1309, 1313, 1333, 1339, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1354, 1356, 1357], "m3": [1271, 1299, 1333], "machin": [0, 1329], "madsen": [0, 559, 825, 852, 853, 860, 861, 868, 869, 876, 877, 878, 900, 906, 940, 946, 1346, 1348], "madsenaxialinduct": [0, 559, 560, 561, 1329, 1346], "mai": [0, 583, 646, 1329, 1345, 1353, 1358], "main": [47, 48, 50, 52, 54, 56, 60, 62, 64, 66, 68, 70, 88, 90, 93, 95, 102, 104, 203, 204, 222, 225, 234, 236, 248, 250, 255, 259, 263, 295, 296, 301, 305, 319, 343, 344, 346, 440, 442, 451, 454, 456, 460, 471, 473, 475, 477, 481, 490, 492, 494, 501, 503, 509, 512, 525, 530, 562, 563, 566, 600, 602, 605, 606, 608, 610, 612, 614, 636, 639, 641, 643, 646, 649, 653, 655, 659, 661, 664, 667, 674, 676, 679, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 702, 709, 711, 715, 718, 725, 728, 735, 737, 739, 745, 748, 1339, 1343, 1349, 1359], "mainli": 1340, "majid": [824, 899, 905, 911], "major": 0, "make": [0, 1258, 1329, 1339, 1340, 1347, 1348, 1351, 1361], "manag": [0, 1318, 1336, 1337, 1348], "mani": [0, 175, 176, 440, 441, 1337, 1340, 1348], "manifest": 0, "manipul": [198, 233, 329], "manual": [1337, 1338, 1347], "map": [0, 1, 3, 199, 206, 217, 398, 403, 404, 406, 407, 409, 412, 413, 414, 415, 417, 418, 420, 421, 422, 425, 427, 428, 429, 430, 440, 441, 452, 456, 458, 509, 511, 532, 534, 545, 547, 600, 601, 641, 642, 660, 700, 1073, 1085, 1102, 1103, 1104, 1105, 1106, 1107, 1116, 1118, 1121, 1156, 1157, 1198, 1314, 1316, 1330, 1333, 1340, 1347, 1352], "mark": [1344, 1347], "marker": 1344, "martin": 1335, "mask": [0, 1126, 1336, 1337, 1352], "master": [1196, 1361], "match": [1156, 1159, 1160], "mathemat": [0, 1340], "mathematisch": 1198, "matplotlib": [1034, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1089, 1090, 1092, 1095, 1097, 1132, 1198, 1200, 1210, 1218, 1223, 1225, 1232, 1240, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "matter": [378, 1348, 1350], "max": [0, 382, 387, 532, 533, 534, 660, 958, 985, 991, 1034, 1057, 1058, 1059, 1102, 1103, 1104, 1105, 1106, 1107, 1198, 1329, 1352], "max_ag": [781, 782, 1346], "max_age_mean_w": [781, 782], "max_csiz": [1250, 1331], "max_it": [18, 19], "max_length_km": [357, 358, 781, 782, 807, 808, 814, 815, 825, 1346], "max_p": [1288, 1333, 1350, 1352], "max_ti": [608, 609], "maxim": [0, 18, 19, 357, 358, 556, 557, 622, 623, 646, 781, 782, 808, 814, 815, 825, 906, 1062, 1063, 1064, 1065, 1066, 1067, 1102, 1103, 1104, 1105, 1106, 1107, 1126, 1132, 1199, 1202, 1206, 1208, 1212, 1216, 1219, 1223, 1226, 1230, 1234, 1238, 1242, 1250, 1251, 1288, 1329, 1333, 1340, 1344, 1346, 1348, 1350], "maximum": [0, 1341, 1357], "maxp": [1288, 1333, 1350, 1352], "mb": [170, 173, 182], "mbook": [1, 3, 18, 28, 163, 164, 182, 538, 543, 544, 547, 1122, 1123, 1124, 1125, 1328, 1340, 1341, 1342, 1343, 1346, 1349, 1350, 1351, 1352, 1354, 1358], "mclass": 554, "mdata": [0, 1, 18, 28, 47, 48, 50, 52, 54, 56, 60, 62, 64, 66, 68, 70, 88, 90, 93, 95, 102, 104, 163, 165, 175, 176, 192, 203, 213, 222, 225, 231, 233, 234, 236, 241, 248, 250, 251, 255, 259, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 278, 281, 288, 290, 291, 292, 294, 295, 296, 297, 301, 305, 309, 311, 313, 314, 319, 321, 327, 329, 340, 343, 344, 346, 353, 357, 359, 360, 361, 362, 365, 372, 374, 375, 377, 378, 379, 380, 440, 442, 445, 451, 453, 454, 456, 460, 464, 471, 473, 475, 477, 480, 481, 490, 492, 494, 495, 501, 503, 509, 512, 517, 525, 527, 530, 556, 559, 562, 563, 566, 569, 571, 572, 574, 575, 576, 580, 581, 582, 583, 585, 588, 589, 591, 594, 597, 598, 599, 600, 602, 603, 605, 606, 608, 610, 612, 614, 616, 618, 619, 622, 629, 636, 639, 641, 643, 644, 646, 649, 653, 655, 659, 661, 664, 667, 669, 674, 676, 679, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 702, 709, 711, 715, 718, 720, 725, 728, 730, 735, 737, 739, 741, 745, 748, 750, 754, 758, 762, 766, 770, 774, 777, 781, 784, 785, 787, 789, 790, 791, 794, 796, 797, 798, 799, 802, 803, 804, 807, 810, 811, 812, 813, 814, 817, 819, 820, 824, 827, 828, 829, 832, 833, 834, 835, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 852, 855, 856, 858, 860, 863, 864, 866, 868, 871, 872, 874, 876, 877, 880, 881, 883, 885, 888, 889, 890, 892, 895, 896, 897, 899, 902, 905, 908, 911, 927, 928, 929, 930, 934, 937, 938, 939, 942, 945, 948, 951, 953, 956, 957, 958, 961, 962, 963, 966, 967, 968, 971, 972, 973, 976, 977, 979, 982, 983, 985, 988, 989, 991, 994, 995, 997, 1000, 1001, 1003, 1006, 1007, 1009, 1012, 1013, 1015, 1018, 1019, 1021, 1024, 1025, 1324], "mdata_kei": [911, 917], "mdl": 1246, "mean": [0, 163, 164, 238, 327, 335, 378, 437, 782, 1034, 1041, 1046, 1049, 1050, 1053, 1057, 1061, 1076, 1100, 1102, 1103, 1104, 1108, 1110, 1111, 1112, 1127, 1251, 1330, 1331, 1337, 1340, 1342, 1347, 1348, 1356, 1357], "mean_eff": [1356, 1357], "mean_no_weight": [0, 1058, 1059, 1129, 1130, 1337], "mean_rew": [1034, 1347, 1356, 1357], "meant": 163, "measur": [1340, 1344], "media": 852, "medici": [0, 877], "megawatt": [131, 1323], "mellb": 0, "memori": [0, 1, 5, 18, 28, 163, 174, 177, 180, 241, 281, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750, 1250, 1331, 1348], "memoryerror": 1198, "memoryview": 1198, "mention": [1060, 1343], "mere": [336, 1338], "merg": 1342, "mesoscal": [1340, 1343], "mess": 0, "messag": [1147, 1148, 1155, 1337], "meta": [195, 1324], "meteorolog": [319, 1360], "method": [434, 642, 953, 954, 958, 959, 963, 964, 968, 969, 1129, 1130, 1170, 1171, 1348], "meyer": [860, 868, 876, 1334, 1341], "middl": 1344, "might": [1338, 1348, 1361], "min": [0, 382, 387, 532, 533, 534, 660, 1034, 1057, 1058, 1059, 1102, 1103, 1104, 1105, 1106, 1107, 1198, 1344, 1352, 1353, 1355], "min_csiz": [1250, 1331], "min_dist": [437, 1251, 1328, 1331, 1348], "minim": [0, 437, 1062, 1063, 1064, 1065, 1066, 1067, 1102, 1103, 1104, 1105, 1106, 1107, 1126, 1132, 1199, 1203, 1206, 1208, 1213, 1216, 1220, 1223, 1227, 1230, 1235, 1238, 1243, 1250, 1251], "minimum": 1341, "ministri": 1337, "minut": [477, 478, 781, 782, 799, 800, 814, 815, 1343, 1347, 1355], "mirror": [0, 1341, 1342], "mirror_combo": 1342, "misalign": [824, 905, 1340, 1358], "mismatch": 1159, "miss": [0, 1156, 1157, 1182], "mit": 1337, "mix": [704, 721, 731, 1342], "mod_cutin": [19, 1342], "mode": [0, 440, 441, 1165, 1169, 1337, 1339, 1353], "model": [0, 1, 3, 4, 5, 7, 8, 11, 12, 13, 15, 17, 18, 23, 28, 29, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 88, 89, 90, 91, 92, 93, 94, 95, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 149, 150, 163, 164, 169, 171, 177, 178, 179, 180, 182, 186, 188, 189, 190, 192, 194, 203, 204, 206, 210, 211, 213, 215, 220, 222, 223, 224, 225, 227, 229, 234, 235, 236, 237, 238, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 353, 357, 359, 360, 361, 362, 363, 365, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 398, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 432, 440, 442, 445, 446, 447, 449, 451, 453, 454, 456, 460, 462, 464, 465, 467, 469, 471, 473, 475, 477, 481, 483, 484, 485, 487, 488, 490, 492, 494, 495, 496, 497, 499, 501, 503, 504, 505, 507, 509, 512, 514, 516, 517, 518, 520, 522, 523, 525, 527, 528, 529, 530, 538, 543, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1032, 1041, 1061, 1068, 1071, 1072, 1074, 1077, 1081, 1087, 1088, 1100, 1108, 1116, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1133, 1250, 1294, 1295, 1317, 1323, 1324, 1327, 1331, 1333, 1336, 1337, 1338, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1354, 1355, 1356, 1357, 1358, 1360, 1361], "model_book": 1361, "model_data": [206, 210, 213, 220, 398, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431], "model_id": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 248, 255, 263, 264, 274, 282, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "model_nam": [234, 246, 562], "model_par": [824, 905], "model_typ": [301, 306, 549, 554], "modelbook": [0, 3, 164, 182, 538, 543, 547, 549, 550, 551, 552, 553, 554, 555, 1123, 1124, 1125, 1327, 1338, 1340, 1341, 1343, 1346, 1349, 1350, 1351, 1352, 1354, 1358], "models_state_sel": 337, "modif": [19, 349, 704, 721, 731, 1340, 1361], "modifi": [47, 49, 50, 53, 54, 58, 60, 63, 64, 67, 68, 72, 88, 91, 93, 96, 102, 108, 222, 227, 234, 245, 248, 253, 255, 261, 263, 264, 265, 266, 267, 268, 288, 290, 291, 295, 299, 301, 307, 309, 313, 317, 319, 323, 340, 343, 346, 349, 372, 374, 375, 440, 446, 451, 454, 456, 465, 471, 473, 475, 477, 484, 490, 492, 496, 501, 505, 509, 518, 525, 530, 562, 563, 567, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 588, 591, 594, 597, 598, 600, 604, 605, 607, 608, 611, 612, 615, 616, 618, 622, 629, 636, 640, 641, 645, 646, 651, 653, 657, 659, 663, 664, 670, 674, 678, 679, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 704, 707, 709, 714, 715, 721, 724, 725, 731, 734, 735, 737, 744, 745, 753, 832, 835, 838, 839, 842, 845, 852, 855, 856, 860, 863, 864, 868, 871, 872, 876, 877, 880, 881, 885, 892, 899, 905, 934, 939, 945, 1068, 1069, 1324, 1340, 1342, 1344, 1348, 1361], "modify_ct": [346, 349, 695, 697, 699, 704, 709, 715, 721, 725, 731, 735, 737, 745, 1342], "modify_cutin": [346, 349, 695, 697, 699, 704, 709, 715, 721, 725, 731, 735, 737, 745], "modify_p": [346, 349, 695, 697, 699, 704, 709, 715, 721, 725, 731, 735, 737, 745, 1342], "modul": [0, 1196, 1198, 1246, 1247, 1331], "modular": 1337, "modulenotfounderror": 1198, "modulespec": 1198, "mol": [532, 534, 766, 1190, 1191, 1193, 1194, 1289, 1332, 1333, 1340, 1342, 1343], "mol_abs_rang": [532, 534], "moment": [1269, 1270, 1297, 1298, 1333], "momentum": [556, 559, 1329], "monin": [1190, 1191, 1193, 1194, 1289, 1333, 1340, 1343], "month": 1347, "more": [0, 1198, 1337, 1338, 1339, 1341, 1342, 1348, 1352, 1353, 1356, 1361], "most": [73, 76, 77, 81, 82, 85, 86, 1198, 1340, 1342, 1358], "mostli": 0, "move": [0, 1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 188, 192, 203, 222, 234, 248, 255, 263, 264, 274, 284, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 447, 451, 454, 456, 467, 471, 473, 475, 477, 485, 490, 492, 497, 501, 509, 520, 525, 528, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 672, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 822, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1353, 1359], "mpi": [0, 412, 1326, 1348], "mpi4pi": [0, 412, 1337, 1339, 1348], "mpiengin": [0, 412, 1326, 1348], "mpiexec": [412, 1348], "mstates_sel": 336, "much": [0, 1347, 1349, 1351, 1353], "multi": [0, 28, 451, 454, 471, 835, 1321, 1328, 1336, 1337, 1338, 1348], "multi_height": 0, "multiheightncst": [0, 451, 452, 453, 454, 1328], "multiheightnctimeseri": [0, 454, 455, 1328, 1338, 1347], "multiheightst": [0, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 1328], "multiheighttimeseri": [0, 471, 472, 1328, 1338, 1343], "multipl": [0, 456, 832, 1328, 1329, 1337, 1338, 1340, 1352, 1361], "multipli": [0, 674, 675, 869, 885, 886, 899, 900, 939, 940, 945, 946, 1329], "multiprocess": [0, 413, 1326, 1348], "multiprocessengin": [0, 413, 1326, 1348], "must": [1137, 1138, 1251, 1345], "muti": 1344, "mw": [131, 137, 347, 396, 397, 735, 1323, 1340, 1343, 1347, 1350, 1356, 1357], "my_jensen": 1346, "my_turbin": 1361, "n": [0, 412, 576, 577, 622, 623, 629, 630, 939, 1062, 1063, 1064, 1065, 1066, 1067, 1102, 1103, 1104, 1105, 1106, 1107, 1132, 1175, 1176, 1177, 1198, 1230, 1231, 1251, 1329, 1331, 1339, 1340, 1343, 1346, 1348, 1351, 1353, 1354, 1355, 1356, 1358, 1361], "n2": [1340, 1346, 1351], "n_a0": 1196, "n_chunks_stat": [209, 210], "n_chunks_target": [209, 210], "n_img_point": [0, 1061, 1100, 1102, 1103, 1104, 1105, 1106, 1107], "n_point": [1, 5, 12, 18, 28, 29, 33, 70, 163, 184, 186, 225, 312, 330, 359, 361, 602, 606, 610, 614, 617, 625, 632, 790, 797, 803, 811, 819, 828, 883, 930, 1076, 1204, 1205, 1214, 1215, 1221, 1222, 1224, 1228, 1229, 1236, 1237, 1244, 1245, 1253, 1342, 1348, 1354], "n_proc": [206, 207, 1345, 1347, 1348, 1350, 1354, 1356, 1358], "n_r_per_x": [833, 844, 849], "n_rotor_axi": [312, 617, 625, 632], "n_rotor_point": [267, 291, 309, 315, 588, 598, 616, 620, 622, 627, 629, 634], "n_rotor_sid": [312, 617, 625, 632], "n_rotor_up": [312, 617, 625, 632], "n_rpoint": [311, 313, 314, 315, 318, 618, 619, 620, 621, 627, 628, 634, 635, 858, 866, 874, 890, 897, 951], "n_sector": [1172, 1175], "n_st_sel": [379, 833, 834, 837, 843, 844, 847, 849, 888, 895, 902, 908, 937, 942, 948, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024], "n_state": [1, 5, 18, 28, 29, 33, 48, 52, 56, 62, 66, 70, 90, 95, 104, 111, 163, 175, 176, 184, 195, 200, 206, 209, 225, 230, 231, 236, 250, 259, 265, 266, 267, 268, 270, 271, 272, 290, 291, 292, 294, 296, 305, 311, 314, 326, 327, 330, 331, 335, 336, 337, 338, 339, 344, 359, 360, 361, 362, 363, 374, 375, 377, 379, 380, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 442, 450, 460, 470, 481, 489, 494, 500, 503, 508, 512, 524, 532, 534, 566, 574, 575, 580, 582, 588, 589, 594, 598, 599, 602, 606, 610, 614, 618, 619, 636, 637, 639, 643, 649, 655, 661, 666, 667, 676, 682, 685, 688, 693, 702, 711, 718, 728, 739, 748, 784, 785, 789, 790, 791, 796, 797, 798, 802, 803, 804, 805, 810, 811, 812, 813, 817, 819, 820, 827, 828, 829, 833, 834, 837, 838, 839, 843, 844, 847, 848, 849, 855, 856, 858, 863, 864, 866, 871, 872, 874, 880, 881, 883, 888, 889, 890, 895, 896, 897, 902, 908, 927, 930, 937, 938, 942, 948, 951, 956, 957, 961, 962, 966, 967, 971, 972, 976, 977, 982, 983, 988, 989, 994, 995, 1000, 1001, 1006, 1007, 1012, 1013, 1018, 1019, 1024, 1025, 1076, 1132, 1328, 1348, 1354], "n_step": 812, "n_target": [56, 104, 175, 176, 206, 209, 265, 266, 268, 271, 290, 296, 305, 327, 331, 332, 335, 362, 363, 374, 375, 377, 379, 380, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 442, 460, 481, 494, 503, 512, 574, 575, 580, 594, 785, 791, 798, 804, 805, 813, 820, 829, 833, 834, 837, 838, 839, 843, 844, 847, 848, 849, 855, 856, 863, 864, 871, 872, 880, 881, 888, 889, 895, 896, 902, 908, 927, 937, 938, 942, 948, 956, 957, 961, 962, 966, 967, 971, 972, 976, 977, 982, 983, 988, 989, 994, 995, 1000, 1001, 1006, 1007, 1012, 1013, 1018, 1019, 1024, 1025], "n_time": [533, 1328, 1344, 1348], "n_tpoint": [56, 104, 265, 266, 267, 268, 270, 271, 290, 291, 292, 294, 296, 305, 327, 331, 333, 362, 374, 375, 377, 379, 380, 442, 460, 481, 494, 503, 512, 574, 575, 580, 582, 588, 589, 594, 598, 599, 785, 791, 798, 804, 813, 820, 829, 838, 839, 855, 856, 863, 864, 871, 872, 880, 881, 956, 957, 961, 962, 966, 967, 971, 972, 976, 977, 982, 983, 988, 989, 994, 995, 1000, 1001, 1006, 1007, 1012, 1013, 1018, 1019, 1024, 1025], "n_turbien": [385, 386], "n_turbin": [46, 48, 52, 62, 66, 90, 95, 111, 195, 201, 230, 231, 236, 250, 259, 267, 270, 272, 291, 292, 294, 311, 314, 326, 327, 344, 360, 363, 382, 388, 390, 437, 438, 439, 450, 470, 489, 500, 508, 524, 566, 582, 588, 589, 598, 599, 618, 619, 636, 637, 639, 643, 649, 655, 661, 666, 667, 676, 682, 685, 688, 693, 702, 711, 718, 728, 739, 748, 784, 789, 796, 802, 805, 810, 812, 817, 827, 858, 866, 874, 890, 897, 951, 1035, 1328, 1341, 1347, 1348, 1350, 1352, 1354], "n_var": 359, "n_x": [1065, 1066, 1067, 1132], "n_y": [1065, 1066, 1067, 1132], "n_yz_per_target": [833, 834, 837, 844, 849, 908], "n_z": 770, "name": [0, 1, 3, 4, 5, 7, 8, 11, 12, 17, 18, 23, 28, 29, 39, 47, 49, 50, 53, 54, 58, 59, 60, 63, 64, 67, 68, 72, 73, 74, 77, 78, 82, 83, 88, 91, 93, 96, 102, 108, 110, 151, 163, 165, 169, 175, 176, 180, 183, 186, 188, 190, 192, 194, 195, 196, 197, 199, 203, 210, 213, 218, 222, 227, 229, 231, 232, 234, 235, 244, 245, 246, 247, 248, 253, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 284, 286, 287, 288, 290, 291, 293, 294, 295, 299, 301, 306, 307, 308, 309, 311, 316, 317, 319, 322, 323, 327, 328, 330, 331, 335, 336, 337, 340, 342, 343, 345, 346, 347, 352, 353, 355, 356, 357, 364, 365, 367, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 389, 396, 397, 405, 411, 416, 419, 426, 431, 432, 435, 436, 438, 439, 440, 441, 446, 447, 449, 451, 452, 454, 455, 456, 458, 465, 467, 469, 471, 473, 475, 477, 484, 485, 488, 490, 492, 493, 496, 497, 499, 501, 502, 505, 507, 509, 511, 518, 520, 522, 523, 525, 526, 528, 529, 530, 532, 533, 534, 537, 545, 547, 548, 549, 552, 554, 555, 556, 559, 562, 563, 567, 568, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 588, 590, 591, 594, 596, 597, 598, 600, 601, 604, 605, 607, 608, 611, 612, 615, 616, 622, 623, 629, 630, 636, 640, 641, 642, 645, 646, 651, 653, 654, 657, 658, 659, 660, 663, 664, 666, 670, 672, 673, 674, 678, 679, 680, 683, 684, 686, 687, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 707, 709, 714, 715, 716, 724, 725, 726, 734, 735, 737, 738, 744, 745, 746, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 773, 774, 776, 777, 780, 781, 787, 794, 799, 807, 814, 822, 823, 824, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 845, 846, 847, 849, 852, 855, 856, 858, 860, 863, 864, 866, 868, 871, 872, 874, 876, 877, 880, 881, 883, 885, 886, 888, 890, 892, 895, 897, 899, 905, 908, 910, 911, 934, 937, 939, 945, 951, 953, 956, 957, 958, 961, 962, 963, 966, 967, 968, 971, 972, 973, 976, 977, 978, 979, 982, 983, 984, 985, 988, 989, 990, 991, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1032, 1034, 1037, 1038, 1039, 1041, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1087, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1121, 1122, 1123, 1124, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1135, 1138, 1141, 1143, 1145, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1182, 1198, 1246, 1247, 1248, 1249, 1253, 1315, 1323, 1325, 1327, 1328, 1331, 1338, 1339, 1340, 1342, 1343, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1356, 1361], "name_": [1156, 1157, 1182], "name_col": 1253, "name_map": [1119, 1121], "name_prefix": [1156, 1162], "name_str": [40, 178, 179, 189, 241, 281, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750], "name_suffix": [1156, 1163], "name_templ": [1156, 1157, 1181, 1182], "nameerror": 1198, "namespac": 1198, "nan": [0, 47, 50, 54, 60, 64, 68, 88, 93, 102, 222, 234, 248, 251, 255, 263, 278, 295, 297, 301, 309, 319, 343, 346, 440, 441, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 532, 534, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 1060, 1196, 1340, 1349, 1350], "nanmax": 1350, "napplic": 1198, "nash": 852, "nation": 1198, "nativ": 1348, "natur": 1340, "nbase": [1162, 1163], "nc": [0, 440, 441, 1080, 1165, 1166, 1168, 1169, 1264, 1345, 1347], "nc_engin": [0, 112, 117, 132, 1323], "nce": 117, "ncurrent": 1348, "ncurv": 1343, "ndarrai": [5, 28, 29, 33, 46, 48, 52, 56, 62, 66, 70, 90, 95, 104, 111, 165, 176, 184, 193, 197, 204, 209, 210, 225, 230, 236, 250, 259, 265, 266, 267, 268, 278, 290, 291, 292, 296, 305, 311, 312, 313, 314, 318, 326, 330, 331, 335, 336, 337, 338, 339, 344, 354, 359, 360, 361, 362, 363, 366, 374, 375, 379, 380, 385, 386, 387, 390, 436, 438, 439, 442, 450, 460, 470, 481, 489, 494, 500, 503, 508, 512, 524, 558, 561, 566, 574, 575, 580, 582, 588, 589, 594, 598, 599, 602, 606, 610, 614, 617, 618, 619, 621, 625, 628, 632, 635, 636, 637, 639, 643, 649, 655, 661, 666, 667, 676, 682, 685, 688, 693, 702, 711, 718, 728, 739, 748, 756, 760, 764, 768, 770, 771, 772, 775, 779, 784, 785, 789, 790, 791, 796, 797, 798, 802, 803, 804, 805, 810, 811, 812, 813, 817, 819, 820, 827, 828, 829, 833, 834, 837, 838, 839, 843, 844, 847, 848, 849, 855, 856, 863, 864, 871, 872, 880, 881, 883, 888, 889, 895, 896, 902, 908, 927, 929, 930, 937, 938, 942, 948, 956, 957, 961, 962, 966, 967, 971, 972, 976, 977, 982, 983, 988, 989, 994, 995, 1000, 1001, 1006, 1007, 1012, 1013, 1018, 1019, 1024, 1025, 1035, 1060, 1065, 1066, 1067, 1076, 1102, 1103, 1104, 1105, 1106, 1107, 1123, 1132, 1196, 1197, 1202, 1203, 1204, 1205, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1242, 1243, 1244, 1245, 1251, 1253, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1341, 1342, 1358], "near_wake_d": [885, 886], "nearest": [1204, 1214, 1221, 1228, 1236, 1244], "neccessari": 0, "neccessarili": [737, 745, 1329], "necessari": 1339, "need": [0, 1, 9, 18, 28, 278, 353, 355, 363, 754, 757, 758, 761, 762, 765, 766, 769, 770, 773, 774, 776, 777, 780, 805, 973, 978, 979, 984, 985, 990, 991, 996, 997, 1002, 1003, 1008, 1009, 1014, 1015, 1020, 1021, 1026, 1037, 1198, 1337, 1338, 1340, 1342, 1347, 1348, 1350, 1351, 1352, 1357], "needs_rews2": [234, 242, 346, 350, 562, 695, 697, 699, 705, 709, 710, 712, 715, 722, 725, 732, 735, 737, 742, 745, 751], "needs_rews3": [234, 243, 346, 351, 562, 695, 697, 699, 706, 709, 710, 713, 715, 723, 725, 733, 735, 737, 743, 745, 752], "neg": [1257, 1331, 1340], "neglect": 1347, "neither": 1350, "net": 1329, "netcdf": [0, 112, 117, 132, 440, 473, 1076, 1077, 1080, 1264, 1323, 1328, 1345, 1361], "netcdf4": 0, "netcfd": 1345, "neutral": [532, 534, 754, 766, 1184, 1185, 1186, 1329, 1331], "never": 1351, "new": [0, 1, 18, 28, 102, 163, 183, 187, 192, 194, 199, 206, 218, 222, 234, 244, 264, 269, 270, 271, 288, 293, 294, 301, 306, 309, 316, 319, 322, 340, 342, 343, 345, 346, 352, 353, 356, 357, 364, 372, 376, 377, 378, 379, 381, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 451, 454, 456, 471, 473, 475, 477, 478, 490, 492, 501, 509, 525, 530, 556, 559, 562, 569, 571, 572, 576, 581, 583, 585, 591, 597, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 858, 860, 866, 868, 874, 876, 877, 885, 890, 892, 897, 899, 905, 934, 939, 945, 951, 953, 956, 958, 961, 963, 966, 968, 971, 973, 976, 979, 982, 985, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 1032, 1041, 1061, 1068, 1071, 1074, 1077, 1081, 1087, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1198, 1337, 1339, 1340, 1341, 1342, 1343, 1344, 1346, 1348, 1349, 1352, 1355, 1357, 1361], "new_branch": 1337, "new_chunk_stor": [1, 18, 28, 163, 187], "new_cl": [1248, 1331], "new_farm_wake_delta": [264, 270, 569, 571, 572], "new_inst": [1249, 1331], "new_point_data": [1, 18, 28, 163, 184], "new_point_wake_delta": [264, 271, 569, 571, 572], "new_wake_delta": [288, 294, 340, 372, 377, 576, 581, 583, 585, 591, 597, 832, 835, 842, 845, 852, 858, 860, 866, 868, 874, 876, 877, 883, 885, 890, 892, 897, 899, 905, 934, 939, 945, 951], "newa": 1347, "newlin": [1198, 1331], "next": [28, 31, 1198, 1341, 1342, 1347, 1348, 1349, 1350, 1353, 1354, 1356, 1357], "nfarm": [1347, 1350, 1353, 1354, 1355, 1356, 1357, 1358], "nidentifi": 1198, "niel": [868, 876, 1341], "nint": [622, 623, 629, 630], "no_ground": [1340, 1346], "nobject": 1198, "node": [0, 1337, 1348], "noground": [0, 571, 1329, 1346], "nomin": [346, 347, 1043, 1350], "non": [0, 833, 834, 837, 843, 844, 847, 849, 888, 895, 902, 908, 937, 942, 948, 1132, 1257, 1331, 1337, 1339, 1344, 1348, 1351], "none": [0, 1, 3, 4, 5, 12, 18, 19, 28, 29, 40, 45, 47, 50, 54, 55, 56, 60, 61, 64, 68, 73, 74, 75, 77, 78, 80, 82, 83, 84, 88, 89, 93, 97, 101, 102, 106, 163, 164, 165, 168, 175, 176, 178, 184, 186, 187, 188, 190, 192, 195, 196, 198, 199, 203, 206, 207, 212, 220, 221, 222, 226, 231, 233, 234, 236, 248, 255, 263, 264, 272, 274, 278, 284, 286, 288, 295, 301, 305, 309, 310, 311, 313, 319, 320, 324, 327, 329, 336, 337, 338, 339, 340, 343, 346, 347, 353, 357, 359, 363, 365, 366, 367, 368, 372, 378, 382, 383, 387, 398, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 432, 434, 436, 437, 438, 439, 440, 441, 444, 447, 449, 451, 452, 454, 456, 458, 463, 466, 467, 469, 471, 473, 475, 477, 478, 482, 485, 488, 490, 491, 492, 497, 499, 501, 502, 509, 511, 515, 519, 520, 523, 525, 528, 529, 530, 533, 537, 538, 540, 541, 542, 549, 551, 554, 555, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 592, 597, 600, 605, 608, 609, 612, 616, 618, 622, 629, 636, 641, 646, 653, 659, 660, 664, 672, 673, 674, 679, 684, 687, 690, 691, 695, 697, 699, 700, 709, 715, 716, 725, 726, 735, 737, 738, 745, 746, 754, 758, 762, 766, 770, 771, 774, 777, 781, 782, 787, 788, 794, 799, 800, 805, 807, 814, 815, 822, 823, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 886, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 974, 979, 980, 985, 986, 991, 992, 997, 998, 1003, 1004, 1009, 1010, 1015, 1016, 1021, 1022, 1027, 1028, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1048, 1055, 1056, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1085, 1087, 1088, 1089, 1090, 1094, 1095, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1116, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1130, 1132, 1133, 1135, 1136, 1141, 1143, 1145, 1149, 1153, 1157, 1196, 1198, 1216, 1218, 1223, 1225, 1230, 1232, 1246, 1250, 1251, 1253, 1328, 1331, 1340, 1341, 1342, 1345, 1346, 1347, 1348, 1350, 1353, 1354, 1355, 1356, 1357, 1358], "nor": 1350, "normal": [525, 526, 532, 534, 612, 613, 794, 1034, 1198, 1254, 1329, 1331, 1343, 1350, 1357], "normalize_d": 1034, "normalize_i": [1102, 1103, 1104, 1105, 1106, 1107], "normalize_v": [1102, 1103, 1104, 1105, 1106, 1107], "normalize_x": [1102, 1103, 1104, 1105, 1106, 1107], "normalize_z": [1102, 1103, 1104, 1105, 1106, 1107], "north": [438, 1063, 1064, 1066, 1067, 1103, 1104, 1106, 1107, 1352], "notadirectoryerror": 1198, "note": [378, 1073, 1329, 1339, 1340, 1343, 1344, 1345, 1347, 1348, 1351, 1352, 1354, 1358], "notebook": [0, 1336, 1342, 1348, 1355, 1360], "noth": 1340, "notic": [0, 1340, 1342, 1344, 1346, 1347, 1348, 1349, 1350, 1352, 1353, 1355, 1356, 1358, 1361], "notimpl": 1198, "notimplementederror": 1198, "now": [0, 1337, 1340, 1342, 1344, 1345, 1346, 1347, 1349, 1350, 1352, 1353, 1354, 1355, 1357, 1358, 1361], "np": [197, 267, 278, 291, 330, 331, 588, 598, 1055, 1060, 1196, 1198, 1253, 1341, 1342, 1344, 1345, 1349, 1350, 1353, 1354, 1355, 1358], "npoint": [1341, 1342, 1354], "nrel": [1352, 1354, 1361], "nrel5": [1343, 1350, 1354], "nrel5mw": [1338, 1343, 1345, 1346, 1347, 1350, 1354, 1356, 1357, 1358], "nresult": 1356, "nstate": 1343, "nthe": 1198, "nthi": 1198, "null_typ": 1346, "nulltyp": [0, 709, 710, 711, 712, 713, 714, 1329, 1346], "number": [0, 1, 12, 18, 19, 25, 28, 44, 102, 109, 163, 184, 186, 191, 195, 200, 201, 206, 207, 209, 210, 222, 228, 231, 272, 309, 315, 319, 325, 327, 332, 333, 382, 388, 437, 438, 439, 440, 448, 451, 454, 456, 468, 471, 473, 475, 477, 486, 490, 492, 498, 501, 506, 509, 521, 525, 530, 532, 533, 534, 576, 577, 616, 620, 622, 623, 627, 629, 630, 634, 674, 704, 721, 731, 781, 782, 906, 1034, 1039, 1062, 1063, 1064, 1065, 1066, 1067, 1083, 1085, 1102, 1103, 1104, 1105, 1106, 1107, 1118, 1132, 1172, 1175, 1176, 1177, 1251, 1315, 1335, 1340, 1344, 1346, 1348], "numer": [770, 868, 876, 1329, 1340], "numpi": [0, 5, 28, 29, 33, 46, 48, 52, 56, 62, 66, 70, 90, 95, 104, 111, 165, 176, 184, 193, 195, 204, 209, 210, 225, 230, 236, 250, 259, 265, 266, 267, 268, 278, 290, 291, 292, 296, 305, 311, 312, 313, 314, 318, 326, 335, 336, 337, 338, 339, 344, 354, 359, 360, 361, 362, 363, 366, 374, 375, 379, 380, 385, 386, 387, 390, 414, 436, 438, 439, 442, 450, 460, 470, 481, 489, 494, 500, 503, 508, 512, 524, 558, 561, 566, 574, 575, 580, 582, 588, 589, 594, 598, 599, 602, 606, 610, 614, 617, 618, 619, 621, 625, 628, 632, 635, 636, 637, 639, 643, 649, 655, 661, 666, 667, 676, 682, 685, 688, 693, 702, 711, 718, 728, 739, 748, 756, 760, 764, 768, 770, 771, 772, 775, 779, 784, 785, 789, 790, 791, 796, 797, 798, 802, 803, 804, 805, 810, 811, 812, 813, 817, 819, 820, 827, 828, 829, 833, 834, 837, 838, 839, 843, 844, 847, 848, 849, 855, 856, 863, 864, 871, 872, 880, 881, 883, 888, 889, 895, 896, 902, 908, 927, 929, 930, 937, 938, 942, 948, 956, 957, 961, 962, 966, 967, 971, 972, 976, 977, 982, 983, 988, 989, 994, 995, 1000, 1001, 1006, 1007, 1012, 1013, 1018, 1019, 1024, 1025, 1035, 1065, 1066, 1067, 1076, 1102, 1103, 1104, 1105, 1106, 1107, 1123, 1132, 1196, 1197, 1198, 1202, 1203, 1204, 1205, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1242, 1243, 1244, 1245, 1251, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1324, 1326, 1341, 1342, 1344, 1345, 1348, 1349, 1350, 1353, 1354, 1355, 1358], "numpyengin": [0, 414, 415, 416, 1326, 1348], "nwhich": 1198, "nx": [1172, 1176], "ny": [1172, 1177, 1349], "nygaard": 939, "o": [0, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1350, 1351, 1352, 1354, 1355, 1356, 1357, 1358, 1361], "o0": 1350, "o1": 1350, "o5eosxa": 852, "obj": [537, 541, 1160, 1249, 1250, 1328, 1331], "object": [0, 1, 18, 28, 40, 45, 47, 50, 54, 60, 64, 68, 88, 93, 102, 120, 121, 122, 163, 165, 175, 176, 178, 179, 184, 192, 195, 198, 199, 203, 210, 212, 213, 220, 221, 222, 231, 233, 234, 241, 248, 255, 263, 264, 268, 272, 274, 278, 281, 282, 288, 295, 301, 309, 319, 321, 327, 329, 330, 331, 340, 343, 346, 353, 357, 365, 372, 375, 378, 405, 408, 411, 416, 419, 426, 431, 440, 443, 445, 451, 453, 454, 456, 461, 464, 471, 473, 475, 477, 490, 492, 495, 501, 509, 513, 517, 525, 527, 530, 537, 538, 541, 546, 548, 549, 554, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 603, 605, 608, 612, 616, 622, 629, 636, 641, 644, 646, 653, 659, 664, 669, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 720, 725, 730, 735, 737, 741, 745, 750, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 839, 842, 845, 852, 856, 860, 864, 868, 872, 876, 877, 881, 885, 892, 899, 905, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1027, 1028, 1034, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1085, 1089, 1119, 1121, 1130, 1132, 1147, 1148, 1149, 1152, 1153, 1155, 1156, 1157, 1160, 1182, 1198, 1200, 1210, 1218, 1225, 1232, 1240, 1247, 1248, 1249, 1250, 1256, 1322, 1327, 1328, 1331, 1338, 1340, 1343, 1345, 1346, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1356, 1357, 1358, 1361], "obligatori": 1060, "observ": 1342, "obtain": [1343, 1347, 1357], "obukhof": 1340, "obukhov": [1190, 1191, 1193, 1194, 1289, 1333, 1343], "obvious": 1353, "ocl": [537, 1328], "oct": 1198, "od": 1350, "oder": 1348, "odict": [537, 1328], "odir": 539, "off": [1342, 1348, 1351, 1352], "offer": [1347, 1348, 1355], "offset": [0, 438], "offset_deg": 438, "ofil": [1255, 1331], "often": [1340, 1343, 1348], "ok": [1342, 1344, 1355], "older": [0, 1359], "onam": 1255, "onc": [0, 1, 576, 664, 665, 1339, 1344, 1345, 1353, 1354, 1355, 1358], "one": [0, 255, 259, 301, 305, 313, 318, 473, 475, 490, 540, 542, 583, 585, 591, 592, 618, 621, 622, 623, 628, 635, 930, 1116, 1126, 1196, 1198, 1259, 1328, 1329, 1330, 1331, 1338, 1340, 1342, 1343, 1347, 1348, 1349, 1357, 1358, 1361], "onepointflowmultiheightnctimeseri": [0, 473, 474, 1328], "onepointflowmultiheighttimeseri": [0, 475, 476, 1328], "onepointflowst": [0, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 1328], "onepointflowtimeseri": [0, 490, 491, 1328, 1338, 1344], "ones": [1196, 1348], "onli": [0, 1, 18, 28, 163, 184, 311, 359, 432, 440, 441, 576, 581, 664, 665, 787, 842, 843, 845, 848, 860, 861, 868, 869, 877, 878, 885, 889, 892, 896, 899, 902, 934, 938, 939, 942, 945, 946, 948, 1156, 1157, 1182, 1196, 1329, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1346, 1348, 1349, 1351, 1354, 1355, 1358], "onlinelibrari": [868, 876], "onset": [825, 905, 906, 911, 926], "onto": [674, 675], "open": [0, 440, 441, 893, 1198, 1335], "open_dataset": [451, 452, 1347], "opencv": 1196, "opening_angl": [892, 893, 1346], "openmpi": 1348, "oper": [263, 380, 957, 962, 967, 972, 977, 983, 989, 995, 1001, 1007, 1013, 1019, 1025, 1041, 1057, 1058, 1059, 1324, 1340, 1350], "opposit": 1341, "opt": [0, 1317, 1337, 1339, 1359], "optim": [0, 939, 1317, 1335, 1337, 1339, 1340, 1348], "optin": [554, 1253], "option": [0, 3, 4, 5, 12, 19, 20, 29, 33, 40, 45, 55, 60, 61, 73, 74, 78, 83, 89, 101, 102, 120, 121, 122, 164, 165, 166, 167, 168, 175, 176, 178, 179, 183, 184, 185, 186, 187, 188, 190, 194, 196, 198, 199, 204, 206, 207, 212, 217, 218, 220, 221, 222, 223, 232, 233, 236, 244, 254, 259, 269, 273, 278, 284, 286, 288, 293, 300, 305, 306, 310, 311, 313, 316, 319, 322, 324, 328, 329, 330, 331, 336, 337, 338, 339, 342, 345, 347, 352, 356, 359, 363, 364, 366, 367, 376, 381, 382, 387, 395, 399, 401, 403, 405, 407, 408, 410, 411, 415, 416, 418, 419, 423, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 449, 451, 452, 454, 455, 456, 458, 466, 467, 469, 471, 473, 474, 475, 476, 477, 478, 485, 488, 490, 491, 492, 493, 497, 499, 501, 502, 509, 511, 519, 520, 523, 525, 526, 528, 529, 530, 532, 533, 534, 537, 538, 540, 541, 542, 551, 554, 555, 566, 584, 592, 609, 618, 623, 630, 637, 642, 660, 672, 673, 675, 691, 696, 698, 699, 700, 710, 715, 716, 725, 726, 736, 737, 738, 745, 746, 755, 759, 763, 767, 771, 782, 788, 795, 799, 800, 805, 808, 815, 822, 823, 825, 886, 893, 900, 905, 906, 935, 940, 946, 1028, 1030, 1033, 1034, 1037, 1039, 1043, 1048, 1055, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1075, 1076, 1078, 1079, 1080, 1082, 1085, 1086, 1087, 1088, 1089, 1091, 1094, 1096, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1117, 1118, 1120, 1121, 1123, 1124, 1125, 1126, 1128, 1130, 1131, 1132, 1135, 1136, 1145, 1147, 1148, 1152, 1153, 1154, 1156, 1157, 1159, 1170, 1171, 1182, 1200, 1204, 1210, 1214, 1218, 1221, 1225, 1228, 1232, 1236, 1240, 1244, 1246, 1249, 1250, 1251, 1252, 1253, 1256, 1264, 1330, 1337, 1340, 1347, 1348, 1352, 1355, 1356, 1360], "orbit": 892, "ord": 1198, "order": [0, 1, 2, 18, 20, 21, 28, 38, 50, 56, 142, 236, 265, 266, 267, 278, 290, 291, 311, 313, 357, 359, 360, 361, 362, 363, 366, 374, 379, 562, 574, 575, 580, 588, 594, 598, 618, 737, 745, 781, 784, 785, 787, 789, 790, 791, 794, 796, 797, 798, 799, 802, 803, 804, 805, 807, 810, 811, 813, 814, 817, 819, 820, 824, 827, 828, 829, 833, 834, 837, 838, 843, 844, 847, 848, 849, 855, 863, 871, 880, 888, 889, 895, 896, 902, 908, 927, 937, 938, 942, 948, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024, 1290, 1291, 1292, 1318, 1319, 1323, 1329, 1333, 1338, 1340, 1342, 1344, 1348, 1350, 1352, 1353, 1354], "order_inv": [1291, 1333, 1342, 1348, 1353, 1354], "order_ssel": [1292, 1333, 1342, 1348, 1353, 1354], "orderi": [142, 1323], "org": [0, 559, 824, 877, 885, 899, 905, 911, 939, 945, 1009, 1198, 1335], "organ": [1340, 1346], "orient": [1062, 1063, 1064, 1090, 1091, 1352, 1353], "origin": [28, 102, 103, 199, 379, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024, 1102, 1103, 1104, 1105, 1106, 1107, 1198, 1239, 1337, 1340, 1344, 1348], "orst": 0, "orthogon": [1230, 1340], "oscil": 1344, "oserror": 1198, "other": [0, 340, 341, 372, 373, 378, 572, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945, 1116, 1198, 1329, 1330, 1337, 1339, 1340, 1344, 1345, 1346, 1348, 1350, 1352, 1358], "otherwis": [278, 1141, 1348], "our": [1344, 1345, 1346, 1347, 1349, 1350, 1352, 1353, 1357, 1358], "out": [120, 121, 122, 622, 1198, 1254, 1257, 1329, 1340, 1342, 1344, 1346, 1347, 1348, 1349, 1352, 1353, 1355, 1358, 1361], "out0": [636, 637], "out1": [636, 637], "out_coord": 210, "out_dir": [0, 133, 1068, 1069, 1133, 1323], "out_fname_fun": [1068, 1069, 1133], "out_kwarg": [1255, 1331], "out_var": [47, 50, 54, 60, 64, 68, 88, 93, 102, 206, 210, 213, 222, 234, 248, 254, 255, 263, 295, 300, 301, 309, 319, 343, 346, 398, 404, 405, 406, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 637, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745], "outer": [0, 1353], "outi": [636, 637], "output": [0, 1, 4, 5, 28, 29, 47, 48, 49, 50, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 72, 88, 90, 91, 93, 95, 96, 102, 104, 108, 112, 118, 121, 133, 203, 204, 205, 210, 213, 222, 225, 227, 234, 236, 245, 248, 250, 252, 253, 254, 255, 259, 261, 263, 278, 295, 296, 298, 299, 300, 301, 305, 307, 309, 317, 319, 323, 343, 344, 346, 363, 384, 405, 411, 416, 419, 426, 431, 440, 441, 442, 446, 451, 452, 454, 456, 458, 460, 465, 471, 473, 475, 477, 481, 484, 490, 492, 494, 496, 501, 502, 503, 505, 509, 511, 512, 518, 525, 530, 537, 538, 539, 540, 542, 562, 563, 566, 567, 600, 602, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 616, 622, 629, 636, 637, 639, 640, 641, 642, 643, 645, 646, 649, 651, 653, 655, 657, 659, 661, 663, 664, 667, 670, 674, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 697, 699, 702, 707, 709, 711, 714, 715, 718, 724, 725, 728, 734, 735, 737, 739, 744, 745, 748, 753, 805, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1255, 1264, 1282, 1315, 1317, 1322, 1323, 1328, 1333, 1337, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1361], "output_coord": [47, 50, 54, 60, 64, 68, 88, 93, 102, 203, 205, 222, 234, 248, 252, 255, 263, 295, 298, 301, 309, 319, 343, 346, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745], "output_dir": [0, 112, 118, 133, 538, 1323], "output_farm_var": [47, 49, 50, 53, 60, 63, 64, 67, 88, 91, 93, 96, 234, 245, 248, 253, 255, 261, 263, 309, 317, 343, 346, 562, 563, 567, 616, 622, 629, 636, 640, 641, 645, 646, 651, 653, 657, 659, 663, 664, 670, 674, 678, 679, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 707, 709, 714, 715, 724, 725, 734, 735, 737, 744, 745, 753], "output_point_var": [54, 58, 68, 72, 102, 108, 222, 227, 295, 299, 301, 307, 319, 323, 440, 446, 451, 454, 456, 465, 471, 473, 475, 477, 484, 490, 492, 496, 501, 505, 509, 518, 525, 530, 600, 604, 605, 607, 608, 611, 612, 615], "output_typ": [1032, 1041, 1061, 1068, 1071, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1361], "output_var": [49, 53, 58, 63, 67, 72, 91, 96, 108, 227, 245, 253, 261, 299, 307, 317, 323, 440, 441, 446, 452, 456, 458, 465, 471, 484, 496, 505, 509, 511, 518, 530, 567, 600, 601, 604, 607, 611, 615, 640, 641, 642, 645, 651, 657, 663, 670, 674, 675, 678, 683, 686, 689, 694, 707, 714, 724, 734, 744, 753, 1340, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1355, 1356, 1357, 1358, 1361], "outsid": [622, 1329, 1340, 1345], "outside_": [1200, 1210, 1218, 1225, 1232, 1240], "ovar": [440, 456, 509, 600, 674], "over": [0, 327, 335, 492, 945, 1041, 1046, 1047, 1076, 1196, 1284, 1328, 1333, 1334, 1340, 1347, 1348, 1351, 1353, 1357], "overal": [0, 28, 37, 38, 43, 1353], "overflowerror": 1198, "overlap": [576, 591, 622, 623, 1340, 1351], "overload": [0, 1320, 1321], "overrul": [538, 540, 1361], "overview": [0, 1337, 1340, 1354], "overwrit": [57, 71, 107, 189, 279, 336, 337, 668, 703, 792, 830, 840, 850, 857, 865, 873, 882, 903, 909, 931, 943, 950], "overwritten": 346, "ow": 1337, "own": [0, 945, 946, 1354], "p": [0, 1, 2, 18, 28, 646, 700, 715, 716, 726, 735, 738, 746, 1073, 1126, 1165, 1167, 1198, 1279, 1282, 1283, 1293, 1314, 1316, 1333, 1337, 1340, 1342, 1343, 1345, 1347, 1348, 1350, 1352, 1354, 1355, 1356, 1357, 1358], "p0": [1347, 1350, 1356, 1357], "p75": [0, 1041, 1048], "p90": [0, 1041, 1048], "p_": 1358, "p_ct": [700, 716, 726, 737, 738, 746], "p_lim": [646, 647, 1346], "p_max": [1124, 1126, 1199, 1202, 1206, 1208, 1212, 1216, 1219, 1223, 1226, 1230, 1234, 1238, 1242, 1350], "p_min": [1199, 1202, 1203, 1206, 1208, 1212, 1213, 1216, 1219, 1220, 1223, 1226, 1227, 1230, 1234, 1235, 1238, 1242, 1243], "p_nearest": [1204, 1214, 1221, 1228, 1236, 1244], "p_nom": [1041, 1043], "p_nomin": [0, 346, 347, 1055, 1265, 1279, 1333, 1340, 1346, 1348], "p_p": [700, 716, 726, 738, 746, 1358], "p_rate": 0, "p_unit": [0, 137, 346, 347, 1323, 1340, 1346, 1348], "p_unit_w": 1055, "pa_alpha": [1294, 1333], "pa_beta": [1295, 1333], "packag": [0, 394, 1135, 1137, 1138, 1198, 1246, 1317, 1327, 1328, 1329, 1331, 1334, 1337, 1338, 1339, 1340, 1343, 1346, 1348, 1354, 1358, 1359, 1360, 1361], "page": [0, 1335], "panda": [0, 324, 432, 433, 452, 456, 458, 466, 509, 511, 519, 532, 533, 534, 600, 601, 641, 642, 659, 660, 674, 675, 695, 696, 697, 698, 699, 700, 715, 716, 725, 726, 737, 738, 745, 746, 771, 1032, 1041, 1048, 1050, 1052, 1053, 1054, 1055, 1058, 1059, 1061, 1068, 1073, 1074, 1077, 1078, 1081, 1087, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1165, 1170, 1171, 1174, 1198, 1328, 1329, 1331, 1338, 1344, 1349, 1350, 1352, 1354, 1356, 1358], "pandasfilehelp": [1165, 1166, 1167, 1168, 1169, 1170, 1171, 1331], "panel": [1344, 1355], "paper": [852, 1337], "par": [234, 235, 562, 911, 919, 932, 1090, 1091, 1132, 1159], "parallel": [0, 47, 50, 54, 60, 64, 68, 88, 93, 102, 203, 222, 234, 248, 254, 255, 263, 295, 300, 301, 309, 319, 343, 346, 417, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 1317, 1326, 1337, 1340, 1344, 1361], "paramer": [696, 736], "paramet": [0, 18, 27, 28, 54, 203, 234, 255, 301, 365, 409, 440, 451, 456, 477, 509, 562, 563, 690, 699, 715, 725, 735, 737, 745, 770, 781, 799, 807, 814, 824, 885, 892, 899, 905, 911, 932, 934, 939, 945, 1156, 1165, 1181, 1285, 1294, 1295, 1324, 1328, 1329, 1331, 1333, 1337, 1338, 1340, 1342, 1346, 1347, 1348, 1354, 1356, 1357, 1360], "parcel": 1353, "parent": [1343, 1361], "park": 939, "pars": [0, 396, 397, 440, 441, 1325, 1327, 1346], "pars_boundari": [1200, 1210, 1218, 1225, 1232, 1240], "pars_dist": [1200, 1210, 1218, 1225, 1232, 1240], "parse_d": [471, 472, 530, 531, 1344], "parse_pct_file_nam": [396, 1325, 1327], "parse_pct_two_fil": [397, 1325, 1327], "parsed_data": [396, 397], "part": [241, 281, 321, 445, 453, 464, 495, 517, 527, 543, 555, 576, 603, 644, 669, 720, 730, 741, 750, 1182, 1328, 1340, 1343, 1344, 1347, 1352], "partial": [0, 1, 3, 11, 18, 28, 265, 270, 288, 293, 549, 552, 574, 576, 581, 583, 585, 591, 597, 832, 835, 1324, 1329, 1334, 1336, 1337, 1347, 1348, 1351, 1357], "partial_wak": [0, 1, 3, 11, 18, 28, 549, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 1341, 1342, 1346, 1347, 1349, 1355, 1357], "partialaxiwak": [0, 576, 577, 578, 579, 580, 832, 1329, 1340, 1346, 1348], "partialcentr": [0, 576, 581, 582, 591, 1329, 1340, 1346], "partialdistslicedwak": 835, "partialgrid": [0, 583, 584, 1329, 1340, 1346], "partialsegreg": [0, 583, 585, 586, 587, 588, 589, 590, 1329, 1340], "partialtophat": [591, 592, 593, 594, 595, 596, 1329, 1340, 1346], "partialwakemodel": 549, "partialwakesmodel": [1, 11, 265, 270, 288, 289, 290, 291, 292, 293, 294, 574, 585, 597, 1324, 1329], "particular": [1337, 1348, 1356], "pass": [1145, 1340, 1344, 1348, 1361], "passiv": 1344, "path": [116, 118, 119, 120, 121, 122, 394, 396, 397, 434, 435, 451, 452, 456, 458, 509, 511, 534, 538, 539, 551, 659, 660, 674, 675, 696, 698, 699, 700, 715, 716, 725, 726, 736, 737, 738, 745, 746, 1032, 1041, 1061, 1068, 1070, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1135, 1139, 1140, 1141, 1146, 1170, 1171, 1172, 1173, 1223, 1247, 1252, 1253, 1254, 1255, 1264, 1322, 1331, 1337, 1340, 1356, 1361], "pathcollect": [1034, 1056], "pathlib": [116, 118, 119, 120, 121, 122, 396, 397, 538, 539, 1068, 1070, 1135, 1141, 1172, 1343], "pattern": [0, 440, 441, 1340, 1350], "pcolormesh": [1118, 1130], "pct_file": [549, 551], "pctcurv": 1343, "pctfile": [695, 696, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 735, 736, 1329, 1340, 1343, 1346, 1348, 1352, 1354, 1361], "pctfromtwo": [697, 698, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 1329], "pctsinglefil": 0, "pcttwofil": 0, "pd": [1086, 1131, 1198, 1344, 1349, 1350, 1352, 1358], "pd_file_read_par": [642, 660, 675, 696, 700, 716], "pd_file_read_pars_cp": 698, "pd_file_read_pars_ct": [698, 726, 738, 746], "pd_file_read_pars_p": [726, 738, 746], "pd_read_par": [456, 458, 511, 601, 771], "pdata": [68, 70, 330, 331, 600, 602, 605, 606, 608, 610, 612, 614, 883], "pdf": [852, 892, 939, 945, 1009], "pedersen": [939, 1340], "pendingdeprecationwarn": 1198, "per": [0, 153, 313, 327, 333, 456, 540, 542, 618, 622, 623, 629, 630, 832, 1041, 1050, 1052, 1053, 1054, 1055, 1058, 1059, 1323, 1328, 1348, 1352], "percent": 1085, "perform": [1337, 1348, 1349], "period": [533, 660], "permissionerror": 1198, "persist": 431, "persist_fdata": 5, "persist_mdata": 5, "persist_pdata": 5, "person": 0, "persu": 1352, "physic": [1338, 1348], "pi": 1344, "pick": [766, 1062, 1063, 1064, 1340, 1342], "pii": [860, 868, 876], "pip": [0, 1337, 1348, 1359, 1361, 1362], "pip_hint": [1246, 1331], "pirrung": 559, "place": [1062, 1063, 1064, 1065, 1066, 1067, 1345, 1350], "placehold": [102, 1321], "plain": 0, "plan": [0, 1339, 1361], "plane": [0, 312, 572, 617, 625, 632, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1132, 1230, 1329, 1331, 1340, 1341, 1353], "playground": 1349, "pleas": [1335, 1337, 1339, 1348, 1362], "plot": [0, 1032, 1034, 1037, 1038, 1039, 1040, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1081, 1083, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1095, 1097, 1116, 1118, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1200, 1210, 1218, 1225, 1232, 1240, 1330, 1341, 1342, 1344, 1345, 1347, 1349, 1350, 1352, 1354, 1356, 1357, 1358], "plot_curv": [1124, 1126, 1343, 1350], "plot_map": [1116, 1118, 1350, 1361], "plotli": 0, "plotly_help": 0, "plt": [1034, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1085, 1118, 1126, 1130, 1132, 1133, 1134, 1198, 1330, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "plu": [380, 957, 962, 967, 972, 977, 983, 989, 995, 1001, 1007, 1013, 1019, 1025, 1253, 1256, 1353], "plug": [1338, 1344], "plugin": [0, 28, 29, 97, 1090, 1095, 1321, 1330, 1353], "pmask": [1346, 1350, 1352], "pmax_": 1350, "pmax_0": 1350, "pmax_1": 1350, "pmax_2": 1350, "pmax_3": 1350, "pmax_4": 1350, "pmax_arg": 1126, "pmodel": 222, "png": 1361, "point": [0, 1, 5, 12, 18, 26, 28, 29, 33, 36, 43, 54, 56, 68, 70, 101, 104, 123, 134, 135, 138, 139, 152, 153, 156, 163, 168, 175, 176, 184, 186, 206, 207, 209, 213, 220, 222, 223, 225, 264, 265, 266, 267, 270, 271, 278, 288, 290, 291, 292, 294, 295, 296, 297, 301, 305, 306, 309, 311, 312, 313, 314, 315, 318, 327, 330, 331, 333, 335, 340, 354, 357, 361, 362, 363, 372, 374, 377, 378, 379, 382, 387, 390, 398, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 436, 438, 439, 442, 460, 473, 475, 477, 480, 481, 490, 494, 503, 512, 537, 540, 542, 549, 569, 571, 572, 574, 575, 576, 577, 580, 581, 582, 583, 585, 588, 589, 591, 594, 597, 598, 599, 602, 606, 610, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 627, 628, 629, 630, 632, 634, 635, 781, 782, 785, 787, 790, 791, 794, 797, 798, 799, 800, 803, 804, 805, 807, 808, 811, 813, 814, 815, 819, 820, 824, 828, 829, 832, 833, 834, 835, 837, 838, 842, 843, 844, 845, 847, 848, 849, 852, 855, 858, 860, 863, 866, 868, 871, 874, 876, 877, 880, 883, 885, 888, 889, 890, 892, 895, 896, 897, 899, 902, 905, 908, 927, 934, 937, 938, 939, 942, 945, 948, 951, 953, 956, 958, 961, 963, 966, 968, 971, 973, 976, 979, 982, 985, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 1062, 1063, 1064, 1065, 1066, 1067, 1074, 1075, 1076, 1081, 1082, 1083, 1087, 1089, 1094, 1095, 1096, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1122, 1123, 1172, 1176, 1177, 1199, 1202, 1203, 1204, 1205, 1206, 1208, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1242, 1243, 1244, 1245, 1253, 1258, 1259, 1318, 1319, 1323, 1324, 1328, 1329, 1330, 1331, 1337, 1338, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1354, 1355, 1356, 1357, 1358, 1360], "point_data": [206, 213, 220, 398, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431], "point_dict_exterior": 1253, "point_dict_interior": 1253, "point_model": [1, 5, 18, 222, 223, 549, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 1346], "point_result": [5, 28, 33, 43, 168, 537, 540, 542, 1076, 1081, 1082, 1083, 1341, 1342, 1354], "pointcalcul": [0, 1074, 1075, 1076, 1330], "pointdatamodel": [5, 54, 68, 223, 224, 295, 296, 297, 298, 299, 300, 301, 302, 304, 319, 549, 600, 605, 608, 612, 1319, 1324, 1329], "pointdatamodellist": [54, 55, 222, 301, 302, 303, 304, 305, 306, 307, 308, 1324], "points_dist": [1199, 1204, 1206, 1208, 1214, 1216, 1221, 1223, 1228, 1230, 1236, 1238, 1244], "points_insid": [1199, 1205, 1206, 1208, 1215, 1216, 1222, 1223, 1229, 1230, 1237, 1238, 1245], "pointwakescalcul": [54, 55, 56, 57, 58, 59, 1319], "polar": [559, 1352, 1361], "poli": 1223, "polygon": [1223, 1224, 1253, 1331], "polynom_solv": 1196, "polynomi": [0, 559, 1196, 1329, 1331], "pool": [0, 417, 1326, 1342, 1344, 1348], "poolengin": [413, 417, 418, 419, 421, 428, 1326], "pop": [112, 136, 195, 231, 272, 327, 1143, 1148, 1149, 1323], "pop_item": [112, 195, 231, 272, 327, 1143, 1148, 1149], "popul": [136, 1323, 1343], "port": 1358, "porteagel": [0, 1294, 1295, 1333], "porteagel_linear": 1358, "porteagelwak": 0, "port\u00e9": [824, 899, 905, 911, 1340], "posit": [0, 336, 337, 339, 390, 1132, 1251, 1331, 1338, 1340, 1344, 1349, 1350, 1355], "posixpath": 1343, "possibl": [1338, 1344, 1352, 1361], "possibli": [206, 216, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 622, 1329], "post": [236, 1337, 1348, 1360], "post_rotor": 26, "post_rotor_model": 234, "potenti": [852, 1340, 1341], "poulsen": 939, "pow": [963, 964, 997, 998, 1003, 1004, 1198, 1346], "power": [0, 137, 346, 347, 349, 547, 551, 646, 647, 695, 697, 699, 700, 704, 715, 716, 721, 725, 726, 731, 735, 737, 738, 745, 746, 963, 964, 997, 998, 1003, 1004, 1041, 1043, 1048, 1049, 1055, 1124, 1126, 1267, 1288, 1293, 1323, 1329, 1330, 1333, 1336, 1337, 1338, 1340, 1347, 1352, 1356, 1357, 1358], "power_mask": 0, "power_uncert": [1041, 1048], "powermask": [0, 646, 647, 648, 649, 650, 651, 652, 1329, 1340, 1346, 1350], "ppar": [1095, 1096], "pre": [97, 101, 234, 236, 860, 861, 868, 869, 877, 878, 1062, 1063, 1064, 1090, 1094, 1095, 1099, 1339, 1340, 1350, 1355, 1360], "pre_load": [0, 1337], "pre_rotor": [26, 47, 234, 236, 248, 249, 263, 343, 562, 664, 665, 684, 687, 1340, 1349], "pre_rotor_model": 234, "pre_rotor_onli": [860, 861, 868, 869, 877, 878], "pre_str": 1250, "pre_wak": [26, 1342], "precalc": [1062, 1063, 1064], "predecessor": [0, 1337], "predict": [860, 868, 876, 1349], "prefer": [0, 1339, 1348, 1351], "preferr": 1348, "preload": [0, 440, 441, 1337, 1345], "present": [1338, 1350], "prev_": [1, 18, 28, 163, 175, 176], "prev_farm_result": 18, "prev_result": [73, 75, 77, 80, 82, 84, 86], "prev_t": [1, 18, 28, 163, 175, 176], "prevent": 0, "previou": [0, 18, 21, 75, 80, 84, 278, 363, 378, 379, 805, 953, 956, 958, 961, 963, 966, 968, 971, 973, 976, 979, 982, 985, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 1342, 1344, 1353, 1355], "previous": 0, "prevous": 1355, "principl": [1340, 1355], "print": [0, 1, 12, 18, 28, 112, 163, 185, 186, 195, 206, 219, 231, 272, 327, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 549, 555, 1032, 1034, 1041, 1061, 1068, 1072, 1074, 1077, 1081, 1087, 1100, 1101, 1108, 1109, 1116, 1119, 1122, 1124, 1127, 1133, 1143, 1147, 1148, 1149, 1155, 1198, 1250, 1331, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1353, 1354, 1355, 1356, 1357, 1358], "print_deco": [1, 12, 18, 28, 163, 186], "print_mem": [1250, 1331], "print_model": [1032, 1041, 1061, 1068, 1072, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133], "print_toc": [549, 555, 1156, 1157, 1182, 1346], "printout": [1343, 1354], "prnt": [112, 195, 231, 272, 327, 1143, 1147, 1148, 1149, 1155], "probe": [1204, 1205, 1214, 1215, 1221, 1222, 1228, 1229, 1236, 1237, 1244, 1245, 1349], "problem": [0, 1348], "process": [0, 206, 207, 420, 1326, 1341, 1342, 1344, 1345, 1347, 1348, 1349, 1354, 1355, 1356, 1357, 1358, 1360, 1361], "process_cpu_count": [0, 1348], "processengin": [0, 412, 420, 1326, 1344, 1345, 1347, 1348, 1349, 1354, 1355, 1356, 1357, 1358, 1361], "processlookuperror": 1198, "processor": [412, 1348, 1361], "produc": [0, 1257, 1331, 1341, 1350, 1356], "product": [0, 1009, 1329, 1340, 1344], "productsuperposit": 0, "profdata": [501, 502], "profdict": [501, 509], "profil": [0, 353, 354, 355, 356, 501, 502, 511, 754, 756, 757, 758, 760, 761, 762, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 939, 1185, 1189, 1324, 1329, 1332, 1337, 1341, 1342, 1343, 1347], "profile_pt": [1341, 1342], "profile_typ": [353, 356, 754, 758, 762, 766, 770, 774, 777], "progress": [398, 399, 1348, 1356], "progress_bar": [0, 398, 399, 404, 429], "project": [1337, 1361], "promot": [563, 1329], "propag": [0, 1329, 1336, 1340], "proper": 1348, "properti": [1, 6, 8, 11, 13, 14, 16, 17, 18, 21, 22, 25, 27, 28, 34, 35, 36, 37, 38, 41, 42, 43, 44, 46, 47, 50, 54, 60, 64, 68, 88, 93, 102, 105, 112, 114, 115, 116, 117, 118, 119, 163, 169, 170, 173, 180, 182, 192, 195, 200, 201, 203, 206, 211, 215, 216, 222, 231, 234, 248, 255, 263, 264, 272, 274, 280, 282, 283, 288, 295, 301, 309, 319, 327, 332, 333, 340, 341, 343, 346, 353, 357, 365, 368, 369, 371, 372, 373, 378, 382, 388, 389, 390, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 443, 451, 454, 456, 461, 471, 473, 475, 477, 490, 492, 501, 509, 513, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 932, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1027, 1031, 1156, 1162, 1163, 1164, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1198, 1338], "provid": [0, 1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 241, 248, 255, 263, 264, 274, 278, 281, 288, 295, 301, 309, 319, 321, 340, 343, 346, 353, 357, 365, 370, 372, 378, 440, 445, 451, 453, 454, 456, 464, 471, 473, 475, 477, 490, 492, 495, 501, 509, 517, 525, 527, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 603, 605, 608, 612, 616, 622, 629, 636, 641, 644, 646, 653, 659, 664, 669, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 720, 725, 730, 735, 737, 741, 745, 750, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1068, 1118, 1126, 1198, 1317, 1327, 1329, 1338, 1340, 1343, 1344, 1345, 1346, 1347, 1349, 1353, 1354, 1361], "psi": [1188, 1190, 1192, 1193, 1332], "pth": [116, 118, 119, 120, 121, 122, 1322], "public": [1337, 1358], "publicli": 1337, "publish": [0, 1335], "pull": 1337, "pure": [0, 1062, 1063, 1064, 1065, 1066, 1067], "purpos": [787, 1340, 1343, 1354, 1361], "push": 1337, "pvar": [54, 68], "pwake": [264, 265, 267, 270, 552, 569, 571, 572, 574, 1349], "pwakes_typ": [288, 293, 576, 581, 583, 585, 591, 597], "py": [0, 412, 1138, 1198, 1348, 1357], "pyc": 1198, "pypi": 0, "pyplot": [1027, 1028, 1030, 1034, 1085, 1089, 1118, 1126, 1130, 1198, 1200, 1210, 1218, 1225, 1232, 1240, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "pytest": [0, 1362], "python": [0, 1198, 1247, 1331, 1337, 1348, 1353, 1360, 1361], "python3": [0, 1198, 1339], "quadcontourset": [1062, 1063, 1064, 1065, 1066, 1067, 1132], "quadmesh": [1062, 1063, 1064, 1065, 1066, 1067, 1132], "quadrat": [953, 954, 958, 959, 963, 964, 968, 969, 1015, 1021, 1329, 1340, 1346], "quadratic_loc": 1344, "quantiti": [288, 309, 1340, 1351], "quartic_loc": 1344, "queue": 0, "quick": 1337, "quicker": 1339, "quit": 1198, "quiv": 1132, "quiver": [1062, 1063, 1064, 1065, 1066, 1067, 1132], "quiver_n": [1062, 1063, 1064, 1065, 1066, 1067, 1342, 1344, 1345, 1353, 1355], "quiver_par": [1062, 1063, 1064, 1065, 1066, 1067, 1342, 1344, 1345, 1353, 1355], "r": [832, 833, 842, 843, 844, 845, 848, 849, 860, 868, 876, 885, 889, 892, 896, 899, 902, 934, 938, 939, 942, 945, 948, 1334, 1340, 1341, 1353, 1361], "r1": [1258, 1259, 1331], "r2": [1258, 1259, 1331], "r_pc": [911, 920], "r_pc_": [911, 921], "radial": [0, 576, 577, 833, 844, 849, 877, 1334, 1340, 1341], "radiant": [927, 1358], "radii": [576, 847, 848, 888, 889, 895, 896, 937, 938, 1258, 1331], "radiu": [312, 617, 625, 632, 845, 848, 885, 889, 892, 896, 934, 938, 1216, 1217, 1251, 1258, 1259], "rai": [0, 421, 1326, 1348], "raimund": 559, "rais": [175, 176, 289, 391, 440, 579, 593, 1141, 1159], "random": [0, 437, 532, 533, 534, 1251, 1328, 1331, 1338, 1343, 1348], "random_timeseri": 0, "random_timseries_data": [0, 533, 1328, 1348], "random_xy_squar": [0, 1251, 1331], "randomli": [437, 1328, 1343], "rang": [0, 324, 456, 458, 466, 509, 511, 519, 533, 659, 660, 1198, 1329, 1340, 1341, 1349, 1350, 1352, 1353, 1358], "range_var": [659, 660, 1352], "rankin": [0, 852, 1334, 1341, 1342], "rankinehalfbodi": [0, 852, 853, 854, 855, 856, 857, 858, 859, 1334, 1346], "rate": [646, 735], "rather": 1009, "rathmann": [0, 860, 861, 862, 863, 864, 865, 866, 867, 1334, 1341, 1346], "rathmann_": 1346, "rathmann_linear": 1346, "raul": [868, 876, 1341], "ravel": [1341, 1342], "rayengin": [0, 421, 1326, 1348], "rcparam": [1344, 1353, 1355], "rd": 386, "rdict": [451, 454, 456, 457, 471, 472, 509, 510, 525, 530, 531], "re": [0, 1178, 1340, 1348, 1350, 1355], "reach": [0, 1318, 1320, 1327, 1342, 1344, 1355], "read": [0, 112, 195, 231, 272, 327, 440, 441, 456, 458, 509, 511, 538, 543, 544, 545, 546, 547, 548, 601, 642, 660, 675, 696, 698, 699, 700, 715, 716, 725, 726, 735, 737, 738, 745, 746, 1143, 1146, 1149, 1165, 1170, 1252, 1253, 1254, 1255, 1256, 1317, 1325, 1328, 1329, 1331, 1338, 1347, 1355, 1357, 1361], "read_attribut": [543, 1328], "read_csv": [771, 1344], "read_dict": [538, 540, 1328], "read_farm": [544, 1328], "read_fil": [1165, 1170, 1252, 1255], "read_layout": [545, 1328], "read_shp": [0, 1252, 1253, 1331], "read_shp_polygon": [0, 1253, 1256, 1331], "read_sit": [546, 1328], "read_tab_fil": [1254, 1331], "read_turbine_typ": [547, 1328], "read_wind_resource_field": [548, 1328], "read_windio": [539, 1328], "readabl": [112, 195, 231, 272, 327, 509, 1143, 1147, 1148, 1149, 1155, 1328, 1348, 1352, 1356], "reader": 1172, "readerwrg": [0, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180], "readi": [0, 1346, 1354, 1355, 1358], "real": [1196, 1331], "realist": [1341, 1342, 1353], "realiz": [0, 1345, 1358], "reason": [0, 241, 281, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750, 1340, 1344], "recalcul": [622, 623], "recent": [73, 76, 77, 81, 82, 85, 86], "recommend": [1337, 1339, 1345], "recov": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 190, 192, 203, 222, 234, 248, 255, 263, 264, 274, 286, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 449, 451, 454, 456, 469, 471, 473, 475, 477, 488, 490, 492, 499, 501, 509, 523, 525, 529, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 673, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 823, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "rectangl": 1345, "recursionerror": 1198, "red": 1344, "reduc": [0, 5, 33, 335, 622, 623, 629, 630, 1041, 1057, 1058, 1059, 1102, 1103, 1104, 1105, 1106, 1107, 1340, 1346, 1347, 1348, 1351], "reduce_al": [1041, 1057], "reduce_st": [1041, 1058, 1356], "reduce_turbin": [1041, 1059], "reduct": [622, 623, 1341], "ref_xi": [473, 475, 477, 478, 480, 490, 491, 1344], "refactor": 0, "refer": [0, 559, 824, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 939, 1186, 1187, 1191, 1194, 1332, 1340, 1341, 1343, 1358], "referenceerror": 1198, "reffer": 1338, "reflect": [0, 569, 572, 573, 1329, 1340, 1342, 1344, 1346, 1353, 1355, 1358, 1360], "reformul": 0, "region": [0, 825, 860, 861, 868, 869, 877, 878, 905, 906, 911, 926, 1340, 1341, 1342], "regular": [0, 436, 440, 622, 629, 1257, 1328, 1329, 1331, 1338, 1340, 1342, 1344, 1351, 1353, 1355, 1357], "regularlayoutoptproblem": 0, "rel": [120, 121, 122, 137, 1277, 1311, 1323, 1333, 1361], "relat": [0, 1357], "relative_to": 1343, "relax": [0, 18, 26, 27, 28, 88, 89, 93, 94, 1320, 1342], "releas": [0, 1339], "relev": [440, 441, 1329, 1334, 1342], "reli": [1348, 1360], "remark": 1337, "remot": 1337, "remov": [0, 1, 18, 28, 163, 171, 172, 664, 671, 1337, 1339, 1350, 1351], "renam": [0, 1337], "renen": 899, "renew": [860, 868, 876], "reorder": [60, 1319], "reorderfarmoutput": [60, 61, 62, 63, 1319, 1348], "reorderfarmoutput_instance1": 1348, "repeat": 1349, "repeatedli": 1342, "repetit": [911, 1334], "replac": [0, 1337, 1339, 1340, 1359], "report": 1337, "repositori": [1336, 1337, 1361, 1362], "repr": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 206, 208, 222, 234, 248, 255, 257, 263, 264, 274, 276, 288, 295, 301, 303, 309, 319, 340, 343, 346, 348, 353, 357, 365, 370, 372, 378, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 424, 427, 428, 429, 440, 451, 454, 456, 459, 471, 473, 475, 477, 479, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 565, 569, 571, 572, 576, 578, 581, 583, 585, 587, 591, 597, 600, 605, 608, 612, 616, 622, 624, 629, 631, 636, 638, 641, 646, 648, 653, 659, 664, 674, 679, 681, 684, 687, 690, 692, 695, 697, 699, 701, 709, 715, 717, 725, 727, 735, 737, 745, 747, 754, 758, 762, 766, 770, 774, 777, 781, 783, 787, 794, 799, 801, 807, 809, 814, 816, 824, 826, 832, 835, 842, 845, 852, 854, 860, 862, 868, 870, 876, 877, 879, 885, 887, 892, 894, 899, 901, 905, 907, 911, 934, 936, 939, 941, 945, 947, 953, 955, 958, 960, 963, 965, 968, 970, 973, 975, 979, 981, 985, 987, 991, 993, 997, 999, 1003, 1005, 1009, 1011, 1015, 1017, 1021, 1023, 1198], "repres": [0, 365, 370, 478, 540, 542, 622, 623, 674, 737, 745, 1035, 1216, 1223, 1230, 1329, 1331, 1338, 1340, 1343, 1347, 1348, 1351, 1357, 1358], "represent": [1156, 1158, 1181, 1183], "request": [0, 366, 1337], "requir": [0, 82, 163, 234, 242, 243, 346, 350, 351, 357, 363, 562, 695, 697, 699, 705, 706, 709, 710, 712, 713, 715, 722, 723, 725, 732, 733, 735, 737, 742, 743, 745, 751, 752, 781, 787, 794, 799, 805, 807, 814, 824, 1320, 1337, 1338, 1340, 1343, 1344, 1345, 1346, 1348, 1353, 1356, 1358, 1360, 1361, 1362], "rescal": [1009, 1344], "research": [1198, 1337], "reserv": 1198, "reset": [1, 18, 28, 102, 163, 187, 191, 222, 319, 324, 393, 440, 451, 454, 456, 466, 471, 473, 475, 477, 490, 492, 501, 509, 519, 525, 530, 664, 671, 1324, 1347, 1348, 1350, 1353], "reset_chunk_stor": [1, 18, 28, 163, 187], "reset_engin": [393, 1324, 1348], "resolut": [0, 1061, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1172, 1178, 1341, 1342, 1344, 1345, 1347, 1348, 1353, 1354, 1355, 1357, 1358], "resourc": [548, 1328], "resourcewarn": 1198, "respecitv": 234, "respect": [0, 120, 121, 122, 235, 436, 629, 630, 1322, 1340, 1343, 1351, 1356, 1357, 1358, 1361], "respons": [357, 1326, 1329, 1340, 1351, 1352], "restart": 0, "restrict": 0, "restructur": 0, "result": [0, 4, 5, 18, 20, 21, 28, 32, 33, 35, 36, 37, 38, 43, 48, 52, 56, 60, 62, 64, 66, 68, 70, 73, 75, 77, 80, 82, 84, 86, 90, 95, 101, 104, 123, 167, 168, 204, 206, 210, 217, 220, 225, 236, 250, 254, 259, 267, 268, 278, 291, 296, 300, 305, 309, 311, 313, 344, 354, 359, 375, 378, 380, 398, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 442, 460, 481, 494, 503, 512, 537, 540, 541, 542, 566, 576, 585, 588, 598, 602, 606, 610, 612, 613, 614, 616, 618, 622, 629, 639, 643, 649, 655, 661, 667, 676, 682, 685, 688, 693, 702, 711, 718, 728, 739, 748, 756, 760, 764, 768, 772, 775, 779, 787, 839, 845, 847, 856, 864, 872, 881, 885, 888, 892, 895, 934, 937, 957, 962, 963, 964, 967, 972, 973, 977, 979, 983, 985, 989, 991, 995, 997, 998, 1001, 1003, 1004, 1007, 1009, 1013, 1015, 1019, 1021, 1025, 1032, 1033, 1034, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1074, 1075, 1076, 1077, 1078, 1081, 1082, 1094, 1099, 1100, 1101, 1109, 1116, 1117, 1119, 1120, 1127, 1128, 1257, 1318, 1319, 1323, 1329, 1330, 1333, 1340, 1341, 1342, 1344, 1347, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1361], "result_label": 1361, "results_st": [1032, 1033], "resultswrit": [0, 1077, 1078, 1079, 1080, 1330], "ret_data": [1065, 1066, 1067, 1081, 1085, 1086, 1122, 1127, 1130, 1131], "ret_dwnd_ord": [18, 20], "ret_grid": [1102, 1103, 1104, 1105, 1106, 1107], "ret_im": [1034, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1132, 1344, 1355], "ret_ind": 176, "ret_par": [1156, 1159], "ret_rlabel": 542, "ret_stat": [1062, 1063, 1064, 1065, 1066, 1067, 1102, 1103, 1104, 1105, 1106, 1107, 1132], "ret_utm_zon": [1253, 1256, 1331], "return": [0, 1, 18, 28, 47, 50, 54, 56, 60, 64, 68, 88, 93, 102, 112, 163, 188, 192, 195, 203, 206, 208, 222, 231, 234, 248, 255, 257, 263, 264, 272, 274, 276, 284, 288, 295, 301, 303, 309, 319, 327, 340, 343, 346, 348, 353, 357, 365, 372, 378, 382, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 424, 427, 428, 429, 440, 447, 451, 454, 456, 459, 467, 471, 473, 475, 477, 479, 485, 490, 492, 497, 501, 509, 520, 525, 528, 530, 556, 559, 562, 563, 565, 569, 571, 572, 576, 578, 581, 583, 585, 587, 591, 597, 600, 605, 608, 612, 616, 622, 624, 629, 631, 636, 638, 641, 646, 648, 653, 659, 664, 672, 674, 679, 681, 684, 687, 690, 692, 695, 697, 699, 701, 709, 715, 717, 725, 727, 735, 737, 745, 747, 754, 758, 762, 766, 770, 774, 777, 781, 783, 787, 794, 799, 801, 807, 809, 814, 816, 822, 824, 826, 832, 835, 842, 845, 852, 854, 860, 862, 868, 870, 876, 877, 879, 885, 887, 892, 894, 899, 901, 905, 907, 911, 934, 936, 939, 941, 945, 947, 953, 955, 958, 960, 963, 965, 968, 970, 973, 975, 979, 981, 985, 987, 991, 993, 997, 999, 1003, 1005, 1009, 1011, 1015, 1017, 1021, 1023, 1032, 1051, 1056, 1062, 1063, 1064, 1081, 1122, 1132, 1143, 1144, 1149, 1151, 1199, 1206, 1208, 1216, 1223, 1230, 1238, 1331, 1349, 1354, 1361], "return_nearest": [1199, 1204, 1206, 1208, 1214, 1216, 1221, 1223, 1228, 1230, 1236, 1238, 1244], "reult": 311, "revers": 1198, "rew": [0, 1, 2, 18, 28, 547, 629, 1165, 1167, 1296, 1314, 1316, 1329, 1333, 1342, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1354, 1355, 1356, 1357, 1358], "rework": 0, "rews2": [234, 242, 346, 350, 562, 679, 680, 695, 697, 699, 700, 705, 709, 710, 712, 715, 716, 722, 725, 726, 732, 735, 737, 738, 742, 745, 746, 751, 1165, 1167, 1297, 1314, 1316, 1333, 1342, 1346, 1348], "rews3": [234, 243, 346, 351, 562, 646, 647, 695, 697, 699, 700, 706, 709, 710, 713, 715, 716, 723, 725, 726, 733, 735, 737, 738, 743, 745, 746, 752, 1165, 1167, 1298, 1314, 1316, 1333, 1342, 1346, 1348], "rews_max": 1352, "rews_min": 1352, "rh": [1041, 1060], "rhb": [0, 1341, 1342, 1346], "rho": [501, 502, 695, 696, 698, 699, 700, 715, 716, 725, 726, 735, 736, 745, 746, 1126, 1165, 1167, 1282, 1299, 1314, 1316, 1333, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "right": [1056, 1060, 1198, 1340, 1341, 1344], "ring": [0, 438, 1328], "rlabel": [541, 542, 1328], "rmodel_typ": [309, 316, 616, 622, 629], "roject": 1337, "root": [1196, 1331, 1339], "rose": [0, 1081, 1083, 1085, 1086, 1122, 1123, 1127, 1130, 1131, 1330, 1336, 1337, 1338, 1343, 1352, 1356, 1361], "roseplotoutput": [0, 1081, 1082, 1083, 1084, 1085, 1086, 1122, 1330, 1352, 1361], "rotat": [1118, 1341, 1343], "rotate_xlabel": 1118, "rotor": [0, 1, 3, 13, 18, 28, 123, 138, 139, 234, 236, 248, 249, 267, 288, 291, 309, 311, 312, 313, 314, 315, 316, 318, 336, 337, 346, 347, 357, 362, 378, 379, 382, 386, 432, 549, 576, 581, 583, 585, 586, 588, 591, 592, 597, 598, 616, 617, 618, 619, 620, 621, 622, 625, 627, 628, 629, 630, 632, 634, 635, 653, 654, 665, 781, 785, 787, 791, 794, 798, 799, 804, 807, 813, 814, 820, 824, 829, 860, 861, 868, 869, 877, 878, 953, 956, 958, 961, 963, 966, 968, 971, 973, 976, 979, 982, 985, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 1032, 1033, 1034, 1062, 1063, 1064, 1087, 1088, 1089, 1132, 1268, 1269, 1270, 1281, 1296, 1297, 1298, 1303, 1323, 1324, 1329, 1330, 1333, 1336, 1337, 1341, 1342, 1344, 1347, 1348, 1349, 1355, 1356], "rotor_color": [1062, 1063, 1064], "rotor_model": [0, 1, 3, 13, 18, 28, 549, 585, 586, 591, 592, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 1087, 1088, 1341, 1342, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1355, 1356, 1357, 1358, 1361], "rotor_point": [138, 1323, 1340, 1342, 1346, 1347, 1349, 1351, 1355], "rotor_point_weight": [309, 318, 616, 621, 622, 628, 629, 635], "rotor_wd": [3, 1340, 1341, 1342, 1346], "rotor_wd_farmo": 1346, "rotor_weight": [139, 1323], "rotorcentrecalc": [0, 653, 654, 655, 656, 657, 658, 1329, 1346], "rotormodel": [1, 13, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 549, 585, 586, 591, 592, 616, 622, 629, 1087, 1088, 1324, 1329], "rotorpoint": [0, 581, 597, 598, 599, 1329, 1340, 1346], "rotorpointplot": [0, 1087, 1088, 1089, 1330, 1351], "rotorwd": [794, 795, 796, 797, 798, 824, 825, 1329, 1346, 1348], "rough": [1184, 1185, 1186, 1188, 1189, 1191, 1192, 1194, 1313, 1333, 1340], "round": [1198, 1264], "routin": 1348, "row": [439, 674, 675, 735, 1079, 1328, 1336, 1337, 1338, 1341, 1342, 1344, 1347, 1348, 1349, 1350, 1355, 1356], "row_var": [674, 675], "rpar": [509, 699, 715], "rpars_ct": [725, 737, 745], "rpars_p": [725, 737, 745], "rpoint": [292, 309, 311, 582, 589, 599, 616, 622, 629], "rpoint_result": [313, 616, 618], "rpoint_weight": [267, 291, 588, 598], "rule": [0, 1337, 1340, 1352, 1358], "run": [0, 1, 18, 28, 31, 42, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 166, 183, 188, 190, 192, 194, 203, 206, 217, 218, 220, 222, 234, 236, 244, 248, 249, 255, 263, 264, 269, 274, 283, 284, 286, 288, 293, 295, 301, 306, 309, 316, 319, 322, 340, 342, 343, 345, 346, 352, 353, 354, 356, 357, 364, 365, 372, 376, 378, 381, 398, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 440, 447, 449, 451, 454, 456, 467, 469, 471, 473, 475, 477, 485, 488, 490, 492, 497, 499, 501, 509, 520, 523, 525, 528, 529, 530, 535, 536, 540, 541, 542, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 665, 672, 673, 674, 679, 684, 687, 690, 695, 697, 699, 709, 710, 715, 725, 735, 737, 745, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 775, 777, 779, 781, 787, 794, 799, 807, 814, 822, 823, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 978, 979, 984, 985, 990, 991, 996, 997, 1002, 1003, 1008, 1009, 1014, 1015, 1020, 1021, 1026, 1032, 1041, 1061, 1062, 1063, 1064, 1068, 1071, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1248, 1249, 1324, 1326, 1328, 1329, 1330, 1331, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1350, 1352, 1353, 1354, 1355, 1356, 1358, 1359, 1360, 1361, 1362], "run_calc": 1349, "run_calcul": [4, 5, 47, 50, 54, 60, 64, 68, 88, 93, 102, 206, 220, 222, 234, 248, 254, 255, 263, 295, 300, 301, 309, 319, 343, 346, 398, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745], "run_dict": [540, 1328], "run_obj_funct": [541, 1328], "run_output": [542, 1328], "runner": [0, 1337], "runtimeerror": 1198, "runtimewarn": 1198, "rweight": [292, 582, 589, 599], "s0960148123007620": [860, 868, 876], "s_": 1350, "s_state": 198, "s_target": [327, 329], "sake": 1353, "same": [0, 195, 196, 199, 330, 331, 354, 756, 760, 764, 768, 772, 775, 779, 1048, 1062, 1063, 1064, 1110, 1111, 1112, 1113, 1114, 1115, 1197, 1198, 1259, 1341, 1353, 1356, 1358], "save": 1361, "savefig": [1133, 1134, 1361], "sbeta": [0, 885, 886, 899, 900, 939, 940, 945, 946], "sbeta_factor": [0, 885, 886, 899, 900, 939, 940, 945, 946, 1346], "scalar": [600, 601], "scale": [0, 973, 974, 985, 986, 997, 998, 1015, 1016, 1341, 1342, 1344, 1345, 1353, 1355], "scale_amb": [973, 974, 985, 986, 997, 998, 1015, 1016, 1346], "scale_unit": 1345, "scan": [492, 493, 1328], "scanstat": [0, 492, 493, 494, 495, 496, 497, 498, 499, 500, 1328], "scanw": 0, "scatter": [0, 1034, 1056, 1087, 1089, 1095, 1096, 1344], "scenario": 1342, "schedul": [0, 1348], "schema": 1361, "schmidt": 1335, "schmidt2023": 1335, "scienc": [860, 868, 876], "sciencedirect": [860, 868, 876], "scipi": [440, 441, 458, 477, 642, 675, 700, 737, 738, 745, 746], "script": [0, 412, 1337, 1348, 1359, 1360, 1361], "sdata": [533, 1344, 1348, 1349, 1350, 1358], "search": [0, 278, 440, 441, 452, 456, 458, 549, 555, 691, 824, 886, 905, 1195, 1331, 1340, 1346, 1354, 1356], "second": [397, 735, 1269, 1297, 1333, 1340, 1361], "section": [1338, 1340, 1346, 1348, 1354, 1356, 1358, 1360, 1361], "sector": [0, 1083, 1085, 1172, 1175, 1254, 1336, 1337, 1356], "sector_man": 0, "sector_manag": 0, "sector_rul": 1352, "sectormanag": [0, 659, 660, 661, 662, 663, 1329, 1340, 1352], "see": [0, 1198, 1338, 1339, 1340, 1342, 1347, 1348, 1349, 1357, 1361], "seed": [437, 533, 1251, 1348], "seem": 1342, "seen": 1356, "segreg": [0, 1340], "sel": [1, 18, 28, 40, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 168, 178, 188, 190, 192, 203, 206, 221, 222, 234, 248, 255, 263, 264, 274, 284, 286, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 398, 404, 405, 406, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 440, 441, 447, 449, 451, 454, 456, 467, 469, 471, 473, 475, 477, 485, 488, 490, 492, 497, 499, 501, 509, 520, 523, 525, 528, 529, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 672, 673, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 822, 823, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1121], "select": [0, 5, 33, 40, 82, 93, 102, 141, 150, 168, 178, 183, 188, 190, 194, 218, 221, 222, 234, 244, 264, 267, 268, 269, 278, 284, 286, 288, 291, 293, 306, 316, 319, 322, 324, 336, 337, 338, 339, 342, 343, 344, 345, 352, 356, 364, 375, 376, 379, 381, 398, 400, 404, 405, 409, 411, 416, 419, 426, 427, 429, 431, 440, 441, 447, 449, 451, 454, 456, 458, 466, 467, 469, 471, 473, 475, 477, 485, 488, 490, 492, 497, 499, 501, 509, 511, 519, 520, 523, 525, 528, 529, 530, 555, 563, 569, 571, 572, 576, 581, 583, 585, 588, 591, 597, 598, 636, 637, 639, 643, 649, 655, 661, 667, 672, 673, 676, 682, 685, 688, 693, 702, 711, 718, 728, 739, 748, 822, 823, 833, 834, 837, 839, 843, 844, 847, 849, 856, 864, 872, 881, 888, 895, 902, 908, 937, 942, 948, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024, 1071, 1102, 1103, 1104, 1105, 1106, 1107, 1116, 1118, 1292, 1317, 1320, 1323, 1324, 1327, 1328, 1329, 1333, 1337, 1338, 1340, 1341, 1344, 1345, 1346, 1347, 1350, 1352, 1354, 1356, 1358, 1360], "select_subset": [206, 221, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429], "selector": [1248, 1331], "self": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 112, 163, 191, 192, 195, 203, 206, 208, 222, 231, 234, 241, 248, 255, 257, 263, 264, 272, 274, 276, 278, 281, 288, 295, 301, 303, 309, 319, 321, 327, 340, 343, 346, 348, 353, 357, 365, 372, 378, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 424, 427, 428, 429, 440, 445, 451, 453, 454, 456, 459, 464, 471, 473, 475, 477, 479, 490, 492, 495, 501, 509, 517, 525, 527, 530, 556, 559, 562, 563, 565, 569, 571, 572, 576, 578, 581, 583, 585, 587, 591, 597, 600, 603, 605, 608, 612, 616, 622, 623, 624, 629, 631, 636, 638, 641, 644, 646, 648, 653, 659, 664, 669, 674, 679, 681, 684, 687, 690, 692, 695, 697, 699, 701, 709, 715, 717, 720, 725, 727, 730, 735, 737, 741, 745, 747, 750, 754, 758, 762, 766, 770, 774, 777, 781, 783, 787, 794, 799, 801, 807, 809, 814, 816, 824, 826, 832, 835, 842, 845, 852, 854, 860, 862, 868, 870, 876, 877, 879, 885, 887, 892, 894, 899, 901, 905, 907, 911, 934, 936, 939, 941, 945, 947, 953, 955, 958, 960, 963, 965, 968, 970, 973, 975, 979, 981, 985, 987, 991, 993, 997, 999, 1003, 1005, 1009, 1011, 1015, 1017, 1021, 1023, 1143, 1144, 1149, 1151, 1334], "self_wak": [359, 945, 946], "selfsimilar": [0, 868, 869, 870, 871, 872, 873, 874, 875, 876, 1334, 1341, 1346], "selfsimilar2020": [0, 876, 1334, 1341, 1342, 1346], "selfsimilar2020_": 1346, "selfsimilar2020_linear": 1346, "selfsimilar_": 1346, "selfsimilar_linear": 1346, "semi": 1341, "send": [0, 1348], "sens": [0, 1347, 1351], "sensit": [1347, 1358], "sent": 1348, "separ": [0, 585, 735, 832, 835, 1329, 1334, 1340, 1359], "separatli": 0, "seq_dyn_wak": [1340, 1346, 1353], "seq_dyn_wakes_": [1340, 1346], "seq_dyn_wakes_10": 1346, "seq_dyn_wakes_1min": 1353, "seq_plugin": 0, "seqdynamicwak": [799, 800, 801, 802, 803, 804, 805, 806, 1346, 1353], "seqflowanimationplugin": [1090, 1091, 1092, 1093, 1094, 1330, 1353], "seqstat": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 1321], "sequenti": [0, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 799, 1090, 1093, 1094, 1095, 1098, 1099, 1318, 1330, 1336, 1340, 1348], "sequentialiterplugin": [28, 29], "sequentialplugin": [97, 98, 99, 100, 101, 1090, 1095, 1321, 1330], "seqwakedebugplugin": [0, 1095, 1096, 1097, 1098, 1099, 1330], "seri": [0, 533, 1055, 1348, 1353, 1356], "serv": [102, 278, 363, 477, 478, 491, 805, 1321, 1343], "set": [0, 1, 5, 18, 26, 28, 33, 47, 50, 54, 60, 64, 68, 88, 93, 102, 103, 163, 188, 190, 192, 203, 222, 234, 246, 248, 255, 263, 264, 274, 284, 286, 288, 295, 301, 309, 319, 336, 337, 340, 343, 346, 353, 357, 365, 372, 378, 391, 392, 440, 447, 449, 451, 454, 456, 467, 469, 471, 473, 475, 477, 485, 488, 490, 492, 497, 499, 501, 509, 520, 523, 525, 528, 529, 530, 532, 534, 537, 538, 540, 542, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 672, 673, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 822, 823, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1034, 1198, 1319, 1324, 1329, 1339, 1340, 1341, 1342, 1343, 1347, 1348, 1350, 1351, 1352, 1358, 1361], "set_farm_nam": 435, "set_par": [234, 246, 562], "set_pmax": 1350, "set_run": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 188, 192, 203, 222, 234, 248, 255, 263, 264, 274, 284, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 447, 451, 454, 456, 467, 471, 473, 475, 477, 485, 490, 492, 497, 501, 509, 520, 525, 528, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 672, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 822, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "set_titl": [1341, 1342, 1349], "set_urelax": [18, 26, 28, 1342], "set_xlabel": [1341, 1342, 1344, 1349, 1354], "set_xlim": 1349, "set_yawm": 1358, "set_ylabel": [1341, 1342, 1344, 1354], "set_ylim": 1349, "setambfarmresult": [64, 65, 66, 67, 1319, 1348], "setambfarmresults_instance1": 1348, "setambpointresult": [68, 69, 70, 71, 72, 1319], "setattr": 1198, "setfarmvar": [0, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 1329, 1340, 1349, 1350, 1358], "seti": 1349, "setuniformdata": [0, 600, 601, 602, 603, 604, 1329], "setup": [0, 1337, 1341, 1342, 1347, 1348, 1349, 1350, 1352, 1354, 1357, 1358], "sever": [0, 1338, 1340], "shape": [0, 5, 28, 29, 33, 46, 48, 52, 56, 62, 66, 70, 90, 95, 104, 111, 184, 209, 225, 230, 231, 236, 250, 259, 265, 266, 267, 268, 270, 271, 290, 291, 292, 294, 296, 305, 311, 312, 313, 314, 318, 326, 330, 331, 335, 336, 337, 338, 339, 344, 354, 359, 360, 361, 362, 363, 366, 374, 375, 377, 379, 380, 385, 386, 390, 436, 438, 439, 442, 450, 460, 470, 481, 489, 494, 500, 503, 508, 512, 524, 566, 574, 575, 580, 582, 588, 589, 594, 598, 599, 602, 606, 610, 614, 617, 618, 619, 621, 625, 628, 632, 635, 636, 637, 639, 643, 649, 655, 661, 666, 667, 676, 682, 685, 688, 693, 702, 711, 718, 728, 739, 748, 756, 760, 764, 768, 770, 772, 775, 779, 784, 785, 789, 790, 791, 796, 797, 798, 802, 803, 804, 805, 810, 811, 812, 813, 817, 819, 820, 827, 828, 829, 833, 834, 837, 838, 839, 843, 844, 847, 848, 849, 855, 856, 858, 863, 864, 866, 871, 872, 874, 880, 881, 883, 888, 889, 890, 895, 896, 897, 902, 908, 927, 930, 937, 938, 942, 948, 951, 956, 957, 961, 962, 966, 967, 971, 972, 976, 977, 982, 983, 988, 989, 994, 995, 1000, 1001, 1006, 1007, 1012, 1013, 1018, 1019, 1024, 1025, 1035, 1065, 1066, 1067, 1076, 1123, 1132, 1196, 1197, 1202, 1203, 1204, 1205, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1242, 1243, 1244, 1245, 1251, 1253, 1259, 1260, 1261, 1262, 1263, 1340, 1341, 1342, 1347, 1348, 1349, 1354, 1358], "shapefil": [1252, 1255, 1256, 1331], "sharei": [1341, 1342], "sharex": [1341, 1342, 1344], "shear": [0, 774, 1187, 1300, 1329, 1331, 1333], "shearedprofil": [0, 774, 775, 776, 1329], "sheet": [877, 1334], "ship": 1344, "short": [0, 1343, 1348], "shortcut": 1317, "shortli": 1361, "should": [0, 48, 52, 56, 62, 66, 70, 90, 95, 104, 204, 220, 225, 236, 241, 250, 259, 281, 296, 305, 321, 344, 360, 405, 408, 411, 416, 419, 426, 431, 440, 441, 442, 445, 453, 460, 464, 481, 494, 495, 503, 512, 517, 527, 566, 602, 603, 606, 610, 614, 639, 643, 644, 649, 655, 661, 667, 669, 676, 682, 685, 688, 693, 702, 711, 718, 720, 728, 730, 739, 741, 748, 750, 784, 789, 796, 802, 810, 817, 827, 1009, 1259, 1264, 1339, 1342, 1345, 1350, 1351, 1352, 1356, 1358, 1359], "show": [0, 398, 399, 1095, 1096, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1356, 1357, 1358, 1361], "show_boundari": [1199, 1200, 1206, 1208, 1210, 1216, 1218, 1223, 1225, 1230, 1232, 1238, 1240], "show_p": [1095, 1096], "show_plotly_fig": 0, "show_rotor_dict": 1132, "show_v": [1095, 1096], "shown": [0, 1250, 1341, 1343, 1347], "shp": [1252, 1253, 1255, 1331], "shp2csv": [0, 1255, 1331], "shp2geom2d": [1256, 1331], "shut": 1348, "shutdown": [1342, 1348, 1349, 1352, 1355, 1357], "si": [1062, 1063, 1064, 1065, 1066, 1067, 1132, 1344, 1353, 1355], "side": [0, 1060, 1341, 1353], "sigma": [0, 842, 843, 899, 902, 939, 942, 945, 948, 1340], "sigma_y_far": [911, 922], "sigma_z_far": [911, 923], "sign": 1341, "signal": [0, 124, 1323, 1344, 1355], "signatur": [0, 537, 542], "signific": 0, "silent": [57, 71, 75, 80, 84, 107, 163, 164, 188, 190, 206, 207, 238, 240, 241, 277, 279, 281, 284, 286, 321, 324, 384, 432, 434, 435, 436, 437, 438, 439, 445, 447, 449, 453, 464, 466, 467, 469, 483, 485, 488, 495, 497, 499, 504, 516, 517, 519, 520, 523, 527, 528, 529, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 595, 603, 626, 633, 644, 650, 656, 662, 668, 669, 672, 673, 677, 703, 720, 730, 741, 750, 786, 792, 806, 818, 821, 822, 823, 830, 840, 850, 857, 865, 873, 882, 903, 909, 931, 943, 949, 950, 1030, 1043, 1044, 1079, 1080, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1146, 1251, 1255, 1264], "similar": [0, 868, 876, 1334, 1341, 1345, 1361], "similarli": [1338, 1344, 1346, 1350, 1355, 1358], "simpl": [0, 380, 868, 876, 957, 962, 967, 972, 977, 983, 989, 995, 1001, 1007, 1013, 1019, 1025, 1344, 1345, 1350, 1354, 1358, 1361], "simpler": 0, "simplest": 1351, "simpli": [563, 612, 1329, 1337, 1338, 1339, 1340, 1342, 1343, 1346, 1348, 1351, 1352], "simplifi": [0, 1337, 1355], "simul": [0, 28, 868, 876, 1321, 1337, 1340, 1343, 1353, 1360], "simultan": 1348, "sin": 1344, "sinc": [0, 1337, 1344, 1347, 1348, 1350, 1351], "singl": [0, 48, 52, 56, 62, 66, 70, 90, 95, 102, 104, 204, 206, 213, 225, 236, 250, 259, 296, 305, 344, 360, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 439, 442, 460, 481, 494, 501, 503, 512, 525, 566, 602, 606, 610, 614, 616, 639, 643, 649, 655, 661, 667, 676, 682, 685, 688, 693, 702, 711, 718, 728, 739, 748, 784, 789, 796, 802, 810, 817, 827, 1079, 1108, 1318, 1319, 1321, 1326, 1328, 1330, 1336, 1337, 1338, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1350, 1351, 1352, 1355, 1356, 1358], "singlechunkengin": [0, 422, 423, 424, 425, 426, 1326, 1345, 1347, 1348, 1350, 1352, 1354, 1356, 1358], "singlestatest": [0, 501, 502, 503, 504, 505, 506, 507, 508, 1328, 1341, 1342, 1354], "site": [546, 1198, 1328, 1343], "situat": 1349, "size": [0, 28, 44, 102, 109, 195, 206, 207, 209, 222, 228, 313, 319, 325, 359, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 448, 451, 454, 456, 468, 471, 473, 475, 477, 486, 490, 492, 498, 501, 506, 509, 521, 525, 530, 618, 807, 808, 945, 946, 1034, 1039, 1089, 1126, 1250, 1326, 1342, 1345, 1346, 1347, 1348, 1353, 1354], "skip": [1340, 1354, 1360], "slice": [0, 195, 198, 199, 231, 272, 324, 327, 329, 344, 456, 458, 466, 509, 511, 519, 636, 637, 639, 643, 649, 655, 661, 667, 676, 682, 685, 688, 693, 1061, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1198, 1330, 1340, 1351, 1354], "slicedata": [0, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1330], "slicedatanc": [0, 1337, 1338], "slicesdata": [0, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1330], "slightli": [1143, 1331, 1352], "slimmer": 0, "slow": [0, 1340, 1341], "slower": [0, 1353], "slurm": [0, 427, 1326, 1348], "slurm_clust": [0, 1348], "slurmclusterengin": [0, 427, 1326, 1348], "small": [0, 1342, 1343, 1348], "smallest": [1204, 1214, 1221, 1228, 1236, 1244], "smallish": [1257, 1331, 1348], "smart": [0, 1337], "smdl": [15, 59, 92, 110, 229, 247, 262, 285, 308, 487, 507, 522, 568, 590, 596, 652, 658, 708, 793, 831, 841, 851, 859, 867, 875, 884, 891, 898, 904, 910, 933, 944, 952], "smfp": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 248, 255, 263, 264, 274, 278, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "smooth": [1257, 1342], "so": [0, 646, 1196, 1338, 1340, 1342, 1344, 1348, 1350, 1353, 1354, 1355, 1360, 1361], "softwar": [1198, 1335, 1337, 1343, 1361], "solut": 1341, "solv": 0, "solver": 1339, "some": [0, 1041, 1057, 1058, 1059, 1195, 1331, 1340, 1342, 1350, 1353, 1358], "somewher": 1350, "sort": 1198, "sourc": [0, 1, 3, 4, 5, 7, 9, 10, 12, 15, 18, 19, 20, 23, 24, 26, 28, 29, 30, 31, 32, 33, 39, 40, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 142, 163, 164, 165, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1165, 1170, 1171, 1172, 1173, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1315, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1334, 1335, 1337, 1339, 1341, 1358], "source_ct": [725, 737, 745], "source_p": [725, 737, 745], "sourcefileload": 1198, "south": [1342, 1352], "space": [0, 387, 440, 441, 735, 1102, 1103, 1104, 1105, 1106, 1107], "spare": 1196, "spars": 0, "spatial": [0, 814, 1329, 1338, 1340, 1343, 1351], "special": [0, 1337, 1348], "specif": [0, 1, 7, 18, 23, 28, 39, 47, 50, 54, 55, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 248, 255, 263, 264, 274, 287, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1319, 1320, 1321, 1331, 1337, 1348, 1361], "specifi": [0, 264, 265, 266, 288, 290, 340, 372, 374, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 591, 594, 597, 660, 832, 835, 838, 842, 845, 852, 855, 860, 863, 868, 871, 876, 877, 880, 885, 892, 899, 905, 934, 939, 945, 1149, 1150, 1329, 1338, 1340, 1344, 1348, 1356, 1361], "speed": [0, 319, 346, 349, 456, 501, 502, 646, 647, 679, 680, 695, 696, 697, 698, 699, 700, 704, 709, 715, 716, 721, 725, 726, 731, 735, 737, 738, 745, 746, 754, 758, 762, 766, 782, 861, 869, 878, 900, 973, 974, 979, 980, 985, 986, 991, 992, 997, 998, 1003, 1004, 1009, 1010, 1015, 1016, 1021, 1022, 1083, 1085, 1123, 1126, 1129, 1130, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1194, 1261, 1262, 1268, 1269, 1270, 1275, 1296, 1297, 1298, 1307, 1329, 1332, 1333, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1352, 1354, 1356, 1357, 1358], "speedup": [0, 1337], "split": 1348, "sqrt": [0, 605, 1257, 1329, 1331, 1348], "sqrt_reg": [1257, 1331], "squar": [437, 1251, 1328, 1331, 1340, 1346], "src": 1196, "st_sel": [343, 344, 346, 379, 636, 637, 639, 641, 643, 646, 649, 653, 655, 659, 661, 664, 667, 674, 676, 679, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 702, 709, 711, 715, 718, 725, 728, 735, 737, 739, 745, 748, 833, 834, 837, 843, 844, 847, 849, 888, 895, 902, 908, 911, 924, 937, 942, 948, 953, 956, 958, 961, 963, 966, 968, 971, 973, 976, 979, 982, 985, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024], "stabl": [758, 766, 1188, 1189, 1190, 1191, 1329, 1331, 1339, 1342], "stamp": [533, 1347, 1353], "stand": 735, "standard": [0, 1041, 1051, 1340, 1354], "start": [0, 47, 50, 54, 60, 64, 68, 88, 93, 102, 213, 222, 223, 234, 248, 254, 255, 263, 295, 300, 301, 309, 319, 343, 346, 395, 432, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 787, 788, 824, 825, 1135, 1136, 1198, 1257, 1331, 1340, 1341, 1342, 1343, 1344, 1348, 1349, 1350, 1354, 1355, 1358, 1359, 1361], "start_tim": 533, "stash": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 188, 190, 192, 203, 222, 234, 248, 255, 263, 264, 274, 284, 286, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 447, 449, 451, 454, 456, 467, 469, 471, 473, 475, 477, 485, 488, 490, 492, 497, 499, 501, 509, 520, 523, 525, 528, 529, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 672, 673, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 822, 823, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "state": [0, 1, 3, 4, 5, 9, 14, 18, 20, 28, 29, 32, 33, 60, 102, 103, 106, 109, 111, 140, 141, 142, 143, 144, 145, 167, 168, 175, 176, 184, 195, 196, 198, 200, 202, 206, 207, 209, 210, 213, 222, 223, 226, 228, 230, 231, 272, 278, 309, 311, 313, 319, 320, 321, 322, 323, 324, 325, 326, 327, 336, 337, 338, 339, 344, 363, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 538, 546, 600, 601, 616, 618, 636, 637, 639, 643, 649, 655, 661, 667, 676, 682, 685, 688, 693, 702, 711, 718, 728, 739, 748, 781, 805, 814, 833, 834, 837, 843, 844, 847, 849, 888, 895, 902, 908, 930, 937, 942, 948, 1032, 1033, 1034, 1041, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1079, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1113, 1114, 1115, 1116, 1119, 1121, 1122, 1123, 1129, 1130, 1132, 1292, 1306, 1318, 1319, 1321, 1323, 1324, 1329, 1330, 1333, 1337, 1340, 1341, 1342, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1361], "state_coord": [451, 452], "state_source_orderi": [142, 1323], "state_target": [143, 278, 363, 805, 1323], "state_target_tpoint": [144, 278, 363, 805, 1323], "state_turbin": [145, 278, 363, 1323], "state_turbine_t": 1079, "statepandasindexpandasindex": [1342, 1348], "states0": [28, 363, 805], "states_coord": [440, 441, 1345], "states_i0": [28, 45, 195, 196, 202, 231, 272, 327], "states_i0_i1": 213, "states_indic": [1, 18, 28, 163, 184], "states_isel": [5, 33, 1102, 1103, 1104, 1105, 1106, 1107, 1348], "states_loc": [102, 222, 319, 324, 440, 451, 454, 456, 458, 466, 471, 473, 475, 477, 490, 492, 501, 509, 511, 519, 525, 530, 1347], "states_mean": [1074, 1076], "states_op": [1041, 1057], "states_sel": [5, 33, 102, 141, 222, 319, 324, 336, 338, 339, 440, 451, 454, 456, 458, 466, 471, 473, 475, 477, 490, 492, 501, 509, 511, 519, 525, 530, 1102, 1103, 1104, 1105, 1106, 1107, 1323, 1347, 1353], "states_source_turbin": 359, "states_turbin": [313, 618], "states_typ": [102, 222, 319, 322, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 1361], "statesroseplotoutput": [0, 1122, 1123, 1330, 1343, 1347, 1352, 1356, 1357], "statest": [509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 530, 1328, 1338, 1340, 1343, 1349, 1350, 1352, 1357, 1358], "stateturbinemap": [0, 1116, 1117, 1118, 1330, 1350, 1361], "stateturbinet": [0, 1119, 1120, 1121, 1330], "static": [0, 394, 696, 698, 699, 700, 715, 716, 725, 726, 737, 738, 745, 746, 1135, 1137, 1138, 1206, 1207, 1317, 1325, 1331, 1337, 1340, 1344, 1345, 1347, 1352, 1354, 1356, 1357], "staticdata": [170, 394, 395, 1325, 1343, 1344, 1347], "staticmethod": 1198, "statist": [102, 111, 222, 230, 319, 326, 440, 450, 451, 454, 456, 470, 471, 473, 475, 477, 489, 490, 492, 500, 501, 508, 509, 524, 525, 530, 1306, 1333, 1338, 1343, 1357], "statu": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 188, 190, 192, 203, 222, 234, 248, 255, 263, 264, 274, 284, 286, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 447, 449, 451, 454, 456, 467, 469, 471, 473, 475, 477, 485, 488, 490, 492, 497, 499, 501, 509, 520, 523, 525, 528, 529, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 672, 673, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 822, 823, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1348], "steadi": 1340, "steer": 1337, "stem": 1340, "step": [0, 28, 31, 44, 359, 436, 439, 533, 622, 623, 629, 630, 695, 697, 699, 704, 715, 721, 725, 731, 735, 781, 782, 807, 808, 945, 946, 1055, 1126, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1353, 1355, 1357, 1360], "step_vector": [436, 1328, 1342, 1344, 1345, 1353, 1355, 1357], "sticht": 1198, "still": [735, 1348, 1361], "stoevesandt": 1335, "stopasynciter": 1198, "stopiter": 1198, "storag": [541, 877, 883, 1341], "store": [1, 18, 28, 163, 165, 169, 171, 175, 176, 187, 189, 196, 234, 235, 241, 281, 311, 321, 330, 331, 405, 411, 416, 419, 426, 431, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750, 911, 927, 1149, 1152, 1340, 1341, 1342, 1346, 1361], "store_amb_r": 311, "store_cr": [1149, 1152], "store_model_data": [1, 18, 28, 163, 189], "store_rpoint": 311, "store_rweight": 311, "str": [0, 3, 4, 5, 7, 12, 23, 26, 28, 29, 39, 48, 49, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 72, 73, 74, 78, 82, 83, 90, 91, 95, 96, 104, 108, 117, 120, 121, 122, 137, 165, 175, 176, 183, 186, 194, 195, 196, 197, 199, 204, 205, 210, 213, 216, 218, 225, 227, 232, 234, 236, 244, 245, 246, 250, 252, 253, 254, 259, 261, 268, 269, 273, 274, 278, 287, 293, 296, 298, 299, 300, 305, 306, 307, 309, 310, 311, 316, 317, 322, 323, 328, 330, 331, 335, 336, 337, 342, 344, 345, 346, 347, 349, 352, 355, 356, 359, 363, 364, 365, 366, 367, 370, 375, 376, 379, 380, 381, 382, 383, 387, 389, 396, 397, 405, 411, 416, 419, 426, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 446, 451, 452, 455, 456, 458, 460, 465, 481, 484, 494, 496, 501, 502, 503, 505, 509, 511, 512, 518, 522, 526, 532, 533, 534, 537, 538, 545, 548, 549, 551, 552, 554, 555, 566, 567, 600, 601, 602, 604, 606, 607, 610, 611, 612, 613, 614, 615, 618, 623, 630, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 649, 651, 655, 657, 659, 660, 661, 663, 664, 666, 667, 670, 674, 675, 676, 678, 679, 680, 682, 683, 685, 686, 688, 689, 690, 691, 693, 694, 696, 698, 699, 700, 702, 704, 707, 711, 714, 715, 716, 718, 721, 724, 725, 726, 728, 731, 734, 736, 737, 738, 739, 744, 745, 746, 748, 753, 757, 761, 765, 769, 771, 773, 776, 780, 794, 795, 805, 825, 833, 834, 835, 836, 837, 839, 844, 845, 846, 847, 849, 852, 853, 856, 860, 861, 864, 868, 869, 872, 877, 878, 881, 883, 886, 888, 893, 895, 899, 900, 905, 906, 908, 911, 926, 929, 935, 937, 939, 940, 945, 946, 953, 954, 956, 957, 958, 959, 961, 962, 963, 964, 966, 967, 968, 969, 971, 972, 976, 977, 978, 982, 983, 984, 988, 989, 990, 994, 995, 996, 1000, 1001, 1002, 1006, 1007, 1008, 1012, 1013, 1014, 1018, 1019, 1020, 1024, 1025, 1026, 1034, 1037, 1038, 1039, 1040, 1046, 1047, 1050, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1073, 1076, 1079, 1080, 1083, 1084, 1085, 1086, 1089, 1090, 1091, 1102, 1103, 1104, 1105, 1106, 1107, 1118, 1121, 1123, 1126, 1129, 1130, 1131, 1132, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1170, 1171, 1173, 1182, 1198, 1200, 1210, 1218, 1225, 1232, 1240, 1246, 1247, 1250, 1252, 1253, 1254, 1255, 1256, 1264, 1315, 1323, 1346], "straight": [1340, 1342, 1348], "stratif": [532, 534], "streaklin": 1340, "stream": 1340, "streamlin": [0, 807, 808, 812, 945, 1329, 1334, 1340, 1345], "streamlines2d": [0, 807, 808, 809, 810, 811, 812, 813, 1329, 1346], "streamlines_": [1340, 1346], "streamlines_100": [1345, 1346], "stress": 1344, "string": [0, 365, 370, 440, 441, 555, 1071, 1156, 1158, 1181, 1183, 1198, 1248, 1249, 1250, 1331, 1338, 1340, 1346], "strongest": 1341, "structur": [0, 102, 737, 745, 1198, 1321, 1340, 1347, 1356], "stsel": [636, 637], "studi": [824, 905, 911, 1337], "style": 0, "sub": [0, 1, 15, 18, 28, 47, 50, 54, 59, 60, 64, 68, 88, 92, 93, 102, 110, 163, 192, 203, 222, 229, 234, 247, 248, 255, 262, 263, 264, 274, 285, 288, 295, 301, 308, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 487, 490, 492, 501, 507, 509, 522, 525, 530, 556, 559, 562, 563, 568, 569, 571, 572, 576, 581, 583, 585, 590, 591, 596, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 652, 653, 658, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 708, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 793, 794, 799, 807, 814, 824, 831, 832, 835, 841, 842, 845, 851, 852, 859, 860, 867, 868, 875, 876, 877, 884, 885, 891, 892, 898, 899, 904, 905, 910, 911, 933, 934, 939, 944, 945, 952, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1338, 1340, 1348, 1361], "sub_model": [0, 1, 15, 18, 28, 47, 50, 54, 59, 60, 64, 68, 88, 92, 93, 102, 110, 163, 192, 203, 222, 229, 234, 247, 248, 255, 262, 263, 264, 274, 285, 288, 295, 301, 308, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 487, 490, 492, 501, 507, 509, 522, 525, 530, 556, 559, 562, 563, 568, 569, 571, 572, 576, 581, 583, 585, 590, 591, 596, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 652, 653, 658, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 708, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 793, 794, 799, 807, 814, 824, 831, 832, 835, 841, 842, 845, 851, 852, 859, 860, 867, 868, 875, 876, 877, 884, 885, 891, 892, 898, 899, 904, 905, 910, 911, 933, 934, 939, 944, 945, 952, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "subject": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 241, 248, 255, 263, 264, 274, 281, 288, 295, 301, 309, 319, 321, 340, 343, 346, 353, 357, 365, 372, 378, 440, 445, 451, 453, 454, 456, 464, 471, 473, 475, 477, 490, 492, 495, 501, 509, 517, 525, 527, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 603, 605, 608, 612, 616, 622, 629, 636, 641, 644, 646, 653, 659, 664, 669, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 720, 725, 730, 735, 737, 741, 745, 750, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "submit": [0, 1348], "subplot": [1085, 1118, 1126, 1130, 1341, 1342, 1343, 1344, 1349, 1350, 1353, 1354, 1355, 1356, 1357], "subplots_adjust": 1341, "subsequ": [737, 745, 1342, 1353], "subset": [0, 168, 188, 190, 195, 196, 206, 221, 263, 284, 286, 324, 330, 331, 398, 404, 405, 406, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 431, 441, 447, 449, 456, 458, 466, 467, 469, 485, 488, 497, 499, 509, 511, 519, 520, 523, 528, 529, 549, 555, 672, 673, 822, 823, 1324, 1329, 1346], "subtitl": 1343, "subtract": [612, 1329, 1340], "success": [548, 1159], "suffici": 1361, "suffix": [434, 440, 441], "sum": [0, 1034, 1041, 1047, 1052, 1054, 1057, 1058, 1059, 1060, 1198, 1356], "sum_no_weight": [1129, 1130], "summar": 0, "summari": 1354, "summer": 1085, "super": 1198, "superp": 835, "superp_to_amb": [953, 954, 958, 959, 963, 964, 968, 969, 1346], "superp_typ": [378, 381, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "superpos": [852, 860, 868, 876], "superposit": [0, 378, 381, 549, 832, 835, 836, 842, 845, 846, 852, 860, 861, 868, 869, 876, 877, 878, 885, 886, 892, 893, 899, 900, 905, 906, 934, 935, 939, 940, 945, 946, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1324, 1329, 1340, 1344, 1346, 1357], "superpositon": 1346, "support": [0, 28, 1149, 1165, 1198, 1321, 1331, 1337, 1339, 1348], "sure": [1258, 1339, 1348], "svensson": 939, "sw": [365, 366], "sweep": [1318, 1319], "switch": [0, 1, 5, 18, 28, 163, 166, 311, 1062, 1063, 1064, 1065, 1066, 1067, 1132, 1342, 1344, 1348, 1351, 1352], "symbol": 1361, "symmetr": 1340, "symmetri": 1340, "syntax": [1348, 1361], "syntaxerror": 1198, "syntaxwarn": 1198, "system": [0, 1339, 1340, 1343, 1348, 1354, 1356], "systemerror": 1198, "systemexit": 1198, "t": [0, 278, 432, 477, 478, 679, 680, 781, 782, 799, 800, 814, 815, 1060, 1165, 1167, 1282, 1301, 1314, 1316, 1333, 1344, 1346, 1351, 1353, 1355], "t0": [175, 176, 1342, 1343, 1348, 1350, 1352, 1353, 1354, 1356, 1358], "t1": [1342, 1343, 1348, 1350, 1352, 1353, 1354, 1356, 1358], "t10": [1342, 1348], "t11": [1342, 1348], "t12": [1342, 1348], "t13": [1342, 1348], "t14": [1342, 1348], "t15": [1342, 1348], "t16": [1342, 1348], "t17": [1342, 1348], "t18": [1342, 1348], "t19": [1342, 1348], "t2": [1342, 1343, 1348, 1350, 1353, 1354, 1356], "t20": [1342, 1348], "t21": [1342, 1348], "t22": [1342, 1348], "t23": [1342, 1348], "t24": [1342, 1348], "t25": [1342, 1348], "t26": [1342, 1348], "t27": [1342, 1348], "t28": [1342, 1348], "t29": [1342, 1348], "t3": [1342, 1343, 1348, 1350, 1353, 1354, 1356], "t30": [1342, 1348], "t31": [1342, 1348], "t32": [1342, 1348], "t33": [1342, 1348], "t34": [1342, 1348], "t35": [1342, 1348], "t36": [1342, 1348], "t37": [1342, 1348], "t38": [1342, 1348], "t39": [1342, 1348], "t4": [1342, 1343, 1348, 1350, 1353, 1354], "t40": [1342, 1348], "t41": [1342, 1348], "t42": [1342, 1348], "t43": [1342, 1348], "t44": [1342, 1348], "t45": [1342, 1348], "t46": [1342, 1348], "t47": [1342, 1348], "t48": 1348, "t49": 1348, "t5": [1342, 1343, 1348, 1353], "t50": 1348, "t51": 1348, "t52": 1348, "t53": 1348, "t54": 1348, "t55": 1348, "t56": 1348, "t57": 1348, "t58": 1348, "t59": 1348, "t6": [1342, 1343, 1348, 1353], "t60": 1348, "t61": 1348, "t62": 1348, "t63": 1348, "t64": 1348, "t65": 1348, "t66": 1348, "t67": 1348, "t68": 1348, "t69": 1348, "t7": [1342, 1348, 1353], "t70": 1348, "t71": 1348, "t72": 1348, "t73": 1348, "t74": 1348, "t75": 1348, "t76": 1348, "t77": 1348, "t78": 1348, "t79": 1348, "t8": [1342, 1348, 1353], "t80": 1348, "t81": 1348, "t82": 1348, "t83": 1348, "t84": 1348, "t85": 1348, "t86": 1348, "t87": 1348, "t88": 1348, "t89": 1348, "t9": [1342, 1348], "t90": 1348, "t91": 1348, "t92": 1348, "t93": 1348, "t94": 1348, "t95": 1348, "t96": 1348, "t97": 1348, "t98": 1348, "t99": 1348, "tab": [0, 525, 526, 1254, 1328, 1331, 1343], "tab_fil": 0, "taberror": 1198, "tabl": [0, 641, 642, 674, 699, 1119, 1121, 1329, 1330, 1340, 1348, 1350, 1352], "tablefactor": [0, 674, 675, 676, 677, 678, 1329], "tabstat": [0, 525, 526, 527, 528, 529, 1328], "tabwindroseax": 0, "take": [0, 40, 178, 179, 206, 221, 327, 335, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 963, 964, 997, 998, 1003, 1004, 1076, 1102, 1103, 1104, 1340, 1348], "taken": [456, 1340, 1354], "target": [0, 1, 18, 28, 47, 50, 54, 56, 60, 64, 68, 88, 93, 102, 104, 143, 144, 146, 147, 152, 153, 156, 163, 192, 203, 209, 210, 213, 222, 225, 234, 248, 255, 263, 264, 265, 266, 267, 268, 270, 271, 274, 278, 288, 290, 291, 292, 294, 295, 296, 297, 301, 305, 309, 313, 319, 327, 329, 331, 332, 333, 334, 335, 340, 343, 346, 349, 353, 354, 357, 362, 363, 365, 366, 372, 374, 375, 377, 378, 379, 380, 440, 442, 451, 454, 456, 460, 471, 473, 475, 477, 481, 490, 492, 494, 501, 503, 509, 512, 525, 530, 556, 559, 562, 563, 569, 571, 572, 574, 575, 576, 580, 581, 582, 583, 585, 588, 589, 591, 594, 597, 598, 599, 600, 602, 605, 606, 608, 610, 612, 614, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 704, 709, 715, 721, 725, 731, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 785, 787, 791, 794, 798, 799, 804, 805, 807, 813, 814, 820, 824, 829, 832, 833, 834, 835, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 852, 855, 856, 858, 860, 863, 864, 866, 868, 871, 872, 874, 876, 877, 880, 881, 885, 888, 889, 890, 892, 895, 896, 897, 899, 902, 905, 908, 927, 934, 937, 938, 939, 942, 945, 948, 951, 953, 956, 957, 958, 961, 962, 963, 966, 967, 968, 971, 972, 973, 976, 977, 979, 982, 983, 985, 988, 989, 991, 994, 995, 997, 1000, 1001, 1003, 1006, 1007, 1009, 1012, 1013, 1015, 1018, 1019, 1021, 1024, 1025, 1323, 1324, 1340, 1352], "target_point": [152, 153, 1323], "target_var": [659, 660, 1352], "targets_i0": [327, 334], "targets_i0_i1": 213, "task": 1349, "tbl": [0, 735, 736, 1329], "tbl_file": [735, 736], "tblfile": [0, 735, 736, 1329], "tcp": 1348, "tdata": [0, 1, 18, 28, 54, 56, 68, 102, 104, 163, 165, 175, 176, 210, 213, 222, 225, 264, 265, 266, 267, 270, 271, 278, 288, 290, 291, 294, 295, 296, 297, 301, 305, 309, 313, 319, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 353, 354, 357, 362, 363, 372, 374, 377, 378, 379, 440, 442, 451, 454, 456, 460, 471, 473, 475, 477, 481, 490, 492, 494, 501, 503, 509, 512, 525, 530, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 588, 591, 594, 597, 598, 600, 602, 605, 606, 608, 610, 612, 614, 622, 629, 781, 785, 787, 791, 794, 798, 799, 804, 805, 807, 813, 814, 820, 824, 829, 832, 833, 834, 835, 837, 838, 842, 843, 844, 845, 847, 848, 849, 852, 855, 858, 860, 863, 866, 868, 871, 874, 876, 877, 880, 883, 885, 888, 889, 890, 892, 895, 896, 897, 899, 902, 905, 908, 911, 927, 934, 937, 938, 939, 942, 945, 948, 951, 953, 956, 958, 961, 963, 966, 968, 971, 973, 976, 979, 982, 985, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 1324], "techinc": 852, "temperatur": [1272, 1301, 1333], "templat": [0, 1156, 1157, 1159, 1160, 1162, 1163, 1182, 1340, 1346, 1351], "tensor": 0, "terawatt": [155, 1323], "term": [0, 1340, 1341], "termin": [1348, 1361], "terminologi": [1338, 1343, 1354, 1360], "test": [0, 289, 579, 593, 787, 1156, 1159, 1199, 1205, 1206, 1208, 1215, 1216, 1222, 1223, 1229, 1230, 1237, 1238, 1245, 1337, 1339, 1343, 1348], "test_farm_67": [1356, 1361], "text": [1084, 1198], "th": [0, 1062, 1063, 1064, 1065, 1066, 1067], "than": [0, 1009, 1340, 1341, 1348, 1353, 1355, 1361], "thank": [0, 1198, 1348], "thei": [0, 203, 311, 336, 337, 357, 883, 1254, 1329, 1334, 1338, 1340, 1343, 1345, 1346, 1349, 1356], "them": [1196, 1345, 1348, 1357], "theoret": [824, 905, 911], "theori": [556, 1329], "thi": [0, 1, 18, 28, 47, 48, 50, 52, 54, 56, 60, 62, 64, 66, 68, 70, 88, 90, 93, 95, 102, 104, 163, 188, 190, 192, 203, 204, 206, 211, 222, 225, 234, 236, 248, 249, 250, 254, 255, 259, 263, 264, 274, 278, 284, 286, 288, 295, 296, 300, 301, 305, 309, 311, 313, 319, 340, 341, 343, 344, 346, 353, 357, 360, 365, 372, 373, 378, 394, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 442, 447, 449, 451, 454, 456, 460, 467, 469, 471, 473, 475, 477, 481, 485, 488, 490, 492, 494, 497, 499, 501, 503, 509, 512, 520, 523, 525, 528, 529, 530, 556, 559, 562, 563, 566, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 602, 605, 606, 608, 610, 612, 614, 616, 618, 622, 629, 636, 639, 641, 643, 646, 649, 653, 655, 659, 661, 664, 665, 667, 672, 673, 674, 676, 679, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 702, 709, 711, 715, 718, 725, 728, 735, 737, 739, 745, 748, 754, 758, 762, 766, 770, 774, 777, 781, 784, 787, 789, 794, 796, 799, 802, 807, 810, 814, 817, 822, 823, 824, 827, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 906, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1041, 1068, 1102, 1103, 1104, 1105, 1106, 1107, 1118, 1165, 1196, 1216, 1223, 1230, 1319, 1320, 1321, 1325, 1328, 1329, 1331, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361], "think": 1348, "third": [0, 1270, 1298, 1333], "those": [1338, 1340, 1348, 1361], "though": [1341, 1348, 1358], "thought": 1350, "thousand": 1198, "thread": [0, 428, 1326, 1348], "threadsengin": [0, 420, 428, 1326, 1348], "three": [0, 1340, 1343, 1358], "threshold": [646, 647, 1100, 1101, 1109], "through": [0, 559, 1329, 1337, 1351], "throughout": 1355, "throw": 278, "thrust": [0, 679, 680, 1266, 1280, 1329, 1333, 1337, 1338, 1340, 1342, 1350, 1358], "thrust2ct": [0, 679, 680, 681, 682, 683, 1329, 1346], "thrust_var": [679, 680, 1346], "ti": [0, 1, 2, 18, 28, 365, 366, 367, 371, 501, 502, 605, 608, 609, 690, 691, 745, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 945, 946, 953, 958, 963, 968, 1126, 1165, 1167, 1282, 1286, 1287, 1302, 1314, 1316, 1329, 1333, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "ti_cub": 1346, "ti_linear": [1340, 1346], "ti_max": 1346, "ti_quadrat": [0, 1340, 1346], "ti_quart": 1346, "ti_val": [690, 691], "ti_var": [365, 367, 690, 691, 1346], "tight_layout": 1342, "tilinear": [953, 954, 955, 956, 957, 1329, 1346], "timax": [958, 959, 960, 961, 962, 1329, 1346], "time": [0, 1, 18, 28, 102, 148, 163, 183, 192, 194, 206, 218, 222, 234, 244, 264, 269, 288, 293, 301, 306, 309, 316, 319, 322, 340, 342, 343, 345, 346, 352, 353, 356, 357, 364, 372, 376, 378, 381, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 441, 451, 454, 455, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 533, 556, 559, 562, 569, 571, 572, 576, 581, 583, 585, 591, 597, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1032, 1041, 1055, 1061, 1068, 1071, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1248, 1249, 1323, 1328, 1331, 1338, 1339, 1340, 1343, 1344, 1345, 1346, 1347, 1348, 1350, 1353, 1355, 1356], "time_coord": [454, 455, 1347], "time_format": [440, 441, 1345], "timelin": [0, 477, 478, 491, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 1329, 1340, 1346, 1355], "timelines_": [1340, 1346], "timelines_10": [1346, 1355], "timeouterror": 1198, "timepandasindexpandasindex": 1347, "timeseri": [0, 454, 471, 473, 475, 477, 478, 490, 530, 531, 533, 781, 782, 799, 800, 814, 815, 1055, 1328, 1329, 1336, 1337, 1338, 1344, 1347, 1348, 1353, 1355, 1361], "timeseries_100": [0, 1344, 1355], "timeseries_3000": 1353, "timeseries_8000": [1356, 1361], "timeseries_data": 1348, "timeseries_slurm": 0, "timeseries_var": 1348, "timestep": 0, "tip": [629, 1329], "tipow": [963, 964, 965, 966, 967, 1329, 1346], "tiquadrat": [0, 968, 969, 970, 971, 972, 1329, 1346], "titl": [0, 1034, 1062, 1063, 1064, 1065, 1066, 1067, 1084, 1085, 1087, 1089, 1116, 1118, 1124, 1126, 1130, 1132, 1335, 1341, 1342, 1343, 1344, 1347, 1349, 1350, 1352, 1353, 1355, 1356, 1357, 1361], "tke": [0, 605, 1329, 1343, 1347], "tke2ti": [0, 605, 606, 607, 1329, 1340, 1346], "tl_height": [477, 478, 490, 491], "tldr": 1337, "tmodel": [149, 1323, 1348], "tmodel_sel": [150, 1323, 1348], "tmodel_typ": [343, 345, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690], "tname": [151, 1323, 1342, 1348, 1352, 1353, 1354], "to_csv": [534, 1255], "to_datafram": [1345, 1347, 1350, 1354, 1355, 1356, 1358], "to_fil": [1076, 1102, 1103, 1104, 1105, 1106, 1107, 1119, 1121], "to_netcdf": 1264, "to_numpi": [1341, 1342, 1349], "to_utm": 1253, "toc": [394, 1135, 1142, 1343], "togeth": [255, 301, 1347, 1358, 1361], "too": 1348, "tool": [535, 536, 1256, 1328, 1339, 1353, 1361], "top": [163, 591, 845, 1317, 1327, 1329, 1334, 1340, 1342, 1349, 1358], "top_hat": [1340, 1346, 1349], "tophatwakemodel": [845, 846, 847, 848, 849, 850, 851, 885, 892, 934, 1334, 1340], "torben": 559, "total": [0, 28, 44, 102, 109, 222, 228, 319, 325, 378, 388, 440, 448, 451, 454, 456, 468, 471, 473, 475, 477, 486, 490, 492, 498, 501, 506, 509, 521, 525, 530, 1032, 1041, 1049, 1061, 1068, 1070, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133], "touch": 0, "tpoint": [144, 152, 153, 278, 327, 331, 1323], "tpoint_mean": [327, 335], "tpoint_weight": [156, 1323], "trace": 1355, "traceback": [206, 212, 406, 412, 413, 414, 417, 420, 421, 422, 428], "tracker": 1337, "trajectori": 1355, "transfer": [0, 1358], "transform": 1340, "translat": [0, 357, 539, 1328, 1338, 1358], "transport": 1344, "travel": 1344, "treat": [68, 1060, 1353], "treatment": 0, "trigger": [1048, 1198, 1361], "trivial": 1348, "troldborg": [868, 876, 1334, 1341], "true": [1, 4, 5, 18, 20, 28, 42, 75, 80, 84, 112, 163, 165, 172, 175, 176, 195, 198, 211, 215, 231, 242, 243, 272, 278, 280, 283, 288, 289, 313, 327, 350, 351, 359, 391, 392, 394, 398, 399, 404, 429, 431, 435, 525, 526, 532, 534, 576, 579, 581, 583, 585, 591, 593, 597, 618, 622, 623, 629, 630, 705, 706, 712, 713, 722, 723, 732, 733, 742, 743, 751, 752, 930, 946, 1041, 1050, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1095, 1096, 1135, 1141, 1143, 1147, 1148, 1149, 1150, 1152, 1155, 1159, 1198, 1204, 1205, 1214, 1215, 1216, 1218, 1221, 1222, 1223, 1225, 1228, 1229, 1230, 1232, 1236, 1237, 1244, 1245, 1253, 1254, 1324, 1331, 1340, 1341, 1342, 1344, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1355, 1356, 1357, 1361], "truli": 0, "truth": 1349, "try": [0, 1348, 1349], "ttype": [545, 547, 1328, 1341, 1349, 1352], "ttype_typ": [346, 352, 695, 697, 699, 709, 715, 725, 735, 737, 745, 1361], "tupl": [19, 29, 167, 168, 175, 176, 183, 185, 194, 195, 196, 197, 198, 204, 205, 213, 217, 218, 221, 232, 233, 244, 252, 254, 269, 273, 293, 298, 300, 306, 316, 322, 328, 329, 330, 331, 342, 345, 352, 356, 364, 366, 376, 381, 399, 401, 403, 407, 410, 415, 418, 423, 425, 430, 433, 434, 452, 455, 474, 476, 478, 491, 526, 532, 533, 534, 540, 542, 554, 584, 710, 755, 759, 763, 767, 843, 902, 942, 948, 1034, 1056, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1071, 1076, 1085, 1086, 1089, 1092, 1097, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1118, 1126, 1130, 1131, 1132, 1145, 1147, 1148, 1152, 1153, 1154, 1156, 1157, 1182, 1198, 1249, 1256], "turbim": [435, 1328], "turbin": [0, 1, 3, 4, 5, 18, 20, 28, 32, 33, 38, 50, 56, 60, 142, 145, 149, 150, 151, 154, 163, 167, 191, 195, 201, 231, 234, 235, 237, 239, 246, 263, 264, 265, 266, 267, 268, 272, 278, 288, 290, 291, 313, 327, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 357, 360, 362, 363, 372, 373, 374, 375, 379, 382, 384, 388, 389, 390, 396, 397, 432, 433, 434, 435, 436, 437, 438, 439, 545, 547, 549, 551, 562, 563, 564, 566, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 588, 591, 594, 597, 598, 618, 636, 637, 639, 641, 643, 646, 649, 653, 655, 659, 660, 661, 664, 667, 674, 676, 679, 682, 684, 685, 687, 688, 690, 693, 695, 697, 699, 702, 709, 711, 715, 718, 725, 728, 735, 737, 739, 745, 748, 781, 784, 785, 787, 789, 791, 794, 796, 798, 799, 802, 804, 805, 807, 810, 813, 814, 817, 820, 824, 827, 829, 832, 835, 838, 839, 842, 845, 847, 848, 852, 855, 856, 860, 863, 864, 868, 871, 872, 876, 877, 880, 881, 885, 888, 889, 892, 895, 896, 899, 905, 911, 930, 934, 937, 938, 939, 945, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024, 1034, 1037, 1039, 1041, 1043, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1076, 1079, 1080, 1083, 1102, 1103, 1104, 1116, 1119, 1121, 1124, 1126, 1129, 1130, 1276, 1277, 1290, 1291, 1303, 1310, 1311, 1318, 1319, 1320, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1333, 1336, 1337, 1338, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1355, 1356, 1357, 1358, 1360, 1361], "turbine1": 1340, "turbine2farmmodel": [563, 564, 565, 566, 567, 568, 1329, 1346], "turbine_base_nam": 432, "turbine_base_name_count_shift": 432, "turbine_id": 432, "turbine_model": [336, 337, 432, 549, 563, 564, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 1338, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "turbine_model_nam": 234, "turbine_nam": [382, 389, 1077, 1079, 1080], "turbine_paramet": [432, 435, 436, 437, 438, 439], "turbine_result": 1356, "turbine_typ": [234, 549, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 1124, 1126, 1340, 1341, 1342, 1343, 1346, 1349, 1352, 1354, 1361], "turbine_yield": [1041, 1048], "turbineinductionmodel": [340, 341, 342, 852, 860, 868, 877, 1324, 1334], "turbinemodel": [263, 338, 339, 343, 344, 345, 346, 549, 563, 564, 636, 637, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 1324, 1329], "turbineord": 1, "turbines_op": [1041, 1057], "turbinetyp": [234, 346, 347, 348, 349, 350, 351, 352, 549, 699, 700, 709, 710, 715, 716, 725, 726, 737, 738, 745, 746, 1324, 1329], "turbinetypecurv": [0, 1124, 1125, 1126, 1330, 1343, 1350], "turbopark": [0, 939, 945, 1334], "turbopark_": [1340, 1346], "turbopark_linear": 1346, "turbopark_linear_ambka0": 1346, "turbopark_linear_k0": 1346, "turbopark_linear_ka0": 1346, "turbopark_quadratic_loc_k004": 1340, "turboparkb_": 1346, "turboparkb_linear": 1346, "turboparkb_linear_ambka0": 1346, "turboparkb_linear_k0": 1346, "turboparkb_linear_ka0": 1346, "turboparkix": 0, "turboparkix_": 1346, "turboparkix_linear_ambka0": 1346, "turboparkix_linear_dx100": 1346, "turboparkix_linear_k0": 1346, "turboparkix_linear_ka0": 1346, "turboparkwak": [0, 939, 940, 941, 942, 943, 944, 1334, 1346], "turboparkwakeix": [945, 946, 947, 948, 949, 950, 951, 952, 1334, 1346], "turbul": [0, 319, 745, 885, 939, 940, 1273, 1302, 1329, 1333, 1334, 1340, 1345, 1347, 1356, 1357, 1358], "tw": [137, 155, 1323], "tweight": [156, 327, 331, 1323], "two": [0, 40, 178, 179, 189, 241, 281, 321, 436, 445, 453, 464, 495, 517, 527, 603, 644, 669, 674, 697, 720, 730, 735, 737, 741, 745, 750, 1102, 1103, 1104, 1105, 1106, 1107, 1196, 1251, 1258, 1259, 1329, 1330, 1331, 1338, 1340, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1356, 1358, 1361], "two_circl": [1258, 1259], "txt": 0, "txyh": [1303, 1333], "type": [0, 1, 18, 28, 47, 50, 54, 60, 64, 68, 82, 83, 88, 93, 102, 112, 114, 115, 125, 129, 163, 192, 203, 206, 212, 222, 234, 239, 248, 255, 263, 264, 274, 282, 288, 289, 295, 301, 309, 319, 336, 337, 340, 343, 346, 352, 353, 357, 365, 372, 378, 406, 412, 413, 414, 417, 420, 421, 422, 428, 432, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 545, 547, 549, 551, 554, 555, 556, 559, 562, 563, 569, 571, 572, 576, 579, 581, 583, 585, 591, 593, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1037, 1119, 1124, 1126, 1198, 1323, 1324, 1326, 1328, 1329, 1330, 1337, 1338, 1341, 1343, 1344, 1345, 1346, 1349, 1350, 1354, 1356, 1358], "type_col": [1032, 1037], "typeerror": [0, 289, 579, 593, 1198, 1340], "typic": [254, 300, 319, 1338, 1340], "u": [1260, 1261], "u19": 1347, "u2": [1348, 1353, 1354], "u3": [1342, 1348], "u7": 1348, "ubuntu": 1348, "uk": 852, "unboundlocalerror": 1198, "uncertainti": 1048, "under": [0, 18, 26, 27, 28, 88, 89, 93, 94, 234, 235, 241, 255, 281, 301, 321, 445, 453, 464, 495, 517, 527, 603, 644, 669, 720, 730, 741, 750, 1320, 1334, 1337, 1340, 1342, 1343, 1345, 1346, 1350, 1351, 1358, 1361], "underli": [1073, 1340, 1344], "understood": [0, 1338], "unequ": 0, "unfinish": 0, "unicodedecodeerror": 1198, "unicodeencodeerror": 1198, "unicodeerror": 1198, "unicodetranslateerror": 1198, "unicodewarn": 1198, "unifi": 1361, "uniform": [0, 440, 441, 456, 458, 501, 509, 511, 533, 600, 601, 691, 777, 814, 1328, 1329, 1340, 1341, 1342, 1343, 1349, 1351, 1354, 1356, 1358], "uniformprofil": [777, 778, 779, 780, 1329], "union": [1208, 1331], "uniqu": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 248, 255, 263, 264, 274, 282, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "unit": [82, 83, 127, 131, 137, 155, 159, 162, 346, 347, 387, 440, 441, 646, 647, 885, 886, 1048, 1055, 1267, 1293, 1323, 1333, 1340, 1343], "unittest": 0, "uns": 1318, "unset_run": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 188, 190, 192, 203, 222, 234, 248, 255, 263, 264, 274, 284, 286, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 447, 449, 451, 454, 456, 467, 469, 471, 473, 475, 477, 485, 488, 490, 492, 497, 499, 501, 509, 520, 523, 525, 528, 529, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 672, 673, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 822, 823, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021], "unstabl": [762, 766, 1192, 1193, 1194, 1329, 1331], "until": [0, 1318, 1320, 1344], "up": [0, 3, 835, 836, 846, 1055, 1062, 1063, 1064, 1083, 1340, 1341, 1342, 1348], "upcast": 278, "updat": [0, 28, 29, 97, 101, 264, 267, 288, 291, 379, 569, 571, 572, 576, 581, 583, 585, 588, 591, 597, 598, 646, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024, 1090, 1094, 1095, 1099, 1321, 1353, 1358, 1361], "update_n_turbin": [1, 18, 28, 163, 191], "upon": 1340, "upper": [359, 608, 609, 629, 973, 974, 979, 980, 985, 986, 991, 992, 997, 998, 1003, 1004, 1009, 1010, 1015, 1016, 1021, 1022, 1083, 1329, 1344, 1349, 1355], "upstream": [877, 1340, 1341, 1342], "upward": 1340, "upwind": [340, 341, 372, 373, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 934, 939, 945], "urel": [18, 26, 28, 93, 94], "urelax": [18, 27, 28, 88, 89, 93, 94, 95, 96, 1320], "url": 1335, "urlx": 27, "us": [0, 28, 54, 55, 206, 207, 210, 255, 301, 365, 371, 378, 405, 411, 416, 419, 426, 431, 432, 440, 441, 605, 608, 646, 699, 754, 755, 758, 759, 762, 763, 766, 767, 787, 825, 832, 835, 885, 886, 905, 906, 911, 926, 1034, 1041, 1050, 1056, 1079, 1080, 1082, 1198, 1321, 1328, 1329, 1337, 1338, 1339, 1340, 1341, 1342, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1361], "usag": [0, 1062, 1063, 1064, 1065, 1066, 1067, 1132, 1338, 1339, 1344], "use_amb_ti": [365, 371], "use_ambti": [885, 886, 1346], "use_point": 1082, "use_weight": [1041, 1050], "useful": 1339, "user": [0, 1267, 1293, 1317, 1328, 1333, 1337, 1338, 1340, 1348], "userwarn": 1198, "ustar": [0, 608, 754, 755, 758, 759, 762, 763, 766, 767, 1184, 1186, 1188, 1191, 1192, 1194, 1304, 1329, 1332, 1333], "ustar2ti": [0, 608, 609, 610, 611, 1329, 1346], "ustar_input": [754, 755, 758, 759, 762, 763, 766, 767], "usual": [1337, 1338, 1340, 1360], "utem": [1253, 1256], "util": [0, 27, 112, 187, 195, 382, 394, 405, 411, 416, 419, 426, 431, 538, 539, 540, 542, 543, 544, 546, 549, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1317, 1322, 1324, 1325], "utm": [1253, 1256], "utm_zone_str": [1253, 1256], "utmi": [441, 1345], "utmx": [441, 1345], "uv": [1260, 1261, 1331], "uv2wd": [1260, 1331], "v": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 163, 192, 203, 222, 234, 248, 255, 263, 264, 274, 287, 288, 295, 301, 309, 319, 340, 343, 346, 353, 357, 365, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1260, 1261], "v2": 892, "valid": [157, 559, 699, 700, 715, 716, 725, 726, 745, 746, 1323, 1329, 1337, 1340], "valu": [0, 1, 3, 4, 5, 8, 11, 17, 26, 28, 29, 48, 52, 56, 62, 66, 70, 82, 83, 90, 95, 104, 137, 169, 180, 188, 190, 193, 204, 206, 210, 212, 213, 225, 236, 250, 259, 265, 266, 267, 268, 270, 271, 284, 286, 290, 291, 294, 296, 305, 311, 344, 357, 361, 365, 366, 367, 374, 375, 377, 405, 406, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 428, 431, 440, 441, 442, 447, 449, 452, 456, 458, 460, 467, 469, 477, 478, 481, 485, 488, 492, 493, 494, 497, 499, 501, 502, 503, 509, 511, 512, 520, 523, 528, 529, 532, 533, 534, 537, 542, 549, 556, 557, 558, 559, 561, 566, 574, 575, 580, 588, 594, 598, 602, 606, 608, 609, 610, 612, 613, 614, 618, 639, 642, 643, 646, 649, 653, 654, 655, 661, 667, 672, 673, 676, 682, 685, 688, 691, 693, 702, 711, 718, 728, 737, 739, 745, 748, 766, 770, 771, 777, 778, 781, 782, 787, 790, 794, 797, 799, 800, 803, 807, 811, 814, 815, 819, 822, 823, 824, 828, 832, 833, 834, 835, 836, 837, 838, 839, 843, 844, 846, 847, 848, 849, 855, 856, 858, 863, 864, 866, 871, 872, 874, 880, 881, 883, 888, 889, 890, 895, 896, 897, 902, 906, 908, 927, 930, 937, 938, 942, 948, 951, 1043, 1048, 1055, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1079, 1080, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1126, 1132, 1135, 1156, 1157, 1159, 1161, 1188, 1190, 1192, 1193, 1198, 1253, 1257, 1286, 1323, 1329, 1331, 1333, 1340, 1341, 1342, 1345, 1346, 1347, 1348, 1350, 1352, 1358], "valueerror": [391, 1198], "var": [1, 18, 28, 47, 50, 54, 60, 64, 68, 88, 93, 102, 158, 163, 192, 203, 222, 234, 248, 255, 263, 264, 274, 287, 288, 295, 301, 309, 319, 340, 343, 346, 353, 355, 357, 365, 372, 378, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 613, 616, 622, 629, 636, 641, 646, 653, 654, 659, 664, 666, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 757, 758, 761, 762, 765, 766, 769, 770, 773, 774, 776, 777, 780, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1041, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1132, 1198, 1323, 1341, 1342, 1353], "var2amb": [1316, 1333], "var2arg": [1156, 1157], "var2col": [456, 458, 509, 511, 530, 532, 534, 600, 601, 1340, 1343, 1344, 1347, 1349, 1352, 1353, 1355, 1356, 1357, 1361], "var2ncvar": [440, 441, 1345], "var_period": 660, "var_valu": [1156, 1161], "var_wd": [794, 795], "var_ws_ct": [679, 680, 700, 716, 726, 738, 746, 1346, 1348], "var_ws_p": [646, 647, 700, 716, 726, 738, 746, 1346, 1348], "vari": [0, 1338, 1341, 1343, 1347, 1348, 1351], "variabl": [0, 1, 4, 5, 18, 20, 26, 28, 29, 32, 33, 47, 48, 49, 50, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 72, 82, 83, 88, 90, 91, 93, 94, 95, 96, 102, 104, 108, 158, 163, 167, 168, 192, 195, 199, 203, 204, 210, 213, 222, 225, 227, 231, 234, 236, 242, 243, 245, 248, 250, 251, 253, 254, 255, 259, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 278, 287, 288, 290, 291, 294, 295, 296, 297, 299, 300, 301, 305, 307, 309, 310, 311, 313, 317, 319, 323, 327, 335, 340, 343, 344, 346, 349, 350, 351, 353, 355, 357, 359, 363, 365, 367, 372, 374, 375, 377, 378, 379, 380, 405, 411, 416, 419, 426, 431, 440, 441, 442, 446, 451, 452, 454, 456, 458, 460, 465, 471, 473, 475, 477, 481, 484, 490, 492, 493, 494, 496, 501, 502, 503, 505, 509, 511, 512, 518, 525, 530, 532, 533, 534, 541, 542, 548, 556, 559, 562, 563, 566, 567, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 588, 591, 594, 597, 598, 600, 601, 602, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 622, 629, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 649, 651, 653, 654, 655, 657, 659, 660, 661, 663, 664, 666, 667, 670, 671, 674, 675, 676, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 697, 699, 700, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 718, 721, 722, 723, 724, 725, 726, 728, 731, 732, 733, 734, 735, 737, 738, 739, 742, 743, 744, 745, 746, 748, 751, 752, 753, 754, 757, 758, 761, 762, 765, 766, 769, 770, 771, 773, 774, 776, 777, 778, 780, 781, 787, 794, 795, 799, 805, 807, 814, 824, 832, 833, 834, 835, 836, 837, 838, 839, 842, 844, 845, 846, 847, 849, 852, 855, 856, 858, 860, 863, 864, 866, 868, 871, 872, 874, 876, 877, 880, 881, 883, 885, 886, 888, 890, 892, 895, 897, 899, 905, 908, 911, 934, 937, 939, 945, 951, 953, 956, 957, 958, 961, 962, 963, 966, 967, 968, 971, 972, 973, 976, 977, 978, 979, 982, 983, 984, 985, 988, 989, 990, 991, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1034, 1041, 1046, 1047, 1050, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1073, 1076, 1077, 1079, 1080, 1081, 1083, 1084, 1085, 1102, 1103, 1104, 1105, 1106, 1107, 1116, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1127, 1129, 1130, 1132, 1156, 1157, 1161, 1164, 1182, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1320, 1323, 1328, 1329, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "variat": [1340, 1344, 1347], "variou": [0, 1340, 1349], "varlu": [847, 888, 895, 937], "varmap": [641, 642, 699, 700], "vars_op": [1041, 1058, 1059], "vector": [0, 161, 436, 439, 1062, 1063, 1064, 1065, 1066, 1067, 1095, 1096, 1230, 1231, 1260, 1261, 1262, 1263, 1303, 1317, 1326, 1331, 1333, 1337, 1344, 1348, 1356], "veer": 0, "veloc": [0, 1184, 1186, 1188, 1191, 1192, 1194, 1304, 1332, 1333], "venv": [1198, 1339], "verbos": [1, 18, 28, 47, 50, 54, 57, 60, 64, 68, 71, 73, 75, 77, 80, 82, 84, 86, 88, 93, 102, 107, 112, 163, 164, 185, 188, 190, 192, 195, 203, 206, 207, 219, 222, 231, 234, 238, 240, 241, 248, 255, 263, 264, 272, 274, 277, 279, 281, 284, 286, 288, 295, 301, 309, 319, 321, 324, 327, 340, 343, 346, 353, 357, 365, 372, 378, 382, 384, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 432, 434, 435, 436, 437, 438, 439, 440, 445, 447, 449, 451, 453, 454, 456, 462, 464, 466, 467, 469, 471, 473, 475, 477, 483, 485, 488, 490, 492, 495, 497, 499, 501, 504, 509, 514, 516, 517, 519, 520, 523, 525, 527, 528, 529, 530, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 553, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 595, 597, 600, 603, 605, 608, 612, 616, 622, 626, 629, 633, 636, 641, 644, 646, 650, 653, 656, 659, 662, 664, 668, 669, 672, 673, 674, 677, 679, 684, 687, 690, 695, 697, 699, 703, 709, 715, 719, 720, 725, 729, 730, 735, 737, 740, 741, 745, 749, 750, 754, 758, 762, 766, 770, 774, 777, 781, 786, 787, 792, 794, 799, 806, 807, 814, 818, 821, 822, 823, 824, 830, 832, 835, 840, 842, 845, 850, 852, 857, 860, 865, 868, 873, 876, 877, 882, 885, 892, 899, 903, 905, 909, 911, 931, 934, 939, 943, 945, 949, 950, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1027, 1030, 1041, 1043, 1044, 1079, 1080, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1143, 1146, 1149, 1251, 1255, 1264, 1328, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "verbosity_delta": [1061, 1100, 1101, 1108, 1109], "verbostii": 1030, "veri": [1343, 1345, 1348, 1361], "verif": [1336, 1337, 1340], "verifi": 0, "versa": 1340, "version": [0, 1337, 1339, 1348, 1359], "vertic": [0, 353, 356, 629, 630, 754, 758, 762, 766, 770, 774, 777, 1061, 1063, 1064, 1100, 1108, 1324, 1329, 1330, 1337, 1346, 1347, 1351, 1358], "vertical_profil": [754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780], "verticalprofil": [353, 354, 355, 356, 501, 502, 509, 511, 754, 755, 758, 759, 762, 763, 766, 767, 770, 774, 777, 1324, 1329], "via": [0, 47, 50, 54, 60, 64, 68, 88, 93, 102, 203, 222, 234, 248, 254, 255, 263, 295, 300, 301, 309, 319, 324, 343, 346, 429, 432, 433, 440, 441, 451, 454, 456, 458, 466, 471, 473, 475, 477, 490, 492, 501, 509, 511, 519, 525, 530, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 1032, 1041, 1061, 1068, 1073, 1074, 1077, 1081, 1087, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1165, 1326, 1327, 1328, 1331, 1337, 1344, 1348, 1350, 1356, 1358, 1360, 1361], "vice": 1340, "vicin": [1342, 1355], "virtual": [0, 1340, 1348], "visibl": 1342, "visual": [0, 1087, 1330, 1340, 1342, 1347, 1350, 1352, 1354, 1355, 1356], "vlabel": [1062, 1063, 1064, 1065, 1066, 1067, 1132], "vlim": [1, 18, 28, 163, 185], "vmax": [1062, 1063, 1064, 1065, 1066, 1067, 1102, 1103, 1104, 1105, 1106, 1107, 1132, 1341, 1342, 1350, 1353, 1355], "vmin": [1062, 1063, 1064, 1065, 1066, 1067, 1102, 1103, 1104, 1105, 1106, 1107, 1132, 1341, 1342, 1344, 1350, 1353, 1355], "vollmer": 1335, "volluk": 892, "volum": 1335, "von": [130, 1184, 1186, 1188, 1191, 1192, 1194, 1323], "vortex": [877, 1334, 1341], "vortexsheet": [0, 877, 878, 879, 880, 881, 882, 883, 884, 1334, 1346], "vortexsheet_": 1346, "vortexsheet_linear": 1346, "vpar": [1095, 1096], "vr": 1164, "w": [0, 46, 137, 159, 278, 347, 365, 366, 456, 501, 502, 605, 608, 695, 696, 698, 715, 716, 725, 726, 735, 737, 745, 1132, 1165, 1167, 1169, 1184, 1187, 1188, 1192, 1261, 1262, 1282, 1307, 1314, 1316, 1323, 1329, 1331, 1333, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "wa": [1344, 1348, 1352, 1355], "wai": [1340, 1345, 1348, 1355, 1361], "wake": [0, 1, 3, 4, 5, 11, 16, 17, 18, 28, 47, 54, 55, 56, 88, 142, 264, 265, 266, 267, 268, 270, 271, 278, 288, 289, 290, 291, 292, 293, 294, 340, 357, 358, 359, 361, 362, 363, 364, 365, 372, 374, 375, 376, 377, 378, 379, 380, 381, 549, 552, 569, 571, 572, 574, 575, 576, 579, 580, 581, 582, 583, 585, 586, 588, 589, 591, 593, 594, 597, 598, 599, 612, 690, 781, 782, 785, 787, 788, 790, 791, 794, 797, 798, 799, 803, 804, 805, 807, 811, 813, 814, 815, 819, 820, 824, 825, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 852, 855, 856, 858, 860, 863, 864, 866, 868, 871, 872, 874, 876, 877, 880, 881, 883, 885, 886, 888, 889, 890, 892, 893, 895, 896, 897, 899, 902, 905, 906, 908, 911, 926, 930, 934, 937, 938, 939, 942, 945, 946, 948, 951, 953, 954, 956, 957, 958, 959, 961, 962, 963, 964, 966, 967, 968, 969, 971, 972, 973, 974, 976, 977, 979, 980, 982, 983, 985, 986, 988, 989, 991, 992, 994, 995, 997, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1015, 1016, 1018, 1019, 1021, 1022, 1024, 1025, 1095, 1096, 1198, 1285, 1294, 1295, 1314, 1319, 1320, 1323, 1324, 1329, 1330, 1333, 1334, 1336, 1337, 1338, 1341, 1342, 1345, 1346, 1347, 1348, 1350, 1351, 1354, 1356, 1357], "wake_coo": [362, 374, 785, 791, 798, 804, 813, 820, 829, 838, 855, 863, 871, 880], "wake_delta": [264, 265, 266, 267, 268, 270, 271, 288, 290, 291, 294, 340, 372, 374, 375, 377, 379, 380, 569, 571, 572, 574, 575, 576, 580, 581, 583, 585, 588, 591, 594, 597, 598, 832, 835, 838, 839, 842, 845, 852, 855, 856, 858, 860, 863, 864, 866, 868, 871, 872, 874, 876, 877, 880, 881, 883, 885, 890, 892, 897, 899, 905, 934, 939, 945, 951, 956, 957, 961, 962, 966, 967, 971, 972, 976, 977, 982, 983, 988, 989, 994, 995, 1000, 1001, 1006, 1007, 1012, 1013, 1018, 1019, 1024, 1025], "wake_fram": [1, 3, 16, 18, 28, 288, 549, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 1341, 1342, 1344, 1345, 1346, 1353, 1355, 1358], "wake_k": [825, 885, 886, 892, 893, 899, 900, 905, 906, 934, 935, 939, 940, 945, 946, 1181, 1182, 1331, 1340], "wake_model": [0, 1, 3, 17, 18, 28, 54, 55, 288, 359, 549, 552, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 1341, 1342, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "wake_model_result": [379, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024], "wake_r": [847, 848, 888, 889, 895, 896, 937, 938], "wake_superposit": [549, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1346], "wakedelta": [612, 613, 614, 615, 1329, 1340], "wakefram": [1, 16, 288, 357, 358, 359, 360, 361, 362, 363, 364, 549, 781, 787, 788, 794, 807, 814, 824, 825, 1324, 1329], "wakek": [0, 365, 366, 367, 368, 369, 370, 371, 825, 885, 886, 892, 893, 899, 900, 905, 906, 934, 935, 939, 940, 945, 946, 1324], "wakekfactori": [0, 1149, 1154, 1181, 1182, 1183, 1331], "wakemirror": [0, 569, 572, 573, 574, 575, 1329, 1346], "wakemodel": [1, 17, 54, 55, 265, 266, 267, 270, 271, 288, 289, 290, 291, 294, 340, 359, 372, 373, 374, 375, 376, 377, 549, 552, 574, 575, 579, 580, 588, 593, 594, 598, 835, 1324, 1334], "wakes0": 1342, "wakesuperposit": [378, 379, 380, 381, 549, 835, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1324, 1329], "want": 1358, "warn": [787, 1198], "watt": [137, 159, 1055, 1323], "wd": [0, 1, 2, 18, 28, 501, 502, 660, 794, 795, 812, 1132, 1165, 1167, 1260, 1261, 1262, 1263, 1282, 1305, 1314, 1316, 1331, 1333, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361], "wd2uv": [1261, 1331], "wd2wdvec": [1262, 1331], "wd_a": [1197, 1331], "wd_b": [1197, 1331], "wd_max": 1352, "wd_min": 1352, "wd_sector": [1081, 1083, 1085, 1122, 1127, 1129, 1130, 1361], "wd_var": [82, 83, 1081, 1083, 1085, 1122, 1127, 1129, 1130], "wdelta": [379, 833, 834, 837, 844, 849, 908, 956, 961, 966, 971, 976, 982, 988, 994, 1000, 1006, 1012, 1018, 1024], "wdvec": [1262, 1263, 1331], "wdvec2wd": [1263, 1331], "we": [0, 559, 868, 876, 877, 885, 1337, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "weakest": 1341, "websit": 1347, "weight": [0, 1, 2, 18, 28, 46, 102, 111, 139, 156, 222, 230, 267, 288, 291, 292, 309, 311, 313, 318, 319, 326, 331, 440, 441, 450, 451, 454, 456, 470, 471, 473, 475, 477, 489, 490, 492, 500, 501, 508, 509, 524, 525, 530, 532, 534, 576, 581, 582, 583, 585, 588, 589, 591, 597, 598, 599, 616, 618, 621, 622, 628, 629, 630, 635, 1041, 1050, 1058, 1059, 1060, 1076, 1083, 1087, 1102, 1103, 1104, 1129, 1130, 1306, 1323, 1329, 1330, 1333, 1337, 1338, 1342, 1343, 1348, 1351, 1352, 1353, 1354, 1356, 1357], "weight_ncvar": [440, 441], "weight_turbin": [1074, 1076, 1102, 1103, 1104], "weinsum": [1041, 1060], "well": [1337, 1340, 1343, 1349, 1358], "were": [0, 1358], "west": [1352, 1358], "westerli": [1342, 1352], "wframe_typ": [357, 364, 781, 787, 794, 799, 807, 814, 824], "what": [1347, 1361], "when": [0, 787, 1340, 1342, 1343, 1344, 1345, 1348, 1350, 1353, 1356], "whenev": [1339, 1340, 1348, 1353, 1361], "where": [0, 540, 542, 636, 637, 1035, 1082, 1257, 1261, 1262, 1340, 1344, 1348, 1351, 1352, 1358, 1361], "which": [0, 47, 49, 50, 53, 54, 58, 60, 63, 64, 67, 68, 72, 88, 91, 93, 96, 102, 108, 163, 222, 227, 234, 245, 248, 253, 255, 261, 263, 295, 299, 301, 307, 309, 317, 319, 323, 343, 346, 357, 379, 380, 440, 446, 451, 452, 454, 456, 458, 465, 471, 473, 475, 477, 478, 484, 490, 491, 492, 496, 501, 505, 509, 518, 525, 530, 562, 563, 567, 600, 604, 605, 607, 608, 611, 612, 615, 616, 622, 629, 636, 640, 641, 645, 646, 651, 653, 657, 659, 660, 663, 664, 670, 674, 675, 678, 679, 683, 684, 686, 687, 689, 690, 694, 695, 697, 699, 700, 707, 709, 714, 715, 716, 724, 725, 726, 734, 735, 737, 744, 745, 746, 753, 787, 788, 824, 825, 833, 834, 835, 837, 843, 844, 847, 849, 883, 888, 895, 902, 908, 937, 942, 948, 956, 957, 961, 962, 963, 964, 966, 967, 971, 972, 973, 976, 977, 978, 979, 982, 983, 984, 985, 988, 989, 990, 991, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1034, 1037, 1038, 1039, 1040, 1056, 1076, 1102, 1103, 1104, 1123, 1132, 1156, 1157, 1182, 1260, 1263, 1324, 1329, 1334, 1337, 1338, 1340, 1342, 1344, 1345, 1348, 1349, 1353, 1354, 1355, 1358, 1360, 1361], "while": [1339, 1340, 1342], "white": 1350, "whole": [0, 1347], "whose": [220, 405, 408, 411, 416, 419, 426, 431, 1343, 1361], "width": 0, "wilei": [868, 876], "wind": [0, 1, 3, 18, 28, 29, 82, 83, 126, 151, 154, 163, 164, 173, 234, 237, 319, 336, 337, 346, 349, 382, 383, 384, 387, 388, 390, 432, 433, 434, 435, 436, 437, 438, 439, 456, 501, 502, 538, 544, 545, 548, 562, 646, 647, 679, 680, 695, 696, 697, 698, 699, 700, 704, 709, 715, 716, 721, 725, 726, 731, 735, 737, 738, 745, 746, 754, 758, 762, 766, 774, 782, 787, 794, 795, 824, 852, 860, 861, 868, 869, 876, 877, 878, 885, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 973, 974, 979, 980, 985, 986, 991, 992, 997, 998, 1003, 1004, 1009, 1010, 1015, 1016, 1021, 1022, 1032, 1033, 1035, 1036, 1049, 1083, 1085, 1086, 1102, 1103, 1104, 1105, 1106, 1107, 1123, 1126, 1127, 1128, 1129, 1130, 1131, 1172, 1175, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1194, 1197, 1260, 1261, 1262, 1263, 1268, 1269, 1270, 1274, 1275, 1296, 1297, 1298, 1305, 1307, 1323, 1324, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1336, 1337, 1339, 1340, 1341, 1344, 1345, 1346, 1348, 1349, 1350, 1353, 1354, 1355, 1356, 1358, 1360, 1361], "wind_farm": [382, 383, 1361], "wind_ros": 0, "wind_rose_bremen": [1352, 1357], "wind_rot": [0, 1345], "windfarm": [3, 29, 164, 173, 382, 383, 384, 385, 386, 387, 388, 389, 390, 432, 433, 434, 435, 436, 437, 438, 439, 538, 544, 545, 1032, 1033, 1324, 1327, 1338, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "windio": [0, 535, 539, 543, 544, 545, 546, 547, 548, 1361], "windio_input": 1361, "window": [0, 1348], "windros": 0, "windroseax": 0, "windrosebinplot": [0, 1127, 1128, 1129, 1130, 1131, 1330], "windroseoutput": 0, "windroseplot": 0, "winds100": [0, 1343], "windspe": [1341, 1342], "wio_attr": [543, 1328], "wio_data": 548, "wio_dict": [539, 544, 546, 1328], "wio_farm": [547, 1328], "wise": [0, 646, 674, 675, 1353], "wish": [1358, 1361], "within": [0, 210, 405, 411, 416, 419, 426, 431, 437, 440, 441, 660, 1135, 1251, 1258, 1328, 1331, 1339, 1340, 1341, 1348, 1353], "without": [0, 28, 234, 562, 852, 860, 868, 876, 1060, 1321, 1329, 1337, 1339, 1342, 1348, 1350, 1353, 1354], "wmodel": [264, 265, 266, 267, 268, 270, 271, 288, 289, 290, 291, 294, 569, 571, 572, 574, 575, 576, 579, 580, 581, 583, 585, 588, 591, 593, 594, 597, 598], "wmodel_typ": [372, 376, 832, 835, 842, 845, 885, 892, 899, 905, 934, 939, 945], "work": [0, 112, 119, 160, 538, 1196, 1323, 1339, 1342, 1344, 1345, 1348, 1349, 1352, 1355, 1357, 1361], "work_dir": [0, 112, 119, 160, 538, 1323], "worker": [1342, 1348], "workflow": 0, "workstat": 1348, "would": [0, 1342, 1347, 1348, 1353], "wrapper": [0, 563, 1329], "wrf": [0, 1347], "wrg": [0, 1172, 1173, 1174], "write": [0, 534, 1032, 1037, 1038, 1039, 1040, 1041, 1061, 1068, 1073, 1074, 1077, 1079, 1080, 1081, 1086, 1087, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1116, 1119, 1121, 1122, 1124, 1127, 1131, 1133, 1165, 1171, 1255, 1264, 1330, 1331, 1340, 1361], "write_csv": [1032, 1037, 1077, 1079], "write_figur": [1081, 1086, 1122, 1127, 1131], "write_fil": [1165, 1171], "write_json": [1032, 1038], "write_nc": [1076, 1077, 1080, 1121, 1264], "write_par": [1076, 1102, 1103, 1104, 1105, 1106, 1107], "write_plot": [1032, 1039], "write_random_abl_st": 534, "write_var": 1076, "write_xyh": [1032, 1040], "written": [534, 600, 601, 1076, 1079, 1080, 1337, 1340], "wrong": [0, 1340], "wrt": [1034, 1041, 1050, 1051, 1052, 1053, 1054, 1199, 1204, 1206, 1208, 1214, 1216, 1221, 1223, 1228, 1230, 1236, 1238, 1244, 1337], "ws0": [1187, 1332, 1349], "ws_bin": [1081, 1083, 1085, 1122, 1127, 1129, 1130, 1361], "ws_cubic": 1346, "ws_cubic_amb": 1346, "ws_cubic_loc": 1346, "ws_cubic_loc_lim": 1346, "ws_exp_ct": 547, "ws_exp_p": 547, "ws_linear": [0, 860, 861, 868, 869, 876, 877, 878, 1340, 1346, 1348], "ws_linear_amb": 1346, "ws_linear_amb_lim": 1346, "ws_linear_lim": 1346, "ws_linear_loc": 1346, "ws_linear_loc_lim": 1346, "ws_max": [1126, 1346, 1352], "ws_max_amb": 1346, "ws_max_loc": 1346, "ws_max_loc_lim": 1346, "ws_min": [1126, 1352], "ws_product": 1346, "ws_product_lim": 1346, "ws_quadrat": 1346, "ws_quadratic_amb": 1346, "ws_quadratic_amb_lim": 1346, "ws_quadratic_lim": 1346, "ws_quadratic_loc": 1346, "ws_quadratic_loc_lim": 1346, "ws_quartic": 1346, "ws_quartic_amb": 1346, "ws_quartic_loc": 1346, "ws_quartic_loc_lim": 1346, "ws_ref": [1186, 1191, 1194, 1332], "ws_step": 1126, "ws_var": [1081, 1083, 1085, 1122, 1123, 1129, 1130, 1361], "wsct": [679, 699, 715, 725, 737, 745], "wsg84": 1252, "wsl": 1348, "wslinear": [0, 973, 974, 975, 976, 977, 978, 1329, 1346], "wslinearloc": [0, 979, 980, 981, 982, 983, 984, 1329, 1346], "wsmax": [985, 986, 987, 988, 989, 990, 1329, 1346], "wsmaxloc": [0, 991, 992, 993, 994, 995, 996, 1329, 1346], "wsp": [699, 715, 725, 737, 745], "wspow": [997, 998, 999, 1000, 1001, 1002, 1329, 1346], "wspowloc": [0, 1003, 1004, 1005, 1006, 1007, 1008, 1329, 1346], "wsproduct": [0, 1009, 1010, 1011, 1012, 1013, 1014, 1329, 1346], "wsquadrat": [1015, 1016, 1017, 1018, 1019, 1020, 1329, 1346], "wsquadraticloc": [0, 1021, 1022, 1023, 1024, 1025, 1026, 1329, 1346], "wsrho2pctfromtwo": [737, 738, 739, 740, 741, 742, 743, 744, 1329], "wsrho2pcttwofil": 0, "wsti2pctfromtwo": [0, 745, 746, 747, 748, 749, 750, 751, 752, 753, 1329], "www": [852, 860, 868, 876, 1198], "x": [0, 1, 2, 18, 28, 161, 312, 357, 359, 361, 432, 436, 437, 440, 441, 477, 478, 491, 576, 617, 622, 625, 632, 781, 787, 790, 794, 797, 799, 803, 807, 811, 812, 814, 819, 824, 828, 832, 833, 834, 835, 837, 842, 843, 844, 845, 847, 848, 849, 885, 888, 889, 892, 895, 896, 899, 902, 905, 908, 911, 927, 930, 934, 937, 938, 939, 942, 945, 948, 1034, 1035, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1102, 1103, 1104, 1105, 1106, 1107, 1112, 1115, 1118, 1126, 1132, 1172, 1176, 1179, 1196, 1199, 1200, 1202, 1203, 1206, 1208, 1210, 1212, 1213, 1216, 1218, 1219, 1220, 1223, 1225, 1226, 1227, 1230, 1232, 1234, 1235, 1238, 1240, 1242, 1243, 1257, 1262, 1263, 1303, 1308, 1329, 1331, 1333, 1334, 1337, 1338, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1351, 1353, 1354, 1355, 1356, 1357, 1358], "x0": [911, 925, 1172, 1179, 1257, 1331], "x27": [1342, 1347, 1348], "x_coord": [440, 441, 1345], "x_direct": [0, 1061, 1063, 1064, 1066, 1067, 1103, 1104, 1106, 1107, 1347], "x_label": 1126, "x_list": [1108, 1112, 1115], "x_max": 387, "x_mima": 387, "x_min": 387, "x_po": [1102, 1103, 1104, 1105, 1106, 1107, 1132], "x_y": 1132, "xarrai": [0, 1, 4, 5, 18, 20, 21, 28, 32, 33, 35, 36, 37, 38, 40, 43, 47, 50, 54, 60, 64, 68, 75, 80, 84, 88, 93, 101, 102, 163, 167, 168, 178, 184, 195, 196, 198, 203, 210, 213, 220, 221, 222, 233, 234, 248, 254, 255, 263, 295, 300, 301, 309, 319, 329, 343, 346, 400, 405, 408, 411, 416, 419, 426, 429, 431, 440, 441, 451, 452, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 526, 530, 537, 540, 542, 562, 563, 600, 605, 608, 612, 616, 622, 629, 636, 641, 642, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 1032, 1033, 1041, 1042, 1074, 1075, 1076, 1078, 1082, 1083, 1085, 1094, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1127, 1128, 1129, 1198, 1254, 1264, 1324, 1326, 1328, 1342, 1347, 1348, 1353, 1354], "xarrayengin": [0, 429, 430, 431, 1326, 1348], "xlabel": [1061, 1062, 1063, 1065, 1066, 1132], "xlist": 1342, "xmax": [1102, 1103, 1105, 1106, 1342, 1344, 1345, 1347, 1353, 1355, 1358], "xmax_ini": [1251, 1331], "xmin": [1102, 1103, 1105, 1106, 1342, 1345, 1347, 1353, 1358], "xr": [441, 1198], "xr_interp_arg": 642, "xr_read_par": [451, 452], "xspace": [1102, 1103, 1105, 1106, 1342], "xy": [0, 336, 337, 1061, 1062, 1065, 1100, 1102, 1105, 1108, 1110, 1113, 1251, 1331, 1342, 1345, 1349, 1350, 1352, 1353, 1358], "xy_arrai": [382, 390], "xy_bas": [436, 438, 439, 1328, 1341, 1342, 1344, 1345, 1347, 1350, 1352, 1353, 1354, 1355, 1357], "xy_step": [439, 1328, 1341, 1347, 1350, 1352, 1354], "xya": 390, "xyh": [161, 1032, 1038, 1040, 1333], "xz": [0, 1061, 1063, 1066, 1090, 1091, 1100, 1103, 1106, 1108, 1111, 1114], "y": [0, 1, 2, 18, 28, 161, 312, 432, 436, 437, 440, 441, 477, 478, 491, 617, 625, 632, 812, 1034, 1035, 1061, 1062, 1064, 1065, 1067, 1102, 1103, 1104, 1105, 1106, 1107, 1111, 1114, 1126, 1132, 1172, 1177, 1180, 1199, 1200, 1202, 1203, 1206, 1208, 1210, 1212, 1213, 1216, 1218, 1219, 1220, 1223, 1225, 1226, 1227, 1230, 1232, 1234, 1235, 1238, 1240, 1242, 1243, 1262, 1263, 1303, 1309, 1333, 1338, 1340, 1341, 1342, 1343, 1345, 1348, 1349, 1355, 1356], "y0": [1172, 1180], "y_coord": [440, 441, 1345], "y_label": 1126, "y_list": [1108, 1111, 1114], "y_max": 387, "y_mima": 387, "y_min": 387, "y_po": [1102, 1103, 1104, 1105, 1106, 1107, 1132], "yaml": [0, 112, 195, 231, 272, 327, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 1143, 1146, 1149, 1337, 1361], "yaml_input": 0, "yaw": [0, 1, 2, 18, 28, 684, 687, 700, 716, 726, 738, 746, 824, 905, 911, 1165, 1167, 1276, 1277, 1310, 1311, 1314, 1316, 1329, 1333, 1336, 1337, 1340, 1342, 1346, 1348, 1353, 1354], "yaw2yawm": [0, 684, 685, 686, 1329, 1340, 1346, 1358], "yawed_": 1340, "yawed_ambka": 1346, "yawed_ambka0": 1346, "yawed_k": 1346, "yawed_k0": 1346, "yawed_ka": 1346, "yawed_ka0": 1346, "yawed_wak": 0, "yawedwak": [0, 824, 825, 826, 827, 828, 829, 830, 831, 1329, 1340, 1346], "yawm": [684, 687, 824, 905, 927, 1311, 1314, 1316, 1329, 1333, 1340, 1358], "yawm2yaw": [0, 687, 688, 689, 1329, 1340, 1346, 1358], "ydata": 1349, "year": 1335, "yet": [0, 391], "yield": [0, 1027, 1029, 1031, 1041, 1048, 1055, 1278, 1312, 1330, 1333, 1335, 1337, 1340, 1347, 1351, 1356, 1357], "ylabel": [1061, 1062, 1064, 1065, 1067, 1132], "yld": [1165, 1167, 1282, 1312, 1314, 1316, 1333, 1356], "ylgn": 1350, "ylorrd": 1350, "ymax": [1102, 1104, 1105, 1107, 1342, 1344, 1345, 1353, 1355, 1358], "ymin": [1102, 1104, 1105, 1107, 1342, 1345, 1353, 1358], "yml_file": [112, 195, 231, 272, 327, 1143, 1146, 1149], "you": [0, 1196, 1339, 1340, 1346, 1348, 1351, 1354, 1358, 1360, 1361], "your": [0, 1337, 1339, 1348, 1354, 1359], "yourself": [1196, 1343], "yspace": [1102, 1104, 1105, 1107, 1342], "yx": [1090, 1091], "yz": [0, 832, 834, 835, 837, 842, 845, 885, 892, 899, 905, 908, 934, 939, 945, 1061, 1064, 1067, 1090, 1091, 1100, 1104, 1107, 1108, 1112, 1115, 1334], "z": [312, 477, 478, 491, 617, 625, 632, 770, 771, 812, 1063, 1064, 1066, 1067, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1113, 1338, 1340, 1342, 1347, 1355], "z0": [1184, 1185, 1186, 1188, 1189, 1191, 1192, 1194, 1313, 1332, 1333, 1340, 1342, 1343], "z_list": [1108, 1110, 1113], "z_po": [1102, 1103, 1104, 1105, 1106, 1107], "zahl": 559, "zenodo": 1335, "zero": [0, 264, 270, 271, 288, 294, 377, 569, 571, 572, 576, 581, 583, 585, 591, 597, 691, 833, 834, 837, 843, 844, 847, 849, 858, 866, 874, 888, 890, 895, 897, 902, 908, 937, 942, 948, 951, 1198, 1257, 1286, 1331, 1333, 1340, 1341, 1342, 1351, 1354], "zerodivisionerror": 1198, "zip": [1165, 1166, 1168, 1169, 1198], "zlabel": [1063, 1064, 1066, 1067], "zmax": [1103, 1104, 1106, 1107, 1342, 1347, 1358], "zmin": [1103, 1104, 1106, 1107, 1342, 1347, 1358], "zone": [868, 876, 1253, 1256, 1342], "zope": 1198, "zspace": [1103, 1104, 1106, 1107]}, "titles": ["Changelog", "foxes.algorithms.Downwind", "foxes.algorithms.Downwind.DEFAULT_FARM_OUTPUTS", "foxes.algorithms.Downwind.__init__", "foxes.algorithms.Downwind.calc_farm", "foxes.algorithms.Downwind.calc_points", "foxes.algorithms.Downwind.farm_controller", "foxes.algorithms.Downwind.get_model", "foxes.algorithms.Downwind.ground_models", "foxes.algorithms.Downwind.init_states", "foxes.algorithms.Downwind.initialize", "foxes.algorithms.Downwind.partial_wakes", "foxes.algorithms.Downwind.print_deco", "foxes.algorithms.Downwind.rotor_model", "foxes.algorithms.Downwind.states", "foxes.algorithms.Downwind.sub_models", "foxes.algorithms.Downwind.wake_frame", "foxes.algorithms.Downwind.wake_models", "foxes.algorithms.Iterative", "foxes.algorithms.Iterative.__init__", "foxes.algorithms.Iterative.calc_farm", "foxes.algorithms.Iterative.farm_results_downwind", "foxes.algorithms.Iterative.final_iteration", "foxes.algorithms.Iterative.get_model", "foxes.algorithms.Iterative.initialize", "foxes.algorithms.Iterative.iterations", "foxes.algorithms.Iterative.set_urelax", "foxes.algorithms.Iterative.urelax", "foxes.algorithms.Sequential", "foxes.algorithms.Sequential.__init__", "foxes.algorithms.Sequential.__iter__", "foxes.algorithms.Sequential.__next__", "foxes.algorithms.Sequential.calc_farm", "foxes.algorithms.Sequential.calc_points", "foxes.algorithms.Sequential.counter", "foxes.algorithms.Sequential.cur_farm_results", "foxes.algorithms.Sequential.cur_point_results", "foxes.algorithms.Sequential.farm_results", "foxes.algorithms.Sequential.farm_results_downwind", "foxes.algorithms.Sequential.get_model", "foxes.algorithms.Sequential.get_models_data", "foxes.algorithms.Sequential.index", "foxes.algorithms.Sequential.iterating", "foxes.algorithms.Sequential.point_results", "foxes.algorithms.Sequential.size", "foxes.algorithms.Sequential.states_i0", "foxes.algorithms.Sequential.weight", "foxes.algorithms.downwind.models.FarmWakesCalculation", "foxes.algorithms.downwind.models.FarmWakesCalculation.calculate", "foxes.algorithms.downwind.models.FarmWakesCalculation.output_farm_vars", "foxes.algorithms.downwind.models.InitFarmData", "foxes.algorithms.downwind.models.InitFarmData.__init__", "foxes.algorithms.downwind.models.InitFarmData.calculate", "foxes.algorithms.downwind.models.InitFarmData.output_farm_vars", "foxes.algorithms.downwind.models.PointWakesCalculation", "foxes.algorithms.downwind.models.PointWakesCalculation.__init__", "foxes.algorithms.downwind.models.PointWakesCalculation.calculate", "foxes.algorithms.downwind.models.PointWakesCalculation.initialize", "foxes.algorithms.downwind.models.PointWakesCalculation.output_point_vars", "foxes.algorithms.downwind.models.PointWakesCalculation.sub_models", "foxes.algorithms.downwind.models.ReorderFarmOutput", "foxes.algorithms.downwind.models.ReorderFarmOutput.__init__", "foxes.algorithms.downwind.models.ReorderFarmOutput.calculate", "foxes.algorithms.downwind.models.ReorderFarmOutput.output_farm_vars", "foxes.algorithms.downwind.models.SetAmbFarmResults", "foxes.algorithms.downwind.models.SetAmbFarmResults.__init__", "foxes.algorithms.downwind.models.SetAmbFarmResults.calculate", "foxes.algorithms.downwind.models.SetAmbFarmResults.output_farm_vars", "foxes.algorithms.downwind.models.SetAmbPointResults", "foxes.algorithms.downwind.models.SetAmbPointResults.__init__", "foxes.algorithms.downwind.models.SetAmbPointResults.calculate", "foxes.algorithms.downwind.models.SetAmbPointResults.initialize", "foxes.algorithms.downwind.models.SetAmbPointResults.output_point_vars", "foxes.algorithms.iterative.ConvCrit", "foxes.algorithms.iterative.ConvCrit.__init__", "foxes.algorithms.iterative.ConvCrit.check_converged", "foxes.algorithms.iterative.ConvCrit.get_deltas", "foxes.algorithms.iterative.ConvCritList", "foxes.algorithms.iterative.ConvCritList.__init__", "foxes.algorithms.iterative.ConvCritList.add_crit", "foxes.algorithms.iterative.ConvCritList.check_converged", "foxes.algorithms.iterative.ConvCritList.get_deltas", "foxes.algorithms.iterative.ConvVarDelta", "foxes.algorithms.iterative.ConvVarDelta.__init__", "foxes.algorithms.iterative.ConvVarDelta.check_converged", "foxes.algorithms.iterative.ConvVarDelta.get_deltas", "foxes.algorithms.iterative.DefaultConv", "foxes.algorithms.iterative.DefaultConv.__init__", "foxes.algorithms.iterative.models.FarmWakesCalculation", "foxes.algorithms.iterative.models.FarmWakesCalculation.__init__", "foxes.algorithms.iterative.models.FarmWakesCalculation.calculate", "foxes.algorithms.iterative.models.FarmWakesCalculation.output_farm_vars", "foxes.algorithms.iterative.models.FarmWakesCalculation.sub_models", "foxes.algorithms.iterative.models.URelax", "foxes.algorithms.iterative.models.URelax.__init__", "foxes.algorithms.iterative.models.URelax.calculate", "foxes.algorithms.iterative.models.URelax.output_farm_vars", "foxes.algorithms.sequential.SequentialPlugin", "foxes.algorithms.sequential.SequentialPlugin.__init__", "foxes.algorithms.sequential.SequentialPlugin.finalize", "foxes.algorithms.sequential.SequentialPlugin.initialize", "foxes.algorithms.sequential.SequentialPlugin.update", "foxes.algorithms.sequential.models.SeqState", "foxes.algorithms.sequential.models.SeqState.__init__", "foxes.algorithms.sequential.models.SeqState.calculate", "foxes.algorithms.sequential.models.SeqState.counter", "foxes.algorithms.sequential.models.SeqState.index", "foxes.algorithms.sequential.models.SeqState.initialize", "foxes.algorithms.sequential.models.SeqState.output_point_vars", "foxes.algorithms.sequential.models.SeqState.size", "foxes.algorithms.sequential.models.SeqState.sub_models", "foxes.algorithms.sequential.models.SeqState.weights", "foxes.config.Config", "foxes.config.Config.__init__", "foxes.config.Config.dtype_double", "foxes.config.Config.dtype_int", "foxes.config.Config.input_dir", "foxes.config.Config.nc_engine", "foxes.config.Config.output_dir", "foxes.config.Config.work_dir", "foxes.config.get_input_path", "foxes.config.get_output_path", "foxes.config.get_path", "foxes.constants.AMB_ROTOR_RES", "foxes.constants.BLOCK_CONVERGENCE", "foxes.constants.DTYPE", "foxes.constants.FARM", "foxes.constants.GW", "foxes.constants.INPUT_DIR", "foxes.constants.ITYPE", "foxes.constants.KAPPA", "foxes.constants.MW", "foxes.constants.NC_ENGINE", "foxes.constants.OUTPUT_DIR", "foxes.constants.POINT", "foxes.constants.POINTS", "foxes.constants.POP", "foxes.constants.P_UNITS", "foxes.constants.ROTOR_POINTS", "foxes.constants.ROTOR_WEIGHTS", "foxes.constants.STATE", "foxes.constants.STATES_SEL", "foxes.constants.STATE_SOURCE_ORDERI", "foxes.constants.STATE_TARGET", "foxes.constants.STATE_TARGET_TPOINT", "foxes.constants.STATE_TURBINE", "foxes.constants.TARGET", "foxes.constants.TARGETS", "foxes.constants.TIME", "foxes.constants.TMODELS", "foxes.constants.TMODEL_SELS", "foxes.constants.TNAME", "foxes.constants.TPOINT", "foxes.constants.TPOINTS", "foxes.constants.TURBINE", "foxes.constants.TW", "foxes.constants.TWEIGHTS", "foxes.constants.VALID", "foxes.constants.VARS", "foxes.constants.W", "foxes.constants.WORK_DIR", "foxes.constants.XYH", "foxes.constants.kW", "foxes.core.Algorithm", "foxes.core.Algorithm.__init__", "foxes.core.Algorithm.add_to_chunk_store", "foxes.core.Algorithm.block_convergence", "foxes.core.Algorithm.calc_farm", "foxes.core.Algorithm.calc_points", "foxes.core.Algorithm.chunk_store", "foxes.core.Algorithm.dbook", "foxes.core.Algorithm.del_model_data", "foxes.core.Algorithm.eval_conv_block", "foxes.core.Algorithm.farm", "foxes.core.Algorithm.finalize", "foxes.core.Algorithm.find_chunk_in_store", "foxes.core.Algorithm.get_from_chunk_store", "foxes.core.Algorithm.get_model_data", "foxes.core.Algorithm.get_models_data", "foxes.core.Algorithm.get_models_idata", "foxes.core.Algorithm.idata_mem", "foxes.core.Algorithm.initialize", "foxes.core.Algorithm.mbook", "foxes.core.Algorithm.new", "foxes.core.Algorithm.new_point_data", "foxes.core.Algorithm.print", "foxes.core.Algorithm.print_deco", "foxes.core.Algorithm.reset_chunk_store", "foxes.core.Algorithm.set_running", "foxes.core.Algorithm.store_model_data", "foxes.core.Algorithm.unset_running", "foxes.core.Algorithm.update_n_turbines", "foxes.core.AxialInductionModel", "foxes.core.AxialInductionModel.ct2a", "foxes.core.AxialInductionModel.new", "foxes.core.Data", "foxes.core.Data.__init__", "foxes.core.Data.add", "foxes.core.Data.from_dataset", "foxes.core.Data.get_slice", "foxes.core.Data.n_states", "foxes.core.Data.n_turbines", "foxes.core.Data.states_i0", "foxes.core.DataCalcModel", "foxes.core.DataCalcModel.calculate", "foxes.core.DataCalcModel.output_coords", "foxes.core.Engine", "foxes.core.Engine.__init__", "foxes.core.Engine.__repr__", "foxes.core.Engine.calc_chunk_sizes", "foxes.core.Engine.combine_results", "foxes.core.Engine.entered", "foxes.core.Engine.finalize", "foxes.core.Engine.get_chunk_input_data", "foxes.core.Engine.initialize", "foxes.core.Engine.initialized", "foxes.core.Engine.loop_dims", "foxes.core.Engine.map", "foxes.core.Engine.new", "foxes.core.Engine.print", "foxes.core.Engine.run_calculation", "foxes.core.Engine.select_subsets", "foxes.core.ExtendedStates", "foxes.core.ExtendedStates.__init__", "foxes.core.ExtendedStates.append", "foxes.core.ExtendedStates.calculate", "foxes.core.ExtendedStates.index", "foxes.core.ExtendedStates.output_point_vars", "foxes.core.ExtendedStates.size", "foxes.core.ExtendedStates.sub_models", "foxes.core.ExtendedStates.weights", "foxes.core.FData", "foxes.core.FData.__init__", "foxes.core.FData.from_dataset", "foxes.core.FarmController", "foxes.core.FarmController.__init__", "foxes.core.FarmController.calculate", "foxes.core.FarmController.collect_models", "foxes.core.FarmController.finalize", "foxes.core.FarmController.find_turbine_types", "foxes.core.FarmController.initialize", "foxes.core.FarmController.load_data", "foxes.core.FarmController.needs_rews2", "foxes.core.FarmController.needs_rews3", "foxes.core.FarmController.new", "foxes.core.FarmController.output_farm_vars", "foxes.core.FarmController.set_pars", "foxes.core.FarmController.sub_models", "foxes.core.FarmDataModel", "foxes.core.FarmDataModel.__init__", "foxes.core.FarmDataModel.calculate", "foxes.core.FarmDataModel.ensure_variables", "foxes.core.FarmDataModel.output_coords", "foxes.core.FarmDataModel.output_farm_vars", "foxes.core.FarmDataModel.run_calculation", "foxes.core.FarmDataModelList", "foxes.core.FarmDataModelList.__init__", "foxes.core.FarmDataModelList.__repr__", "foxes.core.FarmDataModelList.append", "foxes.core.FarmDataModelList.calculate", "foxes.core.FarmDataModelList.insert", "foxes.core.FarmDataModelList.output_farm_vars", "foxes.core.FarmDataModelList.sub_models", "foxes.core.FarmModel", "foxes.core.GroundModel", "foxes.core.GroundModel.contribute_to_farm_wakes", "foxes.core.GroundModel.contribute_to_point_wakes", "foxes.core.GroundModel.finalize_farm_wakes", "foxes.core.GroundModel.finalize_point_wakes", "foxes.core.GroundModel.new", "foxes.core.GroundModel.new_farm_wake_deltas", "foxes.core.GroundModel.new_point_wake_deltas", "foxes.core.MData", "foxes.core.MData.__init__", "foxes.core.Model", "foxes.core.Model.__init__", "foxes.core.Model.__repr__", "foxes.core.Model.finalize", "foxes.core.Model.get_data", "foxes.core.Model.initialize", "foxes.core.Model.initialized", "foxes.core.Model.load_data", "foxes.core.Model.model_id", "foxes.core.Model.running", "foxes.core.Model.set_running", "foxes.core.Model.sub_models", "foxes.core.Model.unset_running", "foxes.core.Model.var", "foxes.core.PartialWakesModel", "foxes.core.PartialWakesModel.check_wmodel", "foxes.core.PartialWakesModel.contribute", "foxes.core.PartialWakesModel.finalize_wakes", "foxes.core.PartialWakesModel.get_wake_points", "foxes.core.PartialWakesModel.new", "foxes.core.PartialWakesModel.new_wake_deltas", "foxes.core.PointDataModel", "foxes.core.PointDataModel.calculate", "foxes.core.PointDataModel.ensure_variables", "foxes.core.PointDataModel.output_coords", "foxes.core.PointDataModel.output_point_vars", "foxes.core.PointDataModel.run_calculation", "foxes.core.PointDataModelList", "foxes.core.PointDataModelList.__init__", "foxes.core.PointDataModelList.__repr__", "foxes.core.PointDataModelList.append", "foxes.core.PointDataModelList.calculate", "foxes.core.PointDataModelList.new", "foxes.core.PointDataModelList.output_point_vars", "foxes.core.PointDataModelList.sub_models", "foxes.core.RotorModel", "foxes.core.RotorModel.__init__", "foxes.core.RotorModel.calculate", "foxes.core.RotorModel.design_points", "foxes.core.RotorModel.eval_rpoint_results", "foxes.core.RotorModel.get_rotor_points", "foxes.core.RotorModel.n_rotor_points", "foxes.core.RotorModel.new", "foxes.core.RotorModel.output_farm_vars", "foxes.core.RotorModel.rotor_point_weights", "foxes.core.States", "foxes.core.States.index", "foxes.core.States.load_data", "foxes.core.States.new", "foxes.core.States.output_point_vars", "foxes.core.States.reset", "foxes.core.States.size", "foxes.core.States.weights", "foxes.core.TData", "foxes.core.TData.__init__", "foxes.core.TData.from_dataset", "foxes.core.TData.from_points", "foxes.core.TData.from_tpoints", "foxes.core.TData.n_targets", "foxes.core.TData.n_tpoints", "foxes.core.TData.targets_i0", "foxes.core.TData.tpoint_mean", "foxes.core.Turbine", "foxes.core.Turbine.__init__", "foxes.core.Turbine.add_model", "foxes.core.Turbine.insert_model", "foxes.core.TurbineInductionModel", "foxes.core.TurbineInductionModel.affects_downwind", "foxes.core.TurbineInductionModel.new", "foxes.core.TurbineModel", "foxes.core.TurbineModel.calculate", "foxes.core.TurbineModel.new", "foxes.core.TurbineType", "foxes.core.TurbineType.__init__", "foxes.core.TurbineType.__repr__", "foxes.core.TurbineType.modify_cutin", "foxes.core.TurbineType.needs_rews2", "foxes.core.TurbineType.needs_rews3", "foxes.core.TurbineType.new", "foxes.core.VerticalProfile", "foxes.core.VerticalProfile.calculate", "foxes.core.VerticalProfile.input_vars", "foxes.core.VerticalProfile.new", "foxes.core.WakeFrame", "foxes.core.WakeFrame.__init__", "foxes.core.WakeFrame.calc_centreline_integral", "foxes.core.WakeFrame.calc_order", "foxes.core.WakeFrame.get_centreline_points", "foxes.core.WakeFrame.get_wake_coos", "foxes.core.WakeFrame.get_wake_modelling_data", "foxes.core.WakeFrame.new", "foxes.core.WakeK", "foxes.core.WakeK.__call__", "foxes.core.WakeK.__init__", "foxes.core.WakeK.all_none", "foxes.core.WakeK.is_kTI", "foxes.core.WakeK.repr", "foxes.core.WakeK.use_amb_ti", "foxes.core.WakeModel", "foxes.core.WakeModel.affects_downwind", "foxes.core.WakeModel.contribute", "foxes.core.WakeModel.finalize_wake_deltas", "foxes.core.WakeModel.new", "foxes.core.WakeModel.new_wake_deltas", "foxes.core.WakeSuperposition", "foxes.core.WakeSuperposition.add_wake", "foxes.core.WakeSuperposition.calc_final_wake_delta", "foxes.core.WakeSuperposition.new", "foxes.core.WindFarm", "foxes.core.WindFarm.__init__", "foxes.core.WindFarm.add_turbine", "foxes.core.WindFarm.get_hub_heights", "foxes.core.WindFarm.get_rotor_diameters", "foxes.core.WindFarm.get_xy_bounds", "foxes.core.WindFarm.n_turbines", "foxes.core.WindFarm.turbine_names", "foxes.core.WindFarm.xy_array", "foxes.core.get_engine", "foxes.core.has_engine", "foxes.core.reset_engine", "foxes.data.StaticData", "foxes.data.StaticData.__init__", "foxes.data.parse_Pct_file_name", "foxes.data.parse_Pct_two_files", "foxes.engines.DaskBaseEngine", "foxes.engines.DaskBaseEngine.__init__", "foxes.engines.DaskBaseEngine.chunk_data", "foxes.engines.DaskBaseEngine.finalize", "foxes.engines.DaskBaseEngine.initialize", "foxes.engines.DaskBaseEngine.map", "foxes.engines.DaskEngine", "foxes.engines.DaskEngine.run_calculation", "foxes.engines.DefaultEngine", "foxes.engines.DefaultEngine.map", "foxes.engines.DefaultEngine.run_calculation", "foxes.engines.LocalClusterEngine", "foxes.engines.LocalClusterEngine.__init__", "foxes.engines.LocalClusterEngine.run_calculation", "foxes.engines.MPIEngine", "foxes.engines.MultiprocessEngine", "foxes.engines.NumpyEngine", "foxes.engines.NumpyEngine.map", "foxes.engines.NumpyEngine.run_calculation", "foxes.engines.PoolEngine", "foxes.engines.PoolEngine.map", "foxes.engines.PoolEngine.run_calculation", "foxes.engines.ProcessEngine", "foxes.engines.RayEngine", "foxes.engines.SingleChunkEngine", "foxes.engines.SingleChunkEngine.__init__", "foxes.engines.SingleChunkEngine.__repr__", "foxes.engines.SingleChunkEngine.map", "foxes.engines.SingleChunkEngine.run_calculation", "foxes.engines.SlurmClusterEngine", "foxes.engines.ThreadsEngine", "foxes.engines.XArrayEngine", "foxes.engines.XArrayEngine.map", "foxes.engines.XArrayEngine.run_calculation", "foxes.input.farm_layout.add_from_csv", "foxes.input.farm_layout.add_from_df", "foxes.input.farm_layout.add_from_file", "foxes.input.farm_layout.add_from_json", "foxes.input.farm_layout.add_grid", "foxes.input.farm_layout.add_random", "foxes.input.farm_layout.add_ring", "foxes.input.farm_layout.add_row", "foxes.input.states.FieldDataNC", "foxes.input.states.FieldDataNC.__init__", "foxes.input.states.FieldDataNC.calculate", "foxes.input.states.FieldDataNC.data_source", "foxes.input.states.FieldDataNC.index", "foxes.input.states.FieldDataNC.load_data", "foxes.input.states.FieldDataNC.output_point_vars", "foxes.input.states.FieldDataNC.set_running", "foxes.input.states.FieldDataNC.size", "foxes.input.states.FieldDataNC.unset_running", "foxes.input.states.FieldDataNC.weights", "foxes.input.states.MultiHeightNCStates", "foxes.input.states.MultiHeightNCStates.__init__", "foxes.input.states.MultiHeightNCStates.load_data", "foxes.input.states.MultiHeightNCTimeseries", "foxes.input.states.MultiHeightNCTimeseries.__init__", "foxes.input.states.MultiHeightStates", "foxes.input.states.MultiHeightStates.RDICT", "foxes.input.states.MultiHeightStates.__init__", "foxes.input.states.MultiHeightStates.__repr__", "foxes.input.states.MultiHeightStates.calculate", "foxes.input.states.MultiHeightStates.data_source", "foxes.input.states.MultiHeightStates.finalize", "foxes.input.states.MultiHeightStates.index", "foxes.input.states.MultiHeightStates.load_data", "foxes.input.states.MultiHeightStates.output_point_vars", "foxes.input.states.MultiHeightStates.reset", "foxes.input.states.MultiHeightStates.set_running", "foxes.input.states.MultiHeightStates.size", "foxes.input.states.MultiHeightStates.unset_running", "foxes.input.states.MultiHeightStates.weights", "foxes.input.states.MultiHeightTimeseries", "foxes.input.states.MultiHeightTimeseries.RDICT", "foxes.input.states.OnePointFlowMultiHeightNCTimeseries", "foxes.input.states.OnePointFlowMultiHeightNCTimeseries.__init__", "foxes.input.states.OnePointFlowMultiHeightTimeseries", "foxes.input.states.OnePointFlowMultiHeightTimeseries.__init__", "foxes.input.states.OnePointFlowStates", "foxes.input.states.OnePointFlowStates.__init__", "foxes.input.states.OnePointFlowStates.__repr__", "foxes.input.states.OnePointFlowStates.calc_states_indices", "foxes.input.states.OnePointFlowStates.calculate", "foxes.input.states.OnePointFlowStates.index", "foxes.input.states.OnePointFlowStates.initialize", "foxes.input.states.OnePointFlowStates.output_point_vars", "foxes.input.states.OnePointFlowStates.set_running", "foxes.input.states.OnePointFlowStates.size", "foxes.input.states.OnePointFlowStates.sub_models", "foxes.input.states.OnePointFlowStates.unset_running", "foxes.input.states.OnePointFlowStates.weights", "foxes.input.states.OnePointFlowTimeseries", "foxes.input.states.OnePointFlowTimeseries.__init__", "foxes.input.states.ScanStates", "foxes.input.states.ScanStates.__init__", "foxes.input.states.ScanStates.calculate", "foxes.input.states.ScanStates.load_data", "foxes.input.states.ScanStates.output_point_vars", "foxes.input.states.ScanStates.set_running", "foxes.input.states.ScanStates.size", "foxes.input.states.ScanStates.unset_running", "foxes.input.states.ScanStates.weights", "foxes.input.states.SingleStateStates", "foxes.input.states.SingleStateStates.__init__", "foxes.input.states.SingleStateStates.calculate", "foxes.input.states.SingleStateStates.initialize", "foxes.input.states.SingleStateStates.output_point_vars", "foxes.input.states.SingleStateStates.size", "foxes.input.states.SingleStateStates.sub_models", "foxes.input.states.SingleStateStates.weights", "foxes.input.states.StatesTable", "foxes.input.states.StatesTable.RDICT", "foxes.input.states.StatesTable.__init__", "foxes.input.states.StatesTable.calculate", "foxes.input.states.StatesTable.data_source", "foxes.input.states.StatesTable.finalize", "foxes.input.states.StatesTable.index", "foxes.input.states.StatesTable.initialize", "foxes.input.states.StatesTable.load_data", "foxes.input.states.StatesTable.output_point_vars", "foxes.input.states.StatesTable.reset", "foxes.input.states.StatesTable.set_running", "foxes.input.states.StatesTable.size", "foxes.input.states.StatesTable.sub_models", "foxes.input.states.StatesTable.unset_running", "foxes.input.states.StatesTable.weights", "foxes.input.states.TabStates", "foxes.input.states.TabStates.__init__", "foxes.input.states.TabStates.load_data", "foxes.input.states.TabStates.set_running", "foxes.input.states.TabStates.unset_running", "foxes.input.states.Timeseries", "foxes.input.states.Timeseries.RDICT", "foxes.input.states.create.create_random_abl_states", "foxes.input.states.create.random_timseries_data", "foxes.input.states.create.write_random_abl_states", "foxes.input.yaml.foxes_windio", "foxes.input.yaml.foxes_yaml", "foxes.input.yaml.get_output_obj", "foxes.input.yaml.read_dict", "foxes.input.yaml.read_windio", "foxes.input.yaml.run_dict", "foxes.input.yaml.run_obj_function", "foxes.input.yaml.run_outputs", "foxes.input.yaml.windio.read_attributes", "foxes.input.yaml.windio.read_farm", "foxes.input.yaml.windio.read_layout", "foxes.input.yaml.windio.read_site", "foxes.input.yaml.windio.read_turbine_types", "foxes.input.yaml.windio.read_wind_resource_field", "foxes.models.ModelBook", "foxes.models.ModelBook.__getitem__", "foxes.models.ModelBook.__init__", "foxes.models.ModelBook.default_partial_wakes", "foxes.models.ModelBook.finalize", "foxes.models.ModelBook.get", "foxes.models.ModelBook.print_toc", "foxes.models.axial_induction.BetzAxialInduction", "foxes.models.axial_induction.BetzAxialInduction.__init__", "foxes.models.axial_induction.BetzAxialInduction.ct2a", "foxes.models.axial_induction.MadsenAxialInduction", "foxes.models.axial_induction.MadsenAxialInduction.__init__", "foxes.models.axial_induction.MadsenAxialInduction.ct2a", "foxes.models.farm_controllers.BasicFarmController", "foxes.models.farm_models.Turbine2FarmModel", "foxes.models.farm_models.Turbine2FarmModel.__init__", "foxes.models.farm_models.Turbine2FarmModel.__repr__", "foxes.models.farm_models.Turbine2FarmModel.calculate", "foxes.models.farm_models.Turbine2FarmModel.output_farm_vars", "foxes.models.farm_models.Turbine2FarmModel.sub_models", "foxes.models.ground_models.GroundMirror", "foxes.models.ground_models.GroundMirror.__init__", "foxes.models.ground_models.NoGround", "foxes.models.ground_models.WakeMirror", "foxes.models.ground_models.WakeMirror.__init__", "foxes.models.ground_models.WakeMirror.contribute_to_farm_wakes", "foxes.models.ground_models.WakeMirror.contribute_to_point_wakes", "foxes.models.partial_wakes.PartialAxiwake", "foxes.models.partial_wakes.PartialAxiwake.__init__", "foxes.models.partial_wakes.PartialAxiwake.__repr__", "foxes.models.partial_wakes.PartialAxiwake.check_wmodel", "foxes.models.partial_wakes.PartialAxiwake.contribute", "foxes.models.partial_wakes.PartialCentre", "foxes.models.partial_wakes.PartialCentre.get_wake_points", "foxes.models.partial_wakes.PartialGrid", "foxes.models.partial_wakes.PartialGrid.__init__", "foxes.models.partial_wakes.PartialSegregated", "foxes.models.partial_wakes.PartialSegregated.__init__", "foxes.models.partial_wakes.PartialSegregated.__repr__", "foxes.models.partial_wakes.PartialSegregated.finalize_wakes", "foxes.models.partial_wakes.PartialSegregated.get_wake_points", "foxes.models.partial_wakes.PartialSegregated.sub_models", "foxes.models.partial_wakes.PartialTopHat", "foxes.models.partial_wakes.PartialTopHat.__init__", "foxes.models.partial_wakes.PartialTopHat.check_wmodel", "foxes.models.partial_wakes.PartialTopHat.contribute", "foxes.models.partial_wakes.PartialTopHat.initialize", "foxes.models.partial_wakes.PartialTopHat.sub_models", "foxes.models.partial_wakes.RotorPoints", "foxes.models.partial_wakes.RotorPoints.finalize_wakes", "foxes.models.partial_wakes.RotorPoints.get_wake_points", "foxes.models.point_models.SetUniformData", "foxes.models.point_models.SetUniformData.__init__", "foxes.models.point_models.SetUniformData.calculate", "foxes.models.point_models.SetUniformData.load_data", "foxes.models.point_models.SetUniformData.output_point_vars", "foxes.models.point_models.TKE2TI", "foxes.models.point_models.TKE2TI.calculate", "foxes.models.point_models.TKE2TI.output_point_vars", "foxes.models.point_models.Ustar2TI", "foxes.models.point_models.Ustar2TI.__init__", "foxes.models.point_models.Ustar2TI.calculate", "foxes.models.point_models.Ustar2TI.output_point_vars", "foxes.models.point_models.WakeDeltas", "foxes.models.point_models.WakeDeltas.__init__", "foxes.models.point_models.WakeDeltas.calculate", "foxes.models.point_models.WakeDeltas.output_point_vars", "foxes.models.rotor_models.CentreRotor", "foxes.models.rotor_models.CentreRotor.design_points", "foxes.models.rotor_models.CentreRotor.eval_rpoint_results", "foxes.models.rotor_models.CentreRotor.get_rotor_points", "foxes.models.rotor_models.CentreRotor.n_rotor_points", "foxes.models.rotor_models.CentreRotor.rotor_point_weights", "foxes.models.rotor_models.GridRotor", "foxes.models.rotor_models.GridRotor.__init__", "foxes.models.rotor_models.GridRotor.__repr__", "foxes.models.rotor_models.GridRotor.design_points", "foxes.models.rotor_models.GridRotor.initialize", "foxes.models.rotor_models.GridRotor.n_rotor_points", "foxes.models.rotor_models.GridRotor.rotor_point_weights", "foxes.models.rotor_models.LevelRotor", "foxes.models.rotor_models.LevelRotor.__init__", "foxes.models.rotor_models.LevelRotor.__repr__", "foxes.models.rotor_models.LevelRotor.design_points", "foxes.models.rotor_models.LevelRotor.initialize", "foxes.models.rotor_models.LevelRotor.n_rotor_points", "foxes.models.rotor_models.LevelRotor.rotor_point_weights", "foxes.models.turbine_models.Calculator", "foxes.models.turbine_models.Calculator.__init__", "foxes.models.turbine_models.Calculator.__repr__", "foxes.models.turbine_models.Calculator.calculate", "foxes.models.turbine_models.Calculator.output_farm_vars", "foxes.models.turbine_models.LookupTable", "foxes.models.turbine_models.LookupTable.__init__", "foxes.models.turbine_models.LookupTable.calculate", "foxes.models.turbine_models.LookupTable.load_data", "foxes.models.turbine_models.LookupTable.output_farm_vars", "foxes.models.turbine_models.PowerMask", "foxes.models.turbine_models.PowerMask.__init__", "foxes.models.turbine_models.PowerMask.__repr__", "foxes.models.turbine_models.PowerMask.calculate", "foxes.models.turbine_models.PowerMask.initialize", "foxes.models.turbine_models.PowerMask.output_farm_vars", "foxes.models.turbine_models.PowerMask.sub_models", "foxes.models.turbine_models.RotorCentreCalc", "foxes.models.turbine_models.RotorCentreCalc.__init__", "foxes.models.turbine_models.RotorCentreCalc.calculate", "foxes.models.turbine_models.RotorCentreCalc.initialize", "foxes.models.turbine_models.RotorCentreCalc.output_farm_vars", "foxes.models.turbine_models.RotorCentreCalc.sub_models", "foxes.models.turbine_models.SectorManagement", "foxes.models.turbine_models.SectorManagement.__init__", "foxes.models.turbine_models.SectorManagement.calculate", "foxes.models.turbine_models.SectorManagement.initialize", "foxes.models.turbine_models.SectorManagement.output_farm_vars", "foxes.models.turbine_models.SetFarmVars", "foxes.models.turbine_models.SetFarmVars.__init__", "foxes.models.turbine_models.SetFarmVars.add_var", "foxes.models.turbine_models.SetFarmVars.calculate", "foxes.models.turbine_models.SetFarmVars.initialize", "foxes.models.turbine_models.SetFarmVars.load_data", "foxes.models.turbine_models.SetFarmVars.output_farm_vars", "foxes.models.turbine_models.SetFarmVars.reset", "foxes.models.turbine_models.SetFarmVars.set_running", "foxes.models.turbine_models.SetFarmVars.unset_running", "foxes.models.turbine_models.TableFactors", "foxes.models.turbine_models.TableFactors.__init__", "foxes.models.turbine_models.TableFactors.calculate", "foxes.models.turbine_models.TableFactors.initialize", "foxes.models.turbine_models.TableFactors.output_farm_vars", "foxes.models.turbine_models.Thrust2Ct", "foxes.models.turbine_models.Thrust2Ct.__init__", "foxes.models.turbine_models.Thrust2Ct.__repr__", "foxes.models.turbine_models.Thrust2Ct.calculate", "foxes.models.turbine_models.Thrust2Ct.output_farm_vars", "foxes.models.turbine_models.YAW2YAWM", "foxes.models.turbine_models.YAW2YAWM.calculate", "foxes.models.turbine_models.YAW2YAWM.output_farm_vars", "foxes.models.turbine_models.YAWM2YAW", "foxes.models.turbine_models.YAWM2YAW.calculate", "foxes.models.turbine_models.YAWM2YAW.output_farm_vars", "foxes.models.turbine_models.kTI", "foxes.models.turbine_models.kTI.__init__", "foxes.models.turbine_models.kTI.__repr__", "foxes.models.turbine_models.kTI.calculate", "foxes.models.turbine_models.kTI.output_farm_vars", "foxes.models.turbine_types.CpCtFile", "foxes.models.turbine_types.CpCtFile.__init__", "foxes.models.turbine_types.CpCtFromTwo", "foxes.models.turbine_types.CpCtFromTwo.__init__", "foxes.models.turbine_types.FromLookupTable", "foxes.models.turbine_types.FromLookupTable.__init__", "foxes.models.turbine_types.FromLookupTable.__repr__", "foxes.models.turbine_types.FromLookupTable.calculate", "foxes.models.turbine_types.FromLookupTable.initialize", "foxes.models.turbine_types.FromLookupTable.modify_cutin", "foxes.models.turbine_types.FromLookupTable.needs_rews2", "foxes.models.turbine_types.FromLookupTable.needs_rews3", "foxes.models.turbine_types.FromLookupTable.output_farm_vars", "foxes.models.turbine_types.FromLookupTable.sub_models", "foxes.models.turbine_types.NullType", "foxes.models.turbine_types.NullType.__init__", "foxes.models.turbine_types.NullType.calculate", "foxes.models.turbine_types.NullType.needs_rews2", "foxes.models.turbine_types.NullType.needs_rews3", "foxes.models.turbine_types.NullType.output_farm_vars", "foxes.models.turbine_types.PCtFile", "foxes.models.turbine_types.PCtFile.__init__", "foxes.models.turbine_types.PCtFile.__repr__", "foxes.models.turbine_types.PCtFile.calculate", "foxes.models.turbine_types.PCtFile.finalize", "foxes.models.turbine_types.PCtFile.load_data", "foxes.models.turbine_types.PCtFile.modify_cutin", "foxes.models.turbine_types.PCtFile.needs_rews2", "foxes.models.turbine_types.PCtFile.needs_rews3", "foxes.models.turbine_types.PCtFile.output_farm_vars", "foxes.models.turbine_types.PCtFromTwo", "foxes.models.turbine_types.PCtFromTwo.__init__", "foxes.models.turbine_types.PCtFromTwo.__repr__", "foxes.models.turbine_types.PCtFromTwo.calculate", "foxes.models.turbine_types.PCtFromTwo.finalize", "foxes.models.turbine_types.PCtFromTwo.load_data", "foxes.models.turbine_types.PCtFromTwo.modify_cutin", "foxes.models.turbine_types.PCtFromTwo.needs_rews2", "foxes.models.turbine_types.PCtFromTwo.needs_rews3", "foxes.models.turbine_types.PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.TBLFile", "foxes.models.turbine_types.TBLFile.__init__", "foxes.models.turbine_types.WsRho2PCtFromTwo", "foxes.models.turbine_types.WsRho2PCtFromTwo.__init__", "foxes.models.turbine_types.WsRho2PCtFromTwo.calculate", "foxes.models.turbine_types.WsRho2PCtFromTwo.finalize", "foxes.models.turbine_types.WsRho2PCtFromTwo.load_data", "foxes.models.turbine_types.WsRho2PCtFromTwo.needs_rews2", "foxes.models.turbine_types.WsRho2PCtFromTwo.needs_rews3", "foxes.models.turbine_types.WsRho2PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsTI2PCtFromTwo", "foxes.models.turbine_types.WsTI2PCtFromTwo.__init__", "foxes.models.turbine_types.WsTI2PCtFromTwo.__repr__", "foxes.models.turbine_types.WsTI2PCtFromTwo.calculate", "foxes.models.turbine_types.WsTI2PCtFromTwo.finalize", "foxes.models.turbine_types.WsTI2PCtFromTwo.load_data", "foxes.models.turbine_types.WsTI2PCtFromTwo.needs_rews2", "foxes.models.turbine_types.WsTI2PCtFromTwo.needs_rews3", "foxes.models.turbine_types.WsTI2PCtFromTwo.output_farm_vars", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.__init__", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogStableWsProfile", "foxes.models.vertical_profiles.ABLLogStableWsProfile.__init__", "foxes.models.vertical_profiles.ABLLogStableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogStableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.__init__", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogWsProfile", "foxes.models.vertical_profiles.ABLLogWsProfile.__init__", "foxes.models.vertical_profiles.ABLLogWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogWsProfile.input_vars", "foxes.models.vertical_profiles.DataProfile", "foxes.models.vertical_profiles.DataProfile.__init__", "foxes.models.vertical_profiles.DataProfile.calculate", "foxes.models.vertical_profiles.DataProfile.input_vars", "foxes.models.vertical_profiles.ShearedProfile", "foxes.models.vertical_profiles.ShearedProfile.calculate", "foxes.models.vertical_profiles.ShearedProfile.input_vars", "foxes.models.vertical_profiles.UniformProfile", "foxes.models.vertical_profiles.UniformProfile.__init__", "foxes.models.vertical_profiles.UniformProfile.calculate", "foxes.models.vertical_profiles.UniformProfile.input_vars", "foxes.models.wake_frames.DynamicWakes", "foxes.models.wake_frames.DynamicWakes.__init__", "foxes.models.wake_frames.DynamicWakes.__repr__", "foxes.models.wake_frames.DynamicWakes.calc_order", "foxes.models.wake_frames.DynamicWakes.get_wake_coos", "foxes.models.wake_frames.DynamicWakes.initialize", "foxes.models.wake_frames.FarmOrder", "foxes.models.wake_frames.FarmOrder.__init__", "foxes.models.wake_frames.FarmOrder.calc_order", "foxes.models.wake_frames.FarmOrder.get_centreline_points", "foxes.models.wake_frames.FarmOrder.get_wake_coos", "foxes.models.wake_frames.FarmOrder.initialize", "foxes.models.wake_frames.FarmOrder.sub_models", "foxes.models.wake_frames.RotorWD", "foxes.models.wake_frames.RotorWD.__init__", "foxes.models.wake_frames.RotorWD.calc_order", "foxes.models.wake_frames.RotorWD.get_centreline_points", "foxes.models.wake_frames.RotorWD.get_wake_coos", "foxes.models.wake_frames.SeqDynamicWakes", "foxes.models.wake_frames.SeqDynamicWakes.__init__", "foxes.models.wake_frames.SeqDynamicWakes.__repr__", "foxes.models.wake_frames.SeqDynamicWakes.calc_order", "foxes.models.wake_frames.SeqDynamicWakes.get_centreline_points", "foxes.models.wake_frames.SeqDynamicWakes.get_wake_coos", "foxes.models.wake_frames.SeqDynamicWakes.get_wake_modelling_data", "foxes.models.wake_frames.SeqDynamicWakes.initialize", "foxes.models.wake_frames.Streamlines2D", "foxes.models.wake_frames.Streamlines2D.__init__", "foxes.models.wake_frames.Streamlines2D.__repr__", "foxes.models.wake_frames.Streamlines2D.calc_order", "foxes.models.wake_frames.Streamlines2D.get_centreline_points", "foxes.models.wake_frames.Streamlines2D.get_streamline_data", "foxes.models.wake_frames.Streamlines2D.get_wake_coos", "foxes.models.wake_frames.Timelines", "foxes.models.wake_frames.Timelines.__init__", "foxes.models.wake_frames.Timelines.__repr__", "foxes.models.wake_frames.Timelines.calc_order", "foxes.models.wake_frames.Timelines.finalize", "foxes.models.wake_frames.Timelines.get_centreline_points", "foxes.models.wake_frames.Timelines.get_wake_coos", "foxes.models.wake_frames.Timelines.initialize", "foxes.models.wake_frames.Timelines.set_running", "foxes.models.wake_frames.Timelines.unset_running", "foxes.models.wake_frames.YawedWakes", "foxes.models.wake_frames.YawedWakes.__init__", "foxes.models.wake_frames.YawedWakes.__repr__", "foxes.models.wake_frames.YawedWakes.calc_order", "foxes.models.wake_frames.YawedWakes.get_centreline_points", "foxes.models.wake_frames.YawedWakes.get_wake_coos", "foxes.models.wake_frames.YawedWakes.initialize", "foxes.models.wake_frames.YawedWakes.sub_models", "foxes.models.wake_models.AxisymmetricWakeModel", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_x_r", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_x_yz", "foxes.models.wake_models.DistSlicedWakeModel", "foxes.models.wake_models.DistSlicedWakeModel.__init__", "foxes.models.wake_models.DistSlicedWakeModel.calc_wakes_x_yz", "foxes.models.wake_models.DistSlicedWakeModel.contribute", "foxes.models.wake_models.DistSlicedWakeModel.finalize_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.initialize", "foxes.models.wake_models.DistSlicedWakeModel.sub_models", "foxes.models.wake_models.GaussianWakeModel", "foxes.models.wake_models.GaussianWakeModel.calc_amplitude_sigma", "foxes.models.wake_models.GaussianWakeModel.calc_wakes_x_r", "foxes.models.wake_models.TopHatWakeModel", "foxes.models.wake_models.TopHatWakeModel.__init__", "foxes.models.wake_models.TopHatWakeModel.calc_centreline", "foxes.models.wake_models.TopHatWakeModel.calc_wake_radius", "foxes.models.wake_models.TopHatWakeModel.calc_wakes_x_r", "foxes.models.wake_models.TopHatWakeModel.initialize", "foxes.models.wake_models.TopHatWakeModel.sub_models", "foxes.models.wake_models.induction.RankineHalfBody", "foxes.models.wake_models.induction.RankineHalfBody.__init__", "foxes.models.wake_models.induction.RankineHalfBody.__repr__", "foxes.models.wake_models.induction.RankineHalfBody.contribute", "foxes.models.wake_models.induction.RankineHalfBody.finalize_wake_deltas", "foxes.models.wake_models.induction.RankineHalfBody.initialize", "foxes.models.wake_models.induction.RankineHalfBody.new_wake_deltas", "foxes.models.wake_models.induction.RankineHalfBody.sub_models", "foxes.models.wake_models.induction.Rathmann", "foxes.models.wake_models.induction.Rathmann.__init__", "foxes.models.wake_models.induction.Rathmann.__repr__", "foxes.models.wake_models.induction.Rathmann.contribute", "foxes.models.wake_models.induction.Rathmann.finalize_wake_deltas", "foxes.models.wake_models.induction.Rathmann.initialize", "foxes.models.wake_models.induction.Rathmann.new_wake_deltas", "foxes.models.wake_models.induction.Rathmann.sub_models", "foxes.models.wake_models.induction.SelfSimilar", "foxes.models.wake_models.induction.SelfSimilar.__init__", "foxes.models.wake_models.induction.SelfSimilar.__repr__", "foxes.models.wake_models.induction.SelfSimilar.contribute", "foxes.models.wake_models.induction.SelfSimilar.finalize_wake_deltas", "foxes.models.wake_models.induction.SelfSimilar.initialize", "foxes.models.wake_models.induction.SelfSimilar.new_wake_deltas", "foxes.models.wake_models.induction.SelfSimilar.sub_models", "foxes.models.wake_models.induction.SelfSimilar2020", "foxes.models.wake_models.induction.VortexSheet", "foxes.models.wake_models.induction.VortexSheet.__init__", "foxes.models.wake_models.induction.VortexSheet.__repr__", "foxes.models.wake_models.induction.VortexSheet.contribute", "foxes.models.wake_models.induction.VortexSheet.finalize_wake_deltas", "foxes.models.wake_models.induction.VortexSheet.initialize", "foxes.models.wake_models.induction.VortexSheet.new_wake_deltas", "foxes.models.wake_models.induction.VortexSheet.sub_models", "foxes.models.wake_models.ti.CrespoHernandezTIWake", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__init__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__repr__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_centreline", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_wake_radius", "foxes.models.wake_models.ti.CrespoHernandezTIWake.new_wake_deltas", "foxes.models.wake_models.ti.CrespoHernandezTIWake.sub_models", "foxes.models.wake_models.ti.IECTIWake", "foxes.models.wake_models.ti.IECTIWake.__init__", "foxes.models.wake_models.ti.IECTIWake.__repr__", "foxes.models.wake_models.ti.IECTIWake.calc_centreline", "foxes.models.wake_models.ti.IECTIWake.calc_wake_radius", "foxes.models.wake_models.ti.IECTIWake.new_wake_deltas", "foxes.models.wake_models.ti.IECTIWake.sub_models", "foxes.models.wake_models.wind.Bastankhah2014", "foxes.models.wake_models.wind.Bastankhah2014.__init__", "foxes.models.wake_models.wind.Bastankhah2014.__repr__", "foxes.models.wake_models.wind.Bastankhah2014.calc_amplitude_sigma", "foxes.models.wake_models.wind.Bastankhah2014.initialize", "foxes.models.wake_models.wind.Bastankhah2014.sub_models", "foxes.models.wake_models.wind.Bastankhah2016", "foxes.models.wake_models.wind.Bastankhah2016.__init__", "foxes.models.wake_models.wind.Bastankhah2016.__repr__", "foxes.models.wake_models.wind.Bastankhah2016.calc_wakes_x_yz", "foxes.models.wake_models.wind.Bastankhah2016.initialize", "foxes.models.wake_models.wind.Bastankhah2016.sub_models", "foxes.models.wake_models.wind.Bastankhah2016Model", "foxes.models.wake_models.wind.Bastankhah2016Model.AMPL_FAR", "foxes.models.wake_models.wind.Bastankhah2016Model.AMPL_NEAR", "foxes.models.wake_models.wind.Bastankhah2016Model.CHECK", "foxes.models.wake_models.wind.Bastankhah2016Model.DELTA_FAR", "foxes.models.wake_models.wind.Bastankhah2016Model.DELTA_NEAR", "foxes.models.wake_models.wind.Bastankhah2016Model.MDATA_KEY", "foxes.models.wake_models.wind.Bastankhah2016Model.NEAR", "foxes.models.wake_models.wind.Bastankhah2016Model.PARS", "foxes.models.wake_models.wind.Bastankhah2016Model.R_PC", "foxes.models.wake_models.wind.Bastankhah2016Model.R_PC_S", "foxes.models.wake_models.wind.Bastankhah2016Model.SIGMA_Y_FAR", "foxes.models.wake_models.wind.Bastankhah2016Model.SIGMA_Z_FAR", "foxes.models.wake_models.wind.Bastankhah2016Model.ST_SEL", "foxes.models.wake_models.wind.Bastankhah2016Model.X0", "foxes.models.wake_models.wind.Bastankhah2016Model.__init__", "foxes.models.wake_models.wind.Bastankhah2016Model.calc_data", "foxes.models.wake_models.wind.Bastankhah2016Model.clean", "foxes.models.wake_models.wind.Bastankhah2016Model.get_data", "foxes.models.wake_models.wind.Bastankhah2016Model.has_data", "foxes.models.wake_models.wind.Bastankhah2016Model.initialize", "foxes.models.wake_models.wind.Bastankhah2016Model.pars", "foxes.models.wake_models.wind.Bastankhah2016Model.sub_models", "foxes.models.wake_models.wind.JensenWake", "foxes.models.wake_models.wind.JensenWake.__init__", "foxes.models.wake_models.wind.JensenWake.__repr__", "foxes.models.wake_models.wind.JensenWake.calc_centreline", "foxes.models.wake_models.wind.JensenWake.calc_wake_radius", "foxes.models.wake_models.wind.TurbOParkWake", "foxes.models.wake_models.wind.TurbOParkWake.__init__", "foxes.models.wake_models.wind.TurbOParkWake.__repr__", "foxes.models.wake_models.wind.TurbOParkWake.calc_amplitude_sigma", "foxes.models.wake_models.wind.TurbOParkWake.initialize", "foxes.models.wake_models.wind.TurbOParkWake.sub_models", "foxes.models.wake_models.wind.TurbOParkWakeIX", "foxes.models.wake_models.wind.TurbOParkWakeIX.__init__", "foxes.models.wake_models.wind.TurbOParkWakeIX.__repr__", "foxes.models.wake_models.wind.TurbOParkWakeIX.calc_amplitude_sigma", "foxes.models.wake_models.wind.TurbOParkWakeIX.finalize", "foxes.models.wake_models.wind.TurbOParkWakeIX.initialize", "foxes.models.wake_models.wind.TurbOParkWakeIX.new_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWakeIX.sub_models", "foxes.models.wake_superpositions.TILinear", "foxes.models.wake_superpositions.TILinear.__init__", "foxes.models.wake_superpositions.TILinear.__repr__", "foxes.models.wake_superpositions.TILinear.add_wake", "foxes.models.wake_superpositions.TILinear.calc_final_wake_delta", "foxes.models.wake_superpositions.TIMax", "foxes.models.wake_superpositions.TIMax.__init__", "foxes.models.wake_superpositions.TIMax.__repr__", "foxes.models.wake_superpositions.TIMax.add_wake", "foxes.models.wake_superpositions.TIMax.calc_final_wake_delta", "foxes.models.wake_superpositions.TIPow", "foxes.models.wake_superpositions.TIPow.__init__", "foxes.models.wake_superpositions.TIPow.__repr__", "foxes.models.wake_superpositions.TIPow.add_wake", "foxes.models.wake_superpositions.TIPow.calc_final_wake_delta", "foxes.models.wake_superpositions.TIQuadratic", "foxes.models.wake_superpositions.TIQuadratic.__init__", "foxes.models.wake_superpositions.TIQuadratic.__repr__", "foxes.models.wake_superpositions.TIQuadratic.add_wake", "foxes.models.wake_superpositions.TIQuadratic.calc_final_wake_delta", "foxes.models.wake_superpositions.WSLinear", "foxes.models.wake_superpositions.WSLinear.__init__", "foxes.models.wake_superpositions.WSLinear.__repr__", "foxes.models.wake_superpositions.WSLinear.add_wake", "foxes.models.wake_superpositions.WSLinear.calc_final_wake_delta", "foxes.models.wake_superpositions.WSLinear.input_farm_vars", "foxes.models.wake_superpositions.WSLinearLocal", "foxes.models.wake_superpositions.WSLinearLocal.__init__", "foxes.models.wake_superpositions.WSLinearLocal.__repr__", "foxes.models.wake_superpositions.WSLinearLocal.add_wake", "foxes.models.wake_superpositions.WSLinearLocal.calc_final_wake_delta", "foxes.models.wake_superpositions.WSLinearLocal.input_farm_vars", "foxes.models.wake_superpositions.WSMax", "foxes.models.wake_superpositions.WSMax.__init__", "foxes.models.wake_superpositions.WSMax.__repr__", "foxes.models.wake_superpositions.WSMax.add_wake", "foxes.models.wake_superpositions.WSMax.calc_final_wake_delta", "foxes.models.wake_superpositions.WSMax.input_farm_vars", "foxes.models.wake_superpositions.WSMaxLocal", "foxes.models.wake_superpositions.WSMaxLocal.__init__", "foxes.models.wake_superpositions.WSMaxLocal.__repr__", "foxes.models.wake_superpositions.WSMaxLocal.add_wake", "foxes.models.wake_superpositions.WSMaxLocal.calc_final_wake_delta", "foxes.models.wake_superpositions.WSMaxLocal.input_farm_vars", "foxes.models.wake_superpositions.WSPow", "foxes.models.wake_superpositions.WSPow.__init__", "foxes.models.wake_superpositions.WSPow.__repr__", "foxes.models.wake_superpositions.WSPow.add_wake", "foxes.models.wake_superpositions.WSPow.calc_final_wake_delta", "foxes.models.wake_superpositions.WSPow.input_farm_vars", "foxes.models.wake_superpositions.WSPowLocal", "foxes.models.wake_superpositions.WSPowLocal.__init__", "foxes.models.wake_superpositions.WSPowLocal.__repr__", "foxes.models.wake_superpositions.WSPowLocal.add_wake", "foxes.models.wake_superpositions.WSPowLocal.calc_final_wake_delta", "foxes.models.wake_superpositions.WSPowLocal.input_farm_vars", "foxes.models.wake_superpositions.WSProduct", "foxes.models.wake_superpositions.WSProduct.__init__", "foxes.models.wake_superpositions.WSProduct.__repr__", "foxes.models.wake_superpositions.WSProduct.add_wake", "foxes.models.wake_superpositions.WSProduct.calc_final_wake_delta", "foxes.models.wake_superpositions.WSProduct.input_farm_vars", "foxes.models.wake_superpositions.WSQuadratic", "foxes.models.wake_superpositions.WSQuadratic.__init__", "foxes.models.wake_superpositions.WSQuadratic.__repr__", "foxes.models.wake_superpositions.WSQuadratic.add_wake", "foxes.models.wake_superpositions.WSQuadratic.calc_final_wake_delta", "foxes.models.wake_superpositions.WSQuadratic.input_farm_vars", "foxes.models.wake_superpositions.WSQuadraticLocal", "foxes.models.wake_superpositions.WSQuadraticLocal.__init__", "foxes.models.wake_superpositions.WSQuadraticLocal.__repr__", "foxes.models.wake_superpositions.WSQuadraticLocal.add_wake", "foxes.models.wake_superpositions.WSQuadraticLocal.calc_final_wake_delta", "foxes.models.wake_superpositions.WSQuadraticLocal.input_farm_vars", "foxes.output.Animator", "foxes.output.Animator.__init__", "foxes.output.Animator.add_generator", "foxes.output.Animator.animate", "foxes.output.Animator.generators", "foxes.output.FarmLayoutOutput", "foxes.output.FarmLayoutOutput.__init__", "foxes.output.FarmLayoutOutput.get_figure", "foxes.output.FarmLayoutOutput.get_layout_data", "foxes.output.FarmLayoutOutput.get_layout_dict", "foxes.output.FarmLayoutOutput.write_csv", "foxes.output.FarmLayoutOutput.write_json", "foxes.output.FarmLayoutOutput.write_plot", "foxes.output.FarmLayoutOutput.write_xyh", "foxes.output.FarmResultsEval", "foxes.output.FarmResultsEval.__init__", "foxes.output.FarmResultsEval.add_capacity", "foxes.output.FarmResultsEval.add_efficiency", "foxes.output.FarmResultsEval.calc_farm_efficiency", "foxes.output.FarmResultsEval.calc_farm_mean", "foxes.output.FarmResultsEval.calc_farm_sum", "foxes.output.FarmResultsEval.calc_farm_yield", "foxes.output.FarmResultsEval.calc_mean_farm_power", "foxes.output.FarmResultsEval.calc_states_mean", "foxes.output.FarmResultsEval.calc_states_std", "foxes.output.FarmResultsEval.calc_states_sum", "foxes.output.FarmResultsEval.calc_turbine_mean", "foxes.output.FarmResultsEval.calc_turbine_sum", "foxes.output.FarmResultsEval.calc_turbine_yield", "foxes.output.FarmResultsEval.gen_stdata", "foxes.output.FarmResultsEval.reduce_all", "foxes.output.FarmResultsEval.reduce_states", "foxes.output.FarmResultsEval.reduce_turbines", "foxes.output.FarmResultsEval.weinsum", "foxes.output.FlowPlots2D", "foxes.output.FlowPlots2D.gen_states_fig_xy", "foxes.output.FlowPlots2D.gen_states_fig_xz", "foxes.output.FlowPlots2D.gen_states_fig_yz", "foxes.output.FlowPlots2D.get_mean_fig_xy", "foxes.output.FlowPlots2D.get_mean_fig_xz", "foxes.output.FlowPlots2D.get_mean_fig_yz", "foxes.output.Output", "foxes.output.Output.__init__", "foxes.output.Output.get_fpath", "foxes.output.Output.new", "foxes.output.Output.print_models", "foxes.output.Output.write", "foxes.output.PointCalculator", "foxes.output.PointCalculator.__init__", "foxes.output.PointCalculator.calculate", "foxes.output.ResultsWriter", "foxes.output.ResultsWriter.__init__", "foxes.output.ResultsWriter.write_csv", "foxes.output.ResultsWriter.write_nc", "foxes.output.RosePlotOutput", "foxes.output.RosePlotOutput.__init__", "foxes.output.RosePlotOutput.get_data", "foxes.output.RosePlotOutput.get_data_info", "foxes.output.RosePlotOutput.get_figure", "foxes.output.RosePlotOutput.write_figure", "foxes.output.RotorPointPlot", "foxes.output.RotorPointPlot.__init__", "foxes.output.RotorPointPlot.get_point_figure", "foxes.output.SeqFlowAnimationPlugin", "foxes.output.SeqFlowAnimationPlugin.__init__", "foxes.output.SeqFlowAnimationPlugin.gen_images", "foxes.output.SeqFlowAnimationPlugin.initialize", "foxes.output.SeqFlowAnimationPlugin.update", "foxes.output.SeqWakeDebugPlugin", "foxes.output.SeqWakeDebugPlugin.__init__", "foxes.output.SeqWakeDebugPlugin.gen_images", "foxes.output.SeqWakeDebugPlugin.initialize", "foxes.output.SeqWakeDebugPlugin.update", "foxes.output.SliceData", "foxes.output.SliceData.__init__", "foxes.output.SliceData.get_mean_data_xy", "foxes.output.SliceData.get_mean_data_xz", "foxes.output.SliceData.get_mean_data_yz", "foxes.output.SliceData.get_states_data_xy", "foxes.output.SliceData.get_states_data_xz", "foxes.output.SliceData.get_states_data_yz", "foxes.output.SlicesData", "foxes.output.SlicesData.__init__", "foxes.output.SlicesData.get_mean_data_xy", "foxes.output.SlicesData.get_mean_data_xz", "foxes.output.SlicesData.get_mean_data_yz", "foxes.output.SlicesData.get_states_data_xy", "foxes.output.SlicesData.get_states_data_xz", "foxes.output.SlicesData.get_states_data_yz", "foxes.output.StateTurbineMap", "foxes.output.StateTurbineMap.__init__", "foxes.output.StateTurbineMap.plot_map", "foxes.output.StateTurbineTable", "foxes.output.StateTurbineTable.__init__", "foxes.output.StateTurbineTable.get_dataset", "foxes.output.StatesRosePlotOutput", "foxes.output.StatesRosePlotOutput.__init__", "foxes.output.TurbineTypeCurves", "foxes.output.TurbineTypeCurves.__init__", "foxes.output.TurbineTypeCurves.plot_curves", "foxes.output.WindRoseBinPlot", "foxes.output.WindRoseBinPlot.__init__", "foxes.output.WindRoseBinPlot.get_data", "foxes.output.WindRoseBinPlot.get_figure", "foxes.output.WindRoseBinPlot.write_figure", "foxes.output.flow_plots_2d.get_fig", "foxes.output.plt", "foxes.output.plt.savefig", "foxes.utils.DataBook", "foxes.utils.DataBook.__init__", "foxes.utils.DataBook.add_data_package", "foxes.utils.DataBook.add_data_package_file", "foxes.utils.DataBook.add_file", "foxes.utils.DataBook.add_files", "foxes.utils.DataBook.get_file_path", "foxes.utils.DataBook.toc", "foxes.utils.Dict", "foxes.utils.Dict.__getitem__", "foxes.utils.Dict.__init__", "foxes.utils.Dict.from_yaml", "foxes.utils.Dict.get_item", "foxes.utils.Dict.pop_item", "foxes.utils.FDict", "foxes.utils.FDict.__contains__", "foxes.utils.FDict.__getitem__", "foxes.utils.FDict.__init__", "foxes.utils.FDict.add_factory", "foxes.utils.FDict.add_k_factory", "foxes.utils.FDict.get_item", "foxes.utils.Factory", "foxes.utils.Factory.__init__", "foxes.utils.Factory.__str__", "foxes.utils.Factory.check_match", "foxes.utils.Factory.construct", "foxes.utils.Factory.get_examples", "foxes.utils.Factory.name_prefix", "foxes.utils.Factory.name_suffix", "foxes.utils.Factory.variables", "foxes.utils.PandasFileHelper", "foxes.utils.PandasFileHelper.DATA_FILE_FORMATS", "foxes.utils.PandasFileHelper.DEFAULT_FORMAT_DICT", "foxes.utils.PandasFileHelper.DEFAULT_READING_PARAMETERS", "foxes.utils.PandasFileHelper.DEFAULT_WRITING_PARAMETERS", "foxes.utils.PandasFileHelper.read_file", "foxes.utils.PandasFileHelper.write_file", "foxes.utils.ReaderWRG", "foxes.utils.ReaderWRG.__init__", "foxes.utils.ReaderWRG.data", "foxes.utils.ReaderWRG.n_sectors", "foxes.utils.ReaderWRG.nx", "foxes.utils.ReaderWRG.ny", "foxes.utils.ReaderWRG.resolution", "foxes.utils.ReaderWRG.x0", "foxes.utils.ReaderWRG.y0", "foxes.utils.WakeKFactory", "foxes.utils.WakeKFactory.__init__", "foxes.utils.WakeKFactory.__str__", "foxes.utils.abl.neutral.calc_ws", "foxes.utils.abl.neutral.logz", "foxes.utils.abl.neutral.ustar", "foxes.utils.abl.sheared.calc_ws", "foxes.utils.abl.stable.calc_ws", "foxes.utils.abl.stable.logz", "foxes.utils.abl.stable.psi", "foxes.utils.abl.stable.ustar", "foxes.utils.abl.unstable.calc_ws", "foxes.utils.abl.unstable.psi", "foxes.utils.abl.unstable.ustar", "foxes.utils.all_subclasses", "foxes.utils.cubic_roots", "foxes.utils.delta_wd", "foxes.utils.exec_python", "foxes.utils.geom2d.AreaGeometry", "foxes.utils.geom2d.AreaGeometry.add_to_figure", "foxes.utils.geom2d.AreaGeometry.inverse", "foxes.utils.geom2d.AreaGeometry.p_max", "foxes.utils.geom2d.AreaGeometry.p_min", "foxes.utils.geom2d.AreaGeometry.points_distance", "foxes.utils.geom2d.AreaGeometry.points_inside", "foxes.utils.geom2d.AreaIntersection", "foxes.utils.geom2d.AreaIntersection.__new__", "foxes.utils.geom2d.AreaUnion", "foxes.utils.geom2d.AreaUnion.__init__", "foxes.utils.geom2d.AreaUnion.add_to_figure", "foxes.utils.geom2d.AreaUnion.inverse", "foxes.utils.geom2d.AreaUnion.p_max", "foxes.utils.geom2d.AreaUnion.p_min", "foxes.utils.geom2d.AreaUnion.points_distance", "foxes.utils.geom2d.AreaUnion.points_inside", "foxes.utils.geom2d.Circle", "foxes.utils.geom2d.Circle.__init__", "foxes.utils.geom2d.Circle.add_to_figure", "foxes.utils.geom2d.Circle.p_max", "foxes.utils.geom2d.Circle.p_min", "foxes.utils.geom2d.Circle.points_distance", "foxes.utils.geom2d.Circle.points_inside", "foxes.utils.geom2d.ClosedPolygon", "foxes.utils.geom2d.ClosedPolygon.__init__", "foxes.utils.geom2d.ClosedPolygon.add_to_figure", "foxes.utils.geom2d.ClosedPolygon.p_max", "foxes.utils.geom2d.ClosedPolygon.p_min", "foxes.utils.geom2d.ClosedPolygon.points_distance", "foxes.utils.geom2d.ClosedPolygon.points_inside", "foxes.utils.geom2d.HalfPlane", "foxes.utils.geom2d.HalfPlane.__init__", "foxes.utils.geom2d.HalfPlane.add_to_figure", "foxes.utils.geom2d.HalfPlane.inverse", "foxes.utils.geom2d.HalfPlane.p_max", "foxes.utils.geom2d.HalfPlane.p_min", "foxes.utils.geom2d.HalfPlane.points_distance", "foxes.utils.geom2d.HalfPlane.points_inside", "foxes.utils.geom2d.InvertedAreaGeometry", "foxes.utils.geom2d.InvertedAreaGeometry.__init__", "foxes.utils.geom2d.InvertedAreaGeometry.add_to_figure", "foxes.utils.geom2d.InvertedAreaGeometry.inverse", "foxes.utils.geom2d.InvertedAreaGeometry.p_max", "foxes.utils.geom2d.InvertedAreaGeometry.p_min", "foxes.utils.geom2d.InvertedAreaGeometry.points_distance", "foxes.utils.geom2d.InvertedAreaGeometry.points_inside", "foxes.utils.import_module", "foxes.utils.load_module", "foxes.utils.new_cls", "foxes.utils.new_instance", "foxes.utils.print_mem", "foxes.utils.random_xy_square", "foxes.utils.read_shp", "foxes.utils.read_shp_polygons", "foxes.utils.read_tab_file", "foxes.utils.shp2csv", "foxes.utils.shp2geom2d", "foxes.utils.sqrt_reg", "foxes.utils.two_circles.area", "foxes.utils.two_circles.calc_area", "foxes.utils.uv2wd", "foxes.utils.wd2uv", "foxes.utils.wd2wdvec", "foxes.utils.wdvec2wd", "foxes.utils.write_nc", "foxes.variables.AMB_CAP", "foxes.variables.AMB_CT", "foxes.variables.AMB_P", "foxes.variables.AMB_REWS", "foxes.variables.AMB_REWS2", "foxes.variables.AMB_REWS3", "foxes.variables.AMB_RHO", "foxes.variables.AMB_T", "foxes.variables.AMB_TI", "foxes.variables.AMB_WD", "foxes.variables.AMB_WS", "foxes.variables.AMB_YAW", "foxes.variables.AMB_YAWM", "foxes.variables.AMB_YLD", "foxes.variables.CAP", "foxes.variables.CT", "foxes.variables.D", "foxes.variables.DEFAULT_DIGITS", "foxes.variables.EFF", "foxes.variables.H", "foxes.variables.K", "foxes.variables.KB", "foxes.variables.KTI", "foxes.variables.MAX_P", "foxes.variables.MOL", "foxes.variables.ORDER", "foxes.variables.ORDER_INV", "foxes.variables.ORDER_SSEL", "foxes.variables.P", "foxes.variables.PA_ALPHA", "foxes.variables.PA_BETA", "foxes.variables.REWS", "foxes.variables.REWS2", "foxes.variables.REWS3", "foxes.variables.RHO", "foxes.variables.SHEAR", "foxes.variables.T", "foxes.variables.TI", "foxes.variables.TXYH", "foxes.variables.USTAR", "foxes.variables.WD", "foxes.variables.WEIGHT", "foxes.variables.WS", "foxes.variables.X", "foxes.variables.Y", "foxes.variables.YAW", "foxes.variables.YAWM", "foxes.variables.YLD", "foxes.variables.Z0", "foxes.variables.amb2var", "foxes.variables.get_default_digits", "foxes.variables.var2amb", "API", "foxes.algorithms", "Downwind algorithm", "Iterative algorithm", "Sequential algorithm", "foxes.config", "foxes.constants", "foxes.core", "foxes.data", "foxes.engines", "foxes", "foxes.input", "foxes.models", "foxes.output", "foxes.utils", "foxes.utils.abl.neutral", "foxes.variables", "foxes.models.wake_models", "Citation", "Examples", "Welcome to FOXES", "Inputs", "Installation", "Models", "Blockage modelling 2", "Blockage modelling 1", "Static data", "Dynamic Wakes 1", "Heterogeneous flow", "The model book", "Multi-height wind data", "Parallelization", "Partial wakes verification", "Power mask", "Rotor model visualizations", "Wind sector management", "Dynamic Wakes 3", "Single row of turbines", "Dynamic Wakes 2", "Timeseries data", "Wind rose data", "Yawed rotor wakes", "Optimization", "Overview - how to setup foxes", "Input parameter files", "Testing"], "titleterms": {"0": 0, "1": [0, 1342, 1344], "10mw": 1343, "15mw": 1343, "2": [0, 1341, 1355], "3": [0, 1353], "4": 0, "4464": 1343, "5": 0, "5mw": 1343, "6": 0, "7": 0, "7d5mw": 1343, "8": 0, "The": 1346, "abl": [1331, 1332], "abl_states_6000": 1343, "acknowledg": 1337, "algorithm": [1318, 1319, 1320, 1321, 1348], "alpha": 0, "ambient": [1338, 1343], "api": 1317, "attribut": [1, 18, 28, 54, 60, 64, 68, 73, 77, 82, 88, 93, 103, 163, 195, 206, 222, 234, 248, 255, 274, 288, 301, 309, 336, 346, 357, 365, 382, 409, 440, 451, 456, 477, 501, 509, 549, 556, 559, 563, 572, 576, 585, 591, 600, 608, 612, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 690, 699, 715, 725, 737, 745, 754, 758, 762, 766, 770, 777, 781, 787, 794, 799, 807, 814, 824, 835, 852, 860, 868, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1027, 1032, 1041, 1068, 1074, 1077, 1087, 1090, 1095, 1100, 1116, 1119, 1124, 1127, 1135, 1143, 1149, 1156, 1165, 1172, 1181, 1208, 1216, 1223, 1230], "avail": 1348, "axial_induct": 1329, "background": 1344, "block": 1348, "blockag": [1341, 1342], "book": 1346, "centrerotor": 1351, "changelog": 0, "citat": 1335, "command": 1361, "comparison": 1341, "conda": 1339, "config": 1322, "constant": 1323, "content": 1337, "contribut": 1337, "core": 1324, "creat": 1328, "creation": 1361, "csv": 1343, "curv": 1343, "d126": 1343, "d164": 1343, "d178d3": 1343, "d240": 1343, "data": [1325, 1343, 1347, 1356, 1357], "default": 1348, "depend": 1339, "develop": 1339, "doi": 1335, "downwind": 1319, "dtu": 1343, "dynam": [1344, 1353, 1355], "engin": [1326, 1348], "environ": 1339, "exampl": [412, 535, 536, 735, 1336], "farm": [1338, 1342, 1343], "farm_control": 1329, "farm_layout": 1328, "farm_model": 1329, "file": [1343, 1361], "flow": 1345, "flow_plots_2d": 1330, "fox": [1318, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1337, 1360], "foxes_windio": 1361, "foxes_yaml": 1361, "frame": 1340, "geom2d": 1331, "grid100": 1351, "grid16": 1351, "grid25": 1351, "grid25_raw": 1351, "grid36": 1351, "grid4": 1351, "grid400": 1351, "grid9": 1351, "gridrotor": 1351, "ground": 1340, "ground_model": 1329, "guid": 1339, "gz": 1343, "h100": 1343, "h119": 1343, "h150": 1343, "h90": 1343, "height": 1347, "heterogen": [1344, 1345], "homogen": 1355, "horizont": 1355, "how": 1360, "iea": 1343, "induct": [1334, 1341], "inflow": 1338, "input": [1328, 1338, 1361], "instal": 1339, "iter": 1320, "iwt": 1343, "journal": 1335, "layout": [1338, 1343], "level10": 1351, "level2": 1351, "level20": 1351, "level3": 1351, "level5": 1351, "level5_raw": 1351, "levelrotor": 1351, "licens": 1337, "manag": 1352, "manual": 1348, "mask": 1350, "member": [1, 18, 28, 47, 50, 54, 60, 64, 68, 73, 77, 82, 86, 88, 93, 97, 102, 112, 163, 192, 195, 203, 206, 222, 231, 234, 248, 255, 263, 264, 272, 274, 288, 295, 301, 309, 319, 327, 336, 340, 343, 346, 353, 357, 365, 372, 378, 382, 394, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 549, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1027, 1032, 1041, 1061, 1068, 1074, 1077, 1081, 1087, 1090, 1095, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1135, 1143, 1149, 1156, 1165, 1172, 1181, 1199, 1206, 1208, 1216, 1223, 1230, 1238], "model": [1319, 1320, 1321, 1329, 1334, 1340, 1341, 1342, 1346, 1351], "multi": 1347, "nc": 1343, "neutral": 1332, "note": [559, 824, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 939], "nrel": 1343, "optim": 1359, "option": [1339, 1361], "output": 1330, "overview": 1360, "paper": 1335, "parallel": 1348, "paramet": [3, 4, 5, 7, 12, 19, 20, 23, 26, 29, 33, 39, 40, 45, 48, 49, 52, 53, 55, 56, 57, 58, 61, 62, 63, 66, 67, 70, 71, 72, 74, 75, 78, 79, 80, 83, 84, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 104, 107, 108, 111, 120, 121, 122, 164, 165, 166, 167, 168, 171, 174, 175, 176, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 196, 197, 198, 199, 202, 204, 207, 209, 210, 212, 213, 217, 218, 220, 221, 223, 224, 225, 227, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 250, 251, 253, 254, 256, 258, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 273, 277, 278, 279, 281, 284, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 300, 302, 304, 305, 306, 307, 310, 311, 313, 314, 316, 317, 321, 322, 323, 324, 326, 328, 329, 330, 331, 335, 337, 338, 339, 342, 344, 345, 347, 349, 352, 354, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 395, 396, 397, 398, 399, 400, 401, 403, 405, 407, 408, 410, 411, 415, 416, 418, 419, 423, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 445, 446, 447, 449, 450, 452, 453, 455, 458, 460, 462, 464, 465, 466, 467, 469, 470, 474, 476, 478, 481, 483, 484, 485, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 508, 511, 512, 514, 516, 517, 518, 519, 520, 523, 524, 526, 527, 528, 529, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 557, 558, 560, 561, 564, 566, 567, 573, 574, 575, 577, 579, 580, 582, 584, 586, 588, 589, 592, 593, 594, 595, 598, 599, 601, 602, 603, 604, 606, 607, 609, 610, 611, 613, 614, 615, 618, 619, 623, 626, 630, 633, 637, 639, 640, 642, 643, 644, 645, 647, 649, 650, 651, 654, 655, 656, 657, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 680, 682, 683, 685, 686, 688, 689, 691, 693, 694, 696, 698, 700, 702, 703, 704, 707, 710, 711, 714, 716, 718, 719, 720, 721, 724, 726, 728, 729, 730, 731, 734, 736, 738, 739, 740, 741, 744, 746, 748, 749, 750, 753, 755, 756, 759, 760, 763, 764, 767, 768, 771, 772, 775, 778, 779, 782, 784, 785, 786, 788, 789, 790, 791, 792, 795, 796, 797, 798, 800, 802, 803, 804, 805, 806, 808, 810, 811, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 833, 834, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 853, 855, 856, 857, 858, 861, 863, 864, 865, 866, 869, 871, 872, 873, 874, 878, 880, 881, 882, 883, 886, 888, 889, 890, 893, 895, 896, 897, 900, 902, 903, 906, 908, 909, 926, 927, 929, 930, 931, 935, 937, 938, 940, 942, 943, 946, 948, 949, 950, 951, 954, 956, 957, 959, 961, 962, 964, 966, 967, 969, 971, 972, 974, 976, 977, 978, 980, 982, 983, 984, 986, 988, 989, 990, 992, 994, 995, 996, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1022, 1024, 1025, 1026, 1028, 1029, 1030, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1073, 1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1117, 1118, 1120, 1121, 1123, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1152, 1153, 1154, 1155, 1157, 1159, 1160, 1161, 1170, 1171, 1173, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1204, 1205, 1207, 1209, 1210, 1214, 1215, 1217, 1218, 1221, 1222, 1224, 1225, 1228, 1229, 1231, 1232, 1236, 1237, 1239, 1240, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1315, 1361], "parmet": 1250, "partial": [1340, 1349], "partial_wak": 1329, "path": 1343, "pip": 1339, "plot": 1361, "point": 1340, "point_model": 1329, "power": [1343, 1350], "prepar": 1339, "profil": 1340, "propag": [1344, 1353, 1355], "public": [1, 18, 28, 47, 50, 54, 60, 64, 68, 73, 77, 82, 86, 88, 93, 97, 102, 112, 163, 192, 195, 203, 206, 222, 231, 234, 248, 255, 263, 264, 272, 274, 288, 295, 301, 309, 319, 327, 336, 340, 343, 346, 353, 357, 365, 372, 378, 382, 394, 398, 404, 406, 409, 412, 413, 414, 417, 420, 421, 422, 427, 428, 429, 440, 451, 454, 456, 471, 473, 475, 477, 490, 492, 501, 509, 525, 530, 549, 556, 559, 562, 563, 569, 571, 572, 576, 581, 583, 585, 591, 597, 600, 605, 608, 612, 616, 622, 629, 636, 641, 646, 653, 659, 664, 674, 679, 684, 687, 690, 695, 697, 699, 709, 715, 725, 735, 737, 745, 754, 758, 762, 766, 770, 774, 777, 781, 787, 794, 799, 807, 814, 824, 832, 835, 842, 845, 852, 860, 868, 876, 877, 885, 892, 899, 905, 911, 934, 939, 945, 953, 958, 963, 968, 973, 979, 985, 991, 997, 1003, 1009, 1015, 1021, 1027, 1032, 1041, 1061, 1068, 1074, 1077, 1081, 1087, 1090, 1095, 1100, 1108, 1116, 1119, 1122, 1124, 1127, 1133, 1135, 1143, 1149, 1156, 1165, 1172, 1181, 1199, 1206, 1208, 1216, 1223, 1230, 1238], "python": 1339, "quick": 1339, "recommend": 1348, "remark": 1348, "requir": 1339, "return": [4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 20, 21, 22, 23, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 58, 59, 62, 63, 66, 67, 70, 72, 75, 76, 80, 81, 84, 85, 90, 91, 92, 95, 96, 104, 105, 106, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 167, 168, 169, 170, 172, 173, 175, 176, 178, 179, 180, 182, 184, 187, 193, 198, 199, 200, 201, 202, 204, 205, 209, 210, 211, 213, 215, 216, 217, 220, 221, 225, 226, 227, 228, 229, 230, 233, 236, 241, 242, 243, 245, 247, 250, 252, 253, 254, 259, 261, 262, 267, 270, 271, 280, 281, 282, 283, 285, 287, 289, 291, 292, 294, 296, 298, 299, 300, 305, 307, 308, 311, 312, 314, 315, 317, 318, 320, 321, 323, 325, 326, 329, 330, 331, 332, 333, 334, 335, 341, 344, 350, 351, 354, 355, 359, 360, 361, 362, 363, 366, 370, 373, 377, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 396, 397, 400, 403, 405, 407, 408, 411, 415, 416, 418, 419, 425, 426, 430, 431, 442, 443, 444, 445, 446, 448, 450, 453, 460, 461, 463, 464, 465, 468, 470, 481, 482, 484, 486, 487, 489, 494, 495, 496, 498, 500, 503, 505, 506, 507, 508, 512, 513, 515, 517, 518, 521, 522, 524, 527, 532, 533, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 552, 554, 558, 561, 566, 567, 568, 579, 582, 588, 589, 590, 593, 596, 598, 599, 602, 603, 604, 606, 607, 610, 611, 614, 615, 617, 619, 620, 621, 625, 627, 628, 632, 634, 635, 639, 640, 643, 644, 645, 649, 651, 652, 655, 657, 658, 661, 663, 667, 669, 670, 676, 678, 682, 683, 685, 686, 688, 689, 693, 694, 702, 705, 706, 707, 708, 711, 712, 713, 714, 718, 720, 722, 723, 724, 728, 730, 732, 733, 734, 739, 741, 742, 743, 744, 748, 750, 751, 752, 753, 756, 757, 760, 761, 764, 765, 768, 769, 772, 773, 775, 776, 779, 780, 784, 785, 789, 790, 791, 793, 796, 797, 798, 802, 803, 804, 805, 810, 811, 812, 813, 817, 819, 820, 827, 828, 829, 831, 833, 834, 837, 841, 843, 844, 847, 848, 849, 851, 858, 859, 866, 867, 874, 875, 884, 888, 889, 890, 891, 895, 896, 897, 898, 902, 904, 908, 910, 929, 930, 932, 933, 937, 938, 942, 944, 948, 951, 952, 956, 957, 961, 962, 966, 967, 971, 972, 976, 977, 978, 982, 983, 984, 988, 989, 990, 994, 995, 996, 1000, 1001, 1002, 1006, 1007, 1008, 1012, 1013, 1014, 1018, 1019, 1020, 1024, 1025, 1026, 1030, 1031, 1034, 1035, 1036, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1065, 1066, 1067, 1070, 1076, 1083, 1084, 1085, 1086, 1089, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1118, 1121, 1126, 1129, 1130, 1131, 1141, 1142, 1146, 1147, 1148, 1159, 1160, 1161, 1162, 1163, 1164, 1170, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1201, 1202, 1203, 1204, 1205, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1226, 1227, 1228, 1229, 1233, 1234, 1235, 1236, 1237, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1315], "rose": 1357, "rotor": [1340, 1351, 1358], "rotor_model": 1329, "row": 1354, "runner": 1331, "sector": 1352, "select": 1348, "seq_plugin": 1330, "sequenti": [1321, 1353], "setup": 1360, "shear": 1332, "singl": 1354, "specif": 1335, "stabl": 1332, "standard": 1339, "state": [1328, 1338, 1343], "static": 1343, "structur": 1361, "test": 1362, "test_farm_67": 1343, "through": 1348, "thrust": 1343, "ti": 1334, "timeseri": [1343, 1356], "timeseries_100": 1343, "timeseries_3000": 1343, "timeseries_8000": 1343, "tldr": 1339, "turbin": [1340, 1354], "turbine_model": 1329, "turbine_typ": 1329, "two_circl": 1331, "type": 1340, "unstabl": 1332, "user": 1339, "util": [1331, 1332], "v0": 0, "v1": 0, "variabl": [1333, 1361], "verif": 1349, "version": 1335, "vertic": 1340, "vertical_profil": 1329, "via": 1339, "virtual": 1339, "visual": 1351, "wake": [1340, 1344, 1349, 1353, 1355, 1358], "wake_fram": 1329, "wake_model": [1329, 1334], "wake_superposit": 1329, "welcom": 1337, "wind": [1334, 1338, 1342, 1343, 1347, 1352, 1357], "wind_rose_bremen": 1343, "wind_rot": 1343, "windio": 1328, "wrf": 1343, "yaml": 1328, "yaw": 1358, "yield": [1056, 1062, 1063, 1064, 1092, 1097, 1132]}})