Search.setIndex({"titles": ["foxes.algorithms.Downwind", "foxes.algorithms.Downwind.__init__", "foxes.algorithms.Downwind.calc_farm", "foxes.algorithms.Downwind.calc_points", "foxes.algorithms.Downwind.finalize", "foxes.algorithms.Downwind.get_model", "foxes.algorithms.Downwind.init_states", "foxes.algorithms.Downwind.initialize", "foxes.algorithms.Iterative", "foxes.algorithms.Iterative.__init__", "foxes.algorithms.Iterative.calc_farm", "foxes.algorithms.Iterative.get_model", "foxes.algorithms.Iterative.iterations", "foxes.algorithms.downwind.models.CalcOrder", "foxes.algorithms.downwind.models.CalcOrder.calculate", "foxes.algorithms.downwind.models.CalcOrder.initialize", "foxes.algorithms.downwind.models.CalcOrder.output_farm_vars", "foxes.algorithms.downwind.models.FarmWakesCalculation", "foxes.algorithms.downwind.models.FarmWakesCalculation.__init__", "foxes.algorithms.downwind.models.FarmWakesCalculation.calculate", "foxes.algorithms.downwind.models.FarmWakesCalculation.initialize", "foxes.algorithms.downwind.models.FarmWakesCalculation.output_farm_vars", "foxes.algorithms.downwind.models.PointWakesCalculation", "foxes.algorithms.downwind.models.PointWakesCalculation.__init__", "foxes.algorithms.downwind.models.PointWakesCalculation.calculate", "foxes.algorithms.downwind.models.PointWakesCalculation.contribute_to_wake_deltas", "foxes.algorithms.downwind.models.PointWakesCalculation.initialize", "foxes.algorithms.downwind.models.PointWakesCalculation.output_point_vars", "foxes.algorithms.downwind.models.SetAmbFarmResults", "foxes.algorithms.downwind.models.SetAmbFarmResults.__init__", "foxes.algorithms.downwind.models.SetAmbFarmResults.calculate", "foxes.algorithms.downwind.models.SetAmbFarmResults.output_farm_vars", "foxes.algorithms.downwind.models.SetAmbPointResults", "foxes.algorithms.downwind.models.SetAmbPointResults.__init__", "foxes.algorithms.downwind.models.SetAmbPointResults.calculate", "foxes.algorithms.downwind.models.SetAmbPointResults.initialize", "foxes.algorithms.downwind.models.SetAmbPointResults.output_point_vars", "foxes.algorithms.iterative.ConvCrit", "foxes.algorithms.iterative.ConvCrit.__init__", "foxes.algorithms.iterative.ConvCrit.check_converged", "foxes.algorithms.iterative.ConvCrit.get_deltas", "foxes.algorithms.iterative.ConvCritList", "foxes.algorithms.iterative.ConvCritList.__init__", "foxes.algorithms.iterative.ConvCritList.add_crit", "foxes.algorithms.iterative.ConvCritList.check_converged", "foxes.algorithms.iterative.ConvCritList.get_deltas", "foxes.algorithms.iterative.ConvVarDelta", "foxes.algorithms.iterative.ConvVarDelta.__init__", "foxes.algorithms.iterative.ConvVarDelta.check_converged", "foxes.algorithms.iterative.ConvVarDelta.get_deltas", "foxes.algorithms.iterative.DefaultConv", "foxes.algorithms.iterative.DefaultConv.__init__", "foxes.algorithms.iterative.models.FarmWakesCalculation", "foxes.algorithms.iterative.models.FarmWakesCalculation.calculate", "foxes.algorithms.iterative.models.FarmWakesCalculation.initialize", "foxes.algorithms.iterative.models.FarmWakesCalculation.output_farm_vars", "foxes.core.Algorithm", "foxes.core.Algorithm.__init__", "foxes.core.Algorithm.chunked", "foxes.core.Algorithm.cleanup", "foxes.core.Algorithm.finalize", "foxes.core.Algorithm.finalize_model", "foxes.core.Algorithm.get_models_data", "foxes.core.Algorithm.idata_mem", "foxes.core.Algorithm.initialize", "foxes.core.Algorithm.new", "foxes.core.Algorithm.new_point_data", "foxes.core.Algorithm.print", "foxes.core.Algorithm.update_idata", "foxes.core.Algorithm.update_n_turbines", "foxes.core.Data", "foxes.core.Data.__init__", "foxes.core.Data.add", "foxes.core.Data.from_points", "foxes.core.Data.n_points", "foxes.core.Data.n_states", "foxes.core.Data.n_turbines", "foxes.core.Data.states_i0", "foxes.core.DataCalcModel", "foxes.core.DataCalcModel.calculate", "foxes.core.DataCalcModel.run_calculation", "foxes.core.ExtendedStates", "foxes.core.ExtendedStates.__init__", "foxes.core.ExtendedStates.append", "foxes.core.ExtendedStates.calculate", "foxes.core.ExtendedStates.finalize", "foxes.core.ExtendedStates.index", "foxes.core.ExtendedStates.initialize", "foxes.core.ExtendedStates.output_point_vars", "foxes.core.ExtendedStates.size", "foxes.core.ExtendedStates.weights", "foxes.core.FarmController", "foxes.core.FarmController.__init__", "foxes.core.FarmController.calculate", "foxes.core.FarmController.collect_models", "foxes.core.FarmController.finalize", "foxes.core.FarmController.initialize", "foxes.core.FarmController.keep", "foxes.core.FarmController.output_farm_vars", "foxes.core.FarmController.set_pars", "foxes.core.FarmDataModel", "foxes.core.FarmDataModel.__init__", "foxes.core.FarmDataModel.calculate", "foxes.core.FarmDataModel.output_farm_vars", "foxes.core.FarmDataModel.run_calculation", "foxes.core.FarmDataModelList", "foxes.core.FarmDataModelList.__init__", "foxes.core.FarmDataModelList.append", "foxes.core.FarmDataModelList.calculate", "foxes.core.FarmDataModelList.finalize", "foxes.core.FarmDataModelList.initialize", "foxes.core.FarmDataModelList.keep", "foxes.core.FarmDataModelList.output_farm_vars", "foxes.core.FarmModel", "foxes.core.Model", "foxes.core.Model.__init__", "foxes.core.Model.__repr__", "foxes.core.Model.data_to_store", "foxes.core.Model.finalize", "foxes.core.Model.from_data_or_store", "foxes.core.Model.get_data", "foxes.core.Model.initialize", "foxes.core.Model.initialized", "foxes.core.Model.keep", "foxes.core.Model.model_id", "foxes.core.Model.reduce_states", "foxes.core.Model.var", "foxes.core.PartialWakesModel", "foxes.core.PartialWakesModel.__init__", "foxes.core.PartialWakesModel.contribute_to_wake_deltas", "foxes.core.PartialWakesModel.evaluate_results", "foxes.core.PartialWakesModel.initialize", "foxes.core.PartialWakesModel.keep", "foxes.core.PartialWakesModel.new", "foxes.core.PartialWakesModel.new_wake_deltas", "foxes.core.PointDataModel", "foxes.core.PointDataModel.calculate", "foxes.core.PointDataModel.output_point_vars", "foxes.core.PointDataModel.run_calculation", "foxes.core.PointDataModelList", "foxes.core.PointDataModelList.__init__", "foxes.core.PointDataModelList.append", "foxes.core.PointDataModelList.calculate", "foxes.core.PointDataModelList.finalize", "foxes.core.PointDataModelList.initialize", "foxes.core.PointDataModelList.keep", "foxes.core.PointDataModelList.output_point_vars", "foxes.core.RotorModel", "foxes.core.RotorModel.__init__", "foxes.core.RotorModel.calculate", "foxes.core.RotorModel.design_points", "foxes.core.RotorModel.eval_rpoint_results", "foxes.core.RotorModel.get_rotor_points", "foxes.core.RotorModel.n_rotor_points", "foxes.core.RotorModel.output_farm_vars", "foxes.core.RotorModel.rotor_point_weights", "foxes.core.States", "foxes.core.States.index", "foxes.core.States.output_point_vars", "foxes.core.States.size", "foxes.core.States.weights", "foxes.core.Turbine", "foxes.core.Turbine.__init__", "foxes.core.Turbine.add_model", "foxes.core.Turbine.insert_model", "foxes.core.TurbineModel", "foxes.core.TurbineModel.calculate", "foxes.core.TurbineType", "foxes.core.TurbineType.__init__", "foxes.core.VerticalProfile", "foxes.core.VerticalProfile.calculate", "foxes.core.VerticalProfile.input_vars", "foxes.core.VerticalProfile.new", "foxes.core.WakeFrame", "foxes.core.WakeFrame.calc_centreline_integral", "foxes.core.WakeFrame.calc_order", "foxes.core.WakeFrame.get_centreline_points", "foxes.core.WakeFrame.get_wake_coos", "foxes.core.WakeModel", "foxes.core.WakeModel.contribute_to_wake_deltas", "foxes.core.WakeModel.finalize_wake_deltas", "foxes.core.WakeModel.init_wake_deltas", "foxes.core.WakeSuperposition", "foxes.core.WakeSuperposition.calc_final_wake_delta", "foxes.core.WakeSuperposition.calc_wakes_plus_wake", "foxes.core.WindFarm", "foxes.core.WindFarm.__init__", "foxes.core.WindFarm.add_turbine", "foxes.core.WindFarm.n_turbines", "foxes.core.WindFarm.turbine_names", "foxes.data.StaticData", "foxes.data.StaticData.__init__", "foxes.data.parse_Pct_file_name", "foxes.data.parse_Pct_two_files", "foxes.constants.AMB_RPOINT_RESULTS", "foxes.constants.DTYPE", "foxes.constants.DTYPE.T", "foxes.constants.DTYPE.__abs__", "foxes.constants.DTYPE.__add__", "foxes.constants.DTYPE.__and__", "foxes.constants.DTYPE.__array__", "foxes.constants.DTYPE.__array_interface__", "foxes.constants.DTYPE.__array_priority__", "foxes.constants.DTYPE.__array_struct__", "foxes.constants.DTYPE.__array_wrap__", "foxes.constants.DTYPE.__bool__", "foxes.constants.DTYPE.__class_getitem__", "foxes.constants.DTYPE.__divmod__", "foxes.constants.DTYPE.__eq__", "foxes.constants.DTYPE.__float__", "foxes.constants.DTYPE.__floordiv__", "foxes.constants.DTYPE.__format__", "foxes.constants.DTYPE.__ge__", "foxes.constants.DTYPE.__getitem__", "foxes.constants.DTYPE.__gt__", "foxes.constants.DTYPE.__hash__", "foxes.constants.DTYPE.__int__", "foxes.constants.DTYPE.__invert__", "foxes.constants.DTYPE.__le__", "foxes.constants.DTYPE.__lshift__", "foxes.constants.DTYPE.__lt__", "foxes.constants.DTYPE.__mod__", "foxes.constants.DTYPE.__mul__", "foxes.constants.DTYPE.__ne__", "foxes.constants.DTYPE.__neg__", "foxes.constants.DTYPE.__new__", "foxes.constants.DTYPE.__or__", "foxes.constants.DTYPE.__pos__", "foxes.constants.DTYPE.__pow__", "foxes.constants.DTYPE.__radd__", "foxes.constants.DTYPE.__rand__", "foxes.constants.DTYPE.__rdivmod__", "foxes.constants.DTYPE.__reduce__", "foxes.constants.DTYPE.__repr__", "foxes.constants.DTYPE.__rfloordiv__", "foxes.constants.DTYPE.__rlshift__", "foxes.constants.DTYPE.__rmod__", "foxes.constants.DTYPE.__rmul__", "foxes.constants.DTYPE.__ror__", "foxes.constants.DTYPE.__rpow__", "foxes.constants.DTYPE.__rrshift__", "foxes.constants.DTYPE.__rshift__", "foxes.constants.DTYPE.__rsub__", "foxes.constants.DTYPE.__rtruediv__", "foxes.constants.DTYPE.__rxor__", "foxes.constants.DTYPE.__sizeof__", "foxes.constants.DTYPE.__str__", "foxes.constants.DTYPE.__sub__", "foxes.constants.DTYPE.__truediv__", "foxes.constants.DTYPE.__xor__", "foxes.constants.DTYPE.all", "foxes.constants.DTYPE.any", "foxes.constants.DTYPE.argmax", "foxes.constants.DTYPE.argmin", "foxes.constants.DTYPE.argsort", "foxes.constants.DTYPE.as_integer_ratio", "foxes.constants.DTYPE.astype", "foxes.constants.DTYPE.base", "foxes.constants.DTYPE.byteswap", "foxes.constants.DTYPE.choose", "foxes.constants.DTYPE.clip", "foxes.constants.DTYPE.compress", "foxes.constants.DTYPE.conj", "foxes.constants.DTYPE.conjugate", "foxes.constants.DTYPE.copy", "foxes.constants.DTYPE.cumprod", "foxes.constants.DTYPE.cumsum", "foxes.constants.DTYPE.data", "foxes.constants.DTYPE.diagonal", "foxes.constants.DTYPE.dtype", "foxes.constants.DTYPE.dump", "foxes.constants.DTYPE.dumps", "foxes.constants.DTYPE.fill", "foxes.constants.DTYPE.flags", "foxes.constants.DTYPE.flat", "foxes.constants.DTYPE.flatten", "foxes.constants.DTYPE.getfield", "foxes.constants.DTYPE.imag", "foxes.constants.DTYPE.is_integer", "foxes.constants.DTYPE.item", "foxes.constants.DTYPE.itemset", "foxes.constants.DTYPE.itemsize", "foxes.constants.DTYPE.max", "foxes.constants.DTYPE.mean", "foxes.constants.DTYPE.min", "foxes.constants.DTYPE.nbytes", "foxes.constants.DTYPE.ndim", "foxes.constants.DTYPE.newbyteorder", "foxes.constants.DTYPE.nonzero", "foxes.constants.DTYPE.prod", "foxes.constants.DTYPE.ptp", "foxes.constants.DTYPE.put", "foxes.constants.DTYPE.ravel", "foxes.constants.DTYPE.real", "foxes.constants.DTYPE.repeat", "foxes.constants.DTYPE.reshape", "foxes.constants.DTYPE.resize", "foxes.constants.DTYPE.round", "foxes.constants.DTYPE.searchsorted", "foxes.constants.DTYPE.setfield", "foxes.constants.DTYPE.setflags", "foxes.constants.DTYPE.shape", "foxes.constants.DTYPE.size", "foxes.constants.DTYPE.sort", "foxes.constants.DTYPE.squeeze", "foxes.constants.DTYPE.std", "foxes.constants.DTYPE.strides", "foxes.constants.DTYPE.sum", "foxes.constants.DTYPE.swapaxes", "foxes.constants.DTYPE.take", "foxes.constants.DTYPE.tobytes", "foxes.constants.DTYPE.tofile", "foxes.constants.DTYPE.tolist", "foxes.constants.DTYPE.tostring", "foxes.constants.DTYPE.trace", "foxes.constants.DTYPE.transpose", "foxes.constants.DTYPE.var", "foxes.constants.DTYPE.view", "foxes.constants.FARM", "foxes.constants.GW", "foxes.constants.ITYPE", "foxes.constants.ITYPE.__abs__", "foxes.constants.ITYPE.__add__", "foxes.constants.ITYPE.__and__", "foxes.constants.ITYPE.__bool__", "foxes.constants.ITYPE.__class_getitem__", "foxes.constants.ITYPE.__divmod__", "foxes.constants.ITYPE.__eq__", "foxes.constants.ITYPE.__float__", "foxes.constants.ITYPE.__floordiv__", "foxes.constants.ITYPE.__ge__", "foxes.constants.ITYPE.__gt__", "foxes.constants.ITYPE.__hash__", "foxes.constants.ITYPE.__index__", "foxes.constants.ITYPE.__int__", "foxes.constants.ITYPE.__invert__", "foxes.constants.ITYPE.__le__", "foxes.constants.ITYPE.__lshift__", "foxes.constants.ITYPE.__lt__", "foxes.constants.ITYPE.__mod__", "foxes.constants.ITYPE.__mul__", "foxes.constants.ITYPE.__ne__", "foxes.constants.ITYPE.__neg__", "foxes.constants.ITYPE.__new__", "foxes.constants.ITYPE.__or__", "foxes.constants.ITYPE.__pos__", "foxes.constants.ITYPE.__pow__", "foxes.constants.ITYPE.__radd__", "foxes.constants.ITYPE.__rand__", "foxes.constants.ITYPE.__rdivmod__", "foxes.constants.ITYPE.__repr__", "foxes.constants.ITYPE.__rfloordiv__", "foxes.constants.ITYPE.__rlshift__", "foxes.constants.ITYPE.__rmod__", "foxes.constants.ITYPE.__rmul__", "foxes.constants.ITYPE.__ror__", "foxes.constants.ITYPE.__rpow__", "foxes.constants.ITYPE.__rrshift__", "foxes.constants.ITYPE.__rshift__", "foxes.constants.ITYPE.__rsub__", "foxes.constants.ITYPE.__rtruediv__", "foxes.constants.ITYPE.__rxor__", "foxes.constants.ITYPE.__str__", "foxes.constants.ITYPE.__sub__", "foxes.constants.ITYPE.__truediv__", "foxes.constants.ITYPE.__xor__", "foxes.constants.ITYPE.bit_count", "foxes.constants.ITYPE.denominator", "foxes.constants.ITYPE.is_integer", "foxes.constants.ITYPE.numerator", "foxes.constants.KAPPA", "foxes.constants.MW", "foxes.constants.POINT", "foxes.constants.POINTS", "foxes.constants.POP", "foxes.constants.P_UNITS", "foxes.constants.RPOINT", "foxes.constants.RPOINTS", "foxes.constants.RWEIGHTS", "foxes.constants.STATE", "foxes.constants.STATES_SEL", "foxes.constants.STATE_POINT", "foxes.constants.STATE_SOURCE_TURBINE", "foxes.constants.STATE_TURBINE", "foxes.constants.TMODELS", "foxes.constants.TMODEL_SELS", "foxes.constants.TNAME", "foxes.constants.TURBINE", "foxes.constants.TW", "foxes.constants.VALID", "foxes.constants.VARS", "foxes.constants.W", "foxes.constants.XYH", "foxes.constants.kW", "foxes.variables.AMB_CAP", "foxes.variables.AMB_CT", "foxes.variables.AMB_P", "foxes.variables.AMB_REWS", "foxes.variables.AMB_REWS2", "foxes.variables.AMB_REWS3", "foxes.variables.AMB_RHO", "foxes.variables.AMB_T", "foxes.variables.AMB_TI", "foxes.variables.AMB_WD", "foxes.variables.AMB_WS", "foxes.variables.AMB_YAW", "foxes.variables.AMB_YAWM", "foxes.variables.AMB_YLD", "foxes.variables.CAP", "foxes.variables.CT", "foxes.variables.D", "foxes.variables.EFF", "foxes.variables.H", "foxes.variables.K", "foxes.variables.KB", "foxes.variables.KTI", "foxes.variables.MAX_P", "foxes.variables.MOL", "foxes.variables.ORDER", "foxes.variables.P", "foxes.variables.PA_ALPHA", "foxes.variables.PA_BETA", "foxes.variables.REWS", "foxes.variables.REWS2", "foxes.variables.REWS3", "foxes.variables.RHO", "foxes.variables.SHEAR", "foxes.variables.T", "foxes.variables.TI", "foxes.variables.TXYH", "foxes.variables.WD", "foxes.variables.WEIGHT", "foxes.variables.WS", "foxes.variables.X", "foxes.variables.Y", "foxes.variables.YAW", "foxes.variables.YAWM", "foxes.variables.YLD", "foxes.variables.Z0", "foxes.variables.amb2var", "foxes.variables.var2amb", "foxes.input.farm_layout.add_from_csv", "foxes.input.farm_layout.add_from_df", "foxes.input.farm_layout.add_from_file", "foxes.input.farm_layout.add_from_json", "foxes.input.farm_layout.add_grid", "foxes.input.farm_layout.add_row", "foxes.input.states.FieldDataNC", "foxes.input.states.FieldDataNC.__init__", "foxes.input.states.FieldDataNC.calculate", "foxes.input.states.FieldDataNC.index", "foxes.input.states.FieldDataNC.initialize", "foxes.input.states.FieldDataNC.output_point_vars", "foxes.input.states.FieldDataNC.size", "foxes.input.states.FieldDataNC.weights", "foxes.input.states.MultiHeightStates", "foxes.input.states.MultiHeightStates.RDICT", "foxes.input.states.MultiHeightStates.__init__", "foxes.input.states.MultiHeightStates.calculate", "foxes.input.states.MultiHeightStates.finalize", "foxes.input.states.MultiHeightStates.index", "foxes.input.states.MultiHeightStates.initialize", "foxes.input.states.MultiHeightStates.output_point_vars", "foxes.input.states.MultiHeightStates.reset", "foxes.input.states.MultiHeightStates.size", "foxes.input.states.MultiHeightStates.weights", "foxes.input.states.MultiHeightTimeseries", "foxes.input.states.MultiHeightTimeseries.RDICT", "foxes.input.states.ScanWS", "foxes.input.states.ScanWS.__init__", "foxes.input.states.ScanWS.calculate", "foxes.input.states.ScanWS.initialize", "foxes.input.states.ScanWS.output_point_vars", "foxes.input.states.ScanWS.size", "foxes.input.states.ScanWS.weights", "foxes.input.states.SingleStateStates", "foxes.input.states.SingleStateStates.__init__", "foxes.input.states.SingleStateStates.calculate", "foxes.input.states.SingleStateStates.initialize", "foxes.input.states.SingleStateStates.output_point_vars", "foxes.input.states.SingleStateStates.size", "foxes.input.states.SingleStateStates.weights", "foxes.input.states.StatesTable", "foxes.input.states.StatesTable.RDICT", "foxes.input.states.StatesTable.__init__", "foxes.input.states.StatesTable.calculate", "foxes.input.states.StatesTable.finalize", "foxes.input.states.StatesTable.index", "foxes.input.states.StatesTable.initialize", "foxes.input.states.StatesTable.output_point_vars", "foxes.input.states.StatesTable.reset", "foxes.input.states.StatesTable.size", "foxes.input.states.StatesTable.weights", "foxes.input.states.Timeseries", "foxes.input.states.Timeseries.RDICT", "foxes.input.states.create_random_abl_states", "foxes.input.windio.read_case", "foxes.models.farm_controllers.BasicFarmController", "foxes.models.farm_models.Turbine2FarmModel", "foxes.models.farm_models.Turbine2FarmModel.__init__", "foxes.models.farm_models.Turbine2FarmModel.__repr__", "foxes.models.farm_models.Turbine2FarmModel.calculate", "foxes.models.farm_models.Turbine2FarmModel.finalize", "foxes.models.farm_models.Turbine2FarmModel.initialize", "foxes.models.farm_models.Turbine2FarmModel.output_farm_vars", "foxes.models.model_book.Dict", "foxes.models.model_book.Dict.__getitem__", "foxes.models.model_book.Dict.__init__", "foxes.models.model_book.ModelBook", "foxes.models.model_book.ModelBook.__getitem__", "foxes.models.model_book.ModelBook.__init__", "foxes.models.model_book.ModelBook.finalize", "foxes.models.model_book.ModelBook.print_toc", "foxes.models.partial_wakes.Mapped", "foxes.models.partial_wakes.Mapped.__init__", "foxes.models.partial_wakes.Mapped.contribute_to_wake_deltas", "foxes.models.partial_wakes.Mapped.evaluate_results", "foxes.models.partial_wakes.Mapped.finalize", "foxes.models.partial_wakes.Mapped.initialize", "foxes.models.partial_wakes.Mapped.keep", "foxes.models.partial_wakes.Mapped.new_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake", "foxes.models.partial_wakes.PartialAxiwake.__init__", "foxes.models.partial_wakes.PartialAxiwake.__repr__", "foxes.models.partial_wakes.PartialAxiwake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake.evaluate_results", "foxes.models.partial_wakes.PartialAxiwake.finalize", "foxes.models.partial_wakes.PartialAxiwake.initialize", "foxes.models.partial_wakes.PartialAxiwake.keep", "foxes.models.partial_wakes.PartialAxiwake.new_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake", "foxes.models.partial_wakes.PartialDistSlicedWake.__init__", "foxes.models.partial_wakes.PartialDistSlicedWake.__repr__", "foxes.models.partial_wakes.PartialDistSlicedWake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake.evaluate_results", "foxes.models.partial_wakes.PartialDistSlicedWake.finalize", "foxes.models.partial_wakes.PartialDistSlicedWake.initialize", "foxes.models.partial_wakes.PartialDistSlicedWake.keep", "foxes.models.partial_wakes.PartialDistSlicedWake.new_wake_deltas", "foxes.models.partial_wakes.PartialGrid", "foxes.models.partial_wakes.PartialGrid.__init__", "foxes.models.partial_wakes.PartialGrid.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat", "foxes.models.partial_wakes.PartialTopHat.__init__", "foxes.models.partial_wakes.PartialTopHat.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat.evaluate_results", "foxes.models.partial_wakes.PartialTopHat.finalize", "foxes.models.partial_wakes.PartialTopHat.initialize", "foxes.models.partial_wakes.PartialTopHat.keep", "foxes.models.partial_wakes.PartialTopHat.new_wake_deltas", "foxes.models.partial_wakes.RotorPoints", "foxes.models.partial_wakes.RotorPoints.__init__", "foxes.models.partial_wakes.RotorPoints.contribute_to_wake_deltas", "foxes.models.partial_wakes.RotorPoints.evaluate_results", "foxes.models.partial_wakes.RotorPoints.get_wake_points", "foxes.models.partial_wakes.RotorPoints.new_wake_deltas", "foxes.models.point_models.SetUniformData", "foxes.models.point_models.SetUniformData.__init__", "foxes.models.point_models.SetUniformData.calculate", "foxes.models.point_models.SetUniformData.initialize", "foxes.models.point_models.SetUniformData.output_point_vars", "foxes.models.point_models.TKE2TI", "foxes.models.point_models.TKE2TI.calculate", "foxes.models.point_models.TKE2TI.output_point_vars", "foxes.models.point_models.WakeDeltas", "foxes.models.point_models.WakeDeltas.__init__", "foxes.models.point_models.WakeDeltas.calculate", "foxes.models.point_models.WakeDeltas.output_point_vars", "foxes.models.rotor_models.CentreRotor", "foxes.models.rotor_models.CentreRotor.design_points", "foxes.models.rotor_models.CentreRotor.eval_rpoint_results", "foxes.models.rotor_models.CentreRotor.get_rotor_points", "foxes.models.rotor_models.CentreRotor.n_rotor_points", "foxes.models.rotor_models.CentreRotor.rotor_point_weights", "foxes.models.rotor_models.GridRotor", "foxes.models.rotor_models.GridRotor.__init__", "foxes.models.rotor_models.GridRotor.__repr__", "foxes.models.rotor_models.GridRotor.design_points", "foxes.models.rotor_models.GridRotor.initialize", "foxes.models.rotor_models.GridRotor.n_rotor_points", "foxes.models.rotor_models.GridRotor.rotor_point_weights", "foxes.models.turbine_models.Calculator", "foxes.models.turbine_models.Calculator.__init__", "foxes.models.turbine_models.Calculator.calculate", "foxes.models.turbine_models.Calculator.output_farm_vars", "foxes.models.turbine_models.LookupTable", "foxes.models.turbine_models.LookupTable.__init__", "foxes.models.turbine_models.LookupTable.calculate", "foxes.models.turbine_models.LookupTable.initialize", "foxes.models.turbine_models.LookupTable.output_farm_vars", "foxes.models.turbine_models.PowerMask", "foxes.models.turbine_models.PowerMask.__init__", "foxes.models.turbine_models.PowerMask.calculate", "foxes.models.turbine_models.PowerMask.initialize", "foxes.models.turbine_models.PowerMask.output_farm_vars", "foxes.models.turbine_models.PowerMask.update_P_ct", "foxes.models.turbine_models.RotorCentreCalc", "foxes.models.turbine_models.RotorCentreCalc.__init__", "foxes.models.turbine_models.RotorCentreCalc.calculate", "foxes.models.turbine_models.RotorCentreCalc.finalize", "foxes.models.turbine_models.RotorCentreCalc.initialize", "foxes.models.turbine_models.RotorCentreCalc.output_farm_vars", "foxes.models.turbine_models.SectorManagement", "foxes.models.turbine_models.SectorManagement.__init__", "foxes.models.turbine_models.SectorManagement.calculate", "foxes.models.turbine_models.SectorManagement.initialize", "foxes.models.turbine_models.SectorManagement.output_farm_vars", "foxes.models.turbine_models.SetFarmVars", "foxes.models.turbine_models.SetFarmVars.__init__", "foxes.models.turbine_models.SetFarmVars.add_var", "foxes.models.turbine_models.SetFarmVars.calculate", "foxes.models.turbine_models.SetFarmVars.initialize", "foxes.models.turbine_models.SetFarmVars.output_farm_vars", "foxes.models.turbine_models.SetFarmVars.reset", "foxes.models.turbine_models.SetXYHD", "foxes.models.turbine_models.SetXYHD.__init__", "foxes.models.turbine_models.SetXYHD.calculate", "foxes.models.turbine_models.SetXYHD.output_farm_vars", "foxes.models.turbine_models.TableFactors", "foxes.models.turbine_models.TableFactors.__init__", "foxes.models.turbine_models.TableFactors.calculate", "foxes.models.turbine_models.TableFactors.initialize", "foxes.models.turbine_models.TableFactors.output_farm_vars", "foxes.models.turbine_models.Thrust2Ct", "foxes.models.turbine_models.Thrust2Ct.__init__", "foxes.models.turbine_models.Thrust2Ct.calculate", "foxes.models.turbine_models.Thrust2Ct.output_farm_vars", "foxes.models.turbine_models.YAW2YAWM", "foxes.models.turbine_models.YAW2YAWM.calculate", "foxes.models.turbine_models.YAW2YAWM.output_farm_vars", "foxes.models.turbine_models.YAWM2YAW", "foxes.models.turbine_models.YAWM2YAW.calculate", "foxes.models.turbine_models.YAWM2YAW.output_farm_vars", "foxes.models.turbine_models.kTI", "foxes.models.turbine_models.kTI.__init__", "foxes.models.turbine_models.kTI.__repr__", "foxes.models.turbine_models.kTI.calculate", "foxes.models.turbine_models.kTI.output_farm_vars", "foxes.models.turbine_types.CpCtFile", "foxes.models.turbine_types.CpCtFile.__init__", "foxes.models.turbine_types.CpCtFromTwo", "foxes.models.turbine_types.CpCtFromTwo.__init__", "foxes.models.turbine_types.NullType", "foxes.models.turbine_types.NullType.calculate", "foxes.models.turbine_types.NullType.output_farm_vars", "foxes.models.turbine_types.PCtFile", "foxes.models.turbine_types.PCtFile.__init__", "foxes.models.turbine_types.PCtFile.calculate", "foxes.models.turbine_types.PCtFile.finalize", "foxes.models.turbine_types.PCtFile.initialize", "foxes.models.turbine_types.PCtFile.output_farm_vars", "foxes.models.turbine_types.PCtFromTwo", "foxes.models.turbine_types.PCtFromTwo.__init__", "foxes.models.turbine_types.PCtFromTwo.calculate", "foxes.models.turbine_types.PCtFromTwo.finalize", "foxes.models.turbine_types.PCtFromTwo.initialize", "foxes.models.turbine_types.PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsRho2PCtFromTwo", "foxes.models.turbine_types.WsRho2PCtFromTwo.__init__", "foxes.models.turbine_types.WsRho2PCtFromTwo.calculate", "foxes.models.turbine_types.WsRho2PCtFromTwo.finalize", "foxes.models.turbine_types.WsRho2PCtFromTwo.initialize", "foxes.models.turbine_types.WsRho2PCtFromTwo.output_farm_vars", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogStableWsProfile", "foxes.models.vertical_profiles.ABLLogStableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogStableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogWsProfile", "foxes.models.vertical_profiles.ABLLogWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogWsProfile.input_vars", "foxes.models.vertical_profiles.ShearedProfile", "foxes.models.vertical_profiles.ShearedProfile.calculate", "foxes.models.vertical_profiles.ShearedProfile.input_vars", "foxes.models.vertical_profiles.UniformProfile", "foxes.models.vertical_profiles.UniformProfile.__init__", "foxes.models.vertical_profiles.UniformProfile.calculate", "foxes.models.vertical_profiles.UniformProfile.input_vars", "foxes.models.wake_frames.FarmOrder", "foxes.models.wake_frames.FarmOrder.__init__", "foxes.models.wake_frames.FarmOrder.calc_order", "foxes.models.wake_frames.FarmOrder.finalize", "foxes.models.wake_frames.FarmOrder.get_centreline_points", "foxes.models.wake_frames.FarmOrder.get_wake_coos", "foxes.models.wake_frames.FarmOrder.initialize", "foxes.models.wake_frames.RotorWD", "foxes.models.wake_frames.RotorWD.__init__", "foxes.models.wake_frames.RotorWD.calc_order", "foxes.models.wake_frames.RotorWD.get_centreline_points", "foxes.models.wake_frames.RotorWD.get_wake_coos", "foxes.models.wake_frames.Streamlines", "foxes.models.wake_frames.Streamlines.__init__", "foxes.models.wake_frames.Streamlines.__repr__", "foxes.models.wake_frames.Streamlines.calc_order", "foxes.models.wake_frames.Streamlines.get_centreline_points", "foxes.models.wake_frames.Streamlines.get_wake_coos", "foxes.models.wake_frames.Streamlines.initialize", "foxes.models.wake_frames.Timelines", "foxes.models.wake_frames.Timelines.__init__", "foxes.models.wake_frames.Timelines.calc_order", "foxes.models.wake_frames.Timelines.get_centreline_points", "foxes.models.wake_frames.Timelines.get_wake_coos", "foxes.models.wake_frames.Timelines.initialize", "foxes.models.wake_frames.YawedWakes", "foxes.models.wake_frames.YawedWakes.__init__", "foxes.models.wake_frames.YawedWakes.calc_order", "foxes.models.wake_frames.YawedWakes.finalize", "foxes.models.wake_frames.YawedWakes.get_centreline_points", "foxes.models.wake_frames.YawedWakes.get_wake_coos", "foxes.models.wake_frames.YawedWakes.initialize", "foxes.models.wake_models.AxisymmetricWakeModel", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel", "foxes.models.wake_models.DistSlicedWakeModel.__init__", "foxes.models.wake_models.DistSlicedWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel.contribute_to_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.finalize", "foxes.models.wake_models.DistSlicedWakeModel.finalize_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.initialize", "foxes.models.wake_models.DistSlicedWakeModel.keep", "foxes.models.wake_models.GaussianWakeModel", "foxes.models.wake_models.GaussianWakeModel.calc_amplitude_sigma_spsel", "foxes.models.wake_models.GaussianWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.TopHatWakeModel", "foxes.models.wake_models.TopHatWakeModel.__init__", "foxes.models.wake_models.TopHatWakeModel.calc_centreline_wake_deltas", "foxes.models.wake_models.TopHatWakeModel.calc_wake_radius", "foxes.models.wake_models.TopHatWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.ti.CrespoHernandezTIWake", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__init__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__repr__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_wake_radius", "foxes.models.wake_models.ti.CrespoHernandezTIWake.init_wake_deltas", "foxes.models.wake_models.ti.IECTIWake", "foxes.models.wake_models.ti.IECTIWake.__init__", "foxes.models.wake_models.ti.IECTIWake.__repr__", "foxes.models.wake_models.ti.IECTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.IECTIWake.calc_wake_radius", "foxes.models.wake_models.ti.IECTIWake.init_wake_deltas", "foxes.models.wake_models.wind.BastankhahWake", "foxes.models.wake_models.wind.BastankhahWake.__init__", "foxes.models.wake_models.wind.BastankhahWake.__repr__", "foxes.models.wake_models.wind.BastankhahWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.BastankhahWake.init_wake_deltas", "foxes.models.wake_models.wind.JensenWake", "foxes.models.wake_models.wind.JensenWake.__init__", "foxes.models.wake_models.wind.JensenWake.__repr__", "foxes.models.wake_models.wind.JensenWake.calc_centreline_wake_deltas", "foxes.models.wake_models.wind.JensenWake.calc_wake_radius", "foxes.models.wake_models.wind.JensenWake.init_wake_deltas", "foxes.models.wake_models.wind.PorteAgelModel", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_FAR", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.CHECK", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_FAR", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.MDATA_KEY", "foxes.models.wake_models.wind.PorteAgelModel.NEAR", "foxes.models.wake_models.wind.PorteAgelModel.PARS", "foxes.models.wake_models.wind.PorteAgelModel.R_PC", "foxes.models.wake_models.wind.PorteAgelModel.R_PC_S", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Y_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Z_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SP_SEL", "foxes.models.wake_models.wind.PorteAgelModel.X0", "foxes.models.wake_models.wind.PorteAgelModel.__init__", "foxes.models.wake_models.wind.PorteAgelModel.calc_data", "foxes.models.wake_models.wind.PorteAgelModel.clean", "foxes.models.wake_models.wind.PorteAgelModel.get_data", "foxes.models.wake_models.wind.PorteAgelModel.has_data", "foxes.models.wake_models.wind.PorteAgelModel.pars", "foxes.models.wake_models.wind.PorteAgelWake", "foxes.models.wake_models.wind.PorteAgelWake.__init__", "foxes.models.wake_models.wind.PorteAgelWake.__repr__", "foxes.models.wake_models.wind.PorteAgelWake.calc_wakes_spsel_x_yz", "foxes.models.wake_models.wind.PorteAgelWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWake", "foxes.models.wake_models.wind.TurbOParkWake.__init__", "foxes.models.wake_models.wind.TurbOParkWake.__repr__", "foxes.models.wake_models.wind.TurbOParkWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWakeIX", "foxes.models.wake_models.wind.TurbOParkWakeIX.__init__", "foxes.models.wake_models.wind.TurbOParkWakeIX.__repr__", "foxes.models.wake_models.wind.TurbOParkWakeIX.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWakeIX.finalize", "foxes.models.wake_models.wind.TurbOParkWakeIX.init_wake_deltas", "foxes.models.wake_superpositions.LinearSuperposition", "foxes.models.wake_superpositions.LinearSuperposition.__init__", "foxes.models.wake_superpositions.LinearSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.LinearSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.LinearSuperposition.input_farm_vars", "foxes.models.wake_superpositions.MaxSuperposition", "foxes.models.wake_superpositions.MaxSuperposition.__init__", "foxes.models.wake_superpositions.MaxSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.MaxSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.MaxSuperposition.initialize", "foxes.models.wake_superpositions.MaxSuperposition.input_farm_vars", "foxes.models.wake_superpositions.ProductSuperposition", "foxes.models.wake_superpositions.ProductSuperposition.__init__", "foxes.models.wake_superpositions.ProductSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.ProductSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition", "foxes.models.wake_superpositions.QuadraticSuperposition.__init__", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition.initialize", "foxes.models.wake_superpositions.QuadraticSuperposition.input_farm_vars", "foxes.models.wake_superpositions.TISuperposition", "foxes.models.wake_superpositions.TISuperposition.__init__", "foxes.models.wake_superpositions.TISuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.TISuperposition.calc_wakes_plus_wake", "foxes.output.Animator", "foxes.output.Animator.__init__", "foxes.output.Animator.add_generator", "foxes.output.Animator.animate", "foxes.output.Animator.generators", "foxes.output.FarmLayoutOutput", "foxes.output.FarmLayoutOutput.__init__", "foxes.output.FarmLayoutOutput.get_figure", "foxes.output.FarmLayoutOutput.get_layout_data", "foxes.output.FarmLayoutOutput.get_layout_dict", "foxes.output.FarmLayoutOutput.write_csv", "foxes.output.FarmLayoutOutput.write_json", "foxes.output.FarmLayoutOutput.write_plot", "foxes.output.FarmLayoutOutput.write_xyh", "foxes.output.FarmResultsEval", "foxes.output.FarmResultsEval.__init__", "foxes.output.FarmResultsEval.add_capacity", "foxes.output.FarmResultsEval.add_efficiency", "foxes.output.FarmResultsEval.calc_farm_efficiency", "foxes.output.FarmResultsEval.calc_farm_mean", "foxes.output.FarmResultsEval.calc_farm_sum", "foxes.output.FarmResultsEval.calc_farm_yield", "foxes.output.FarmResultsEval.calc_mean_farm_power", "foxes.output.FarmResultsEval.calc_states_mean", "foxes.output.FarmResultsEval.calc_states_std", "foxes.output.FarmResultsEval.calc_states_sum", "foxes.output.FarmResultsEval.calc_turbine_mean", "foxes.output.FarmResultsEval.calc_turbine_sum", "foxes.output.FarmResultsEval.calc_turbine_yield", "foxes.output.FarmResultsEval.gen_stdata", "foxes.output.FarmResultsEval.reduce_all", "foxes.output.FarmResultsEval.reduce_states", "foxes.output.FarmResultsEval.reduce_turbines", "foxes.output.FarmResultsEval.weinsum", "foxes.output.FlowPlots2D", "foxes.output.FlowPlots2D.__init__", "foxes.output.FlowPlots2D.gen_states_fig_xy", "foxes.output.FlowPlots2D.gen_states_fig_xz", "foxes.output.FlowPlots2D.gen_states_fig_yz", "foxes.output.FlowPlots2D.get_mean_fig_xy", "foxes.output.FlowPlots2D.get_mean_fig_xz", "foxes.output.FlowPlots2D.get_mean_fig_yz", "foxes.output.Output", "foxes.output.Output.new", "foxes.output.Output.print_models", "foxes.output.Output.write", "foxes.output.ResultsWriter", "foxes.output.ResultsWriter.__init__", "foxes.output.ResultsWriter.write_csv", "foxes.output.RosePlotOutput", "foxes.output.RosePlotOutput.__init__", "foxes.output.RosePlotOutput.get_data", "foxes.output.RosePlotOutput.get_data_info", "foxes.output.RosePlotOutput.get_figure", "foxes.output.RosePlotOutput.write_figure", "foxes.output.StateTurbineMap", "foxes.output.StateTurbineMap.__init__", "foxes.output.StateTurbineMap.plot_map", "foxes.output.StatesRosePlotOutput", "foxes.output.StatesRosePlotOutput.__init__", "foxes.output.TurbineTypeCurves", "foxes.output.TurbineTypeCurves.__init__", "foxes.output.TurbineTypeCurves.plot_curves", "foxes.utils.DataBook", "foxes.utils.DataBook.__init__", "foxes.utils.DataBook.add_data_package", "foxes.utils.DataBook.add_data_package_file", "foxes.utils.DataBook.add_file", "foxes.utils.DataBook.add_files", "foxes.utils.DataBook.get_file_path", "foxes.utils.DataBook.toc", "foxes.utils.PandasFileHelper", "foxes.utils.PandasFileHelper.DATA_FILE_FORMATS", "foxes.utils.PandasFileHelper.DEFAULT_FORMAT_DICT", "foxes.utils.PandasFileHelper.DEFAULT_READING_PARAMETERS", "foxes.utils.PandasFileHelper.DEFAULT_WRITING_PARAMETERS", "foxes.utils.PandasFileHelper.read_file", "foxes.utils.PandasFileHelper.write_file", "foxes.utils.abl.neutral.calc_ws", "foxes.utils.abl.neutral.logz", "foxes.utils.abl.neutral.ustar", "foxes.utils.abl.sheared.calc_ws", "foxes.utils.abl.stable.calc_ws", "foxes.utils.abl.stable.lgz", "foxes.utils.abl.stable.logz", "foxes.utils.abl.stable.psi", "foxes.utils.abl.stable.ustar", "foxes.utils.abl.unstable.calc_ws", "foxes.utils.abl.unstable.logz", "foxes.utils.abl.unstable.psi", "foxes.utils.abl.unstable.ustar", "foxes.utils.all_subclasses", "foxes.utils.cubic_roots", "foxes.utils.delta_wd", "foxes.utils.geom2d.AreaGeometry", "foxes.utils.geom2d.AreaGeometry.add_to_figure", "foxes.utils.geom2d.AreaGeometry.inverse", "foxes.utils.geom2d.AreaGeometry.p_max", "foxes.utils.geom2d.AreaGeometry.p_min", "foxes.utils.geom2d.AreaGeometry.points_distance", "foxes.utils.geom2d.AreaGeometry.points_inside", "foxes.utils.geom2d.AreaIntersection", "foxes.utils.geom2d.AreaIntersection.__new__", "foxes.utils.geom2d.AreaUnion", "foxes.utils.geom2d.AreaUnion.__init__", "foxes.utils.geom2d.AreaUnion.add_to_figure", "foxes.utils.geom2d.AreaUnion.inverse", "foxes.utils.geom2d.AreaUnion.p_max", "foxes.utils.geom2d.AreaUnion.p_min", "foxes.utils.geom2d.AreaUnion.points_distance", "foxes.utils.geom2d.AreaUnion.points_inside", "foxes.utils.geom2d.Circle", "foxes.utils.geom2d.Circle.__init__", "foxes.utils.geom2d.Circle.add_to_figure", "foxes.utils.geom2d.Circle.p_max", "foxes.utils.geom2d.Circle.p_min", "foxes.utils.geom2d.Circle.points_distance", "foxes.utils.geom2d.Circle.points_inside", "foxes.utils.geom2d.ClosedPolygon", "foxes.utils.geom2d.ClosedPolygon.__init__", "foxes.utils.geom2d.ClosedPolygon.add_to_figure", "foxes.utils.geom2d.ClosedPolygon.p_max", "foxes.utils.geom2d.ClosedPolygon.p_min", "foxes.utils.geom2d.ClosedPolygon.points_distance", "foxes.utils.geom2d.ClosedPolygon.points_inside", "foxes.utils.geom2d.HalfPlane", "foxes.utils.geom2d.HalfPlane.__init__", "foxes.utils.geom2d.HalfPlane.add_to_figure", "foxes.utils.geom2d.HalfPlane.inverse", "foxes.utils.geom2d.HalfPlane.p_max", "foxes.utils.geom2d.HalfPlane.p_min", "foxes.utils.geom2d.HalfPlane.points_distance", "foxes.utils.geom2d.HalfPlane.points_inside", "foxes.utils.geom2d.InvertedAreaGeometry", "foxes.utils.geom2d.InvertedAreaGeometry.__init__", "foxes.utils.geom2d.InvertedAreaGeometry.add_to_figure", "foxes.utils.geom2d.InvertedAreaGeometry.inverse", "foxes.utils.geom2d.InvertedAreaGeometry.p_max", "foxes.utils.geom2d.InvertedAreaGeometry.p_min", "foxes.utils.geom2d.InvertedAreaGeometry.points_distance", "foxes.utils.geom2d.InvertedAreaGeometry.points_inside", "foxes.opt.constraints.AreaGeometryConstraint", "foxes.opt.constraints.AreaGeometryConstraint.__init__", "foxes.opt.constraints.AreaGeometryConstraint.__str__", "foxes.opt.constraints.AreaGeometryConstraint.ana_deriv", "foxes.opt.constraints.AreaGeometryConstraint.calc_individual", "foxes.opt.constraints.AreaGeometryConstraint.calc_population", "foxes.opt.constraints.AreaGeometryConstraint.component_names", "foxes.opt.constraints.AreaGeometryConstraint.finalize", "foxes.opt.constraints.AreaGeometryConstraint.finalize_individual", "foxes.opt.constraints.AreaGeometryConstraint.finalize_population", "foxes.opt.constraints.AreaGeometryConstraint.initialize", "foxes.opt.constraints.AreaGeometryConstraint.initialized", "foxes.opt.constraints.AreaGeometryConstraint.n_components", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.var_names_float", "foxes.opt.constraints.AreaGeometryConstraint.var_names_int", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_float", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_int", "foxes.opt.constraints.FarmBoundaryConstraint", "foxes.opt.constraints.FarmBoundaryConstraint.__init__", "foxes.opt.constraints.MinDistConstraint", "foxes.opt.constraints.MinDistConstraint.__init__", "foxes.opt.constraints.MinDistConstraint.calc_individual", "foxes.opt.constraints.MinDistConstraint.calc_population", "foxes.opt.constraints.MinDistConstraint.initialize", "foxes.opt.constraints.MinDistConstraint.n_components", "foxes.opt.constraints.MinDistConstraint.vardeps_float", "foxes.opt.core.FarmConstraint", "foxes.opt.core.FarmConstraint.__init__", "foxes.opt.core.FarmConstraint.add_to_layout_figure", "foxes.opt.core.FarmConstraint.calc_individual", "foxes.opt.core.FarmConstraint.calc_population", "foxes.opt.core.FarmConstraint.farm", "foxes.opt.core.FarmConstraint.n_components", "foxes.opt.core.FarmConstraint.n_sel_turbines", "foxes.opt.core.FarmConstraint.print_models", "foxes.opt.core.FarmConstraint.sel_turbines", "foxes.opt.core.FarmConstraint.vardeps_float", "foxes.opt.core.FarmObjective", "foxes.opt.core.FarmObjective.__init__", "foxes.opt.core.FarmObjective.add_to_layout_figure", "foxes.opt.core.FarmObjective.farm", "foxes.opt.core.FarmObjective.n_sel_turbines", "foxes.opt.core.FarmObjective.print_models", "foxes.opt.core.FarmObjective.sel_turbines", "foxes.opt.core.FarmOptProblem", "foxes.opt.core.FarmOptProblem.INT_INF", "foxes.opt.core.FarmOptProblem.__init__", "foxes.opt.core.FarmOptProblem.add_constraint", "foxes.opt.core.FarmOptProblem.add_objective", "foxes.opt.core.FarmOptProblem.add_to_layout_figure", "foxes.opt.core.FarmOptProblem.all_turbines", "foxes.opt.core.FarmOptProblem.apply_individual", "foxes.opt.core.FarmOptProblem.apply_population", "foxes.opt.core.FarmOptProblem.calc_gradients", "foxes.opt.core.FarmOptProblem.check_constraints_individual", "foxes.opt.core.FarmOptProblem.check_constraints_population", "foxes.opt.core.FarmOptProblem.constraints_tol", "foxes.opt.core.FarmOptProblem.counter", "foxes.opt.core.FarmOptProblem.evaluate_individual", "foxes.opt.core.FarmOptProblem.evaluate_population", "foxes.opt.core.FarmOptProblem.farm", "foxes.opt.core.FarmOptProblem.finalize_individual", "foxes.opt.core.FarmOptProblem.finalize_population", "foxes.opt.core.FarmOptProblem.get_gradients", "foxes.opt.core.FarmOptProblem.initial_values_float", "foxes.opt.core.FarmOptProblem.initial_values_int", "foxes.opt.core.FarmOptProblem.initialize", "foxes.opt.core.FarmOptProblem.max_values_constraints", "foxes.opt.core.FarmOptProblem.max_values_float", "foxes.opt.core.FarmOptProblem.max_values_int", "foxes.opt.core.FarmOptProblem.maximize_objs", "foxes.opt.core.FarmOptProblem.min_values_constraints", "foxes.opt.core.FarmOptProblem.min_values_float", "foxes.opt.core.FarmOptProblem.min_values_int", "foxes.opt.core.FarmOptProblem.n_constraints", "foxes.opt.core.FarmOptProblem.n_objectives", "foxes.opt.core.FarmOptProblem.n_sel_turbines", "foxes.opt.core.FarmOptProblem.n_vars_float", "foxes.opt.core.FarmOptProblem.n_vars_int", "foxes.opt.core.FarmOptProblem.parse_tvar", "foxes.opt.core.FarmOptProblem.sel_turbines", "foxes.opt.core.FarmOptProblem.tvar", "foxes.opt.core.FarmOptProblem.update_problem_individual", "foxes.opt.core.FarmOptProblem.update_problem_population", "foxes.opt.core.FarmOptProblem.var_names_float", "foxes.opt.core.FarmOptProblem.var_names_int", "foxes.opt.core.FarmVarsProblem", "foxes.opt.core.FarmVarsProblem.initialize", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_individual", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_population", "foxes.opt.core.FarmVarsProblem.update_problem_individual", "foxes.opt.core.FarmVarsProblem.update_problem_population", "foxes.opt.core.PopStates", "foxes.opt.core.PopStates.__init__", "foxes.opt.core.PopStates.calculate", "foxes.opt.core.PopStates.initialize", "foxes.opt.core.PopStates.output_point_vars", "foxes.opt.core.PopStates.size", "foxes.opt.core.PopStates.weights", "foxes.opt.objectives.FarmVarObjective", "foxes.opt.objectives.FarmVarObjective.__init__", "foxes.opt.objectives.FarmVarObjective.calc_individual", "foxes.opt.objectives.FarmVarObjective.calc_population", "foxes.opt.objectives.FarmVarObjective.finalize_individual", "foxes.opt.objectives.FarmVarObjective.initialize", "foxes.opt.objectives.FarmVarObjective.maximize", "foxes.opt.objectives.FarmVarObjective.n_components", "foxes.opt.objectives.FarmVarObjective.vardeps_float", "foxes.opt.objectives.MaxFarmPower", "foxes.opt.objectives.MaxFarmPower.__init__", "foxes.opt.objectives.MaxNTurbines", "foxes.opt.objectives.MaxNTurbines.__init__", "foxes.opt.objectives.MaxNTurbines.calc_individual", "foxes.opt.objectives.MaxNTurbines.calc_population", "foxes.opt.objectives.MaxNTurbines.maximize", "foxes.opt.objectives.MaxNTurbines.n_components", "foxes.opt.objectives.MinimalMaxTI", "foxes.opt.objectives.MinimalMaxTI.__init__", "foxes.opt.problems.OptFarmVars", "foxes.opt.problems.OptFarmVars.__init__", "foxes.opt.problems.OptFarmVars.add_var", "foxes.opt.problems.OptFarmVars.initial_values_float", "foxes.opt.problems.OptFarmVars.initial_values_int", "foxes.opt.problems.OptFarmVars.initialize", "foxes.opt.problems.OptFarmVars.max_values_float", "foxes.opt.problems.OptFarmVars.max_values_int", "foxes.opt.problems.OptFarmVars.min_values_float", "foxes.opt.problems.OptFarmVars.min_values_int", "foxes.opt.problems.OptFarmVars.opt2farm_vars_individual", "foxes.opt.problems.OptFarmVars.opt2farm_vars_population", "foxes.opt.problems.OptFarmVars.var_names_float", "foxes.opt.problems.OptFarmVars.var_names_int", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_population", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.get_bounds", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Valid", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.cdist", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.Objective", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.cdist", "foxes.opt.problems.layout.geom_layouts.GeomLayout", "foxes.opt.problems.layout.geom_layouts.GeomLayout.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayout.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayout.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.var_names_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_int", "foxes.opt.problems.layout.FarmLayoutOptProblem", "foxes.opt.problems.layout.FarmLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.initialize", "foxes.opt.problems.layout.FarmLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.FarmLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_int", "foxes.opt.problems.layout.RegularLayoutOptProblem", "foxes.opt.problems.layout.RegularLayoutOptProblem.ANGLE", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegularLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegularLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegularLayoutOptProblem.var_names_float", "foxes.utils.read_shp", "foxes.utils.read_shp_polygons", "foxes.utils.runners.DaskRunner", "foxes.utils.runners.DaskRunner.__init__", "foxes.utils.runners.DaskRunner.finalize", "foxes.utils.runners.DaskRunner.initialize", "foxes.utils.runners.DaskRunner.is_distributed", "foxes.utils.runners.DaskRunner.print", "foxes.utils.runners.DaskRunner.run", "foxes.utils.runners.DefaultRunner", "foxes.utils.runners.DefaultRunner.run", "foxes.utils.runners.Runner", "foxes.utils.runners.Runner.__init__", "foxes.utils.runners.Runner.finalize", "foxes.utils.runners.Runner.initialize", "foxes.utils.runners.Runner.initialized", "foxes.utils.runners.Runner.run", "foxes.utils.show_plotly_fig", "foxes.utils.shp2csv", "foxes.utils.shp2geom2d", "foxes.utils.two_circles.area", "foxes.utils.two_circles.calc_area", "foxes.utils.uv2wd", "foxes.utils.wd2uv", "foxes.utils.wd2wdvec", "foxes.utils.wdvec2wd", "API", "foxes.algorithms", "Downwind algorithm", "Iterative algorithm", "foxes.constants", "foxes.core", "foxes", "foxes.input", "foxes.models", "foxes.opt", "foxes.opt.problems", "foxes.opt.problems.layout.geom_layouts", "foxes.output", "foxes.utils", "foxes.utils.abl.neutral", "foxes.variables", "foxes.models.wake_models", "Citation", "Examples", "History", "Welcome to FOXES", "Installation", "Static data", "Heterogeneous flow", "Layout optimization", "The model book", "Multi-height wind data", "Overview - how to setup foxes", "Power mask", "Wind sector management", "Single row of turbines", "Dynamic wakes", "Timeseries data", "Wind rose data", "Yawed rotor wakes"], "terms": {"class": [0, 8, 10, 13, 17, 22, 28, 32, 37, 41, 46, 50, 52, 56, 65, 70, 78, 81, 91, 100, 105, 113, 114, 127, 133, 135, 139, 147, 156, 161, 165, 167, 169, 172, 173, 178, 182, 185, 190, 447, 455, 466, 468, 475, 482, 493, 497, 498, 505, 508, 513, 514, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 639, 640, 641, 642, 645, 646, 651, 652, 657, 658, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 818, 823, 832, 852, 860, 861, 864, 867, 873, 876, 878, 881, 889, 909, 912, 919, 921, 929, 936, 943, 951, 959, 980, 982, 989, 1000, 1007, 1016, 1026, 1049, 1050, 1055, 1062, 1071, 1073, 1079, 1081, 1086, 1095, 1096, 1100, 1101, 1105, 1106, 1110, 1111, 1116, 1121, 1126, 1127, 1132, 1133, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1223, 1229, 1234, 1245, 1254, 1262, 1269, 1271, 1286, 1288, 1289, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1302, 1308, 1311, 1317, 1320], "fox": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1288, 1289, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "algorithm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 77, 79, 80, 84, 85, 87, 88, 90, 93, 94, 95, 96, 97, 98, 102, 103, 104, 108, 109, 110, 111, 112, 117, 118, 119, 120, 121, 123, 128, 129, 130, 131, 132, 134, 136, 138, 142, 143, 144, 145, 146, 149, 151, 152, 154, 158, 160, 166, 174, 175, 176, 177, 179, 180, 181, 183, 184, 449, 451, 452, 454, 458, 459, 461, 462, 465, 470, 471, 472, 474, 477, 478, 479, 481, 485, 486, 488, 489, 492, 496, 501, 502, 503, 504, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 558, 559, 560, 562, 563, 566, 567, 570, 571, 578, 583, 584, 587, 588, 589, 592, 593, 594, 598, 599, 600, 601, 604, 605, 606, 610, 611, 612, 616, 617, 620, 621, 622, 625, 626, 628, 629, 631, 632, 636, 637, 643, 644, 647, 648, 649, 650, 653, 654, 655, 656, 659, 660, 661, 662, 682, 684, 685, 686, 687, 688, 691, 692, 693, 697, 698, 699, 700, 703, 704, 705, 706, 709, 710, 711, 712, 713, 715, 716, 719, 720, 721, 722, 723, 724, 726, 727, 730, 731, 732, 736, 737, 738, 742, 743, 744, 748, 749, 753, 754, 755, 772, 780, 781, 785, 786, 790, 791, 792, 795, 796, 797, 800, 801, 802, 803, 806, 807, 810, 811, 812, 813, 816, 817, 834, 846, 852, 853, 854, 855, 856, 857, 858, 859, 1007, 1009, 1057, 1058, 1059, 1061, 1230, 1251, 1286, 1291, 1294, 1305, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "downwind": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 1287, 1289, 1305, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "core": [0, 1, 3, 5, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 39, 44, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 444, 445, 446, 447, 449, 451, 452, 454, 455, 458, 459, 461, 462, 465, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 488, 489, 492, 496, 497, 498, 499, 501, 502, 503, 504, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 571, 574, 578, 581, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 610, 611, 612, 614, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 666, 669, 672, 675, 678, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 719, 720, 721, 722, 723, 724, 726, 727, 730, 731, 732, 736, 737, 738, 742, 743, 744, 748, 749, 753, 754, 755, 756, 772, 774, 775, 780, 781, 785, 786, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 810, 811, 812, 813, 814, 816, 817, 834, 846, 876, 959, 982, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1073, 1081, 1121, 1172, 1176, 1186, 1196, 1206, 1220, 1229, 1230, 1245, 1251, 1286, 1288, 1289, 1292, 1293, 1294, 1296, 1297, 1302, 1305], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 382, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 963, 964, 971, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 997, 1000, 1001, 1002, 1005, 1007, 1009, 1012, 1014, 1015, 1029, 1042, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1302, 1303, 1305, 1306, 1307, 1320], "The": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 195, 273, 277, 281, 285, 286, 287, 293, 302, 319, 320, 370, 371, 388, 391, 392, 393, 395, 396, 400, 401, 402, 403, 404, 405, 406, 409, 410, 412, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 755, 756, 771, 772, 774, 775, 777, 778, 780, 781, 782, 783, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1172, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1268, 1270, 1276, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1288, 1290, 1292, 1294, 1296, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "turbin": [0, 1, 2, 3, 8, 10, 13, 22, 24, 25, 56, 69, 70, 76, 91, 92, 93, 94, 99, 113, 120, 127, 129, 130, 149, 151, 161, 162, 163, 164, 165, 166, 167, 173, 174, 175, 176, 177, 179, 184, 185, 187, 188, 189, 192, 193, 382, 383, 384, 385, 386, 387, 405, 406, 418, 429, 435, 436, 441, 442, 443, 444, 445, 446, 497, 498, 499, 501, 508, 510, 513, 515, 516, 521, 524, 525, 530, 533, 534, 539, 541, 542, 544, 545, 550, 552, 553, 570, 581, 582, 583, 587, 590, 592, 598, 603, 604, 610, 614, 616, 620, 625, 628, 631, 636, 642, 643, 647, 653, 659, 682, 684, 686, 687, 689, 691, 692, 693, 694, 697, 698, 699, 701, 703, 704, 705, 707, 709, 711, 712, 715, 716, 719, 720, 726, 727, 730, 731, 732, 736, 737, 742, 743, 748, 753, 754, 772, 775, 780, 785, 790, 794, 796, 799, 801, 807, 809, 811, 817, 825, 830, 832, 834, 837, 838, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 857, 858, 859, 866, 867, 869, 871, 872, 873, 876, 878, 880, 959, 960, 980, 982, 983, 989, 990, 996, 998, 1000, 1001, 1004, 1006, 1007, 1009, 1013, 1039, 1042, 1043, 1044, 1049, 1062, 1063, 1071, 1072, 1073, 1079, 1080, 1081, 1083, 1096, 1100, 1101, 1105, 1106, 1110, 1111, 1116, 1127, 1138, 1157, 1158, 1163, 1169, 1176, 1177, 1186, 1187, 1196, 1197, 1220, 1229, 1245, 1251, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1301, 1304, 1305, 1306, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320], "ar": [0, 13, 16, 17, 21, 22, 25, 27, 28, 31, 32, 36, 52, 55, 56, 78, 81, 88, 91, 98, 100, 103, 105, 112, 113, 135, 137, 139, 146, 147, 148, 150, 151, 154, 156, 158, 165, 167, 173, 179, 180, 181, 182, 287, 441, 447, 448, 452, 455, 462, 466, 468, 472, 475, 479, 482, 489, 493, 497, 498, 504, 513, 514, 521, 522, 530, 531, 540, 543, 551, 556, 560, 561, 563, 564, 567, 568, 569, 570, 574, 575, 577, 581, 582, 584, 585, 589, 590, 594, 596, 597, 601, 602, 603, 606, 607, 612, 614, 617, 618, 619, 622, 623, 626, 627, 629, 630, 632, 633, 637, 638, 640, 642, 644, 645, 650, 651, 656, 657, 662, 720, 722, 738, 744, 749, 755, 781, 786, 792, 793, 797, 798, 803, 808, 813, 830, 848, 849, 850, 863, 866, 912, 918, 919, 921, 928, 929, 935, 936, 942, 943, 950, 951, 958, 959, 980, 982, 989, 1007, 1013, 1016, 1017, 1018, 1026, 1049, 1055, 1059, 1081, 1083, 1095, 1100, 1105, 1110, 1116, 1121, 1123, 1124, 1125, 1126, 1132, 1137, 1175, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1280, 1293, 1294, 1296, 1297, 1299, 1302, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "evalu": [0, 13, 22, 23, 37, 40, 41, 45, 46, 49, 50, 120, 129, 130, 134, 147, 151, 170, 173, 175, 177, 179, 180, 181, 183, 184, 515, 516, 520, 521, 522, 524, 525, 529, 530, 533, 534, 538, 541, 544, 545, 549, 552, 553, 555, 568, 570, 574, 664, 667, 670, 673, 676, 680, 682, 684, 687, 689, 691, 693, 694, 697, 699, 701, 703, 705, 707, 709, 712, 714, 715, 716, 719, 720, 722, 726, 727, 730, 731, 732, 736, 737, 738, 742, 743, 744, 748, 749, 753, 754, 755, 772, 780, 781, 785, 786, 790, 792, 795, 796, 800, 801, 806, 807, 810, 811, 816, 817, 832, 876, 896, 897, 899, 900, 901, 902, 905, 906, 1007, 1021, 1022, 1049, 1081, 1176, 1177, 1186, 1196, 1206, 1220, 1229, 1245, 1288, 1289, 1294, 1296, 1297, 1298, 1303, 1305, 1306, 1313, 1315, 1316, 1317, 1318], "onc": [0, 521, 1309, 1310, 1316, 1317, 1320], "order": [0, 13, 120, 173, 175, 195, 287, 320, 418, 497, 508, 657, 682, 684, 689, 691, 694, 697, 701, 703, 707, 709, 1016, 1026, 1287, 1288, 1294, 1301, 1310, 1314, 1315, 1316], "i": [0, 14, 19, 24, 30, 34, 53, 78, 79, 80, 84, 93, 102, 104, 108, 120, 136, 138, 142, 150, 151, 161, 166, 175, 182, 195, 255, 278, 287, 320, 333, 368, 441, 443, 449, 455, 458, 470, 477, 485, 495, 501, 513, 514, 521, 522, 530, 531, 540, 542, 543, 551, 556, 557, 558, 562, 566, 569, 570, 574, 575, 577, 581, 582, 583, 587, 590, 592, 598, 604, 610, 616, 620, 625, 627, 628, 630, 631, 636, 643, 645, 646, 647, 651, 652, 653, 657, 659, 682, 684, 691, 697, 703, 709, 714, 715, 716, 717, 719, 726, 727, 730, 732, 736, 739, 740, 742, 745, 748, 753, 780, 785, 790, 804, 839, 860, 865, 875, 880, 917, 918, 927, 928, 934, 935, 941, 942, 949, 950, 957, 958, 1007, 1026, 1029, 1037, 1038, 1045, 1046, 1049, 1053, 1054, 1057, 1062, 1081, 1137, 1175, 1176, 1186, 1196, 1206, 1220, 1229, 1241, 1242, 1245, 1262, 1267, 1294, 1295, 1301, 1302, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "calcul": [0, 2, 3, 8, 10, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 39, 44, 48, 52, 53, 54, 55, 56, 59, 70, 71, 78, 79, 80, 81, 84, 85, 87, 88, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 118, 121, 129, 130, 131, 134, 135, 136, 138, 139, 142, 143, 144, 146, 147, 148, 149, 151, 152, 154, 156, 158, 160, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 398, 399, 423, 424, 447, 449, 451, 452, 454, 455, 458, 459, 461, 462, 465, 466, 468, 470, 471, 472, 474, 475, 477, 478, 479, 481, 482, 485, 486, 488, 489, 492, 493, 497, 498, 501, 502, 503, 504, 511, 515, 516, 517, 518, 520, 521, 524, 525, 526, 527, 529, 533, 534, 535, 536, 538, 541, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 571, 574, 575, 578, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 610, 611, 612, 614, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 640, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 748, 749, 750, 753, 754, 755, 756, 772, 777, 780, 781, 782, 785, 786, 787, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 810, 811, 812, 813, 814, 816, 817, 823, 824, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 851, 852, 853, 867, 868, 877, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 908, 910, 911, 912, 917, 919, 921, 927, 929, 934, 936, 941, 943, 949, 951, 957, 959, 962, 963, 964, 980, 982, 984, 985, 989, 992, 993, 1000, 1007, 1016, 1026, 1045, 1046, 1049, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1064, 1065, 1071, 1073, 1075, 1076, 1079, 1081, 1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1126, 1128, 1129, 1132, 1134, 1135, 1137, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1175, 1176, 1186, 1196, 1206, 1220, 1229, 1241, 1242, 1245, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1291, 1294, 1295, 1298, 1299, 1300, 1301, 1302, 1305, 1306, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320], "provid": [0, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 78, 81, 87, 91, 96, 100, 105, 110, 113, 114, 120, 121, 127, 131, 135, 139, 144, 147, 156, 165, 167, 169, 173, 178, 182, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 503, 513, 518, 521, 527, 530, 536, 539, 542, 547, 550, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 590, 593, 596, 600, 602, 605, 607, 611, 614, 618, 621, 623, 627, 630, 633, 638, 640, 642, 645, 649, 651, 655, 657, 661, 663, 666, 669, 672, 675, 678, 682, 688, 689, 694, 700, 701, 706, 707, 713, 714, 717, 723, 725, 728, 733, 739, 745, 750, 777, 782, 787, 793, 798, 802, 804, 808, 812, 814, 860, 875, 880, 1055, 1058, 1292, 1294, 1305, 1308, 1309, 1310, 1311, 1312, 1313, 1316, 1318], "turbineord": [0, 508], "object": [0, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 62, 66, 68, 73, 78, 81, 87, 91, 96, 100, 105, 110, 113, 114, 117, 119, 120, 121, 124, 125, 127, 129, 130, 131, 135, 139, 144, 147, 156, 165, 167, 169, 173, 178, 182, 195, 225, 245, 287, 320, 343, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 496, 497, 498, 503, 513, 515, 516, 518, 521, 524, 525, 527, 530, 533, 534, 536, 539, 541, 542, 544, 545, 547, 550, 552, 553, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 590, 593, 596, 600, 602, 605, 607, 611, 614, 618, 621, 623, 627, 630, 633, 638, 640, 642, 645, 649, 651, 655, 657, 661, 663, 666, 669, 672, 675, 678, 682, 688, 689, 694, 700, 701, 706, 707, 713, 714, 717, 723, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 802, 804, 808, 812, 814, 818, 819, 825, 847, 854, 855, 856, 857, 858, 859, 867, 871, 876, 913, 923, 931, 938, 945, 953, 959, 966, 969, 980, 982, 989, 1000, 1001, 1007, 1010, 1011, 1016, 1021, 1022, 1024, 1025, 1026, 1029, 1033, 1038, 1049, 1050, 1055, 1058, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1086, 1095, 1100, 1105, 1110, 1114, 1116, 1121, 1126, 1132, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1182, 1186, 1192, 1196, 1202, 1206, 1213, 1220, 1221, 1223, 1229, 1231, 1234, 1245, 1252, 1254, 1279, 1292, 1294, 1296, 1308, 1309, 1310, 1311, 1314, 1315, 1316, 1318, 1319, 1320], "state": [0, 1, 2, 3, 6, 8, 10, 13, 17, 22, 24, 25, 28, 32, 52, 56, 57, 66, 70, 75, 77, 78, 81, 82, 86, 89, 90, 91, 93, 100, 105, 113, 114, 120, 125, 127, 129, 130, 135, 139, 147, 149, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 173, 174, 176, 177, 178, 179, 182, 184, 379, 380, 381, 382, 383, 431, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 513, 515, 516, 521, 524, 525, 530, 533, 534, 539, 541, 542, 544, 545, 550, 552, 553, 556, 557, 561, 564, 568, 570, 574, 581, 582, 583, 585, 587, 590, 592, 596, 598, 602, 604, 607, 610, 614, 616, 618, 620, 623, 625, 627, 628, 630, 631, 633, 636, 638, 640, 642, 643, 645, 647, 651, 653, 657, 659, 663, 666, 669, 672, 675, 678, 682, 686, 687, 689, 692, 693, 694, 698, 699, 701, 704, 705, 707, 711, 712, 714, 715, 716, 717, 719, 720, 725, 726, 727, 728, 730, 731, 732, 733, 736, 737, 739, 742, 743, 745, 748, 750, 753, 754, 756, 772, 775, 777, 780, 782, 785, 787, 790, 793, 796, 798, 801, 804, 807, 808, 811, 814, 817, 823, 824, 825, 832, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 873, 876, 877, 1007, 1029, 1052, 1055, 1056, 1060, 1061, 1063, 1072, 1080, 1083, 1092, 1227, 1240, 1258, 1290, 1291, 1294, 1295, 1298, 1301, 1305, 1306, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "ambient": [0, 1, 2, 3, 28, 32, 130, 147, 148, 149, 151, 156, 180, 183, 194, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 439, 440, 447, 516, 525, 534, 545, 553, 564, 565, 568, 570, 574, 575, 722, 733, 734, 794, 795, 799, 800, 806, 809, 810, 814, 815, 816, 832, 834, 840, 846, 1288, 1290, 1293, 1294, 1301, 1305, 1306, 1312, 1313, 1314, 1316, 1318, 1319], "wake_model": [0, 1, 22, 23, 127, 128, 174, 508, 513, 514, 521, 522, 530, 531, 539, 540, 542, 543, 550, 551, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "list": [0, 1, 3, 8, 13, 16, 17, 21, 22, 23, 25, 27, 28, 31, 32, 33, 36, 41, 42, 46, 47, 52, 55, 56, 61, 68, 70, 71, 78, 80, 81, 82, 83, 86, 88, 91, 97, 98, 100, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 123, 125, 127, 128, 132, 135, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 154, 156, 157, 158, 161, 162, 163, 164, 165, 167, 169, 171, 173, 174, 178, 182, 185, 187, 189, 190, 320, 333, 441, 445, 446, 447, 448, 450, 452, 455, 457, 460, 462, 463, 466, 468, 472, 475, 479, 482, 484, 487, 489, 490, 493, 497, 498, 504, 512, 513, 514, 519, 521, 522, 528, 530, 531, 537, 539, 540, 542, 543, 548, 550, 551, 556, 557, 560, 561, 563, 564, 565, 567, 568, 574, 575, 581, 582, 584, 585, 586, 589, 590, 594, 596, 601, 602, 603, 606, 607, 612, 614, 617, 618, 619, 622, 623, 626, 627, 629, 630, 632, 633, 637, 638, 640, 642, 644, 645, 650, 651, 656, 657, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 681, 682, 689, 694, 701, 707, 714, 717, 724, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 794, 797, 798, 799, 803, 804, 808, 809, 813, 814, 818, 820, 822, 834, 837, 838, 841, 843, 844, 845, 847, 866, 869, 871, 872, 880, 881, 883, 886, 888, 889, 909, 920, 921, 922, 959, 960, 962, 963, 964, 965, 976, 977, 980, 982, 983, 984, 985, 989, 990, 992, 993, 998, 1000, 1001, 1006, 1009, 1016, 1026, 1029, 1043, 1047, 1048, 1050, 1055, 1059, 1062, 1063, 1064, 1065, 1071, 1072, 1073, 1075, 1076, 1079, 1080, 1083, 1093, 1094, 1097, 1098, 1102, 1103, 1107, 1108, 1112, 1113, 1118, 1119, 1128, 1129, 1134, 1135, 1137, 1140, 1141, 1147, 1148, 1153, 1154, 1159, 1160, 1165, 1166, 1175, 1185, 1195, 1205, 1218, 1219, 1228, 1243, 1244, 1259, 1261, 1286, 1289, 1291, 1292, 1293, 1298, 1305, 1308, 1311, 1314], "wakemodel": [0, 22, 23, 25, 127, 128, 174, 178, 179, 180, 181, 508, 514, 522, 531, 540, 543, 551, 717, 1291, 1302], "wake": [0, 1, 2, 3, 13, 17, 22, 23, 24, 25, 52, 120, 127, 128, 129, 130, 133, 134, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 413, 420, 421, 439, 508, 513, 514, 515, 516, 520, 521, 522, 524, 525, 529, 530, 531, 533, 534, 538, 539, 540, 541, 542, 543, 544, 545, 549, 550, 551, 552, 553, 554, 555, 564, 633, 682, 683, 686, 687, 689, 692, 693, 694, 698, 699, 701, 702, 704, 705, 707, 708, 711, 712, 714, 715, 716, 717, 718, 719, 720, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 755, 756, 771, 772, 775, 777, 778, 780, 781, 782, 783, 785, 786, 787, 788, 790, 792, 793, 794, 795, 796, 798, 800, 801, 804, 805, 806, 807, 808, 810, 811, 814, 815, 816, 817, 1176, 1186, 1288, 1289, 1291, 1294, 1296, 1297, 1301, 1302, 1304, 1305, 1306, 1309, 1313, 1314, 1316, 1318, 1319], "model": [0, 1, 2, 3, 5, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 61, 62, 63, 68, 70, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 384, 385, 420, 421, 441, 447, 449, 451, 452, 455, 458, 459, 461, 462, 466, 468, 470, 471, 472, 475, 477, 478, 479, 482, 485, 486, 488, 489, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 823, 832, 852, 860, 861, 862, 864, 867, 873, 876, 878, 879, 880, 959, 980, 982, 989, 997, 1000, 1005, 1029, 1049, 1050, 1055, 1057, 1058, 1059, 1062, 1071, 1073, 1079, 1083, 1286, 1290, 1291, 1292, 1295, 1299, 1301, 1304, 1305, 1306, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "appli": [0, 1, 25, 179, 180, 181, 183, 184, 720, 722, 738, 744, 749, 755, 781, 786, 792, 795, 796, 800, 801, 806, 807, 810, 811, 816, 817, 839, 1007, 1014, 1015, 1049, 1081, 1083, 1137, 1175, 1176, 1178, 1179, 1186, 1188, 1189, 1196, 1198, 1199, 1206, 1208, 1209, 1220, 1229, 1245, 1288, 1294, 1310, 1320], "all": [0, 1, 2, 3, 8, 13, 14, 15, 17, 19, 20, 22, 24, 26, 28, 30, 32, 34, 35, 52, 53, 54, 56, 78, 79, 81, 84, 87, 90, 91, 93, 96, 97, 100, 102, 105, 108, 110, 111, 113, 114, 121, 123, 127, 128, 131, 132, 135, 136, 139, 142, 144, 145, 147, 151, 156, 160, 165, 166, 167, 169, 173, 175, 178, 182, 183, 185, 189, 195, 250, 287, 320, 447, 448, 449, 451, 454, 455, 458, 461, 465, 466, 468, 470, 471, 474, 475, 477, 478, 481, 482, 485, 488, 492, 493, 497, 498, 501, 503, 508, 513, 518, 519, 521, 527, 528, 530, 536, 537, 539, 542, 547, 548, 550, 554, 556, 558, 559, 561, 562, 564, 566, 568, 570, 574, 578, 581, 582, 583, 585, 587, 588, 590, 592, 593, 596, 598, 600, 602, 604, 605, 607, 610, 611, 613, 614, 616, 618, 620, 621, 623, 625, 627, 628, 630, 631, 633, 636, 638, 640, 642, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 666, 669, 672, 675, 678, 682, 684, 688, 689, 691, 694, 697, 700, 701, 703, 706, 707, 709, 713, 714, 717, 723, 724, 725, 728, 733, 739, 745, 750, 756, 773, 777, 782, 787, 793, 795, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 823, 825, 832, 851, 852, 860, 862, 864, 866, 867, 869, 871, 872, 873, 876, 878, 909, 959, 962, 963, 964, 978, 979, 980, 982, 984, 985, 988, 989, 992, 993, 997, 999, 1000, 1005, 1007, 1009, 1013, 1016, 1022, 1026, 1037, 1038, 1049, 1055, 1057, 1058, 1061, 1062, 1063, 1064, 1065, 1070, 1071, 1072, 1073, 1075, 1076, 1079, 1080, 1081, 1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1125, 1126, 1128, 1129, 1132, 1134, 1135, 1137, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1175, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1261, 1281, 1286, 1291, 1292, 1293, 1294, 1299, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1316, 1317, 1319], "rotor_model": [0, 1, 508, 521, 522, 530, 531, 540, 542, 543, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 1309, 1310, 1311, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "rotormodel": [0, 147, 148, 149, 150, 151, 152, 153, 154, 155, 508, 521, 522, 530, 531, 540, 542, 543, 568, 574, 1291, 1294], "rotor": [0, 1, 91, 93, 100, 101, 127, 147, 149, 150, 151, 152, 153, 155, 161, 162, 167, 168, 194, 376, 377, 378, 397, 398, 399, 410, 422, 423, 424, 429, 441, 508, 521, 522, 530, 531, 539, 540, 542, 543, 550, 554, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 596, 597, 608, 614, 615, 689, 804, 823, 824, 825, 959, 960, 1083, 1096, 1290, 1291, 1294, 1301, 1304, 1305, 1306, 1310, 1313, 1317, 1318], "wake_fram": [0, 1, 127, 128, 508, 514, 521, 522, 531, 539, 540, 542, 543, 550, 551, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 1309, 1310, 1311, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "wakefram": [0, 127, 128, 173, 174, 175, 176, 177, 508, 514, 522, 531, 540, 543, 551, 682, 683, 689, 694, 701, 707, 708, 1291, 1294], "frame": [0, 1, 13, 127, 128, 150, 173, 174, 176, 177, 179, 455, 508, 514, 522, 531, 540, 543, 551, 556, 557, 569, 577, 682, 683, 686, 687, 692, 693, 698, 699, 704, 705, 707, 708, 711, 712, 720, 756, 1260, 1288, 1291, 1294, 1302, 1305, 1309, 1313, 1317, 1320], "partial_wakes_model": [0, 1, 1309, 1310, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "partialwakesmodel": [0, 127, 128, 129, 130, 131, 132, 133, 134, 513, 521, 530, 542, 550, 1291, 1294], "partial": [0, 1, 127, 133, 508, 513, 514, 521, 530, 539, 542, 550, 714, 717, 1291, 1294, 1302, 1313], "farm_control": [0, 1, 497, 508, 1311], "farmcontrol": [0, 91, 92, 93, 94, 95, 96, 97, 98, 99, 497, 508, 1291, 1294], "farm": [0, 1, 2, 3, 8, 10, 14, 17, 19, 24, 25, 28, 30, 34, 39, 44, 48, 52, 53, 56, 57, 69, 84, 91, 93, 94, 100, 102, 105, 108, 113, 120, 127, 129, 130, 134, 136, 142, 147, 149, 151, 152, 161, 162, 166, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 188, 318, 441, 442, 443, 444, 445, 446, 449, 458, 470, 477, 485, 496, 497, 498, 501, 508, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 554, 555, 558, 562, 566, 570, 571, 581, 582, 583, 587, 592, 598, 604, 607, 610, 614, 616, 620, 625, 628, 631, 634, 636, 643, 647, 653, 659, 682, 684, 686, 687, 691, 692, 693, 697, 698, 699, 703, 704, 705, 707, 708, 709, 711, 712, 715, 716, 719, 720, 722, 726, 727, 730, 731, 732, 733, 734, 736, 737, 738, 742, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 755, 772, 777, 778, 780, 781, 785, 786, 790, 792, 795, 796, 800, 801, 806, 807, 810, 811, 816, 817, 823, 824, 825, 826, 827, 832, 833, 834, 835, 836, 839, 840, 852, 853, 854, 855, 856, 857, 858, 859, 864, 865, 867, 868, 869, 871, 872, 873, 874, 877, 959, 980, 982, 989, 994, 1000, 1003, 1007, 1023, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1062, 1071, 1073, 1079, 1081, 1083, 1091, 1092, 1176, 1186, 1196, 1206, 1220, 1226, 1227, 1229, 1239, 1240, 1241, 1242, 1245, 1257, 1258, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1298, 1303, 1305, 1306, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "control": [0, 1, 497, 508, 1294], "n_state": [0, 3, 14, 19, 24, 25, 30, 34, 53, 66, 70, 73, 75, 84, 90, 91, 93, 102, 108, 120, 129, 130, 136, 142, 149, 151, 152, 160, 161, 162, 163, 164, 166, 174, 175, 176, 177, 179, 180, 181, 183, 184, 449, 454, 458, 465, 470, 474, 477, 481, 485, 492, 495, 501, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 554, 558, 562, 566, 570, 571, 581, 582, 583, 587, 592, 598, 604, 609, 610, 616, 620, 625, 628, 631, 636, 643, 647, 653, 659, 684, 686, 687, 691, 692, 693, 697, 698, 699, 703, 704, 705, 709, 711, 712, 715, 716, 719, 720, 722, 726, 727, 730, 731, 732, 736, 737, 738, 742, 743, 744, 748, 749, 753, 754, 755, 772, 775, 780, 781, 785, 786, 790, 792, 795, 796, 800, 801, 806, 807, 810, 811, 816, 817, 1007, 1009, 1049, 1051, 1052, 1055, 1057, 1061, 1081, 1091, 1092, 1220, 1226, 1227, 1229, 1239, 1240, 1245, 1257, 1258, 1293, 1295, 1316], "int": [0, 1, 8, 9, 12, 15, 20, 26, 35, 39, 44, 48, 54, 56, 57, 61, 67, 68, 74, 75, 76, 77, 85, 87, 89, 95, 96, 109, 110, 118, 121, 124, 125, 129, 130, 131, 143, 144, 149, 151, 153, 159, 161, 162, 164, 187, 188, 195, 216, 320, 334, 366, 441, 443, 444, 445, 446, 448, 451, 453, 455, 457, 459, 461, 463, 464, 471, 473, 478, 480, 482, 484, 486, 488, 490, 491, 502, 503, 511, 515, 516, 517, 518, 521, 522, 524, 525, 526, 527, 531, 533, 534, 535, 536, 540, 541, 544, 545, 546, 547, 552, 553, 559, 570, 572, 574, 575, 578, 579, 588, 593, 599, 600, 605, 611, 621, 648, 649, 654, 655, 660, 661, 685, 688, 694, 695, 700, 706, 710, 713, 721, 723, 791, 802, 812, 821, 823, 824, 825, 830, 834, 835, 846, 847, 854, 855, 856, 857, 858, 859, 866, 869, 871, 872, 959, 960, 962, 963, 964, 966, 967, 968, 969, 971, 972, 973, 979, 980, 982, 983, 984, 985, 986, 987, 989, 990, 992, 993, 995, 996, 998, 1000, 1001, 1004, 1006, 1007, 1009, 1010, 1011, 1016, 1017, 1018, 1020, 1024, 1025, 1026, 1028, 1029, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1049, 1050, 1052, 1055, 1056, 1058, 1060, 1062, 1064, 1065, 1066, 1067, 1069, 1071, 1073, 1075, 1076, 1078, 1079, 1081, 1083, 1085, 1086, 1088, 1090, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1138, 1140, 1141, 1142, 1144, 1145, 1147, 1148, 1150, 1151, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1165, 1166, 1168, 1169, 1172, 1176, 1177, 1182, 1186, 1187, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1202, 1206, 1207, 1212, 1213, 1215, 1217, 1219, 1220, 1221, 1223, 1227, 1229, 1230, 1231, 1233, 1234, 1236, 1238, 1240, 1244, 1245, 1252, 1254, 1258, 1261, 1262, 1263, 1278, 1282, 1283, 1284, 1285, 1290, 1308], "number": [0, 8, 9, 12, 56, 69, 70, 74, 75, 76, 81, 89, 147, 153, 156, 159, 185, 188, 195, 206, 255, 278, 286, 302, 320, 325, 366, 368, 446, 447, 448, 453, 455, 464, 466, 468, 473, 475, 480, 482, 491, 493, 521, 522, 568, 572, 574, 575, 579, 618, 708, 729, 734, 740, 745, 746, 751, 756, 771, 778, 782, 783, 787, 788, 793, 794, 798, 799, 808, 809, 825, 830, 854, 855, 856, 857, 858, 859, 869, 871, 872, 959, 971, 972, 973, 980, 982, 987, 989, 995, 1000, 1007, 1037, 1038, 1040, 1041, 1049, 1052, 1055, 1060, 1062, 1069, 1071, 1073, 1078, 1079, 1081, 1092, 1095, 1096, 1099, 1100, 1101, 1104, 1105, 1106, 1109, 1110, 1115, 1116, 1120, 1121, 1126, 1127, 1131, 1132, 1136, 1137, 1138, 1144, 1145, 1150, 1151, 1156, 1157, 1158, 1162, 1163, 1168, 1169, 1172, 1175, 1176, 1177, 1186, 1187, 1196, 1197, 1206, 1207, 1220, 1227, 1229, 1230, 1240, 1245, 1258, 1263, 1295, 1297, 1303, 1310, 1311, 1313], "classmethod": [0, 5, 8, 11, 13, 17, 22, 28, 32, 52, 56, 65, 70, 73, 78, 81, 91, 100, 105, 113, 114, 125, 127, 133, 135, 139, 147, 156, 165, 167, 169, 172, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 595, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 823, 832, 852, 860, 861, 862, 863, 864, 867, 870, 873, 876, 878, 889, 894, 895, 959, 980, 982, 989, 997, 1000, 1005, 1007, 1042, 1044, 1049, 1055, 1062, 1071, 1073, 1079, 1081, 1220, 1229, 1245, 1262, 1266], "get_model": [0, 5, 8, 11], "name": [0, 2, 3, 5, 8, 11, 13, 16, 17, 21, 22, 25, 27, 28, 31, 32, 36, 37, 38, 41, 42, 46, 47, 52, 55, 56, 63, 65, 70, 71, 72, 73, 78, 81, 88, 91, 92, 98, 99, 100, 103, 105, 112, 113, 114, 117, 119, 126, 127, 133, 134, 135, 137, 139, 146, 147, 149, 154, 156, 158, 161, 162, 165, 167, 168, 169, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 192, 193, 386, 441, 444, 445, 446, 447, 448, 452, 455, 457, 462, 466, 468, 472, 475, 476, 479, 482, 484, 489, 493, 495, 497, 498, 504, 505, 507, 508, 512, 513, 514, 520, 521, 529, 530, 538, 539, 542, 549, 550, 555, 556, 557, 560, 561, 563, 564, 567, 568, 574, 575, 581, 584, 585, 586, 589, 590, 594, 596, 597, 601, 602, 603, 606, 607, 609, 612, 614, 617, 618, 622, 623, 624, 626, 627, 629, 630, 632, 633, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 650, 651, 652, 656, 657, 658, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 681, 682, 689, 694, 701, 707, 708, 714, 715, 716, 717, 718, 719, 720, 722, 725, 727, 728, 729, 730, 732, 733, 734, 736, 738, 739, 740, 742, 744, 745, 746, 749, 750, 751, 753, 755, 756, 777, 778, 780, 781, 782, 783, 786, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 810, 811, 813, 814, 816, 817, 823, 825, 832, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 876, 878, 880, 881, 884, 887, 959, 960, 965, 974, 975, 976, 977, 980, 981, 982, 983, 989, 990, 997, 1000, 1001, 1005, 1007, 1009, 1029, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1059, 1062, 1063, 1071, 1072, 1073, 1074, 1079, 1080, 1081, 1083, 1091, 1092, 1093, 1094, 1095, 1096, 1100, 1101, 1105, 1106, 1110, 1111, 1116, 1117, 1121, 1126, 1127, 1132, 1133, 1138, 1139, 1145, 1146, 1151, 1152, 1157, 1158, 1163, 1164, 1169, 1170, 1172, 1173, 1176, 1185, 1186, 1195, 1196, 1205, 1206, 1218, 1219, 1220, 1226, 1227, 1228, 1229, 1230, 1239, 1240, 1243, 1244, 1245, 1251, 1257, 1258, 1259, 1261, 1290, 1292, 1299, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1318], "get": [0, 5, 8, 11, 13, 17, 22, 28, 32, 37, 40, 41, 45, 46, 49, 50, 52, 56, 70, 77, 78, 81, 91, 100, 105, 113, 114, 119, 127, 135, 139, 147, 156, 165, 167, 169, 173, 176, 178, 182, 190, 195, 269, 320, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 554, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 686, 689, 692, 694, 698, 701, 704, 707, 711, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 867, 869, 876, 881, 887, 888, 912, 914, 919, 921, 924, 929, 936, 943, 946, 951, 954, 959, 961, 978, 979, 980, 982, 988, 989, 999, 1000, 1007, 1019, 1030, 1034, 1044, 1049, 1055, 1062, 1070, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1305, 1308], "specif": [0, 5, 8, 11, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 126, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 287, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055, 1288, 1289, 1299, 1318], "mbook": [0, 1, 56, 57, 496, 876, 877, 878, 879, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "constructor": [0, 1, 8, 9, 13, 17, 18, 22, 23, 28, 29, 32, 33, 37, 38, 41, 42, 46, 47, 50, 51, 52, 56, 57, 65, 70, 71, 78, 81, 82, 91, 92, 100, 101, 105, 106, 113, 114, 115, 127, 128, 135, 139, 140, 147, 148, 156, 161, 162, 165, 167, 168, 169, 173, 178, 182, 185, 186, 190, 191, 447, 448, 455, 457, 466, 468, 469, 475, 476, 482, 484, 493, 497, 498, 499, 505, 507, 508, 510, 513, 514, 521, 522, 530, 531, 539, 540, 542, 543, 550, 551, 556, 557, 561, 564, 565, 568, 574, 575, 581, 582, 585, 586, 590, 591, 596, 597, 602, 603, 607, 608, 614, 615, 618, 619, 623, 624, 627, 630, 633, 634, 638, 639, 640, 641, 642, 645, 646, 651, 652, 657, 658, 663, 666, 669, 672, 675, 678, 679, 682, 683, 689, 690, 694, 695, 701, 702, 707, 708, 714, 717, 718, 725, 728, 729, 733, 734, 739, 740, 745, 746, 750, 751, 756, 771, 777, 778, 782, 783, 787, 788, 793, 794, 798, 799, 804, 805, 808, 809, 814, 815, 818, 819, 823, 824, 832, 833, 852, 853, 864, 865, 867, 868, 873, 874, 876, 877, 878, 879, 881, 882, 919, 920, 921, 922, 936, 937, 943, 944, 951, 952, 959, 960, 980, 981, 982, 983, 989, 990, 1007, 1009, 1049, 1055, 1056, 1062, 1063, 1071, 1072, 1073, 1074, 1079, 1080, 1081, 1082, 1095, 1096, 1100, 1101, 1105, 1106, 1110, 1111, 1126, 1127, 1132, 1133, 1138, 1139, 1145, 1146, 1151, 1152, 1157, 1158, 1163, 1164, 1169, 1170, 1176, 1177, 1186, 1187, 1196, 1197, 1206, 1207, 1220, 1245, 1251, 1262, 1263, 1311, 1318], "init_st": [0, 6, 8], "initi": [0, 6, 7, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 64, 68, 71, 73, 78, 80, 81, 87, 91, 96, 99, 100, 105, 110, 113, 114, 121, 122, 127, 131, 134, 135, 139, 144, 147, 156, 165, 167, 169, 173, 178, 181, 182, 447, 448, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 503, 513, 518, 520, 521, 527, 529, 530, 536, 538, 539, 542, 547, 549, 550, 555, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 590, 593, 596, 600, 602, 605, 607, 611, 614, 618, 621, 623, 627, 630, 633, 638, 640, 642, 645, 649, 651, 655, 657, 661, 663, 666, 669, 672, 675, 678, 682, 688, 689, 694, 700, 701, 706, 707, 713, 714, 717, 723, 725, 728, 733, 738, 739, 744, 745, 749, 750, 755, 756, 777, 781, 782, 786, 787, 792, 793, 798, 802, 804, 808, 812, 814, 959, 969, 970, 980, 982, 986, 989, 1000, 1007, 1027, 1028, 1029, 1049, 1050, 1055, 1058, 1062, 1067, 1071, 1073, 1079, 1081, 1083, 1084, 1085, 1086, 1095, 1100, 1105, 1110, 1114, 1116, 1117, 1121, 1122, 1126, 1130, 1132, 1138, 1142, 1145, 1151, 1157, 1163, 1169, 1172, 1173, 1176, 1181, 1182, 1186, 1191, 1192, 1196, 1201, 1202, 1206, 1211, 1212, 1213, 1220, 1222, 1223, 1229, 1232, 1233, 1234, 1245, 1253, 1254, 1262, 1265, 1269, 1271, 1272, 1274, 1275, 1305, 1310, 1312], "need": [0, 6, 8, 120, 169, 171, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 681, 793, 797, 798, 803, 808, 813, 1310, 1312, 1314, 1315, 1319], "calc_farm": [0, 2, 8, 10, 1007, 1009, 1309, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "calc_paramet": [0, 2, 3], "persist": [0, 2], "true": [0, 2, 3, 8, 10, 39, 44, 48, 122, 151, 190, 195, 205, 278, 320, 324, 368, 444, 448, 495, 570, 574, 575, 614, 615, 775, 847, 854, 855, 856, 857, 858, 859, 881, 887, 917, 918, 927, 928, 929, 931, 934, 935, 936, 938, 941, 942, 943, 945, 949, 950, 957, 958, 970, 1013, 1073, 1074, 1180, 1190, 1200, 1210, 1261, 1263, 1309, 1310, 1312, 1314, 1317, 1318, 1319], "final": [0, 1, 2, 3, 4, 8, 10, 13, 17, 22, 28, 32, 52, 56, 57, 60, 61, 78, 81, 85, 91, 95, 99, 100, 105, 109, 113, 114, 118, 127, 135, 139, 143, 147, 156, 165, 167, 169, 173, 178, 180, 182, 183, 447, 455, 459, 466, 468, 475, 482, 486, 493, 497, 498, 502, 508, 511, 513, 517, 521, 526, 530, 535, 539, 542, 546, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 599, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 682, 685, 689, 694, 701, 707, 710, 714, 717, 721, 722, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 791, 793, 794, 795, 798, 800, 804, 805, 806, 808, 810, 814, 816, 959, 966, 967, 968, 980, 982, 989, 1000, 1007, 1024, 1025, 1049, 1055, 1062, 1066, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1221, 1229, 1231, 1245, 1252, 1262, 1264, 1269, 1271, 1273, 1310, 1315, 1317, 1319], "data": [0, 1, 2, 3, 8, 10, 13, 14, 15, 17, 19, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 52, 53, 54, 56, 57, 62, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 87, 91, 93, 96, 100, 102, 104, 105, 108, 110, 113, 114, 117, 119, 120, 121, 125, 127, 129, 130, 131, 134, 135, 136, 138, 139, 142, 144, 147, 149, 151, 152, 156, 161, 165, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 191, 192, 193, 195, 267, 269, 287, 320, 441, 442, 443, 444, 447, 448, 449, 451, 455, 457, 458, 461, 466, 468, 470, 471, 475, 476, 477, 478, 482, 484, 485, 488, 493, 495, 497, 498, 501, 503, 513, 515, 516, 518, 520, 521, 524, 525, 527, 529, 530, 533, 534, 536, 538, 539, 541, 542, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 566, 568, 570, 571, 574, 578, 581, 583, 585, 586, 587, 588, 590, 592, 593, 595, 596, 598, 600, 602, 603, 604, 605, 607, 609, 610, 611, 614, 615, 616, 618, 619, 620, 621, 623, 625, 627, 628, 630, 631, 633, 634, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 651, 652, 653, 655, 657, 658, 659, 661, 663, 664, 666, 667, 669, 670, 672, 673, 675, 676, 678, 680, 682, 684, 686, 687, 688, 689, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 737, 738, 739, 742, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 755, 756, 772, 773, 774, 775, 777, 778, 780, 781, 782, 785, 786, 787, 790, 792, 793, 795, 796, 798, 800, 801, 802, 804, 806, 807, 808, 810, 811, 812, 814, 816, 817, 823, 824, 832, 837, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 852, 860, 863, 864, 865, 866, 867, 869, 871, 872, 873, 876, 878, 881, 882, 888, 889, 894, 895, 898, 904, 908, 959, 967, 968, 980, 982, 989, 1000, 1007, 1024, 1025, 1045, 1046, 1049, 1053, 1054, 1055, 1057, 1058, 1062, 1066, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1221, 1229, 1231, 1241, 1242, 1245, 1252, 1260, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1298, 1299, 1300, 1301, 1304, 1305, 1306, 1309, 1310, 1313, 1314, 1315, 1316, 1317, 1320], "calc_point": [0, 3, 8, 854, 855, 856, 857, 858, 859, 1316], "farm_result": [0, 2, 3, 8, 10, 823, 824, 832, 833, 852, 853, 864, 865, 873, 874, 1309, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "point": [0, 3, 8, 22, 24, 25, 32, 33, 34, 56, 66, 70, 73, 74, 81, 82, 84, 120, 129, 130, 134, 135, 136, 139, 142, 147, 149, 150, 151, 152, 153, 155, 173, 176, 177, 179, 180, 181, 183, 184, 194, 195, 255, 278, 372, 373, 376, 377, 378, 381, 445, 446, 449, 458, 470, 477, 485, 508, 515, 516, 520, 521, 522, 524, 525, 529, 533, 534, 538, 541, 544, 545, 549, 550, 552, 553, 554, 555, 558, 562, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 682, 686, 687, 689, 692, 693, 694, 695, 698, 699, 701, 702, 704, 705, 707, 711, 712, 715, 716, 719, 720, 722, 726, 727, 730, 731, 732, 736, 737, 738, 742, 743, 744, 748, 749, 753, 754, 755, 772, 780, 781, 785, 786, 790, 792, 795, 796, 800, 801, 806, 807, 810, 811, 816, 817, 852, 853, 854, 855, 856, 867, 868, 869, 871, 872, 876, 877, 912, 915, 916, 917, 918, 919, 921, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 947, 948, 949, 950, 951, 955, 956, 957, 958, 1007, 1009, 1057, 1137, 1175, 1176, 1177, 1180, 1186, 1187, 1190, 1196, 1197, 1200, 1206, 1207, 1210, 1230, 1261, 1280, 1281, 1287, 1288, 1290, 1291, 1294, 1297, 1299, 1305, 1308, 1309, 1310, 1312, 1313, 1315, 1316, 1317, 1318, 1319], "var": [0, 3, 8, 13, 17, 22, 28, 32, 52, 56, 78, 80, 81, 91, 100, 105, 113, 114, 126, 127, 130, 135, 139, 147, 156, 165, 167, 169, 171, 173, 178, 182, 195, 316, 320, 390, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 516, 521, 525, 530, 534, 539, 542, 545, 550, 553, 556, 561, 564, 565, 568, 574, 581, 585, 590, 596, 597, 602, 607, 609, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 681, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 794, 798, 799, 804, 808, 809, 814, 832, 837, 838, 841, 842, 843, 844, 845, 851, 852, 854, 855, 856, 857, 858, 859, 867, 869, 871, 872, 876, 959, 962, 980, 982, 989, 1000, 1007, 1026, 1042, 1044, 1049, 1050, 1051, 1052, 1055, 1062, 1071, 1073, 1079, 1081, 1091, 1092, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1137, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1175, 1220, 1226, 1227, 1229, 1239, 1240, 1245, 1257, 1258, 1290], "none": [0, 1, 3, 8, 9, 13, 17, 22, 23, 24, 28, 32, 33, 37, 38, 39, 41, 42, 44, 46, 47, 48, 52, 56, 57, 61, 62, 66, 68, 70, 77, 78, 80, 81, 86, 91, 93, 100, 105, 113, 114, 119, 120, 127, 128, 130, 135, 139, 142, 147, 149, 151, 156, 157, 161, 162, 163, 164, 165, 167, 168, 169, 173, 174, 178, 182, 185, 186, 195, 228, 239, 320, 346, 356, 441, 443, 445, 446, 447, 448, 450, 455, 457, 460, 463, 466, 468, 469, 475, 476, 482, 484, 487, 490, 493, 497, 498, 505, 507, 508, 510, 512, 513, 514, 516, 521, 522, 525, 530, 531, 534, 539, 540, 542, 543, 545, 550, 551, 553, 556, 561, 564, 568, 570, 574, 581, 585, 590, 596, 602, 603, 607, 614, 618, 623, 627, 630, 633, 634, 638, 640, 642, 645, 646, 651, 652, 657, 658, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 702, 707, 708, 714, 717, 725, 728, 733, 734, 739, 745, 746, 750, 751, 777, 778, 782, 787, 793, 794, 798, 799, 804, 805, 808, 809, 814, 818, 819, 823, 824, 825, 828, 829, 830, 831, 832, 834, 839, 846, 847, 852, 853, 854, 855, 856, 857, 858, 859, 864, 865, 866, 867, 869, 871, 872, 873, 875, 876, 877, 878, 880, 881, 882, 887, 910, 929, 931, 936, 938, 943, 945, 959, 960, 962, 963, 964, 980, 982, 983, 984, 985, 989, 990, 992, 993, 1000, 1001, 1007, 1009, 1010, 1011, 1016, 1026, 1029, 1049, 1055, 1062, 1063, 1064, 1065, 1071, 1072, 1073, 1075, 1076, 1079, 1080, 1081, 1083, 1095, 1096, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1126, 1127, 1128, 1129, 1132, 1134, 1135, 1137, 1138, 1139, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1173, 1175, 1176, 1177, 1180, 1186, 1187, 1190, 1196, 1197, 1200, 1206, 1207, 1210, 1220, 1229, 1230, 1245, 1261, 1262, 1263, 1299, 1309, 1311, 1312, 1316, 1317, 1320], "vars_to_amb": [0, 3, 8, 32, 33], "given": [0, 3, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 125, 127, 135, 139, 147, 156, 161, 162, 165, 167, 169, 173, 176, 178, 182, 287, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 634, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 686, 689, 692, 694, 698, 701, 704, 707, 708, 711, 714, 717, 725, 728, 733, 734, 739, 745, 746, 750, 751, 756, 777, 778, 782, 787, 793, 798, 804, 808, 814, 832, 834, 839, 846, 851, 881, 887, 896, 899, 900, 905, 959, 967, 968, 980, 982, 989, 1000, 1007, 1017, 1018, 1024, 1025, 1049, 1055, 1062, 1066, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1123, 1124, 1126, 1132, 1137, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1175, 1176, 1186, 1196, 1206, 1220, 1221, 1229, 1231, 1245, 1252, 1262, 1268, 1269, 1270, 1271, 1276, 1293, 1294, 1295, 1299, 1300, 1305, 1315], "set": [0, 1, 3, 8, 56, 57, 78, 91, 99, 161, 162, 167, 495, 497, 556, 607, 614, 825, 1294, 1305, 1308, 1314, 1315, 1318, 1319, 1320], "clear_mem": [0, 4, 8, 56, 60, 1317], "fals": [0, 2, 3, 4, 8, 13, 17, 22, 28, 32, 52, 56, 60, 70, 77, 78, 81, 91, 100, 101, 105, 113, 114, 119, 120, 127, 135, 139, 147, 149, 151, 156, 165, 167, 169, 173, 178, 182, 195, 205, 278, 320, 324, 441, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 565, 568, 570, 574, 581, 585, 590, 596, 602, 607, 608, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 734, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 823, 824, 825, 832, 834, 840, 846, 854, 855, 856, 857, 858, 859, 864, 866, 912, 913, 917, 919, 921, 923, 927, 929, 934, 936, 941, 943, 949, 951, 953, 957, 960, 1016, 1026, 1055, 1083, 1261, 1279, 1299, 1305, 1309], "print": [0, 8, 56, 67, 508, 512, 823, 825, 832, 852, 860, 862, 864, 867, 873, 876, 878, 959, 980, 982, 989, 997, 1000, 1005, 1062, 1071, 1073, 1079, 1262, 1267, 1308, 1309, 1310, 1311, 1312, 1314, 1316, 1317, 1318, 1319, 1320], "arg": [0, 8, 9, 56, 65, 67, 442, 443, 505, 507, 842, 1081, 1082, 1121, 1122, 1262, 1267, 1268, 1269, 1270, 1271, 1276, 1279, 1293, 1299], "vlim": [0, 8, 56, 67], "1": [0, 1, 8, 56, 67, 150, 151, 185, 187, 195, 206, 255, 274, 278, 320, 325, 366, 367, 368, 375, 441, 443, 444, 445, 446, 448, 495, 569, 570, 577, 638, 639, 641, 646, 652, 657, 658, 733, 739, 783, 818, 821, 823, 825, 832, 834, 835, 856, 859, 866, 880, 910, 967, 968, 1007, 1024, 1029, 1049, 1050, 1063, 1066, 1081, 1086, 1110, 1111, 1137, 1138, 1139, 1151, 1152, 1175, 1176, 1182, 1186, 1192, 1196, 1202, 1206, 1213, 1220, 1221, 1223, 1229, 1230, 1231, 1234, 1245, 1252, 1254, 1263, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1290, 1299, 1302, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "kwarg": [0, 8, 9, 10, 56, 65, 67, 127, 133, 169, 172, 195, 225, 320, 343, 442, 443, 505, 507, 513, 521, 530, 531, 539, 540, 542, 550, 581, 582, 586, 663, 666, 669, 672, 675, 678, 818, 821, 823, 825, 830, 832, 839, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 873, 875, 876, 878, 880, 889, 894, 895, 959, 960, 980, 981, 982, 983, 989, 990, 991, 1000, 1001, 1002, 1007, 1009, 1012, 1049, 1050, 1062, 1063, 1071, 1072, 1073, 1074, 1079, 1080, 1081, 1082, 1086, 1096, 1100, 1101, 1105, 1106, 1111, 1116, 1117, 1121, 1122, 1127, 1132, 1133, 1137, 1175, 1220, 1223, 1229, 1230, 1234, 1245, 1251, 1254, 1260, 1261, 1262, 1267, 1268, 1269, 1270, 1271, 1276, 1279, 1299], "function": [0, 8, 14, 19, 24, 30, 34, 53, 56, 67, 78, 79, 80, 84, 93, 102, 104, 105, 108, 129, 130, 136, 138, 139, 142, 151, 166, 175, 449, 455, 457, 458, 463, 470, 477, 482, 484, 485, 490, 501, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 558, 562, 566, 570, 581, 582, 583, 587, 592, 598, 604, 610, 616, 620, 625, 628, 631, 633, 636, 643, 647, 653, 659, 684, 691, 697, 703, 709, 854, 855, 856, 857, 858, 859, 860, 863, 900, 903, 905, 907, 910, 959, 971, 978, 979, 980, 982, 987, 988, 989, 995, 999, 1000, 1001, 1007, 1016, 1021, 1022, 1024, 1025, 1026, 1037, 1038, 1045, 1046, 1049, 1053, 1054, 1057, 1062, 1063, 1069, 1070, 1071, 1072, 1073, 1074, 1078, 1079, 1080, 1081, 1095, 1099, 1100, 1104, 1105, 1109, 1110, 1115, 1116, 1120, 1121, 1126, 1131, 1132, 1136, 1137, 1138, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163, 1168, 1169, 1172, 1175, 1176, 1186, 1196, 1206, 1220, 1221, 1229, 1231, 1241, 1242, 1245, 1252, 1262, 1268, 1269, 1270, 1271, 1276, 1280, 1286, 1291, 1292, 1293, 1294, 1295, 1298, 1299, 1300, 1305, 1308, 1310, 1311, 1319], "base": [0, 8, 10, 13, 14, 17, 19, 22, 24, 28, 30, 32, 34, 37, 52, 53, 56, 67, 78, 79, 81, 82, 84, 91, 93, 94, 100, 102, 105, 108, 113, 114, 124, 127, 135, 136, 139, 142, 147, 156, 165, 166, 167, 169, 173, 175, 178, 182, 195, 257, 320, 441, 445, 446, 447, 449, 455, 458, 466, 468, 470, 475, 477, 482, 485, 493, 497, 498, 501, 513, 521, 530, 539, 542, 550, 556, 558, 561, 562, 564, 566, 568, 574, 581, 583, 585, 587, 590, 592, 596, 598, 602, 604, 607, 610, 614, 616, 618, 620, 623, 625, 627, 628, 630, 631, 633, 636, 638, 640, 642, 643, 645, 647, 651, 653, 657, 659, 663, 666, 669, 672, 675, 678, 682, 684, 689, 691, 694, 697, 701, 703, 707, 709, 714, 717, 725, 728, 733, 739, 740, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 860, 881, 898, 904, 908, 909, 912, 951, 989, 1000, 1007, 1016, 1049, 1055, 1057, 1062, 1096, 1101, 1106, 1111, 1121, 1127, 1133, 1172, 1271, 1286, 1289, 1291, 1294, 1295, 1298, 1299, 1300, 1302, 1305, 1312, 1313, 1315, 1317, 1318, 1319, 1320], "verbos": [0, 1, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 37, 39, 41, 44, 46, 48, 50, 52, 54, 56, 57, 61, 67, 68, 78, 81, 85, 87, 91, 95, 96, 100, 105, 109, 110, 113, 114, 118, 121, 127, 131, 135, 139, 143, 144, 147, 156, 165, 167, 169, 173, 178, 182, 185, 187, 441, 443, 444, 445, 446, 447, 448, 451, 455, 459, 461, 463, 466, 468, 471, 475, 478, 482, 486, 488, 490, 493, 497, 498, 502, 503, 508, 511, 513, 517, 518, 521, 526, 527, 530, 535, 536, 539, 542, 546, 547, 550, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 590, 593, 596, 599, 600, 602, 605, 607, 611, 614, 618, 621, 623, 627, 630, 633, 638, 640, 642, 645, 648, 649, 651, 654, 655, 657, 660, 661, 663, 666, 669, 672, 675, 678, 682, 685, 688, 689, 694, 700, 701, 706, 707, 710, 713, 714, 717, 721, 723, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 791, 793, 798, 802, 804, 808, 812, 814, 818, 821, 832, 834, 835, 854, 855, 856, 857, 858, 859, 866, 959, 966, 967, 968, 969, 980, 982, 986, 989, 1000, 1007, 1010, 1011, 1016, 1017, 1018, 1024, 1025, 1026, 1029, 1049, 1050, 1055, 1058, 1062, 1066, 1067, 1071, 1073, 1079, 1081, 1086, 1095, 1100, 1105, 1110, 1114, 1116, 1121, 1123, 1124, 1126, 1130, 1132, 1138, 1142, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1182, 1186, 1192, 1196, 1202, 1206, 1213, 1220, 1221, 1223, 1229, 1231, 1234, 1245, 1252, 1254, 1262, 1263, 1267, 1278, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "chunk": [0, 1, 2, 3, 8, 14, 15, 19, 20, 24, 26, 30, 34, 35, 53, 54, 56, 57, 58, 70, 77, 78, 79, 84, 87, 93, 96, 102, 108, 110, 121, 131, 136, 142, 144, 166, 175, 449, 451, 458, 461, 470, 471, 477, 478, 485, 488, 501, 503, 518, 527, 536, 547, 558, 559, 562, 566, 578, 583, 587, 588, 592, 593, 598, 600, 604, 605, 610, 611, 616, 620, 621, 625, 628, 631, 636, 643, 647, 649, 653, 655, 659, 661, 684, 688, 691, 697, 700, 703, 706, 709, 713, 723, 802, 812, 1057, 1058, 1305, 1309, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "d": [0, 8, 56, 58, 161, 162, 167, 168, 192, 193, 195, 274, 320, 410, 642, 733, 734, 823, 824, 959, 960, 982, 983, 1095, 1096, 1137, 1175, 1176, 1177, 1180, 1186, 1187, 1190, 1196, 1197, 1200, 1206, 1207, 1210, 1280, 1281, 1299, 1301, 1310], "update_idata": [0, 8, 56, 68], "idata": [0, 4, 8, 15, 20, 26, 35, 54, 56, 60, 62, 63, 68, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058], "add": [0, 8, 13, 17, 22, 28, 32, 41, 43, 52, 56, 68, 70, 72, 78, 81, 83, 91, 97, 100, 105, 107, 111, 113, 114, 117, 123, 127, 132, 135, 139, 141, 145, 147, 155, 156, 161, 163, 165, 167, 169, 173, 178, 181, 182, 184, 185, 187, 190, 441, 442, 443, 444, 445, 446, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 519, 521, 528, 530, 537, 539, 542, 548, 550, 556, 561, 564, 568, 573, 574, 580, 581, 585, 590, 596, 602, 607, 609, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 724, 725, 728, 733, 738, 739, 744, 745, 749, 750, 755, 756, 777, 781, 782, 786, 787, 792, 793, 796, 798, 801, 804, 807, 808, 811, 814, 817, 818, 820, 825, 832, 834, 835, 854, 855, 856, 857, 858, 859, 881, 883, 884, 885, 886, 912, 913, 919, 921, 923, 929, 931, 936, 938, 943, 945, 951, 953, 959, 980, 982, 989, 991, 1000, 1002, 1007, 1010, 1011, 1012, 1049, 1055, 1062, 1071, 1073, 1079, 1081, 1083, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1293, 1310, 1311, 1314, 1315, 1316, 1317, 1318], "memori": [0, 1, 2, 3, 4, 8, 15, 20, 26, 35, 54, 56, 57, 60, 63, 68, 87, 96, 110, 121, 131, 144, 195, 245, 320, 447, 448, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058, 1137, 1175, 1305, 1318], "option": [0, 1, 3, 8, 9, 10, 23, 24, 33, 37, 38, 42, 47, 56, 57, 61, 62, 65, 66, 67, 68, 77, 79, 80, 82, 93, 104, 108, 119, 120, 127, 128, 130, 138, 142, 149, 151, 161, 162, 163, 164, 168, 174, 185, 191, 287, 441, 442, 443, 444, 445, 446, 448, 455, 457, 463, 466, 469, 476, 482, 484, 490, 493, 495, 501, 507, 510, 512, 514, 516, 522, 525, 531, 534, 540, 543, 545, 551, 553, 570, 575, 582, 586, 603, 619, 634, 639, 641, 645, 646, 651, 652, 657, 658, 701, 702, 708, 734, 745, 746, 750, 751, 788, 793, 794, 798, 799, 805, 808, 809, 819, 821, 824, 825, 834, 839, 846, 847, 852, 853, 854, 855, 856, 857, 858, 859, 865, 866, 869, 871, 872, 875, 876, 878, 880, 881, 882, 894, 895, 913, 917, 923, 927, 931, 934, 938, 941, 945, 949, 953, 957, 960, 963, 964, 981, 983, 984, 985, 990, 992, 993, 1001, 1009, 1010, 1011, 1016, 1026, 1029, 1050, 1063, 1064, 1065, 1071, 1072, 1074, 1075, 1076, 1079, 1080, 1082, 1083, 1086, 1096, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1108, 1111, 1112, 1113, 1118, 1119, 1127, 1128, 1129, 1133, 1134, 1135, 1137, 1139, 1140, 1141, 1147, 1148, 1153, 1154, 1159, 1160, 1165, 1166, 1175, 1177, 1180, 1187, 1190, 1197, 1200, 1207, 1210, 1223, 1230, 1234, 1251, 1254, 1260, 1261, 1262, 1263, 1279, 1294, 1298, 1305, 1310, 1312, 1313, 1315, 1318, 1319], "updat": [0, 8, 56, 68, 127, 130, 184, 513, 516, 521, 525, 530, 534, 539, 542, 545, 550, 553, 590, 796, 801, 807, 811, 817, 1007, 1045, 1046, 1049, 1053, 1054, 1081, 1220, 1229, 1241, 1242, 1245, 1305, 1310, 1320], "return": [0, 8, 13, 17, 22, 28, 32, 52, 56, 68, 78, 81, 91, 100, 105, 113, 114, 116, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 195, 198, 199, 200, 204, 207, 208, 210, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 255, 278, 320, 322, 323, 326, 327, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 447, 455, 466, 468, 475, 482, 493, 497, 498, 500, 513, 521, 523, 530, 532, 539, 542, 550, 556, 561, 564, 568, 574, 576, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 635, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 696, 701, 707, 714, 717, 725, 728, 733, 735, 739, 741, 745, 747, 750, 752, 756, 777, 779, 782, 784, 787, 789, 793, 798, 804, 808, 814, 823, 842, 847, 854, 855, 856, 857, 858, 859, 867, 876, 912, 919, 921, 929, 936, 943, 951, 959, 980, 982, 989, 1000, 1055, 1062, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1123, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1316], "cleanup": [0, 8, 56, 59], "after": [0, 2, 3, 8, 10, 56, 59, 82, 151, 182, 183, 441, 570, 590, 793, 795, 798, 800, 804, 806, 808, 810, 814, 816, 854, 855, 857, 858, 859, 1310, 1314], "properti": [0, 8, 12, 13, 17, 22, 28, 32, 52, 56, 63, 70, 74, 75, 76, 78, 81, 91, 100, 105, 113, 114, 122, 124, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 185, 188, 189, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 776, 777, 782, 787, 793, 798, 804, 808, 814, 818, 822, 959, 965, 970, 972, 973, 976, 977, 980, 982, 989, 994, 996, 998, 1000, 1003, 1004, 1006, 1007, 1013, 1019, 1020, 1023, 1030, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1049, 1055, 1062, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1262, 1269, 1271, 1275], "idata_mem": [0, 8, 56, 63], "current": [0, 8, 12, 39, 44, 48, 56, 63, 287, 1007, 1020, 1049, 1081, 1220, 1229, 1245, 1294, 1313, 1315], "update_n_turbin": [0, 8, 56, 69], "reset": [0, 8, 56, 69, 455, 463, 466, 482, 490, 493, 607, 613, 1312, 1314], "accord": [0, 8, 56, 69, 127, 130, 443, 513, 516, 521, 525, 530, 534, 539, 542, 545, 550, 553, 672, 889, 894, 895, 1311, 1315], "self": [0, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 69, 78, 81, 87, 91, 96, 100, 105, 110, 113, 114, 116, 120, 121, 127, 131, 135, 139, 144, 147, 156, 165, 167, 169, 173, 178, 182, 195, 197, 198, 199, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 500, 503, 513, 518, 521, 523, 527, 530, 532, 536, 539, 542, 547, 550, 556, 559, 561, 564, 568, 574, 575, 576, 578, 581, 585, 588, 590, 593, 596, 600, 602, 605, 607, 611, 614, 618, 621, 623, 627, 630, 633, 635, 638, 640, 642, 645, 649, 651, 655, 657, 661, 663, 666, 669, 672, 675, 678, 682, 688, 689, 694, 696, 700, 701, 706, 707, 713, 714, 717, 723, 725, 728, 733, 735, 739, 741, 745, 747, 750, 752, 756, 777, 779, 782, 784, 787, 789, 793, 798, 802, 804, 808, 812, 814, 830, 1032, 1036, 1055, 1058, 1088, 1090, 1116, 1117, 1121, 1122, 1172, 1173, 1180, 1190, 1200, 1210, 1215, 1217, 1236, 1238, 1269, 1271, 1272], "get_models_data": [0, 8, 56, 62], "creat": [0, 8, 13, 17, 22, 28, 32, 52, 56, 62, 66, 70, 73, 78, 81, 91, 100, 105, 113, 114, 126, 127, 129, 130, 134, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 195, 225, 320, 343, 447, 455, 466, 468, 475, 482, 493, 495, 497, 498, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 555, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 818, 821, 823, 825, 867, 871, 873, 876, 878, 1055, 1083, 1293, 1298, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "xarrai": [0, 2, 3, 8, 10, 13, 17, 22, 28, 32, 39, 44, 48, 52, 56, 62, 66, 70, 71, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 448, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 585, 586, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 823, 824, 832, 833, 852, 853, 865, 868, 873, 874, 877, 1055, 1291, 1305, 1310, 1316], "from": [0, 8, 13, 15, 17, 20, 22, 23, 25, 26, 28, 32, 35, 52, 54, 56, 62, 70, 73, 78, 81, 82, 87, 91, 96, 100, 105, 110, 113, 114, 117, 119, 120, 121, 127, 128, 129, 131, 135, 139, 144, 147, 149, 152, 156, 165, 167, 169, 173, 174, 178, 182, 190, 191, 192, 193, 195, 200, 204, 206, 287, 320, 325, 398, 399, 423, 424, 439, 440, 443, 444, 447, 448, 451, 455, 457, 461, 466, 468, 471, 475, 478, 482, 484, 488, 493, 495, 497, 498, 503, 513, 514, 515, 518, 521, 522, 524, 527, 530, 531, 533, 536, 539, 540, 541, 542, 543, 544, 547, 550, 551, 552, 556, 557, 559, 561, 564, 568, 571, 574, 578, 581, 585, 586, 588, 590, 593, 596, 600, 602, 603, 605, 607, 611, 614, 618, 621, 623, 627, 630, 633, 638, 640, 642, 645, 649, 651, 655, 657, 661, 663, 666, 669, 672, 675, 678, 682, 683, 688, 689, 694, 700, 701, 702, 706, 707, 708, 713, 714, 717, 723, 725, 728, 733, 734, 739, 745, 750, 756, 777, 782, 783, 787, 793, 798, 802, 804, 808, 812, 814, 818, 823, 824, 857, 858, 859, 863, 869, 871, 872, 876, 880, 881, 882, 883, 884, 909, 1007, 1010, 1011, 1029, 1042, 1049, 1055, 1058, 1081, 1137, 1175, 1220, 1229, 1245, 1261, 1282, 1283, 1284, 1285, 1292, 1293, 1294, 1298, 1299, 1301, 1302, 1305, 1307, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1320], "input": [0, 8, 56, 62, 79, 80, 104, 138, 169, 170, 171, 320, 366, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 581, 582, 585, 586, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 797, 803, 813, 1137, 1175, 1278, 1286, 1294, 1301, 1305, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "new_point_data": [0, 8, 56, 66], "states_indic": [0, 8, 56, 66], "contain": [0, 8, 56, 66, 70, 71, 73, 508, 881, 883, 884, 1026, 1261, 1291, 1292, 1293, 1294, 1295, 1299, 1309, 1310, 1311, 1313, 1314, 1316, 1318], "onli": [0, 8, 56, 66, 68, 441, 521, 682, 725, 726, 728, 731, 733, 737, 739, 743, 745, 748, 750, 754, 782, 785, 787, 790, 869, 871, 872, 910, 1016, 1137, 1175, 1305, 1307, 1308, 1311, 1316, 1317, 1318, 1320], "finalize_model": [0, 8, 56, 61], "call": [0, 8, 56, 61, 78, 80, 91, 104, 105, 138, 139, 590, 1007, 1016, 1045, 1046, 1049, 1053, 1054, 1081, 1137, 1175, 1176, 1186, 1196, 1206, 1220, 1229, 1241, 1242, 1245, 1291, 1294, 1305, 1307, 1313, 1314, 1316, 1317, 1320], "routin": [0, 8, 56, 61], "kept": [0, 3, 8, 56, 61], "new": [0, 8, 56, 65, 127, 133, 134, 169, 172, 184, 195, 206, 225, 278, 287, 320, 325, 343, 368, 513, 520, 521, 529, 530, 538, 539, 542, 549, 550, 555, 663, 666, 669, 672, 675, 678, 796, 801, 807, 811, 817, 823, 832, 852, 860, 861, 864, 867, 873, 876, 878, 974, 975, 1007, 1014, 1015, 1049, 1081, 1176, 1178, 1179, 1186, 1188, 1189, 1196, 1198, 1199, 1206, 1208, 1209, 1220, 1229, 1245, 1305, 1307, 1310, 1311], "algo_typ": [0, 8, 56, 65], "run": [0, 1, 8, 13, 17, 22, 28, 32, 52, 56, 57, 65, 78, 81, 91, 93, 100, 101, 105, 113, 114, 117, 127, 133, 135, 139, 147, 156, 165, 167, 169, 170, 172, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 608, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 664, 666, 667, 669, 670, 672, 673, 675, 676, 678, 680, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 797, 798, 803, 804, 808, 813, 814, 823, 832, 852, 860, 861, 864, 867, 873, 876, 878, 1007, 1009, 1045, 1046, 1053, 1054, 1055, 1230, 1241, 1242, 1262, 1263, 1268, 1269, 1270, 1271, 1276, 1291, 1294, 1295, 1305, 1308, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1319], "time": [0, 8, 56, 65, 127, 133, 169, 172, 448, 513, 521, 530, 539, 542, 550, 663, 666, 669, 672, 675, 678, 823, 832, 846, 852, 860, 861, 864, 867, 873, 876, 878, 1055, 1137, 1175, 1295, 1305, 1307, 1308, 1309, 1312, 1313, 1314, 1317, 1318, 1319], "factori": [0, 8, 56, 65, 127, 133, 169, 172, 513, 521, 530, 539, 542, 550, 663, 666, 669, 672, 675, 678, 823, 832, 852, 860, 861, 864, 867, 873, 876, 878], "__repr__": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 116, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 195, 233, 320, 350, 447, 455, 466, 468, 475, 482, 493, 497, 498, 500, 513, 521, 523, 530, 532, 539, 542, 550, 556, 561, 564, 568, 574, 576, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 635, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 696, 701, 707, 714, 717, 725, 728, 733, 735, 739, 741, 745, 747, 750, 752, 756, 777, 779, 782, 784, 787, 789, 793, 798, 804, 808, 814, 1055], "repr": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 116, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 195, 233, 320, 350, 447, 455, 466, 468, 475, 482, 493, 497, 498, 500, 513, 521, 523, 530, 532, 539, 542, 550, 556, 561, 564, 568, 574, 576, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 635, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 696, 701, 707, 714, 717, 725, 728, 733, 735, 739, 741, 745, 747, 750, 752, 756, 777, 779, 782, 784, 787, 789, 793, 798, 804, 808, 814, 1055], "data_to_stor": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 117, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055], "algo": [0, 8, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 39, 41, 44, 46, 48, 50, 52, 53, 54, 55, 56, 70, 77, 78, 79, 80, 81, 84, 85, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 123, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 151, 152, 154, 156, 158, 160, 165, 166, 167, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 447, 449, 451, 452, 454, 455, 458, 459, 461, 462, 463, 465, 466, 468, 470, 471, 472, 474, 475, 477, 478, 479, 481, 482, 485, 486, 488, 489, 490, 492, 493, 496, 497, 498, 501, 502, 503, 504, 508, 511, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 571, 574, 578, 581, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 610, 611, 612, 614, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 640, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 666, 669, 672, 675, 678, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 736, 737, 738, 739, 742, 743, 744, 745, 748, 749, 750, 753, 754, 755, 756, 772, 777, 780, 781, 782, 785, 786, 787, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 810, 811, 812, 813, 814, 816, 817, 832, 834, 846, 852, 853, 1007, 1009, 1029, 1045, 1046, 1049, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1081, 1220, 1229, 1230, 1241, 1242, 1245, 1251, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "mdata": [0, 8, 13, 14, 15, 17, 19, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 52, 53, 54, 56, 78, 81, 84, 87, 91, 93, 96, 100, 102, 105, 108, 110, 113, 114, 117, 119, 120, 121, 125, 127, 129, 130, 131, 134, 135, 136, 139, 142, 144, 147, 149, 151, 152, 156, 165, 166, 167, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 447, 449, 451, 455, 458, 461, 466, 468, 470, 471, 475, 477, 478, 482, 485, 488, 493, 497, 498, 501, 503, 513, 515, 516, 518, 520, 521, 524, 525, 527, 529, 530, 533, 534, 536, 538, 539, 541, 542, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 561, 562, 564, 566, 568, 570, 571, 574, 578, 581, 583, 585, 587, 588, 590, 592, 593, 596, 598, 600, 602, 604, 605, 607, 610, 611, 614, 616, 618, 620, 621, 623, 625, 627, 628, 630, 631, 633, 636, 638, 640, 642, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 666, 669, 672, 675, 678, 682, 684, 686, 687, 688, 689, 691, 692, 693, 694, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 736, 737, 738, 739, 742, 743, 744, 745, 748, 749, 750, 753, 754, 755, 756, 772, 773, 774, 775, 777, 780, 781, 782, 785, 786, 787, 790, 792, 793, 795, 796, 798, 800, 801, 802, 804, 806, 807, 808, 810, 811, 812, 814, 816, 817, 1055, 1057, 1058], "local": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 117, 119, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 734, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055, 1294, 1306, 1307, 1308, 1310, 1313, 1318], "store": [0, 3, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 71, 73, 78, 81, 87, 91, 92, 96, 100, 105, 110, 113, 114, 117, 119, 121, 127, 131, 135, 139, 144, 147, 149, 156, 165, 167, 169, 173, 178, 182, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 503, 513, 518, 521, 527, 530, 536, 539, 542, 547, 550, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 590, 593, 596, 600, 602, 605, 607, 611, 614, 618, 621, 623, 627, 630, 633, 638, 640, 642, 645, 649, 651, 655, 657, 661, 663, 666, 669, 672, 675, 678, 682, 688, 689, 694, 700, 701, 706, 707, 713, 714, 717, 723, 725, 728, 733, 739, 745, 750, 756, 772, 777, 782, 787, 793, 798, 802, 804, 808, 812, 814, 1055, 1058, 1137, 1175, 1311], "intend": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 117, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 832, 847, 1055], "iter": [0, 8, 9, 10, 11, 12, 13, 17, 22, 28, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 78, 81, 91, 100, 105, 113, 114, 117, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055, 1287, 1305, 1317], "from_data_or_stor": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 119, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055], "ret_dim": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 119, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055], "safe": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 119, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055], "keep": [0, 1, 8, 13, 17, 22, 28, 32, 52, 56, 57, 78, 81, 91, 97, 100, 105, 111, 113, 114, 123, 127, 132, 135, 139, 145, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 519, 521, 528, 530, 537, 539, 542, 548, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 724, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 982, 1055, 1295, 1307], "sub": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 97, 100, 105, 111, 113, 114, 123, 127, 132, 135, 139, 145, 147, 156, 165, 167, 169, 173, 178, 182, 287, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 519, 521, 528, 530, 537, 539, 542, 548, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 724, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1050, 1055, 1083, 1295, 1305, 1310], "keep_model": [0, 1, 4, 8, 13, 17, 22, 28, 32, 52, 56, 57, 60, 61, 78, 81, 91, 97, 100, 105, 111, 113, 114, 123, 127, 132, 135, 139, 145, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 519, 521, 528, 530, 537, 539, 542, 548, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 724, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1029, 1055], "model_id": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 124, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055], "uniqu": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 124, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055], "id": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 124, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 441, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055], "type": [0, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 46, 47, 52, 54, 56, 78, 81, 87, 91, 96, 100, 105, 110, 113, 114, 121, 124, 127, 131, 135, 139, 144, 147, 156, 161, 162, 165, 167, 169, 173, 178, 182, 195, 206, 225, 287, 320, 325, 343, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 503, 508, 510, 512, 513, 518, 521, 527, 530, 536, 539, 542, 547, 550, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 590, 593, 596, 600, 602, 605, 607, 611, 614, 618, 621, 623, 627, 630, 633, 638, 640, 642, 645, 649, 651, 655, 657, 661, 663, 666, 669, 672, 675, 678, 682, 688, 689, 694, 700, 701, 706, 707, 713, 714, 717, 723, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 802, 804, 808, 812, 814, 878, 880, 1055, 1058, 1083, 1116, 1117, 1121, 1122, 1137, 1172, 1173, 1175, 1269, 1271, 1272, 1290, 1291, 1294, 1298, 1305, 1308, 1309, 1310, 1311, 1313, 1314, 1316, 1318, 1320], "v": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 126, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055, 1137, 1175, 1282, 1283], "variabl": [0, 2, 3, 8, 10, 13, 14, 16, 17, 19, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 36, 46, 47, 52, 53, 55, 56, 78, 79, 80, 81, 84, 88, 91, 93, 98, 100, 102, 103, 104, 105, 108, 112, 113, 114, 120, 126, 127, 134, 135, 136, 137, 138, 139, 142, 146, 147, 148, 149, 151, 154, 156, 158, 165, 166, 167, 169, 171, 173, 174, 178, 179, 180, 181, 182, 183, 184, 390, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 447, 448, 449, 452, 455, 457, 458, 462, 466, 468, 470, 472, 475, 476, 477, 479, 482, 484, 485, 489, 493, 495, 497, 498, 501, 504, 513, 520, 521, 529, 530, 538, 539, 542, 549, 550, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 574, 575, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 596, 597, 598, 601, 602, 603, 604, 606, 607, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 650, 651, 652, 653, 656, 657, 658, 659, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 679, 681, 682, 689, 690, 694, 701, 707, 708, 714, 715, 716, 717, 718, 719, 720, 722, 725, 727, 728, 729, 730, 732, 733, 734, 736, 738, 739, 740, 742, 744, 745, 746, 749, 750, 751, 753, 755, 756, 777, 778, 780, 781, 782, 783, 786, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 816, 817, 825, 832, 837, 838, 841, 843, 844, 845, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 863, 864, 866, 867, 869, 870, 871, 872, 873, 875, 876, 878, 880, 959, 962, 963, 964, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 984, 985, 988, 989, 992, 993, 999, 1000, 1007, 1010, 1011, 1014, 1015, 1016, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1035, 1036, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1059, 1062, 1063, 1064, 1065, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1080, 1081, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1126, 1128, 1129, 1132, 1134, 1135, 1137, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1175, 1176, 1178, 1179, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1193, 1194, 1195, 1196, 1198, 1199, 1201, 1203, 1204, 1205, 1206, 1208, 1209, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1286, 1289, 1290, 1293, 1294, 1295, 1296, 1305, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "flag": [0, 2, 3, 8, 10, 13, 17, 22, 28, 32, 39, 44, 48, 52, 56, 78, 81, 91, 93, 100, 101, 105, 113, 114, 122, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 195, 273, 320, 444, 447, 448, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 575, 581, 585, 590, 596, 602, 607, 608, 614, 615, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 734, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 823, 824, 825, 834, 840, 846, 847, 854, 855, 856, 857, 858, 859, 887, 917, 927, 934, 941, 949, 957, 959, 970, 980, 982, 989, 1000, 1007, 1013, 1016, 1021, 1026, 1033, 1049, 1055, 1062, 1068, 1071, 1073, 1077, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1143, 1145, 1149, 1151, 1155, 1157, 1161, 1163, 1167, 1169, 1171, 1172, 1174, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1262, 1263, 1269, 1271, 1275, 1307, 1310], "get_data": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 774, 777, 782, 787, 793, 798, 804, 808, 814, 867, 869, 876, 1055], "target": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 777, 782, 787, 793, 798, 804, 808, 814, 1055, 1315], "lookup": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 586, 590, 591, 596, 602, 607, 614, 618, 623, 624, 627, 630, 633, 638, 640, 642, 645, 646, 651, 652, 657, 658, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 777, 782, 787, 793, 798, 804, 808, 814, 846, 1055, 1294, 1305], "smfp": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 777, 782, 787, 793, 798, 804, 808, 814, 1055], "getter": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 777, 782, 787, 793, 798, 804, 808, 814, 1055], "entri": [0, 4, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 60, 62, 70, 72, 78, 81, 87, 91, 96, 100, 105, 110, 113, 114, 120, 121, 127, 131, 135, 139, 144, 147, 156, 161, 165, 167, 169, 173, 178, 182, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 503, 513, 518, 521, 527, 530, 536, 539, 542, 547, 550, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 590, 593, 596, 600, 602, 605, 607, 611, 614, 618, 621, 623, 627, 630, 633, 638, 640, 642, 645, 649, 651, 655, 657, 661, 663, 666, 669, 672, 675, 678, 682, 688, 689, 694, 700, 701, 706, 707, 713, 714, 717, 723, 725, 728, 733, 739, 745, 750, 756, 774, 777, 782, 787, 793, 798, 802, 804, 808, 812, 814, 863, 895, 1055, 1058, 1137, 1175, 1293, 1305, 1308, 1315], "reduce_st": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 125, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 832, 849, 1055, 1318], "sel_stat": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 125, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055], "obj": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 125, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 195, 204, 320, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1021, 1022, 1024, 1025, 1055, 1221, 1231, 1252], "modifi": [0, 8, 13, 16, 17, 21, 22, 25, 27, 28, 31, 32, 36, 52, 55, 56, 78, 81, 88, 91, 98, 100, 103, 105, 112, 113, 114, 125, 127, 129, 130, 135, 137, 139, 146, 147, 151, 154, 156, 158, 165, 167, 169, 173, 178, 179, 180, 182, 447, 452, 455, 462, 466, 468, 472, 475, 479, 482, 489, 493, 497, 498, 504, 513, 515, 516, 521, 524, 525, 530, 533, 534, 539, 541, 542, 544, 545, 550, 552, 553, 556, 560, 561, 563, 564, 567, 568, 570, 574, 581, 584, 585, 589, 590, 594, 596, 601, 602, 606, 607, 612, 614, 617, 618, 622, 623, 626, 627, 629, 630, 632, 633, 637, 638, 640, 642, 644, 645, 650, 651, 656, 657, 662, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 720, 722, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055, 1059, 1291], "select": [0, 8, 13, 17, 22, 28, 32, 46, 52, 56, 65, 78, 81, 91, 93, 100, 105, 113, 114, 125, 127, 128, 133, 135, 139, 147, 156, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 178, 182, 184, 380, 385, 447, 448, 455, 457, 463, 466, 468, 475, 482, 484, 490, 493, 497, 498, 512, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 582, 583, 585, 587, 590, 592, 596, 598, 602, 604, 607, 610, 614, 616, 618, 620, 623, 625, 627, 628, 630, 631, 633, 636, 638, 640, 642, 643, 645, 647, 651, 653, 657, 659, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 715, 716, 717, 719, 725, 726, 727, 728, 730, 732, 733, 736, 739, 742, 745, 748, 750, 753, 756, 777, 780, 782, 785, 787, 790, 793, 796, 798, 801, 804, 807, 808, 811, 814, 817, 861, 873, 875, 959, 960, 962, 963, 964, 980, 982, 983, 984, 985, 989, 990, 992, 993, 996, 998, 1000, 1001, 1004, 1006, 1007, 1009, 1016, 1026, 1039, 1043, 1049, 1055, 1062, 1064, 1065, 1071, 1073, 1075, 1076, 1079, 1081, 1083, 1097, 1098, 1102, 1103, 1107, 1108, 1112, 1113, 1118, 1119, 1128, 1129, 1134, 1135, 1140, 1141, 1147, 1148, 1153, 1154, 1159, 1160, 1165, 1166, 1220, 1229, 1245, 1286, 1289, 1290, 1291, 1292, 1294, 1296, 1305, 1309, 1310, 1311, 1312, 1313, 1316, 1318], "subset": [0, 8, 13, 17, 22, 28, 32, 52, 56, 70, 71, 73, 78, 81, 91, 100, 105, 113, 114, 125, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 448, 455, 457, 463, 466, 468, 475, 482, 484, 490, 493, 497, 498, 508, 512, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 1055, 1291, 1294, 1305, 1311], "centr": [1, 150, 429, 568, 569, 577, 596, 694, 695, 701, 702, 728, 730, 733, 736, 739, 742, 750, 753, 929, 930, 943, 944, 1280, 1281, 1294, 1299, 1301, 1305, 1308, 1310, 1311, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "rotor_wd": [1, 1310, 1311, 1312, 1314, 1315, 1318, 1319], "auto": [1, 1309, 1310, 1311, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "basic_ctrl": [1, 1311], "1000": [1, 56, 57, 375, 590, 591, 846, 1290, 1309, 1310, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "dbook": [1, 56, 57, 443, 1308], "modelbook": [1, 56, 57, 496, 508, 509, 510, 511, 512, 876, 878, 879, 1292, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "book": [1, 56, 57, 161, 162, 191, 443, 496, 717, 718, 729, 734, 740, 746, 751, 778, 783, 788, 876, 878, 879, 880, 881, 882, 1304, 1306, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319], "windfarm": [1, 56, 57, 185, 186, 187, 188, 189, 441, 442, 443, 444, 445, 446, 496, 823, 824, 959, 982, 994, 1003, 1023, 1292, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "wind": [1, 46, 47, 56, 57, 91, 94, 156, 161, 162, 185, 186, 187, 188, 318, 386, 387, 397, 398, 399, 403, 404, 422, 423, 424, 430, 432, 441, 442, 443, 444, 445, 446, 455, 468, 469, 475, 476, 496, 497, 590, 591, 623, 624, 639, 641, 645, 646, 651, 652, 657, 658, 663, 666, 669, 672, 675, 682, 689, 690, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 804, 823, 824, 826, 827, 840, 854, 855, 856, 857, 858, 859, 867, 869, 871, 872, 876, 880, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 908, 911, 959, 980, 982, 989, 994, 1000, 1003, 1007, 1023, 1049, 1062, 1071, 1073, 1079, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1282, 1283, 1284, 1285, 1286, 1290, 1292, 1293, 1294, 1295, 1296, 1299, 1300, 1301, 1304, 1305, 1306, 1309, 1310, 1311, 1313, 1314, 1316, 1317, 1318, 1320], "str": [1, 2, 3, 5, 11, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 42, 46, 47, 53, 55, 56, 57, 65, 70, 71, 72, 73, 79, 80, 84, 88, 91, 93, 98, 99, 102, 103, 104, 108, 112, 114, 117, 119, 120, 126, 130, 133, 134, 136, 137, 138, 142, 146, 147, 148, 149, 151, 154, 158, 161, 162, 166, 167, 168, 171, 172, 174, 179, 180, 181, 183, 184, 185, 186, 189, 192, 193, 195, 246, 287, 320, 362, 375, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 455, 457, 458, 462, 470, 472, 475, 476, 477, 479, 482, 484, 485, 489, 495, 496, 501, 504, 505, 507, 508, 510, 512, 513, 514, 516, 520, 525, 529, 534, 538, 545, 549, 553, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 570, 575, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 598, 601, 602, 603, 604, 606, 607, 609, 610, 612, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 628, 629, 631, 632, 633, 634, 636, 637, 639, 641, 643, 644, 645, 646, 647, 650, 651, 652, 653, 656, 657, 658, 659, 662, 665, 668, 671, 674, 677, 681, 689, 690, 707, 708, 715, 716, 717, 718, 719, 720, 722, 727, 729, 730, 732, 733, 734, 736, 738, 739, 740, 742, 744, 745, 746, 749, 750, 751, 753, 755, 774, 777, 778, 780, 781, 783, 786, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 825, 828, 829, 830, 831, 837, 838, 841, 843, 844, 845, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 866, 869, 870, 871, 872, 875, 880, 881, 883, 884, 885, 886, 887, 888, 889, 894, 895, 913, 923, 931, 938, 945, 953, 960, 961, 965, 974, 975, 976, 977, 981, 982, 983, 990, 1001, 1009, 1010, 1011, 1026, 1029, 1042, 1044, 1047, 1048, 1050, 1057, 1059, 1062, 1063, 1071, 1072, 1074, 1079, 1080, 1083, 1093, 1094, 1096, 1101, 1106, 1111, 1127, 1133, 1137, 1139, 1146, 1152, 1158, 1164, 1170, 1175, 1180, 1185, 1190, 1195, 1200, 1205, 1210, 1218, 1219, 1228, 1230, 1243, 1244, 1251, 1259, 1260, 1261, 1262, 1263, 1278, 1279, 1290, 1305, 1311], "Will": 1, "look": [1, 717, 718, 729, 734, 740, 746, 751, 778, 783, 788, 846, 1308, 1310, 1313, 1315, 1319], "up": [1, 717, 718, 729, 734, 740, 746, 751, 778, 783, 788, 846], "dict": [1, 2, 3, 9, 10, 14, 15, 19, 20, 22, 23, 24, 25, 26, 30, 34, 35, 40, 45, 46, 47, 49, 53, 54, 56, 57, 62, 63, 65, 67, 68, 70, 71, 73, 79, 80, 84, 87, 91, 92, 93, 96, 99, 102, 104, 108, 110, 121, 130, 131, 134, 136, 138, 142, 144, 149, 151, 166, 170, 174, 179, 180, 181, 192, 193, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 455, 457, 458, 461, 470, 471, 475, 476, 477, 478, 482, 484, 485, 488, 495, 496, 501, 503, 505, 506, 507, 508, 513, 514, 516, 518, 520, 525, 527, 529, 531, 534, 536, 538, 540, 545, 547, 549, 553, 555, 556, 557, 558, 559, 562, 566, 570, 578, 582, 583, 585, 586, 587, 588, 592, 593, 596, 597, 598, 600, 603, 604, 605, 610, 611, 616, 619, 620, 621, 625, 628, 631, 636, 639, 641, 643, 645, 646, 647, 649, 651, 652, 653, 655, 657, 658, 659, 661, 664, 667, 670, 673, 676, 680, 688, 694, 695, 700, 701, 702, 706, 713, 715, 716, 717, 718, 719, 720, 722, 723, 727, 729, 730, 732, 734, 736, 738, 740, 742, 744, 746, 749, 751, 753, 755, 776, 778, 780, 781, 783, 786, 787, 788, 792, 793, 794, 798, 799, 802, 804, 805, 808, 809, 812, 821, 825, 827, 837, 838, 839, 848, 849, 850, 854, 855, 856, 857, 858, 859, 863, 866, 871, 872, 875, 880, 881, 889, 894, 895, 913, 923, 931, 938, 945, 953, 960, 974, 975, 981, 983, 990, 1001, 1007, 1009, 1010, 1011, 1050, 1051, 1052, 1057, 1058, 1062, 1063, 1071, 1072, 1074, 1079, 1080, 1082, 1086, 1091, 1092, 1096, 1101, 1106, 1111, 1127, 1133, 1137, 1175, 1180, 1190, 1200, 1210, 1223, 1226, 1227, 1230, 1234, 1239, 1240, 1251, 1254, 1257, 1258, 1260, 1261, 1262, 1263, 1268, 1270, 1276, 1278, 1279, 1291, 1299, 1309, 1310, 1315, 1317], "choic": [1, 56, 57, 161, 168, 396, 419, 814, 815, 825, 848, 849, 850, 1083, 1262, 1263, 1301, 1313, 1316, 1317, 1318, 1319, 1320], "parallel": [1, 13, 17, 22, 28, 32, 52, 56, 57, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 1055, 1137, 1175, 1263, 1305, 1306, 1310, 1313, 1318, 1319], "dask": [1, 2, 3, 56, 57, 78, 1262, 1263, 1299, 1305, 1306, 1318], "e": [1, 56, 57, 78, 120, 125, 495, 556, 557, 590, 591, 627, 630, 863, 895, 1007, 1037, 1038, 1049, 1081, 1137, 1175, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1261, 1279, 1292, 1294, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1320], "g": [1, 56, 57, 120, 125, 590, 591, 863, 895, 1137, 1175, 1261, 1279, 1292, 1294, 1305, 1306, 1309, 1312, 1316, 1320], "databook": [1, 56, 57, 190, 191, 443, 881, 882, 883, 884, 885, 886, 887, 888, 1292, 1299], "default": [1, 22, 23, 24, 50, 56, 57, 62, 86, 157, 174, 195, 287, 320, 443, 450, 455, 460, 482, 487, 510, 514, 521, 522, 530, 531, 540, 542, 543, 551, 586, 634, 708, 756, 771, 778, 828, 829, 830, 831, 834, 846, 867, 870, 876, 889, 1026, 1029, 1137, 1175, 1261, 1269, 1289, 1290, 1299, 1305, 1308, 1309, 1310, 1311, 1312, 1314, 1316, 1317, 1318, 1320], "do": [1, 56, 57, 120, 1137, 1175, 1294, 1310, 1312, 1317, 1318, 1319], "them": [1, 56, 57, 910, 1137, 1175, 1309, 1319], "level": [1, 15, 20, 26, 35, 39, 44, 48, 54, 56, 57, 61, 68, 85, 87, 95, 96, 109, 110, 113, 118, 121, 131, 143, 144, 441, 443, 444, 445, 446, 448, 451, 459, 461, 463, 471, 478, 486, 488, 490, 502, 503, 511, 517, 518, 526, 527, 535, 536, 546, 547, 559, 578, 588, 593, 599, 600, 605, 611, 621, 648, 649, 654, 655, 660, 661, 685, 688, 700, 706, 710, 713, 721, 723, 791, 802, 812, 821, 832, 834, 835, 839, 854, 855, 856, 857, 858, 859, 866, 966, 967, 968, 969, 986, 1010, 1011, 1016, 1017, 1018, 1024, 1025, 1026, 1029, 1050, 1058, 1066, 1067, 1081, 1083, 1086, 1114, 1123, 1124, 1130, 1142, 1182, 1192, 1202, 1213, 1221, 1223, 1231, 1234, 1252, 1254, 1262, 1263, 1278, 1286, 1291, 1292, 1305], "0": [1, 13, 15, 17, 20, 22, 26, 28, 32, 35, 37, 39, 41, 44, 46, 48, 50, 52, 54, 56, 57, 61, 68, 78, 81, 85, 87, 91, 95, 96, 100, 105, 109, 110, 113, 114, 118, 121, 127, 131, 135, 139, 143, 144, 147, 150, 156, 165, 167, 169, 173, 178, 182, 187, 195, 200, 255, 278, 320, 370, 375, 441, 443, 444, 445, 446, 447, 451, 455, 456, 459, 461, 463, 466, 467, 468, 471, 475, 478, 482, 483, 486, 488, 490, 493, 494, 495, 497, 498, 502, 503, 508, 511, 513, 517, 518, 521, 526, 527, 530, 535, 536, 539, 542, 546, 547, 550, 556, 559, 561, 564, 568, 569, 574, 577, 578, 581, 585, 588, 590, 591, 593, 596, 599, 600, 602, 603, 605, 607, 611, 614, 618, 621, 623, 627, 630, 633, 638, 640, 642, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 660, 661, 663, 666, 669, 672, 675, 678, 682, 685, 688, 689, 694, 695, 700, 701, 702, 706, 707, 708, 710, 713, 714, 717, 721, 723, 725, 728, 729, 733, 734, 739, 740, 745, 746, 750, 751, 756, 771, 777, 778, 782, 783, 787, 788, 791, 793, 798, 802, 804, 808, 812, 814, 821, 825, 834, 835, 852, 854, 855, 856, 857, 858, 859, 866, 880, 896, 898, 900, 904, 905, 908, 910, 959, 966, 967, 968, 969, 980, 982, 986, 989, 1000, 1007, 1010, 1011, 1016, 1017, 1018, 1024, 1025, 1026, 1029, 1049, 1050, 1055, 1058, 1062, 1063, 1066, 1067, 1071, 1073, 1079, 1081, 1086, 1095, 1100, 1105, 1110, 1114, 1116, 1121, 1123, 1124, 1126, 1130, 1132, 1137, 1138, 1142, 1145, 1151, 1152, 1157, 1163, 1169, 1172, 1175, 1176, 1182, 1186, 1192, 1196, 1202, 1206, 1213, 1220, 1221, 1223, 1229, 1231, 1234, 1245, 1252, 1254, 1262, 1263, 1278, 1283, 1284, 1290, 1299, 1300, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "mean": [1, 3, 56, 57, 95, 109, 143, 182, 195, 283, 320, 825, 832, 837, 840, 841, 844, 848, 849, 850, 857, 869, 871, 872, 1062, 1063, 1071, 1072, 1080, 1137, 1151, 1152, 1175, 1295, 1297, 1305, 1310, 1312, 1318, 1319], "silent": [1, 15, 20, 26, 35, 39, 44, 48, 54, 56, 57, 61, 68, 87, 95, 96, 109, 110, 118, 121, 131, 143, 144, 187, 441, 443, 444, 445, 446, 451, 461, 463, 471, 478, 488, 490, 503, 511, 518, 527, 536, 547, 559, 578, 588, 593, 599, 600, 605, 611, 621, 649, 655, 661, 685, 688, 700, 706, 710, 713, 721, 723, 791, 802, 812, 821, 834, 835, 866, 966, 967, 968, 969, 986, 1010, 1011, 1016, 1017, 1018, 1024, 1025, 1026, 1029, 1050, 1058, 1066, 1067, 1086, 1114, 1123, 1124, 1130, 1142, 1182, 1192, 1202, 1213, 1221, 1223, 1231, 1234, 1252, 1254, 1262, 1263, 1278], "chunked_result": [2, 3], "kei": [2, 3, 14, 19, 24, 25, 30, 34, 46, 47, 53, 63, 70, 71, 73, 79, 84, 93, 102, 108, 120, 130, 134, 136, 142, 149, 151, 166, 179, 180, 181, 195, 213, 320, 375, 449, 458, 470, 475, 476, 477, 482, 484, 485, 495, 501, 505, 506, 508, 509, 513, 514, 516, 520, 525, 529, 534, 538, 545, 549, 553, 555, 558, 562, 566, 570, 583, 587, 592, 596, 597, 598, 604, 610, 616, 620, 625, 628, 631, 636, 643, 647, 653, 659, 715, 716, 717, 718, 719, 720, 722, 727, 729, 730, 732, 734, 736, 738, 740, 742, 744, 746, 749, 751, 753, 755, 756, 774, 778, 780, 781, 783, 786, 788, 792, 793, 794, 799, 804, 805, 809, 848, 849, 850, 863, 866, 881, 888, 889, 893, 974, 975, 1010, 1011, 1050, 1051, 1052, 1057, 1062, 1083, 1091, 1092, 1226, 1227, 1239, 1240, 1257, 1258, 1261, 1290, 1311], "valu": [2, 3, 14, 19, 24, 25, 30, 34, 46, 47, 53, 63, 79, 84, 93, 102, 108, 130, 134, 136, 142, 149, 151, 166, 173, 176, 179, 180, 181, 195, 198, 199, 207, 208, 210, 212, 214, 218, 219, 220, 221, 222, 223, 226, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 273, 278, 287, 320, 322, 323, 326, 327, 329, 330, 331, 336, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 375, 414, 447, 448, 449, 455, 457, 458, 468, 469, 470, 475, 476, 477, 482, 484, 485, 495, 501, 508, 513, 514, 516, 520, 525, 529, 534, 538, 545, 549, 553, 555, 558, 562, 564, 565, 566, 570, 583, 586, 587, 590, 592, 596, 597, 598, 604, 610, 616, 620, 625, 628, 631, 634, 636, 643, 647, 653, 657, 659, 672, 678, 679, 682, 686, 689, 692, 694, 698, 701, 702, 704, 707, 708, 711, 714, 715, 716, 717, 718, 719, 720, 722, 726, 727, 729, 730, 731, 732, 734, 736, 737, 738, 740, 742, 743, 744, 745, 746, 748, 749, 751, 753, 754, 755, 756, 771, 772, 775, 778, 780, 781, 782, 783, 785, 786, 787, 788, 790, 792, 793, 794, 799, 804, 805, 809, 834, 839, 846, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 866, 869, 871, 872, 880, 881, 900, 903, 905, 907, 959, 962, 963, 964, 967, 968, 974, 975, 980, 982, 984, 985, 989, 992, 993, 1000, 1007, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1062, 1064, 1065, 1066, 1071, 1073, 1075, 1076, 1079, 1081, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1123, 1124, 1126, 1128, 1129, 1132, 1134, 1135, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1176, 1178, 1179, 1181, 1183, 1184, 1186, 1188, 1189, 1191, 1193, 1194, 1196, 1198, 1199, 1201, 1203, 1204, 1206, 1208, 1209, 1211, 1212, 1214, 1215, 1216, 1217, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1229, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1245, 1252, 1253, 1255, 1256, 1257, 1258, 1261, 1268, 1270, 1276, 1290, 1294, 1301, 1305, 1309, 1314, 1315, 1320], "bool": [2, 3, 4, 10, 39, 44, 48, 60, 77, 91, 93, 100, 101, 119, 120, 122, 149, 151, 163, 164, 166, 184, 195, 278, 320, 368, 441, 444, 447, 448, 495, 564, 565, 570, 574, 575, 583, 587, 592, 598, 604, 608, 610, 614, 615, 616, 620, 625, 628, 631, 636, 643, 647, 653, 659, 715, 716, 719, 726, 727, 730, 732, 733, 734, 736, 742, 748, 753, 775, 780, 785, 790, 796, 801, 807, 811, 817, 823, 824, 825, 834, 840, 846, 847, 854, 855, 856, 857, 858, 859, 866, 887, 913, 917, 923, 927, 931, 934, 938, 941, 945, 949, 953, 957, 959, 960, 970, 978, 979, 988, 999, 1013, 1016, 1021, 1026, 1062, 1063, 1068, 1070, 1072, 1073, 1074, 1077, 1080, 1083, 1143, 1149, 1155, 1161, 1167, 1171, 1174, 1176, 1177, 1180, 1190, 1200, 1210, 1261, 1262, 1263, 1275, 1279], "switch": [2, 3, 149, 854, 855, 856, 857, 858, 859, 1062, 1063, 1072, 1080, 1305, 1315], "forc": [2, 3, 287, 623, 1294, 1307], "load": [2, 3, 15, 20, 26, 35, 54, 87, 96, 110, 121, 131, 144, 447, 448, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058, 1305, 1309], "instead": [2, 3, 77, 119, 441, 447, 448, 455, 457, 482, 484, 733, 734, 745, 866, 1007, 1016, 1049, 1081, 1137, 1175, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1305, 1307, 1312, 1317, 1319, 1320], "result": [2, 3, 10, 14, 19, 24, 28, 30, 32, 34, 37, 39, 41, 44, 46, 48, 50, 53, 79, 80, 84, 93, 102, 104, 108, 130, 136, 138, 142, 147, 149, 151, 166, 170, 174, 180, 182, 183, 194, 287, 449, 458, 470, 477, 485, 501, 516, 521, 525, 534, 545, 553, 558, 562, 564, 565, 566, 568, 570, 574, 583, 587, 592, 598, 604, 610, 616, 620, 625, 628, 631, 636, 643, 647, 653, 659, 664, 667, 670, 673, 676, 680, 682, 722, 728, 730, 733, 736, 739, 742, 750, 753, 793, 795, 798, 800, 806, 808, 810, 816, 823, 824, 825, 832, 833, 834, 835, 837, 838, 839, 841, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 871, 872, 873, 874, 877, 963, 964, 967, 968, 984, 985, 992, 993, 1014, 1015, 1017, 1018, 1021, 1024, 1025, 1057, 1064, 1065, 1066, 1075, 1076, 1097, 1098, 1102, 1103, 1107, 1108, 1112, 1113, 1118, 1119, 1123, 1124, 1128, 1129, 1134, 1135, 1137, 1140, 1141, 1147, 1148, 1153, 1154, 1159, 1160, 1165, 1166, 1175, 1178, 1179, 1188, 1189, 1198, 1199, 1208, 1209, 1221, 1231, 1252, 1268, 1270, 1276, 1287, 1288, 1290, 1294, 1298, 1301, 1305, 1310, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320], "dataset": [2, 3, 10, 39, 44, 48, 62, 66, 78, 80, 104, 138, 447, 448, 823, 824, 832, 833, 852, 853, 865, 868, 873, 874, 877, 1291, 1305, 1310, 1316], "have": [2, 3, 10, 151, 570, 581, 582, 1137, 1175, 1281, 1294, 1305, 1310, 1312, 1313, 1314, 1315, 1316, 1319], "dimens": [2, 3, 10, 66, 70, 71, 72, 73, 80, 119, 120, 125, 151, 195, 286, 301, 306, 320, 381, 383, 570, 832, 848, 849, 850, 1284, 1290, 1294, 1308, 1310, 1316, 1320], "point_model": [3, 81, 82, 508, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 1311], "persist_mdata": 3, "persist_pdata": 3, "numpi": [3, 14, 19, 24, 25, 30, 34, 53, 66, 70, 79, 84, 90, 91, 93, 102, 108, 119, 120, 129, 130, 136, 142, 149, 150, 151, 152, 155, 160, 161, 162, 163, 164, 166, 170, 174, 175, 176, 177, 179, 180, 181, 183, 184, 195, 206, 211, 320, 325, 445, 446, 449, 454, 458, 465, 470, 474, 477, 481, 485, 492, 501, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 554, 558, 562, 566, 569, 570, 571, 573, 577, 580, 581, 582, 583, 587, 592, 598, 604, 609, 610, 616, 620, 625, 628, 631, 636, 643, 647, 653, 659, 664, 667, 670, 673, 676, 680, 684, 686, 687, 691, 692, 693, 697, 698, 699, 703, 704, 705, 709, 711, 712, 715, 716, 719, 720, 722, 726, 727, 730, 731, 732, 736, 737, 738, 742, 743, 744, 748, 749, 753, 754, 755, 772, 774, 775, 780, 781, 785, 786, 790, 792, 795, 796, 800, 801, 806, 807, 810, 811, 816, 817, 826, 876, 910, 911, 915, 916, 917, 918, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 947, 948, 949, 950, 955, 956, 957, 958, 962, 978, 979, 988, 999, 1007, 1009, 1016, 1019, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1051, 1052, 1057, 1061, 1070, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1137, 1175, 1180, 1181, 1183, 1184, 1190, 1191, 1193, 1194, 1200, 1201, 1203, 1204, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1222, 1224, 1225, 1226, 1227, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1253, 1255, 1256, 1257, 1258, 1280, 1281, 1282, 1283, 1284, 1285, 1290, 1309, 1310, 1314, 1316, 1317, 1320], "ndarrai": [3, 14, 19, 24, 25, 30, 34, 53, 66, 72, 73, 79, 84, 90, 91, 93, 102, 108, 119, 120, 129, 130, 136, 142, 149, 150, 151, 152, 155, 160, 161, 162, 163, 164, 166, 170, 174, 175, 176, 177, 179, 180, 181, 183, 184, 196, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 445, 446, 449, 454, 458, 465, 470, 474, 477, 481, 485, 492, 501, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 554, 558, 562, 566, 569, 570, 571, 573, 577, 580, 581, 582, 583, 587, 592, 598, 604, 609, 610, 616, 620, 625, 628, 631, 636, 643, 647, 653, 659, 664, 667, 670, 673, 676, 680, 684, 686, 687, 691, 692, 693, 697, 698, 699, 703, 704, 705, 709, 711, 712, 715, 716, 719, 720, 722, 726, 727, 730, 731, 732, 736, 737, 738, 742, 743, 744, 748, 749, 753, 754, 755, 772, 774, 775, 780, 781, 785, 786, 790, 792, 795, 796, 800, 801, 806, 807, 810, 811, 816, 817, 826, 851, 876, 910, 911, 915, 916, 917, 918, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 947, 948, 949, 950, 955, 956, 957, 958, 962, 978, 979, 988, 999, 1007, 1009, 1016, 1019, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1051, 1052, 1057, 1061, 1070, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1137, 1175, 1180, 1181, 1183, 1184, 1190, 1191, 1193, 1194, 1200, 1201, 1203, 1204, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1222, 1224, 1225, 1226, 1227, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1253, 1255, 1256, 1257, 1258, 1261, 1280, 1281, 1282, 1283, 1284, 1285, 1320], "interest": [3, 22, 23, 880, 1288, 1294, 1313, 1316, 1317], "shape": [3, 14, 19, 24, 25, 30, 34, 53, 66, 73, 84, 90, 91, 93, 102, 108, 120, 129, 130, 136, 142, 149, 150, 151, 152, 155, 160, 161, 162, 163, 164, 166, 170, 174, 175, 176, 177, 179, 180, 181, 183, 184, 195, 301, 320, 445, 446, 449, 454, 458, 465, 470, 474, 477, 481, 485, 492, 501, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 554, 558, 562, 566, 569, 570, 571, 573, 577, 580, 581, 582, 583, 587, 592, 598, 604, 609, 610, 616, 620, 625, 628, 631, 636, 643, 647, 653, 659, 664, 667, 670, 673, 676, 680, 684, 686, 687, 691, 692, 693, 697, 698, 699, 703, 704, 705, 709, 711, 712, 715, 716, 719, 720, 722, 726, 727, 730, 731, 732, 736, 737, 738, 742, 743, 744, 748, 749, 753, 754, 755, 772, 775, 780, 781, 785, 786, 790, 792, 795, 796, 800, 801, 806, 807, 810, 811, 816, 817, 826, 876, 910, 911, 915, 916, 917, 918, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 937, 939, 940, 941, 942, 943, 944, 947, 948, 949, 950, 955, 956, 957, 958, 962, 963, 964, 967, 968, 978, 979, 984, 985, 988, 992, 993, 999, 1007, 1009, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1045, 1046, 1051, 1052, 1053, 1054, 1057, 1061, 1064, 1065, 1066, 1068, 1070, 1075, 1076, 1077, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1097, 1098, 1102, 1103, 1107, 1108, 1112, 1113, 1118, 1119, 1123, 1124, 1125, 1128, 1129, 1134, 1135, 1140, 1141, 1143, 1147, 1148, 1149, 1153, 1154, 1155, 1159, 1160, 1161, 1165, 1166, 1167, 1171, 1174, 1178, 1179, 1180, 1181, 1183, 1184, 1188, 1189, 1190, 1191, 1193, 1194, 1198, 1199, 1200, 1201, 1203, 1204, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1221, 1222, 1224, 1225, 1226, 1227, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1252, 1253, 1255, 1256, 1257, 1258, 1260, 1261, 1278, 1281, 1282, 1283, 1284, 1285, 1299, 1305, 1316, 1320], "n_point": [3, 24, 25, 34, 66, 70, 73, 74, 84, 130, 136, 142, 150, 174, 176, 177, 179, 180, 181, 183, 184, 449, 458, 470, 477, 485, 516, 525, 534, 545, 553, 554, 558, 562, 566, 569, 577, 686, 687, 692, 693, 698, 699, 704, 705, 711, 712, 715, 716, 719, 720, 722, 726, 727, 730, 731, 732, 736, 737, 738, 742, 743, 744, 748, 749, 753, 754, 755, 772, 775, 780, 781, 785, 786, 790, 792, 795, 796, 800, 801, 806, 807, 810, 811, 816, 817, 917, 918, 927, 928, 934, 935, 937, 941, 942, 949, 950, 957, 958, 1007, 1009, 1057, 1180, 1190, 1200, 1210, 1261, 1316], "3": [3, 66, 73, 149, 150, 152, 176, 177, 179, 278, 554, 561, 569, 571, 577, 686, 687, 692, 693, 698, 699, 704, 705, 711, 712, 720, 826, 876, 910, 1007, 1009, 1137, 1175, 1294, 1299, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "should": [3, 14, 15, 19, 20, 24, 26, 30, 34, 35, 53, 54, 79, 84, 87, 93, 96, 102, 108, 110, 121, 131, 136, 142, 144, 166, 175, 447, 448, 449, 451, 458, 461, 470, 471, 477, 478, 485, 488, 501, 503, 513, 518, 527, 536, 547, 558, 559, 562, 566, 578, 583, 587, 588, 592, 593, 598, 600, 604, 605, 610, 611, 616, 620, 621, 625, 628, 631, 636, 643, 647, 649, 653, 655, 659, 661, 684, 688, 691, 697, 700, 703, 706, 709, 713, 723, 802, 804, 812, 1057, 1058, 1137, 1175, 1281, 1307, 1309, 1310, 1314, 1315, 1318, 1319, 1320], "output": [3, 14, 16, 19, 21, 24, 27, 30, 31, 32, 33, 34, 36, 53, 55, 79, 80, 84, 88, 93, 98, 102, 103, 104, 108, 112, 120, 136, 137, 138, 142, 146, 154, 158, 166, 187, 447, 448, 449, 452, 455, 457, 458, 462, 470, 472, 475, 476, 477, 479, 482, 484, 485, 489, 501, 504, 558, 560, 562, 563, 566, 567, 581, 582, 583, 584, 585, 586, 587, 589, 592, 594, 598, 601, 604, 606, 610, 612, 616, 617, 620, 622, 625, 626, 628, 629, 631, 632, 636, 637, 643, 644, 647, 650, 653, 656, 659, 662, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 1057, 1059, 1137, 1175, 1278, 1286, 1305, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "which": [3, 13, 16, 17, 21, 22, 25, 27, 28, 31, 32, 36, 52, 55, 56, 81, 88, 91, 98, 100, 103, 105, 112, 113, 130, 135, 137, 139, 146, 147, 154, 156, 158, 165, 167, 173, 179, 180, 181, 183, 184, 447, 452, 455, 457, 462, 466, 468, 472, 475, 479, 482, 489, 493, 497, 498, 504, 516, 525, 534, 545, 553, 556, 560, 561, 563, 564, 567, 568, 574, 581, 584, 585, 589, 590, 594, 596, 601, 602, 603, 606, 607, 612, 614, 617, 618, 619, 622, 623, 626, 627, 629, 630, 632, 633, 637, 638, 640, 642, 644, 645, 646, 650, 651, 652, 656, 657, 662, 682, 683, 707, 708, 715, 716, 717, 719, 720, 722, 726, 727, 730, 732, 736, 738, 742, 744, 748, 749, 753, 755, 780, 781, 785, 786, 790, 792, 793, 795, 796, 797, 798, 800, 801, 803, 806, 807, 808, 810, 811, 813, 816, 817, 825, 828, 829, 830, 831, 847, 857, 858, 859, 876, 1016, 1026, 1055, 1059, 1062, 1063, 1072, 1080, 1083, 1137, 1175, 1282, 1285, 1291, 1294, 1302, 1306, 1309, 1310, 1313, 1316, 1317, 1318, 1319, 1320], "pointdatamodel": [3, 22, 32, 82, 83, 135, 136, 137, 138, 139, 140, 141, 156, 508, 556, 561, 564, 1288, 1291, 1294], "addit": [3, 65, 80, 104, 138, 174, 441, 442, 475, 476, 496, 531, 540, 582, 586, 639, 641, 646, 652, 658, 787, 788, 866, 875, 880, 960, 981, 983, 990, 1001, 1007, 1009, 1050, 1063, 1071, 1072, 1074, 1079, 1080, 1086, 1223, 1230, 1234, 1251, 1254, 1260, 1261, 1278, 1305, 1315, 1318, 1319], "execut": [3, 14, 19, 24, 30, 34, 53, 79, 82, 84, 93, 102, 108, 136, 142, 166, 175, 449, 458, 470, 477, 485, 501, 558, 562, 566, 583, 587, 592, 598, 604, 610, 616, 620, 625, 628, 631, 636, 643, 647, 653, 659, 684, 691, 697, 703, 709, 1057, 1262, 1269, 1294, 1299, 1307], "persist_fdata": 3, "point_result": [3, 1316], "clear": [4, 60, 1313], "includ": [4, 15, 20, 24, 26, 35, 54, 60, 81, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 878, 883, 1058, 1298, 1305, 1307, 1308, 1310, 1319, 1320], "max_it": [8, 9], "maxim": [8, 9, 416, 574, 575, 590, 694, 695, 701, 702, 708, 729, 734, 740, 745, 746, 751, 756, 771, 778, 782, 783, 787, 788, 880, 912, 915, 919, 921, 925, 929, 932, 936, 939, 943, 947, 951, 955, 1000, 1007, 1030, 1031, 1032, 1033, 1049, 1062, 1063, 1068, 1071, 1072, 1073, 1077, 1079, 1080, 1081, 1087, 1088, 1105, 1106, 1138, 1143, 1145, 1149, 1151, 1155, 1157, 1161, 1163, 1167, 1169, 1171, 1172, 1174, 1176, 1183, 1186, 1193, 1196, 1197, 1203, 1206, 1207, 1214, 1215, 1220, 1224, 1229, 1230, 1235, 1236, 1245, 1255, 1294, 1295, 1297, 1301, 1305, 1310, 1314], "conv_crit": [8, 9], "convcrit": [8, 9, 37, 38, 39, 40, 41, 42, 43, 46, 1289], "converg": [8, 9, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 50, 1287, 1289, 1305, 1317], "criteria": [8, 9, 37, 38, 39, 41, 42, 44, 46, 47, 48, 50, 1289], "tupl": [9, 65, 67, 70, 71, 72, 73, 79, 80, 104, 119, 138, 195, 301, 306, 320, 442, 443, 495, 507, 513, 514, 726, 748, 785, 790, 825, 847, 851, 854, 855, 856, 857, 858, 859, 875, 880, 1082, 1268, 1270, 1276, 1279], "argument": [9, 10, 67, 80, 104, 138, 496, 507, 582, 821, 825, 832, 851, 875, 880, 1082, 1137, 1175, 1180, 1190, 1200, 1210, 1262, 1263, 1268, 1270, 1276, 1279, 1305, 1308, 1314, 1318, 1319], "keyword": [9, 67, 1082, 1268, 1270, 1276, 1279], "calcord": [13, 14, 15, 16, 1288], "farmdatamodel": [13, 17, 28, 52, 91, 100, 101, 102, 103, 104, 105, 106, 107, 113, 147, 165, 1288, 1289, 1291], "thi": [13, 14, 15, 17, 19, 20, 22, 24, 26, 28, 30, 32, 34, 35, 52, 53, 54, 79, 80, 84, 87, 93, 96, 100, 101, 102, 104, 108, 110, 121, 130, 131, 136, 138, 142, 144, 149, 151, 166, 175, 178, 179, 190, 449, 451, 458, 461, 470, 471, 477, 478, 485, 488, 501, 503, 513, 516, 518, 525, 527, 534, 536, 545, 547, 553, 558, 559, 562, 564, 566, 570, 578, 583, 587, 588, 590, 592, 593, 598, 600, 604, 605, 608, 610, 611, 616, 620, 621, 625, 628, 631, 636, 643, 647, 649, 653, 655, 659, 661, 672, 682, 684, 688, 691, 697, 700, 703, 706, 708, 709, 713, 714, 717, 720, 723, 725, 728, 729, 733, 734, 739, 740, 745, 746, 750, 751, 756, 771, 777, 778, 782, 783, 787, 788, 802, 804, 812, 832, 854, 855, 856, 857, 858, 859, 860, 889, 910, 929, 936, 943, 959, 960, 1026, 1045, 1046, 1053, 1054, 1057, 1058, 1083, 1137, 1175, 1176, 1186, 1196, 1206, 1229, 1241, 1242, 1288, 1289, 1292, 1293, 1294, 1295, 1299, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "via": [13, 17, 22, 28, 32, 52, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 441, 442, 447, 448, 455, 457, 463, 466, 468, 475, 482, 484, 490, 493, 497, 498, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 823, 832, 852, 860, 863, 864, 867, 873, 876, 878, 889, 1016, 1026, 1055, 1262, 1288, 1292, 1293, 1295, 1299, 1305, 1306, 1310, 1313, 1314, 1318, 1320], "output_farm_var": [13, 16, 17, 21, 28, 31, 52, 55, 91, 98, 100, 103, 105, 112, 113, 147, 154, 165, 167, 497, 498, 504, 568, 574, 581, 584, 585, 589, 590, 594, 596, 601, 602, 606, 607, 612, 614, 617, 618, 622, 623, 626, 627, 629, 630, 632, 633, 637, 638, 640, 642, 644, 645, 650, 651, 656, 657, 662], "being": [13, 16, 17, 21, 22, 25, 27, 28, 31, 32, 36, 52, 55, 81, 88, 91, 98, 100, 103, 105, 112, 113, 135, 137, 139, 146, 147, 154, 156, 158, 165, 167, 179, 180, 447, 452, 455, 462, 466, 468, 472, 475, 479, 482, 489, 493, 497, 498, 504, 556, 560, 561, 563, 564, 567, 568, 574, 581, 584, 585, 589, 590, 594, 596, 601, 602, 606, 607, 612, 614, 617, 618, 622, 623, 626, 627, 629, 630, 632, 633, 637, 638, 640, 642, 644, 645, 650, 651, 656, 657, 662, 720, 722, 1026, 1055, 1059, 1137, 1175], "fdata": [13, 14, 17, 19, 22, 24, 25, 28, 30, 32, 34, 52, 53, 81, 84, 91, 93, 100, 102, 105, 108, 113, 117, 119, 120, 125, 127, 129, 130, 134, 135, 136, 139, 142, 147, 149, 151, 152, 156, 165, 166, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 447, 449, 455, 458, 466, 468, 470, 475, 477, 482, 485, 493, 497, 498, 501, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 554, 555, 556, 558, 561, 562, 564, 566, 568, 570, 571, 574, 581, 583, 585, 587, 590, 592, 596, 598, 602, 604, 607, 610, 614, 616, 618, 620, 623, 625, 627, 628, 630, 631, 633, 636, 638, 640, 642, 643, 645, 647, 651, 653, 657, 659, 682, 684, 686, 687, 689, 691, 692, 693, 694, 697, 698, 699, 701, 703, 704, 705, 707, 709, 711, 712, 714, 715, 716, 717, 719, 720, 722, 725, 726, 727, 728, 730, 731, 732, 733, 736, 737, 738, 739, 742, 743, 744, 745, 748, 749, 750, 753, 754, 755, 756, 772, 777, 780, 781, 782, 785, 786, 787, 790, 792, 793, 795, 796, 798, 800, 801, 804, 806, 807, 808, 810, 811, 814, 816, 817, 1055, 1057], "main": [13, 14, 17, 19, 22, 24, 28, 30, 32, 34, 52, 53, 78, 79, 81, 84, 91, 93, 100, 102, 105, 108, 113, 135, 136, 139, 142, 156, 165, 166, 167, 447, 449, 455, 458, 466, 468, 470, 475, 477, 482, 485, 493, 497, 498, 501, 556, 558, 561, 562, 564, 566, 581, 583, 585, 587, 590, 592, 596, 598, 602, 604, 607, 610, 614, 616, 618, 620, 623, 625, 627, 628, 630, 631, 633, 636, 638, 640, 642, 643, 645, 647, 651, 653, 657, 659, 1055, 1057, 1307, 1308], "pre_rotor": [13, 52, 91, 93, 100, 101, 113, 165, 497, 607, 608, 627, 630, 1050, 1083], "run_calcul": [13, 17, 22, 28, 32, 52, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 1055], "out_var": [13, 17, 22, 28, 32, 52, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 582, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 1055], "calc_par": [13, 17, 22, 28, 32, 52, 80, 81, 91, 99, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 1055], "start": [13, 17, 22, 28, 32, 52, 78, 80, 81, 82, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 191, 195, 267, 320, 441, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 682, 683, 707, 708, 881, 882, 1055, 1305, 1308, 1314, 1316, 1320], "": [13, 17, 22, 28, 32, 52, 62, 70, 71, 78, 80, 81, 91, 100, 104, 105, 113, 120, 135, 138, 139, 147, 156, 165, 167, 195, 287, 320, 397, 398, 399, 404, 422, 423, 424, 432, 447, 448, 455, 466, 468, 475, 482, 493, 497, 498, 530, 531, 540, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 851, 854, 855, 856, 857, 858, 859, 910, 1009, 1016, 1026, 1055, 1230, 1251, 1301, 1305, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "apply_ufunc": [13, 17, 22, 28, 32, 52, 70, 71, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 1055], "singl": [14, 19, 24, 30, 34, 53, 70, 79, 84, 93, 102, 108, 136, 142, 166, 175, 446, 449, 458, 470, 475, 477, 485, 501, 558, 562, 566, 568, 583, 587, 592, 598, 604, 610, 616, 620, 625, 628, 631, 636, 643, 647, 653, 659, 684, 691, 697, 703, 709, 869, 871, 872, 959, 963, 980, 982, 984, 989, 992, 1000, 1007, 1021, 1049, 1057, 1062, 1064, 1071, 1073, 1075, 1079, 1081, 1095, 1097, 1100, 1102, 1105, 1107, 1110, 1112, 1116, 1118, 1121, 1126, 1128, 1132, 1134, 1138, 1140, 1145, 1147, 1151, 1153, 1157, 1159, 1163, 1165, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1287, 1288, 1293, 1304, 1305, 1306, 1308, 1312, 1313, 1317], "comput": [14, 19, 24, 30, 34, 53, 79, 84, 93, 102, 108, 127, 136, 142, 166, 175, 182, 320, 366, 449, 458, 470, 477, 485, 501, 558, 562, 566, 583, 587, 592, 598, 604, 610, 616, 620, 625, 628, 631, 636, 642, 643, 647, 653, 659, 684, 691, 697, 703, 707, 709, 777, 876, 1057, 1137, 1175, 1294, 1305, 1313, 1317, 1320], "arrai": [14, 15, 19, 20, 24, 26, 30, 34, 35, 53, 54, 79, 84, 87, 93, 96, 102, 108, 110, 120, 121, 131, 136, 142, 144, 161, 162, 166, 175, 195, 196, 200, 201, 202, 203, 204, 211, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 449, 451, 458, 461, 470, 471, 477, 478, 485, 488, 501, 503, 518, 527, 536, 547, 558, 559, 562, 566, 578, 581, 582, 583, 587, 588, 592, 593, 598, 600, 604, 605, 610, 611, 616, 620, 621, 625, 628, 631, 636, 643, 647, 649, 653, 655, 659, 661, 684, 688, 691, 697, 700, 703, 706, 709, 713, 723, 802, 812, 851, 910, 911, 962, 963, 964, 967, 968, 984, 985, 992, 993, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1024, 1025, 1026, 1045, 1046, 1053, 1054, 1057, 1058, 1064, 1065, 1066, 1068, 1075, 1076, 1077, 1097, 1098, 1102, 1103, 1107, 1108, 1112, 1113, 1118, 1119, 1123, 1124, 1125, 1128, 1129, 1134, 1135, 1137, 1140, 1141, 1143, 1147, 1148, 1149, 1153, 1154, 1155, 1159, 1160, 1161, 1165, 1166, 1167, 1171, 1174, 1175, 1178, 1179, 1180, 1188, 1189, 1190, 1198, 1199, 1200, 1208, 1209, 1210, 1221, 1231, 1241, 1242, 1252, 1261, 1282, 1283, 1284, 1285, 1309, 1310, 1317, 1320], "n_turbin": [14, 19, 30, 53, 70, 76, 90, 91, 93, 102, 108, 149, 151, 152, 160, 166, 175, 185, 188, 446, 454, 465, 474, 481, 492, 501, 570, 571, 581, 582, 583, 587, 592, 598, 604, 609, 610, 616, 620, 625, 628, 631, 636, 643, 647, 653, 659, 684, 691, 697, 703, 709, 826, 1061, 1095, 1096, 1126, 1127, 1176, 1177, 1186, 1187, 1196, 1197, 1310, 1312, 1314, 1315, 1316], "requir": [15, 20, 26, 35, 46, 54, 56, 77, 80, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 513, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058, 1289, 1306, 1308, 1309, 1310, 1311, 1313, 1318, 1320], "file": [15, 20, 26, 35, 54, 87, 96, 110, 121, 131, 144, 190, 192, 193, 441, 442, 443, 444, 447, 448, 451, 455, 457, 461, 471, 478, 482, 484, 488, 496, 503, 510, 518, 527, 536, 547, 556, 557, 559, 578, 586, 588, 593, 600, 602, 603, 605, 611, 618, 619, 621, 638, 639, 640, 641, 645, 646, 649, 651, 652, 655, 657, 658, 661, 688, 700, 706, 713, 723, 739, 802, 812, 823, 828, 829, 830, 831, 832, 852, 860, 863, 864, 866, 867, 872, 873, 876, 878, 881, 883, 884, 885, 886, 887, 889, 894, 895, 1058, 1260, 1261, 1278, 1292, 1293, 1294, 1298, 1299, 1305, 1306, 1307, 1309, 1310, 1312, 1315, 1316, 1318, 1319], "part": [15, 20, 26, 35, 54, 87, 96, 110, 121, 131, 144, 195, 277, 293, 320, 451, 461, 471, 478, 488, 503, 512, 518, 521, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058, 1308, 1310, 1312, 1313, 1315], "dictionari": [15, 20, 26, 35, 54, 68, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 505, 507, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 756, 776, 802, 812, 863, 895, 1058, 1299], "under": [15, 20, 26, 35, 54, 87, 91, 92, 96, 105, 110, 121, 131, 139, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058, 1302, 1305, 1306, 1308, 1309, 1311, 1314, 1320], "reason": [15, 20, 26, 35, 54, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058], "dure": [15, 20, 26, 35, 54, 70, 71, 80, 87, 96, 110, 121, 131, 144, 447, 448, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058, 1305, 1310, 1311, 1317, 1318], "ha": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 122, 131, 144, 451, 461, 471, 478, 488, 503, 512, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 970, 1058, 1229, 1283, 1284, 1287, 1289, 1305, 1306, 1309, 1312, 1314, 1315, 1317, 1318], "exactli": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 195, 255, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058], "two": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 445, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 618, 621, 640, 649, 655, 657, 661, 688, 700, 706, 713, 723, 802, 812, 910, 1058, 1137, 1175, 1280, 1281, 1294, 1299, 1305, 1309, 1310, 1313, 1314, 1315, 1318, 1320], "data_var": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058], "name_str": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058], "dim_tupl": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058], "data_ndarrai": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058], "coord": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058, 1137, 1175], "dim_name_str": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058], "dim_arrai": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 588, 593, 600, 605, 611, 621, 649, 655, 661, 688, 700, 706, 713, 723, 802, 812, 1058], "output_var": [16, 21, 27, 31, 36, 55, 88, 98, 103, 112, 137, 146, 154, 158, 447, 448, 452, 455, 457, 462, 466, 472, 479, 482, 484, 489, 493, 504, 556, 557, 560, 563, 567, 584, 585, 586, 589, 594, 601, 606, 612, 617, 618, 619, 622, 626, 629, 632, 637, 644, 650, 656, 662, 1059, 1308, 1309, 1310, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "farmwakescalcul": [17, 18, 19, 20, 21, 52, 53, 54, 55, 1288, 1289], "effect": [17, 22, 52, 127, 147, 149, 397, 398, 399, 422, 423, 424, 542, 568, 574, 1288, 1289, 1294, 1296, 1297, 1301, 1313, 1314, 1315, 1319, 1320], "pointwakescalcul": [22, 23, 24, 25, 26, 27, 1288], "point_var": [22, 23, 32, 33], "emodel": [22, 23], "pointdatamodellist": [22, 23, 81, 139, 140, 141, 142, 143, 144, 145, 146, 1291], "extra": [22, 23, 854, 855, 856, 857, 858, 859, 1137, 1175], "emodels_cpar": [22, 23], "paramet": [22, 78, 91, 105, 139, 413, 420, 421, 455, 482, 495, 497, 498, 513, 633, 645, 651, 657, 694, 701, 707, 733, 739, 745, 750, 756, 776, 777, 782, 787, 889, 1007, 1229, 1245, 1294, 1296, 1301, 1310, 1313, 1316, 1318, 1319], "output_point_var": [22, 27, 32, 36, 81, 88, 135, 137, 139, 146, 156, 158, 447, 452, 455, 462, 466, 468, 472, 475, 479, 482, 489, 493, 556, 560, 561, 563, 564, 567, 1055, 1059], "contribute_to_wake_delta": [22, 25, 127, 129, 130, 178, 179, 513, 515, 516, 521, 524, 525, 530, 533, 534, 539, 541, 542, 544, 545, 550, 552, 553, 714, 717, 720, 725, 728, 733, 739, 745, 750, 777, 782, 787], "pdata": [22, 24, 25, 32, 34, 70, 73, 81, 84, 117, 119, 120, 125, 127, 129, 130, 134, 135, 136, 139, 142, 156, 173, 177, 178, 179, 180, 181, 182, 183, 184, 447, 449, 455, 458, 466, 468, 470, 475, 477, 482, 485, 493, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 555, 556, 558, 561, 562, 564, 566, 682, 687, 689, 693, 694, 699, 701, 705, 707, 712, 714, 715, 716, 717, 719, 720, 722, 725, 726, 727, 728, 730, 731, 732, 733, 736, 737, 738, 739, 742, 743, 744, 745, 748, 749, 750, 753, 754, 755, 756, 772, 777, 780, 781, 782, 785, 786, 787, 790, 792, 793, 795, 796, 798, 800, 801, 804, 806, 807, 808, 810, 811, 814, 816, 817, 1055, 1057], "contribut": [22, 25, 127, 129, 178, 179, 182, 183, 513, 515, 521, 524, 530, 533, 539, 541, 542, 544, 550, 552, 714, 717, 720, 725, 728, 733, 739, 745, 750, 777, 782, 787, 793, 795, 798, 800, 804, 806, 808, 810, 814, 816], "delta": [22, 25, 37, 40, 41, 45, 46, 49, 50, 127, 129, 130, 134, 178, 179, 180, 181, 182, 183, 184, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 555, 564, 565, 627, 630, 701, 702, 714, 715, 716, 717, 719, 720, 722, 725, 727, 728, 730, 732, 733, 736, 738, 739, 742, 744, 745, 749, 750, 753, 755, 777, 780, 781, 782, 786, 787, 792, 793, 794, 795, 796, 798, 800, 801, 804, 805, 806, 807, 808, 810, 811, 814, 815, 816, 817, 825, 846, 911, 1111, 1139, 1294, 1305, 1313, 1317], "states_source_turbin": [22, 24, 25, 120, 129, 173, 174, 176, 177, 179, 184, 515, 524, 533, 541, 544, 552, 682, 686, 687, 689, 692, 693, 694, 698, 699, 701, 704, 705, 707, 711, 712, 715, 716, 719, 720, 726, 727, 730, 731, 732, 736, 737, 742, 743, 748, 753, 754, 756, 772, 775, 780, 785, 790, 796, 801, 807, 811, 817], "For": [24, 25, 78, 120, 129, 130, 161, 162, 174, 176, 177, 179, 184, 495, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 590, 686, 687, 692, 693, 698, 699, 704, 705, 711, 712, 715, 716, 719, 720, 726, 727, 730, 731, 732, 733, 736, 737, 742, 743, 748, 753, 754, 772, 775, 780, 785, 790, 796, 801, 807, 811, 817, 880, 1137, 1175, 1307, 1308, 1310, 1312, 1313, 1314, 1316, 1317, 1318, 1320], "each": [24, 25, 78, 91, 108, 120, 129, 130, 142, 161, 162, 174, 176, 177, 179, 184, 195, 306, 320, 495, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 657, 686, 687, 689, 692, 693, 698, 699, 704, 705, 711, 712, 715, 716, 719, 720, 726, 727, 730, 731, 732, 736, 737, 742, 743, 748, 753, 754, 772, 775, 780, 785, 790, 796, 801, 807, 811, 817, 834, 854, 880, 1000, 1062, 1068, 1071, 1073, 1077, 1079, 1137, 1138, 1143, 1145, 1149, 1151, 1155, 1157, 1161, 1163, 1167, 1169, 1171, 1172, 1174, 1175, 1294, 1308, 1310, 1313, 1314, 1316, 1317, 1318, 1319, 1320], "one": [24, 25, 105, 108, 120, 129, 130, 139, 142, 149, 151, 155, 174, 176, 177, 179, 184, 195, 281, 320, 513, 514, 515, 516, 521, 522, 524, 525, 530, 531, 533, 534, 539, 540, 541, 542, 543, 544, 545, 551, 552, 553, 570, 573, 574, 575, 580, 686, 687, 692, 693, 698, 699, 704, 705, 711, 712, 715, 716, 719, 720, 726, 727, 730, 731, 732, 736, 737, 742, 743, 748, 753, 754, 772, 775, 780, 785, 790, 796, 801, 807, 811, 817, 873, 880, 910, 1137, 1175, 1281, 1294, 1298, 1305, 1308, 1312, 1319, 1320], "index": [24, 25, 77, 81, 86, 120, 129, 130, 156, 157, 161, 162, 164, 174, 176, 177, 179, 184, 320, 333, 441, 447, 450, 455, 457, 460, 463, 466, 468, 475, 482, 484, 487, 490, 493, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 603, 686, 687, 692, 693, 698, 699, 704, 705, 711, 712, 715, 716, 719, 720, 726, 727, 730, 731, 732, 736, 737, 742, 743, 748, 753, 754, 772, 775, 780, 785, 790, 796, 801, 807, 811, 817, 823, 824, 825, 854, 855, 856, 857, 858, 859, 962, 1007, 1042, 1044, 1049, 1055, 1081, 1220, 1229, 1245, 1280, 1305, 1308, 1314, 1315, 1318, 1320], "caus": [24, 25, 120, 129, 174, 176, 177, 179, 184, 515, 524, 533, 541, 544, 552, 686, 687, 692, 693, 698, 699, 704, 705, 711, 712, 715, 716, 719, 720, 726, 727, 730, 731, 732, 736, 737, 742, 743, 748, 753, 754, 772, 775, 780, 785, 790, 796, 801, 807, 811, 817, 1305], "wmodel": 25, "wdelta": [25, 184, 715, 716, 719, 727, 732, 780, 796, 801, 807, 811, 817], "ob": [25, 179, 180, 720, 722], "fly": [25, 179, 180, 181, 720, 722, 738, 744, 749, 755, 781, 786, 792], "setambfarmresult": [28, 29, 30, 31, 1288], "copi": [28, 32, 33, 151, 195, 264, 320, 570, 1288], "setambpointresult": [32, 33, 34, 35, 36, 1288], "pvar": 32, "treat": [32, 33, 851], "abstract": [37, 39, 40, 56, 78, 79, 100, 102, 103, 113, 127, 129, 130, 134, 135, 136, 137, 147, 150, 153, 155, 156, 159, 160, 165, 166, 167, 169, 170, 171, 173, 175, 177, 178, 179, 181, 182, 183, 184, 714, 715, 717, 719, 725, 726, 728, 730, 731, 912, 915, 916, 917, 918, 919, 989, 995, 1000, 1007, 1049, 1051, 1052, 1121, 1172, 1174, 1271, 1276, 1286, 1289, 1291, 1295, 1299, 1302, 1305], "check_converg": [37, 39, 41, 44, 46, 48, 50], "prev_result": [37, 39, 41, 44, 46, 48, 50], "check": [37, 39, 41, 44, 46, 48, 50, 756, 759, 775, 887, 959, 980, 982, 989, 1007, 1017, 1018, 1049, 1073, 1074, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1123, 1124, 1126, 1132, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1280, 1305, 1310, 1317, 1318], "get_delta": [37, 40, 41, 45, 46, 49, 50], "most": [37, 40, 41, 45, 46, 49, 50, 1320], "recent": [37, 40, 41, 45, 46, 49, 50], "previou": [39, 44, 48, 120, 182, 184, 793, 796, 798, 801, 804, 807, 808, 811, 814, 817, 1317], "first": [39, 44, 48, 70, 77, 81, 120, 193, 657, 689, 1294, 1307, 1310, 1312, 1318, 1319, 1320], "convcritlist": [41, 42, 43, 44, 45, 1289], "A": [41, 66, 105, 108, 113, 139, 142, 190, 191, 195, 206, 274, 320, 325, 468, 475, 505, 642, 675, 678, 782, 783, 787, 788, 814, 820, 846, 881, 882, 1137, 1175, 1176, 1186, 1196, 1206, 1289, 1291, 1292, 1293, 1294, 1297, 1299, 1308, 1309, 1311], "crit": [41, 42, 43], "add_crit": [41, 43], "criterion": [41, 43], "convvardelta": [46, 47, 48, 49, 50, 1289], "limit": [46, 47, 67, 708, 729, 734, 740, 745, 746, 751, 756, 771, 778, 782, 783, 787, 788, 793, 794, 804, 805, 1305], "float": [46, 47, 161, 162, 167, 168, 174, 195, 209, 255, 278, 320, 328, 455, 457, 468, 469, 475, 476, 590, 591, 634, 639, 641, 645, 646, 651, 652, 658, 678, 679, 694, 695, 701, 702, 707, 708, 729, 733, 734, 739, 740, 745, 746, 750, 751, 756, 771, 777, 778, 782, 783, 787, 788, 793, 794, 804, 805, 823, 824, 825, 834, 836, 839, 840, 846, 854, 855, 856, 857, 858, 859, 869, 871, 872, 880, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 929, 930, 959, 960, 962, 963, 964, 967, 968, 972, 974, 976, 978, 980, 982, 983, 984, 985, 988, 989, 992, 993, 999, 1000, 1007, 1014, 1015, 1016, 1021, 1022, 1024, 1025, 1026, 1027, 1031, 1035, 1040, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054, 1062, 1063, 1064, 1065, 1066, 1070, 1071, 1072, 1073, 1075, 1076, 1079, 1080, 1081, 1083, 1084, 1087, 1089, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1111, 1112, 1113, 1116, 1118, 1119, 1121, 1126, 1127, 1128, 1129, 1132, 1134, 1135, 1137, 1138, 1139, 1140, 1141, 1145, 1147, 1148, 1151, 1152, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1175, 1176, 1177, 1178, 1179, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1196, 1197, 1198, 1199, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1211, 1214, 1216, 1218, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1235, 1237, 1239, 1240, 1241, 1242, 1243, 1245, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1280, 1283, 1284, 1290, 1308, 1310], "wd_var": [46, 47, 867, 869, 871, 872, 876], "direct": [46, 47, 156, 403, 430, 468, 469, 475, 476, 574, 575, 689, 690, 854, 855, 856, 857, 858, 859, 869, 871, 872, 911, 943, 944, 1282, 1283, 1284, 1285, 1287, 1288, 1292, 1294, 1299, 1301, 1305, 1308, 1309, 1312, 1313, 1315, 1316, 1318, 1319, 1320], "unit": [46, 47, 167, 168, 319, 371, 375, 388, 391, 393, 396, 419, 590, 591, 733, 734, 839, 846, 982, 983, 1137, 1175, 1290, 1301, 1308], "deg": [46, 47, 1308], "defaultconv": [50, 51, 1289, 1317], "collect": [56, 206, 325, 814, 847, 854, 855, 856, 857, 858, 859, 1137, 1175, 1294, 1313, 1316], "meant": 56, "top": [56, 542, 728, 1286, 1292, 1294, 1302, 1320], "code": [56, 287, 756, 1302, 1305, 1306, 1307], "take": [62, 128, 195, 309, 320, 857, 858, 859], "deriv": [65, 133, 172, 861, 909, 959, 962, 980, 982, 989, 1000, 1016, 1026, 1062, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1299], "array_lik": [66, 70, 71, 80, 86, 157, 161, 162, 445, 450, 460, 469, 487, 495, 1137, 1175], "indic": [66, 86, 149, 151, 157, 445, 446, 450, 460, 487, 570, 825, 866, 1016, 1043], "els": [68, 151, 195, 205, 320, 324, 570, 869, 871, 872], "model_book": [70, 505, 506, 507, 508, 509, 510, 511, 512, 1291, 1292, 1299], "meta": [70, 1291], "us": [70, 80, 105, 139, 182, 320, 333, 441, 513, 530, 561, 590, 682, 708, 714, 717, 733, 734, 745, 756, 771, 778, 825, 832, 847, 866, 959, 960, 962, 1007, 1031, 1032, 1035, 1036, 1045, 1046, 1049, 1053, 1054, 1081, 1087, 1088, 1089, 1090, 1137, 1175, 1183, 1184, 1203, 1204, 1214, 1215, 1216, 1217, 1220, 1224, 1225, 1229, 1235, 1236, 1237, 1238, 1241, 1242, 1245, 1255, 1256, 1293, 1294, 1295, 1305, 1307, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320], "usual": [70, 1313], "dim": [70, 71, 72, 73, 119, 120, 195, 200, 320], "same": [70, 71, 73, 170, 664, 667, 670, 673, 676, 680, 839, 911, 1083, 1137, 1175, 1281, 1305, 1318, 1320], "loop_dim": [70, 71, 78, 80], "loop": [70, 71, 80, 910, 1305, 1317], "size": [70, 81, 89, 151, 156, 159, 174, 195, 245, 302, 320, 447, 453, 455, 464, 466, 468, 473, 475, 480, 482, 491, 493, 570, 694, 695, 787, 788, 825, 830, 880, 1055, 1056, 1060, 1309, 1310, 1318], "states_i0": [70, 77], "counter": [70, 77, 1007, 1020, 1049, 1081, 1220, 1229, 1245], "from_point": [70, 73], "__getitem__": [70, 195, 213, 320, 505, 506, 508, 509], "x": [70, 150, 173, 174, 176, 392, 429, 433, 441, 445, 447, 448, 505, 506, 521, 569, 574, 577, 614, 615, 682, 686, 689, 692, 694, 698, 701, 704, 707, 711, 714, 715, 716, 717, 719, 725, 726, 727, 728, 730, 731, 732, 733, 736, 737, 739, 742, 743, 745, 748, 750, 753, 754, 756, 772, 775, 780, 782, 785, 787, 790, 825, 826, 854, 855, 856, 857, 858, 859, 880, 910, 912, 913, 915, 916, 919, 921, 923, 925, 926, 929, 931, 932, 933, 936, 938, 939, 940, 943, 945, 947, 948, 951, 953, 955, 956, 1137, 1175, 1284, 1285, 1294, 1301, 1302, 1306, 1308, 1309, 1310, 1312, 1316, 1317, 1318, 1319, 1320], "y": [70, 150, 392, 429, 434, 441, 445, 447, 448, 505, 506, 569, 577, 614, 615, 825, 826, 854, 855, 856, 857, 858, 859, 880, 912, 913, 915, 916, 919, 921, 923, 925, 926, 929, 931, 932, 933, 936, 938, 939, 940, 943, 945, 947, 948, 951, 953, 955, 956, 1137, 1175, 1284, 1285, 1301, 1308, 1309, 1310, 1316, 1318], "np": [72, 73, 120, 206, 255, 278, 325, 366, 368, 846, 851, 910, 962, 963, 964, 967, 968, 984, 985, 992, 993, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1024, 1025, 1026, 1045, 1046, 1053, 1054, 1064, 1065, 1066, 1068, 1075, 1076, 1077, 1097, 1098, 1102, 1103, 1107, 1108, 1112, 1113, 1118, 1119, 1123, 1124, 1125, 1128, 1129, 1134, 1135, 1137, 1140, 1141, 1143, 1147, 1148, 1149, 1153, 1154, 1155, 1159, 1160, 1161, 1165, 1166, 1167, 1171, 1174, 1175, 1178, 1179, 1188, 1189, 1198, 1199, 1208, 1209, 1221, 1231, 1241, 1242, 1252, 1261, 1309, 1310, 1314, 1316, 1317, 1320], "correspond": [77, 129, 195, 196, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 439, 440, 515, 524, 533, 541, 544, 552, 590, 1282, 1285, 1301, 1307, 1311, 1312, 1315], "datacalcmodel": [78, 79, 80, 100, 135, 1291, 1305], "thei": [78, 149, 161, 162, 173, 181, 738, 744, 749, 755, 781, 786, 792, 1294, 1302, 1305, 1308, 1309, 1310, 1311, 1313, 1318], "depend": [78, 151, 396, 419, 513, 521, 556, 557, 570, 646, 652, 657, 658, 714, 717, 725, 726, 728, 731, 733, 737, 739, 743, 745, 748, 750, 754, 782, 785, 787, 790, 959, 978, 979, 980, 982, 988, 989, 999, 1000, 1062, 1063, 1070, 1071, 1072, 1073, 1079, 1080, 1083, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1294, 1301, 1302, 1305, 1307, 1309, 1312, 1313, 1318, 1320], "individu": [78, 161, 167, 657, 959, 963, 964, 980, 982, 984, 985, 989, 992, 993, 1000, 1007, 1017, 1021, 1022, 1049, 1062, 1064, 1065, 1071, 1073, 1075, 1076, 1079, 1081, 1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1123, 1126, 1128, 1129, 1132, 1134, 1135, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1292, 1294, 1310, 1313], "out_core_var": 80, "initial_result": 80, "typic": [80, 104, 138, 156, 1026], "fc": [80, 120, 1073, 1074, 1309, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "extendedst": [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 1291, 1305], "extend": [81, 1289, 1291, 1303, 1306], "pmodel": 81, "append": [81, 83, 105, 107, 139, 141], "total": [81, 89, 156, 159, 182, 188, 447, 453, 455, 464, 466, 468, 473, 475, 480, 482, 491, 493, 832, 840, 1007, 1037, 1038, 1049, 1055, 1060, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1305, 1310], "weight": [81, 90, 147, 149, 151, 155, 156, 160, 378, 431, 447, 448, 454, 455, 465, 466, 468, 474, 475, 481, 482, 492, 493, 495, 521, 542, 568, 570, 573, 574, 575, 580, 832, 851, 857, 858, 859, 1055, 1061, 1137, 1152, 1175, 1290, 1294, 1301, 1308, 1310, 1315, 1316, 1319], "statist": [81, 90, 156, 160, 431, 447, 454, 455, 465, 466, 468, 474, 475, 481, 482, 492, 493, 1055, 1061, 1301, 1308, 1319], "label": [86, 157, 161, 162, 450, 460, 487, 854, 855, 856, 857, 858, 859, 880, 1308, 1315, 1318], "integ": [86, 157, 195, 255, 273, 320, 333, 450, 460, 487, 959, 962, 963, 964, 967, 968, 975, 977, 980, 982, 984, 985, 989, 992, 993, 1000, 1007, 1014, 1015, 1016, 1021, 1022, 1024, 1025, 1026, 1028, 1032, 1036, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1062, 1064, 1065, 1066, 1071, 1073, 1075, 1076, 1079, 1081, 1088, 1090, 1091, 1092, 1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1126, 1128, 1129, 1132, 1134, 1135, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1176, 1178, 1179, 1188, 1189, 1196, 1198, 1199, 1206, 1208, 1209, 1215, 1217, 1220, 1221, 1226, 1227, 1229, 1231, 1236, 1238, 1239, 1240, 1241, 1242, 1245, 1252, 1257, 1258], "analys": [91, 1291], "handl": [91, 1291, 1305], "turbine_typ": [91, 508, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 878, 880, 1308, 1311, 1315, 1316, 1318], "turbinetyp": [91, 167, 168, 508, 642, 645, 646, 651, 652, 657, 658, 1291, 1294], "turbine_model_nam": 91, "found": [91, 119, 887, 1293, 1295, 1311, 1316, 1318], "turbine_model_sel": 91, "n_model": 91, "pre_rotor_model": 91, "farmdatamodellist": [91, 105, 106, 107, 108, 109, 110, 111, 112, 1291], "pre": [91, 93, 1307, 1314, 1317], "post_rotor_model": 91, "without": [91, 497, 851, 1294, 1310, 1314, 1316], "par": [91, 92, 497, 756, 764, 776], "respecitv": 91, "set_par": [91, 99, 497], "model_nam": [91, 99, 497], "init_par": [91, 99, 497], "final_par": [91, 99, 497], "collect_model": [91, 94, 497], "analyz": [91, 94, 497], "gather": [91, 94, 497], "st_sel": [91, 93, 165, 166, 167, 497, 581, 582, 583, 585, 587, 590, 592, 596, 598, 602, 604, 607, 610, 614, 616, 618, 620, 623, 625, 627, 628, 630, 631, 633, 636, 638, 640, 642, 643, 645, 647, 651, 653, 657, 659], "respect": [92, 445, 1137, 1175, 1308, 1318, 1319, 1320], "post": [93, 1306, 1313], "befor": [100, 101, 180, 441, 608, 722, 854, 855, 857, 858, 859, 1045, 1046, 1053, 1054, 1073, 1074, 1083, 1241, 1242, 1310], "By": [105, 139, 1026, 1320], "togeth": [105, 139, 1320], "common": [105, 139, 707, 756, 772, 777, 1137, 1175, 1302], "farmmodel": [113, 498, 508, 1291, 1294], "oper": [113, 183, 795, 800, 806, 810, 816, 832, 848, 849, 850, 1291, 1314], "contrast": [113, 910, 1291], "turbinemodel": [113, 163, 164, 165, 166, 167, 498, 499, 508, 581, 582, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 1291, 1294], "allow": [113, 495, 1291, 1305, 1310, 1317], "applic": [113, 963, 964, 967, 968, 984, 985, 992, 993, 1007, 1014, 1015, 1020, 1024, 1025, 1049, 1064, 1065, 1066, 1075, 1076, 1081, 1097, 1098, 1102, 1103, 1107, 1108, 1112, 1113, 1118, 1119, 1128, 1129, 1134, 1135, 1140, 1141, 1147, 1148, 1153, 1154, 1159, 1160, 1165, 1166, 1178, 1179, 1188, 1189, 1198, 1199, 1208, 1209, 1220, 1221, 1229, 1231, 1245, 1252, 1291, 1306, 1310], "util": [117, 119, 185, 190, 508, 852, 853, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 1176, 1177, 1186, 1187, 1196, 1197, 1206, 1207, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1292, 1305, 1310, 1317, 1318, 1319], "error": [119, 120, 190, 447, 448, 739, 881, 887, 1318], "upcast": 120, "accept_non": 120, "serv": [120, 1308], "identifi": [120, 194, 318, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 1286, 1290, 1305, 1317], "state_turbin": [120, 383, 1290], "state_point": [120, 381, 1290], "combin": [120, 814, 815, 1320], "m": [120, 397, 398, 399, 404, 410, 412, 417, 422, 423, 424, 432, 433, 438, 448, 455, 657, 694, 695, 854, 855, 856, 857, 858, 859, 982, 983, 1137, 1175, 1301, 1307, 1308, 1309, 1312, 1316, 1317, 1318, 1319], "f": [120, 581, 582, 910, 1137, 1175, 1312, 1314, 1318, 1319, 1320], "p": [120, 408, 411, 419, 439, 440, 590, 645, 646, 652, 658, 863, 880, 889, 891, 1137, 1175, 1301, 1305, 1306, 1308, 1309, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "scalar": [120, 195, 196, 200, 204, 211, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 274, 275, 276, 277, 279, 280, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 556, 557, 1137, 1175], "data_prio": 120, "search": [120, 447, 448, 455, 457, 508, 512, 634, 707, 708, 733, 734, 745, 746, 750, 751, 777, 778, 909, 1299, 1305, 1311, 1312, 1316, 1318], "throw": 120, "an": [120, 161, 320, 333, 574, 575, 682, 739, 818, 854, 855, 856, 857, 858, 859, 910, 1007, 1011, 1049, 1081, 1137, 1175, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1292, 1293, 1298, 1309, 1315, 1318, 1320], "nan": [120, 195, 255, 495, 851, 910, 962, 1305, 1314], "been": [122, 970, 1287, 1289, 1305, 1306], "mobj": 125, "reduc": [125, 574, 575, 832, 848, 849, 850, 1305], "quantiti": [127, 147, 1313], "new_wake_delta": [127, 129, 130, 134, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 555], "fill": [127, 130, 134, 190, 195, 272, 320, 447, 448, 513, 516, 520, 521, 525, 529, 530, 534, 538, 539, 542, 545, 549, 550, 553, 555, 913, 923, 931, 938, 945, 953, 1292], "zero": [127, 134, 414, 513, 520, 521, 529, 530, 538, 539, 542, 549, 550, 555, 634, 715, 716, 719, 726, 727, 730, 732, 736, 742, 748, 753, 780, 785, 790, 1137, 1175, 1262, 1267, 1301, 1316], "specifi": [127, 129, 195, 200, 320, 513, 515, 521, 524, 530, 533, 539, 541, 542, 544, 550, 552, 603, 1294, 1305, 1310, 1318], "evaluate_result": [127, 130, 513, 516, 521, 525, 530, 534, 539, 542, 545, 550, 553], "pwake_typ": [127, 133, 513, 521, 530, 539, 542, 550], "wake_delta": [129, 130, 134, 178, 179, 180, 181, 183, 184, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 555, 714, 717, 720, 722, 725, 728, 733, 738, 739, 744, 745, 749, 750, 755, 777, 781, 782, 786, 787, 792, 795, 796, 800, 801, 806, 807, 810, 811, 816, 817], "ani": [129, 130, 134, 195, 206, 251, 287, 320, 325, 515, 516, 520, 524, 525, 529, 533, 534, 538, 541, 544, 545, 549, 552, 553, 555, 642, 821, 911, 963, 964, 967, 968, 984, 985, 992, 993, 1014, 1015, 1024, 1025, 1064, 1065, 1066, 1075, 1076, 1097, 1098, 1102, 1103, 1107, 1108, 1112, 1113, 1118, 1119, 1128, 1129, 1134, 1135, 1140, 1141, 1147, 1148, 1153, 1154, 1159, 1160, 1165, 1166, 1178, 1179, 1188, 1189, 1198, 1199, 1208, 1209, 1221, 1231, 1252, 1268, 1270, 1276, 1282, 1283, 1284, 1285, 1294, 1307, 1309, 1313, 1317, 1318, 1320], "states_turbin": [130, 149, 151, 516, 525, 534, 545, 553, 570], "amb_r": [130, 516, 525, 534, 545, 553], "place": [130, 516, 525, 534, 545, 553, 854, 855, 856, 1083, 1229, 1245, 1296, 1309, 1310, 1314], "calc_var": [147, 148, 568, 574, 575, 596, 597], "Their": [147, 148, 575], "ad": [147, 148, 181, 182, 183, 575, 586, 738, 744, 749, 755, 781, 786, 792, 793, 795, 798, 800, 804, 806, 808, 810, 814, 816, 832, 851, 1026, 1083, 1293, 1305, 1307, 1310, 1311, 1315, 1316, 1318, 1319, 1320], "automat": [147, 148, 149, 575, 825, 846, 854, 855, 856, 857, 858, 859, 1137, 1175, 1305, 1318], "n_rotor_point": [147, 153, 568, 572, 574, 579], "rotor_point_weight": [147, 155, 568, 573, 574, 580], "design_point": [147, 150, 568, 569, 574, 577], "design": [147, 150, 152, 568, 569, 571, 574, 577], "get_rotor_point": [147, 152, 568, 571, 574], "eval_rpoint_result": [147, 151, 568, 570, 574], "rpoint_result": [147, 151, 568, 570, 574], "rpoint": [147, 149, 376, 377, 554, 568, 574, 1290], "store_rpoint": 149, "store_rweight": 149, "store_amb_r": 149, "n_rpoint": [149, 151, 152, 153, 155, 570, 571, 572, 573, 579, 580], "reult": 149, "come": [149, 1308, 1315, 1318], "per": [149, 151, 382, 455, 570, 574, 575, 714, 832, 841, 843, 844, 845, 846, 849, 850, 1229, 1263, 1290, 1293, 1315], "formul": [150, 569, 577, 1315], "plane": [150, 569, 577, 852, 854, 855, 856, 857, 858, 859, 943, 1299], "z": [150, 569, 577, 854, 855, 856, 857, 858, 859], "coordin": [150, 173, 174, 176, 177, 179, 429, 433, 434, 447, 448, 569, 577, 682, 686, 687, 689, 692, 693, 694, 698, 699, 701, 704, 705, 707, 711, 712, 720, 823, 824, 854, 855, 856, 857, 858, 859, 1062, 1137, 1175, 1180, 1190, 1200, 1210, 1261, 1301, 1308, 1309, 1310, 1313, 1316], "radiu": [150, 569, 577, 728, 731, 733, 737, 739, 743, 745, 750, 754, 929, 930, 959, 960, 1280, 1281], "n_rotor_axi": [150, 569, 577], "n_rotor_sid": [150, 569, 577], "n_rotor_up": [150, 569, 577], "dpoint": [150, 569, 577], "copy_to_ambi": [151, 570], "either": [151, 455, 457, 482, 484, 556, 557, 570, 618, 619, 881, 982, 983, 1083, 1299, 1301, 1315, 1317], "In": [151, 570, 745, 910, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "latter": [151, 521, 570, 1261, 1305, 1310, 1314, 1315, 1318, 1320], "case": [151, 447, 448, 496, 570, 846, 869, 871, 872, 875, 880, 887, 1293, 1305, 1310, 1314, 1315, 1316, 1317, 1318, 1320], "expect": [151, 192, 193, 570, 603, 618, 1309, 1312], "If": [151, 570, 634, 707, 708, 733, 734, 745, 746, 750, 751, 777, 778, 794, 799, 809, 866, 869, 871, 872, 910, 1050, 1137, 1175, 1261, 1314, 1318], "describ": [156, 1293, 1308, 1309, 1316], "meteorolog": [156, 1313], "speed": [156, 397, 398, 399, 404, 422, 423, 424, 432, 455, 468, 469, 475, 476, 590, 591, 623, 624, 639, 641, 645, 646, 651, 652, 657, 658, 663, 666, 669, 672, 804, 880, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 908, 1283, 1284, 1293, 1294, 1300, 1301, 1308, 1309, 1310, 1312, 1313, 1315, 1316, 1318, 1319, 1320], "turbul": [156, 402, 428, 782, 783, 1301, 1302, 1305, 1309, 1312, 1313, 1318, 1319, 1320], "intens": [156, 402, 428, 1301, 1302, 1305, 1309, 1313, 1318, 1319, 1320], "air": [156, 400, 425, 468, 469, 475, 476, 639, 641, 645, 646, 651, 652, 657, 880, 1294, 1301, 1305, 1309, 1312], "densiti": [156, 400, 425, 468, 469, 475, 476, 639, 641, 657, 880, 1110, 1111, 1138, 1294, 1297, 1301, 1305, 1309, 1312], "mere": 161, "defin": [161, 682, 1137, 1175, 1176, 1186, 1294, 1297, 1301, 1310, 1313, 1314, 1315, 1317, 1320], "basic": [161, 192, 193, 497, 521, 614, 1292, 1294, 1310, 1312], "xy": [161, 162, 852, 854, 857, 1176, 1180, 1186, 1190, 1196, 1200, 1206, 1210, 1305, 1309, 1317, 1320], "ground": [161, 162, 412, 1301], "posit": [161, 162, 164, 195, 255, 959, 980, 1220, 1295, 1296, 1305, 1314], "2": [161, 162, 278, 368, 445, 446, 495, 513, 514, 561, 715, 716, 719, 727, 731, 732, 737, 743, 745, 754, 780, 782, 787, 825, 910, 915, 916, 917, 918, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 937, 939, 940, 941, 942, 943, 944, 947, 948, 949, 950, 955, 956, 957, 958, 1137, 1175, 1180, 1190, 1200, 1210, 1261, 1280, 1281, 1294, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "appear": [161, 162, 739, 1310, 1312, 1314, 1318, 1320], "mstates_sel": 161, "boolean": [161, 162, 581, 582, 1017, 1018, 1033, 1123, 1124, 1137, 1175, 1180, 1190, 1200, 1210], "diamet": [161, 162, 167, 168, 410, 441, 614, 615, 733, 823, 824, 825, 1096, 1176, 1177, 1180, 1186, 1187, 1190, 1196, 1197, 1200, 1206, 1207, 1210, 1294, 1301, 1305, 1310, 1313], "overwrit": [161, 162], "h": [161, 162, 167, 168, 192, 193, 412, 448, 642, 826, 1301, 1308, 1309, 1312, 1316], "hub": [161, 162, 167, 168, 441, 1294, 1305, 1312, 1313, 1316], "height": [161, 162, 167, 168, 169, 170, 392, 412, 429, 441, 447, 448, 455, 457, 466, 614, 615, 663, 664, 666, 667, 669, 670, 672, 673, 675, 676, 678, 680, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 1293, 1294, 1300, 1301, 1304, 1305, 1306, 1308, 1309, 1313, 1316], "turbine_model": [161, 162, 441, 498, 499, 508, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "add_model": [161, 163], "states_sel": [161, 163, 164, 380, 455, 457, 463, 466, 482, 484, 490, 493, 1290], "insert_model": [161, 164], "insert": [161, 164, 1283, 1284], "models_state_sel": 162, "can": [167, 287, 530, 556, 717, 756, 1016, 1083, 1137, 1175, 1292, 1293, 1294, 1295, 1302, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "overwritten": 167, "p_nomin": [167, 168, 394, 408, 642, 846, 1301, 1305], "nomin": [167, 168, 834, 1314], "power": [167, 168, 375, 396, 416, 419, 510, 590, 591, 638, 640, 645, 646, 651, 652, 657, 658, 832, 834, 839, 840, 846, 878, 880, 1071, 1290, 1294, 1295, 1298, 1301, 1304, 1305, 1306, 1310, 1312, 1313, 1315, 1318, 1319, 1320], "kw": [167, 168, 375, 393, 590, 591, 642, 846, 1290], "p_unit": [167, 168, 375, 642, 1290, 1305], "w": [168, 375, 391, 432, 439, 440, 455, 475, 476, 561, 638, 639, 641, 645, 646, 651, 652, 657, 889, 891, 893, 896, 899, 900, 905, 1137, 1175, 1283, 1284, 1290, 1294, 1299, 1301, 1305, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "mw": [168, 192, 193, 371, 375, 1290, 1308, 1312, 1314, 1318, 1319], "gw": [168, 319, 375, 1290, 1306], "verticalprofil": [169, 170, 171, 172, 475, 476, 482, 484, 663, 666, 669, 672, 675, 678, 1291, 1294], "vertic": [169, 852, 855, 858, 859, 1291, 1294, 1298, 1305, 1312, 1320], "profil": [169, 170, 171, 172, 475, 476, 484, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 897, 901, 902, 906, 1291, 1294, 1300, 1305, 1308, 1312], "input_var": [169, 171, 585, 586, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 681, 797, 803, 813], "profile_typ": [169, 172, 663, 666, 669, 672, 675, 678], "translat": [173, 1049, 1051, 1052, 1081, 1091, 1092, 1220, 1226, 1227, 1229, 1239, 1240, 1245, 1257, 1258, 1313, 1320], "global": [173, 1308], "also": [173, 287, 825, 1305, 1306, 1308, 1310, 1313, 1314, 1315, 1318, 1320], "respons": [173, 1294, 1313, 1315], "calc_ord": [173, 175, 682, 684, 689, 691, 694, 697, 701, 703, 707, 709], "get_wake_coo": [173, 177, 682, 687, 689, 693, 694, 699, 701, 705, 707, 712], "get_centreline_point": [173, 176, 682, 686, 689, 692, 694, 698, 701, 704, 707, 711], "along": [173, 174, 176, 574, 575, 682, 686, 689, 692, 694, 698, 701, 704, 707, 711, 1294, 1305, 1313, 1316, 1320], "centrelin": [173, 174, 176, 682, 686, 689, 692, 694, 698, 701, 704, 707, 711, 787, 788, 1305, 1313], "calc_centreline_integr": [173, 174, 682, 689, 694, 701, 707], "integr": [173, 174, 195, 278, 320, 368, 574, 575, 682, 689, 694, 701, 707, 787, 788, 1302, 1305], "dx": [174, 787, 788, 1311], "ipar": [174, 457, 619, 787, 788], "upper": [174, 1125, 1317], "bound": [174, 447, 448, 959, 980, 982, 989, 1095, 1100, 1105, 1110, 1116, 1121, 1125, 1126, 1132], "step": [174, 195, 306, 320, 445, 446, 574, 575, 694, 695, 787, 788, 846, 880, 1305, 1308, 1309, 1311, 1312, 1313, 1317, 1319], "consid": [174, 1016, 1026, 1305, 1318], "interpol": [174, 457, 585, 586, 619, 638, 640, 645, 651, 657, 658, 694, 695, 701, 702, 1294, 1305], "n_var": [174, 1026], "wake_coo": [177, 179, 687, 693, 699, 705, 712, 720], "init_wake_delta": [178, 181, 714, 717, 725, 728, 733, 738, 739, 744, 745, 749, 750, 755, 777, 781, 782, 786, 787, 792], "storag": [178, 181, 694, 695, 714, 717, 725, 728, 733, 738, 739, 744, 745, 749, 750, 755, 777, 781, 782, 786, 787, 792], "finalize_wake_delta": [178, 180, 714, 717, 722, 725, 728, 733, 739, 745, 750, 777, 782, 787], "amb_result": [178, 180, 183, 714, 717, 722, 725, 728, 733, 739, 745, 750, 777, 782, 787, 795, 800, 806, 810, 816], "afterward": [180, 722], "wakesuperposit": [182, 183, 184, 508, 717, 793, 798, 804, 808, 814, 1291, 1294], "superposit": [182, 508, 714, 717, 718, 725, 728, 729, 733, 734, 739, 740, 745, 746, 750, 751, 777, 778, 782, 783, 787, 788, 804, 814, 1291, 1294, 1305, 1311, 1313, 1319], "note": [182, 863, 1229, 1294, 1308, 1309, 1310, 1312, 1315, 1316, 1319, 1320], "matter": [182, 1314], "other": [182, 468, 873, 1007, 1045, 1046, 1049, 1053, 1054, 1081, 1220, 1229, 1241, 1242, 1245, 1293, 1298, 1305, 1307, 1309, 1311, 1313, 1314, 1315, 1320], "calc_wakes_plus_wak": [182, 184, 793, 796, 798, 801, 804, 807, 808, 811, 814, 817], "calc_final_wake_delta": [182, 183, 793, 795, 798, 800, 804, 806, 808, 810, 814, 816], "final_wake_delta": [183, 795, 800, 806, 810, 816], "simpl": [183, 795, 800, 806, 810, 816, 1305, 1309, 1314, 1316, 1320], "plu": [183, 795, 800, 806, 810, 816, 1261, 1279], "sel_sp": [184, 796, 801, 807, 811, 817], "wake_model_result": [184, 796, 801, 807, 811, 817], "origin": [184, 195, 255, 796, 801, 807, 811, 817, 952, 1029, 1052, 1055, 1056, 1092, 1137, 1175, 1227, 1240, 1258, 1306, 1317], "n_sel_sp": [184, 796, 801, 807, 811, 817], "boundari": [185, 186, 825, 912, 913, 917, 919, 921, 923, 927, 929, 931, 934, 936, 938, 941, 943, 945, 949, 951, 953, 957, 959, 960, 980, 981, 1095, 1096, 1097, 1098, 1099, 1176, 1177, 1180, 1186, 1187, 1190, 1196, 1197, 1200, 1206, 1207, 1210, 1295, 1297, 1308, 1310], "geom2d": [185, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 1176, 1177, 1186, 1187, 1196, 1197, 1206, 1207, 1279, 1310], "areageometri": [185, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 929, 936, 943, 951, 952, 959, 960, 1176, 1177, 1186, 1187, 1196, 1197, 1206, 1207, 1279, 1299], "wind_farm": [185, 186], "add_turbin": [185, 187, 441, 1320], "turbine_nam": [185, 189, 864, 866], "staticdata": [190, 191, 1292, 1308], "static": [190, 639, 641, 645, 646, 651, 652, 657, 658, 881, 883, 884, 919, 920, 1292, 1299, 1305, 1306, 1309, 1310, 1312, 1315, 1316, 1318, 1319], "directori": [190, 1292], "add_data_packag": [190, 881, 883], "context": [190, 881, 883, 884, 885, 886, 887, 888, 1310], "packag": [190, 881, 883, 884, 1286, 1292, 1293, 1294, 1295, 1299, 1302, 1305, 1306, 1307, 1308, 1310, 1311, 1313, 1316, 1320], "file_sfx": [190, 881, 883], "locat": [190, 568, 847, 881, 883, 884, 1283, 1284, 1307, 1308, 1315, 1320], "add_data_package_fil": [190, 881, 884], "file_nam": [190, 192, 867, 872, 876, 881, 884, 887, 1292], "add_fil": [190, 881, 885, 886], "file_path": [190, 443, 444, 823, 828, 829, 830, 831, 832, 852, 860, 863, 864, 866, 867, 873, 876, 878, 881, 885, 886, 889, 894, 895, 1293], "path": [190, 192, 193, 443, 444, 455, 457, 482, 484, 496, 510, 602, 603, 618, 619, 639, 641, 645, 646, 651, 652, 657, 658, 863, 866, 872, 881, 885, 886, 887, 894, 895, 936, 1260, 1261, 1278, 1299, 1306, 1318], "get_file_path": [190, 881, 887, 1308], "check_raw": [190, 881, 887], "toc": [190, 881, 888, 1308], "content": [190, 508, 512, 881, 888, 1318], "data_book": [191, 881, 882], "parse_pct_file_nam": [192, 1292], "pars": [192, 193, 447, 448, 1007, 1042, 1049, 1081, 1220, 1229, 1245, 1292], "format": [192, 193, 447, 448, 455, 827, 863, 889, 895, 1293, 1308, 1309], "csv": [192, 193, 441, 442, 455, 823, 828, 864, 866, 889, 890, 892, 893, 1278, 1293, 1299, 1305, 1310, 1312, 1315, 1316, 1317, 1318, 1319], "pathlib": [192, 193, 881, 887, 1308], "parsed_data": [192, 193], "parse_pct_two_fil": [193, 1292], "file_name_a": [193, 1292], "file_name_b": [193, 1292], "second": [193, 398, 423, 1301], "constant": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 745, 896, 898, 900, 904, 905, 908, 1286, 1301, 1305, 1309, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "amb_rpoint_result": [194, 1290], "amb_rpoint_r": [194, 1290], "dtype": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 1290, 1310], "see": [195, 196, 225, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 343, 1116, 1117, 1121, 1122, 1137, 1172, 1173, 1175, 1269, 1271, 1272, 1305, 1310, 1312, 1313, 1319], "help": [195, 225, 320, 343, 889, 1116, 1117, 1121, 1122, 1172, 1173, 1269, 1271, 1272, 1299], "accur": [195, 225, 320, 343, 1116, 1117, 1121, 1122, 1172, 1173, 1269, 1271, 1272], "signatur": [195, 225, 320, 343, 1116, 1117, 1121, 1122, 1172, 1173, 1269, 1271, 1272], "__hash__": [195, 215, 320, 332], "hash": [195, 215, 320, 332], "__str__": [195, 246, 320, 362, 959, 961, 980, 982, 989, 1000, 1007, 1049, 1062, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "__lt__": [195, 220, 320, 338], "__le__": [195, 218, 320, 336], "__eq__": [195, 208, 320, 327], "__ne__": [195, 223, 320, 341], "__gt__": [195, 214, 320, 331], "__ge__": [195, 212, 320, 330], "__add__": [195, 198, 320, 322], "__radd__": [195, 229, 320, 347], "__sub__": [195, 247, 320, 363], "__rsub__": [195, 242, 320, 359], "__mul__": [195, 222, 320, 340], "__rmul__": [195, 237, 320, 354], "__mod__": [195, 221, 320, 339], "__rmod__": [195, 236, 320, 353], "__divmod__": [195, 207, 320, 326], "divmod": [195, 207, 231, 320, 326, 349], "__rdivmod__": [195, 231, 320, 349], "__pow__": [195, 228, 320, 346], "mod": [195, 228, 239, 320, 346, 356], "pow": [195, 228, 239, 320, 346, 356], "__rpow__": [195, 239, 320, 356], "__neg__": [195, 224, 320, 342], "__pos__": [195, 227, 320, 345], "__abs__": [195, 197, 320, 321], "ab": [195, 197, 320, 321], "__bool__": [195, 205, 320, 324], "__int__": [195, 216, 320, 334], "__float__": [195, 209, 320, 328], "__floordiv__": [195, 210, 320, 329], "__rfloordiv__": [195, 234, 320, 351], "__truediv__": [195, 248, 320, 364], "__rtruediv__": [195, 243, 320, 360], "as_integer_ratio": [195, 255], "pair": [195, 255, 1137, 1175], "whose": [195, 255, 1295, 1308], "ratio": [195, 255], "equal": [195, 255, 394, 408, 411, 1301], "denomin": [195, 255, 320, 367], "rais": [195, 255, 447, 448, 887], "overflowerror": [195, 255], "infin": [195, 255], "valueerror": [195, 255, 1137, 1175], "is_integ": [195, 278, 320, 368], "finit": [195, 278, 320, 368], "otherwis": [195, 278, 887, 1312], "item": [195, 206, 279, 320, 325], "parametr": [195, 206, 320, 325], "wrapper": [195, 206, 320, 325, 498, 1294], "around": [195, 206, 320, 325], "__invert__": [195, 217, 320, 335], "__lshift__": [195, 219, 320, 337], "__rlshift__": [195, 235, 320, 352], "__rshift__": [195, 241, 320, 358], "__rrshift__": [195, 240, 320, 357], "__and__": [195, 199, 320, 323], "__rand__": [195, 230, 320, 348], "__xor__": [195, 249, 320, 365], "__rxor__": [195, 244, 320, 361], "__or__": [195, 226, 320, 344], "__ror__": [195, 238, 320, 355], "tolist": [195, 312, 320], "method": [195, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 443, 586, 814, 815, 894, 895], "ident": [195, 196, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 1309, 1320], "attribut": [195, 196, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 1308], "itemset": [195, 280, 320], "tobyt": [195, 310, 320], "tofil": [195, 311, 320], "tostr": [195, 313, 320], "byteswap": [195, 258, 320], "astyp": [195, 256, 320], "getfield": [195, 276, 320], "setfield": [195, 299, 320], "resiz": [195, 296, 320], "__array__": [195, 200, 320], "sc": [195, 200, 204, 320], "__array_wrap__": [195, 204, 320], "__sizeof__": [195, 245, 320], "byte": [195, 245, 281, 285, 287, 306, 320], "__reduce__": [195, 232, 320], "helper": [195, 232, 320, 860, 889, 894, 895, 1055, 1286, 1295, 1299], "pickl": [195, 232, 320], "dump": [195, 270, 271, 320], "transpos": [195, 315, 320], "put": [195, 291, 320], "repeat": [195, 294, 320, 1083], "choos": [195, 259, 320, 1137, 1175, 1307, 1312, 1314, 1319], "sort": [195, 303, 320], "argsort": [195, 254, 320], "searchsort": [195, 298, 320], "argmax": [195, 252, 320], "argmin": [195, 253, 320], "reshap": [195, 295, 320], "squeez": [195, 304, 320], "view": [195, 274, 317, 320], "swapax": [195, 308, 320], "max": [195, 282, 320, 495, 603, 814, 815, 825, 848, 849, 850, 854, 855, 856, 857, 858, 859, 1062, 1063, 1072, 1080, 1081, 1083, 1125, 1151, 1152, 1297, 1305, 1311, 1315], "min": [195, 284, 320, 495, 603, 825, 848, 849, 850, 854, 855, 856, 857, 858, 859, 1062, 1063, 1072, 1080, 1081, 1083, 1125, 1151, 1152, 1297, 1305, 1315, 1317], "ptp": [195, 290, 320], "trace": [195, 314, 320, 1317], "diagon": [195, 268, 320], "clip": [195, 260, 320], "conj": [195, 262, 320], "conjug": [195, 263, 320], "nonzero": [195, 288, 320], "std": [195, 305, 320], "sum": [195, 307, 320, 825, 832, 838, 843, 845, 848, 849, 850, 851, 1007, 1037, 1038, 1049, 1062, 1063, 1072, 1080, 1081, 1137, 1175, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1305, 1318], "cumsum": [195, 266, 320], "prod": [195, 289, 320], "cumprod": [195, 265, 320], "compress": [195, 261, 320], "flatten": [195, 275, 320], "ravel": [195, 292, 320], "round": [195, 297, 320], "__format__": [195, 211, 320], "formatt": [195, 211, 320], "setflag": [195, 300, 320], "newbyteord": [195, 287, 320], "new_ord": [195, 287, 320], "differ": [195, 287, 320, 513, 530, 539, 1294, 1302, 1305, 1308, 1309, 1315], "ndim": [195, 286, 320], "stride": [195, 306, 320], "pointer": [195, 267, 320], "items": [195, 281, 320], "length": [195, 281, 285, 320, 417, 438, 445, 495, 513, 514, 694, 695, 701, 702, 896, 897, 898, 900, 901, 902, 904, 905, 906, 908, 1055, 1295, 1301, 1305, 1308], "element": [195, 281, 302, 320, 574, 575, 1137, 1175], "gentyp": [195, 302, 320], "nbyte": [195, 285, 320], "descriptor": [195, 269, 320], "real": [195, 293, 320, 910, 1299], "imag": [195, 277, 320, 825, 847, 854, 855, 856, 857, 858, 859, 912, 913, 919, 921, 923, 929, 931, 936, 938, 943, 945, 951, 953], "imaginari": [195, 277, 320], "flat": [195, 274, 320], "t": [195, 196, 320, 427, 439, 440, 441, 623, 624, 701, 702, 851, 889, 891, 1137, 1175, 1301], "__array_interface__": [195, 201, 320], "protocol": [195, 201, 203, 320], "python": [195, 201, 320, 1137, 1175, 1305, 1306, 1313], "side": [195, 201, 320, 851], "__array_struct__": [195, 203, 320], "struct": [195, 203, 320], "__array_priority__": [195, 202, 320], "prioriti": [195, 202, 320], "pleas": [196, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 1303, 1306], "version": [206, 278, 325, 368, 1137, 1175, 1305, 1307], "22": [206, 278, 325, 368, 1308, 1310, 1314, 1318], "alia": [206, 325], "genericalia": [206, 325], "import": [206, 325, 1137, 1175, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "signedinteg": [206, 320, 325, 1290], "pep": [206, 325], "585": [206, 325], "hint": [206, 325], "gener": [206, 325, 682, 787, 818, 820, 822, 832, 847, 852, 854, 855, 856, 857, 858, 859, 968, 1025, 1296, 1298, 1302, 1305, 1308, 1310], "standard": [206, 325, 832, 842, 1137, 1175, 1316], "doubl": [255, 278, 1305], "10": [255, 707, 733, 745, 756, 777, 782, 787, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "25": [255, 734, 745, 746, 782, 783, 787, 788, 1308, 1310, 1312, 1314, 1316, 1318], "4": [255, 733, 1137, 1175, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "chang": [287, 602, 603, 1294, 1305, 1306, 1307, 1308, 1312], "made": 287, "field": [287, 804, 832, 851, 1309, 1313, 1316, 1319, 1320], "follow": [287, 455, 694, 739, 1137, 1175, 1294, 1304, 1305, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320], "swap": 287, "opposit": 287, "endian": 287, "littl": 287, "big": 287, "nativ": 287, "ignor": 287, "abov": [287, 855, 856, 858, 859, 1306, 1310, 1314, 1315, 1318, 1320], "new_dtyp": 287, "giga": [319, 1290], "watt": [319, 371, 375, 388, 391, 393, 846, 1290], "ityp": [320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 1290], "__index__": [320, 333], "convert": [320, 333, 1137, 1175, 1261, 1316], "suitabl": [320, 333], "bit_count": [320, 366], "bit": [320, 366], "absolut": [320, 366, 405, 435, 627, 630, 1294, 1301, 1305, 1320], "analog": [320, 366], "builtin": [320, 366], "popcount": [320, 366], "c": [320, 366, 1137, 1175, 1307, 1320], "numer": [320, 369, 959, 980, 982, 989, 996, 1000, 1004, 1007, 1039, 1049, 1062, 1071, 1073, 1079, 1081, 1220, 1229, 1245], "itself": [320, 369], "int64": [366, 368, 1310, 1316], "127": [366, 1318], "7": [366, 1137, 1175, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "uint32": 368, "5": [368, 733, 783, 1137, 1175, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "kappa": [370, 896, 898, 900, 904, 905, 908, 1290, 1300], "41": [370, 896, 898, 900, 904, 905, 908, 1290, 1300, 1310, 1317], "van": [370, 896, 898, 900, 904, 905, 908, 1290], "karman": [370, 896, 898, 900, 904, 905, 908, 1290], "mega": [371, 1290], "pop": [374, 1016, 1026, 1052, 1092, 1227, 1240, 1258, 1290], "popul": [374, 959, 964, 968, 980, 982, 985, 989, 993, 1000, 1007, 1015, 1016, 1018, 1022, 1025, 1026, 1049, 1055, 1056, 1062, 1065, 1071, 1073, 1076, 1079, 1081, 1095, 1098, 1100, 1103, 1105, 1108, 1110, 1113, 1116, 1119, 1121, 1124, 1126, 1129, 1132, 1135, 1138, 1141, 1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166, 1169, 1172, 1176, 1179, 1186, 1189, 1196, 1199, 1206, 1209, 1220, 1229, 1245, 1290, 1295, 1308, 1310], "1000000000": [375, 1290], "1000000": [375, 1290], "tw": [375, 388, 1290], "1000000000000": [375, 1290], "factor": [375, 415, 590, 591, 618, 619, 733, 734, 745, 746, 782, 783, 787, 788, 897, 901, 902, 906, 1062, 1063, 1072, 1080, 1111, 1139, 1290, 1294, 1300, 1301, 1305, 1320], "rel": [375, 406, 436, 1290, 1301], "rotor_point": [376, 377, 1290, 1311], "rweight": [378, 1290], "rotor_weight": [378, 1290], "state_source_turbin": [382, 1290], "tmodel": [384, 1290], "tmodel_sel": [385, 1290], "tname": [386, 1290, 1310, 1315, 1316], "terra": [388, 1290], "valid": [389, 645, 646, 651, 652, 745, 1073, 1074, 1132, 1133, 1134, 1135, 1136, 1176, 1177, 1180, 1186, 1190, 1196, 1200, 1206, 1210, 1290, 1297, 1306, 1318], "xyh": [392, 823, 829, 831, 1301], "vector": [392, 429, 445, 446, 854, 855, 856, 943, 944, 1016, 1026, 1055, 1137, 1175, 1282, 1283, 1284, 1285, 1295, 1299, 1301, 1306, 1310, 1318, 1319], "kilo": [393, 1290], "amb_cap": [394, 439, 440, 889, 891, 1301, 1318], "capac": [394, 408, 832, 834, 1301, 1305, 1318], "amb_p": [394, 396, 411, 439, 440, 889, 891, 1301, 1309, 1310, 1314, 1316, 1318], "amb_ct": [395, 439, 440, 889, 891, 1301, 1310, 1316], "thrust": [395, 409, 623, 624, 1294, 1301, 1305, 1306, 1313, 1314, 1320], "coeffici": [395, 409, 910, 1301, 1313, 1314], "user": [396, 419, 1137, 1175, 1286, 1293, 1301, 1305, 1313], "amb_rew": [397, 439, 440, 876, 877, 889, 891, 1301, 1309, 1310, 1314, 1316, 1317, 1318], "amb_rews2": [398, 439, 440, 889, 891, 1301, 1310, 1316], "moment": [398, 399, 423, 424, 1301], "amb_rews3": [399, 439, 440, 889, 891, 1301, 1310, 1316], "third": [399, 424, 1301], "amb_rho": [400, 439, 440, 889, 891, 1301, 1310, 1316], "kg": [400, 425, 1301], "m3": [400, 425, 1301], "amb_t": [401, 439, 440, 889, 891, 1301], "temperatur": [401, 427, 1301], "kelvin": [401, 427, 1301], "amb_ti": [402, 439, 440, 889, 891, 1301, 1311, 1316], "amb_wd": [403, 439, 440, 603, 867, 869, 871, 872, 876, 889, 891, 1301, 1316], "degre": [403, 405, 406, 430, 435, 436, 910, 1283, 1284, 1299, 1301, 1320], "amb_w": [404, 439, 440, 889, 891, 1301, 1308, 1310, 1312, 1315, 1316, 1318, 1319], "amb_yaw": [405, 439, 440, 1301], "yaw": [405, 406, 435, 436, 439, 440, 627, 630, 646, 652, 658, 707, 777, 1294, 1301, 1304, 1305, 1306, 1310, 1311, 1316], "angl": [405, 406, 435, 436, 739, 740, 772, 1245, 1246, 1301, 1309, 1317, 1320], "amb_yawm": [406, 439, 440, 1301], "amb_yld": [407, 439, 440, 889, 891, 1301, 1318], "yield": [407, 437, 818, 820, 822, 832, 839, 846, 1298, 1301, 1303, 1305, 1306, 1312, 1313, 1318, 1319], "gwh": [407, 437, 846, 1301, 1312, 1318, 1319], "cap": [408, 439, 440, 889, 891, 1301, 1318], "ct": [409, 439, 440, 510, 590, 623, 624, 638, 640, 641, 645, 646, 651, 652, 657, 658, 708, 729, 730, 731, 733, 734, 736, 737, 740, 742, 743, 745, 746, 751, 753, 754, 756, 771, 778, 782, 783, 787, 788, 878, 880, 889, 891, 1294, 1298, 1301, 1305, 1308, 1314, 1316, 1320], "eff": [411, 836, 889, 891, 1301, 1318], "effici": [411, 832, 835, 836, 1137, 1175, 1301, 1305, 1312, 1314, 1318, 1319], "over": [412, 787, 832, 837, 838, 869, 871, 872, 910, 1137, 1175, 1301, 1302, 1305, 1310, 1319], "k": [413, 414, 415, 633, 634, 707, 708, 733, 734, 739, 740, 745, 746, 750, 751, 772, 777, 778, 1294, 1301, 1305, 1311, 1318, 1319], "growth": [413, 707, 708, 733, 734, 739, 740, 745, 746, 750, 751, 777, 778, 782, 783, 787, 788, 1301, 1305, 1319], "kb": [414, 415, 633, 634, 1301, 1305], "kti": [414, 415, 633, 634, 635, 636, 637, 1294, 1301, 1305, 1311, 1318], "ti": [414, 415, 428, 439, 440, 468, 469, 475, 476, 561, 633, 634, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 787, 788, 814, 880, 889, 891, 1079, 1294, 1295, 1301, 1305, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "between": [415, 1127, 1137, 1175, 1176, 1177, 1186, 1187, 1196, 1197, 1206, 1207, 1230, 1280, 1281, 1301, 1309, 1310, 1312], "max_p": [416, 590, 595, 1301, 1314, 1315], "maxp": [416, 1301, 1314, 1315], "derat": [416, 590, 878, 1298, 1301, 1305, 1314, 1315], "boost": [416, 590, 878, 1298, 1301, 1305, 1314, 1315], "mol": [417, 495, 672, 903, 904, 907, 908, 1300, 1301, 1308], "monin": [417, 903, 904, 907, 908, 1301, 1308], "ubukhof": [417, 1301], "pa_alpha": [420, 1301], "alpha": [420, 707, 708, 756, 771, 777, 778, 1301, 1310], "porteagel": [420, 421, 777, 1301, 1302, 1305], "pa_beta": [421, 1301], "beta": [421, 707, 708, 756, 771, 778, 1301], "rew": [422, 439, 440, 889, 891, 1301, 1305, 1309, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "rews2": [423, 439, 440, 623, 624, 646, 652, 658, 889, 891, 1301], "rews3": [424, 439, 440, 590, 591, 595, 646, 652, 658, 889, 891, 1301], "rho": [425, 439, 440, 468, 469, 475, 476, 638, 639, 641, 645, 646, 651, 652, 880, 889, 891, 1301, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "shear": [426, 675, 899, 1294, 1299, 1301, 1305], "expon": [426, 646, 652, 658, 675, 899, 1294, 1301, 1305, 1320], "txyh": [429, 1301], "wd": [430, 439, 440, 468, 469, 475, 476, 603, 689, 690, 889, 891, 1282, 1283, 1284, 1285, 1299, 1301, 1305, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "yawm": [436, 439, 440, 627, 630, 707, 772, 777, 1294, 1301, 1320], "yld": [437, 439, 440, 889, 891, 1301, 1318], "z0": [438, 896, 897, 898, 900, 901, 902, 904, 905, 906, 908, 1300, 1301, 1308], "rough": [438, 896, 897, 898, 900, 901, 902, 904, 905, 906, 908, 1301], "amb2var": [439, 1301], "map": [439, 440, 447, 448, 455, 457, 482, 484, 495, 513, 514, 515, 516, 517, 518, 519, 520, 556, 557, 585, 586, 603, 863, 873, 875, 974, 975, 1010, 1011, 1294, 1298, 1301, 1305, 1311, 1312, 1315], "var2amb": [440, 1301], "farm_layout": [441, 442, 443, 444, 445, 446, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319], "add_from_csv": [441, 442, 1293], "data_sourc": [441, 442, 447, 448, 455, 457, 466, 482, 484, 493, 556, 557, 585, 586, 602, 603, 618, 619, 638, 639, 645, 646, 1293, 1308, 1309, 1310, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "col_index": 441, "col_nam": 441, "col_x": 441, "col_i": 441, "col_h": 441, "col_d": 441, "col_id": 441, "cols_models_pr": 441, "cols_models_post": 441, "turbine_base_nam": 441, "turbine_id": 441, "turbine_base_name_count_shift": 441, "turbine_paramet": [441, 444, 445, 446], "panda": [441, 442, 455, 457, 463, 482, 484, 490, 495, 556, 557, 585, 586, 602, 603, 618, 619, 638, 639, 640, 641, 645, 646, 651, 652, 657, 658, 823, 832, 839, 841, 843, 844, 845, 846, 849, 850, 852, 860, 863, 864, 865, 867, 869, 873, 876, 878, 889, 894, 895, 1293, 1294, 1299, 1305, 1314, 1315, 1316, 1318, 1320], "datafram": [441, 442, 455, 457, 482, 484, 495, 556, 557, 585, 586, 602, 603, 618, 619, 638, 639, 640, 641, 645, 646, 651, 652, 657, 658, 839, 841, 843, 844, 845, 846, 849, 850, 863, 864, 865, 867, 869, 876, 894, 895, 1293, 1294, 1305, 1314, 1315, 1316, 1318, 1320], "column": [441, 455, 457, 482, 484, 495, 556, 557, 585, 586, 603, 618, 619, 639, 641, 645, 646, 651, 652, 657, 863, 866, 889, 895, 910, 1137, 1175, 1261, 1308, 1312, 1314, 1315, 1317, 1318], "enter": 441, "forward": [441, 443, 444, 445, 446, 501, 825, 830, 854, 855, 856, 857, 858, 859, 863, 894, 895], "add_from_df": [442, 1293, 1305], "add_from_fil": [443, 1293, 1308, 1318], "infer": [443, 444, 1316], "suffix": [443, 447, 448], "add_from_json": [444, 1293], "set_farm_nam": 444, "turbim": [444, 1293], "json": [444, 827, 1293], "add_grid": [445, 1293, 1309, 1317, 1319], "xy_bas": [445, 446, 1293, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1319], "step_vector": [445, 1293, 1309, 1317, 1319], "regular": [445, 447, 574, 1196, 1206, 1229, 1245, 1293, 1294, 1296, 1297, 1305, 1317, 1319], "grid": [445, 447, 530, 539, 574, 1111, 1139, 1145, 1186, 1187, 1196, 1206, 1207, 1229, 1230, 1245, 1293, 1294, 1296, 1297, 1305, 1309, 1319], "add_row": [446, 1293, 1310, 1312, 1314, 1315, 1316], "xy_step": [446, 1293, 1310, 1312, 1314, 1315, 1316], "row": [446, 618, 619, 1137, 1175, 1206, 1207, 1229, 1230, 1293, 1304, 1306, 1312, 1314, 1317, 1318], "fielddatanc": [447, 448, 449, 450, 451, 452, 453, 454, 1293, 1305, 1309], "heterogen": [447, 1293, 1304, 1306, 1312], "horizont": [447, 852, 854, 857, 1293, 1298, 1305, 1308, 1309, 1312, 1316], "netcdf": [447, 1293, 1309], "pattern": [447, 448, 1305, 1314], "end": [447, 448, 851, 883, 889, 894, 895], "nc": [447, 448, 889, 890, 892, 893, 1305, 1309], "One": [447, 448, 1309], "mani": [447, 448, 1305, 1306], "ovar": [447, 455, 482, 556, 618], "var2ncvar": [447, 448, 1309], "fixed_var": [447, 448, 455, 457, 482, 484, 493, 1308, 1309, 1310, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "uniform": [447, 448, 455, 457, 475, 482, 484, 556, 557, 634, 678, 701, 1081, 1083, 1293, 1294, 1305, 1308, 1316, 1317, 1318, 1320], "read": [447, 448, 455, 457, 482, 484, 496, 557, 586, 603, 619, 639, 641, 645, 646, 651, 652, 657, 658, 889, 894, 1260, 1261, 1278, 1279, 1293, 1299, 1305, 1309, 1318], "states_coord": [447, 448, 1309], "x_coord": [447, 448, 1309], "y_coord": [447, 448, 1309], "h_coord": [447, 448, 1309], "pre_load": [447, 448, 1309], "weight_ncvar": [447, 448], "bounds_error": [447, 448, 1309], "exceed": [447, 448, 495], "fill_valu": [447, 448], "time_format": [447, 448, 1309], "datetim": [447, 448], "string": [447, 448, 512, 861, 863, 869, 871, 872, 959, 961, 980, 982, 989, 1000, 1007, 1049, 1062, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1137, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1175, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "sel": [447, 448, 1081, 1083], "xr": [447, 448], "utmx": [448, 1309], "utmi": [448, 1309], "d_": 448, "multiheightst": [455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 1293, 1305], "multipl": [455, 714, 1293, 1294, 1305, 1306, 1315], "taken": [455, 1316], "exampl": [455, 880, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "50": [455, 495, 1308, 1310, 1311, 1312, 1315, 1319], "60": [455, 1310], "100": [455, 595, 694, 695, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "var2col": [455, 457, 482, 484, 493, 495, 556, 557, 1308, 1310, 1312, 1315, 1317, 1318, 1319], "fix": [455, 457, 468, 482, 484, 1100, 1157, 1186, 1293, 1297, 1305], "pd_read_par": [455, 457, 484, 557], "slice": [455, 457, 463, 482, 484, 490, 530, 1294, 1316], "rang": [455, 457, 463, 482, 484, 490, 602, 603, 1294, 1305, 1314, 1315, 1320], "states_loc": [455, 457, 463, 466, 482, 484, 490, 493, 1312], "loc": [455, 457, 463, 482, 484, 490, 1314, 1315], "rdict": [455, 456, 466, 467, 482, 483, 493, 494], "index_col": [455, 456, 466, 467, 482, 483, 493, 494], "scipi": [457, 619, 657, 658, 1137, 1175], "interp1d": 457, "multiheighttimeseri": [466, 467, 1293, 1305, 1308, 1312], "multi": [466, 717, 1293, 1304, 1305, 1306], "timeseri": [466, 493, 494, 701, 702, 846, 1293, 1294, 1304, 1305, 1306, 1312, 1317], "parse_d": [466, 467, 493, 494], "scanw": [468, 469, 470, 471, 472, 473, 474, 1293], "ws_list": [468, 469], "singlestatest": [475, 476, 477, 478, 479, 480, 481, 1293, 1305, 1316], "profdict": [475, 482], "profdata": [475, 476], "statest": [482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 1293, 1308, 1310, 1314, 1315, 1319, 1320], "readabl": [482, 1293, 1315, 1318], "rpar": [482, 645], "create_random_abl_st": [495, 1293], "cols_minmax": 495, "mol_abs_rang": 495, "5000": [495, 1310, 1314, 1317, 1318], "normal": [495, 564, 565, 689, 825, 1137, 1175, 1294, 1308, 1314, 1319], "random": [495, 1293, 1308], "abl": [495, 663, 666, 669, 672, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 1293, 1294, 1305], "neutral": [495, 663, 672, 896, 897, 898, 1294, 1299], "stratif": 495, "windio": [496, 1305], "read_cas": [496, 1293], "case_yaml": [496, 1293], "site_par": [496, 1293], "farm_par": 496, "ana_par": 496, "yaml": [496, 1293, 1305], "read_sit": 496, "read_farm": 496, "read_analys": 496, "basicfarmcontrol": [497, 1294, 1311], "condit": [497, 602, 959, 960, 1280, 1294, 1305, 1310, 1313, 1315, 1316, 1320], "farm_model": [498, 499, 500, 501, 502, 503, 504, 508, 1311], "turbine2farmmodel": [498, 499, 500, 501, 502, 503, 504, 1294, 1311], "promot": [498, 1294], "simpli": [498, 564, 1294, 1307, 1308, 1311, 1315, 1319], "init": [501, 883, 884, 1050, 1081, 1083, 1086, 1223, 1234, 1254], "slightli": [505, 1299, 1315], "enhanc": [505, 1299], "pass": [507, 1137, 1175, 1319], "kind": [508, 1292, 1309, 1320], "turbine_ord": 508, "partial_wak": [508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 1311], "partialwakemodel": 508, "wake_superposit": [508, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 1311], "pct_file": [508, 510], "print_toc": [508, 512, 1311], "curv": [510, 638, 639, 641, 645, 651, 652, 657, 658, 878, 880, 1294, 1298, 1305, 1306, 1314], "creation": [510, 867, 876, 1286, 1298, 1319], "more": [513, 1137, 1175, 1305, 1315, 1318], "than": [513, 804, 1318], "invok": [513, 590, 682, 1294, 1305, 1306, 1307, 1310, 1318, 1319, 1320], "wname2pwak": [513, 514], "wtype2pwak": [513, 514], "ones": [514, 522, 531, 540, 543, 551, 910], "partialaxiwak": [521, 522, 523, 524, 525, 526, 527, 528, 529, 714, 1294, 1311], "axial": [521, 1294], "idea": [521, 804, 1314], "radial": [521, 522, 715, 727, 731, 732, 737, 743, 754], "n": [521, 522, 530, 531, 539, 540, 574, 575, 854, 855, 856, 943, 944, 972, 973, 1040, 1041, 1100, 1101, 1105, 1106, 1116, 1117, 1137, 1157, 1158, 1175, 1294, 1308, 1311, 1316, 1317, 1318, 1320], "radii": [521, 730, 731, 736, 737, 742, 743, 753, 754, 1280, 1299], "cover": 521, "disc": [521, 542, 959, 960, 1313], "overlap": [521, 542, 574, 575], "circl": [521, 542, 929, 930, 931, 932, 933, 934, 935, 1176, 1177, 1180, 1186, 1187, 1190, 1196, 1197, 1200, 1206, 1207, 1210, 1280, 1281, 1299, 1310], "area": [521, 574, 575, 913, 919, 921, 923, 929, 931, 938, 945, 953, 959, 960, 1261, 1280, 1281, 1295, 1299, 1305, 1310], "partialdistslicedwak": [530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 717, 1294, 1311], "distanc": [530, 733, 734, 912, 913, 917, 919, 921, 923, 927, 929, 931, 934, 936, 938, 941, 943, 945, 949, 951, 953, 957, 982, 983, 1126, 1127, 1137, 1139, 1151, 1152, 1175, 1176, 1177, 1186, 1187, 1196, 1197, 1206, 1207, 1230, 1280, 1281, 1294, 1295, 1297, 1299, 1310, 1320], "make": [530, 1277, 1280, 1294, 1295, 1307, 1310, 1318], "structur": [530, 657, 1294, 1305, 1312, 1318], "optin": [530, 1261], "done": [530, 970, 1317], "grotor": 530, "gridrotor": [530, 531, 540, 574, 575, 576, 577, 578, 579, 580, 1294, 1311], "partialgrid": [539, 540, 541, 1294, 1311], "mai": [539, 590, 1294, 1309, 1320], "partialtophat": [542, 543, 544, 545, 546, 547, 548, 549, 1294, 1311], "hat": [542, 728, 1294, 1302, 1320], "rotorpoint": [550, 551, 552, 553, 554, 555, 1294, 1311], "directli": [550, 876, 881, 1007, 1016, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1292, 1294, 1298, 1299, 1302, 1315], "get_wake_point": [550, 554], "setuniformdata": [556, 557, 558, 559, 560, 1294, 1305], "both": [556, 557, 725, 726, 745, 748, 782, 785, 787, 790, 1229, 1314, 1318, 1319], "assum": [556, 557, 1280, 1317], "Or": [556, 557], "independ": [556, 557, 1312], "written": [556, 557, 866, 1306], "tke2ti": [561, 562, 563, 1294, 1305, 1311], "tke": [561, 1294, 1305, 1308, 1312, 1313], "sqrt": [561, 1137, 1175, 1294], "wakedelta": [564, 565, 566, 567, 1294], "subtract": [564, 1294, 1310], "divid": [564, 565, 854, 855, 856, 857, 858, 859], "centrerotor": [568, 569, 570, 571, 572, 573, 1294, 1311], "compos": [574, 1294], "possibli": [574, 1294], "kick": [574, 1294], "out": [574, 1137, 1175, 1294, 1315, 1317, 1320], "outsid": [574, 1294, 1309], "reduct": [574, 575], "actual": [574, 575, 1007, 1016, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1305, 1307, 1312, 1314, 1316], "repres": [574, 575, 618, 657, 826, 929, 936, 943, 1294, 1299, 1308, 1319, 1320], "circ": [574, 575], "recalcul": [574, 575], "accordingli": [574, 575], "nint": [574, 575], "200": [574, 575, 1308, 1310, 1312, 1314, 1320], "in_var": [581, 582], "vairabl": [581, 582], "func": [581, 582, 1007, 1016, 1026, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1262, 1268, 1269, 1270, 1271, 1276], "in0": [581, 582], "in1": [581, 582], "stsel": [581, 582], "out0": [581, 582], "ou1": [581, 582], "where": [581, 582, 826, 1137, 1175, 1283, 1284, 1310, 1312, 1313, 1315, 1320], "inx": [581, 582], "outi": [581, 582], "lookupt": [585, 586, 587, 588, 589, 1294, 1305], "tabl": [585, 586, 618, 1294, 1305, 1314, 1315], "varmap": [585, 586, 959, 974, 975, 980, 982, 989, 1000, 1062, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172], "pd_file_read_par": [586, 603, 619, 639, 646], "xr_interp_arg": 586, "powermask": [590, 591, 592, 593, 594, 595, 1294, 1305, 1311, 1314], "below": [590, 855, 856, 858, 859, 1305, 1307], "rate": 590, "higher": [590, 793, 794, 804, 805, 1305], "introduc": [590, 1302, 1305], "so": [590, 910, 1305, 1313, 1314, 1316, 1317], "wise": [590, 618, 619, 1137, 1175], "var_ws_p": [590, 591, 646, 652, 658], "factor_p": [590, 591, 595], "update_p_ct": [590, 595], "rated_p": [590, 595], "var_w": 595, "p_lim": 595, "rotorcentrecalc": [596, 597, 598, 599, 600, 601, 1294, 1305, 1311], "sectormanag": [602, 603, 604, 605, 606, 1294, 1305, 1315], "range_var": [602, 603, 1315], "target_var": [602, 603, 1315], "col_tind": 603, "col_tnam": [603, 1315], "colmap": [603, 1315], "var_period": 603, "360": 603, "within": [603, 881, 1176, 1177, 1186, 1187, 1196, 1197, 1206, 1207, 1280, 1295, 1297, 1299, 1305, 1307, 1310, 1313], "exist": [603, 756, 775, 887, 1125, 1313, 1316, 1320], "period": 603, "setfarmvar": [607, 608, 609, 610, 611, 612, 613, 1294, 1305, 1314, 1320], "add_var": [607, 609, 1081, 1083, 1314, 1320], "remov": [607, 613, 1307, 1314], "setxyhd": [614, 615, 616, 617, 1294], "set_xi": [614, 615], "set_h": [614, 615], "set_d": [614, 615], "tablefactor": [618, 619, 620, 621, 622, 1294, 1305], "multipli": [618, 619, 733, 734, 745, 746, 782, 783, 787, 788, 1294, 1305], "dimension": [618, 1137, 1175, 1294, 1305], "col_var": [618, 619], "row_var": [618, 619], "onto": [618, 619], "interpn": [619, 657, 658], "thrust2ct": [623, 624, 625, 626, 1294, 1305, 1311], "thrust_var": [623, 624], "wsct": [623, 645, 651, 657], "var_ws_ct": [623, 624, 646, 652, 658], "yaw2yawm": [627, 628, 629, 1294, 1305, 1311, 1320], "yawm2yaw": [630, 631, 632, 1294, 1305, 1311, 1320], "linear": [633, 793, 814, 815, 1294, 1311, 1319], "ti_var": [633, 634, 787, 788], "k_var": [633, 634, 707, 708, 733, 734, 739, 740, 745, 746, 750, 751, 777, 778], "ti_val": [633, 634], "cpctfile": [638, 639, 1294, 1305], "pctfile": [638, 639, 641, 645, 646, 647, 648, 649, 650, 1294, 1308, 1311, 1315, 1316, 1318], "cp": [638, 639, 640, 641, 1294, 1305], "col_w": [638, 639, 645, 646, 651], "col_cp": [638, 639, 641], "225": [638, 639, 641, 657, 880, 1308, 1309, 1310, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "paramer": 639, "cpctfromtwo": [640, 641, 1294, 1305], "pctfromtwo": [640, 651, 652, 653, 654, 655, 656, 1294], "data_source_cp": [640, 641], "data_source_ct": [640, 641, 651, 652, 657, 658], "col_ws_cp_fil": 641, "pd_file_read_pars_cp": 641, "pd_file_read_pars_ct": [641, 652, 658], "nulltyp": [642, 643, 644, 1294, 1305, 1311], "doe": [642, 1176, 1186, 1196, 1206, 1294, 1312, 1314, 1317], "col_p": [645, 646, 651, 652], "col_ct": [645, 646, 651, 652], "densitii": [645, 646, 651, 652], "correct": [645, 646, 651, 652, 682, 733, 734, 739, 804, 1294, 1305, 1313, 1314, 1316], "wsp": [645, 651, 657], "p_ct": [646, 652, 657, 658], "p_p": [646, 652, 658, 1320], "88": [646, 652, 658, 1308, 1310, 1318, 1320], "source_p": [651, 657], "source_ct": [651, 657], "rpars_p": [651, 657], "rpars_ct": [651, 657], "data_source_p": [651, 652, 657, 658], "col_ws_p_fil": [651, 652], "col_ws_ct_fil": 652, "pd_file_read_pars_p": [652, 658], "wsrho2pctfromtwo": [657, 658, 659, 660, 661, 662, 1294], "950": [657, 1310], "975": 657, "275": 657, "subsequ": [657, 1313], "neccessarili": [657, 1294, 1318], "ipars_p": 657, "ipars_ct": 657, "interpn_pars_p": 658, "interpn_pars_ct": 658, "vertical_profil": [663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681], "abllogneutralwsprofil": [663, 664, 665, 1294], "log": [663, 666, 669, 672, 897, 901, 902, 906, 1294, 1300], "abllogstablewsprofil": [666, 667, 668, 1294], "stabl": [666, 672, 900, 901, 902, 903, 904, 1294, 1299, 1307], "abllogunstablewsprofil": [669, 670, 671, 1294], "unstabl": [669, 672, 905, 906, 907, 908, 1294, 1299], "abllogwsprofil": [672, 673, 674, 1294, 1308], "pick": 672, "shearedprofil": [675, 676, 677, 1294, 1305], "uniformprofil": [678, 679, 680, 681, 1294], "farmord": [682, 683, 684, 685, 686, 687, 688, 1294, 1311], "warn": 682, "test": [682, 912, 918, 919, 921, 928, 929, 935, 936, 942, 943, 950, 951, 958, 1305, 1308], "purpos": [682, 1308, 1310, 1316], "give": [682, 1305, 1318], "when": [682, 1305, 1308, 1309, 1310, 1314, 1318], "base_fram": [682, 683, 707, 708], "rotorwd1": [682, 683], "rotorwd": [682, 683, 689, 690, 691, 692, 693, 708, 1294, 1311], "align": [689, 1294], "axi": [689, 825, 854, 855, 856, 857, 858, 859, 870, 873, 875, 880, 913, 923, 931, 938, 945, 953, 991, 1002, 1012, 1137, 1175, 1176, 1180, 1186, 1190, 1196, 1200, 1206, 1210, 1282, 1283, 1284, 1285, 1294, 1298, 1299, 1316, 1320], "var_wd": [689, 690], "streamlin": [694, 695, 696, 697, 698, 699, 700, 787, 1294, 1302, 1305, 1309, 1311, 1313], "n_delstor": [694, 695], "increas": [694, 695, 1302], "max_length": [694, 695], "cl_ipar": [694, 695, 701, 702], "line": [694, 695, 701, 702, 728, 730, 733, 736, 739, 742, 750, 753, 913, 923, 931, 938, 945, 953, 1305, 1307, 1316], "100000": [694, 695, 1314], "timelin": [701, 702, 703, 704, 705, 706, 1294, 1305, 1311, 1317], "dynam": [701, 1294, 1304, 1306], "spatial": [701, 982, 1137, 1175, 1294, 1295, 1305, 1308, 1317], "max_wake_length": [701, 702], "dt_min": [701, 702, 1317], "minut": [701, 702, 1308, 1312, 1317], "20000": [701, 702], "yawedwak": [707, 708, 709, 710, 711, 712, 713, 1294, 1305, 1311], "bend": [707, 1294, 1305, 1320], "bastankhah": [707, 745, 756, 777, 1302, 1305, 1320], "port": [707, 756, 777, 1320], "agel": [707, 756, 777, 1320], "2016": [707, 756, 777, 1305], "http": [707, 733, 739, 745, 756, 777, 782, 787, 804, 910, 1277, 1280, 1303, 1305, 1306, 1307, 1318], "doi": [707, 733, 745, 756, 777, 1303], "org": [707, 733, 745, 756, 777, 782, 787, 804, 1303], "1017": [707, 756, 777], "jfm": [707, 756, 777], "595": [707, 756, 777], "porteagelmodel": [707, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 1302], "here": [707, 708, 733, 734, 745, 746, 750, 751, 777, 778, 1292, 1293, 1295, 1305, 1306, 1308, 1310, 1312, 1314, 1315, 1316, 1318, 1319, 1320], "misalign": [707, 777, 1320], "ct_max": [707, 708, 728, 729, 734, 739, 740, 745, 746, 750, 751, 756, 771, 777, 778, 782, 783, 787, 788], "9999": [707, 708, 728, 729, 734, 739, 740, 746, 750, 751, 756, 771, 777, 778, 783, 788], "58": [707, 708, 756, 771, 777, 778, 1308, 1310, 1317], "07": [707, 708, 756, 771, 778, 1308, 1309, 1311, 1317], "beyond": [708, 729, 734, 740, 745, 746, 751, 756, 771, 778, 782, 783, 787, 788], "determin": [708, 756, 771, 778, 846, 1305, 1313], "onset": [708, 756, 771, 778], "far": [708, 756, 771, 778, 1305], "region": [708, 756, 771, 778], "axisymmetricwakemodel": [714, 715, 716, 725, 728, 1302], "distslicedwakemodel": [714, 717, 718, 719, 720, 721, 722, 723, 724, 777, 1302], "r": [714, 715, 725, 726, 727, 728, 731, 732, 733, 737, 739, 743, 745, 748, 750, 754, 782, 785, 787, 790, 1302], "separ": [714, 717, 1302, 1305, 1313], "abil": [714, 717], "calc_wakes_spsel_x_r": [714, 715, 725, 727, 728, 732, 733, 739, 745, 750, 782, 787], "calc_wakes_spsel_x_yz": [714, 716, 717, 719, 725, 728, 733, 739, 745, 750, 777, 780, 782, 787], "n_r_per_x": [715, 727, 731, 732, 737, 743, 754], "n_sp_sel": [715, 716, 719, 726, 727, 730, 732, 736, 742, 748, 753, 780, 785, 790], "sp_sel": [715, 716, 719, 726, 727, 730, 732, 736, 742, 748, 753, 756, 769, 780, 785, 790], "non": [715, 716, 719, 726, 727, 730, 732, 736, 742, 748, 753, 780, 785, 790, 1052, 1092, 1125, 1137, 1175, 1227, 1240, 1258, 1306, 1307], "yz": [716, 717, 719, 780, 852, 859, 1302, 1305], "n_yz_per_x": [716, 719, 780], "denpend": [717, 1302], "superp": 717, "gaussianwakemodel": [725, 726, 727, 745, 782, 787, 1302], "gaussian": [725, 1302], "calc_amplitude_sigma_spsel": [725, 726, 745, 748, 782, 785, 787, 790], "amplitud": [725, 726, 745, 748, 782, 785, 787, 790], "sigma": [725, 726, 745, 748, 782, 785, 787, 790, 1305], "amsi": [726, 748, 785, 790], "tophatwakemodel": [728, 729, 730, 731, 732, 733, 739, 750, 1302], "calc_wake_radiu": [728, 731, 733, 737, 739, 743, 750, 754], "calc_centreline_wake_delta": [728, 730, 733, 736, 739, 742, 750, 753], "wake_r": [730, 731, 736, 737, 742, 743, 753, 754], "cl_del": [730, 736, 742, 753], "varlu": [730, 736, 742, 753], "crespohernandeztiwak": [733, 734, 735, 736, 737, 738, 1302, 1305, 1311], "crespo": [733, 1302], "hernandez": [733, 1302], "empir": [733, 1302], "correl": [733, 1137, 1175, 1302], "1016": [733, 745], "0167": 733, "6105": 733, "95": [733, 1308, 1310, 1317, 1319], "00033": 733, "we": [733, 1137, 1175, 1305, 1306, 1307, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "eqn": 733, "17": [733, 1308, 1310, 1314, 1319], "15": [733, 1308, 1309, 1310, 1312, 1314, 1315, 1318, 1319], "1088": [733, 782, 787], "1742": [733, 782, 787], "6596": [733, 782, 787], "625": 733, "012039": 733, "a_near": [733, 734], "a_far": [733, 734], "e1": [733, 734], "e2": [733, 734], "e3": [733, 734], "use_ambti": [733, 734], "sbeta_factor": [733, 734, 745, 746, 782, 783, 787, 788], "sbeta": [733, 734, 745, 746, 782, 783, 787, 788], "near_wake_d": [733, 734], "362": 734, "73": [734, 1310], "83": [734, 1137, 1175, 1310], "0325": 734, "32": [734, 1310], "iectiwak": [739, 740, 741, 742, 743, 744, 1302, 1311], "iec": [739, 1302], "64100": [739, 1302], "2005": [739, 1302], "8": [739, 783, 804, 823, 825, 830, 1302, 1303, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "orbit": 739, "dtu": 739, "dk": 739, "3750291": 739, "2009_31": 739, "pdf": [739, 782, 787, 804], "v2": 739, "volluk": 739, "implement": [739, 1310, 1313], "document": [739, 1137, 1175, 1295, 1305], "frandsen": [739, 782, 783, 1305], "2019": [739, 740], "opening_angl": [739, 740], "open": [739, 740, 1303, 1305], "21": [739, 740, 1308, 1310, 1314, 1317], "6": [739, 740, 1137, 1175, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "iec_typ": 740, "bastankhahwak": [745, 746, 747, 748, 749, 1302, 1311], "j": [745, 1137, 1175], "renen": 745, "2014": 745, "01": [745, 1308, 1310, 1311, 1312, 1317, 1318], "002": 745, "modif": 745, "fit": 745, "better": 745, "jensenwak": [750, 751, 752, 753, 754, 755, 1302, 1311], "jensen": [750, 1137, 1175, 1302, 1311], "repetit": [756, 1302], "avoid": [756, 1137, 1175, 1302, 1320], "mdata_kei": [756, 762], "x0": [756, 770], "NEAR": [756, 763], "r_pc": [756, 765], "r_pc_": [756, 766], "ampl_near": [756, 758], "delta_near": [756, 761], "ampl_far": [756, 757], "sigma_y_far": [756, 767], "sigma_z_far": [756, 768], "delta_far": [756, 760], "calc_data": [756, 772], "has_data": [756, 775], "clean": [756, 773], "gamma": [772, 1320], "radiant": [772, 1320], "porteagelwak": [777, 778, 779, 780, 781, 1302, 1311], "turboparkwak": [782, 783, 784, 785, 786, 1302, 1305, 1311], "turbopark": [782, 787, 1302, 1305], "iopscienc": [782, 787], "iop": [782, 787], "articl": [782, 787, 1303], "2265": [782, 787], "022063": [782, 787], "c1": [782, 783, 1151, 1152], "c2": [782, 783, 1151, 1152], "turboparkwakeix": [787, 788, 789, 790, 791, 792, 1302, 1311], "linearsuperposit": [793, 794, 795, 796, 797, 1294, 1305, 1311], "supersposit": [793, 798, 808, 1294], "rescal": [793, 798, 804, 808, 1294], "scale": [793, 794, 798, 799, 808, 809, 1062, 1063, 1072, 1080, 1151, 1152, 1309, 1317], "rule": [793, 794, 798, 799, 808, 809, 1062, 1063, 1072, 1080, 1305, 1315, 1320], "lim_low": [793, 794, 804, 805], "lower": [793, 794, 804, 805, 847, 1125, 1305, 1317], "lim_high": [793, 794, 804, 805], "svar": [793, 794, 798, 799, 808, 809], "vafriabl": [793, 794], "input_farm_var": [793, 797, 798, 803, 808, 813], "source_turbin": [794, 799, 809], "source_turbine_amb": [794, 799, 809], "source_turbine_": [794, 799, 809], "maxsuperposit": [798, 799, 800, 801, 802, 803, 1294, 1311], "maximum": [798, 854, 855, 856, 857, 858, 859, 1137, 1175, 1294, 1305, 1319], "productsuperposit": [804, 805, 806, 807, 1294, 1305, 1311], "product": [804, 1137, 1175, 1294, 1311], "dimensionless": 804, "deficit": [804, 1302, 1313, 1318, 1319, 1320], "rather": 804, "equival": [804, 1313, 1318, 1320], "arxiv": 804, "2010": 804, "03873": 804, "equat": [804, 1305], "quadraticsuperposit": [808, 809, 810, 811, 812, 813, 1294, 1311], "quadrat": [808, 814, 815, 1294, 1311], "tisuperposit": [814, 815, 816, 817, 1294, 1311], "ti_superp": [814, 815], "superp_to_amb": [814, 815], "anim": [818, 819, 820, 821, 822, 832, 847, 854, 855, 856, 857, 858, 859, 1298, 1305, 1317], "artist": [818, 820, 822, 847, 1298, 1305], "fig": [818, 819, 820, 822, 825, 832, 847, 854, 855, 856, 857, 858, 859, 1277, 1299, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "pyplot": [818, 819, 821, 825, 875, 880, 913, 923, 931, 938, 945, 953, 991, 1002, 1012, 1180, 1190, 1200, 1210, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "figur": [818, 819, 823, 825, 847, 852, 854, 855, 856, 857, 858, 859, 867, 871, 872, 876, 912, 913, 919, 921, 923, 929, 931, 936, 938, 943, 945, 951, 953, 959, 980, 982, 989, 991, 1000, 1002, 1007, 1012, 1049, 1062, 1071, 1073, 1079, 1081, 1176, 1180, 1186, 1190, 1196, 1200, 1206, 1210, 1220, 1229, 1245, 1277, 1299, 1305, 1310, 1312, 1316, 1318], "add_gener": [818, 820, 1317], "gen": [818, 820, 822], "verbostii": 821, "artistanim": 821, "farmlayoutoutput": [823, 824, 825, 826, 827, 828, 829, 830, 831, 1298, 1305, 1308, 1310, 1312, 1315, 1318, 1319], "plot": [823, 825, 828, 829, 830, 831, 852, 854, 855, 856, 857, 858, 859, 867, 871, 872, 873, 875, 876, 878, 880, 913, 923, 931, 938, 945, 953, 1180, 1190, 1200, 1210, 1277, 1298, 1305, 1309, 1310, 1314, 1315, 1316, 1318, 1319, 1320], "layout": [823, 825, 826, 827, 828, 829, 830, 831, 871, 872, 959, 980, 982, 989, 991, 1000, 1002, 1007, 1012, 1049, 1062, 1071, 1073, 1079, 1081, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1295, 1298, 1304, 1305, 1306, 1317, 1318], "fre": 823, "from_r": [823, 824], "results_st": [823, 824], "from_result": [823, 824], "get_layout_data": [823, 826], "get_layout_dict": [823, 827], "get_figur": [823, 825, 830, 867, 871, 876, 1308, 1310, 1312, 1315, 1318, 1319], "color_bi": [823, 825, 1312, 1318, 1319], "fontsiz": [823, 825, 830], "figsiz": [823, 825, 832, 847, 854, 855, 856, 857, 858, 859, 873, 875, 880, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319], "annot": [823, 825, 1312, 1318, 1319], "write_plot": [823, 830], "write": [823, 828, 829, 830, 831, 832, 852, 860, 863, 864, 866, 867, 872, 873, 876, 878, 889, 895, 1278, 1298, 1299, 1305], "write_xyh": [823, 831], "write_csv": [823, 828, 864, 866], "write_json": [823, 829], "format_col2var": [823, 832, 852, 860, 863, 864, 867, 873, 876, 878], "print_model": [823, 832, 852, 860, 862, 864, 867, 873, 876, 878, 959, 980, 982, 989, 997, 1000, 1005, 1062, 1071, 1073, 1079], "model_typ": [823, 832, 852, 860, 861, 864, 867, 873, 876, 878], "titl": [825, 854, 855, 856, 857, 858, 859, 870, 871, 872, 873, 875, 878, 880, 1176, 1180, 1186, 1190, 1196, 1200, 1206, 1210, 1303, 1308, 1312, 1314, 1315, 1317, 1318, 1319], "ax": [825, 832, 847, 854, 855, 856, 857, 858, 859, 873, 875, 880, 912, 913, 919, 921, 923, 929, 931, 936, 938, 943, 945, 951, 953, 959, 980, 982, 989, 991, 1000, 1002, 1007, 1012, 1049, 1062, 1071, 1073, 1079, 1081, 1176, 1180, 1186, 1190, 1196, 1200, 1206, 1210, 1220, 1229, 1245, 1308, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319], "normalize_d": 825, "ret_im": [825, 847, 854, 855, 856, 857, 858, 859, 1317], "barg": [825, 1180, 1190, 1200, 1210], "anno_delx": 825, "anno_d": 825, "scatter": [825, 847, 1305], "color": [825, 854, 855, 856, 857, 858, 859, 913, 923, 931, 938, 945, 953, 1305, 1318], "mean_rew": [825, 1312, 1318, 1319], "etc": [825, 1310, 1312], "wrt": [825, 832, 841, 842, 843, 844, 845, 912, 917, 919, 921, 927, 929, 934, 936, 941, 943, 949, 951, 957, 1016, 1026], "plt": [825, 847, 854, 855, 856, 857, 858, 859, 875, 880, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "No": 825, "matplotlib": [825, 847, 854, 855, 856, 857, 858, 859, 913, 923, 931, 936, 938, 945, 953, 991, 1002, 1012, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "im": [825, 847, 854, 855, 856, 857, 858, 859], "pathcollect": [825, 847], "farmresultsev": [832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 1298, 1305, 1312, 1314, 1317, 1318, 1319], "farm_calc": 832, "weinsum": [832, 851], "rh": [832, 851], "einstein": [832, 851, 1305], "last": [832, 851, 910, 1307], "vars_op": [832, 849, 850], "some": [832, 848, 849, 850, 909, 1137, 1175, 1299, 1310, 1313, 1314, 1320], "reduce_turbin": [832, 850], "reduce_al": [832, 848], "states_op": [832, 848], "turbines_op": [832, 848], "calc_states_mean": [832, 841], "calc_states_sum": [832, 843], "calc_states_std": [832, 842], "deviat": [832, 842], "calc_turbine_mean": [832, 844], "calc_turbine_sum": [832, 845], "calc_farm_mean": [832, 837], "calc_farm_sum": [832, 838], "calc_mean_farm_pow": [832, 840, 1312, 1314, 1318, 1319], "calc_turbine_yield": [832, 839, 846, 1318], "annual": [832, 846, 1312, 1318, 1319], "add_capac": [832, 834, 1318], "p_nom": [832, 834], "calc_farm_yield": [832, 839, 1312, 1319], "turbine_yield": [832, 839], "power_uncert": [832, 839], "p75": [832, 839, 1305], "p90": [832, 839, 1305], "add_effici": [832, 835, 1318, 1319], "calc_farm_effici": [832, 836, 1312, 1318, 1319], "gen_stdata": [832, 847, 1317], "fulli": [837, 838, 848, 1176, 1177, 1186, 1187, 1196, 1197, 1206, 1207, 1306], "contract": [837, 838, 848, 1062, 1063, 1072, 1080], "uncertainti": 839, "trigger": 839, "farm_yield": 839, "_type_": 842, "_description_": 842, "hour": 846, "delta_t": 846, "p_unit_w": 846, "retur": 846, "durat": 846, "datetime64": 846, "seri": [846, 1305, 1313, 1318], "legloc": [847, 1317], "right": [847, 851, 856], "legend": [847, 869, 870, 871, 872], "It": [851, 1306, 1309, 1312, 1314, 1315], "about": [851, 1029, 1310, 1314], "hand": 851, "einsum": 851, "express": [851, 1125], "convent": [851, 910, 1137, 1175], "mention": [851, 1308, 1312], "obligatori": 851, "flowplots2d": [852, 853, 854, 855, 856, 857, 858, 859, 1298, 1305, 1309, 1310, 1312, 1316, 1317, 1319, 1320], "2d": [852, 854, 855, 856, 857, 858, 859, 912, 936, 943, 1298, 1299, 1319], "flow": [852, 854, 855, 856, 857, 858, 859, 1298, 1304, 1305, 1306, 1312, 1313, 1316, 1317], "runner": [852, 853, 1007, 1009, 1049, 1220, 1230, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1305, 1310, 1317, 1318, 1319], "get_mean_fig_xi": [852, 857, 1310, 1319], "resolut": [852, 854, 855, 856, 857, 858, 859, 1309, 1310, 1312, 1316, 1317, 1319, 1320], "xmin": [852, 854, 855, 857, 858, 1310, 1312, 1320], "ymin": [852, 854, 856, 857, 859, 1310, 1320], "get_mean_fig_xz": [852, 858], "x_direct": [852, 855, 856, 858, 859, 1312], "270": [852, 855, 856, 858, 859, 1308, 1312, 1314, 1316, 1320], "xz": [852, 855, 858, 1305], "get_mean_fig_yz": [852, 859], "gen_states_fig_xi": [852, 854, 1309, 1316, 1317, 1320], "gen_states_fig_xz": [852, 855, 1312], "gen_states_fig_yz": [852, 856, 1320], "xmax": [854, 855, 857, 858, 1310, 1312, 1317, 1320], "ymax": [854, 856, 857, 859, 1310, 1317, 1320], "xlabel": [854, 855, 857, 858], "ylabel": [854, 856, 857, 859], "xspace": [854, 855, 857, 858, 1309], "500": [854, 855, 856, 857, 858, 859, 1151, 1152, 1308, 1309, 1310, 1311, 1312, 1315, 1317, 1319], "yspace": [854, 856, 857, 859, 1309], "var_min": [854, 855, 856, 857, 858, 859], "var_max": [854, 855, 856, 857, 858, 859], "normalize_xi": [854, 857], "normalize_var": [854, 855, 856, 857, 858, 859], "vlabel": [854, 855, 856, 857, 858, 859], "add_bar": [854, 855, 856, 857, 858, 859], "cmap": [854, 855, 856, 857, 858, 859, 871, 872, 1314], "quiver_n": [854, 855, 856, 1309, 1317], "quiver_par": [854, 855, 856, 1309, 1317], "ret_stat": [854, 855, 856, 857, 858, 859], "space": [854, 855, 856, 857, 858, 859, 1111, 1137, 1139, 1145, 1175, 1186, 1187, 1229, 1245, 1251, 1297, 1305], "contourf": [854, 855, 856, 857, 858, 859], "pure": [854, 855, 856, 857, 858, 859, 1095, 1100, 1105, 1110, 1116, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1176, 1186, 1296, 1297, 1305], "minimum": [854, 855, 856, 857, 858, 859], "bar": [854, 855, 856, 857, 858, 859, 1137, 1175, 1180, 1190, 1200, 1210, 1262, 1263, 1319], "colormap": [854, 855, 856, 857, 858, 859], "th": [854, 855, 856, 1137, 1175], "quiver": [854, 855, 856], "usag": [854, 855, 856, 857, 858, 859, 1305], "si": [854, 855, 856, 857, 858, 859], "quadmesh": [854, 855, 856, 857, 858, 859], "quadcontourset": [854, 855, 856, 857, 858, 859], "zmin": [855, 856, 858, 859, 1312, 1320], "zmax": [855, 856, 858, 859, 1312, 1320], "zlabel": [855, 856, 858, 859], "zspace": [855, 856, 858, 859], "normalize_x": [855, 858], "normalize_z": [855, 856, 858, 859], "north": [855, 856, 858, 859, 1315], "ech": [855, 856], "normalize_i": [856, 859], "left": [856, 1317], "weight_turbin": [857, 858, 859], "job": 860, "handi": 860, "format_dict": [863, 889, 895], "underli": [863, 959, 960, 963, 980, 981, 982, 983, 984, 989, 990, 992, 1000, 1001, 1062, 1063, 1064, 1071, 1072, 1073, 1074, 1075, 1079, 1080, 1095, 1096, 1097, 1100, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1112, 1116, 1118, 1121, 1126, 1127, 1128, 1132, 1133, 1134, 1138, 1139, 1140, 1145, 1146, 1147, 1151, 1152, 1153, 1157, 1158, 1159, 1163, 1164, 1165, 1169, 1170, 1172], "flappi": [863, 889, 893, 1305, 1306], "fv": [863, 880, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "4f": [863, 889, 891, 895], "resultswrit": [864, 865, 866, 1298, 1305], "roseplotoutput": [867, 868, 869, 870, 871, 872, 876, 1298, 1315], "rose": [867, 869, 871, 872, 876, 1298, 1304, 1305, 1306, 1308, 1310, 1315, 1318], "get_data_info": [867, 870, 876], "dname": [867, 870, 876], "descript": [867, 870, 876, 1286, 1287, 1293, 1294, 1295, 1302], "sector": [867, 869, 871, 872, 876, 1304, 1305, 1306, 1313, 1318], "var_bin": [867, 869, 871, 872, 876], "px": [867, 871, 872, 876], "write_figur": [867, 872, 876], "bin": [869, 871, 872, 1307, 1308, 1318, 1319], "seper": [869, 871, 872], "relev": [869, 871, 872, 1294, 1302], "pd": [869, 1314, 1315, 1320], "long": [870, 1305], "text": 870, "turbo": [871, 872], "layout_dict": [871, 872], "title_dict": [871, 872], "stateturbinemap": [873, 874, 875, 1298, 1305, 1314], "heat": [873, 875, 1298, 1305], "plot_map": [873, 875, 1314], "subplot": [875, 880, 1308, 1310, 1314, 1316, 1317, 1318, 1319], "pcolormesh": 875, "statesroseplotoutput": [876, 877, 1298, 1305, 1308, 1310, 1312, 1315, 1318, 1319], "ws_var": [876, 877], "turbinetypecurv": [878, 879, 880, 1298, 1305, 1308, 1314], "plot_curv": [878, 880, 1308, 1314], "p_max": [878, 880, 912, 915, 919, 921, 925, 929, 932, 936, 939, 943, 947, 951, 955, 1310, 1314], "x_label": 880, "y_label": 880, "ws_min": [880, 1315], "ws_max": [880, 1315], "30": [880, 1308, 1310, 1317, 1318, 1319, 1320], "ws_step": 880, "05": [880, 1121, 1122, 1308, 1310, 1312, 1314, 1315, 1317, 1319, 1320], "pmax_arg": 880, "mask": [880, 1304, 1305, 1306, 1315], "labl": 880, "minim": [880, 912, 916, 919, 921, 926, 929, 933, 936, 940, 943, 948, 951, 956, 982, 983, 1007, 1034, 1035, 1036, 1049, 1062, 1063, 1072, 1079, 1080, 1081, 1089, 1090, 1110, 1111, 1116, 1126, 1127, 1139, 1169, 1176, 1177, 1184, 1186, 1187, 1194, 1196, 1197, 1204, 1206, 1207, 1216, 1217, 1220, 1225, 1229, 1230, 1237, 1238, 1245, 1251, 1256, 1295, 1297, 1310], "dbase": 881, "must": [883, 884, 982, 1295, 1309], "py": 884, "file_man": 884, "keyerror": 887, "pandasfilehelp": [889, 890, 891, 892, 893, 894, 895, 1299], "default_reading_paramet": [889, 892], "support": [889, 1137, 1175, 1305, 1306, 1307, 1313], "default_writing_paramet": [889, 893], "data_file_format": [889, 890], "export": 889, "default_format_dict": [889, 891], "bz2": [889, 890, 892, 893], "gz": [889, 890, 892, 893, 1305, 1312, 1317, 1318, 1319], "zip": [889, 890, 892, 893], "h5": [889, 890, 892, 893], "mode": [889, 893], "5f": [889, 891], "6f": [889, 891], "3f": [889, 891], "read_fil": [889, 894, 1260, 1278], "write_fil": [889, 895], "calc_w": [896, 899, 900, 905, 1300], "ustar": [896, 898, 900, 904, 905, 908, 1300], "friction": [896, 898, 900, 904, 905, 908, 1300], "veloc": [896, 898, 900, 904, 905, 908, 1300], "logz": [897, 902, 906, 1300], "lz": [897, 901, 902, 906], "ws_ref": [898, 904, 908, 1300], "h_ref": [898, 904, 908, 1300], "refer": [898, 899, 904, 908, 1137, 1175, 1277, 1300, 1308, 1320], "height0": [899, 1300], "ws0": [899, 1300], "psi": [900, 903, 905, 907, 1300], "lgz": [901, 1300], "obukhov": [903, 904, 907, 908, 1308], "all_subclass": [909, 1299], "cl": [909, 919, 920, 1299], "cubic_root": [910, 1299, 1305], "a0": [910, 1299], "a1": [910, 1299], "a2": [910, 1299], "a3": [910, 1299], "root": [910, 1299], "polynomi": [910, 1299], "work": [910, 1305, 1307, 1309, 1317, 1319], "fast": [910, 1306], "you": [910, 1137, 1175, 1307, 1311, 1312, 1313, 1316, 1318, 1320], "spare": 910, "yourself": [910, 1308], "github": [910, 1304, 1305, 1306, 1307], "com": [910, 1277, 1280, 1305, 1306, 1307], "opencv": 910, "blob": 910, "master": 910, "modul": 910, "calib3d": 910, "src": 910, "polynom_solv": 910, "cpp": 910, "n_a0": 910, "delta_wd": [911, 1299], "wd_a": [911, 1299], "wd_b": [911, 1299], "close": [912, 936, 1299, 1309, 1317], "geometri": [912, 914, 918, 919, 920, 921, 922, 924, 928, 929, 935, 936, 942, 943, 946, 950, 951, 952, 954, 958, 959, 960, 1176, 1177, 1186, 1187, 1196, 1197, 1206, 1207, 1261, 1279, 1295, 1297, 1299, 1310], "p_min": [912, 915, 916, 919, 921, 925, 926, 929, 932, 933, 936, 939, 940, 943, 947, 948, 951, 955, 956, 1310], "points_dist": [912, 917, 919, 921, 927, 929, 934, 936, 941, 943, 949, 951, 957], "return_nearest": [912, 917, 919, 921, 927, 929, 934, 936, 941, 943, 949, 951, 957], "points_insid": [912, 918, 919, 921, 928, 929, 935, 936, 942, 943, 950, 951, 958], "insid": [912, 918, 919, 921, 928, 929, 935, 936, 942, 943, 944, 950, 951, 958, 959, 960, 980, 1295, 1309], "add_to_figur": [912, 913, 919, 921, 923, 929, 931, 936, 938, 943, 945, 951, 953, 1310], "show_boundari": [912, 913, 919, 921, 923, 929, 931, 936, 938, 943, 945, 951, 953], "invers": [912, 914, 919, 921, 924, 929, 936, 943, 946, 951, 954, 1137, 1175, 1320], "invert": [912, 914, 919, 921, 924, 929, 936, 943, 946, 951, 954, 1299], "fill_mod": [913, 923, 929, 931, 936, 938, 943, 945, 953, 1310], "inside_slategrai": [913, 923, 953], "pars_boundari": [913, 923, 931, 938, 945, 953], "pars_dist": [913, 923, 931, 938, 945, 953, 1310], "dist": [913, 917, 923, 927, 931, 934, 938, 941, 945, 949, 953, 957, 983, 1137, 1175], "dist_insid": [913, 923, 931, 938, 945, 953, 1310], "dist_outsid": [913, 923, 931, 938, 945, 953, 1310], "inside_": [913, 923, 931, 938, 945, 953], "outside_": [913, 923, 931, 938, 945, 953], "command": [913, 923, 931, 938, 945, 953, 1307], "invertedareageometri": [914, 924, 946, 951, 952, 953, 954, 955, 956, 957, 958, 1299], "probe": [917, 918, 927, 928, 934, 935, 941, 942, 949, 950, 957, 958, 1007, 1009], "nearest": [917, 927, 934, 941, 949, 957], "bundari": [917, 927, 934, 941, 949, 957], "smallest": [917, 927, 934, 941, 949, 957], "p_nearest": [917, 927, 934, 941, 949, 957], "areaintersect": [919, 920, 1299], "intersect": [919, 1280, 1281, 1299], "areaunion": [921, 922, 923, 924, 925, 926, 927, 928, 1299], "union": [921, 1299], "cobnstructor": [929, 930], "closedpolygon": [936, 937, 938, 939, 940, 941, 942, 1299, 1310], "polygon": [936, 937, 1261, 1299, 1310], "poli": 936, "halfplan": [943, 944, 945, 946, 947, 948, 949, 950, 1299], "half": [943, 1299], "orthogon": 943, "opt": [959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1286, 1305, 1310], "constraint": [959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 1000, 1001, 1007, 1010, 1016, 1017, 1018, 1019, 1021, 1022, 1024, 1025, 1026, 1030, 1034, 1037, 1049, 1081, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1146, 1152, 1158, 1164, 1170, 1176, 1186, 1196, 1206, 1220, 1221, 1229, 1230, 1231, 1245, 1252, 1296, 1310], "areageometryconstraint": [959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 1295], "farmconstraint": [959, 982, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1295], "constrain": [959, 980, 1295], "sel_turbin": [959, 960, 980, 982, 983, 989, 990, 998, 1000, 1001, 1006, 1007, 1009, 1043, 1049, 1062, 1071, 1073, 1079, 1081, 1220, 1229, 1245], "disc_insid": [959, 960], "ensur": [959, 960], "full": [959, 960, 1305, 1308, 1312], "problem": [959, 960, 963, 964, 967, 968, 980, 981, 982, 983, 984, 985, 989, 990, 992, 993, 1000, 1001, 1007, 1009, 1010, 1011, 1014, 1015, 1016, 1021, 1024, 1025, 1026, 1029, 1049, 1062, 1063, 1064, 1065, 1066, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1305, 1310, 1318], "n_compon": [959, 967, 968, 971, 978, 979, 980, 982, 987, 988, 989, 995, 999, 1000, 1016, 1017, 1018, 1025, 1026, 1062, 1066, 1068, 1069, 1070, 1071, 1073, 1077, 1078, 1079, 1095, 1099, 1100, 1104, 1105, 1109, 1110, 1115, 1116, 1120, 1121, 1123, 1124, 1125, 1126, 1131, 1132, 1136, 1138, 1143, 1144, 1145, 1149, 1150, 1151, 1155, 1156, 1157, 1161, 1162, 1163, 1167, 1168, 1169, 1171, 1172, 1174], "compon": [959, 962, 963, 964, 965, 967, 968, 971, 978, 979, 980, 982, 984, 985, 987, 988, 989, 992, 993, 995, 999, 1000, 1007, 1016, 1026, 1037, 1038, 1049, 1062, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1073, 1075, 1076, 1077, 1078, 1079, 1081, 1095, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1112, 1113, 1115, 1116, 1118, 1119, 1120, 1121, 1125, 1126, 1128, 1129, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1174, 1175, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1282, 1283, 1285, 1310], "vardeps_float": [959, 978, 980, 982, 988, 989, 999, 1000, 1062, 1070, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172], "calc_individu": [959, 963, 980, 982, 984, 989, 992, 1000, 1062, 1064, 1071, 1073, 1075, 1079, 1095, 1097, 1100, 1102, 1105, 1107, 1110, 1112, 1116, 1118, 1121, 1126, 1128, 1132, 1134, 1138, 1140, 1145, 1147, 1151, 1153, 1157, 1159, 1163, 1165, 1169, 1172], "vars_int": [959, 962, 963, 964, 967, 968, 980, 982, 984, 985, 989, 992, 993, 1000, 1007, 1014, 1015, 1016, 1021, 1022, 1024, 1025, 1026, 1045, 1046, 1049, 1051, 1052, 1053, 1054, 1062, 1064, 1065, 1066, 1071, 1073, 1075, 1076, 1079, 1081, 1091, 1092, 1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1126, 1128, 1129, 1132, 1134, 1135, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1176, 1178, 1179, 1186, 1188, 1189, 1196, 1198, 1199, 1206, 1208, 1209, 1220, 1221, 1226, 1227, 1229, 1231, 1239, 1240, 1241, 1242, 1245, 1252, 1257, 1258], "vars_float": [959, 962, 963, 964, 967, 968, 980, 982, 984, 985, 989, 992, 993, 1000, 1007, 1014, 1015, 1016, 1021, 1022, 1024, 1025, 1026, 1045, 1046, 1049, 1051, 1052, 1053, 1054, 1062, 1064, 1065, 1066, 1071, 1073, 1075, 1076, 1079, 1081, 1091, 1092, 1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1126, 1128, 1129, 1132, 1134, 1135, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1176, 1178, 1179, 1186, 1188, 1189, 1196, 1198, 1199, 1206, 1208, 1209, 1220, 1221, 1226, 1227, 1229, 1231, 1239, 1240, 1241, 1242, 1245, 1252, 1257, 1258], "problem_result": [959, 963, 964, 967, 968, 980, 982, 984, 985, 989, 992, 993, 1000, 1014, 1015, 1024, 1025, 1062, 1064, 1065, 1066, 1071, 1073, 1075, 1076, 1079, 1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1126, 1128, 1129, 1132, 1134, 1135, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1178, 1179, 1188, 1189, 1198, 1199, 1208, 1209, 1221, 1231, 1252, 1310], "calc_popul": [959, 964, 980, 982, 985, 989, 993, 1000, 1062, 1065, 1071, 1073, 1076, 1079, 1095, 1098, 1100, 1103, 1105, 1108, 1110, 1113, 1116, 1119, 1121, 1126, 1129, 1132, 1135, 1138, 1141, 1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166, 1169, 1172], "n_sel_turbin": [959, 980, 982, 989, 996, 1000, 1004, 1007, 1039, 1049, 1051, 1052, 1062, 1071, 1073, 1079, 1081, 1091, 1092, 1220, 1226, 1227, 1229, 1239, 1240, 1245, 1257, 1258], "add_to_layout_figur": [959, 980, 982, 989, 991, 1000, 1002, 1007, 1012, 1049, 1062, 1071, 1073, 1079, 1081, 1220, 1229, 1245], "get_bound": [959, 980, 982, 989, 1095, 1100, 1105, 1110, 1116, 1121, 1125, 1126, 1132], "check_individu": [959, 980, 982, 989, 1095, 1100, 1105, 1110, 1116, 1121, 1123, 1126, 1132], "constraint_valu": [959, 980, 982, 989, 1007, 1017, 1018, 1049, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1123, 1124, 1126, 1132, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "fullfil": [959, 980, 982, 989, 1007, 1017, 1018, 1049, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1123, 1124, 1126, 1132, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "check_popul": [959, 980, 982, 989, 1095, 1100, 1105, 1110, 1116, 1121, 1124, 1126, 1132], "component_nam": [959, 965, 980, 982, 989, 1000, 1062, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172], "var_names_int": [959, 977, 980, 982, 989, 1000, 1007, 1048, 1049, 1062, 1071, 1073, 1079, 1081, 1094, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1195, 1196, 1206, 1219, 1220, 1229, 1244, 1245], "n_vars_int": [959, 962, 963, 964, 967, 968, 973, 979, 980, 982, 984, 985, 989, 992, 993, 1000, 1007, 1014, 1015, 1016, 1021, 1022, 1024, 1025, 1026, 1028, 1032, 1036, 1041, 1045, 1046, 1049, 1051, 1052, 1053, 1054, 1062, 1064, 1065, 1066, 1071, 1073, 1075, 1076, 1079, 1081, 1085, 1088, 1090, 1091, 1092, 1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1126, 1128, 1129, 1132, 1134, 1135, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1173, 1176, 1178, 1179, 1186, 1188, 1189, 1191, 1193, 1194, 1196, 1198, 1199, 1206, 1208, 1209, 1212, 1215, 1217, 1220, 1221, 1226, 1227, 1229, 1231, 1233, 1236, 1238, 1239, 1240, 1241, 1242, 1245, 1252, 1257, 1258, 1310], "var_names_float": [959, 976, 980, 982, 989, 1000, 1007, 1047, 1049, 1062, 1071, 1073, 1079, 1081, 1093, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1185, 1186, 1196, 1205, 1206, 1218, 1220, 1228, 1229, 1243, 1245, 1259], "n_vars_float": [959, 962, 963, 964, 967, 968, 972, 978, 980, 982, 984, 985, 988, 989, 992, 993, 999, 1000, 1007, 1014, 1015, 1016, 1021, 1022, 1024, 1025, 1026, 1027, 1031, 1035, 1040, 1045, 1046, 1049, 1051, 1052, 1053, 1054, 1062, 1064, 1065, 1066, 1070, 1071, 1073, 1075, 1076, 1079, 1081, 1084, 1087, 1089, 1091, 1092, 1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1126, 1128, 1129, 1132, 1134, 1135, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1172, 1173, 1176, 1178, 1179, 1181, 1183, 1184, 1186, 1188, 1189, 1196, 1198, 1199, 1201, 1203, 1204, 1206, 1208, 1209, 1211, 1214, 1216, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1229, 1231, 1232, 1235, 1237, 1239, 1240, 1241, 1242, 1245, 1252, 1253, 1255, 1256, 1257, 1258, 1310], "vardeps_int": [959, 979, 980, 982, 989, 1000, 1062, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172], "rename_vars_int": [959, 975, 980, 982, 989, 1000, 1062, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172], "renam": [959, 974, 975, 980, 982, 989, 1000, 1062, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1305], "rename_vars_float": [959, 974, 980, 982, 989, 1000, 1062, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172], "finalize_individu": [959, 967, 980, 982, 989, 1000, 1007, 1024, 1049, 1062, 1066, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1221, 1229, 1231, 1245, 1252], "champion": [959, 967, 980, 982, 989, 1000, 1007, 1024, 1049, 1062, 1066, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1221, 1229, 1231, 1245, 1252], "finalize_popul": [959, 968, 980, 982, 989, 1000, 1007, 1025, 1049, 1062, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "ana_deriv": [959, 962, 980, 982, 989, 1000, 1062, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172], "analyt": [959, 962, 980, 982, 989, 1000, 1016, 1062, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172], "possibl": [959, 962, 980, 982, 989, 1000, 1062, 1071, 1073, 1079, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1137, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1175, 1315], "info": [959, 961, 980, 982, 989, 1000, 1007, 1049, 1062, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "finish": [959, 970, 980, 982, 989, 1000, 1007, 1049, 1062, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1310], "farmoptproblem": [960, 981, 983, 990, 1001, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1063, 1071, 1072, 1074, 1079, 1080, 1096, 1101, 1106, 1111, 1127, 1133, 1139, 1146, 1152, 1158, 1164, 1170, 1295, 1305], "optim": [960, 967, 981, 983, 989, 990, 1001, 1007, 1009, 1013, 1024, 1045, 1046, 1049, 1051, 1052, 1053, 1054, 1063, 1066, 1071, 1072, 1074, 1079, 1080, 1081, 1091, 1092, 1096, 1101, 1106, 1111, 1121, 1127, 1133, 1137, 1139, 1146, 1152, 1158, 1164, 1170, 1175, 1176, 1186, 1196, 1206, 1220, 1221, 1226, 1227, 1229, 1231, 1239, 1240, 1241, 1242, 1245, 1252, 1257, 1258, 1286, 1295, 1296, 1297, 1303, 1304, 1305, 1306], "iwopi": [960, 983, 990, 1001, 1007, 1009, 1010, 1011, 1016, 1026, 1121, 1172, 1176, 1186, 1196, 1206, 1295, 1297, 1306, 1310], "cannot": 962, "differenti": [962, 1016, 1026], "n_sel_compon": [962, 963, 964, 984, 985, 992, 993, 1064, 1065, 1075, 1076, 1097, 1098, 1102, 1103, 1107, 1108, 1112, 1113, 1118, 1119, 1128, 1129, 1134, 1135, 1140, 1141, 1147, 1148, 1153, 1154, 1159, 1160, 1165, 1166], "n_pop": [964, 968, 985, 993, 1015, 1018, 1022, 1025, 1046, 1052, 1054, 1055, 1056, 1065, 1076, 1092, 1098, 1103, 1108, 1113, 1119, 1124, 1129, 1135, 1141, 1148, 1154, 1160, 1166, 1179, 1189, 1199, 1209, 1227, 1240, 1242, 1258, 1295], "old": [974, 975], "dep": [978, 979, 988, 999, 1062, 1063, 1070, 1072, 1080], "farmboundaryconstraint": [980, 981, 1295, 1310], "mindistconstraint": [982, 983, 984, 985, 986, 987, 988, 1295, 1310], "least": [982, 1137, 1175, 1295], "min_dist": [982, 983, 1126, 1127, 1138, 1139, 1176, 1177, 1186, 1187, 1196, 1197, 1206, 1207, 1229, 1230, 1310], "min_dist_unit": [982, 983, 1310], "constaint": [982, 986, 1126, 1130], "geom_layout": [989, 1000, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1295], "farmobject": [1000, 1001, 1002, 1003, 1004, 1005, 1006, 1062, 1063, 1072, 1073, 1074, 1080, 1295], "calc_farm_arg": [1007, 1009], "all_turbin": [1007, 1013, 1049, 1081, 1220, 1229, 1245], "tvar": [1007, 1044, 1049, 1081, 1220, 1229, 1245], "turbine_i": [1007, 1042, 1044, 1049, 1081, 1220, 1229, 1245], "parse_tvar": [1007, 1042, 1049, 1081, 1220, 1229, 1245], "tvr": [1007, 1042, 1049, 1081, 1220, 1229, 1245], "drop_var": [1007, 1029], "exclud": [1007, 1029, 1305], "update_problem_individu": [1007, 1045, 1049, 1053, 1081, 1220, 1229, 1241, 1245], "latest": [1007, 1045, 1046, 1049, 1053, 1054, 1081, 1220, 1229, 1241, 1242, 1245, 1307], "update_problem_popul": [1007, 1046, 1049, 1054, 1081, 1220, 1229, 1242, 1245], "apply_individu": [1007, 1014, 1049, 1081, 1176, 1178, 1186, 1188, 1196, 1198, 1206, 1208, 1220, 1229, 1245], "apply_popul": [1007, 1015, 1049, 1081, 1176, 1179, 1186, 1189, 1196, 1199, 1206, 1209, 1220, 1229, 1245], "whole": [1007, 1015, 1049, 1081, 1176, 1179, 1186, 1189, 1196, 1199, 1206, 1209, 1220, 1229, 1245, 1305], "int_inf": [1007, 1008, 1032, 1036, 1049, 1081, 1088, 1090, 1176, 1186, 1196, 1206, 1215, 1217, 1220, 1229, 1236, 1238, 1245], "999999": [1007, 1008, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "initial_values_int": [1007, 1028, 1049, 1081, 1085, 1176, 1186, 1191, 1196, 1206, 1212, 1220, 1229, 1233, 1245], "min_values_int": [1007, 1036, 1049, 1081, 1090, 1176, 1186, 1194, 1196, 1206, 1217, 1220, 1229, 1238, 1245], "max_values_int": [1007, 1032, 1049, 1081, 1088, 1176, 1186, 1193, 1196, 1206, 1215, 1220, 1229, 1236, 1245], "initial_values_float": [1007, 1027, 1049, 1081, 1084, 1176, 1181, 1186, 1196, 1201, 1206, 1211, 1220, 1222, 1229, 1232, 1245, 1253], "min_values_float": [1007, 1035, 1049, 1081, 1089, 1176, 1184, 1186, 1196, 1204, 1206, 1216, 1220, 1225, 1229, 1237, 1245, 1256], "max_values_float": [1007, 1031, 1049, 1081, 1087, 1176, 1183, 1186, 1196, 1203, 1206, 1214, 1220, 1224, 1229, 1235, 1245, 1255], "add_object": [1007, 1011, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1310], "varmap_int": [1007, 1010, 1011, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "varmap_float": [1007, 1010, 1011, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "add_constraint": [1007, 1010, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1310], "min_values_constraint": [1007, 1034, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "max_values_constraint": [1007, 1030, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "constraints_tol": [1007, 1019, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "toler": [1007, 1019, 1049, 1081, 1121, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "n_object": [1007, 1021, 1022, 1024, 1033, 1038, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1221, 1229, 1231, 1245, 1252, 1310], "n_constraint": [1007, 1019, 1021, 1022, 1024, 1025, 1030, 1034, 1037, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1221, 1229, 1231, 1245, 1252, 1310], "calc_gradi": [1007, 1016, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "ivar": [1007, 1016, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "gradient": [1007, 1016, 1026, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "get_gradi": [1007, 1016, 1026, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "obtain": [1007, 1026, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1308, 1312, 1319], "link": [1007, 1026, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1306, 1310, 1318], "maximize_obj": [1007, 1033, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "evaluate_individu": [1007, 1021, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "evaluate_popul": [1007, 1022, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "check_constraints_individu": [1007, 1017, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "check_constraints_popul": [1007, 1018, 1049, 1081, 1176, 1186, 1196, 1206, 1220, 1229, 1245], "subject": 1013, "fvar": 1016, "vr": 1016, "overload": [1016, 1289], "optfunctionlist": [1016, 1026], "n_vr": 1016, "ctol": 1019, "ret_prob_r": 1021, "addition": 1021, "con": [1021, 1022, 1024, 1025, 1221, 1231, 1252], "were": [1026, 1305, 1313, 1319, 1320], "previous": 1026, "cf": [1026, 1315], "problemdefaultfunc": 1026, "decid": [1029, 1307], "drop": 1029, "cma": 1030, "inf": [1031, 1035, 1087, 1089, 1125, 1183, 1184, 1203, 1204, 1214, 1216, 1224, 1225, 1235, 1237, 1255, 1256], "unbound": [1031, 1032, 1035, 1036, 1087, 1088, 1089, 1090, 1183, 1184, 1203, 1204, 1214, 1215, 1216, 1217, 1224, 1225, 1235, 1236, 1237, 1238, 1255, 1256], "cmi": 1034, "n_con": 1037, "n_obj": 1038, "farmvarsproblem": [1049, 1050, 1051, 1052, 1053, 1054, 1081, 1082, 1220, 1229, 1230, 1245, 1251, 1295, 1296, 1305], "pre_rotor_var": [1049, 1050], "post_rotor_var": [1049, 1050], "opt2farm_vars_individu": [1049, 1051, 1081, 1091, 1220, 1226, 1229, 1239, 1245, 1257], "opt2farm_vars_popul": [1049, 1052, 1081, 1092, 1220, 1227, 1229, 1240, 1245, 1258], "post_rotor": 1050, "super": [1050, 1086, 1223, 1234, 1254], "farm_var": [1051, 1052, 1091, 1092, 1226, 1227, 1239, 1240, 1257, 1258], "popstat": [1055, 1056, 1057, 1058, 1059, 1060, 1061, 1295], "artifici": [1055, 1295], "farmvarobject": [1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1079, 1295], "contract_st": [1062, 1063, 1072, 1080], "contract_turbin": [1063, 1072, 1080], "maxfarmpow": [1071, 1072, 1295, 1310], "maximize_pow": [1071, 1072, 1310], "maxnturbin": [1073, 1074, 1075, 1076, 1077, 1078, 1295], "turrbin": [1073, 1295], "check_valid": [1073, 1074], "count": [1073, 1074, 1305], "max_n_turbin": [1073, 1074], "minimalmaxti": [1079, 1080, 1295], "minimize_ti": [1079, 1080], "optfarmvar": [1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1296], "typ": [1081, 1083], "model_kei": 1083, "geometr": [1095, 1096, 1100, 1101, 1105, 1106, 1110, 1111, 1116, 1126, 1127, 1132, 1133, 1138, 1139, 1145, 1146, 1151, 1152, 1157, 1158, 1163, 1164, 1169, 1170, 1176, 1186, 1296, 1297, 1305], "cmpnt": [1095, 1097, 1098, 1100, 1102, 1103, 1105, 1107, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1126, 1128, 1129, 1132, 1134, 1135, 1138, 1140, 1141, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169], "additio": [1096, 1101, 1106, 1111, 1127, 1133], "cfixn": [1100, 1101, 1102, 1103, 1104, 1297], "cmaxn": [1105, 1106, 1107, 1108, 1109, 1297], "cmindens": [1110, 1111, 1112, 1113, 1114, 1115, 1297], "min_valu": [1110, 1111], "dfactor": [1110, 1111, 1138, 1139], "min_dens": [1110, 1111], "cminn": [1116, 1117, 1118, 1119, 1120, 1297], "optfunct": [1121, 1172], "tol": [1121, 1122], "violat": 1121, "1e": [1121, 1122, 1310], "mindist": [1126, 1127, 1128, 1129, 1130, 1131, 1297], "cdist": [1137, 1175], "xa": [1137, 1175], "xb": [1137, 1175], "metric": [1137, 1175], "euclidean": [1137, 1175], "m_a": [1137, 1175], "observ": [1137, 1175], "m_b": [1137, 1175], "callabl": [1137, 1175], "braycurti": [1137, 1175], "canberra": [1137, 1175], "chebyshev": [1137, 1175], "cityblock": [1137, 1175], "cosin": [1137, 1175], "dice": [1137, 1175], "ham": [1137, 1175], "jaccard": [1137, 1175], "jensenshannon": [1137, 1175], "kulczynski1": [1137, 1175], "mahalanobi": [1137, 1175], "match": [1137, 1175], "minkowski": [1137, 1175], "rogerstanimoto": [1137, 1175], "russellrao": [1137, 1175], "seuclidean": [1137, 1175], "sokalmichen": [1137, 1175], "sokalsneath": [1137, 1175], "sqeuclidean": [1137, 1175], "yule": [1137, 1175], "norm": [1137, 1175], "unweight": [1137, 1175], "varianc": [1137, 1175], "vstack": [1137, 1175], "ddof": [1137, 1175], "vi": [1137, 1175], "covari": [1137, 1175], "matrix": [1137, 1175], "inv": [1137, 1175], "cov": [1137, 1175], "u": [1137, 1175, 1282, 1283, 1310], "ij": [1137, 1175], "except": [1137, 1175], "thrown": [1137, 1175], "arrang": [1137, 1175], "_p": [1137, 1175], "quasi": [1137, 1175], "citi": [1137, 1175], "block": [1137, 1175, 1310], "manhattan": [1137, 1175], "u_i": [1137, 1175], "v_i": [1137, 1175], "x_i": [1137, 1175], "squar": [1137, 1175], "_2": [1137, 1175], "frac": [1137, 1175], "cdot": [1137, 1175], "its": [1137, 1175, 1245, 1296, 1306, 1313, 1316], "dot": [1137, 1175], "proport": [1137, 1175], "those": [1137, 1175, 1313], "disagre": [1137, 1175], "To": [1137, 1175], "save": [1137, 1175, 1318], "shannon": [1137, 1175], "probabl": [1137, 1175], "q": [1137, 1175], "pointwis": [1137, 1175], "kullback": [1137, 1175], "leibler": [1137, 1175], "diverg": [1137, 1175], "precis": [1137, 1175], "max_i": [1137, 1175], "sum_i": [1137, 1175], "brai": [1137, 1175], "curti": [1137, 1175], "synonym": [1137, 1175], "kulczynski": [1137, 1175], "roger": [1137, 1175], "tanimoto": [1137, 1175], "russel": [1137, 1175], "rao": [1137, 1175], "sokal": [1137, 1175], "michen": [1137, 1175], "sneath": [1137, 1175], "suppli": [1137, 1175], "ariti": [1137, 1175], "could": [1137, 1175, 1305, 1313, 1315, 1316, 1319], "dm": [1137, 1175], "lambda": [1137, 1175], "librari": [1137, 1175, 1310, 1316], "would": [1137, 1175], "ineffici": [1137, 1175], "syntax": [1137, 1175], "find": [1137, 1175, 1305], "four": [1137, 1175, 1309], "35": [1137, 1175, 1308, 1310, 1317], "0456": [1137, 1175], "85": [1137, 1175, 1310], "2672": [1137, 1175], "1174": [1137, 1175], "89": [1137, 1175, 1310, 1314, 1317], "9711": [1137, 1175], "9728": [1137, 1175], "9422": [1137, 1175], "36": [1137, 1175, 1308, 1310], "1667": [1137, 1175], "86": [1137, 1175, 1303, 1310, 1312, 1318], "7833": [1137, 1175], "7044": [1137, 1175], "6172": [1137, 1175], "8856": [1137, 1175], "0893": [1137, 1175], "3561": [1137, 1175], "8477": [1137, 1175], "corner": [1137, 1175, 1309], "cube": [1137, 1175], "b": [1137, 1175, 1306], "9": [1137, 1175, 1305, 1307, 1308, 1310, 1311, 1314, 1315, 1316, 1318, 1320], "maxdens": [1138, 1139, 1140, 1141, 1142, 1143, 1144, 1297], "max_dens": [1138, 1139], "maxgridspac": [1145, 1146, 1147, 1148, 1149, 1150, 1297], "max_dxdi": [1145, 1146], "memimadist": [1151, 1152, 1153, 1154, 1155, 1156, 1297], "c3": [1151, 1152], "mimamean": [1151, 1152], "diff": 1152, "ofixn": [1157, 1158, 1159, 1160, 1161, 1162, 1297], "omaxn": [1163, 1164, 1165, 1166, 1167, 1168, 1169, 1297], "maxn": [1163, 1164], "ominn": [1169, 1170, 1171, 1297], "vnames_int": 1173, "vnames_float": 1173, "cname": 1173, "geomlayout": [1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1297, 1305], "involv": [1176, 1186, 1196, 1206, 1305], "calc_valid": [1176, 1177], "get_fig": [1176, 1180, 1186, 1190, 1196, 1200, 1206, 1210], "plotli": [1176, 1180, 1186, 1190, 1196, 1200, 1206, 1210, 1277, 1299, 1305], "true_circl": [1180, 1190, 1200, 1210], "ndarari": [1180, 1190, 1200, 1210], "draw": [1180, 1190, 1200, 1210], "geomlayoutgrid": [1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1297, 1305], "background": [1186, 1187, 1297, 1305, 1309, 1310, 1313], "grid_spac": [1186, 1187], "geomreggrid": [1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1297, 1305], "max_dist": [1196, 1197, 1206, 1207, 1230], "n_grid": [1206, 1207, 1229, 1230], "n_max": [1206, 1207], "n_row_max": [1206, 1207, 1230], "farmlayoutoptproblem": [1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1296, 1310], "reggridslayoutoptproblem": [1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1296], "sever": [1229, 1296, 1305], "mix": 1229, "min_spac": [1229, 1245, 1251], "max_n_row": 1229, "regularlayoutoptproblem": [1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1296, 1305], "spacing_x": [1245, 1249], "spacing_i": [1245, 1250], "offset_x": [1245, 1247], "offset_i": [1245, 1248], "read_shp": [1260, 1261, 1299, 1305], "fname": [1260, 1261, 1299], "shp": [1260, 1261, 1278, 1299], "geopanda": [1260, 1261, 1278], "geodatafram": 1260, "wsg84": 1260, "read_shp_polygon": [1261, 1279, 1299, 1305], "name_col": 1261, "geom_col": 1261, "to_utm": 1261, "ret_utm_zon": [1261, 1279, 1299], "extract": 1261, "utm": [1261, 1279], "zone": [1261, 1279], "letter": [1261, 1279], "32u": [1261, 1279], "point_dict_exterior": 1261, "point_dict_interior": 1261, "utm_zone_str": [1261, 1279], "utem": [1261, 1279], "daskrunn": [1262, 1263, 1264, 1265, 1266, 1267, 1268, 1299, 1305, 1309, 1310, 1317, 1318, 1319], "schedul": [1262, 1263, 1305, 1310, 1318], "progress_bar": [1262, 1263, 1305], "show": [1262, 1263, 1305, 1308, 1309, 1310, 1312, 1314, 1315, 1316, 1318, 1319, 1320], "progress": [1262, 1263, 1318, 1319], "cluster_arg": [1262, 1263], "explicit": [1262, 1263, 1305, 1309], "cluster": [1262, 1263, 1305, 1306, 1310, 1318, 1319], "setup": [1262, 1263, 1304, 1305, 1306, 1310, 1312, 1314, 1315, 1316, 1319, 1320], "client_arg": [1262, 1263], "client": [1262, 1263], "n_worker": [1262, 1263], "is_distribut": [1262, 1266], "threads_per_work": 1263, "process": [1263, 1313], "worker": [1263, 1318], "thread": [1263, 1318], "defaultrunn": [1269, 1270, 1299, 1305], "show_plotly_fig": [1277, 1299, 1305], "displai": [1277, 1299, 1318, 1319], "window": [1277, 1299, 1305], "stackoverflow": 1277, "question": [1277, 1310], "53570384": 1277, "how": [1277, 1304, 1305, 1306, 1314, 1318, 1319], "standalon": 1277, "shp2csv": [1278, 1299, 1305], "ifil": [1278, 1299], "ofil": [1278, 1299], "in_kwarg": [1278, 1299], "out_kwarg": [1278, 1299], "inam": 1278, "onam": 1278, "to_csv": 1278, "shp2geom2d": [1279, 1299], "shapefil": [1279, 1299], "geom": 1279, "tool": [1279, 1318], "two_circl": [1280, 1281], "r1": [1280, 1281, 1299], "r2": [1280, 1281, 1299], "sure": [1280, 1307, 1310, 1318], "These": [1280, 1294, 1309, 1310, 1312, 1317, 1320], "diego": 1280, "assencio": 1280, "8d6ca3d82151bad815f78addf9b5c1c6": 1280, "calc_area": [1281, 1299], "broadcast": [1281, 1283, 1284], "anoth": [1281, 1319, 1320], "uv2wd": [1282, 1299], "uv": [1282, 1283, 1299], "wd2uv": [1283, 1299], "against": [1283, 1284], "wd2wdvec": [1284, 1299], "wdvec": [1284, 1285, 1299], "wdvec2wd": [1285, 1299], "shortcut": 1286, "concret": [1286, 1294, 1302], "manag": [1287, 1304, 1305, 1306, 1313], "sweep": [1287, 1288], "until": [1287, 1289, 1305], "reach": [1287, 1289, 1292, 1305, 1317], "access": 1292, "atmospher": [1293, 1294, 1308], "interfac": [1293, 1305, 1310], "propag": [1294, 1305, 1313, 1317], "due": [1294, 1315], "ie": 1294, "avail": [1294, 1302, 1304, 1307, 1308, 1318], "machin": 1294, "net": 1294, "intern": [1295, 1306], "extern": 1295, "classif": 1302, "cite": 1303, "joss": 1303, "paper": 1303, "softwar": [1303, 1306, 1308], "bibtex": 1303, "schmidt2023": 1303, "author": [1303, 1308], "jona": [1303, 1309], "schmidt": 1303, "luka": 1303, "vollmer": 1303, "martin": 1303, "d\u00f6renk\u00e4mper": 1303, "bernhard": 1303, "stoevesandt": 1303, "21105": 1303, "05464": 1303, "url": 1303, "year": 1303, "2023": [1303, 1308, 1317], "publish": 1303, "journal": 1303, "volum": 1303, "page": 1303, "5464": 1303, "jupyt": 1304, "notebook": [1304, 1305, 1313], "folder": [1304, 1305], "repositori": [1304, 1306], "overview": [1304, 1305, 1306, 1316], "releas": [1305, 1307], "readi": [1305, 1311, 1316, 1317, 1320], "transfer": [1305, 1320], "fraunhof": [1305, 1306, 1310], "iw": [1305, 1306, 1308, 1310], "hous": 1305, "predecessor": [1305, 1306], "yet": 1305, "just": [1305, 1314], "enjoi": 1305, "await": 1305, "comment": 1305, "issu": [1305, 1306], "thank": 1305, "changelog": 1305, "fraunhoferiw": [1305, 1306, 1307], "commit": [1305, 1306], "style": 1305, "black": 1305, "small": [1305, 1308], "discov": 1305, "flake8": 1305, "now": [1305, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1319, 1320], "pytest": 1305, "unittest": 1305, "workflow": 1305, "docu": 1305, "io": 1305, "doc": [1305, 1318], "html": [1305, 1317], "miss": 1305, "wind_rot": [1305, 1309], "manifest": 1305, "orst": 1305, "pctsinglefil": 1305, "iecti2019": 1305, "iecti2005": 1305, "concept": [1305, 1317], "instal": [1305, 1306], "pip": [1305, 1306], "capabl": [1305, 1306], "As": [1305, 1307, 1320], "pcttwofil": 1305, "windroseoutput": 1305, "histogram": 1305, "ambientwindroseoutput": 1305, "improv": 1305, "browser": 1305, "featur": [1305, 1315], "wind_ros": 1305, "layout_single_st": 1305, "layout_wind_ros": 1305, "layout_opt": [1305, 1310], "ipynb": 1305, "demonstr": [1305, 1308, 1310, 1314, 1316, 1319, 1320], "wrf": [1305, 1312, 1313], "ambientroseplotoutput": 1305, "multi_height": 1305, "bug": 1305, "veer": 1305, "power_mask": 1305, "solv": [1305, 1310], "cubic": 1305, "forgotten": 1305, "api": [1305, 1306, 1318], "hotfix": 1305, "wsrho2pcttwofil": 1305, "sector_manag": 1305, "sector_man": 1305, "col_model": 1305, "offset": 1305, "compare_wak": 1305, "compar": [1305, 1314, 1315], "yawed_wak": 1305, "width": 1305, "simplifi": 1305, "accept": 1305, "replac": [1305, 1307], "intuit": 1305, "turboparkix": 1305, "summar": 1305, "bracket": 1305, "eq": 1305, "wrong": 1305, "layout_regular_grid": 1305, "geom_reggrid": 1305, "affect": [1305, 1314], "geopandas_help": 1305, "interior": 1305, "11": [1305, 1307, 1308, 1310, 1314, 1318, 1320], "cleaner": 1305, "treatment": 1305, "slimmer": 1305, "distribut": [1305, 1308, 1310, 1318], "move": [1305, 1310], "irrespect": 1305, "restart": 1305, "complet": [1305, 1308, 1311, 1312, 1315, 1317, 1318, 1319], "incomplet": 1305, "slurm": 1305, "queue": 1305, "system": [1305, 1307, 1308, 1313, 1316, 1318], "timeseries_slurm": 1305, "hpc": 1305, "apigen": 1305, "through": [1305, 1306], "outer": 1305, "consist": [1305, 1308, 1314, 1315, 1316, 1319], "timeseries_100": [1305, 1317], "short": [1305, 1308], "timestep": 1305, "vari": [1305, 1308, 1312], "chosen": 1305, "slow": 1305, "down": [1305, 1318], "prevent": 1305, "shown": [1305, 1308], "signal": [1305, 1317], "modular": 1306, "steer": 1306, "construct": 1306, "analysi": 1306, "studi": 1306, "comparison": 1306, "simul": [1306, 1308, 1313], "complex": [1306, 1318], "chain": 1306, "perform": 1306, "ow": 1306, "remot": 1306, "enabl": 1306, "well": [1306, 1308, 1310, 1320], "tracker": 1306, "report": 1306, "mit": 1306, "citat": 1306, "conda": 1306, "histori": 1306, "fork": [1306, 1307], "branch": [1306, 1307], "git": [1306, 1307, 1309], "checkout": 1306, "new_branch": 1306, "your": [1306, 1307, 1316], "am": [1306, 1317], "awesom": 1306, "messag": 1306, "push": 1306, "pull": 1306, "request": 1306, "develop": 1306, "flapfoam": 1306, "public": [1306, 1320], "publicli": 1306, "fund": 1306, "research": 1306, "project": 1306, "particular": [1306, 1318], "feder": 1306, "ministri": 1306, "econom": 1306, "affair": 1306, "climat": 1306, "action": [1306, 1313], "bmwk": 1306, "roject": 1306, "smart": 1306, "grant": 1306, "0325851b": 1306, "0325397b": 1306, "03ee3008a": 1306, "educ": 1306, "bmbf": 1306, "framework": 1306, "h2digit": 1306, "03sf0635": 1306, "venv": 1307, "conveni": [1307, 1316], "prefer": 1307, "python3": 1307, "Then": 1307, "activ": 1307, "everi": 1307, "leav": 1307, "deactiv": 1307, "altern": 1307, "dev": 1307, "egg": 1307, "clone": 1307, "cd": 1307, "whenev": 1307, "concern": 1307, "recommend": [1307, 1309], "forg": 1307, "channel": 1307, "while": 1307, "again": [1307, 1310, 1314], "build": 1307, "Such": 1308, "often": [1308, 1313], "terminologi": [1308, 1313, 1316], "three": [1308, 1320], "67": [1308, 1310, 1318], "randomli": 1308, "t0": [1308, 1310, 1314, 1315, 1316, 1318, 1320], "101872": [1308, 1318], "70": [1308, 1309, 1310, 1315, 1318], "1004753": [1308, 1318], "57": [1308, 1310, 1318, 1319], "t1": [1308, 1310, 1314, 1315, 1316, 1318, 1320], "103659": [1308, 1318], "97": [1308, 1310, 1317, 1318], "1002993": [1308, 1318], "29": [1308, 1310, 1318], "t2": [1308, 1310, 1314, 1316, 1318], "100780": [1308, 1318], "09": [1308, 1317, 1318], "1000779": [1308, 1318], "t3": [1308, 1310, 1314, 1316, 1318], "100290": [1308, 1318], "42": [1308, 1310, 1317, 1318], "1004330": [1308, 1318], "t4": [1308, 1310, 1314, 1316], "103005": 1308, "1003540": 1308, "t5": [1308, 1310], "100102": 1308, "92": [1308, 1310], "1004849": 1308, "55": [1308, 1310, 1319], "t6": [1308, 1310], "104162": 1308, "1001061": 1308, "like": [1308, 1313, 1315], "mesoscal": 1308, "75": [1308, 1309, 1310, 1312, 1318], "2009": [1308, 1312], "00": [1308, 1310, 1312, 1317, 1318], "37214": [1308, 1312], "42685": [1308, 1312], "28838": [1308, 1312], "31": [1308, 1309, 1310, 1312, 1317, 1318], "23": [1308, 1310, 1312, 1318], "27767": [1308, 1312], "36368": [1308, 1312], "30095": [1308, 1312], "At": 1308, "90": [1308, 1310, 1312, 1317], "150": [1308, 1310, 1312, 1318, 1319], "250": [1308, 1310, 1312, 1315, 1320], "o": [1308, 1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "16": [1308, 1310, 1312, 1314, 1315, 1317, 1318, 1319], "20": [1308, 1309, 1310, 1311, 1312, 1314, 1315, 1318, 1319], "svg": [1308, 1310, 1312, 1315, 1318, 1319], "binnd": 1308, "layer": 1308, "64": [1308, 1310, 1318], "253": 1308, "032": 1308, "542331196166035e": 1308, "65": [1308, 1310, 1318, 1319], "207": 1308, "145": 1308, "0001230528308906": 1308, "49": [1308, 1309, 1310], "46": [1308, 1310, 1319], "116": 1308, "0001563449299843": 1308, "72": [1308, 1309, 1310, 1314], "314": 1308, "048": 1308, "618827331554488e": 1308, "18": [1308, 1310, 1314], "302": 1308, "027": 1308, "694": 1308, "98695302482496e": 1308, "3000": [1308, 1310, 1314, 1320], "2018": 1308, "24": [1308, 1310, 1314, 1318], "172": 1308, "27": [1308, 1310, 1317], "51": [1308, 1310], "184": 1308, "13": [1308, 1310, 1312, 1314, 1317], "52": [1308, 1310], "198": 1308, "04": [1308, 1310, 1311], "34": [1308, 1310], "209": [1308, 1310], "93": [1308, 1310], "19": [1308, 1310, 1314, 1318], "78": [1308, 1310, 1319], "217": 1308, "223": 1308, "26": [1308, 1309, 1310, 1318], "68": [1308, 1310], "227": 1308, "02": [1308, 1310, 1311], "8000": [1308, 1316, 1318], "2017": [1308, 1318], "62": [1308, 1310, 1318], "244": [1308, 1318], "06": [1308, 1310, 1312, 1317, 1318], "0504": [1308, 1318], "99": [1308, 1310, 1315, 1318], "243": [1308, 1318], "03": [1308, 1310, 1316, 1318, 1319], "0514": [1308, 1318], "0522": [1308, 1318], "33": [1308, 1310, 1318], "241": [1308, 1318], "0523": [1308, 1318], "0518": 1308, "242": 1308, "0513": 1308, "12": [1308, 1310, 1314, 1316, 1317, 1319, 1320], "269": 1308, "836": 1308, "344": 1308, "268": 1308, "532": 1308, "267": 1308, "406": 1308, "265": 1308, "981": 1308, "39": [1308, 1309, 1310, 1316, 1317, 1318], "coars": [1308, 1310, 1319], "216": [1308, 1310, 1319], "site": [1308, 1310], "bremen": [1308, 1310, 1315], "germani": [1308, 1310], "00158": [1308, 1310, 1319], "00244": [1308, 1310, 1319], "00319": [1308, 1310, 1319], "00367": 1308, "00042": [1308, 1310, 1319], "veri": [1308, 1309, 1310, 1318], "inhomogen": 1308, "long_nam": 1308, "rotat": 1308, "subtitl": 1308, "date": 1308, "2021": 1308, "300": [1308, 1310, 1314, 1320], "2500": [1308, 1309, 1310], "180": 1308, "220": 1308, "120": 1308, "dtu10": 1308, "dtu10mw": [1308, 1311, 1317], "iea15": 1308, "iea15mw": [1308, 1311], "iwt7": [1308, 1311], "nrel5": [1308, 1314, 1316, 1318], "nrel5mw": [1308, 1309, 1310, 1311, 1312, 1314, 1316, 1318, 1319, 1320], "14": [1308, 1310, 1314, 1318], "nstate": 1308, "ncurv": 1308, "pctcurv": 1308, "categori": 1308, "relative_to": 1308, "parent": 1308, "lt": [1308, 1310, 1316], "posixpath": 1308, "gt": [1308, 1310, 1316], "printout": [1308, 1316], "feel": 1308, "invit": 1308, "best": [1309, 1310, 1315], "wai": 1309, "similar": 1309, "claim": 1309, "inlin": [1309, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320], "associ": 1309, "netcfd": 1309, "back": 1309, "our": [1309, 1310, 1311, 1312, 1314, 1315, 1319, 1320], "let": [1309, 1310, 1312, 1314, 1315, 1317, 1318, 1319, 1320], "domain": 1309, "rectangl": 1309, "realiz": [1309, 1320], "instanc": [1309, 1317], "streamlines_100": [1309, 1311], "grid16": [1309, 1311], "jensen_linear_k007": [1309, 1311, 1316], "4000": [1309, 1310, 1315, 1319], "implicit": [1309, 1310, 1318, 1320], "fr": [1309, 1312, 1314, 1316, 1318], "to_datafram": [1309, 1312, 1314, 1316, 1317, 1318, 1320], "scale_unit": [1309, 1317], "201": [1309, 1317], "158092": 1309, "491089": 1309, "1474": 1309, "211367": 1309, "208": [1309, 1310], "044994": 1309, "673386": 1309, "1580": 1309, "523022": 1309, "214": [1309, 1310], "523994": 1309, "960601": 1309, "1748": 1309, "171047": 1309, "218": 1309, "242345": 1309, "867297": 1309, "1127": 1309, "597810": 1309, "222": 1309, "297880": 1309, "283373": 1309, "1352": 1309, "715530": 1309, "899315": 1309, "731909": 1309, "808657": 1309, "1614": 1309, "607085": 1309, "1101": 1309, "211997": 1309, "236": 1309, "751304": 1309, "932726": 1309, "1156": 1309, "958672": 1309, "237": 1309, "139685": 1309, "375640": 1309, "142662": 1309, "1406": 1309, "547918": 1309, "801": 1309, "751505": 1309, "484049": 1309, "818854": 1309, "381124": 1309, "1665": 1309, "347000": 1309, "908": 1309, "970303": 1309, "311353": 1309, "703701": 1309, "149847": 1309, "1054": 1309, "871543": 1309, "454": 1309, "760942": 1309, "259090": 1309, "995899": 1309, "857833": 1309, "1185": 1309, "898485": 1309, "690": 1309, "639688": 1309, "676969": 1309, "357075": 1309, "1396": 1309, "122949": 1309, "44": [1309, 1310, 1317], "537113": 1309, "352448": 1309, "263710": 1309, "521": 1309, "748653": 1309, "492": 1309, "140844": 1309, "47": [1309, 1310], "447853": 1309, "960030": 1309, "917024": 1309, "724": 1309, "421405": 1309, "710": 1309, "071241": 1309, "815208": 1309, "580130": 1309, "998": 1309, "581195": 1309, "462887": 1309, "352662": 1309, "621921": 1309, "552147": 1309, "960214": 1309, "363478": 1309, "184792": 1309, "580285": 1309, "552663": 1309, "task": 1310, "detail": [1310, 1313, 1318], "pymoo": 1310, "nice": 1310, "genet": 1310, "optimizer_pymoo": 1310, "gm": 1310, "tackl": 1310, "wind_rose_bremen": [1310, 1315, 1319], "0036700002": [1310, 1319], "next": [1310, 1312, 1314, 1316, 1318, 1319], "1200": 1310, "800": [1310, 1316, 1317], "900": [1310, 1317, 1319], "float64": [1310, 1316], "1500": 1310, "700": 1310, "later": [1310, 1314, 1317, 1318], "wish": [1310, 1318, 1319, 1320], "t7": 1310, "t8": 1310, "t9": 1310, "notic": [1310, 1314, 1315, 1317, 1318, 1320], "shortli": 1310, "begin": 1310, "bastankhah_linear_k002": [1310, 1311, 1312, 1314, 1315], "n_obj_cmptn": 1310, "n_con_cmptn": 1310, "impli": 1310, "ga": 1310, "form": [1310, 1318], "n_max_gen": 1310, "pop_siz": 1310, "solver": 1310, "problem_par": 1310, "algo_par": 1310, "seed": 1310, "setup_par": 1310, "term_par": 1310, "ftol": 1310, "xtol": 1310, "print_info": 1310, "sampl": 1310, "float_random": 1310, "floatrandomsampl": 1310, "termin": 1310, "defaultsingleobjectivetermin": 1310, "001": 1310, "n_gen": 1310, "n_eval": 1310, "cv_min": 1310, "cv_avg": 1310, "f_avg": 1310, "f_min": 1310, "257950e": 1310, "094916e": 1310, "180418e": 1310, "141625e": 1310, "279782e": 1310, "157184e": 1310, "404513e": 1310, "577682e": 1310, "579169e": 1310, "703733e": 1310, "350": 1310, "531147e": 1310, "050876e": 1310, "400": 1310, "000000e": 1310, "605222e": 1310, "588240e": 1310, "450": 1310, "103920e": 1310, "527620e": 1310, "582192e": 1310, "550": 1310, "732673e": 1310, "600": [1310, 1312, 1314, 1315], "832754e": 1310, "586968e": 1310, "591846e": 1310, "650": 1310, "055741e": 1310, "588486e": 1310, "604179e": 1310, "8416979966": 1310, "586179e": 1310, "750": [1310, 1320], "0056020975": 1310, "586244e": 1310, "592827e": 1310, "609887e": 1310, "850": 1310, "597835e": 1310, "616432e": 1310, "601994e": 1310, "619099e": 1310, "608318e": 1310, "637494e": 1310, "615190e": 1310, "645683e": 1310, "1050": 1310, "622881e": 1310, "646187e": 1310, "1100": 1310, "631506e": 1310, "653047e": 1310, "1150": 1310, "640921e": 1310, "655091e": 1310, "648388e": 1310, "657861e": 1310, "1250": 1310, "651988e": 1310, "663615e": 1310, "1300": 1310, "655195e": 1310, "1350": 1310, "658165e": 1310, "667660e": 1310, "28": [1310, 1317], "1400": 1310, "660791e": 1310, "671652e": 1310, "1450": 1310, "663724e": 1310, "676832e": 1310, "667884e": 1310, "679974e": 1310, "1550": 1310, "672357e": 1310, "685551e": 1310, "1600": 1310, "676653e": 1310, "688468e": 1310, "1650": 1310, "681032e": 1310, "688999e": 1310, "1700": 1310, "684254e": 1310, "692540e": 1310, "1750": 1310, "686841e": 1310, "1800": 1310, "689011e": 1310, "693343e": 1310, "37": [1310, 1317], "1850": 1310, "690736e": 1310, "700848e": 1310, "38": [1310, 1319], "1900": 1310, "692806e": 1310, "701437e": 1310, "1950": 1310, "695244e": 1310, "702613e": 1310, "40": [1310, 1317], "2000": [1310, 1315], "698077e": 1310, "714461e": 1310, "2050": 1310, "701772e": 1310, "2100": 1310, "705495e": 1310, "716273e": 1310, "43": 1310, "2150": 1310, "709527e": 1310, "720787e": 1310, "2200": 1310, "712644e": 1310, "721430e": 1310, "45": 1310, "2250": 1310, "715937e": 1310, "722818e": 1310, "2300": 1310, "719261e": 1310, "726242e": 1310, "2350": 1310, "721874e": 1310, "728699e": 1310, "48": 1310, "2400": 1310, "724323e": 1310, "729085e": 1310, "2450": 1310, "726669e": 1310, "731540e": 1310, "729169e": 1310, "736498e": 1310, "2550": 1310, "731473e": 1310, "2600": 1310, "733755e": 1310, "739439e": 1310, "53": 1310, "2650": 1310, "736553e": 1310, "741091e": 1310, "54": [1310, 1318], "2700": 1310, "737859e": 1310, "2750": 1310, "739620e": 1310, "746115e": 1310, "56": 1310, "2800": 1310, "741132e": 1310, "2850": 1310, "742407e": 1310, "2900": 1310, "743667e": 1310, "59": 1310, "2950": 1310, "744499e": 1310, "747450e": 1310, "745637e": 1310, "749378e": 1310, "61": 1310, "3050": 1310, "746819e": 1310, "750740e": 1310, "3100": 1310, "748079e": 1310, "751545e": 1310, "63": [1310, 1318], "3150": 1310, "749500e": 1310, "752455e": 1310, "3200": 1310, "750617e": 1310, "3250": 1310, "751276e": 1310, "752688e": 1310, "66": [1310, 1318], "3300": 1310, "751675e": 1310, "753603e": 1310, "3350": 1310, "752037e": 1310, "753628e": 1310, "3400": 1310, "752668e": 1310, "754781e": 1310, "69": 1310, "3450": 1310, "753223e": 1310, "755507e": 1310, "3500": 1310, "753940e": 1310, "755627e": 1310, "71": [1310, 1314], "3550": 1310, "754475e": 1310, "756641e": 1310, "3600": 1310, "754917e": 1310, "756729e": 1310, "3650": 1310, "755482e": 1310, "756732e": 1310, "74": 1310, "3700": 1310, "755880e": 1310, "756858e": 1310, "3750": 1310, "756292e": 1310, "757238e": 1310, "76": 1310, "3800": 1310, "756666e": 1310, "757649e": 1310, "77": [1310, 1317], "3850": 1310, "756985e": 1310, "757750e": 1310, "3900": 1310, "757224e": 1310, "757984e": 1310, "79": [1310, 1316], "3950": 1310, "757503e": 1310, "758511e": 1310, "80": [1310, 1319], "757798e": 1310, "759081e": 1310, "81": [1310, 1319], "4050": 1310, "758090e": 1310, "82": 1310, "4100": 1310, "758474e": 1310, "759855e": 1310, "4150": 1310, "758746e": 1310, "759968e": 1310, "84": [1310, 1312], "4200": 1310, "758965e": 1310, "4250": 1310, "759223e": 1310, "4300": 1310, "759449e": 1310, "87": [1310, 1318], "4350": 1310, "759646e": 1310, "759971e": 1310, "4400": 1310, "759774e": 1310, "760032e": 1310, "4450": 1310, "759883e": 1310, "760064e": 1310, "4500": 1310, "759951e": 1310, "760100e": 1310, "91": [1310, 1319], "4550": 1310, "760006e": 1310, "760142e": 1310, "4600": 1310, "760062e": 1310, "760593e": 1310, "4650": 1310, "760121e": 1310, "760978e": 1310, "94": 1310, "4700": 1310, "760182e": 1310, "4750": 1310, "760257e": 1310, "96": 1310, "4800": 1310, "760395e": 1310, "760997e": 1310, "4850": 1310, "760607e": 1310, "761020e": 1310, "98": [1310, 1312], "4900": 1310, "760797e": 1310, "761706e": 1310, "4950": 1310, "760918e": 1310, "761763e": 1310, "761054e": 1310, "success": 1310, "28808": 1310, "815290012986": 1310, "x_0000": 1310, "484848e": 1310, "y_0000": 1310, "387982e": 1310, "x_0001": 1310, "999400e": 1310, "y_0001": 1310, "193226e": 1310, "x_0002": 1310, "743332e": 1310, "y_0002": 1310, "853013e": 1310, "x_0003": 1310, "161273e": 1310, "y_0003": 1310, "356752e": 1310, "x_0004": 1310, "010384e": 1310, "y_0004": 1310, "495968e": 1310, "x_0005": 1310, "992900e": 1310, "y_0005": 1310, "499577e": 1310, "x_0006": 1310, "970308e": 1310, "y_0006": 1310, "893921e": 1310, "x_0007": 1310, "136647e": 1310, "y_0007": 1310, "198557e": 1310, "x_0008": 1310, "942851e": 1310, "y_0008": 1310, "147376e": 1310, "x_0009": 1310, "992843e": 1310, "y_0009": 1310, "559152e": 1310, "880882e": 1310, "boundary_0000": 1310, "409687e": 1310, "boundary_0001": 1310, "001485e": 1310, "boundary_0002": 1310, "boundary_0003": 1310, "212439e": 1310, "boundary_0004": 1310, "038416e": 1310, "boundary_0005": 1310, "227091e": 1310, "boundary_0006": 1310, "boundary_0007": 1310, "boundary_0008": 1310, "714927e": 1310, "boundary_0009": 1310, "156536e": 1310, "dist_0_1": 1310, "053034e": 1310, "dist_0_2": 1310, "133692e": 1310, "dist_0_3": 1310, "512186e": 1310, "dist_0_4": 1310, "063629e": 1310, "dist_0_5": 1310, "032833e": 1310, "dist_0_6": 1310, "912219e": 1310, "dist_0_7": 1310, "174197e": 1310, "dist_0_8": 1310, "235491e": 1310, "dist_0_9": 1310, "389174e": 1310, "dist_1_2": 1310, "810253e": 1310, "dist_1_3": 1310, "227849e": 1310, "dist_1_4": 1310, "346207e": 1310, "dist_1_5": 1310, "282549e": 1310, "dist_1_6": 1310, "644388e": 1310, "dist_1_7": 1310, "015225e": 1310, "dist_1_8": 1310, "760754e": 1310, "dist_1_9": 1310, "459327e": 1310, "dist_2_3": 1310, "734121e": 1310, "dist_2_4": 1310, "000907e": 1310, "dist_2_5": 1310, "035690e": 1310, "dist_2_6": 1310, "547630e": 1310, "dist_2_7": 1310, "612574e": 1310, "dist_2_8": 1310, "428297e": 1310, "dist_2_9": 1310, "480372e": 1310, "dist_3_4": 1310, "383697e": 1310, "dist_3_5": 1310, "427543e": 1310, "dist_3_6": 1310, "533256e": 1310, "dist_3_7": 1310, "217365e": 1310, "dist_3_8": 1310, "085619e": 1310, "dist_3_9": 1310, "184343e": 1310, "dist_4_5": 1310, "462646e": 1310, "dist_4_6": 1310, "321302e": 1310, "dist_4_7": 1310, "301324e": 1310, "dist_4_8": 1310, "519941e": 1310, "dist_4_9": 1310, "401477e": 1310, "dist_5_6": 1310, "244685e": 1310, "dist_5_7": 1310, "910567e": 1310, "dist_5_8": 1310, "002368e": 1310, "dist_5_9": 1310, "916621e": 1310, "dist_6_7": 1310, "304425e": 1310, "dist_6_8": 1310, "924854e": 1310, "dist_6_9": 1310, "010247e": 1310, "dist_7_8": 1310, "429886e": 1310, "dist_7_9": 1310, "403714e": 1310, "dist_8_9": 1310, "394927e": 1310, "210": 1310, "211": 1310, "212": 1310, "213": 1310, "215": [1310, 1317], "995": 1310, "081": 1310, "109": 1310, "5e": 1310, "448": 1310, "999": 1310, "743": 1310, "6137": 1310, "994": 1310, "338": 1310, "419": 1310, "685": 1310, "147e": 1310, "755": 1310, "00013": 1310, "u2": [1310, 1316], "visual": [1310, 1312, 1314, 1315, 1316, 1317, 1318], "dpar": 1310, "zorder": 1310, "outside_whit": 1310, "anyth": 1310, "organ": 1311, "farm_pmask": 1311, "pmask": [1311, 1314, 1315], "farm_hubh_data": 1311, "hubh_data": 1311, "farm_kti": 1311, "farm_kti_02": 1311, "kti_02": [1311, 1318], "farm_kti_04": 1311, "kti_04": 1311, "farm_kti_05": 1311, "kti_05": [1311, 1319, 1320], "farm_kti_amb": 1311, "kti_amb": 1311, "farm_kti_amb_02": 1311, "kti_amb_02": 1311, "farm_kti_amb_04": 1311, "kti_amb_04": 1311, "farm_kti_amb_05": 1311, "kti_amb_05": 1311, "farm_thrust2ct": 1311, "farm_yaw2yawm": 1311, "farm_yawm2yaw": 1311, "axiwake10": 1311, "axiwake2": 1311, "axiwake20": 1311, "axiwake3": 1311, "axiwake4": 1311, "axiwake5": 1311, "axiwake6": 1311, "axiwake7": 1311, "axiwake8": 1311, "axiwake9": 1311, "distslic": 1311, "distsliced100": 1311, "distsliced16": 1311, "distsliced25": 1311, "distsliced36": 1311, "distsliced4": 1311, "distsliced400": 1311, "distsliced49": 1311, "distsliced64": 1311, "distsliced81": 1311, "distsliced9": 1311, "grid100": 1311, "grid25": 1311, "grid36": 1311, "grid4": 1311, "grid400": 1311, "grid49": 1311, "grid64": 1311, "grid81": 1311, "grid9": [1311, 1312], "top_hat": 1311, "5mw": [1311, 1315, 1316, 1318], "null_typ": 1311, "rotor_wd_farmo": 1311, "streamlines_1": 1311, "streamlines_10": 1311, "streamlines_100_farmo": 1311, "streamlines_100_yaw": 1311, "streamlines_10_farmo": 1311, "streamlines_10_yaw": 1311, "streamlines_1_farmo": 1311, "streamlines_1_yaw": 1311, "streamlines_5": 1311, "streamlines_50": 1311, "streamlines_500": 1311, "streamlines_500_farmo": 1311, "streamlines_500_yaw": 1311, "streamlines_50_farmo": 1311, "streamlines_50_yaw": 1311, "streamlines_5_farmo": 1311, "streamlines_5_yaw": 1311, "timelines_10min": 1311, "timelines_10": [1311, 1317], "timelines_1km": 1311, "timelines_1min": 1311, "timelines_1": 1311, "timelines_30min": 1311, "timelines_30": 1311, "timelines_60min": 1311, "bastankhah_linear": [1311, 1319], "sp": 1311, "bastankhah_linear_amb": 1311, "linear_amb": 1311, "bastankhah_linear_amb_k002": 1311, "bastankhah_linear_amb_k004": 1311, "bastankhah_linear_k004": [1311, 1317], "bastankhah_linear_lim": 1311, "linear_lim": 1311, "bastankhah_linear_lim_k002": 1311, "bastankhah_linear_lim_k004": 1311, "bastankhah_max": 1311, "bastankhah_max_amb": 1311, "max_amb": 1311, "bastankhah_max_amb_k002": 1311, "bastankhah_max_amb_k004": 1311, "bastankhah_max_k002": 1311, "bastankhah_max_k004": 1311, "bastankhah_product": 1311, "bastankhah_product_k002": 1311, "bastankhah_product_k004": 1311, "bastankhah_product_lim": 1311, "product_lim": 1311, "bastankhah_product_lim_k002": 1311, "bastankhah_product_lim_k004": 1311, "bastankhah_quadrat": [1311, 1318], "bastankhah_quadratic_amb": 1311, "quadratic_amb": 1311, "bastankhah_quadratic_amb_k002": 1311, "bastankhah_quadratic_amb_k004": 1311, "bastankhah_quadratic_k002": 1311, "bastankhah_quadratic_k004": 1311, "crespohernandez_ambti_linear": 1311, "ti_linear": 1311, "crespohernandez_ambti_max": 1311, "ti_max": 1311, "crespohernandez_ambti_quadrat": 1311, "ti_quadrat": 1311, "crespohernandez_linear": 1311, "crespohernandez_linear_k002": 1311, "crespohernandez_max": [1311, 1318, 1319, 1320], "crespohernandez_max_k002": 1311, "crespohernandez_quadrat": 1311, "crespohernandez_quadratic_k002": 1311, "iecti2005_linear": 1311, "19076020221856677": 1311, "iecti2005_max": 1311, "iecti2005_quadrat": 1311, "iecti2019_linear": 1311, "iecti2019_max": 1311, "iecti2019_quadrat": 1311, "jensen_linear": 1311, "jensen_linear_amb": 1311, "jensen_linear_amb_k002": 1311, "jensen_linear_amb_k004": 1311, "jensen_linear_amb_k007": 1311, "jensen_linear_amb_k0075": 1311, "075": 1311, "jensen_linear_k002": 1311, "jensen_linear_k004": 1311, "jensen_linear_k0075": 1311, "jensen_linear_lim": 1311, "jensen_linear_lim_k002": 1311, "jensen_linear_lim_k004": 1311, "jensen_linear_lim_k007": 1311, "jensen_linear_lim_k0075": 1311, "jensen_max": 1311, "jensen_max_amb": 1311, "jensen_max_amb_k002": 1311, "jensen_max_amb_k004": 1311, "jensen_max_amb_k007": 1311, "jensen_max_amb_k0075": 1311, "jensen_max_k002": 1311, "jensen_max_k004": 1311, "jensen_max_k007": 1311, "jensen_max_k0075": 1311, "jensen_product": 1311, "jensen_product_k002": 1311, "jensen_product_k004": 1311, "jensen_product_k007": 1311, "jensen_product_k0075": 1311, "jensen_product_lim": 1311, "jensen_product_lim_k002": 1311, "jensen_product_lim_k004": 1311, "jensen_product_lim_k007": 1311, "jensen_product_lim_k0075": 1311, "jensen_quadrat": 1311, "jensen_quadratic_amb": 1311, "jensen_quadratic_amb_k002": 1311, "jensen_quadratic_amb_k004": 1311, "jensen_quadratic_amb_k007": 1311, "jensen_quadratic_amb_k0075": 1311, "jensen_quadratic_k002": 1311, "jensen_quadratic_k004": 1311, "jensen_quadratic_k007": 1311, "jensen_quadratic_k0075": 1311, "porteagel_linear": [1311, 1320], "porteagel_linear_amb": 1311, "porteagel_linear_amb_k002": 1311, "porteagel_linear_amb_k004": 1311, "porteagel_linear_k002": 1311, "porteagel_linear_k004": 1311, "porteagel_linear_lim": 1311, "porteagel_linear_lim_k002": 1311, "porteagel_linear_lim_k004": 1311, "porteagel_max": 1311, "porteagel_max_amb": 1311, "porteagel_max_amb_k002": 1311, "porteagel_max_amb_k004": 1311, "porteagel_max_k002": 1311, "porteagel_max_k004": 1311, "porteagel_product": 1311, "porteagel_product_k002": 1311, "porteagel_product_k004": 1311, "porteagel_product_lim": 1311, "porteagel_product_lim_k002": 1311, "porteagel_product_lim_k004": 1311, "porteagel_quadrat": 1311, "porteagel_quadratic_amb": 1311, "porteagel_quadratic_amb_k002": 1311, "porteagel_quadratic_amb_k004": 1311, "porteagel_quadratic_k002": 1311, "porteagel_quadratic_k004": 1311, "turboparkix_linear_a002_dx001": 1311, "turboparkix_linear_a002_dx1": 1311, "turboparkix_linear_a002_dx10": 1311, "turboparkix_linear_a002_dx100": 1311, "turboparkix_linear_a002_dx5": 1311, "turboparkix_linear_a002_dx50": 1311, "turboparkix_linear_a004_dx001": 1311, "turboparkix_linear_a004_dx1": 1311, "turboparkix_linear_a004_dx10": 1311, "turboparkix_linear_a004_dx100": 1311, "turboparkix_linear_a004_dx5": 1311, "turboparkix_linear_a004_dx50": 1311, "turboparkix_linear_amb_a002_dx001": 1311, "turboparkix_linear_amb_a002_dx1": 1311, "turboparkix_linear_amb_a002_dx10": 1311, "turboparkix_linear_amb_a002_dx100": 1311, "turboparkix_linear_amb_a002_dx5": 1311, "turboparkix_linear_amb_a002_dx50": 1311, "turboparkix_linear_amb_a004_dx001": 1311, "turboparkix_linear_amb_a004_dx1": 1311, "turboparkix_linear_amb_a004_dx10": 1311, "turboparkix_linear_amb_a004_dx100": 1311, "turboparkix_linear_amb_a004_dx5": 1311, "turboparkix_linear_amb_a004_dx50": 1311, "turboparkix_linear_lim_a002_dx001": 1311, "turboparkix_linear_lim_a002_dx1": 1311, "turboparkix_linear_lim_a002_dx10": 1311, "turboparkix_linear_lim_a002_dx100": 1311, "turboparkix_linear_lim_a002_dx5": 1311, "turboparkix_linear_lim_a002_dx50": 1311, "turboparkix_linear_lim_a004_dx001": 1311, "turboparkix_linear_lim_a004_dx1": 1311, "turboparkix_linear_lim_a004_dx10": 1311, "turboparkix_linear_lim_a004_dx100": 1311, "turboparkix_linear_lim_a004_dx5": 1311, "turboparkix_linear_lim_a004_dx50": 1311, "turboparkix_max_a002_dx001": 1311, "turboparkix_max_a002_dx1": 1311, "turboparkix_max_a002_dx10": 1311, "turboparkix_max_a002_dx100": 1311, "turboparkix_max_a002_dx5": 1311, "turboparkix_max_a002_dx50": 1311, "turboparkix_max_a004_dx001": 1311, "turboparkix_max_a004_dx1": 1311, "turboparkix_max_a004_dx10": 1311, "turboparkix_max_a004_dx100": 1311, "turboparkix_max_a004_dx5": 1311, "turboparkix_max_a004_dx50": 1311, "turboparkix_max_amb_a002_dx001": 1311, "turboparkix_max_amb_a002_dx1": 1311, "turboparkix_max_amb_a002_dx10": 1311, "turboparkix_max_amb_a002_dx100": 1311, "turboparkix_max_amb_a002_dx5": 1311, "turboparkix_max_amb_a002_dx50": 1311, "turboparkix_max_amb_a004_dx001": 1311, "turboparkix_max_amb_a004_dx1": 1311, "turboparkix_max_amb_a004_dx10": 1311, "turboparkix_max_amb_a004_dx100": 1311, "turboparkix_max_amb_a004_dx5": 1311, "turboparkix_max_amb_a004_dx50": 1311, "turboparkix_product_a002_dx001": 1311, "turboparkix_product_a002_dx1": 1311, "turboparkix_product_a002_dx10": 1311, "turboparkix_product_a002_dx100": 1311, "turboparkix_product_a002_dx5": 1311, "turboparkix_product_a002_dx50": 1311, "turboparkix_product_a004_dx001": 1311, "turboparkix_product_a004_dx1": 1311, "turboparkix_product_a004_dx10": 1311, "turboparkix_product_a004_dx100": 1311, "turboparkix_product_a004_dx5": 1311, "turboparkix_product_a004_dx50": 1311, "turboparkix_product_lim_a002_dx001": 1311, "turboparkix_product_lim_a002_dx1": 1311, "turboparkix_product_lim_a002_dx10": 1311, "turboparkix_product_lim_a002_dx100": 1311, "turboparkix_product_lim_a002_dx5": 1311, "turboparkix_product_lim_a002_dx50": 1311, "turboparkix_product_lim_a004_dx001": 1311, "turboparkix_product_lim_a004_dx1": 1311, "turboparkix_product_lim_a004_dx10": 1311, "turboparkix_product_lim_a004_dx100": 1311, "turboparkix_product_lim_a004_dx5": 1311, "turboparkix_product_lim_a004_dx50": 1311, "turboparkix_quadratic_a002_dx001": 1311, "turboparkix_quadratic_a002_dx1": 1311, "turboparkix_quadratic_a002_dx10": 1311, "turboparkix_quadratic_a002_dx100": 1311, "turboparkix_quadratic_a002_dx5": 1311, "turboparkix_quadratic_a002_dx50": 1311, "turboparkix_quadratic_a004_dx001": 1311, "turboparkix_quadratic_a004_dx1": 1311, "turboparkix_quadratic_a004_dx10": 1311, "turboparkix_quadratic_a004_dx100": 1311, "turboparkix_quadratic_a004_dx5": 1311, "turboparkix_quadratic_a004_dx50": 1311, "turboparkix_quadratic_amb_a002_dx001": 1311, "turboparkix_quadratic_amb_a002_dx1": 1311, "turboparkix_quadratic_amb_a002_dx10": 1311, "turboparkix_quadratic_amb_a002_dx100": 1311, "turboparkix_quadratic_amb_a002_dx5": 1311, "turboparkix_quadratic_amb_a002_dx50": 1311, "turboparkix_quadratic_amb_a004_dx001": 1311, "turboparkix_quadratic_amb_a004_dx1": 1311, "turboparkix_quadratic_amb_a004_dx10": 1311, "turboparkix_quadratic_amb_a004_dx100": 1311, "turboparkix_quadratic_amb_a004_dx5": 1311, "turboparkix_quadratic_amb_a004_dx50": 1311, "turbopark_linear_a002": 1311, "turbopark_linear_a004": 1311, "turbopark_linear_amb_a002": 1311, "turbopark_linear_amb_a004": 1311, "turbopark_linear_lim_a002": 1311, "turbopark_linear_lim_a004": 1311, "turbopark_max_a002": 1311, "turbopark_max_a004": 1311, "turbopark_max_amb_a002": 1311, "turbopark_max_amb_a004": 1311, "turbopark_product_a002": 1311, "turbopark_product_a004": 1311, "turbopark_product_lim_a002": 1311, "turbopark_product_lim_a004": 1311, "turbopark_quadratic_a002": 1311, "turbopark_quadratic_a004": 1311, "turbopark_quadratic_amb_a002": 1311, "turbopark_quadratic_amb_a004": 1311, "my_jensen": 1311, "042": 1311, "jensenwake45": 1311, "freshli": 1311, "similarli": [1311, 1314, 1320], "section": [1311, 1313, 1316, 1318, 1320], "explor": 1312, "download": 1312, "newa": 1312, "websit": 1312, "4464": 1312, "stamp": 1312, "mark": 1312, "month": 1312, "kinet": [1312, 1313], "energi": [1312, 1313], "assumpt": 1312, "variat": 1312, "neglect": 1312, "inflow": [1312, 1318], "manual": 1312, "alreadi": [1312, 1316], "howev": [1312, 1320], "neither": [1312, 1314], "goal": 1312, "certain": 1312, "approxim": 1312, "west": [1312, 1315, 1320], "undo": 1312, "earlier": 1312, "p0": [1312, 1314, 1318, 1319], "nfarm": [1312, 1314, 1316, 1317, 1318, 1319, 1320], "1f": [1312, 1314, 1318, 1319], "2f": [1312, 1314, 1318, 1319], "340": [1312, 1315], "14377": 1312, "593022": 1312, "1533": 1312, "584614": 1312, "83636": 1312, "192504": 1312, "1299": 1312, "635898": 1312, "299802": 1312, "1362": 1312, "286874": 1312, "538688": 1312, "1501": 1312, "771092": 1312, "226181": 1312, "1940": 1312, "207249": 1312, "532676": 1312, "4041": 1312, "896723": 1312, "22320": 1312, "131": 1312, "reflect": [1313, 1317, 1320], "script": 1313, "inform": [1313, 1316, 1318], "arbitrari": 1313, "becom": 1313, "reli": 1313, "averag": 1313, "stem": 1313, "henc": [1313, 1314, 1315, 1318], "approach": 1313, "might": 1313, "sdata": [1314, 1320], "exce": 1314, "nor": 1314, "pmax_": 1314, "s_": 1314, "pmax_4": 1314, "6000": [1314, 1315], "pmax_2": 1314, "pmax_0": 1314, "pmax_1": 1314, "pmax_3": 1314, "set_pmax": 1314, "thought": 1314, "sinc": [1314, 1317], "od": 1314, "furthermor": 1314, "somewher": 1314, "present": 1314, "influenc": 1314, "o1": 1314, "000000": [1314, 1316, 1317, 1318, 1320], "100622": 1314, "403": 1314, "460668": 1314, "230759": 1314, "160101": 1314, "836726": 1314, "448432": 1314, "102": 1314, "024826": 1314, "1771": 1314, "969501": 1314, "727": 1314, "422438": 1314, "109672": 1314, "440": 1314, "497551": 1314, "664896": 1314, "328": 1314, "099527": 1314, "346418": 1314, "256": 1314, "059846": 1314, "4562": 1314, "500000": 1314, "218395": 1314, "1934": 1314, "349917": 1314, "026105": 1314, "1202": 1314, "442515": 1314, "419438": 1314, "926": 1314, "179190": 1314, "069268": 1314, "768": 1314, "743105": 1314, "740422": 1314, "265493": 1314, "610241": 1314, "4829": 1314, "480538": 1314, "737726": 1314, "305147": 1314, "704317": 1314, "538785": 1314, "001123": 1314, "463783": 1314, "027022": 1314, "922952": 1314, "572237": 1314, "549852": 1314, "200276": 1314, "124457": 1314, "856675": 1314, "753726": 1314, "552823": 1314, "501976": 1314, "340518": 1314, "re": [1314, 1317], "o0": 1314, "edgecolor": 1314, "white": 1314, "ylorrd": 1314, "vmin": 1314, "vmax": 1314, "nanmax": 1314, "ylgn": 1314, "produc": [1314, 1318], "off": 1315, "persu": 1315, "east": 1315, "wd_min": 1315, "wd_max": 1315, "170": 1315, "191": 1315, "290": 1315, "110": 1315, "correspons": 1315, "fulfil": 1315, "ttype": 1315, "nrel": [1315, 1316, 1318], "d126": [1315, 1316, 1318], "h90": [1315, 1316, 1318], "sector_rul": 1315, "rews_min": 1315, "rews_max": 1315, "orient": 1315, "wa": [1315, 1317], "5001": 1315, "7000": 1315, "high": 1315, "westerli": 1315, "south": 1315, "summari": 1316, "skip": 1316, "own": 1316, "ask": 1316, "519e": 1316, "6e": 1316, "4e": 1316, "2e": 1316, "easili": 1316, "2518": 1316, "600000": 1316, "790000": 1316, "633459": 1316, "1557": 1316, "076947": 1316, "803665": 1316, "176627": 1316, "1290": 1316, "332498": 1316, "808234": 1316, "955794": 1316, "1167": 1316, "325199": 1316, "812210": 1316, "821354": 1316, "1106": 1316, "880886": 1316, "818932": 1316, "linspac": 1316, "15000": 1316, "npoint": 1316, "set_xlabel": 1316, "set_ylabel": 1316, "916": 1316, "principl": 1317, "backward": 1317, "trajectori": 1317, "hit": [1317, 1320], "fall": 1317, "necessari": 1317, "cross": [1317, 1320], "commun": 1317, "inlcud": 1317, "rcparam": 1317, "jshtml": 1317, "101": [1317, 1318, 1319], "202": 1317, "324e": 1317, "lim": 1317, "000e": 1317, "fail": 1317, "ok": 1317, "behaviour": 1317, "farm_df": [1317, 1320], "1532": 1317, "700000": [1317, 1318], "063574": 1317, "845": 1317, "738040": 1317, "693421": 1317, "640": 1317, "016335": 1317, "gridspec_kw": 1317, "height_ratio": 1317, "anom": 1317, "panel": 1317, "013": 1317, "fun": [1317, 1318], "303": 1317, "desir": [1318, 1320], "timeseries_8000": 1318, "test_farm_67": 1318, "further": 1318, "alwai": 1318, "598951": 1318, "307949": 1318, "067607": 1318, "522240": 1318, "728003": 1318, "299": 1318, "208883": 1318, "4868": 1318, "2712": 1318, "819583": 1318, "435150": 1318, "4752": 1318, "878044": 1318, "750000": 1318, "607321": 1318, "4828": 1318, "202797": 1318, "769528": 1318, "3234": 1318, "107125": 1318, "536000": 1318, "turbine_result": 1318, "nresult": 1318, "3067": 1318, "723397": 1318, "2778": 1318, "987770": 1318, "613545": 1318, "555798": 1318, "825445": 1318, "873257": 1318, "2531": 1318, "065918": 1318, "506213": 1318, "713413": 1318, "2702": 1318, "820210": 1318, "540564": 1318, "780747": 1318, "2739": 1318, "058250": 1318, "547812": 1318, "805992": 1318, "2593": 1318, "172270": 1318, "518634": 1318, "737070": 1318, "2625": 1318, "796799": 1318, "525159": 1318, "748704": 1318, "2591": 1318, "950988": 1318, "518390": 1318, "731988": 1318, "2864": 1318, "102273": 1318, "572820": 1318, "860799": 1318, "2571": 1318, "260829": 1318, "514252": 1318, "726062": 1318, "2633": 1318, "819847": 1318, "526764": 1318, "755245": 1318, "343933": 1318, "172137": 1318, "676705": 1318, "994150": 1318, "716189": 1318, "001980": 1318, "705491": 1318, "089536": 1318, "524245": 1318, "072262": 1318, "177": 1318, "205": 1318, "1558": 1318, "seen": 1318, "mean_eff": [1318, 1319], "faster": 1318, "overhead": 1318, "But": 1318, "extrem": 1318, "realli": 1318, "dai": 1318, "nmean": 1318, "launch": 1318, "localclust": 1318, "f1d59b2b": 1318, "tcp": 1318, "43649": 1318, "128": 1318, "251": 1318, "gib": 1318, "dashboard": 1318, "8787": 1318, "statu": 1318, "shut": 1318, "runtim": 1318, "localhost": 1318, "address": 1318, "plenti": 1318, "relat": 1319, "203": 1319, "686": 1319, "perfectli": 1319, "fine": 1319, "aim": 1320, "set_yawm": 1320, "want": 1320, "sensit": 1320, "continu": 1320, "downstream": 1320, "clearli": 1320, "frontal": 1320, "146549": 1320, "042770": 1320, "240": 1320, "co": 1320, "corect": 1320, "fact": 1320, "p_": 1320, "crespohernandez": 1320, "even": 1320, "though": 1320}, "objects": {"foxes.algorithms": [[0, 0, 1, "", "Downwind", "The downwind algorithm."], [8, 0, 1, "", "Iterative", "Iterative calculation of farm data."]], "foxes.algorithms.Downwind": [[1, 1, 1, "", "__init__", "Constructor."], [2, 1, 1, "", "calc_farm", "Calculate farm data."], [3, 1, 1, "", "calc_points", "Calculate data at a given set of points."], [4, 1, 1, "", "finalize", "Finalizes the algorithm."], [5, 1, 1, "", "get_model", "Get the algorithm specific model"], [6, 1, 1, "", "init_states", "Initialize states, if needed."], [7, 1, 1, "", "initialize", "Initializes the algorithm."]], "foxes.algorithms.Iterative": [[9, 1, 1, "", "__init__", "Constructor."], [10, 1, 1, "", "calc_farm", "Calculate farm data."], [11, 1, 1, "", "get_model", "Get the algorithm specific model"], [12, 2, 1, "", "iterations", "The current iteration number"]], "foxes.algorithms.downwind.models": [[13, 0, 1, "", "CalcOrder", "This model calculates the turbine evaluation order, via wake frames."], [17, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."], [22, 0, 1, "", "PointWakesCalculation", "This model calculates wake effects at points of interest."], [28, 0, 1, "", "SetAmbFarmResults", "This model copies farm data results to ambient results."], [32, 0, 1, "", "SetAmbPointResults", "This model copies point results to ambient results."]], "foxes.algorithms.downwind.models.CalcOrder": [[14, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [15, 1, 1, "", "initialize", "Initializes the model."], [16, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.FarmWakesCalculation": [[18, 1, 1, "", "__init__", "Constructor."], [19, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [20, 1, 1, "", "initialize", "Initializes the model."], [21, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.PointWakesCalculation": [[23, 1, 1, "", "__init__", "Constructor."], [24, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [25, 1, 1, "", "contribute_to_wake_deltas", "Contribute to wake deltas from source turbines"], [26, 1, 1, "", "initialize", "Initializes the model."], [27, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.SetAmbFarmResults": [[29, 1, 1, "", "__init__", "Constructor."], [30, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [31, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.SetAmbPointResults": [[33, 1, 1, "", "__init__", "Constructor."], [34, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [35, 1, 1, "", "initialize", "Initializes the model."], [36, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.algorithms.iterative": [[37, 0, 1, "", "ConvCrit", "Abstract base class for convergence criteria"], [41, 0, 1, "", "ConvCritList", "A list of convergence criteria"], [46, 0, 1, "", "ConvVarDelta", "Requires convergence of a selection of variables."], [50, 0, 1, "", "DefaultConv", "Default convergence criteria."]], "foxes.algorithms.iterative.ConvCrit": [[38, 1, 1, "", "__init__", "Constructor."], [39, 1, 1, "", "check_converged", "Check convergence criteria."], [40, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvCritList": [[42, 1, 1, "", "__init__", "Constructor."], [43, 1, 1, "", "add_crit", "Add a convergence criterion"], [44, 1, 1, "", "check_converged", "Check convergence criteria."], [45, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvVarDelta": [[47, 1, 1, "", "__init__", "Constructor."], [48, 1, 1, "", "check_converged", "Check convergence criteria."], [49, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.DefaultConv": [[51, 1, 1, "", "__init__", "Constructor."]], "foxes.algorithms.iterative.models": [[52, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."]], "foxes.algorithms.iterative.models.FarmWakesCalculation": [[53, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [54, 1, 1, "", "initialize", "Initializes the model."], [55, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.constants": [[194, 3, 1, "", "AMB_RPOINT_RESULTS", "Identified for ambient rotor point results"], [195, 4, 1, "", "DTYPE", "Default data type for floats"], [318, 3, 1, "", "FARM", "Wind farm identifier"], [319, 3, 1, "", "GW", "The unit giga watt"], [320, 4, 1, "", "ITYPE", "Default data type for int"], [370, 3, 1, "", "KAPPA", "The Van-Karman constant"], [371, 3, 1, "", "MW", "The unit mega watt"], [372, 3, 1, "", "POINT", "Point identifier"], [373, 3, 1, "", "POINTS", "Points identifier"], [374, 3, 1, "", "POP", "Population identifier"], [375, 3, 1, "", "P_UNITS", "Power unit factors relative to watts, key: unit str, value: factor"], [376, 3, 1, "", "RPOINT", "Rotor point identifier"], [377, 3, 1, "", "RPOINTS", "Rotor points identifier"], [378, 3, 1, "", "RWEIGHTS", "Rotor point weights identifier"], [379, 3, 1, "", "STATE", "States identifier"], [380, 3, 1, "", "STATES_SEL", "Identifier for states selection"], [381, 3, 1, "", "STATE_POINT", "Identifier for state-point dimensions"], [382, 3, 1, "", "STATE_SOURCE_TURBINE", "Identifier for the source turbines per state"], [383, 3, 1, "", "STATE_TURBINE", "Identifier for state-turbine dimensions"], [384, 3, 1, "", "TMODELS", "Turbine models identifier"], [385, 3, 1, "", "TMODEL_SELS", "Selected turbine models identifier"], [386, 3, 1, "", "TNAME", "Wind turbine name identifier"], [387, 3, 1, "", "TURBINE", "Wind turbine identifier"], [388, 3, 1, "", "TW", "The unit terra watt"], [389, 3, 1, "", "VALID", "Validity identifier"], [390, 3, 1, "", "VARS", "Variables identifier"], [391, 3, 1, "", "W", "The unit watt"], [392, 3, 1, "", "XYH", "The vector (x, y, height)"], [393, 3, 1, "", "kW", "The unit kilo watt"]], "foxes.constants.DTYPE": [[196, 4, 1, "", "T", "Scalar attribute identical to the corresponding array attribute."], [197, 1, 1, "", "__abs__", "abs(self)"], [198, 1, 1, "", "__add__", "Return self+value."], [199, 1, 1, "", "__and__", "Return self&value."], [200, 1, 1, "", "__array__", "sc.__array__(dtype) return 0-dim array from scalar with specified dtype"], [201, 4, 1, "", "__array_interface__", "Array protocol: Python side"], [202, 4, 1, "", "__array_priority__", "Array priority."], [203, 4, 1, "", "__array_struct__", "Array protocol: struct"], [204, 1, 1, "", "__array_wrap__", "sc.__array_wrap__(obj) return scalar from array"], [205, 1, 1, "", "__bool__", "True if self else False"], [206, 1, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [207, 1, 1, "", "__divmod__", "Return divmod(self, value)."], [208, 1, 1, "", "__eq__", "Return self==value."], [209, 1, 1, "", "__float__", "float(self)"], [210, 1, 1, "", "__floordiv__", "Return self//value."], [211, 1, 1, "", "__format__", "NumPy array scalar formatter"], [212, 1, 1, "", "__ge__", "Return self>=value."], [213, 1, 1, "", "__getitem__", "Return self[key]."], [214, 1, 1, "", "__gt__", "Return self>value."], [215, 1, 1, "", "__hash__", "Return hash(self)."], [216, 1, 1, "", "__int__", "int(self)"], [217, 1, 1, "", "__invert__", "~self"], [218, 1, 1, "", "__le__", "Return self<=value."], [219, 1, 1, "", "__lshift__", "Return self<<value."], [220, 1, 1, "", "__lt__", "Return self<value."], [221, 1, 1, "", "__mod__", "Return self%value."], [222, 1, 1, "", "__mul__", "Return self*value."], [223, 1, 1, "", "__ne__", "Return self!=value."], [224, 1, 1, "", "__neg__", "-self"], [225, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [226, 1, 1, "", "__or__", "Return self|value."], [227, 1, 1, "", "__pos__", "+self"], [228, 1, 1, "", "__pow__", "Return pow(self, value, mod)."], [229, 1, 1, "", "__radd__", "Return value+self."], [230, 1, 1, "", "__rand__", "Return value&self."], [231, 1, 1, "", "__rdivmod__", "Return divmod(value, self)."], [232, 1, 1, "", "__reduce__", "Helper for pickle."], [233, 1, 1, "", "__repr__", "Return repr(self)."], [234, 1, 1, "", "__rfloordiv__", "Return value//self."], [235, 1, 1, "", "__rlshift__", "Return value<<self."], [236, 1, 1, "", "__rmod__", "Return value%self."], [237, 1, 1, "", "__rmul__", "Return value*self."], [238, 1, 1, "", "__ror__", "Return value|self."], [239, 1, 1, "", "__rpow__", "Return pow(value, self, mod)."], [240, 1, 1, "", "__rrshift__", "Return value>>self."], [241, 1, 1, "", "__rshift__", "Return self>>value."], [242, 1, 1, "", "__rsub__", "Return value-self."], [243, 1, 1, "", "__rtruediv__", "Return value/self."], [244, 1, 1, "", "__rxor__", "Return value^self."], [245, 1, 1, "", "__sizeof__", "Size of object in memory, in bytes."], [246, 1, 1, "", "__str__", "Return str(self)."], [247, 1, 1, "", "__sub__", "Return self-value."], [248, 1, 1, "", "__truediv__", "Return self/value."], [249, 1, 1, "", "__xor__", "Return self^value."], [250, 1, 1, "", "all", "Scalar method identical to the corresponding array attribute."], [251, 1, 1, "", "any", "Scalar method identical to the corresponding array attribute."], [252, 1, 1, "", "argmax", "Scalar method identical to the corresponding array attribute."], [253, 1, 1, "", "argmin", "Scalar method identical to the corresponding array attribute."], [254, 1, 1, "", "argsort", "Scalar method identical to the corresponding array attribute."], [255, 1, 1, "", "as_integer_ratio", "Return a pair of integers, whose ratio is exactly equal to the original floating point number, and with a positive denominator. Raise OverflowError on infinities and a ValueError on NaNs."], [256, 1, 1, "", "astype", "Scalar method identical to the corresponding array attribute."], [257, 4, 1, "", "base", "Scalar attribute identical to the corresponding array attribute."], [258, 1, 1, "", "byteswap", "Scalar method identical to the corresponding array attribute."], [259, 1, 1, "", "choose", "Scalar method identical to the corresponding array attribute."], [260, 1, 1, "", "clip", "Scalar method identical to the corresponding array attribute."], [261, 1, 1, "", "compress", "Scalar method identical to the corresponding array attribute."], [262, 1, 1, "", "conj", ""], [263, 1, 1, "", "conjugate", "Scalar method identical to the corresponding array attribute."], [264, 1, 1, "", "copy", "Scalar method identical to the corresponding array attribute."], [265, 1, 1, "", "cumprod", "Scalar method identical to the corresponding array attribute."], [266, 1, 1, "", "cumsum", "Scalar method identical to the corresponding array attribute."], [267, 4, 1, "", "data", "Pointer to start of data."], [268, 1, 1, "", "diagonal", "Scalar method identical to the corresponding array attribute."], [269, 4, 1, "", "dtype", "Get array data-descriptor."], [270, 1, 1, "", "dump", "Scalar method identical to the corresponding array attribute."], [271, 1, 1, "", "dumps", "Scalar method identical to the corresponding array attribute."], [272, 1, 1, "", "fill", "Scalar method identical to the corresponding array attribute."], [273, 4, 1, "", "flags", "The integer value of flags."], [274, 4, 1, "", "flat", "A 1-D view of the scalar."], [275, 1, 1, "", "flatten", "Scalar method identical to the corresponding array attribute."], [276, 1, 1, "", "getfield", "Scalar method identical to the corresponding array attribute."], [277, 4, 1, "", "imag", "The imaginary part of the scalar."], [278, 1, 1, "", "is_integer", "Return True if the floating point number is finite with integral value, and False otherwise."], [279, 1, 1, "", "item", "Scalar method identical to the corresponding array attribute."], [280, 1, 1, "", "itemset", "Scalar method identical to the corresponding array attribute."], [281, 4, 1, "", "itemsize", "The length of one element in bytes."], [282, 1, 1, "", "max", "Scalar method identical to the corresponding array attribute."], [283, 1, 1, "", "mean", "Scalar method identical to the corresponding array attribute."], [284, 1, 1, "", "min", "Scalar method identical to the corresponding array attribute."], [285, 4, 1, "", "nbytes", "The length of the scalar in bytes."], [286, 4, 1, "", "ndim", "The number of array dimensions."], [287, 1, 1, "", "newbyteorder", "Return a new dtype with a different byte order."], [288, 1, 1, "", "nonzero", "Scalar method identical to the corresponding array attribute."], [289, 1, 1, "", "prod", "Scalar method identical to the corresponding array attribute."], [290, 1, 1, "", "ptp", "Scalar method identical to the corresponding array attribute."], [291, 1, 1, "", "put", "Scalar method identical to the corresponding array attribute."], [292, 1, 1, "", "ravel", "Scalar method identical to the corresponding array attribute."], [293, 4, 1, "", "real", "The real part of the scalar."], [294, 1, 1, "", "repeat", "Scalar method identical to the corresponding array attribute."], [295, 1, 1, "", "reshape", "Scalar method identical to the corresponding array attribute."], [296, 1, 1, "", "resize", "Scalar method identical to the corresponding array attribute."], [297, 1, 1, "", "round", "Scalar method identical to the corresponding array attribute."], [298, 1, 1, "", "searchsorted", "Scalar method identical to the corresponding array attribute."], [299, 1, 1, "", "setfield", "Scalar method identical to the corresponding array attribute."], [300, 1, 1, "", "setflags", "Scalar method identical to the corresponding array attribute."], [301, 4, 1, "", "shape", "Tuple of array dimensions."], [302, 4, 1, "", "size", "The number of elements in the gentype."], [303, 1, 1, "", "sort", "Scalar method identical to the corresponding array attribute."], [304, 1, 1, "", "squeeze", "Scalar method identical to the corresponding array attribute."], [305, 1, 1, "", "std", "Scalar method identical to the corresponding array attribute."], [306, 4, 1, "", "strides", "Tuple of bytes steps in each dimension."], [307, 1, 1, "", "sum", "Scalar method identical to the corresponding array attribute."], [308, 1, 1, "", "swapaxes", "Scalar method identical to the corresponding array attribute."], [309, 1, 1, "", "take", "Scalar method identical to the corresponding array attribute."], [310, 1, 1, "", "tobytes", ""], [311, 1, 1, "", "tofile", "Scalar method identical to the corresponding array attribute."], [312, 1, 1, "", "tolist", "Scalar method identical to the corresponding array attribute."], [313, 1, 1, "", "tostring", "Scalar method identical to the corresponding array attribute."], [314, 1, 1, "", "trace", "Scalar method identical to the corresponding array attribute."], [315, 1, 1, "", "transpose", "Scalar method identical to the corresponding array attribute."], [316, 1, 1, "", "var", "Scalar method identical to the corresponding array attribute."], [317, 1, 1, "", "view", "Scalar method identical to the corresponding array attribute."]], "foxes.constants.ITYPE": [[321, 1, 1, "", "__abs__", "abs(self)"], [322, 1, 1, "", "__add__", "Return self+value."], [323, 1, 1, "", "__and__", "Return self&value."], [324, 1, 1, "", "__bool__", "True if self else False"], [325, 1, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [326, 1, 1, "", "__divmod__", "Return divmod(self, value)."], [327, 1, 1, "", "__eq__", "Return self==value."], [328, 1, 1, "", "__float__", "float(self)"], [329, 1, 1, "", "__floordiv__", "Return self//value."], [330, 1, 1, "", "__ge__", "Return self>=value."], [331, 1, 1, "", "__gt__", "Return self>value."], [332, 1, 1, "", "__hash__", "Return hash(self)."], [333, 1, 1, "", "__index__", "Return self converted to an integer, if self is suitable for use as an index into a list."], [334, 1, 1, "", "__int__", "int(self)"], [335, 1, 1, "", "__invert__", "~self"], [336, 1, 1, "", "__le__", "Return self<=value."], [337, 1, 1, "", "__lshift__", "Return self<<value."], [338, 1, 1, "", "__lt__", "Return self<value."], [339, 1, 1, "", "__mod__", "Return self%value."], [340, 1, 1, "", "__mul__", "Return self*value."], [341, 1, 1, "", "__ne__", "Return self!=value."], [342, 1, 1, "", "__neg__", "-self"], [343, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [344, 1, 1, "", "__or__", "Return self|value."], [345, 1, 1, "", "__pos__", "+self"], [346, 1, 1, "", "__pow__", "Return pow(self, value, mod)."], [347, 1, 1, "", "__radd__", "Return value+self."], [348, 1, 1, "", "__rand__", "Return value&self."], [349, 1, 1, "", "__rdivmod__", "Return divmod(value, self)."], [350, 1, 1, "", "__repr__", "Return repr(self)."], [351, 1, 1, "", "__rfloordiv__", "Return value//self."], [352, 1, 1, "", "__rlshift__", "Return value<<self."], [353, 1, 1, "", "__rmod__", "Return value%self."], [354, 1, 1, "", "__rmul__", "Return value*self."], [355, 1, 1, "", "__ror__", "Return value|self."], [356, 1, 1, "", "__rpow__", "Return pow(value, self, mod)."], [357, 1, 1, "", "__rrshift__", "Return value>>self."], [358, 1, 1, "", "__rshift__", "Return self>>value."], [359, 1, 1, "", "__rsub__", "Return value-self."], [360, 1, 1, "", "__rtruediv__", "Return value/self."], [361, 1, 1, "", "__rxor__", "Return value^self."], [362, 1, 1, "", "__str__", "Return str(self)."], [363, 1, 1, "", "__sub__", "Return self-value."], [364, 1, 1, "", "__truediv__", "Return self/value."], [365, 1, 1, "", "__xor__", "Return self^value."], [366, 1, 1, "", "bit_count", "Computes the number of 1-bits in the absolute value of the input. Analogous to the builtin int.bit_count or popcount in C++."], [367, 4, 1, "", "denominator", "denominator of value (1)"], [368, 1, 1, "", "is_integer", "Return True if the number is finite with integral value."], [369, 4, 1, "", "numerator", "numerator of value (the value itself)"]], "foxes.core": [[56, 0, 1, "", "Algorithm", "Abstract base class for algorithms."], [70, 0, 1, "", "Data", "Container for data and meta data."], [78, 0, 1, "", "DataCalcModel", "Abstract base class for models with that run calculation on xarray Dataset data."], [81, 0, 1, "", "ExtendedStates", "States extended by point data models."], [91, 0, 1, "", "FarmController", "Analyses selected turbine models and handles their call."], [100, 0, 1, "", "FarmDataModel", "Abstract base class for models that modify farm data."], [105, 0, 1, "", "FarmDataModelList", "A list of farm data models."], [113, 0, 1, "", "FarmModel", "A FarmDataModel that operates on the farm level (in contrast to a TurbineModel, which allows application to a subset of turbines)."], [114, 0, 1, "", "Model", "Base class for all models."], [127, 0, 1, "", "PartialWakesModel", "Abstract base class for partial wakes models."], [135, 0, 1, "", "PointDataModel", "Abstract base class for models that modify point based data."], [139, 0, 1, "", "PointDataModelList", "A list of point data models."], [147, 0, 1, "", "RotorModel", "Abstract base class of rotor models."], [156, 0, 1, "", "States", "Abstract base class for states."], [161, 0, 1, "", "Turbine", "An individual wind turbine."], [165, 0, 1, "", "TurbineModel", "Abstract base class for turbine models."], [167, 0, 1, "", "TurbineType", "Abstract base class for turbine type models."], [169, 0, 1, "", "VerticalProfile", "Abstract base class for vertical profiles."], [173, 0, 1, "", "WakeFrame", "Abstract base class for wake frames."], [178, 0, 1, "", "WakeModel", "Abstract base class for wake models."], [182, 0, 1, "", "WakeSuperposition", "Abstract base class for wake superposition models."], [185, 0, 1, "", "WindFarm", "The wind farm."]], "foxes.core.Algorithm": [[57, 1, 1, "", "__init__", "Constructor."], [58, 1, 1, "", "chunked", ""], [59, 1, 1, "", "cleanup", "Cleanup after calculation"], [60, 1, 1, "", "finalize", "Finalizes the algorithm."], [61, 1, 1, "", "finalize_model", "Call the finalization routine of the model, if not to be kept."], [62, 1, 1, "", "get_models_data", "Creates xarray from model input data."], [63, 2, 1, "", "idata_mem", "The current idata memory"], [64, 1, 1, "", "initialize", "Initializes the algorithm."], [65, 1, 1, "", "new", "Run-time algorithm factory."], [66, 1, 1, "", "new_point_data", "Creates a point data xarray object, containing only points."], [67, 1, 1, "", "print", "Print function, based on verbosity."], [68, 1, 1, "", "update_idata", "Add to idata memory, optionally update and return idata object."], [69, 1, 1, "", "update_n_turbines", "Reset the number of turbines, according to self.farm"]], "foxes.core.Data": [[71, 1, 1, "", "__init__", "Constructor."], [72, 1, 1, "", "add", "Add data entry"], [73, 1, 1, "", "from_points", "Create from points"], [74, 2, 1, "", "n_points", "The number of points"], [75, 2, 1, "", "n_states", "The number of states"], [76, 2, 1, "", "n_turbines", "The number of turbines"], [77, 1, 1, "", "states_i0", "Get the state counter for first state in chunk"]], "foxes.core.DataCalcModel": [[79, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [80, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.ExtendedStates": [[82, 1, 1, "", "__init__", "Constructor."], [83, 1, 1, "", "append", "Add a model to the list"], [84, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [85, 1, 1, "", "finalize", "Finalizes the model."], [86, 1, 1, "", "index", "The index list"], [87, 1, 1, "", "initialize", "Initializes the model."], [88, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [89, 1, 1, "", "size", "The total number of states."], [90, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.FarmController": [[92, 1, 1, "", "__init__", "Constructor."], [93, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [94, 1, 1, "", "collect_models", "Analyze and gather turbine models, based on the turbines of the wind farm."], [95, 1, 1, "", "finalize", "Finalizes the model."], [96, 1, 1, "", "initialize", "Initializes the model."], [97, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [98, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [99, 1, 1, "", "set_pars", "Set parameters for a turbine model"]], "foxes.core.FarmDataModel": [[101, 1, 1, "", "__init__", "Constructor."], [102, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [103, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [104, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.FarmDataModelList": [[106, 1, 1, "", "__init__", "Constructor."], [107, 1, 1, "", "append", "Add a model to the list"], [108, 1, 1, "", "calculate", "The main model calculation."], [109, 1, 1, "", "finalize", "Finalizes the model."], [110, 1, 1, "", "initialize", "Initializes the model."], [111, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [112, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.core.Model": [[115, 1, 1, "", "__init__", "Constructor."], [116, 1, 1, "", "__repr__", "Return repr(self)."], [117, 1, 1, "", "data_to_store", "Adds data from mdata to the local store, intended for iterative runs."], [118, 1, 1, "", "finalize", "Finalizes the model."], [119, 1, 1, "", "from_data_or_store", "Get data from mdata or local store"], [120, 1, 1, "", "get_data", "Getter for a data entry in the model object or provided data sources"], [121, 1, 1, "", "initialize", "Initializes the model."], [122, 2, 1, "", "initialized", "Initialization flag."], [123, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [124, 2, 1, "", "model_id", "Unique id based on the model type."], [125, 1, 1, "", "reduce_states", "Modifies the given objects by selecting a subset of states."], [126, 1, 1, "", "var", "Creates a model specific variable name."]], "foxes.core.PartialWakesModel": [[128, 1, 1, "", "__init__", "Constructor."], [129, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [130, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [131, 1, 1, "", "initialize", "Initializes the model."], [132, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [133, 1, 1, "", "new", "Run-time partial wakes factory."], [134, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.core.PointDataModel": [[136, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [137, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [138, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.PointDataModelList": [[140, 1, 1, "", "__init__", "Constructor."], [141, 1, 1, "", "append", "Add a model to the list"], [142, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [143, 1, 1, "", "finalize", "Finalizes the model."], [144, 1, 1, "", "initialize", "Initializes the model."], [145, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [146, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.core.RotorModel": [[148, 1, 1, "", "__init__", "Constructor."], [149, 1, 1, "", "calculate", "Calculate ambient rotor effective results."], [150, 1, 1, "", "design_points", "The rotor model design points."], [151, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [152, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [153, 1, 1, "", "n_rotor_points", "The number of rotor points"], [154, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [155, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.core.States": [[157, 1, 1, "", "index", "The index list"], [158, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [159, 1, 1, "", "size", "The total number of states."], [160, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.Turbine": [[162, 1, 1, "", "__init__", "Constructor."], [163, 1, 1, "", "add_model", "Add a turbine model to the list."], [164, 1, 1, "", "insert_model", "Insert a turbine model into the list of models."]], "foxes.core.TurbineModel": [[166, 1, 1, "", "calculate", "The main model calculation."]], "foxes.core.TurbineType": [[168, 1, 1, "", "__init__", "Constructor."]], "foxes.core.VerticalProfile": [[170, 1, 1, "", "calculate", "Run the profile calculation."], [171, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."], [172, 1, 1, "", "new", "Run-time profile factory."]], "foxes.core.WakeFrame": [[174, 1, 1, "", "calc_centreline_integral", "Integrates variables along the centreline."], [175, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [176, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [177, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.core.WakeModel": [[179, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [180, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [181, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.core.WakeSuperposition": [[183, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [184, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.core.WindFarm": [[186, 1, 1, "", "__init__", "Constructor."], [187, 1, 1, "", "add_turbine", "Add a wind turbine to the list."], [188, 2, 1, "", "n_turbines", "The number of turbines in the wind farm"], [189, 2, 1, "", "turbine_names", "The list of names of all turbines"]], "foxes.data": [[190, 0, 1, "", "StaticData", "A DataBook filled with static data from this directory."], [192, 5, 1, "", "parse_Pct_file_name", "Parse basic turbine data from file name"], [193, 5, 1, "", "parse_Pct_two_files", "Parse basic turbine data from file names"]], "foxes.data.StaticData": [[191, 1, 1, "", "__init__", "Constructor."]], "foxes.input.farm_layout": [[441, 5, 1, "", "add_from_csv", "Add turbines to wind farm via csv input file."], [442, 5, 1, "", "add_from_df", "Add turbines to wind farm via pandas DataFrame."], [443, 5, 1, "", "add_from_file", "Add turbines from file."], [444, 5, 1, "", "add_from_json", "Add turbimes from a json file."], [445, 5, 1, "", "add_grid", "Add a regular grid of turbines."], [446, 5, 1, "", "add_row", "Add a single row of turbines."]], "foxes.input.states": [[447, 0, 1, "", "FieldDataNC", "Heterogeneous ambient states on a regular horizontal grid in NetCDF format."], [455, 0, 1, "", "MultiHeightStates", "States with multiple heights data per entry."], [466, 0, 1, "", "MultiHeightTimeseries", "Multi-height timeseries states data."], [468, 0, 1, "", "ScanWS", "A given list of wind speeds, all other variables are fixed."], [475, 0, 1, "", "SingleStateStates", "A single uniform state."], [482, 0, 1, "", "StatesTable", "States from a pandas.DataFrame or a pandas readable file."], [493, 0, 1, "", "Timeseries", "Timeseries states data."], [495, 5, 1, "", "create_random_abl_states", "Create random abl states."]], "foxes.input.states.FieldDataNC": [[448, 1, 1, "", "__init__", "Constructor."], [449, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [450, 1, 1, "", "index", "The index list"], [451, 1, 1, "", "initialize", "Initializes the model."], [452, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [453, 1, 1, "", "size", "The total number of states."], [454, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightStates": [[456, 4, 1, "", "RDICT", ""], [457, 1, 1, "", "__init__", "Constructor."], [458, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [459, 1, 1, "", "finalize", "Finalizes the model."], [460, 1, 1, "", "index", "The index list"], [461, 1, 1, "", "initialize", "Initializes the model."], [462, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [463, 1, 1, "", "reset", "Reset the states, optionally select states"], [464, 1, 1, "", "size", "The total number of states."], [465, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightTimeseries": [[467, 4, 1, "", "RDICT", ""]], "foxes.input.states.ScanWS": [[469, 1, 1, "", "__init__", "Constructor."], [470, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [471, 1, 1, "", "initialize", "Initializes the model."], [472, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [473, 1, 1, "", "size", "The total number of states."], [474, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.SingleStateStates": [[476, 1, 1, "", "__init__", "Constructor."], [477, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [478, 1, 1, "", "initialize", "Initializes the model."], [479, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [480, 1, 1, "", "size", "The total number of states."], [481, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.StatesTable": [[483, 4, 1, "", "RDICT", ""], [484, 1, 1, "", "__init__", "Constructor."], [485, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [486, 1, 1, "", "finalize", "Finalizes the model."], [487, 1, 1, "", "index", "The index list"], [488, 1, 1, "", "initialize", "Initializes the model."], [489, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [490, 1, 1, "", "reset", "Reset the states, optionally select states"], [491, 1, 1, "", "size", "The total number of states."], [492, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.Timeseries": [[494, 4, 1, "", "RDICT", ""]], "foxes.input.windio": [[496, 5, 1, "", "read_case", "Reads a WindIO case"]], "foxes.models.farm_controllers": [[497, 0, 1, "", "BasicFarmController", "The basic farm controller, running all turbine models in their order, without conditions."]], "foxes.models.farm_models": [[498, 0, 1, "", "Turbine2FarmModel", "Wrapper that promotes turbine models into farm models, simply by selecting all turbines."]], "foxes.models.farm_models.Turbine2FarmModel": [[499, 1, 1, "", "__init__", "Constructor."], [500, 1, 1, "", "__repr__", "Return repr(self)."], [501, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [502, 1, 1, "", "finalize", "Finalizes the model."], [503, 1, 1, "", "initialize", "Initializes the model."], [504, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.model_book": [[505, 0, 1, "", "Dict", "A slightly enhanced dictionary."], [508, 0, 1, "", "ModelBook", "Container for all kinds of models."]], "foxes.models.model_book.Dict": [[506, 1, 1, "", "__getitem__", "x.__getitem__(y) <==> x[y]"], [507, 1, 1, "", "__init__", "Constructor."]], "foxes.models.model_book.ModelBook": [[509, 1, 1, "", "__getitem__", ""], [510, 1, 1, "", "__init__", "Constructor."], [511, 1, 1, "", "finalize", "Finalizes the model."], [512, 1, 1, "", "print_toc", "Print the contents."]], "foxes.models.partial_wakes": [[513, 0, 1, "", "Mapped", "Partial wake models depending on the wake model (type)."], [521, 0, 1, "", "PartialAxiwake", "Partial wake calculation for axial wake models."], [530, 0, 1, "", "PartialDistSlicedWake", "Partial wakes for distance sliced wake models, making use of their structure."], [539, 0, 1, "", "PartialGrid", "Partial wakes on a grid rotor that may differ from the one in the algorithm."], [542, 0, 1, "", "PartialTopHat", "Partial wakes for top-hat models."], [550, 0, 1, "", "RotorPoints", "Partial wakes calculation directly by the rotor model."]], "foxes.models.partial_wakes.Mapped": [[514, 1, 1, "", "__init__", "Constructor."], [515, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [516, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [517, 1, 1, "", "finalize", "Finalizes the model."], [518, 1, 1, "", "initialize", "Initializes the model."], [519, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [520, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialAxiwake": [[522, 1, 1, "", "__init__", "Constructor."], [523, 1, 1, "", "__repr__", "Return repr(self)."], [524, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [525, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [526, 1, 1, "", "finalize", "Finalizes the model."], [527, 1, 1, "", "initialize", "Initializes the model."], [528, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [529, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialDistSlicedWake": [[531, 1, 1, "", "__init__", "Constructor."], [532, 1, 1, "", "__repr__", "Return repr(self)."], [533, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [534, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [535, 1, 1, "", "finalize", "Finalizes the model."], [536, 1, 1, "", "initialize", "Initializes the model."], [537, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [538, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialGrid": [[540, 1, 1, "", "__init__", "Constructor."], [541, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes.PartialTopHat": [[543, 1, 1, "", "__init__", "Constructor."], [544, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [545, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [546, 1, 1, "", "finalize", "Finalizes the model."], [547, 1, 1, "", "initialize", "Initializes the model."], [548, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [549, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.RotorPoints": [[551, 1, 1, "", "__init__", "Constructor."], [552, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [553, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [554, 1, 1, "", "get_wake_points", "Get the wake calculation points."], [555, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.point_models": [[556, 0, 1, "", "SetUniformData", "Set uniform data (can be state dependent)"], [561, 0, 1, "", "TKE2TI", "Calculates TI from TKE, using TI = sqrt( 3/2 * TKE) / WS"], [564, 0, 1, "", "WakeDeltas", "This point model simply subtracts ambient results from waked results."]], "foxes.models.point_models.SetUniformData": [[557, 1, 1, "", "__init__", "Constructor."], [558, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [559, 1, 1, "", "initialize", "Initializes the model."], [560, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.TKE2TI": [[562, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [563, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.WakeDeltas": [[565, 1, 1, "", "__init__", "Constructor."], [566, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [567, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.rotor_models": [[568, 0, 1, "", "CentreRotor", "The centre rotor model."], [574, 0, 1, "", "GridRotor", "The weighted regular grid rotor model, composed maximally of n x n points, possibly kicking out the outside points."]], "foxes.models.rotor_models.CentreRotor": [[569, 1, 1, "", "design_points", "The rotor model design points."], [570, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [571, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [572, 1, 1, "", "n_rotor_points", "The number of rotor points"], [573, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.GridRotor": [[575, 1, 1, "", "__init__", "Constructor."], [576, 1, 1, "", "__repr__", "Return repr(self)."], [577, 1, 1, "", "design_points", "The rotor model design points."], [578, 1, 1, "", "initialize", "Initializes the model."], [579, 1, 1, "", "n_rotor_points", "The number of rotor points"], [580, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.turbine_models": [[581, 0, 1, "", "Calculator", "Calculates variables based on given functions."], [585, 0, 1, "", "LookupTable", "Calculates the data by interpolation of lookup-table data"], [590, 0, 1, "", "PowerMask", "Invokes a maximal power value."], [596, 0, 1, "", "RotorCentreCalc", "Calculates data at the rotor centre"], [602, 0, 1, "", "SectorManagement", "Changes variables based on variable range conditions."], [607, 0, 1, "", "SetFarmVars", "Set farm data variables to given data."], [614, 0, 1, "", "SetXYHD", "Sets basic turbine data, from turbine object to farm data."], [618, 0, 1, "", "TableFactors", "Multiplies variables by factors from a two dimensional table."], [623, 0, 1, "", "Thrust2Ct", "Calculates ct from thrust force data."], [627, 0, 1, "", "YAW2YAWM", "Calculates delta yaw (i.e. YAWM) from absolute yaw (i.e. YAW)"], [630, 0, 1, "", "YAWM2YAW", "Calculates absolute yaw (i.e. YAWM) from delta yaw (i.e. YAWM)"], [633, 0, 1, "", "kTI", "Calculates the wake model parameter k as a linear function of TI."]], "foxes.models.turbine_models.Calculator": [[582, 1, 1, "", "__init__", "Constructor."], [583, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [584, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.LookupTable": [[586, 1, 1, "", "__init__", "Constructor."], [587, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [588, 1, 1, "", "initialize", "Initializes the model."], [589, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.PowerMask": [[591, 1, 1, "", "__init__", "Constructor."], [592, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [593, 1, 1, "", "initialize", "Initializes the model."], [594, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [595, 1, 1, "", "update_P_ct", ""]], "foxes.models.turbine_models.RotorCentreCalc": [[597, 1, 1, "", "__init__", "Constructor."], [598, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [599, 1, 1, "", "finalize", "Finalizes the model."], [600, 1, 1, "", "initialize", "Initializes the model."], [601, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SectorManagement": [[603, 1, 1, "", "__init__", "Constructor."], [604, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [605, 1, 1, "", "initialize", "Initializes the model."], [606, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SetFarmVars": [[608, 1, 1, "", "__init__", "Constructor."], [609, 1, 1, "", "add_var", "Add data for a variable."], [610, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [611, 1, 1, "", "initialize", "Initializes the model."], [612, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [613, 1, 1, "", "reset", "Remove all variables."]], "foxes.models.turbine_models.SetXYHD": [[615, 1, 1, "", "__init__", "Constructor."], [616, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [617, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.TableFactors": [[619, 1, 1, "", "__init__", "Constructor."], [620, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [621, 1, 1, "", "initialize", "Initializes the model."], [622, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.Thrust2Ct": [[624, 1, 1, "", "__init__", "Constructor."], [625, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [626, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAW2YAWM": [[628, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [629, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAWM2YAW": [[631, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [632, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.kTI": [[634, 1, 1, "", "__init__", "Constructor."], [635, 1, 1, "", "__repr__", "Return repr(self)."], [636, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [637, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types": [[638, 0, 1, "", "CpCtFile", "Calculate power and ct by interpolating from cp-ct-curve data file (or pandas DataFrame)."], [640, 0, 1, "", "CpCtFromTwo", "Calculate power and ct by interpolating cp and ct from two files (or two pandas DataFrames)."], [642, 0, 1, "", "NullType", "A turbine type that does not compute any data."], [645, 0, 1, "", "PCtFile", "Calculate power and ct by interpolating from power-ct-curve data file (or pandas DataFrame)."], [651, 0, 1, "", "PCtFromTwo", "Calculate power and ct by interpolating from power curve and ct curve data files."], [657, 0, 1, "", "WsRho2PCtFromTwo", "Calculate air density dependent power and ct values, as given by two individual files."]], "foxes.models.turbine_types.CpCtFile": [[639, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.CpCtFromTwo": [[641, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.NullType": [[643, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [644, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFile": [[646, 1, 1, "", "__init__", "Constructor."], [647, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [648, 1, 1, "", "finalize", "Finalizes the model."], [649, 1, 1, "", "initialize", "Initializes the model."], [650, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFromTwo": [[652, 1, 1, "", "__init__", "Constructor."], [653, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [654, 1, 1, "", "finalize", "Finalizes the model."], [655, 1, 1, "", "initialize", "Initializes the model."], [656, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsRho2PCtFromTwo": [[658, 1, 1, "", "__init__", "Constructor."], [659, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [660, 1, 1, "", "finalize", "Finalizes the model."], [661, 1, 1, "", "initialize", "Initializes the model."], [662, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.vertical_profiles": [[663, 0, 1, "", "ABLLogNeutralWsProfile", "The neutral ABL wind speed log profile."], [666, 0, 1, "", "ABLLogStableWsProfile", "The stable ABL wind speed log profile."], [669, 0, 1, "", "ABLLogUnstableWsProfile", "The unstable ABL wind speed log profile."], [672, 0, 1, "", "ABLLogWsProfile", "The neutral/stable/unstable ABL wind speed log profile."], [675, 0, 1, "", "ShearedProfile", "A wind shear profile, based on a shear exponent."], [678, 0, 1, "", "UniformProfile", "A profile with uniform values."]], "foxes.models.vertical_profiles.ABLLogNeutralWsProfile": [[664, 1, 1, "", "calculate", "Run the profile calculation."], [665, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogStableWsProfile": [[667, 1, 1, "", "calculate", "Run the profile calculation."], [668, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogUnstableWsProfile": [[670, 1, 1, "", "calculate", "Run the profile calculation."], [671, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogWsProfile": [[673, 1, 1, "", "calculate", "Run the profile calculation."], [674, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ShearedProfile": [[676, 1, 1, "", "calculate", "Run the profile calculation."], [677, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.UniformProfile": [[679, 1, 1, "", "__init__", "Constructor"], [680, 1, 1, "", "calculate", "Run the profile calculation."], [681, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.wake_frames": [[682, 0, 1, "", "FarmOrder", "Invokes turbine ordering as defined by the wind farm."], [689, 0, 1, "", "RotorWD", "Align the first axis for each rotor with the local normalized wind direction."], [694, 0, 1, "", "Streamlines", "Streamline following wakes"], [701, 0, 1, "", "Timelines", "Dynamic wakes for spatially uniform timeseries states."], [707, 0, 1, "", "YawedWakes", "Bend the wakes for yawed turbines."]], "foxes.models.wake_frames.FarmOrder": [[683, 1, 1, "", "__init__", "Constructor."], [684, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [685, 1, 1, "", "finalize", "Finalizes the model."], [686, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [687, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [688, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.RotorWD": [[690, 1, 1, "", "__init__", "Constructor."], [691, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [692, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [693, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.models.wake_frames.Streamlines": [[695, 1, 1, "", "__init__", "Constructor."], [696, 1, 1, "", "__repr__", "Return repr(self)."], [697, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [698, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [699, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [700, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.Timelines": [[702, 1, 1, "", "__init__", "Constructor."], [703, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [704, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [705, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [706, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.YawedWakes": [[708, 1, 1, "", "__init__", "Constructor."], [709, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [710, 1, 1, "", "finalize", "Finalizes the model."], [711, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [712, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [713, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_models": [[714, 0, 1, "", "AxisymmetricWakeModel", "Abstract base class for wake models that depend on (x, r) separately."], [717, 0, 1, "", "DistSlicedWakeModel", "Abstract base class for wake models for which the x-denpendency can be separated from the yz-dependency."], [725, 0, 1, "", "GaussianWakeModel", "Abstract base class for Gaussian wake models."], [728, 0, 1, "", "TopHatWakeModel", "Abstract base class for top-hat wake models."]], "foxes.models.wake_models.AxisymmetricWakeModel": [[715, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."], [716, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."]], "foxes.models.wake_models.DistSlicedWakeModel": [[718, 1, 1, "", "__init__", "Constructor."], [719, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [720, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [721, 1, 1, "", "finalize", "Finalizes the model."], [722, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [723, 1, 1, "", "initialize", "Initializes the model."], [724, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"]], "foxes.models.wake_models.GaussianWakeModel": [[726, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [727, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.TopHatWakeModel": [[729, 1, 1, "", "__init__", "Constructor."], [730, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [731, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [732, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.ti": [[733, 0, 1, "", "CrespoHernandezTIWake", "The Crespo and Hernandez TI empirical correlation"], [739, 0, 1, "", "IECTIWake", "The TI wake model from IEC-64100-1-2005-8 (2005):"]], "foxes.models.wake_models.ti.CrespoHernandezTIWake": [[734, 1, 1, "", "__init__", "Constructor."], [735, 1, 1, "", "__repr__", "Return repr(self)."], [736, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [737, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [738, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.ti.IECTIWake": [[740, 1, 1, "", "__init__", "Constructor."], [741, 1, 1, "", "__repr__", "Return repr(self)."], [742, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [743, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [744, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind": [[745, 0, 1, "", "BastankhahWake", "The Bastankhah wake model"], [750, 0, 1, "", "JensenWake", "The Jensen wake model."], [756, 0, 1, "", "PorteAgelModel", "Common calculations for the wake model and the wake frame, such that code repetitions can be avoided."], [777, 0, 1, "", "PorteAgelWake", "The Bastankhah PorteAgel wake model"], [782, 0, 1, "", "TurbOParkWake", "The TurbOPark wake model"], [787, 0, 1, "", "TurbOParkWakeIX", "The generalized TurbOPark wake model, integrating TI over the streamline."]], "foxes.models.wake_models.wind.BastankhahWake": [[746, 1, 1, "", "__init__", "Constructor."], [747, 1, 1, "", "__repr__", "Return repr(self)."], [748, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [749, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.JensenWake": [[751, 1, 1, "", "__init__", "Constructor."], [752, 1, 1, "", "__repr__", "Return repr(self)."], [753, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [754, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [755, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.PorteAgelModel": [[757, 4, 1, "", "AMPL_FAR", ""], [758, 4, 1, "", "AMPL_NEAR", ""], [759, 4, 1, "", "CHECK", ""], [760, 4, 1, "", "DELTA_FAR", ""], [761, 4, 1, "", "DELTA_NEAR", ""], [762, 4, 1, "", "MDATA_KEY", ""], [763, 4, 1, "", "NEAR", ""], [764, 4, 1, "", "PARS", ""], [765, 4, 1, "", "R_PC", ""], [766, 4, 1, "", "R_PC_S", ""], [767, 4, 1, "", "SIGMA_Y_FAR", ""], [768, 4, 1, "", "SIGMA_Z_FAR", ""], [769, 4, 1, "", "SP_SEL", ""], [770, 4, 1, "", "X0", ""], [771, 1, 1, "", "__init__", "Constructor."], [772, 1, 1, "", "calc_data", "Calculate common model data, store it in mdata."], [773, 1, 1, "", "clean", "Clean all data"], [774, 1, 1, "", "get_data", "Return data entry"], [775, 1, 1, "", "has_data", "Check if data exists"], [776, 2, 1, "", "pars", "Dictionary of the model parameters"]], "foxes.models.wake_models.wind.PorteAgelWake": [[778, 1, 1, "", "__init__", "Constructor."], [779, 1, 1, "", "__repr__", "Return repr(self)."], [780, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [781, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWake": [[783, 1, 1, "", "__init__", "Constructor."], [784, 1, 1, "", "__repr__", "Return repr(self)."], [785, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [786, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWakeIX": [[788, 1, 1, "", "__init__", "Constructor."], [789, 1, 1, "", "__repr__", "Return repr(self)."], [790, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [791, 1, 1, "", "finalize", "Finalizes the model."], [792, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_superpositions": [[793, 0, 1, "", "LinearSuperposition", "Linear supersposition of wake model results, optionally rescaled."], [798, 0, 1, "", "MaxSuperposition", "Maximum supersposition of wake model results, optionally rescaled."], [804, 0, 1, "", "ProductSuperposition", "Product wind wake superposition."], [808, 0, 1, "", "QuadraticSuperposition", "Quadratic supersposition of wake model results, optionally rescaled."], [814, 0, 1, "", "TISuperposition", "A collection of superpositions for TI."]], "foxes.models.wake_superpositions.LinearSuperposition": [[794, 1, 1, "", "__init__", "Constructor."], [795, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [796, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [797, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.MaxSuperposition": [[799, 1, 1, "", "__init__", "Constructor."], [800, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [801, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [802, 1, 1, "", "initialize", "Initializes the model."], [803, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.ProductSuperposition": [[805, 1, 1, "", "__init__", "Constructor."], [806, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [807, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.QuadraticSuperposition": [[809, 1, 1, "", "__init__", "Constructor."], [810, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [811, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [812, 1, 1, "", "initialize", "Initializes the model."], [813, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.TISuperposition": [[815, 1, 1, "", "__init__", "Constructor."], [816, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [817, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.opt.constraints": [[959, 0, 1, "", "AreaGeometryConstraint", "Constrains turbine positions to the inside of a given area geometry."], [980, 0, 1, "", "FarmBoundaryConstraint", "Constrains turbine positions to the inside of the wind farm boundary"], [982, 0, 1, "", "MinDistConstraint", "Turbines must keep at least a minimal spatial distance."]], "foxes.opt.constraints.AreaGeometryConstraint": [[960, 1, 1, "", "__init__", "Constructor."], [961, 1, 1, "", "__str__", "Get info string"], [962, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [963, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [964, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [965, 2, 1, "", "component_names", "The names of the components"], [966, 1, 1, "", "finalize", "Finalize the object."], [967, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [968, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [969, 1, 1, "", "initialize", "Initialize the object."], [970, 2, 1, "", "initialized", "Flag for finished initialization"], [971, 1, 1, "", "n_components", "Returns the number of components of the function."], [972, 2, 1, "", "n_vars_float", "The number of float variables"], [973, 2, 1, "", "n_vars_int", "The number of int variables"], [974, 1, 1, "", "rename_vars_float", "Rename float variables."], [975, 1, 1, "", "rename_vars_int", "Rename integer variables."], [976, 2, 1, "", "var_names_float", "The names of the float variables"], [977, 2, 1, "", "var_names_int", "The names of the integer variables"], [978, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [979, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "foxes.opt.constraints.FarmBoundaryConstraint": [[981, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.constraints.MinDistConstraint": [[983, 1, 1, "", "__init__", "Constructor."], [984, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [985, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [986, 1, 1, "", "initialize", "Initialize the constaint."], [987, 1, 1, "", "n_components", "Returns the number of components of the function."], [988, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core": [[989, 0, 1, "", "FarmConstraint", "Abstract base class for foxes wind farm optimization constraints."], [1000, 0, 1, "", "FarmObjective", "Abstract base class for foxes wind farm objective functions."], [1007, 0, 1, "", "FarmOptProblem", "Abstract base class of wind farm optimization problems."], [1049, 0, 1, "", "FarmVarsProblem", "Abstract base class for models that optimize farm variables."], [1055, 0, 1, "", "PopStates", "Helper class for vectorized opt population calculation, via artificial states of length n_pop times n_states."]], "foxes.opt.core.FarmConstraint": [[990, 1, 1, "", "__init__", "Constructor."], [991, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [992, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [993, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [994, 2, 1, "", "farm", "The wind farm"], [995, 1, 1, "", "n_components", "Returns the number of components of the function."], [996, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [997, 1, 1, "", "print_models", "Prints all model names."], [998, 2, 1, "", "sel_turbines", "The list of selected turbines"], [999, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core.FarmObjective": [[1001, 1, 1, "", "__init__", "Constraints."], [1002, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1003, 2, 1, "", "farm", "The wind farm"], [1004, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1005, 1, 1, "", "print_models", "Prints all model names."], [1006, 2, 1, "", "sel_turbines", "The list of selected turbines"]], "foxes.opt.core.FarmOptProblem": [[1008, 4, 1, "", "INT_INF", ""], [1009, 1, 1, "", "__init__", "Constructor."], [1010, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [1011, 1, 1, "", "add_objective", "Add an objective to the problem."], [1012, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1013, 2, 1, "", "all_turbines", "Flag for all turbines optimization"], [1014, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1015, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1016, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [1017, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [1018, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [1019, 2, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [1020, 2, 1, "", "counter", "The current value of the application counter"], [1021, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [1022, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [1023, 2, 1, "", "farm", "The wind farm"], [1024, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1025, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [1026, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [1027, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1028, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [1029, 1, 1, "", "initialize", "Initialize the object."], [1030, 2, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [1031, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1032, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1033, 2, 1, "", "maximize_objs", "Flags for objective maximization"], [1034, 2, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [1035, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1036, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1037, 2, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [1038, 2, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [1039, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1040, 2, 1, "", "n_vars_float", "The number of float variables"], [1041, 2, 1, "", "n_vars_int", "The number of int variables"], [1042, 1, 1, "", "parse_tvar", "Parse foxes variable name and turbine index from turbine variable"], [1043, 2, 1, "", "sel_turbines", "The selected turbines"], [1044, 1, 1, "", "tvar", "Gets turbine variable name"], [1045, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1046, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1047, 1, 1, "", "var_names_float", "The names of float variables."], [1048, 1, 1, "", "var_names_int", "The names of integer variables."]], "foxes.opt.core.FarmVarsProblem": [[1050, 1, 1, "", "initialize", "Initialize the object."], [1051, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1052, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1053, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1054, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."]], "foxes.opt.core.PopStates": [[1056, 1, 1, "", "__init__", "Constructor."], [1057, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [1058, 1, 1, "", "initialize", "Initializes the model."], [1059, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [1060, 1, 1, "", "size", "The total number of states."], [1061, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.opt.objectives": [[1062, 0, 1, "", "FarmVarObjective", "Objectives based on farm variables."], [1071, 0, 1, "", "MaxFarmPower", "Maximize the mean wind farm power"], [1073, 0, 1, "", "MaxNTurbines", "Maximizes the number of turrbines."], [1079, 0, 1, "", "MinimalMaxTI", "Minimize the maximal turbine TI"]], "foxes.opt.objectives.FarmVarObjective": [[1063, 1, 1, "", "__init__", "Constructor."], [1064, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1065, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1066, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1067, 1, 1, "", "initialize", "Initialize the object."], [1068, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1069, 1, 1, "", "n_components", "Returns the number of components of the function."], [1070, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.objectives.MaxFarmPower": [[1072, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.objectives.MaxNTurbines": [[1074, 1, 1, "", "__init__", "Constructor."], [1075, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1076, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1077, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1078, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.objectives.MinimalMaxTI": [[1080, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.problems": [[1081, 0, 1, "", "OptFarmVars", "Optimize a selection of farm variables."]], "foxes.opt.problems.OptFarmVars": [[1082, 1, 1, "", "__init__", "Constructor."], [1083, 1, 1, "", "add_var", "Add a variable."], [1084, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1085, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1086, 1, 1, "", "initialize", "Initialize the object."], [1087, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1088, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1089, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1090, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1091, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1092, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1093, 1, 1, "", "var_names_float", "The names of float variables."], [1094, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout": [[1220, 0, 1, "", "FarmLayoutOptProblem", "The turbine positioning optimization problem"], [1229, 0, 1, "", "RegGridsLayoutOptProblem", "Places turbines on several regular grids and optimizes their parameters."], [1245, 0, 1, "", "RegularLayoutOptProblem", "Places turbines on a regular grid and optimizes its parameters."]], "foxes.opt.problems.layout.FarmLayoutOptProblem": [[1221, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1222, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1223, 1, 1, "", "initialize", "Initialize the object."], [1224, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1225, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1226, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1227, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1228, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.RegGridsLayoutOptProblem": [[1230, 1, 1, "", "__init__", "Constraints."], [1231, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1232, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1233, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1234, 1, 1, "", "initialize", "Initialize the object."], [1235, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1236, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1237, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1238, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1239, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1240, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1241, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1242, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1243, 1, 1, "", "var_names_float", "The names of float variables."], [1244, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.RegularLayoutOptProblem": [[1246, 4, 1, "", "ANGLE", ""], [1247, 4, 1, "", "OFFSET_X", ""], [1248, 4, 1, "", "OFFSET_Y", ""], [1249, 4, 1, "", "SPACING_X", ""], [1250, 4, 1, "", "SPACING_Y", ""], [1251, 1, 1, "", "__init__", "Constructor."], [1252, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1253, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1254, 1, 1, "", "initialize", "Initialize the object."], [1255, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1256, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1257, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1258, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1259, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts": [[1176, 0, 1, "", "GeomLayout", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes)."], [1186, 0, 1, "", "GeomLayoutGridded", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes), on a fixes background point grid."], [1196, 0, 1, "", "GeomRegGrid", "A regular grid within a boundary geometry."], [1206, 0, 1, "", "GeomRegGrids", "A regular grid within a boundary geometry."]], "foxes.opt.problems.layout.geom_layouts.GeomLayout": [[1177, 1, 1, "", "__init__", "Constructor."], [1178, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1179, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1180, 1, 1, "", "get_fig", "Return plotly figure axis."], [1181, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1182, 1, 1, "", "initialize", "Initialize the object."], [1183, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1184, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1185, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded": [[1187, 1, 1, "", "__init__", "Constructor."], [1188, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1189, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1190, 1, 1, "", "get_fig", "Return plotly figure axis."], [1191, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1192, 1, 1, "", "initialize", "Initialize the object."], [1193, 1, 1, "", "max_values_int", "The maximal values of the int variables."], [1194, 1, 1, "", "min_values_int", "The minimal values of the int variables."], [1195, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrid": [[1197, 1, 1, "", "__init__", "Constructor."], [1198, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1199, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1200, 1, 1, "", "get_fig", "Return plotly figure axis."], [1201, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1202, 1, 1, "", "initialize", "Initialize the object."], [1203, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1204, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1205, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrids": [[1207, 1, 1, "", "__init__", "Constructor."], [1208, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1209, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1210, 1, 1, "", "get_fig", "Return plotly figure axis."], [1211, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1212, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1213, 1, 1, "", "initialize", "Initialize the object."], [1214, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1215, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1216, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1217, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1218, 1, 1, "", "var_names_float", "The names of float variables."], [1219, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1095, 0, 1, "", "Boundary", "Boundary constraint for purely geometrical layouts problems."], [1100, 0, 1, "", "CFixN", "Fixed number of turbines constraint for purely geometrical layouts problems."], [1105, 0, 1, "", "CMaxN", "Maximal number of turbines constraint for purely geometrical layouts problems."], [1110, 0, 1, "", "CMinDensity", "Minimal turbine density constraint for purely geometrical layouts problems."], [1116, 0, 1, "", "CMinN", "Minimal number of turbines constraint for purely geometrical layouts problems."], [1121, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [1126, 0, 1, "", "MinDist", "Minimal distance constraint for purely geometrical layouts problems."], [1132, 0, 1, "", "Valid", "Validity constraint for purely geometrical layouts problems."], [1137, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.constraints.Boundary": [[1096, 1, 1, "", "__init__", "Constructor."], [1097, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1098, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1099, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CFixN": [[1101, 1, 1, "", "__init__", "Constructor."], [1102, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1103, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1104, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN": [[1106, 1, 1, "", "__init__", "Constructor."], [1107, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1108, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1109, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity": [[1111, 1, 1, "", "__init__", "Constructor."], [1112, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1113, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1114, 1, 1, "", "initialize", "Initialize the object."], [1115, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinN": [[1117, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1118, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1119, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1120, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Constraint": [[1122, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1123, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [1124, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [1125, 1, 1, "", "get_bounds", "Returns the bounds for all components."]], "foxes.opt.problems.layout.geom_layouts.constraints.MinDist": [[1127, 1, 1, "", "__init__", "Constructor."], [1128, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1129, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1130, 1, 1, "", "initialize", "Initialize the constaint."], [1131, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Valid": [[1133, 1, 1, "", "__init__", "Constructor."], [1134, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1135, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1136, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1138, 0, 1, "", "MaxDensity", "Maximal turbine density objective for purely geometrical layouts problems."], [1145, 0, 1, "", "MaxGridSpacing", "Maximal grid spacing objective for purely geometrical layouts problems."], [1151, 0, 1, "", "MeMiMaDist", "Mean-min-max distance objective for purely geometrical layouts problems."], [1157, 0, 1, "", "OFixN", "Fixed number of turbines objective for purely geometrical layouts problems."], [1163, 0, 1, "", "OMaxN", "Maximal number of turbines objective for purely geometrical layouts problems."], [1169, 0, 1, "", "OMinN", "Minimal number of turbines objective for purely geometrical layouts problems."], [1172, 0, 1, "", "Objective", "Abstract base class for objective functions."], [1175, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity": [[1139, 1, 1, "", "__init__", "Constructor."], [1140, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1141, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1142, 1, 1, "", "initialize", "Initialize the object."], [1143, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1144, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing": [[1146, 1, 1, "", "__init__", "Constructor."], [1147, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1148, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1149, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1150, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist": [[1152, 1, 1, "", "__init__", "Constructor."], [1153, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1154, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1155, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1156, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OFixN": [[1158, 1, 1, "", "__init__", "Constructor."], [1159, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1160, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1161, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1162, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN": [[1164, 1, 1, "", "__init__", "Constructor."], [1165, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1166, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1167, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1168, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMinN": [[1170, 1, 1, "", "__init__", "Constructor."], [1171, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.opt.problems.layout.geom_layouts.objectives.Objective": [[1173, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1174, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.output": [[818, 0, 1, "", "Animator", "Creates an animation from generators that yield lists of artists."], [823, 0, 1, "", "FarmLayoutOutput", "Plot the farm layout"], [832, 0, 1, "", "FarmResultsEval", "Evaluates farm results data."], [852, 0, 1, "", "FlowPlots2D", "Class for horizontal or vertical 2D flow plots"], [860, 0, 1, "", "Output", "Base class for foxes output."], [864, 0, 1, "", "ResultsWriter", "Writes results farm data to file."], [867, 0, 1, "", "RosePlotOutput", "Class for rose plot creation"], [873, 0, 1, "", "StateTurbineMap", "Creates heat maps with turbines on the one and states on the other axis."], [876, 0, 1, "", "StatesRosePlotOutput", "Class for rose plot creation directly from states"], [878, 0, 1, "", "TurbineTypeCurves", "Creates power and ct curves for turbine types, optionally including derating/boost."]], "foxes.output.Animator": [[819, 1, 1, "", "__init__", "Constructor."], [820, 1, 1, "", "add_generator", "Add a generator."], [821, 1, 1, "", "animate", "Create the animation"], [822, 2, 1, "", "generators", "The artist generators"]], "foxes.output.FarmLayoutOutput": [[824, 1, 1, "", "__init__", "Constructor."], [825, 1, 1, "", "get_figure", "Creates farm layout figure."], [826, 1, 1, "", "get_layout_data", "Returns wind farm layout."], [827, 1, 1, "", "get_layout_dict", "Returns wind farm layout."], [828, 1, 1, "", "write_csv", "Writes csv layout file."], [829, 1, 1, "", "write_json", "Writes xyh layout file."], [830, 1, 1, "", "write_plot", "Writes the layout plot to file."], [831, 1, 1, "", "write_xyh", "Writes xyh layout file."]], "foxes.output.FarmResultsEval": [[833, 1, 1, "", "__init__", "Constructor."], [834, 1, 1, "", "add_capacity", "Adds capacity to the farm results"], [835, 1, 1, "", "add_efficiency", "Adds efficiency to the farm results"], [836, 1, 1, "", "calc_farm_efficiency", "Calculates farm efficiency"], [837, 1, 1, "", "calc_farm_mean", "Calculates the mean over states and turbines."], [838, 1, 1, "", "calc_farm_sum", "Calculates the sum over states and turbines."], [839, 1, 1, "", "calc_farm_yield", "Calculates yield, P75 and P90 at the farm level"], [840, 1, 1, "", "calc_mean_farm_power", "Calculates the mean total farm power."], [841, 1, 1, "", "calc_states_mean", "Calculates the mean wrt states."], [842, 1, 1, "", "calc_states_std", "Calculates the standard deviation wrt states."], [843, 1, 1, "", "calc_states_sum", "Calculates the sum wrt states."], [844, 1, 1, "", "calc_turbine_mean", "Calculates the mean wrt turbines."], [845, 1, 1, "", "calc_turbine_sum", "Calculates the sum wrt turbines."], [846, 1, 1, "", "calc_turbine_yield", "Calculates the yield per turbine"], [847, 1, 1, "", "gen_stdata", "Generates state-turbine data, intended to be used in animations"], [848, 1, 1, "", "reduce_all", "Reduces states and turbine dimension by some operation"], [849, 1, 1, "", "reduce_states", "Reduces the states dimension by some operation"], [850, 1, 1, "", "reduce_turbines", "Reduces the turbine dimension by some operation"], [851, 1, 1, "", "weinsum", "Calculates Einstein sum, adding weights as last argument to the given fields."]], "foxes.output.FlowPlots2D": [[853, 1, 1, "", "__init__", "Constructor."], [854, 1, 1, "", "gen_states_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [855, 1, 1, "", "gen_states_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [856, 1, 1, "", "gen_states_fig_yz", "Generates 2D farm flow figure in a plane."], [857, 1, 1, "", "get_mean_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [858, 1, 1, "", "get_mean_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [859, 1, 1, "", "get_mean_fig_yz", "Generates 2D farm flow figure in a vertical yz-plane."]], "foxes.output.Output": [[861, 1, 1, "", "new", "Run-time output model factory."], [862, 1, 1, "", "print_models", "Prints all model names."], [863, 1, 1, "", "write", "Writes data to file via pandas."]], "foxes.output.ResultsWriter": [[865, 1, 1, "", "__init__", "Constructor."], [866, 1, 1, "", "write_csv", "Writes a csv file"]], "foxes.output.RosePlotOutput": [[868, 1, 1, "", "__init__", "Constructor."], [869, 1, 1, "", "get_data", "Get pandas DataFrame with wind rose data."], [870, 1, 1, "", "get_data_info", "Returns default description for a variable."], [871, 1, 1, "", "get_figure", "Creates px figure object"], [872, 1, 1, "", "write_figure", "Write rose plot to file"]], "foxes.output.StateTurbineMap": [[874, 1, 1, "", "__init__", "Constructor."], [875, 1, 1, "", "plot_map", "Plot the heat map for the selected variable."]], "foxes.output.StatesRosePlotOutput": [[877, 1, 1, "", "__init__", "Constructor."]], "foxes.output.TurbineTypeCurves": [[879, 1, 1, "", "__init__", "Constructor."], [880, 1, 1, "", "plot_curves", "Plot the power or ct curve."]], "foxes.utils": [[881, 0, 1, "", "DataBook", "Container class for file paths, either directly given or as static data within a package."], [889, 0, 1, "", "PandasFileHelper", "This class helps reading and writing data to files via pandas."], [909, 5, 1, "", "all_subclasses", "Searches all classes derived from some base class."], [910, 5, 1, "", "cubic_roots", "Calculate real roots of polynomials of degree 3."], [911, 5, 1, "", "delta_wd", "Calculates wd_b - wd_a."], [1260, 5, 1, "", "read_shp", "Read a shape file"], [1261, 5, 1, "", "read_shp_polygons", "Reads the polygon points from a shp file."], [1277, 5, 1, "", "show_plotly_fig", "Displays a plotly figure in a window"], [1278, 5, 1, "", "shp2csv", "Read shape file, write csv file"], [1279, 5, 1, "", "shp2geom2d", "Read shapefile into geom2d geometry"], [1282, 5, 1, "", "uv2wd", "Calculate wind direction from wind vectors."], [1283, 5, 1, "", "wd2uv", "Calculate wind vectors from wind directions in degrees."], [1284, 5, 1, "", "wd2wdvec", "Calculate wind direction vectors from wind directions in degrees."], [1285, 5, 1, "", "wdvec2wd", "Calculate wind direction from wind direction vectors."]], "foxes.utils.DataBook": [[882, 1, 1, "", "__init__", "Constructor."], [883, 1, 1, "", "add_data_package", "Add static files from a package location."], [884, 1, 1, "", "add_data_package_file", "Add a static file from a package location."], [885, 1, 1, "", "add_file", "Add a file path"], [886, 1, 1, "", "add_files", "Add file paths"], [887, 1, 1, "", "get_file_path", "Get path of a file"], [888, 1, 1, "", "toc", "Get list of contents"]], "foxes.utils.PandasFileHelper": [[890, 4, 1, "", "DATA_FILE_FORMATS", ""], [891, 4, 1, "", "DEFAULT_FORMAT_DICT", ""], [892, 4, 1, "", "DEFAULT_READING_PARAMETERS", ""], [893, 4, 1, "", "DEFAULT_WRITING_PARAMETERS", ""], [894, 1, 1, "", "read_file", "Helper for reading data according to file ending."], [895, 1, 1, "", "write_file", "Helper for writing data according to file ending."]], "foxes.utils.abl.neutral": [[896, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [897, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [898, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.sheared": [[899, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"]], "foxes.utils.abl.stable": [[900, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [901, 5, 1, "", "lgz", "Calculates the log factor for wind speed profiles."], [902, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [903, 5, 1, "", "psi", "The Psi function"], [904, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.unstable": [[905, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [906, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [907, 5, 1, "", "psi", "The Psi function"], [908, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.geom2d": [[912, 0, 1, "", "AreaGeometry", "Abstract base class for closed 2D geometries."], [919, 0, 1, "", "AreaIntersection", "The intersection of area geometries."], [921, 0, 1, "", "AreaUnion", "The union of area geometries."], [929, 0, 1, "", "Circle", "This class represents the area of a circle."], [936, 0, 1, "", "ClosedPolygon", "This class represents a closed 2D polygon."], [943, 0, 1, "", "HalfPlane", "This class represents a half plane in 2d."], [951, 0, 1, "", "InvertedAreaGeometry", "Base class for inverted geometries."]], "foxes.utils.geom2d.AreaGeometry": [[913, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [914, 1, 1, "", "inverse", "Get the inverted geometry"], [915, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [916, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [917, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [918, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.AreaIntersection": [[920, 1, 1, "", "__new__", "Constructor."]], "foxes.utils.geom2d.AreaUnion": [[922, 1, 1, "", "__init__", "Constructor."], [923, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [924, 1, 1, "", "inverse", "Get the inverted geometry"], [925, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [926, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [927, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [928, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.Circle": [[930, 1, 1, "", "__init__", "Cobnstructor."], [931, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [932, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [933, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [934, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [935, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.ClosedPolygon": [[937, 1, 1, "", "__init__", "Constructor."], [938, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [939, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [940, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [941, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [942, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.HalfPlane": [[944, 1, 1, "", "__init__", "Constructor."], [945, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [946, 1, 1, "", "inverse", "Get the inverted geometry"], [947, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [948, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [949, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [950, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.InvertedAreaGeometry": [[952, 1, 1, "", "__init__", "Constructor."], [953, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [954, 1, 1, "", "inverse", "Get the inverted geometry"], [955, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [956, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [957, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [958, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.runners": [[1262, 0, 1, "", "DaskRunner", "Class for function execution via dask"], [1269, 0, 1, "", "DefaultRunner", "Class for default function execution."], [1271, 0, 1, "", "Runner", "Abstract base class for runners."]], "foxes.utils.runners.DaskRunner": [[1263, 1, 1, "", "__init__", "Constructor."], [1264, 1, 1, "", "finalize", "Finallize the runner"], [1265, 1, 1, "", "initialize", "Initialize the runner"], [1266, 1, 1, "", "is_distributed", ""], [1267, 1, 1, "", "print", "Prints if verbosity is not zero"], [1268, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.DefaultRunner": [[1270, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.Runner": [[1272, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1273, 1, 1, "", "finalize", "Finalize the runner"], [1274, 1, 1, "", "initialize", "Initialize the runner"], [1275, 2, 1, "", "initialized", "Initialization flag"], [1276, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.two_circles": [[1280, 5, 1, "", "area", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."], [1281, 5, 1, "", "calc_area", "Calculates the intersection of two circles."]], "foxes.variables": [[394, 3, 1, "", "AMB_CAP", "Ambient capacity, equals AMB_P/P_nominal"], [395, 3, 1, "", "AMB_CT", "The ambient thrust coefficient"], [396, 3, 1, "", "AMB_P", "The ambient power, unit depends on user choice"], [397, 3, 1, "", "AMB_REWS", "Ambient rotor effective wind speed in m/s"], [398, 3, 1, "", "AMB_REWS2", "Ambient rotor effective wind speed in m/s, calculated from second moment"], [399, 3, 1, "", "AMB_REWS3", "Ambient rotor effective wind speed in m/s, calculated from third moment"], [400, 3, 1, "", "AMB_RHO", "The ambient air density in kg/m3"], [401, 3, 1, "", "AMB_T", "The ambient temperature in Kelvin"], [402, 3, 1, "", "AMB_TI", "The ambient turbulence intensity"], [403, 3, 1, "", "AMB_WD", "The ambient wind direction in degrees"], [404, 3, 1, "", "AMB_WS", "The ambient wind speed in m/s"], [405, 3, 1, "", "AMB_YAW", "The ambient absolute yaw angle of  a turbine in degrees"], [406, 3, 1, "", "AMB_YAWM", "The ambient relative yaw angle of  a turbine in degrees"], [407, 3, 1, "", "AMB_YLD", "Ambient yield in GWh/a"], [408, 3, 1, "", "CAP", "Capacity, equals P/P_nominal"], [409, 3, 1, "", "CT", "The thrust coefficient"], [410, 3, 1, "", "D", "The rotor diameter in m"], [411, 3, 1, "", "EFF", "Efficiency, equals P/AMB_P"], [412, 3, 1, "", "H", "The height over ground in m"], [413, 3, 1, "", "K", "Wake growth parameter"], [414, 3, 1, "", "KB", "KTI value for zero TI, K = KB + KTI*TI"], [415, 3, 1, "", "KTI", "Factor between K and TI, K = KB + KTI*TI"], [416, 3, 1, "", "MAX_P", "The maximal power, for derating/boost"], [417, 3, 1, "", "MOL", "The Monin-Ubukhof length in m"], [418, 3, 1, "", "ORDER", "The turbine order"], [419, 3, 1, "", "P", "The power, unit depends on user choice"], [420, 3, 1, "", "PA_ALPHA", "The alpha parameter of the PorteAgel wake model"], [421, 3, 1, "", "PA_BETA", "The beta parameter of the PorteAgel wake model"], [422, 3, 1, "", "REWS", "Rotor effective wind speed in m/s"], [423, 3, 1, "", "REWS2", "Rotor effective wind speed in m/s, calculated from second moment"], [424, 3, 1, "", "REWS3", "Rotor effective wind speed in m/s, calculated from third moment"], [425, 3, 1, "", "RHO", "The air density in kg/m3"], [426, 3, 1, "", "SHEAR", "The shear exponent"], [427, 3, 1, "", "T", "The temperature in Kelvin"], [428, 3, 1, "", "TI", "The turbulence intensity"], [429, 3, 1, "", "TXYH", "The turbine rotor centre coordinate  vector (x, y, height)"], [430, 3, 1, "", "WD", "The wind direction in degrees"], [431, 3, 1, "", "WEIGHT", "The statistical weight of a state"], [432, 3, 1, "", "WS", "The wind speed in m/s"], [433, 3, 1, "", "X", "The x coordinate in m"], [434, 3, 1, "", "Y", "The y coordinate in"], [435, 3, 1, "", "YAW", "The absolute yaw angle of a turbine in degrees"], [436, 3, 1, "", "YAWM", "The relative yaw angle of a turbine in degrees"], [437, 3, 1, "", "YLD", "Yield in GWh/a"], [438, 3, 1, "", "Z0", "The roughness length in m"], [439, 3, 1, "", "amb2var", "Mapping from ambient variable to the corresponding waked variable"], [440, 3, 1, "", "var2amb", "Mapping from variable to the corresponding ambient variable"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:data", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"public": [0, 8, 13, 17, 22, 28, 32, 37, 41, 46, 50, 52, 56, 70, 78, 81, 91, 100, 105, 113, 114, 127, 135, 139, 147, 156, 161, 165, 167, 169, 173, 178, 182, 185, 190, 195, 320, 447, 455, 466, 468, 475, 482, 493, 497, 498, 505, 508, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 818, 823, 832, 852, 860, 864, 867, 873, 876, 878, 881, 889, 912, 919, 921, 929, 936, 943, 951, 959, 980, 982, 989, 1000, 1007, 1049, 1055, 1062, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1262, 1269, 1271], "member": [0, 8, 13, 17, 22, 28, 32, 37, 41, 46, 50, 52, 56, 70, 78, 81, 91, 100, 105, 113, 114, 127, 135, 139, 147, 156, 161, 165, 167, 169, 173, 178, 182, 185, 190, 195, 320, 447, 455, 466, 468, 475, 482, 493, 497, 498, 505, 508, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 627, 630, 633, 638, 640, 642, 645, 651, 657, 663, 666, 669, 672, 675, 678, 682, 689, 694, 701, 707, 714, 717, 725, 728, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 818, 823, 832, 852, 860, 864, 867, 873, 876, 878, 881, 889, 912, 919, 921, 929, 936, 943, 951, 959, 980, 982, 989, 1000, 1007, 1049, 1055, 1062, 1071, 1073, 1079, 1081, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1169, 1172, 1176, 1186, 1196, 1206, 1220, 1229, 1245, 1262, 1269, 1271], "paramet": [1, 2, 3, 4, 5, 9, 10, 11, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 30, 31, 33, 34, 35, 38, 39, 42, 43, 44, 47, 48, 53, 54, 55, 57, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 77, 79, 80, 82, 83, 84, 85, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 152, 154, 158, 160, 162, 163, 164, 166, 168, 170, 172, 174, 175, 176, 177, 179, 180, 181, 183, 184, 186, 187, 191, 192, 193, 287, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 454, 457, 458, 459, 461, 462, 463, 465, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 481, 484, 485, 486, 488, 489, 490, 492, 496, 499, 501, 502, 503, 504, 507, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 565, 566, 567, 570, 571, 575, 578, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 594, 597, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 611, 612, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 628, 629, 631, 632, 634, 636, 637, 639, 641, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 667, 670, 673, 676, 679, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 697, 698, 699, 700, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 734, 736, 737, 738, 740, 742, 743, 744, 746, 748, 749, 751, 753, 754, 755, 771, 772, 774, 775, 778, 780, 781, 783, 785, 786, 788, 790, 791, 792, 794, 795, 796, 797, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 820, 821, 824, 825, 828, 829, 830, 831, 833, 834, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 863, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 917, 918, 920, 922, 923, 927, 928, 930, 931, 934, 935, 937, 938, 941, 942, 944, 945, 949, 950, 952, 953, 957, 958, 960, 962, 963, 964, 966, 967, 968, 969, 974, 975, 981, 983, 984, 985, 986, 990, 991, 992, 993, 1001, 1002, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1024, 1025, 1026, 1029, 1042, 1044, 1045, 1046, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1061, 1063, 1064, 1065, 1066, 1067, 1071, 1072, 1074, 1075, 1076, 1079, 1080, 1082, 1083, 1086, 1091, 1092, 1096, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1108, 1111, 1112, 1113, 1114, 1118, 1119, 1121, 1123, 1124, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1137, 1139, 1140, 1141, 1142, 1146, 1147, 1148, 1152, 1153, 1154, 1158, 1159, 1160, 1164, 1165, 1166, 1170, 1175, 1177, 1178, 1179, 1180, 1182, 1187, 1188, 1189, 1190, 1192, 1197, 1198, 1199, 1200, 1202, 1207, 1208, 1209, 1210, 1213, 1221, 1223, 1226, 1227, 1230, 1231, 1234, 1239, 1240, 1241, 1242, 1251, 1252, 1254, 1257, 1258, 1260, 1261, 1263, 1268, 1270, 1276, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285], "return": [2, 3, 5, 10, 11, 12, 14, 15, 16, 19, 20, 21, 24, 26, 27, 30, 31, 34, 35, 36, 39, 40, 44, 45, 48, 49, 53, 54, 55, 62, 63, 66, 73, 74, 75, 76, 77, 79, 80, 84, 86, 87, 88, 89, 90, 93, 96, 98, 102, 103, 104, 108, 110, 112, 119, 121, 122, 124, 125, 126, 131, 134, 136, 137, 138, 142, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 166, 170, 171, 174, 175, 176, 177, 183, 184, 188, 189, 192, 193, 206, 287, 325, 449, 450, 451, 452, 453, 454, 458, 460, 461, 462, 464, 465, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 485, 487, 488, 489, 491, 492, 495, 496, 501, 503, 504, 518, 520, 527, 529, 536, 538, 547, 549, 554, 555, 558, 559, 560, 562, 563, 566, 567, 569, 571, 572, 573, 577, 578, 579, 580, 583, 584, 587, 588, 589, 592, 593, 594, 598, 600, 601, 604, 605, 606, 610, 611, 612, 616, 617, 620, 621, 622, 625, 626, 628, 629, 631, 632, 636, 637, 643, 644, 647, 649, 650, 653, 655, 656, 659, 661, 662, 664, 665, 667, 668, 670, 671, 673, 674, 676, 677, 680, 681, 684, 686, 687, 688, 691, 692, 693, 697, 698, 699, 700, 703, 704, 705, 706, 709, 711, 712, 713, 715, 716, 719, 723, 726, 727, 730, 731, 732, 736, 737, 742, 743, 748, 753, 754, 774, 775, 776, 780, 785, 790, 795, 796, 797, 800, 801, 802, 803, 806, 807, 810, 811, 812, 813, 816, 817, 821, 822, 825, 826, 827, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 849, 850, 851, 869, 870, 871, 875, 880, 887, 888, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 914, 915, 916, 917, 918, 924, 925, 926, 927, 928, 932, 933, 934, 935, 939, 940, 941, 942, 946, 947, 948, 949, 950, 954, 955, 956, 957, 958, 961, 962, 963, 964, 965, 967, 968, 970, 971, 972, 973, 976, 977, 978, 979, 984, 985, 987, 988, 992, 993, 994, 995, 996, 998, 999, 1003, 1004, 1006, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1051, 1052, 1057, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1068, 1069, 1070, 1075, 1076, 1077, 1078, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1097, 1098, 1099, 1102, 1103, 1104, 1107, 1108, 1109, 1112, 1113, 1115, 1118, 1119, 1120, 1124, 1125, 1128, 1129, 1131, 1134, 1135, 1136, 1137, 1140, 1141, 1143, 1144, 1147, 1148, 1149, 1150, 1153, 1154, 1155, 1156, 1159, 1160, 1161, 1162, 1165, 1166, 1167, 1168, 1171, 1174, 1175, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1243, 1244, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1268, 1270, 1275, 1276, 1279, 1280, 1281, 1282, 1283, 1284, 1285], "attribut": [8, 22, 28, 32, 37, 41, 46, 56, 70, 81, 91, 100, 105, 114, 127, 139, 147, 161, 167, 185, 447, 455, 475, 482, 498, 505, 508, 513, 521, 530, 542, 556, 564, 574, 581, 585, 590, 596, 602, 607, 614, 618, 623, 633, 645, 651, 657, 678, 682, 689, 694, 701, 707, 717, 733, 739, 745, 750, 756, 777, 782, 787, 793, 798, 804, 808, 814, 818, 823, 832, 852, 864, 867, 873, 878, 881, 889, 921, 929, 936, 943, 959, 982, 1007, 1055, 1062, 1073, 1121, 1176, 1186, 1196, 1206, 1229, 1245, 1262], "exampl": [206, 278, 325, 366, 368, 1137, 1175, 1304], "see": [206, 325], "also": [206, 325], "yield": [847, 854, 855, 856, 857, 858, 859], "rais": [1137, 1175], "note": [1137, 1175], "api": 1286, "fox": [1287, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1306, 1313], "algorithm": [1287, 1288, 1289], "downwind": 1288, "model": [1288, 1289, 1294, 1302, 1311], "iter": 1289, "constant": 1290, "core": [1291, 1295], "input": 1293, "farm_layout": 1293, "state": [1293, 1308], "windio": 1293, "farm_control": 1294, "farm_model": 1294, "partial_wak": 1294, "point_model": 1294, "rotor_model": 1294, "turbine_model": 1294, "turbine_typ": 1294, "vertical_profil": 1294, "wake_fram": 1294, "wake_model": [1294, 1302], "wake_superposit": 1294, "opt": [1295, 1296, 1297], "problem": [1295, 1296, 1297], "object": [1295, 1297], "constraint": [1295, 1297], "layout": [1296, 1297, 1308, 1310], "geom_layout": [1296, 1297], "output": 1298, "util": [1299, 1300], "abl": [1299, 1300], "geom2d": 1299, "runner": 1299, "two_circl": 1299, "neutral": 1300, "stabl": 1300, "unstabl": 1300, "shear": 1300, "variabl": 1301, "wind": [1302, 1308, 1312, 1315, 1319], "ti": 1302, "citat": 1303, "histori": 1305, "v0": 1305, "1": 1305, "0": 1305, "alpha": 1305, "2": 1305, "3": 1305, "4": 1305, "5": 1305, "6": 1305, "welcom": 1306, "licens": 1306, "content": 1306, "contribut": 1306, "acknowledg": 1306, "instal": 1307, "requir": 1307, "via": 1307, "pip": 1307, "virtual": 1307, "python": 1307, "environ": 1307, "standard": 1307, "user": 1307, "develop": 1307, "conda": 1307, "static": 1308, "data": [1308, 1312, 1318, 1319], "farm": 1308, "test_farm_67": 1308, "csv": 1308, "ambient": 1308, "wrf": 1308, "timeseri": [1308, 1318], "4464": 1308, "gz": 1308, "abl_states_6000": 1308, "timeseries_3000": 1308, "timeseries_8000": 1308, "timeseries_100": 1308, "wind_rose_bremen": 1308, "wind_rot": 1308, "nc": 1308, "power": [1308, 1314], "thrust": 1308, "curv": 1308, "dtu": 1308, "10mw": 1308, "d178d3": 1308, "h119": 1308, "iea": 1308, "15mw": 1308, "d240": 1308, "h150": 1308, "iwt": 1308, "7d5mw": 1308, "d164": 1308, "h100": 1308, "nrel": 1308, "5mw": 1308, "d126": 1308, "h90": 1308, "file": 1308, "path": 1308, "heterogen": 1309, "flow": 1309, "optim": 1310, "The": 1311, "book": 1311, "multi": 1312, "height": 1312, "overview": 1313, "how": 1313, "setup": 1313, "mask": 1314, "sector": 1315, "manag": 1315, "singl": 1316, "row": 1316, "turbin": 1316, "dynam": 1317, "wake": [1317, 1320], "rose": 1319, "yaw": 1320, "rotor": 1320}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Public members": [[0, "public-members"], [8, "public-members"], [13, "public-members"], [17, "public-members"], [22, "public-members"], [28, "public-members"], [32, "public-members"], [37, "public-members"], [41, "public-members"], [46, "public-members"], [50, "public-members"], [52, "public-members"], [56, "public-members"], [70, "public-members"], [78, "public-members"], [81, "public-members"], [91, "public-members"], [100, "public-members"], [105, "public-members"], [113, "public-members"], [114, "public-members"], [127, "public-members"], [135, "public-members"], [139, "public-members"], [147, "public-members"], [156, "public-members"], [161, "public-members"], [165, "public-members"], [167, "public-members"], [169, "public-members"], [173, "public-members"], [178, "public-members"], [182, "public-members"], [185, "public-members"], [190, "public-members"], [195, "public-members"], [320, "public-members"], [447, "public-members"], [455, "public-members"], [466, "public-members"], [468, "public-members"], [475, "public-members"], [482, "public-members"], [493, "public-members"], [497, "public-members"], [498, "public-members"], [505, "public-members"], [508, "public-members"], [513, "public-members"], [521, "public-members"], [530, "public-members"], [539, "public-members"], [542, "public-members"], [550, "public-members"], [556, "public-members"], [561, "public-members"], [564, "public-members"], [568, "public-members"], [574, "public-members"], [581, "public-members"], [585, "public-members"], [590, "public-members"], [596, "public-members"], [602, "public-members"], [607, "public-members"], [614, "public-members"], [618, "public-members"], [623, "public-members"], [627, "public-members"], [630, "public-members"], [633, "public-members"], [638, "public-members"], [640, "public-members"], [642, "public-members"], [645, "public-members"], [651, "public-members"], [657, "public-members"], [663, "public-members"], [666, "public-members"], [669, "public-members"], [672, "public-members"], [675, "public-members"], [678, "public-members"], [682, "public-members"], [689, "public-members"], [694, "public-members"], [701, "public-members"], [707, "public-members"], [714, "public-members"], [717, "public-members"], [725, "public-members"], [728, "public-members"], [733, "public-members"], [739, "public-members"], [745, "public-members"], [750, "public-members"], [756, "public-members"], [777, "public-members"], [782, "public-members"], [787, "public-members"], [793, "public-members"], [798, "public-members"], [804, "public-members"], [808, "public-members"], [814, "public-members"], [818, "public-members"], [823, "public-members"], [832, "public-members"], [852, "public-members"], [860, "public-members"], [864, "public-members"], [867, "public-members"], [873, "public-members"], [876, "public-members"], [878, "public-members"], [881, "public-members"], [889, "public-members"], [912, "public-members"], [919, "public-members"], [921, "public-members"], [929, "public-members"], [936, "public-members"], [943, "public-members"], [951, "public-members"], [959, "public-members"], [980, "public-members"], [982, "public-members"], [989, "public-members"], [1000, "public-members"], [1007, "public-members"], [1049, "public-members"], [1055, "public-members"], [1062, "public-members"], [1071, "public-members"], [1073, "public-members"], [1079, "public-members"], [1081, "public-members"], [1095, "public-members"], [1100, "public-members"], [1105, "public-members"], [1110, "public-members"], [1116, "public-members"], [1121, "public-members"], [1126, "public-members"], [1132, "public-members"], [1138, "public-members"], [1145, "public-members"], [1151, "public-members"], [1157, "public-members"], [1163, "public-members"], [1169, "public-members"], [1172, "public-members"], [1176, "public-members"], [1186, "public-members"], [1196, "public-members"], [1206, "public-members"], [1220, "public-members"], [1229, "public-members"], [1245, "public-members"], [1262, "public-members"], [1269, "public-members"], [1271, "public-members"]], "Parameters": [[1, "parameters"], [2, "parameters"], [3, "parameters"], [4, "parameters"], [5, "parameters"], [9, "parameters"], [10, "parameters"], [11, "parameters"], [14, "parameters"], [15, "parameters"], [16, "parameters"], [19, "parameters"], [20, "parameters"], [21, "parameters"], [23, "parameters"], [24, "parameters"], [25, "parameters"], [26, "parameters"], [27, "parameters"], [30, "parameters"], [31, "parameters"], [33, "parameters"], [34, "parameters"], [35, "parameters"], [38, "parameters"], [39, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [47, "parameters"], [48, "parameters"], [53, "parameters"], [54, "parameters"], [55, "parameters"], [57, "parameters"], [60, "parameters"], [61, "parameters"], [62, "parameters"], [65, "parameters"], [66, "parameters"], [67, "parameters"], [68, "parameters"], [71, "parameters"], [72, "parameters"], [73, "parameters"], [77, "parameters"], [79, "parameters"], [80, "parameters"], [82, "parameters"], [83, "parameters"], [84, "parameters"], [85, "parameters"], [87, "parameters"], [88, "parameters"], [90, "parameters"], [92, "parameters"], [93, "parameters"], [94, "parameters"], [95, "parameters"], [96, "parameters"], [97, "parameters"], [98, "parameters"], [99, "parameters"], [101, "parameters"], [102, "parameters"], [103, "parameters"], [104, "parameters"], [106, "parameters"], [107, "parameters"], [108, "parameters"], [109, "parameters"], [110, "parameters"], [111, "parameters"], [112, "parameters"], [117, "parameters"], [118, "parameters"], [119, "parameters"], [120, "parameters"], [121, "parameters"], [123, "parameters"], [125, "parameters"], [126, "parameters"], [128, "parameters"], [129, "parameters"], [130, "parameters"], [131, "parameters"], [132, "parameters"], [133, "parameters"], [134, "parameters"], [136, "parameters"], [138, "parameters"], [140, "parameters"], [141, "parameters"], [142, "parameters"], [143, "parameters"], [144, "parameters"], [145, "parameters"], [146, "parameters"], [148, "parameters"], [149, "parameters"], [151, "parameters"], [152, "parameters"], [154, "parameters"], [158, "parameters"], [160, "parameters"], [162, "parameters"], [163, "parameters"], [164, "parameters"], [166, "parameters"], [168, "parameters"], [170, "parameters"], [172, "parameters"], [174, "parameters"], [175, "parameters"], [176, "parameters"], [177, "parameters"], [179, "parameters"], [180, "parameters"], [181, "parameters"], [183, "parameters"], [184, "parameters"], [186, "parameters"], [187, "parameters"], [191, "parameters"], [192, "parameters"], [193, "parameters"], [287, "parameters"], [441, "parameters"], [442, "parameters"], [443, "parameters"], [444, "parameters"], [445, "parameters"], [446, "parameters"], [448, "parameters"], [449, "parameters"], [451, "parameters"], [452, "parameters"], [454, "parameters"], [457, "parameters"], [458, "parameters"], [459, "parameters"], [461, "parameters"], [462, "parameters"], [463, "parameters"], [465, "parameters"], [468, "parameters"], [469, "parameters"], [470, "parameters"], [471, "parameters"], [472, "parameters"], [474, "parameters"], [476, "parameters"], [477, "parameters"], [478, "parameters"], [479, "parameters"], [481, "parameters"], [484, "parameters"], [485, "parameters"], [486, "parameters"], [488, "parameters"], [489, "parameters"], [490, "parameters"], [492, "parameters"], [496, "parameters"], [499, "parameters"], [501, "parameters"], [502, "parameters"], [503, "parameters"], [504, "parameters"], [507, "parameters"], [510, "parameters"], [511, "parameters"], [512, "parameters"], [514, "parameters"], [515, "parameters"], [516, "parameters"], [517, "parameters"], [518, "parameters"], [519, "parameters"], [520, "parameters"], [522, "parameters"], [524, "parameters"], [525, "parameters"], [526, "parameters"], [527, "parameters"], [528, "parameters"], [529, "parameters"], [531, "parameters"], [533, "parameters"], [534, "parameters"], [535, "parameters"], [536, "parameters"], [537, "parameters"], [538, "parameters"], [540, "parameters"], [541, "parameters"], [543, "parameters"], [544, "parameters"], [545, "parameters"], [546, "parameters"], [547, "parameters"], [548, "parameters"], [549, "parameters"], [551, "parameters"], [552, "parameters"], [553, "parameters"], [554, "parameters"], [555, "parameters"], [557, "parameters"], [558, "parameters"], [559, "parameters"], [560, "parameters"], [562, "parameters"], [563, "parameters"], [565, "parameters"], [566, "parameters"], [567, "parameters"], [570, "parameters"], [571, "parameters"], [575, "parameters"], [578, "parameters"], [582, "parameters"], [583, "parameters"], [584, "parameters"], [586, "parameters"], [587, "parameters"], [588, "parameters"], [589, "parameters"], [591, "parameters"], [592, "parameters"], [593, "parameters"], [594, "parameters"], [597, "parameters"], [598, "parameters"], [599, "parameters"], [600, "parameters"], [601, "parameters"], [603, "parameters"], [604, "parameters"], [605, "parameters"], [606, "parameters"], [608, "parameters"], [609, "parameters"], [610, "parameters"], [611, "parameters"], [612, "parameters"], [615, "parameters"], [616, "parameters"], [617, "parameters"], [619, "parameters"], [620, "parameters"], [621, "parameters"], [622, "parameters"], [624, "parameters"], [625, "parameters"], [626, "parameters"], [628, "parameters"], [629, "parameters"], [631, "parameters"], [632, "parameters"], [634, "parameters"], [636, "parameters"], [637, "parameters"], [639, "parameters"], [641, "parameters"], [643, "parameters"], [644, "parameters"], [646, "parameters"], [647, "parameters"], [648, "parameters"], [649, "parameters"], [650, "parameters"], [652, "parameters"], [653, "parameters"], [654, "parameters"], [655, "parameters"], [656, "parameters"], [658, "parameters"], [659, "parameters"], [660, "parameters"], [661, "parameters"], [662, "parameters"], [664, "parameters"], [667, "parameters"], [670, "parameters"], [673, "parameters"], [676, "parameters"], [679, "parameters"], [680, "parameters"], [683, "parameters"], [684, "parameters"], [685, "parameters"], [686, "parameters"], [687, "parameters"], [688, "parameters"], [690, "parameters"], [691, "parameters"], [692, "parameters"], [693, "parameters"], [695, "parameters"], [697, "parameters"], [698, "parameters"], [699, "parameters"], [700, "parameters"], [702, "parameters"], [703, "parameters"], [704, "parameters"], [705, "parameters"], [706, "parameters"], [708, "parameters"], [709, "parameters"], [710, "parameters"], [711, "parameters"], [712, "parameters"], [713, "parameters"], [715, "parameters"], [716, "parameters"], [718, "parameters"], [719, "parameters"], [720, "parameters"], [721, "parameters"], [722, "parameters"], [723, "parameters"], [724, "parameters"], [726, "parameters"], [727, "parameters"], [729, "parameters"], [730, "parameters"], [731, "parameters"], [732, "parameters"], [734, "parameters"], [736, "parameters"], [737, "parameters"], [738, "parameters"], [740, "parameters"], [742, "parameters"], [743, "parameters"], [744, "parameters"], [746, "parameters"], [748, "parameters"], [749, "parameters"], [751, "parameters"], [753, "parameters"], [754, "parameters"], [755, "parameters"], [771, "parameters"], [772, "parameters"], [774, "parameters"], [775, "parameters"], [778, "parameters"], [780, "parameters"], [781, "parameters"], [783, "parameters"], [785, "parameters"], [786, "parameters"], [788, "parameters"], [790, "parameters"], [791, "parameters"], [792, "parameters"], [794, "parameters"], [795, "parameters"], [796, "parameters"], [797, "parameters"], [799, "parameters"], [800, "parameters"], [801, "parameters"], [802, "parameters"], [803, "parameters"], [805, "parameters"], [806, "parameters"], [807, "parameters"], [809, "parameters"], [810, "parameters"], [811, "parameters"], [812, "parameters"], [813, "parameters"], [815, "parameters"], [816, "parameters"], [817, "parameters"], [819, "parameters"], [820, "parameters"], [821, "parameters"], [824, "parameters"], [825, "parameters"], [828, "parameters"], [829, "parameters"], [830, "parameters"], [831, "parameters"], [833, "parameters"], [834, "parameters"], [835, "parameters"], [837, "parameters"], [838, "parameters"], [839, "parameters"], [840, "parameters"], [841, "parameters"], [843, "parameters"], [844, "parameters"], [845, "parameters"], [846, "parameters"], [847, "parameters"], [848, "parameters"], [849, "parameters"], [850, "parameters"], [851, "parameters"], [853, "parameters"], [854, "parameters"], [855, "parameters"], [856, "parameters"], [857, "parameters"], [858, "parameters"], [859, "parameters"], [861, "parameters"], [863, "parameters"], [865, "parameters"], [866, "parameters"], [868, "parameters"], [869, "parameters"], [870, "parameters"], [871, "parameters"], [872, "parameters"], [874, "parameters"], [875, "parameters"], [876, "parameters"], [877, "parameters"], [879, "parameters"], [880, "parameters"], [881, "parameters"], [882, "parameters"], [883, "parameters"], [884, "parameters"], [885, "parameters"], [886, "parameters"], [887, "parameters"], [888, "parameters"], [894, "parameters"], [895, "parameters"], [896, "parameters"], [897, "parameters"], [898, "parameters"], [899, "parameters"], [900, "parameters"], [901, "parameters"], [902, "parameters"], [903, "parameters"], [904, "parameters"], [905, "parameters"], [906, "parameters"], [907, "parameters"], [908, "parameters"], [909, "parameters"], [910, "parameters"], [911, "parameters"], [913, "parameters"], [917, "parameters"], [918, "parameters"], [920, "parameters"], [922, "parameters"], [923, "parameters"], [927, "parameters"], [928, "parameters"], [930, "parameters"], [931, "parameters"], [934, "parameters"], [935, "parameters"], [937, "parameters"], [938, "parameters"], [941, "parameters"], [942, "parameters"], [944, "parameters"], [945, "parameters"], [949, "parameters"], [950, "parameters"], [952, "parameters"], [953, "parameters"], [957, "parameters"], [958, "parameters"], [960, "parameters"], [962, "parameters"], [963, "parameters"], [964, "parameters"], [966, "parameters"], [967, "parameters"], [968, "parameters"], [969, "parameters"], [974, "parameters"], [975, "parameters"], [981, "parameters"], [983, "parameters"], [984, "parameters"], [985, "parameters"], [986, "parameters"], [990, "parameters"], [991, "parameters"], [992, "parameters"], [993, "parameters"], [1001, "parameters"], [1002, "parameters"], [1009, "parameters"], [1010, "parameters"], [1011, "parameters"], [1012, "parameters"], [1014, "parameters"], [1015, "parameters"], [1016, "parameters"], [1017, "parameters"], [1018, "parameters"], [1021, "parameters"], [1022, "parameters"], [1024, "parameters"], [1025, "parameters"], [1026, "parameters"], [1029, "parameters"], [1042, "parameters"], [1044, "parameters"], [1045, "parameters"], [1046, "parameters"], [1050, "parameters"], [1051, "parameters"], [1052, "parameters"], [1053, "parameters"], [1054, "parameters"], [1056, "parameters"], [1057, "parameters"], [1058, "parameters"], [1059, "parameters"], [1061, "parameters"], [1063, "parameters"], [1064, "parameters"], [1065, "parameters"], [1066, "parameters"], [1067, "parameters"], [1071, "parameters"], [1072, "parameters"], [1074, "parameters"], [1075, "parameters"], [1076, "parameters"], [1079, "parameters"], [1080, "parameters"], [1082, "parameters"], [1083, "parameters"], [1086, "parameters"], [1091, "parameters"], [1092, "parameters"], [1096, "parameters"], [1097, "parameters"], [1098, "parameters"], [1101, "parameters"], [1102, "parameters"], [1103, "parameters"], [1106, "parameters"], [1107, "parameters"], [1108, "parameters"], [1111, "parameters"], [1112, "parameters"], [1113, "parameters"], [1114, "parameters"], [1118, "parameters"], [1119, "parameters"], [1121, "parameters"], [1123, "parameters"], [1124, "parameters"], [1127, "parameters"], [1128, "parameters"], [1129, "parameters"], [1130, "parameters"], [1133, "parameters"], [1134, "parameters"], [1135, "parameters"], [1137, "parameters"], [1139, "parameters"], [1140, "parameters"], [1141, "parameters"], [1142, "parameters"], [1146, "parameters"], [1147, "parameters"], [1148, "parameters"], [1152, "parameters"], [1153, "parameters"], [1154, "parameters"], [1158, "parameters"], [1159, "parameters"], [1160, "parameters"], [1164, "parameters"], [1165, "parameters"], [1166, "parameters"], [1170, "parameters"], [1175, "parameters"], [1177, "parameters"], [1178, "parameters"], [1179, "parameters"], [1180, "parameters"], [1182, "parameters"], [1187, "parameters"], [1188, "parameters"], [1189, "parameters"], [1190, "parameters"], [1192, "parameters"], [1197, "parameters"], [1198, "parameters"], [1199, "parameters"], [1200, "parameters"], [1202, "parameters"], [1207, "parameters"], [1208, "parameters"], [1209, "parameters"], [1210, "parameters"], [1213, "parameters"], [1221, "parameters"], [1223, "parameters"], [1226, "parameters"], [1227, "parameters"], [1230, "parameters"], [1231, "parameters"], [1234, "parameters"], [1239, "parameters"], [1240, "parameters"], [1241, "parameters"], [1242, "parameters"], [1251, "parameters"], [1252, "parameters"], [1254, "parameters"], [1257, "parameters"], [1258, "parameters"], [1260, "parameters"], [1261, "parameters"], [1263, "parameters"], [1268, "parameters"], [1270, "parameters"], [1276, "parameters"], [1278, "parameters"], [1279, "parameters"], [1280, "parameters"], [1281, "parameters"], [1282, "parameters"], [1283, "parameters"], [1284, "parameters"], [1285, "parameters"]], "Returns": [[2, "returns"], [3, "returns"], [5, "returns"], [10, "returns"], [11, "returns"], [12, "returns"], [14, "returns"], [15, "returns"], [16, "returns"], [19, "returns"], [20, "returns"], [21, "returns"], [24, "returns"], [26, "returns"], [27, "returns"], [30, "returns"], [31, "returns"], [34, "returns"], [35, "returns"], [36, "returns"], [39, "returns"], [40, "returns"], [44, "returns"], [45, "returns"], [48, "returns"], [49, "returns"], [53, "returns"], [54, "returns"], [55, "returns"], [62, "returns"], [63, "returns"], [66, "returns"], [73, "returns"], [74, "returns"], [75, "returns"], [76, "returns"], [77, "returns"], [79, "returns"], [80, "returns"], [84, "returns"], [86, "returns"], [87, "returns"], [88, "returns"], [89, "returns"], [90, "returns"], [93, "returns"], [96, "returns"], [98, "returns"], [102, "returns"], [103, "returns"], [104, "returns"], [108, "returns"], [110, "returns"], [112, "returns"], [119, "returns"], [121, "returns"], [122, "returns"], [124, "returns"], [125, "returns"], [126, "returns"], [131, "returns"], [134, "returns"], [136, "returns"], [137, "returns"], [138, "returns"], [142, "returns"], [144, "returns"], [146, "returns"], [149, "returns"], [150, "returns"], [152, "returns"], [153, "returns"], [154, "returns"], [155, "returns"], [157, "returns"], [158, "returns"], [159, "returns"], [160, "returns"], [166, "returns"], [170, "returns"], [171, "returns"], [174, "returns"], [175, "returns"], [176, "returns"], [177, "returns"], [183, "returns"], [184, "returns"], [188, "returns"], [189, "returns"], [192, "returns"], [193, "returns"], [206, "returns"], [287, "returns"], [325, "returns"], [449, "returns"], [450, "returns"], [451, "returns"], [452, "returns"], [453, "returns"], [454, "returns"], [458, "returns"], [460, "returns"], [461, "returns"], [462, "returns"], [464, "returns"], [465, "returns"], [470, "returns"], [471, "returns"], [472, "returns"], [473, "returns"], [474, "returns"], [477, "returns"], [478, "returns"], [479, "returns"], [480, "returns"], [481, "returns"], [485, "returns"], [487, "returns"], [488, "returns"], [489, "returns"], [491, "returns"], [492, "returns"], [495, "returns"], [496, "returns"], [501, "returns"], [503, "returns"], [504, "returns"], [518, "returns"], [520, "returns"], [527, "returns"], [529, "returns"], [536, "returns"], [538, "returns"], [547, "returns"], [549, "returns"], [554, "returns"], [555, "returns"], [558, "returns"], [559, "returns"], [560, "returns"], [562, "returns"], [563, "returns"], [566, "returns"], [567, "returns"], [569, "returns"], [571, "returns"], [572, "returns"], [573, "returns"], [577, "returns"], [578, "returns"], [579, "returns"], [580, "returns"], [583, "returns"], [584, "returns"], [587, "returns"], [588, "returns"], [589, "returns"], [592, "returns"], [593, "returns"], [594, "returns"], [598, "returns"], [600, "returns"], [601, "returns"], [604, "returns"], [605, "returns"], [606, "returns"], [610, "returns"], [611, "returns"], [612, "returns"], [616, "returns"], [617, "returns"], [620, "returns"], [621, "returns"], [622, "returns"], [625, "returns"], [626, "returns"], [628, "returns"], [629, "returns"], [631, "returns"], [632, "returns"], [636, "returns"], [637, "returns"], [643, "returns"], [644, "returns"], [647, "returns"], [649, "returns"], [650, "returns"], [653, "returns"], [655, "returns"], [656, "returns"], [659, "returns"], [661, "returns"], [662, "returns"], [664, "returns"], [665, "returns"], [667, "returns"], [668, "returns"], [670, "returns"], [671, "returns"], [673, "returns"], [674, "returns"], [676, "returns"], [677, "returns"], [680, "returns"], [681, "returns"], [684, "returns"], [686, "returns"], [687, "returns"], [688, "returns"], [691, "returns"], [692, "returns"], [693, "returns"], [697, "returns"], [698, "returns"], [699, "returns"], [700, "returns"], [703, "returns"], [704, "returns"], [705, "returns"], [706, "returns"], [709, "returns"], [711, "returns"], [712, "returns"], [713, "returns"], [715, "returns"], [716, "returns"], [719, "returns"], [723, "returns"], [726, "returns"], [727, "returns"], [730, "returns"], [731, "returns"], [732, "returns"], [736, "returns"], [737, "returns"], [742, "returns"], [743, "returns"], [748, "returns"], [753, "returns"], [754, "returns"], [774, "returns"], [775, "returns"], [776, "returns"], [780, "returns"], [785, "returns"], [790, "returns"], [795, "returns"], [796, "returns"], [797, "returns"], [800, "returns"], [801, "returns"], [802, "returns"], [803, "returns"], [806, "returns"], [807, "returns"], [810, "returns"], [811, "returns"], [812, "returns"], [813, "returns"], [816, "returns"], [817, "returns"], [821, "returns"], [822, "returns"], [825, "returns"], [826, "returns"], [827, "returns"], [836, "returns"], [837, "returns"], [838, "returns"], [839, "returns"], [840, "returns"], [841, "returns"], [843, "returns"], [844, "returns"], [845, "returns"], [846, "returns"], [848, "returns"], [849, "returns"], [850, "returns"], [851, "returns"], [869, "returns"], [870, "returns"], [871, "returns"], [875, "returns"], [880, "returns"], [887, "returns"], [888, "returns"], [894, "returns"], [896, "returns"], [897, "returns"], [898, "returns"], [899, "returns"], [900, "returns"], [901, "returns"], [902, "returns"], [903, "returns"], [904, "returns"], [905, "returns"], [906, "returns"], [907, "returns"], [908, "returns"], [909, "returns"], [910, "returns"], [911, "returns"], [914, "returns"], [915, "returns"], [916, "returns"], [917, "returns"], [918, "returns"], [924, "returns"], [925, "returns"], [926, "returns"], [927, "returns"], [928, "returns"], [932, "returns"], [933, "returns"], [934, "returns"], [935, "returns"], [939, "returns"], [940, "returns"], [941, "returns"], [942, "returns"], [946, "returns"], [947, "returns"], [948, "returns"], [949, "returns"], [950, "returns"], [954, "returns"], [955, "returns"], [956, "returns"], [957, "returns"], [958, "returns"], [961, "returns"], [962, "returns"], [963, "returns"], [964, "returns"], [965, "returns"], [967, "returns"], [968, "returns"], [970, "returns"], [971, "returns"], [972, "returns"], [973, "returns"], [976, "returns"], [977, "returns"], [978, "returns"], [979, "returns"], [984, "returns"], [985, "returns"], [987, "returns"], [988, "returns"], [992, "returns"], [993, "returns"], [994, "returns"], [995, "returns"], [996, "returns"], [998, "returns"], [999, "returns"], [1003, "returns"], [1004, "returns"], [1006, "returns"], [1013, "returns"], [1014, "returns"], [1015, "returns"], [1016, "returns"], [1017, "returns"], [1018, "returns"], [1019, "returns"], [1020, "returns"], [1021, "returns"], [1022, "returns"], [1023, "returns"], [1024, "returns"], [1025, "returns"], [1026, "returns"], [1027, "returns"], [1028, "returns"], [1030, "returns"], [1031, "returns"], [1032, "returns"], [1033, "returns"], [1034, "returns"], [1035, "returns"], [1036, "returns"], [1037, "returns"], [1038, "returns"], [1039, "returns"], [1040, "returns"], [1041, "returns"], [1042, "returns"], [1043, "returns"], [1044, "returns"], [1047, "returns"], [1048, "returns"], [1051, "returns"], [1052, "returns"], [1057, "returns"], [1058, "returns"], [1059, "returns"], [1060, "returns"], [1061, "returns"], [1064, "returns"], [1065, "returns"], [1066, "returns"], [1068, "returns"], [1069, "returns"], [1070, "returns"], [1075, "returns"], [1076, "returns"], [1077, "returns"], [1078, "returns"], [1084, "returns"], [1085, "returns"], [1087, "returns"], [1088, "returns"], [1089, "returns"], [1090, "returns"], [1091, "returns"], [1092, "returns"], [1093, "returns"], [1094, "returns"], [1097, "returns"], [1098, "returns"], [1099, "returns"], [1102, "returns"], [1103, "returns"], [1104, "returns"], [1107, "returns"], [1108, "returns"], [1109, "returns"], [1112, "returns"], [1113, "returns"], [1115, "returns"], [1118, "returns"], [1119, "returns"], [1120, "returns"], [1124, "returns"], [1125, "returns"], [1128, "returns"], [1129, "returns"], [1131, "returns"], [1134, "returns"], [1135, "returns"], [1136, "returns"], [1137, "returns"], [1140, "returns"], [1141, "returns"], [1143, "returns"], [1144, "returns"], [1147, "returns"], [1148, "returns"], [1149, "returns"], [1150, "returns"], [1153, "returns"], [1154, "returns"], [1155, "returns"], [1156, "returns"], [1159, "returns"], [1160, "returns"], [1161, "returns"], [1162, "returns"], [1165, "returns"], [1166, "returns"], [1167, "returns"], [1168, "returns"], [1171, "returns"], [1174, "returns"], [1175, "returns"], [1178, "returns"], [1179, "returns"], [1180, "returns"], [1181, "returns"], [1183, "returns"], [1184, "returns"], [1185, "returns"], [1188, "returns"], [1189, "returns"], [1190, "returns"], [1191, "returns"], [1193, "returns"], [1194, "returns"], [1195, "returns"], [1198, "returns"], [1199, "returns"], [1200, "returns"], [1201, "returns"], [1203, "returns"], [1204, "returns"], [1205, "returns"], [1208, "returns"], [1209, "returns"], [1210, "returns"], [1211, "returns"], [1212, "returns"], [1214, "returns"], [1215, "returns"], [1216, "returns"], [1217, "returns"], [1218, "returns"], [1219, "returns"], [1221, "returns"], [1222, "returns"], [1224, "returns"], [1225, "returns"], [1226, "returns"], [1227, "returns"], [1228, "returns"], [1231, "returns"], [1232, "returns"], [1233, "returns"], [1235, "returns"], [1236, "returns"], [1237, "returns"], [1238, "returns"], [1239, "returns"], [1240, "returns"], [1243, "returns"], [1244, "returns"], [1252, "returns"], [1253, "returns"], [1255, "returns"], [1256, "returns"], [1257, "returns"], [1258, "returns"], [1259, "returns"], [1260, "returns"], [1261, "returns"], [1268, "returns"], [1270, "returns"], [1275, "returns"], [1276, "returns"], [1279, "returns"], [1280, "returns"], [1281, "returns"], [1282, "returns"], [1283, "returns"], [1284, "returns"], [1285, "returns"]], "Attributes": [[8, "attributes"], [22, "attributes"], [28, "attributes"], [32, "attributes"], [37, "attributes"], [41, "attributes"], [46, "attributes"], [56, "attributes"], [70, "attributes"], [81, "attributes"], [91, "attributes"], [100, "attributes"], [105, "attributes"], [114, "attributes"], [127, "attributes"], [139, "attributes"], [147, "attributes"], [161, "attributes"], [167, "attributes"], [185, "attributes"], [447, "attributes"], [455, "attributes"], [475, "attributes"], [482, "attributes"], [498, "attributes"], [505, "attributes"], [508, "attributes"], [513, "attributes"], [521, "attributes"], [530, "attributes"], [542, "attributes"], [556, "attributes"], [564, "attributes"], [574, "attributes"], [581, "attributes"], [585, "attributes"], [590, "attributes"], [596, "attributes"], [602, "attributes"], [607, "attributes"], [614, "attributes"], [618, "attributes"], [623, "attributes"], [633, "attributes"], [645, "attributes"], [651, "attributes"], [657, "attributes"], [678, "attributes"], [682, "attributes"], [689, "attributes"], [694, "attributes"], [701, "attributes"], [707, "attributes"], [717, "attributes"], [733, "attributes"], [739, "attributes"], [745, "attributes"], [750, "attributes"], [756, "attributes"], [777, "attributes"], [782, "attributes"], [787, "attributes"], [793, "attributes"], [798, "attributes"], [804, "attributes"], [808, "attributes"], [814, "attributes"], [818, "attributes"], [823, "attributes"], [832, "attributes"], [852, "attributes"], [864, "attributes"], [867, "attributes"], [873, "attributes"], [878, "attributes"], [881, "attributes"], [889, "attributes"], [921, "attributes"], [929, "attributes"], [936, "attributes"], [943, "attributes"], [959, "attributes"], [982, "attributes"], [1007, "attributes"], [1055, "attributes"], [1062, "attributes"], [1073, "attributes"], [1121, "attributes"], [1176, "attributes"], [1186, "attributes"], [1196, "attributes"], [1206, "attributes"], [1229, "attributes"], [1245, "attributes"], [1262, "attributes"]], "Examples": [[206, "examples"], [278, "examples"], [325, "examples"], [366, "examples"], [368, "examples"], [1137, "examples"], [1175, "examples"], [1304, "examples"]], "See Also": [[206, "see-also"], [325, "see-also"]], "Yields": [[847, "yields"], [854, "yields"], [855, "yields"], [856, "yields"], [857, "yields"], [858, "yields"], [859, "yields"]], "Raises": [[1137, "raises"], [1175, "raises"]], "Notes": [[1137, "notes"], [1175, "notes"]], "API": [[1286, "api"]], "foxes.algorithms": [[1287, "foxes-algorithms"]], "Downwind algorithm": [[1288, "downwind-algorithm"]], "Downwind algorithm models": [[1288, "downwind-algorithm-models"]], "Iterative algorithm": [[1289, "iterative-algorithm"]], "Iterative algorithm models": [[1289, "iterative-algorithm-models"]], "foxes.constants": [[1290, "foxes-constants"]], "foxes.core": [[1291, "foxes-core"]], "foxes": [[1292, "foxes"]], "foxes.input": [[1293, "foxes-input"]], "foxes.input.farm_layout": [[1293, "foxes-input-farm-layout"]], "foxes.input.states": [[1293, "foxes-input-states"]], "foxes.input.windio": [[1293, "foxes-input-windio"]], "foxes.models": [[1294, "foxes-models"]], "foxes.models.farm_controllers": [[1294, "foxes-models-farm-controllers"]], "foxes.models.farm_models": [[1294, "foxes-models-farm-models"]], "foxes.models.partial_wakes": [[1294, "foxes-models-partial-wakes"]], "foxes.models.point_models": [[1294, "foxes-models-point-models"]], "foxes.models.rotor_models": [[1294, "foxes-models-rotor-models"]], "foxes.models.turbine_models": [[1294, "foxes-models-turbine-models"]], "foxes.models.turbine_types": [[1294, "foxes-models-turbine-types"]], "foxes.models.vertical_profiles": [[1294, "foxes-models-vertical-profiles"]], "foxes.models.wake_frames": [[1294, "foxes-models-wake-frames"]], "foxes.models.wake_models": [[1294, "foxes-models-wake-models"], [1302, "foxes-models-wake-models"]], "foxes.models.wake_superpositions": [[1294, "foxes-models-wake-superpositions"]], "foxes.opt": [[1295, "foxes-opt"]], "foxes.opt.core": [[1295, "foxes-opt-core"]], "foxes.opt.problems": [[1295, "foxes-opt-problems"], [1296, "foxes-opt-problems"]], "foxes.opt.objectives": [[1295, "foxes-opt-objectives"]], "foxes.opt.constraints": [[1295, "foxes-opt-constraints"]], "foxes.opt.problems.layout": [[1296, "foxes-opt-problems-layout"]], "foxes.opt.problems.layout.geom_layouts": [[1296, "foxes-opt-problems-layout-geom-layouts"], [1297, "foxes-opt-problems-layout-geom-layouts"]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1297, "foxes-opt-problems-layout-geom-layouts-objectives"]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1297, "foxes-opt-problems-layout-geom-layouts-constraints"]], "foxes.output": [[1298, "foxes-output"]], "foxes.utils": [[1299, "foxes-utils"]], "foxes.utils.abl": [[1299, "foxes-utils-abl"]], "foxes.utils.geom2d": [[1299, "foxes-utils-geom2d"]], "foxes.utils.runners": [[1299, "foxes-utils-runners"]], "foxes.utils.two_circles": [[1299, "foxes-utils-two-circles"]], "foxes.utils.abl.neutral": [[1300, "foxes-utils-abl-neutral"]], "foxes.utils.abl.stable": [[1300, "foxes-utils-abl-stable"]], "foxes.utils.abl.unstable": [[1300, "foxes-utils-abl-unstable"]], "foxes.utils.abl.sheared": [[1300, "foxes-utils-abl-sheared"]], "foxes.variables": [[1301, "foxes-variables"]], "foxes.models.wake_models.wind": [[1302, "foxes-models-wake-models-wind"]], "foxes.models.wake_models.ti": [[1302, "foxes-models-wake-models-ti"]], "Citation": [[1303, "citation"]], "History": [[1305, "history"]], "v0.1.0-alpha": [[1305, "v0-1-0-alpha"]], "v0.1.1-alpha": [[1305, "v0-1-1-alpha"]], "v0.1.2-alpha": [[1305, "v0-1-2-alpha"]], "v0.1.3-alpha": [[1305, "v0-1-3-alpha"]], "v0.1.4-alpha": [[1305, "v0-1-4-alpha"]], "v0.2.0-alpha": [[1305, "v0-2-0-alpha"]], "v0.2.1-alpha": [[1305, "v0-2-1-alpha"]], "v0.2.2-alpha": [[1305, "v0-2-2-alpha"]], "v0.2.3-alpha": [[1305, "v0-2-3-alpha"]], "v0.2.4-alpha": [[1305, "v0-2-4-alpha"]], "v0.2.5-alpha": [[1305, "v0-2-5-alpha"]], "v0.2.6-alpha": [[1305, "v0-2-6-alpha"]], "v0.3.0-alpha": [[1305, "v0-3-0-alpha"]], "v0.3.1-alpha": [[1305, "v0-3-1-alpha"]], "v0.3.2-alpha": [[1305, "v0-3-2-alpha"]], "v0.3.3-alpha": [[1305, "v0-3-3-alpha"]], "v0.3.4-alpha": [[1305, "v0-3-4-alpha"]], "v0.3.5-alpha": [[1305, "v0-3-5-alpha"]], "v0.4.0": [[1305, "v0-4-0"]], "v0.4.1": [[1305, "v0-4-1"]], "v0.4.2": [[1305, "v0-4-2"]], "Welcome to FOXES": [[1306, "welcome-to-foxes"]], "License": [[1306, "license"]], "Contents": [[1306, "contents"]], "Contributing": [[1306, "contributing"]], "Acknowledgements": [[1306, "acknowledgements"]], "Installation": [[1307, "installation"]], "Requirements": [[1307, "requirements"]], "Installation via pip": [[1307, "installation-via-pip"]], "Virtual Python environment": [[1307, "virtual-python-environment"], [1307, "id1"]], "Standard users": [[1307, "standard-users"], [1307, "id2"]], "Developers": [[1307, "developers"], [1307, "id3"]], "Installation via conda": [[1307, "installation-via-conda"]], "Static data": [[1308, "Static-data"]], "Wind farm layout data": [[1308, "Wind-farm-layout-data"]], "test_farm_67.csv": [[1308, "test_farm_67.csv"]], "Ambient states data": [[1308, "Ambient-states-data"]], "WRF-Timeseries-4464.csv.gz": [[1308, "WRF-Timeseries-4464.csv.gz"]], "abl_states_6000.csv.gz": [[1308, "abl_states_6000.csv.gz"]], "timeseries_3000.csv.gz": [[1308, "timeseries_3000.csv.gz"]], "timeseries_8000.csv.gz": [[1308, "timeseries_8000.csv.gz"]], "timeseries_100.csv.gz": [[1308, "timeseries_100.csv.gz"]], "wind_rose_bremen.csv": [[1308, "wind_rose_bremen.csv"]], "wind_rotation.nc": [[1308, "wind_rotation.nc"]], "Power and thrust curves": [[1308, "Power-and-thrust-curves"]], "DTU-10MW-D178d3-H119.csv": [[1308, "DTU-10MW-D178d3-H119.csv"]], "IEA-15MW-D240-H150.csv": [[1308, "IEA-15MW-D240-H150.csv"]], "IWT-7d5MW-D164-H100.csv": [[1308, "IWT-7d5MW-D164-H100.csv"]], "NREL-5MW-D126-H90.csv": [[1308, "NREL-5MW-D126-H90.csv"]], "File paths": [[1308, "File-paths"]], "Heterogeneous flow": [[1309, "Heterogeneous-flow"]], "Layout optimization": [[1310, "Layout-optimization"]], "The model book": [[1311, "The-model-book"]], "Multi-height wind data": [[1312, "Multi-height-wind-data"]], "Overview - how to setup foxes": [[1313, "Overview---how-to-setup-foxes"]], "Power mask": [[1314, "Power-mask"]], "Wind sector management": [[1315, "Wind-sector-management"]], "Single row of turbines": [[1316, "Single-row-of-turbines"]], "Dynamic wakes": [[1317, "Dynamic-wakes"]], "Timeseries data": [[1318, "Timeseries-data"]], "Wind rose data": [[1319, "Wind-rose-data"]], "Yawed rotor wakes": [[1320, "Yawed-rotor-wakes"]]}, "indexentries": {"pep 585": [[206, "index-0"], [325, "index-0"]], "python enhancement proposals": [[206, "index-0"], [325, "index-0"]]}, "docurls": ["_algorithms/Downwind.html", "_algorithms/Downwind.__init__.html", "_algorithms/Downwind.calc_farm.html", "_algorithms/Downwind.calc_points.html", "_algorithms/Downwind.finalize.html", "_algorithms/Downwind.get_model.html", "_algorithms/Downwind.init_states.html", "_algorithms/Downwind.initialize.html", "_algorithms/Iterative.html", "_algorithms/Iterative.__init__.html", "_algorithms/Iterative.calc_farm.html", "_algorithms/Iterative.get_model.html", "_algorithms/Iterative.iterations.html", "_algorithms/downwind/models/CalcOrder.html", "_algorithms/downwind/models/CalcOrder.calculate.html", "_algorithms/downwind/models/CalcOrder.initialize.html", "_algorithms/downwind/models/CalcOrder.output_farm_vars.html", "_algorithms/downwind/models/FarmWakesCalculation.html", "_algorithms/downwind/models/FarmWakesCalculation.__init__.html", "_algorithms/downwind/models/FarmWakesCalculation.calculate.html", "_algorithms/downwind/models/FarmWakesCalculation.initialize.html", "_algorithms/downwind/models/FarmWakesCalculation.output_farm_vars.html", "_algorithms/downwind/models/PointWakesCalculation.html", "_algorithms/downwind/models/PointWakesCalculation.__init__.html", "_algorithms/downwind/models/PointWakesCalculation.calculate.html", "_algorithms/downwind/models/PointWakesCalculation.contribute_to_wake_deltas.html", "_algorithms/downwind/models/PointWakesCalculation.initialize.html", "_algorithms/downwind/models/PointWakesCalculation.output_point_vars.html", "_algorithms/downwind/models/SetAmbFarmResults.html", "_algorithms/downwind/models/SetAmbFarmResults.__init__.html", "_algorithms/downwind/models/SetAmbFarmResults.calculate.html", "_algorithms/downwind/models/SetAmbFarmResults.output_farm_vars.html", "_algorithms/downwind/models/SetAmbPointResults.html", "_algorithms/downwind/models/SetAmbPointResults.__init__.html", "_algorithms/downwind/models/SetAmbPointResults.calculate.html", "_algorithms/downwind/models/SetAmbPointResults.initialize.html", "_algorithms/downwind/models/SetAmbPointResults.output_point_vars.html", "_algorithms/iterative/ConvCrit.html", "_algorithms/iterative/ConvCrit.__init__.html", "_algorithms/iterative/ConvCrit.check_converged.html", "_algorithms/iterative/ConvCrit.get_deltas.html", "_algorithms/iterative/ConvCritList.html", "_algorithms/iterative/ConvCritList.__init__.html", "_algorithms/iterative/ConvCritList.add_crit.html", "_algorithms/iterative/ConvCritList.check_converged.html", "_algorithms/iterative/ConvCritList.get_deltas.html", "_algorithms/iterative/ConvVarDelta.html", "_algorithms/iterative/ConvVarDelta.__init__.html", "_algorithms/iterative/ConvVarDelta.check_converged.html", "_algorithms/iterative/ConvVarDelta.get_deltas.html", "_algorithms/iterative/DefaultConv.html", "_algorithms/iterative/DefaultConv.__init__.html", "_algorithms/iterative/models/FarmWakesCalculation.html", "_algorithms/iterative/models/FarmWakesCalculation.calculate.html", "_algorithms/iterative/models/FarmWakesCalculation.initialize.html", "_algorithms/iterative/models/FarmWakesCalculation.output_farm_vars.html", "_core/Algorithm.html", "_core/Algorithm.__init__.html", "_core/Algorithm.chunked.html", "_core/Algorithm.cleanup.html", "_core/Algorithm.finalize.html", "_core/Algorithm.finalize_model.html", "_core/Algorithm.get_models_data.html", "_core/Algorithm.idata_mem.html", "_core/Algorithm.initialize.html", "_core/Algorithm.new.html", "_core/Algorithm.new_point_data.html", "_core/Algorithm.print.html", "_core/Algorithm.update_idata.html", "_core/Algorithm.update_n_turbines.html", "_core/Data.html", "_core/Data.__init__.html", "_core/Data.add.html", "_core/Data.from_points.html", "_core/Data.n_points.html", "_core/Data.n_states.html", "_core/Data.n_turbines.html", "_core/Data.states_i0.html", "_core/DataCalcModel.html", "_core/DataCalcModel.calculate.html", "_core/DataCalcModel.run_calculation.html", "_core/ExtendedStates.html", "_core/ExtendedStates.__init__.html", "_core/ExtendedStates.append.html", "_core/ExtendedStates.calculate.html", "_core/ExtendedStates.finalize.html", "_core/ExtendedStates.index.html", "_core/ExtendedStates.initialize.html", "_core/ExtendedStates.output_point_vars.html", "_core/ExtendedStates.size.html", "_core/ExtendedStates.weights.html", "_core/FarmController.html", "_core/FarmController.__init__.html", "_core/FarmController.calculate.html", "_core/FarmController.collect_models.html", "_core/FarmController.finalize.html", "_core/FarmController.initialize.html", "_core/FarmController.keep.html", "_core/FarmController.output_farm_vars.html", "_core/FarmController.set_pars.html", "_core/FarmDataModel.html", "_core/FarmDataModel.__init__.html", "_core/FarmDataModel.calculate.html", "_core/FarmDataModel.output_farm_vars.html", "_core/FarmDataModel.run_calculation.html", "_core/FarmDataModelList.html", "_core/FarmDataModelList.__init__.html", "_core/FarmDataModelList.append.html", "_core/FarmDataModelList.calculate.html", "_core/FarmDataModelList.finalize.html", "_core/FarmDataModelList.initialize.html", "_core/FarmDataModelList.keep.html", "_core/FarmDataModelList.output_farm_vars.html", "_core/FarmModel.html", "_core/Model.html", "_core/Model.__init__.html", "_core/Model.__repr__.html", "_core/Model.data_to_store.html", "_core/Model.finalize.html", "_core/Model.from_data_or_store.html", "_core/Model.get_data.html", "_core/Model.initialize.html", "_core/Model.initialized.html", "_core/Model.keep.html", "_core/Model.model_id.html", "_core/Model.reduce_states.html", "_core/Model.var.html", "_core/PartialWakesModel.html", "_core/PartialWakesModel.__init__.html", "_core/PartialWakesModel.contribute_to_wake_deltas.html", "_core/PartialWakesModel.evaluate_results.html", "_core/PartialWakesModel.initialize.html", "_core/PartialWakesModel.keep.html", "_core/PartialWakesModel.new.html", "_core/PartialWakesModel.new_wake_deltas.html", "_core/PointDataModel.html", "_core/PointDataModel.calculate.html", "_core/PointDataModel.output_point_vars.html", "_core/PointDataModel.run_calculation.html", "_core/PointDataModelList.html", "_core/PointDataModelList.__init__.html", "_core/PointDataModelList.append.html", "_core/PointDataModelList.calculate.html", "_core/PointDataModelList.finalize.html", "_core/PointDataModelList.initialize.html", "_core/PointDataModelList.keep.html", "_core/PointDataModelList.output_point_vars.html", "_core/RotorModel.html", "_core/RotorModel.__init__.html", "_core/RotorModel.calculate.html", "_core/RotorModel.design_points.html", "_core/RotorModel.eval_rpoint_results.html", "_core/RotorModel.get_rotor_points.html", "_core/RotorModel.n_rotor_points.html", "_core/RotorModel.output_farm_vars.html", "_core/RotorModel.rotor_point_weights.html", "_core/States.html", "_core/States.index.html", "_core/States.output_point_vars.html", "_core/States.size.html", "_core/States.weights.html", "_core/Turbine.html", "_core/Turbine.__init__.html", "_core/Turbine.add_model.html", "_core/Turbine.insert_model.html", "_core/TurbineModel.html", "_core/TurbineModel.calculate.html", "_core/TurbineType.html", "_core/TurbineType.__init__.html", "_core/VerticalProfile.html", "_core/VerticalProfile.calculate.html", "_core/VerticalProfile.input_vars.html", "_core/VerticalProfile.new.html", "_core/WakeFrame.html", "_core/WakeFrame.calc_centreline_integral.html", "_core/WakeFrame.calc_order.html", "_core/WakeFrame.get_centreline_points.html", "_core/WakeFrame.get_wake_coos.html", "_core/WakeModel.html", "_core/WakeModel.contribute_to_wake_deltas.html", "_core/WakeModel.finalize_wake_deltas.html", "_core/WakeModel.init_wake_deltas.html", "_core/WakeSuperposition.html", "_core/WakeSuperposition.calc_final_wake_delta.html", "_core/WakeSuperposition.calc_wakes_plus_wake.html", "_core/WindFarm.html", "_core/WindFarm.__init__.html", "_core/WindFarm.add_turbine.html", "_core/WindFarm.n_turbines.html", "_core/WindFarm.turbine_names.html", "_data/StaticData.html", "_data/StaticData.__init__.html", "_data/parse_Pct_file_name.html", "_data/parse_Pct_two_files.html", "_foxes/constants/AMB_RPOINT_RESULTS.html", "_foxes/constants/DTYPE.html", "_foxes/constants/DTYPE.T.html", "_foxes/constants/DTYPE.__abs__.html", "_foxes/constants/DTYPE.__add__.html", "_foxes/constants/DTYPE.__and__.html", "_foxes/constants/DTYPE.__array__.html", "_foxes/constants/DTYPE.__array_interface__.html", "_foxes/constants/DTYPE.__array_priority__.html", "_foxes/constants/DTYPE.__array_struct__.html", "_foxes/constants/DTYPE.__array_wrap__.html", "_foxes/constants/DTYPE.__bool__.html", "_foxes/constants/DTYPE.__class_getitem__.html", "_foxes/constants/DTYPE.__divmod__.html", "_foxes/constants/DTYPE.__eq__.html", "_foxes/constants/DTYPE.__float__.html", "_foxes/constants/DTYPE.__floordiv__.html", "_foxes/constants/DTYPE.__format__.html", "_foxes/constants/DTYPE.__ge__.html", "_foxes/constants/DTYPE.__getitem__.html", "_foxes/constants/DTYPE.__gt__.html", "_foxes/constants/DTYPE.__hash__.html", "_foxes/constants/DTYPE.__int__.html", "_foxes/constants/DTYPE.__invert__.html", "_foxes/constants/DTYPE.__le__.html", "_foxes/constants/DTYPE.__lshift__.html", "_foxes/constants/DTYPE.__lt__.html", "_foxes/constants/DTYPE.__mod__.html", "_foxes/constants/DTYPE.__mul__.html", "_foxes/constants/DTYPE.__ne__.html", "_foxes/constants/DTYPE.__neg__.html", "_foxes/constants/DTYPE.__new__.html", "_foxes/constants/DTYPE.__or__.html", "_foxes/constants/DTYPE.__pos__.html", "_foxes/constants/DTYPE.__pow__.html", "_foxes/constants/DTYPE.__radd__.html", "_foxes/constants/DTYPE.__rand__.html", "_foxes/constants/DTYPE.__rdivmod__.html", "_foxes/constants/DTYPE.__reduce__.html", "_foxes/constants/DTYPE.__repr__.html", "_foxes/constants/DTYPE.__rfloordiv__.html", "_foxes/constants/DTYPE.__rlshift__.html", "_foxes/constants/DTYPE.__rmod__.html", "_foxes/constants/DTYPE.__rmul__.html", "_foxes/constants/DTYPE.__ror__.html", "_foxes/constants/DTYPE.__rpow__.html", "_foxes/constants/DTYPE.__rrshift__.html", "_foxes/constants/DTYPE.__rshift__.html", "_foxes/constants/DTYPE.__rsub__.html", "_foxes/constants/DTYPE.__rtruediv__.html", "_foxes/constants/DTYPE.__rxor__.html", "_foxes/constants/DTYPE.__sizeof__.html", "_foxes/constants/DTYPE.__str__.html", "_foxes/constants/DTYPE.__sub__.html", "_foxes/constants/DTYPE.__truediv__.html", "_foxes/constants/DTYPE.__xor__.html", "_foxes/constants/DTYPE.all.html", "_foxes/constants/DTYPE.any.html", "_foxes/constants/DTYPE.argmax.html", "_foxes/constants/DTYPE.argmin.html", "_foxes/constants/DTYPE.argsort.html", "_foxes/constants/DTYPE.as_integer_ratio.html", "_foxes/constants/DTYPE.astype.html", "_foxes/constants/DTYPE.base.html", "_foxes/constants/DTYPE.byteswap.html", "_foxes/constants/DTYPE.choose.html", "_foxes/constants/DTYPE.clip.html", "_foxes/constants/DTYPE.compress.html", "_foxes/constants/DTYPE.conj.html", "_foxes/constants/DTYPE.conjugate.html", "_foxes/constants/DTYPE.copy.html", "_foxes/constants/DTYPE.cumprod.html", "_foxes/constants/DTYPE.cumsum.html", "_foxes/constants/DTYPE.data.html", "_foxes/constants/DTYPE.diagonal.html", "_foxes/constants/DTYPE.dtype.html", "_foxes/constants/DTYPE.dump.html", "_foxes/constants/DTYPE.dumps.html", "_foxes/constants/DTYPE.fill.html", "_foxes/constants/DTYPE.flags.html", "_foxes/constants/DTYPE.flat.html", "_foxes/constants/DTYPE.flatten.html", "_foxes/constants/DTYPE.getfield.html", "_foxes/constants/DTYPE.imag.html", "_foxes/constants/DTYPE.is_integer.html", "_foxes/constants/DTYPE.item.html", "_foxes/constants/DTYPE.itemset.html", "_foxes/constants/DTYPE.itemsize.html", "_foxes/constants/DTYPE.max.html", "_foxes/constants/DTYPE.mean.html", "_foxes/constants/DTYPE.min.html", "_foxes/constants/DTYPE.nbytes.html", "_foxes/constants/DTYPE.ndim.html", "_foxes/constants/DTYPE.newbyteorder.html", "_foxes/constants/DTYPE.nonzero.html", "_foxes/constants/DTYPE.prod.html", "_foxes/constants/DTYPE.ptp.html", "_foxes/constants/DTYPE.put.html", "_foxes/constants/DTYPE.ravel.html", "_foxes/constants/DTYPE.real.html", "_foxes/constants/DTYPE.repeat.html", "_foxes/constants/DTYPE.reshape.html", "_foxes/constants/DTYPE.resize.html", "_foxes/constants/DTYPE.round.html", "_foxes/constants/DTYPE.searchsorted.html", "_foxes/constants/DTYPE.setfield.html", "_foxes/constants/DTYPE.setflags.html", "_foxes/constants/DTYPE.shape.html", "_foxes/constants/DTYPE.size.html", "_foxes/constants/DTYPE.sort.html", "_foxes/constants/DTYPE.squeeze.html", "_foxes/constants/DTYPE.std.html", "_foxes/constants/DTYPE.strides.html", "_foxes/constants/DTYPE.sum.html", "_foxes/constants/DTYPE.swapaxes.html", "_foxes/constants/DTYPE.take.html", "_foxes/constants/DTYPE.tobytes.html", "_foxes/constants/DTYPE.tofile.html", "_foxes/constants/DTYPE.tolist.html", "_foxes/constants/DTYPE.tostring.html", "_foxes/constants/DTYPE.trace.html", "_foxes/constants/DTYPE.transpose.html", "_foxes/constants/DTYPE.var.html", "_foxes/constants/DTYPE.view.html", "_foxes/constants/FARM.html", "_foxes/constants/GW.html", "_foxes/constants/ITYPE.html", "_foxes/constants/ITYPE.__abs__.html", "_foxes/constants/ITYPE.__add__.html", "_foxes/constants/ITYPE.__and__.html", "_foxes/constants/ITYPE.__bool__.html", "_foxes/constants/ITYPE.__class_getitem__.html", "_foxes/constants/ITYPE.__divmod__.html", "_foxes/constants/ITYPE.__eq__.html", "_foxes/constants/ITYPE.__float__.html", "_foxes/constants/ITYPE.__floordiv__.html", "_foxes/constants/ITYPE.__ge__.html", "_foxes/constants/ITYPE.__gt__.html", "_foxes/constants/ITYPE.__hash__.html", "_foxes/constants/ITYPE.__index__.html", "_foxes/constants/ITYPE.__int__.html", "_foxes/constants/ITYPE.__invert__.html", "_foxes/constants/ITYPE.__le__.html", "_foxes/constants/ITYPE.__lshift__.html", "_foxes/constants/ITYPE.__lt__.html", "_foxes/constants/ITYPE.__mod__.html", "_foxes/constants/ITYPE.__mul__.html", "_foxes/constants/ITYPE.__ne__.html", "_foxes/constants/ITYPE.__neg__.html", "_foxes/constants/ITYPE.__new__.html", "_foxes/constants/ITYPE.__or__.html", "_foxes/constants/ITYPE.__pos__.html", "_foxes/constants/ITYPE.__pow__.html", "_foxes/constants/ITYPE.__radd__.html", "_foxes/constants/ITYPE.__rand__.html", "_foxes/constants/ITYPE.__rdivmod__.html", "_foxes/constants/ITYPE.__repr__.html", "_foxes/constants/ITYPE.__rfloordiv__.html", "_foxes/constants/ITYPE.__rlshift__.html", "_foxes/constants/ITYPE.__rmod__.html", "_foxes/constants/ITYPE.__rmul__.html", "_foxes/constants/ITYPE.__ror__.html", "_foxes/constants/ITYPE.__rpow__.html", "_foxes/constants/ITYPE.__rrshift__.html", "_foxes/constants/ITYPE.__rshift__.html", "_foxes/constants/ITYPE.__rsub__.html", "_foxes/constants/ITYPE.__rtruediv__.html", "_foxes/constants/ITYPE.__rxor__.html", "_foxes/constants/ITYPE.__str__.html", "_foxes/constants/ITYPE.__sub__.html", "_foxes/constants/ITYPE.__truediv__.html", "_foxes/constants/ITYPE.__xor__.html", "_foxes/constants/ITYPE.bit_count.html", "_foxes/constants/ITYPE.denominator.html", "_foxes/constants/ITYPE.is_integer.html", "_foxes/constants/ITYPE.numerator.html", "_foxes/constants/KAPPA.html", "_foxes/constants/MW.html", "_foxes/constants/POINT.html", "_foxes/constants/POINTS.html", "_foxes/constants/POP.html", "_foxes/constants/P_UNITS.html", "_foxes/constants/RPOINT.html", "_foxes/constants/RPOINTS.html", "_foxes/constants/RWEIGHTS.html", "_foxes/constants/STATE.html", "_foxes/constants/STATES_SEL.html", "_foxes/constants/STATE_POINT.html", "_foxes/constants/STATE_SOURCE_TURBINE.html", "_foxes/constants/STATE_TURBINE.html", "_foxes/constants/TMODELS.html", "_foxes/constants/TMODEL_SELS.html", "_foxes/constants/TNAME.html", "_foxes/constants/TURBINE.html", "_foxes/constants/TW.html", "_foxes/constants/VALID.html", "_foxes/constants/VARS.html", "_foxes/constants/W.html", "_foxes/constants/XYH.html", "_foxes/constants/kW.html", "_foxes/variables/AMB_CAP.html", "_foxes/variables/AMB_CT.html", "_foxes/variables/AMB_P.html", "_foxes/variables/AMB_REWS.html", "_foxes/variables/AMB_REWS2.html", "_foxes/variables/AMB_REWS3.html", "_foxes/variables/AMB_RHO.html", "_foxes/variables/AMB_T.html", "_foxes/variables/AMB_TI.html", "_foxes/variables/AMB_WD.html", "_foxes/variables/AMB_WS.html", "_foxes/variables/AMB_YAW.html", "_foxes/variables/AMB_YAWM.html", "_foxes/variables/AMB_YLD.html", "_foxes/variables/CAP.html", "_foxes/variables/CT.html", "_foxes/variables/D.html", "_foxes/variables/EFF.html", "_foxes/variables/H.html", "_foxes/variables/K.html", "_foxes/variables/KB.html", "_foxes/variables/KTI.html", "_foxes/variables/MAX_P.html", "_foxes/variables/MOL.html", "_foxes/variables/ORDER.html", "_foxes/variables/P.html", "_foxes/variables/PA_ALPHA.html", "_foxes/variables/PA_BETA.html", "_foxes/variables/REWS.html", "_foxes/variables/REWS2.html", "_foxes/variables/REWS3.html", "_foxes/variables/RHO.html", "_foxes/variables/SHEAR.html", "_foxes/variables/T.html", "_foxes/variables/TI.html", "_foxes/variables/TXYH.html", "_foxes/variables/WD.html", "_foxes/variables/WEIGHT.html", "_foxes/variables/WS.html", "_foxes/variables/X.html", "_foxes/variables/Y.html", "_foxes/variables/YAW.html", "_foxes/variables/YAWM.html", "_foxes/variables/YLD.html", "_foxes/variables/Z0.html", "_foxes/variables/amb2var.html", "_foxes/variables/var2amb.html", "_input/farm_layout/add_from_csv.html", "_input/farm_layout/add_from_df.html", "_input/farm_layout/add_from_file.html", "_input/farm_layout/add_from_json.html", "_input/farm_layout/add_grid.html", "_input/farm_layout/add_row.html", "_input/states/FieldDataNC.html", "_input/states/FieldDataNC.__init__.html", "_input/states/FieldDataNC.calculate.html", "_input/states/FieldDataNC.index.html", "_input/states/FieldDataNC.initialize.html", "_input/states/FieldDataNC.output_point_vars.html", "_input/states/FieldDataNC.size.html", "_input/states/FieldDataNC.weights.html", "_input/states/MultiHeightStates.html", "_input/states/MultiHeightStates.RDICT.html", "_input/states/MultiHeightStates.__init__.html", "_input/states/MultiHeightStates.calculate.html", "_input/states/MultiHeightStates.finalize.html", "_input/states/MultiHeightStates.index.html", "_input/states/MultiHeightStates.initialize.html", "_input/states/MultiHeightStates.output_point_vars.html", "_input/states/MultiHeightStates.reset.html", "_input/states/MultiHeightStates.size.html", "_input/states/MultiHeightStates.weights.html", "_input/states/MultiHeightTimeseries.html", "_input/states/MultiHeightTimeseries.RDICT.html", "_input/states/ScanWS.html", "_input/states/ScanWS.__init__.html", "_input/states/ScanWS.calculate.html", "_input/states/ScanWS.initialize.html", "_input/states/ScanWS.output_point_vars.html", "_input/states/ScanWS.size.html", "_input/states/ScanWS.weights.html", "_input/states/SingleStateStates.html", "_input/states/SingleStateStates.__init__.html", "_input/states/SingleStateStates.calculate.html", "_input/states/SingleStateStates.initialize.html", "_input/states/SingleStateStates.output_point_vars.html", "_input/states/SingleStateStates.size.html", "_input/states/SingleStateStates.weights.html", "_input/states/StatesTable.html", "_input/states/StatesTable.RDICT.html", "_input/states/StatesTable.__init__.html", "_input/states/StatesTable.calculate.html", "_input/states/StatesTable.finalize.html", "_input/states/StatesTable.index.html", "_input/states/StatesTable.initialize.html", "_input/states/StatesTable.output_point_vars.html", "_input/states/StatesTable.reset.html", "_input/states/StatesTable.size.html", "_input/states/StatesTable.weights.html", "_input/states/Timeseries.html", "_input/states/Timeseries.RDICT.html", "_input/states/create_random_abl_states.html", "_input/windio/read_case.html", "_models/farm_controllers/BasicFarmController.html", "_models/farm_models/Turbine2FarmModel.html", "_models/farm_models/Turbine2FarmModel.__init__.html", "_models/farm_models/Turbine2FarmModel.__repr__.html", "_models/farm_models/Turbine2FarmModel.calculate.html", "_models/farm_models/Turbine2FarmModel.finalize.html", "_models/farm_models/Turbine2FarmModel.initialize.html", "_models/farm_models/Turbine2FarmModel.output_farm_vars.html", "_models/model_book/Dict.html", "_models/model_book/Dict.__getitem__.html", "_models/model_book/Dict.__init__.html", "_models/model_book/ModelBook.html", "_models/model_book/ModelBook.__getitem__.html", "_models/model_book/ModelBook.__init__.html", "_models/model_book/ModelBook.finalize.html", "_models/model_book/ModelBook.print_toc.html", "_models/partial_wakes/Mapped.html", "_models/partial_wakes/Mapped.__init__.html", "_models/partial_wakes/Mapped.contribute_to_wake_deltas.html", "_models/partial_wakes/Mapped.evaluate_results.html", "_models/partial_wakes/Mapped.finalize.html", "_models/partial_wakes/Mapped.initialize.html", "_models/partial_wakes/Mapped.keep.html", "_models/partial_wakes/Mapped.new_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.html", "_models/partial_wakes/PartialAxiwake.__init__.html", "_models/partial_wakes/PartialAxiwake.__repr__.html", "_models/partial_wakes/PartialAxiwake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.evaluate_results.html", "_models/partial_wakes/PartialAxiwake.finalize.html", "_models/partial_wakes/PartialAxiwake.initialize.html", "_models/partial_wakes/PartialAxiwake.keep.html", "_models/partial_wakes/PartialAxiwake.new_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.html", "_models/partial_wakes/PartialDistSlicedWake.__init__.html", "_models/partial_wakes/PartialDistSlicedWake.__repr__.html", "_models/partial_wakes/PartialDistSlicedWake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.evaluate_results.html", "_models/partial_wakes/PartialDistSlicedWake.finalize.html", "_models/partial_wakes/PartialDistSlicedWake.initialize.html", "_models/partial_wakes/PartialDistSlicedWake.keep.html", "_models/partial_wakes/PartialDistSlicedWake.new_wake_deltas.html", "_models/partial_wakes/PartialGrid.html", "_models/partial_wakes/PartialGrid.__init__.html", "_models/partial_wakes/PartialGrid.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.html", "_models/partial_wakes/PartialTopHat.__init__.html", "_models/partial_wakes/PartialTopHat.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.evaluate_results.html", "_models/partial_wakes/PartialTopHat.finalize.html", "_models/partial_wakes/PartialTopHat.initialize.html", "_models/partial_wakes/PartialTopHat.keep.html", "_models/partial_wakes/PartialTopHat.new_wake_deltas.html", "_models/partial_wakes/RotorPoints.html", "_models/partial_wakes/RotorPoints.__init__.html", "_models/partial_wakes/RotorPoints.contribute_to_wake_deltas.html", "_models/partial_wakes/RotorPoints.evaluate_results.html", "_models/partial_wakes/RotorPoints.get_wake_points.html", "_models/partial_wakes/RotorPoints.new_wake_deltas.html", "_models/point_models/SetUniformData.html", "_models/point_models/SetUniformData.__init__.html", "_models/point_models/SetUniformData.calculate.html", "_models/point_models/SetUniformData.initialize.html", "_models/point_models/SetUniformData.output_point_vars.html", "_models/point_models/TKE2TI.html", "_models/point_models/TKE2TI.calculate.html", "_models/point_models/TKE2TI.output_point_vars.html", "_models/point_models/WakeDeltas.html", "_models/point_models/WakeDeltas.__init__.html", "_models/point_models/WakeDeltas.calculate.html", "_models/point_models/WakeDeltas.output_point_vars.html", "_models/rotor_models/CentreRotor.html", "_models/rotor_models/CentreRotor.design_points.html", "_models/rotor_models/CentreRotor.eval_rpoint_results.html", "_models/rotor_models/CentreRotor.get_rotor_points.html", "_models/rotor_models/CentreRotor.n_rotor_points.html", "_models/rotor_models/CentreRotor.rotor_point_weights.html", "_models/rotor_models/GridRotor.html", "_models/rotor_models/GridRotor.__init__.html", "_models/rotor_models/GridRotor.__repr__.html", "_models/rotor_models/GridRotor.design_points.html", "_models/rotor_models/GridRotor.initialize.html", "_models/rotor_models/GridRotor.n_rotor_points.html", "_models/rotor_models/GridRotor.rotor_point_weights.html", "_models/turbine_models/Calculator.html", "_models/turbine_models/Calculator.__init__.html", "_models/turbine_models/Calculator.calculate.html", "_models/turbine_models/Calculator.output_farm_vars.html", "_models/turbine_models/LookupTable.html", "_models/turbine_models/LookupTable.__init__.html", "_models/turbine_models/LookupTable.calculate.html", "_models/turbine_models/LookupTable.initialize.html", "_models/turbine_models/LookupTable.output_farm_vars.html", "_models/turbine_models/PowerMask.html", "_models/turbine_models/PowerMask.__init__.html", "_models/turbine_models/PowerMask.calculate.html", "_models/turbine_models/PowerMask.initialize.html", "_models/turbine_models/PowerMask.output_farm_vars.html", "_models/turbine_models/PowerMask.update_P_ct.html", "_models/turbine_models/RotorCentreCalc.html", "_models/turbine_models/RotorCentreCalc.__init__.html", "_models/turbine_models/RotorCentreCalc.calculate.html", "_models/turbine_models/RotorCentreCalc.finalize.html", "_models/turbine_models/RotorCentreCalc.initialize.html", "_models/turbine_models/RotorCentreCalc.output_farm_vars.html", "_models/turbine_models/SectorManagement.html", "_models/turbine_models/SectorManagement.__init__.html", "_models/turbine_models/SectorManagement.calculate.html", "_models/turbine_models/SectorManagement.initialize.html", "_models/turbine_models/SectorManagement.output_farm_vars.html", "_models/turbine_models/SetFarmVars.html", "_models/turbine_models/SetFarmVars.__init__.html", "_models/turbine_models/SetFarmVars.add_var.html", "_models/turbine_models/SetFarmVars.calculate.html", "_models/turbine_models/SetFarmVars.initialize.html", "_models/turbine_models/SetFarmVars.output_farm_vars.html", "_models/turbine_models/SetFarmVars.reset.html", "_models/turbine_models/SetXYHD.html", "_models/turbine_models/SetXYHD.__init__.html", "_models/turbine_models/SetXYHD.calculate.html", "_models/turbine_models/SetXYHD.output_farm_vars.html", "_models/turbine_models/TableFactors.html", "_models/turbine_models/TableFactors.__init__.html", "_models/turbine_models/TableFactors.calculate.html", "_models/turbine_models/TableFactors.initialize.html", "_models/turbine_models/TableFactors.output_farm_vars.html", "_models/turbine_models/Thrust2Ct.html", "_models/turbine_models/Thrust2Ct.__init__.html", "_models/turbine_models/Thrust2Ct.calculate.html", "_models/turbine_models/Thrust2Ct.output_farm_vars.html", "_models/turbine_models/YAW2YAWM.html", "_models/turbine_models/YAW2YAWM.calculate.html", "_models/turbine_models/YAW2YAWM.output_farm_vars.html", "_models/turbine_models/YAWM2YAW.html", "_models/turbine_models/YAWM2YAW.calculate.html", "_models/turbine_models/YAWM2YAW.output_farm_vars.html", "_models/turbine_models/kTI.html", "_models/turbine_models/kTI.__init__.html", "_models/turbine_models/kTI.__repr__.html", "_models/turbine_models/kTI.calculate.html", "_models/turbine_models/kTI.output_farm_vars.html", "_models/turbine_types/CpCtFile.html", "_models/turbine_types/CpCtFile.__init__.html", "_models/turbine_types/CpCtFromTwo.html", "_models/turbine_types/CpCtFromTwo.__init__.html", "_models/turbine_types/NullType.html", "_models/turbine_types/NullType.calculate.html", "_models/turbine_types/NullType.output_farm_vars.html", "_models/turbine_types/PCtFile.html", "_models/turbine_types/PCtFile.__init__.html", "_models/turbine_types/PCtFile.calculate.html", "_models/turbine_types/PCtFile.finalize.html", "_models/turbine_types/PCtFile.initialize.html", "_models/turbine_types/PCtFile.output_farm_vars.html", "_models/turbine_types/PCtFromTwo.html", "_models/turbine_types/PCtFromTwo.__init__.html", "_models/turbine_types/PCtFromTwo.calculate.html", "_models/turbine_types/PCtFromTwo.finalize.html", "_models/turbine_types/PCtFromTwo.initialize.html", "_models/turbine_types/PCtFromTwo.output_farm_vars.html", "_models/turbine_types/WsRho2PCtFromTwo.html", "_models/turbine_types/WsRho2PCtFromTwo.__init__.html", "_models/turbine_types/WsRho2PCtFromTwo.calculate.html", "_models/turbine_types/WsRho2PCtFromTwo.finalize.html", "_models/turbine_types/WsRho2PCtFromTwo.initialize.html", "_models/turbine_types/WsRho2PCtFromTwo.output_farm_vars.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.calculate.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogStableWsProfile.html", "_models/vertical_profiles/ABLLogStableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogStableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogWsProfile.html", "_models/vertical_profiles/ABLLogWsProfile.calculate.html", "_models/vertical_profiles/ABLLogWsProfile.input_vars.html", "_models/vertical_profiles/ShearedProfile.html", "_models/vertical_profiles/ShearedProfile.calculate.html", "_models/vertical_profiles/ShearedProfile.input_vars.html", "_models/vertical_profiles/UniformProfile.html", "_models/vertical_profiles/UniformProfile.__init__.html", "_models/vertical_profiles/UniformProfile.calculate.html", "_models/vertical_profiles/UniformProfile.input_vars.html", "_models/wake_frames/FarmOrder.html", "_models/wake_frames/FarmOrder.__init__.html", "_models/wake_frames/FarmOrder.calc_order.html", "_models/wake_frames/FarmOrder.finalize.html", "_models/wake_frames/FarmOrder.get_centreline_points.html", "_models/wake_frames/FarmOrder.get_wake_coos.html", "_models/wake_frames/FarmOrder.initialize.html", "_models/wake_frames/RotorWD.html", "_models/wake_frames/RotorWD.__init__.html", "_models/wake_frames/RotorWD.calc_order.html", "_models/wake_frames/RotorWD.get_centreline_points.html", "_models/wake_frames/RotorWD.get_wake_coos.html", "_models/wake_frames/Streamlines.html", "_models/wake_frames/Streamlines.__init__.html", "_models/wake_frames/Streamlines.__repr__.html", "_models/wake_frames/Streamlines.calc_order.html", "_models/wake_frames/Streamlines.get_centreline_points.html", "_models/wake_frames/Streamlines.get_wake_coos.html", "_models/wake_frames/Streamlines.initialize.html", "_models/wake_frames/Timelines.html", "_models/wake_frames/Timelines.__init__.html", "_models/wake_frames/Timelines.calc_order.html", "_models/wake_frames/Timelines.get_centreline_points.html", "_models/wake_frames/Timelines.get_wake_coos.html", "_models/wake_frames/Timelines.initialize.html", "_models/wake_frames/YawedWakes.html", "_models/wake_frames/YawedWakes.__init__.html", "_models/wake_frames/YawedWakes.calc_order.html", "_models/wake_frames/YawedWakes.finalize.html", "_models/wake_frames/YawedWakes.get_centreline_points.html", "_models/wake_frames/YawedWakes.get_wake_coos.html", "_models/wake_frames/YawedWakes.initialize.html", "_models/wake_models/AxisymmetricWakeModel.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.html", "_models/wake_models/DistSlicedWakeModel.__init__.html", "_models/wake_models/DistSlicedWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.contribute_to_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.finalize.html", "_models/wake_models/DistSlicedWakeModel.finalize_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.initialize.html", "_models/wake_models/DistSlicedWakeModel.keep.html", "_models/wake_models/GaussianWakeModel.html", "_models/wake_models/GaussianWakeModel.calc_amplitude_sigma_spsel.html", "_models/wake_models/GaussianWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/TopHatWakeModel.html", "_models/wake_models/TopHatWakeModel.__init__.html", "_models/wake_models/TopHatWakeModel.calc_centreline_wake_deltas.html", "_models/wake_models/TopHatWakeModel.calc_wake_radius.html", "_models/wake_models/TopHatWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/ti/CrespoHernandezTIWake.html", "_models/wake_models/ti/CrespoHernandezTIWake.__init__.html", "_models/wake_models/ti/CrespoHernandezTIWake.__repr__.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_wake_radius.html", "_models/wake_models/ti/CrespoHernandezTIWake.init_wake_deltas.html", "_models/wake_models/ti/IECTIWake.html", "_models/wake_models/ti/IECTIWake.__init__.html", "_models/wake_models/ti/IECTIWake.__repr__.html", "_models/wake_models/ti/IECTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/IECTIWake.calc_wake_radius.html", "_models/wake_models/ti/IECTIWake.init_wake_deltas.html", "_models/wake_models/wind/BastankhahWake.html", "_models/wake_models/wind/BastankhahWake.__init__.html", "_models/wake_models/wind/BastankhahWake.__repr__.html", "_models/wake_models/wind/BastankhahWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/BastankhahWake.init_wake_deltas.html", "_models/wake_models/wind/JensenWake.html", "_models/wake_models/wind/JensenWake.__init__.html", "_models/wake_models/wind/JensenWake.__repr__.html", "_models/wake_models/wind/JensenWake.calc_centreline_wake_deltas.html", "_models/wake_models/wind/JensenWake.calc_wake_radius.html", "_models/wake_models/wind/JensenWake.init_wake_deltas.html", "_models/wake_models/wind/PorteAgelModel.html", "_models/wake_models/wind/PorteAgelModel.AMPL_FAR.html", "_models/wake_models/wind/PorteAgelModel.AMPL_NEAR.html", "_models/wake_models/wind/PorteAgelModel.CHECK.html", "_models/wake_models/wind/PorteAgelModel.DELTA_FAR.html", "_models/wake_models/wind/PorteAgelModel.DELTA_NEAR.html", "_models/wake_models/wind/PorteAgelModel.MDATA_KEY.html", "_models/wake_models/wind/PorteAgelModel.NEAR.html", "_models/wake_models/wind/PorteAgelModel.PARS.html", "_models/wake_models/wind/PorteAgelModel.R_PC.html", "_models/wake_models/wind/PorteAgelModel.R_PC_S.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Y_FAR.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Z_FAR.html", "_models/wake_models/wind/PorteAgelModel.SP_SEL.html", "_models/wake_models/wind/PorteAgelModel.X0.html", "_models/wake_models/wind/PorteAgelModel.__init__.html", "_models/wake_models/wind/PorteAgelModel.calc_data.html", "_models/wake_models/wind/PorteAgelModel.clean.html", "_models/wake_models/wind/PorteAgelModel.get_data.html", "_models/wake_models/wind/PorteAgelModel.has_data.html", "_models/wake_models/wind/PorteAgelModel.pars.html", "_models/wake_models/wind/PorteAgelWake.html", "_models/wake_models/wind/PorteAgelWake.__init__.html", "_models/wake_models/wind/PorteAgelWake.__repr__.html", "_models/wake_models/wind/PorteAgelWake.calc_wakes_spsel_x_yz.html", "_models/wake_models/wind/PorteAgelWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWake.html", "_models/wake_models/wind/TurbOParkWake.__init__.html", "_models/wake_models/wind/TurbOParkWake.__repr__.html", "_models/wake_models/wind/TurbOParkWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWakeIX.html", "_models/wake_models/wind/TurbOParkWakeIX.__init__.html", "_models/wake_models/wind/TurbOParkWakeIX.__repr__.html", "_models/wake_models/wind/TurbOParkWakeIX.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWakeIX.finalize.html", "_models/wake_models/wind/TurbOParkWakeIX.init_wake_deltas.html", "_models/wake_superpositions/LinearSuperposition.html", "_models/wake_superpositions/LinearSuperposition.__init__.html", "_models/wake_superpositions/LinearSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/LinearSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/LinearSuperposition.input_farm_vars.html", "_models/wake_superpositions/MaxSuperposition.html", "_models/wake_superpositions/MaxSuperposition.__init__.html", "_models/wake_superpositions/MaxSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/MaxSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/MaxSuperposition.initialize.html", "_models/wake_superpositions/MaxSuperposition.input_farm_vars.html", "_models/wake_superpositions/ProductSuperposition.html", "_models/wake_superpositions/ProductSuperposition.__init__.html", "_models/wake_superpositions/ProductSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/ProductSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.html", "_models/wake_superpositions/QuadraticSuperposition.__init__.html", "_models/wake_superpositions/QuadraticSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/QuadraticSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.initialize.html", "_models/wake_superpositions/QuadraticSuperposition.input_farm_vars.html", "_models/wake_superpositions/TISuperposition.html", "_models/wake_superpositions/TISuperposition.__init__.html", "_models/wake_superpositions/TISuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/TISuperposition.calc_wakes_plus_wake.html", "_output/Animator.html", "_output/Animator.__init__.html", "_output/Animator.add_generator.html", "_output/Animator.animate.html", "_output/Animator.generators.html", "_output/FarmLayoutOutput.html", "_output/FarmLayoutOutput.__init__.html", "_output/FarmLayoutOutput.get_figure.html", "_output/FarmLayoutOutput.get_layout_data.html", "_output/FarmLayoutOutput.get_layout_dict.html", "_output/FarmLayoutOutput.write_csv.html", "_output/FarmLayoutOutput.write_json.html", "_output/FarmLayoutOutput.write_plot.html", "_output/FarmLayoutOutput.write_xyh.html", "_output/FarmResultsEval.html", "_output/FarmResultsEval.__init__.html", "_output/FarmResultsEval.add_capacity.html", "_output/FarmResultsEval.add_efficiency.html", "_output/FarmResultsEval.calc_farm_efficiency.html", "_output/FarmResultsEval.calc_farm_mean.html", "_output/FarmResultsEval.calc_farm_sum.html", "_output/FarmResultsEval.calc_farm_yield.html", "_output/FarmResultsEval.calc_mean_farm_power.html", "_output/FarmResultsEval.calc_states_mean.html", "_output/FarmResultsEval.calc_states_std.html", "_output/FarmResultsEval.calc_states_sum.html", "_output/FarmResultsEval.calc_turbine_mean.html", "_output/FarmResultsEval.calc_turbine_sum.html", "_output/FarmResultsEval.calc_turbine_yield.html", "_output/FarmResultsEval.gen_stdata.html", "_output/FarmResultsEval.reduce_all.html", "_output/FarmResultsEval.reduce_states.html", "_output/FarmResultsEval.reduce_turbines.html", "_output/FarmResultsEval.weinsum.html", "_output/FlowPlots2D.html", "_output/FlowPlots2D.__init__.html", "_output/FlowPlots2D.gen_states_fig_xy.html", "_output/FlowPlots2D.gen_states_fig_xz.html", "_output/FlowPlots2D.gen_states_fig_yz.html", "_output/FlowPlots2D.get_mean_fig_xy.html", "_output/FlowPlots2D.get_mean_fig_xz.html", "_output/FlowPlots2D.get_mean_fig_yz.html", "_output/Output.html", "_output/Output.new.html", "_output/Output.print_models.html", "_output/Output.write.html", "_output/ResultsWriter.html", "_output/ResultsWriter.__init__.html", "_output/ResultsWriter.write_csv.html", "_output/RosePlotOutput.html", "_output/RosePlotOutput.__init__.html", "_output/RosePlotOutput.get_data.html", "_output/RosePlotOutput.get_data_info.html", "_output/RosePlotOutput.get_figure.html", "_output/RosePlotOutput.write_figure.html", "_output/StateTurbineMap.html", "_output/StateTurbineMap.__init__.html", "_output/StateTurbineMap.plot_map.html", "_output/StatesRosePlotOutput.html", "_output/StatesRosePlotOutput.__init__.html", "_output/TurbineTypeCurves.html", "_output/TurbineTypeCurves.__init__.html", "_output/TurbineTypeCurves.plot_curves.html", "_utils/DataBook.html", "_utils/DataBook.__init__.html", "_utils/DataBook.add_data_package.html", "_utils/DataBook.add_data_package_file.html", "_utils/DataBook.add_file.html", "_utils/DataBook.add_files.html", "_utils/DataBook.get_file_path.html", "_utils/DataBook.toc.html", "_utils/PandasFileHelper.html", "_utils/PandasFileHelper.DATA_FILE_FORMATS.html", "_utils/PandasFileHelper.DEFAULT_FORMAT_DICT.html", "_utils/PandasFileHelper.DEFAULT_READING_PARAMETERS.html", "_utils/PandasFileHelper.DEFAULT_WRITING_PARAMETERS.html", "_utils/PandasFileHelper.read_file.html", "_utils/PandasFileHelper.write_file.html", "_utils/abl/neutral/calc_ws.html", "_utils/abl/neutral/logz.html", "_utils/abl/neutral/ustar.html", "_utils/abl/sheared/calc_ws.html", "_utils/abl/stable/calc_ws.html", "_utils/abl/stable/lgz.html", "_utils/abl/stable/logz.html", "_utils/abl/stable/psi.html", "_utils/abl/stable/ustar.html", "_utils/abl/unstable/calc_ws.html", "_utils/abl/unstable/logz.html", "_utils/abl/unstable/psi.html", "_utils/abl/unstable/ustar.html", "_utils/all_subclasses.html", "_utils/cubic_roots.html", "_utils/delta_wd.html", "_utils/geom2d/AreaGeometry.html", "_utils/geom2d/AreaGeometry.add_to_figure.html", "_utils/geom2d/AreaGeometry.inverse.html", "_utils/geom2d/AreaGeometry.p_max.html", "_utils/geom2d/AreaGeometry.p_min.html", "_utils/geom2d/AreaGeometry.points_distance.html", "_utils/geom2d/AreaGeometry.points_inside.html", "_utils/geom2d/AreaIntersection.html", "_utils/geom2d/AreaIntersection.__new__.html", "_utils/geom2d/AreaUnion.html", "_utils/geom2d/AreaUnion.__init__.html", "_utils/geom2d/AreaUnion.add_to_figure.html", "_utils/geom2d/AreaUnion.inverse.html", "_utils/geom2d/AreaUnion.p_max.html", "_utils/geom2d/AreaUnion.p_min.html", "_utils/geom2d/AreaUnion.points_distance.html", "_utils/geom2d/AreaUnion.points_inside.html", "_utils/geom2d/Circle.html", "_utils/geom2d/Circle.__init__.html", "_utils/geom2d/Circle.add_to_figure.html", "_utils/geom2d/Circle.p_max.html", "_utils/geom2d/Circle.p_min.html", "_utils/geom2d/Circle.points_distance.html", "_utils/geom2d/Circle.points_inside.html", "_utils/geom2d/ClosedPolygon.html", "_utils/geom2d/ClosedPolygon.__init__.html", "_utils/geom2d/ClosedPolygon.add_to_figure.html", "_utils/geom2d/ClosedPolygon.p_max.html", "_utils/geom2d/ClosedPolygon.p_min.html", "_utils/geom2d/ClosedPolygon.points_distance.html", "_utils/geom2d/ClosedPolygon.points_inside.html", "_utils/geom2d/HalfPlane.html", "_utils/geom2d/HalfPlane.__init__.html", "_utils/geom2d/HalfPlane.add_to_figure.html", "_utils/geom2d/HalfPlane.inverse.html", "_utils/geom2d/HalfPlane.p_max.html", "_utils/geom2d/HalfPlane.p_min.html", "_utils/geom2d/HalfPlane.points_distance.html", "_utils/geom2d/HalfPlane.points_inside.html", "_utils/geom2d/InvertedAreaGeometry.html", "_utils/geom2d/InvertedAreaGeometry.__init__.html", "_utils/geom2d/InvertedAreaGeometry.add_to_figure.html", "_utils/geom2d/InvertedAreaGeometry.inverse.html", "_utils/geom2d/InvertedAreaGeometry.p_max.html", "_utils/geom2d/InvertedAreaGeometry.p_min.html", "_utils/geom2d/InvertedAreaGeometry.points_distance.html", "_utils/geom2d/InvertedAreaGeometry.points_inside.html", "_utils/opt/constraints/AreaGeometryConstraint.html", "_utils/opt/constraints/AreaGeometryConstraint.__init__.html", "_utils/opt/constraints/AreaGeometryConstraint.__str__.html", "_utils/opt/constraints/AreaGeometryConstraint.ana_deriv.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_population.html", "_utils/opt/constraints/AreaGeometryConstraint.component_names.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_population.html", "_utils/opt/constraints/AreaGeometryConstraint.initialize.html", "_utils/opt/constraints/AreaGeometryConstraint.initialized.html", "_utils/opt/constraints/AreaGeometryConstraint.n_components.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_float.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_int.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_float.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_int.html", "_utils/opt/constraints/FarmBoundaryConstraint.html", "_utils/opt/constraints/FarmBoundaryConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.html", "_utils/opt/constraints/MinDistConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.calc_individual.html", "_utils/opt/constraints/MinDistConstraint.calc_population.html", "_utils/opt/constraints/MinDistConstraint.initialize.html", "_utils/opt/constraints/MinDistConstraint.n_components.html", "_utils/opt/constraints/MinDistConstraint.vardeps_float.html", "_utils/opt/core/FarmConstraint.html", "_utils/opt/core/FarmConstraint.__init__.html", "_utils/opt/core/FarmConstraint.add_to_layout_figure.html", "_utils/opt/core/FarmConstraint.calc_individual.html", "_utils/opt/core/FarmConstraint.calc_population.html", "_utils/opt/core/FarmConstraint.farm.html", "_utils/opt/core/FarmConstraint.n_components.html", "_utils/opt/core/FarmConstraint.n_sel_turbines.html", "_utils/opt/core/FarmConstraint.print_models.html", "_utils/opt/core/FarmConstraint.sel_turbines.html", "_utils/opt/core/FarmConstraint.vardeps_float.html", "_utils/opt/core/FarmObjective.html", "_utils/opt/core/FarmObjective.__init__.html", "_utils/opt/core/FarmObjective.add_to_layout_figure.html", "_utils/opt/core/FarmObjective.farm.html", "_utils/opt/core/FarmObjective.n_sel_turbines.html", "_utils/opt/core/FarmObjective.print_models.html", "_utils/opt/core/FarmObjective.sel_turbines.html", "_utils/opt/core/FarmOptProblem.html", "_utils/opt/core/FarmOptProblem.INT_INF.html", "_utils/opt/core/FarmOptProblem.__init__.html", "_utils/opt/core/FarmOptProblem.add_constraint.html", "_utils/opt/core/FarmOptProblem.add_objective.html", "_utils/opt/core/FarmOptProblem.add_to_layout_figure.html", "_utils/opt/core/FarmOptProblem.all_turbines.html", "_utils/opt/core/FarmOptProblem.apply_individual.html", "_utils/opt/core/FarmOptProblem.apply_population.html", "_utils/opt/core/FarmOptProblem.calc_gradients.html", "_utils/opt/core/FarmOptProblem.check_constraints_individual.html", "_utils/opt/core/FarmOptProblem.check_constraints_population.html", "_utils/opt/core/FarmOptProblem.constraints_tol.html", "_utils/opt/core/FarmOptProblem.counter.html", "_utils/opt/core/FarmOptProblem.evaluate_individual.html", "_utils/opt/core/FarmOptProblem.evaluate_population.html", "_utils/opt/core/FarmOptProblem.farm.html", "_utils/opt/core/FarmOptProblem.finalize_individual.html", "_utils/opt/core/FarmOptProblem.finalize_population.html", "_utils/opt/core/FarmOptProblem.get_gradients.html", "_utils/opt/core/FarmOptProblem.initial_values_float.html", "_utils/opt/core/FarmOptProblem.initial_values_int.html", "_utils/opt/core/FarmOptProblem.initialize.html", "_utils/opt/core/FarmOptProblem.max_values_constraints.html", "_utils/opt/core/FarmOptProblem.max_values_float.html", "_utils/opt/core/FarmOptProblem.max_values_int.html", "_utils/opt/core/FarmOptProblem.maximize_objs.html", "_utils/opt/core/FarmOptProblem.min_values_constraints.html", "_utils/opt/core/FarmOptProblem.min_values_float.html", "_utils/opt/core/FarmOptProblem.min_values_int.html", "_utils/opt/core/FarmOptProblem.n_constraints.html", "_utils/opt/core/FarmOptProblem.n_objectives.html", "_utils/opt/core/FarmOptProblem.n_sel_turbines.html", "_utils/opt/core/FarmOptProblem.n_vars_float.html", "_utils/opt/core/FarmOptProblem.n_vars_int.html", "_utils/opt/core/FarmOptProblem.parse_tvar.html", "_utils/opt/core/FarmOptProblem.sel_turbines.html", "_utils/opt/core/FarmOptProblem.tvar.html", "_utils/opt/core/FarmOptProblem.update_problem_individual.html", "_utils/opt/core/FarmOptProblem.update_problem_population.html", "_utils/opt/core/FarmOptProblem.var_names_float.html", "_utils/opt/core/FarmOptProblem.var_names_int.html", "_utils/opt/core/FarmVarsProblem.html", "_utils/opt/core/FarmVarsProblem.initialize.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_individual.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_population.html", "_utils/opt/core/FarmVarsProblem.update_problem_individual.html", "_utils/opt/core/FarmVarsProblem.update_problem_population.html", "_utils/opt/core/PopStates.html", "_utils/opt/core/PopStates.__init__.html", "_utils/opt/core/PopStates.calculate.html", "_utils/opt/core/PopStates.initialize.html", "_utils/opt/core/PopStates.output_point_vars.html", "_utils/opt/core/PopStates.size.html", "_utils/opt/core/PopStates.weights.html", "_utils/opt/objectives/FarmVarObjective.html", "_utils/opt/objectives/FarmVarObjective.__init__.html", "_utils/opt/objectives/FarmVarObjective.calc_individual.html", "_utils/opt/objectives/FarmVarObjective.calc_population.html", "_utils/opt/objectives/FarmVarObjective.finalize_individual.html", "_utils/opt/objectives/FarmVarObjective.initialize.html", "_utils/opt/objectives/FarmVarObjective.maximize.html", "_utils/opt/objectives/FarmVarObjective.n_components.html", "_utils/opt/objectives/FarmVarObjective.vardeps_float.html", "_utils/opt/objectives/MaxFarmPower.html", "_utils/opt/objectives/MaxFarmPower.__init__.html", "_utils/opt/objectives/MaxNTurbines.html", "_utils/opt/objectives/MaxNTurbines.__init__.html", "_utils/opt/objectives/MaxNTurbines.calc_individual.html", "_utils/opt/objectives/MaxNTurbines.calc_population.html", "_utils/opt/objectives/MaxNTurbines.maximize.html", "_utils/opt/objectives/MaxNTurbines.n_components.html", "_utils/opt/objectives/MinimalMaxTI.html", "_utils/opt/objectives/MinimalMaxTI.__init__.html", "_utils/opt/problems/OptFarmVars.html", "_utils/opt/problems/OptFarmVars.__init__.html", "_utils/opt/problems/OptFarmVars.add_var.html", "_utils/opt/problems/OptFarmVars.initial_values_float.html", "_utils/opt/problems/OptFarmVars.initial_values_int.html", "_utils/opt/problems/OptFarmVars.initialize.html", "_utils/opt/problems/OptFarmVars.max_values_float.html", "_utils/opt/problems/OptFarmVars.max_values_int.html", "_utils/opt/problems/OptFarmVars.min_values_float.html", "_utils/opt/problems/OptFarmVars.min_values_int.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_individual.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_population.html", "_utils/opt/problems/OptFarmVars.var_names_float.html", "_utils/opt/problems/OptFarmVars.var_names_int.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.get_bounds.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintscdist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivescdist.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.var_names_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_int.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_int.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.ANGLE.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.var_names_float.html", "_utils/read_shp.html", "_utils/read_shp_polygons.html", "_utils/runners/DaskRunner.html", "_utils/runners/DaskRunner.__init__.html", "_utils/runners/DaskRunner.finalize.html", "_utils/runners/DaskRunner.initialize.html", "_utils/runners/DaskRunner.is_distributed.html", "_utils/runners/DaskRunner.print.html", "_utils/runners/DaskRunner.run.html", "_utils/runners/DefaultRunner.html", "_utils/runners/DefaultRunner.run.html", "_utils/runners/Runner.html", "_utils/runners/Runner.__init__.html", "_utils/runners/Runner.finalize.html", "_utils/runners/Runner.initialize.html", "_utils/runners/Runner.initialized.html", "_utils/runners/Runner.run.html", "_utils/show_plotly_fig.html", "_utils/shp2csv.html", "_utils/shp2geom2d.html", "_utils/two_circles/area.html", "_utils/two_circles/calc_area.html", "_utils/uv2wd.html", "_utils/wd2uv.html", "_utils/wd2wdvec.html", "_utils/wdvec2wd.html", "api.html", "api_algorithms.html", "api_algorithms_downwind.html", "api_algorithms_iterative.html", "api_constants.html", "api_core.html", "api_foxes.html", "api_input.html", "api_models.html", "api_opt.html", "api_opt_problems.html", "api_opt_problems_geom.html", "api_output.html", "api_utils.html", "api_utils_abl.html", "api_variables.html", "api_wake_models.html", "citation.html", "examples.html", "history.html", "index.html", "installation.html", "notebooks/data.html", "notebooks/heterogeneous.html", "notebooks/layout_opt.html", "notebooks/model_book.html", "notebooks/multi_height.html", "notebooks/overview.html", "notebooks/power_mask.html", "notebooks/sector_man.html", "notebooks/single_row.html", "notebooks/timelines.html", "notebooks/timeseries.html", "notebooks/wind_rose.html", "notebooks/yawed_wake.html"]})