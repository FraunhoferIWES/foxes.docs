Search.setIndex({"titles": ["foxes.algorithms.Downwind", "foxes.algorithms.Downwind.FarmWakesCalculation", "foxes.algorithms.Downwind.FarmWakesCalculation.calculate", "foxes.algorithms.Downwind.FarmWakesCalculation.initialize", "foxes.algorithms.Downwind.FarmWakesCalculation.output_farm_vars", "foxes.algorithms.Downwind.PointWakesCalculation", "foxes.algorithms.Downwind.PointWakesCalculation.__init__", "foxes.algorithms.Downwind.PointWakesCalculation.calculate", "foxes.algorithms.Downwind.PointWakesCalculation.contribute_to_wake_deltas", "foxes.algorithms.Downwind.PointWakesCalculation.initialize", "foxes.algorithms.Downwind.PointWakesCalculation.output_point_vars", "foxes.algorithms.Downwind.SetAmbPointResults", "foxes.algorithms.Downwind.SetAmbPointResults.__init__", "foxes.algorithms.Downwind.SetAmbPointResults.calculate", "foxes.algorithms.Downwind.SetAmbPointResults.initialize", "foxes.algorithms.Downwind.SetAmbPointResults.output_point_vars", "foxes.algorithms.Downwind.__init__", "foxes.algorithms.Downwind.calc_farm", "foxes.algorithms.Downwind.calc_points", "foxes.algorithms.Downwind.finalize", "foxes.algorithms.Downwind.init_states", "foxes.algorithms.Downwind.initialize", "foxes.algorithms.Iterative", "foxes.algorithms.Iterative.FarmWakesCalculation", "foxes.algorithms.Iterative.FarmWakesCalculation.calculate", "foxes.algorithms.Iterative.FarmWakesCalculation.initialize", "foxes.algorithms.Iterative.FarmWakesCalculation.output_farm_vars", "foxes.algorithms.Iterative.__init__", "foxes.algorithms.Iterative.calc_farm", "foxes.algorithms.Iterative.iterations", "foxes.algorithms.downwind.models.CalcOrder", "foxes.algorithms.downwind.models.CalcOrder.calculate", "foxes.algorithms.downwind.models.CalcOrder.initialize", "foxes.algorithms.downwind.models.CalcOrder.output_farm_vars", "foxes.algorithms.downwind.models.SetAmbFarmResults", "foxes.algorithms.downwind.models.SetAmbFarmResults.__init__", "foxes.algorithms.downwind.models.SetAmbFarmResults.calculate", "foxes.algorithms.downwind.models.SetAmbFarmResults.output_farm_vars", "foxes.algorithms.iterative.ConvCrit", "foxes.algorithms.iterative.ConvCrit.__init__", "foxes.algorithms.iterative.ConvCrit.check_converged", "foxes.algorithms.iterative.ConvCrit.get_deltas", "foxes.algorithms.iterative.ConvCritList", "foxes.algorithms.iterative.ConvCritList.__init__", "foxes.algorithms.iterative.ConvCritList.add_crit", "foxes.algorithms.iterative.ConvCritList.check_converged", "foxes.algorithms.iterative.ConvCritList.get_deltas", "foxes.algorithms.iterative.ConvVarDelta", "foxes.algorithms.iterative.ConvVarDelta.__init__", "foxes.algorithms.iterative.ConvVarDelta.check_converged", "foxes.algorithms.iterative.ConvVarDelta.get_deltas", "foxes.algorithms.iterative.DefaultConv", "foxes.algorithms.iterative.DefaultConv.__init__", "foxes.core.Algorithm", "foxes.core.Algorithm.__init__", "foxes.core.Algorithm.chunked", "foxes.core.Algorithm.cleanup", "foxes.core.Algorithm.finalize", "foxes.core.Algorithm.finalize_model", "foxes.core.Algorithm.get_models_data", "foxes.core.Algorithm.idata_mem", "foxes.core.Algorithm.initialize", "foxes.core.Algorithm.new", "foxes.core.Algorithm.new_point_data", "foxes.core.Algorithm.print", "foxes.core.Algorithm.update_idata", "foxes.core.Algorithm.update_n_turbines", "foxes.core.Data", "foxes.core.Data.__init__", "foxes.core.Data.add", "foxes.core.Data.from_points", "foxes.core.Data.n_points", "foxes.core.Data.n_states", "foxes.core.Data.n_turbines", "foxes.core.Data.states_i0", "foxes.core.DataCalcModel", "foxes.core.DataCalcModel.calculate", "foxes.core.DataCalcModel.run_calculation", "foxes.core.ExtendedStates", "foxes.core.ExtendedStates.__init__", "foxes.core.ExtendedStates.append", "foxes.core.ExtendedStates.calculate", "foxes.core.ExtendedStates.finalize", "foxes.core.ExtendedStates.index", "foxes.core.ExtendedStates.initialize", "foxes.core.ExtendedStates.output_point_vars", "foxes.core.ExtendedStates.size", "foxes.core.ExtendedStates.weights", "foxes.core.FarmController", "foxes.core.FarmController.__init__", "foxes.core.FarmController.calculate", "foxes.core.FarmController.collect_models", "foxes.core.FarmController.finalize", "foxes.core.FarmController.initialize", "foxes.core.FarmController.keep", "foxes.core.FarmController.output_farm_vars", "foxes.core.FarmController.set_pars", "foxes.core.FarmDataModel", "foxes.core.FarmDataModel.__init__", "foxes.core.FarmDataModel.calculate", "foxes.core.FarmDataModel.output_farm_vars", "foxes.core.FarmDataModel.run_calculation", "foxes.core.FarmDataModelList", "foxes.core.FarmDataModelList.__init__", "foxes.core.FarmDataModelList.append", "foxes.core.FarmDataModelList.calculate", "foxes.core.FarmDataModelList.finalize", "foxes.core.FarmDataModelList.initialize", "foxes.core.FarmDataModelList.keep", "foxes.core.FarmDataModelList.output_farm_vars", "foxes.core.FarmModel", "foxes.core.Model", "foxes.core.Model.__init__", "foxes.core.Model.__repr__", "foxes.core.Model.data_to_store", "foxes.core.Model.finalize", "foxes.core.Model.from_data_or_store", "foxes.core.Model.get_data", "foxes.core.Model.initialize", "foxes.core.Model.initialized", "foxes.core.Model.keep", "foxes.core.Model.model_id", "foxes.core.Model.reduce_states", "foxes.core.Model.var", "foxes.core.PartialWakesModel", "foxes.core.PartialWakesModel.__init__", "foxes.core.PartialWakesModel.contribute_to_wake_deltas", "foxes.core.PartialWakesModel.evaluate_results", "foxes.core.PartialWakesModel.initialize", "foxes.core.PartialWakesModel.keep", "foxes.core.PartialWakesModel.new", "foxes.core.PartialWakesModel.new_wake_deltas", "foxes.core.PointDataModel", "foxes.core.PointDataModel.calculate", "foxes.core.PointDataModel.output_point_vars", "foxes.core.PointDataModel.run_calculation", "foxes.core.PointDataModelList", "foxes.core.PointDataModelList.__init__", "foxes.core.PointDataModelList.append", "foxes.core.PointDataModelList.calculate", "foxes.core.PointDataModelList.finalize", "foxes.core.PointDataModelList.initialize", "foxes.core.PointDataModelList.keep", "foxes.core.PointDataModelList.output_point_vars", "foxes.core.RotorModel", "foxes.core.RotorModel.__init__", "foxes.core.RotorModel.calculate", "foxes.core.RotorModel.design_points", "foxes.core.RotorModel.eval_rpoint_results", "foxes.core.RotorModel.get_rotor_points", "foxes.core.RotorModel.n_rotor_points", "foxes.core.RotorModel.output_farm_vars", "foxes.core.RotorModel.rotor_point_weights", "foxes.core.States", "foxes.core.States.index", "foxes.core.States.output_point_vars", "foxes.core.States.size", "foxes.core.States.weights", "foxes.core.Turbine", "foxes.core.Turbine.__init__", "foxes.core.Turbine.add_model", "foxes.core.Turbine.insert_model", "foxes.core.TurbineModel", "foxes.core.TurbineModel.calculate", "foxes.core.TurbineType", "foxes.core.TurbineType.__init__", "foxes.core.VerticalProfile", "foxes.core.VerticalProfile.calculate", "foxes.core.VerticalProfile.input_vars", "foxes.core.VerticalProfile.new", "foxes.core.WakeFrame", "foxes.core.WakeFrame.calc_centreline_integral", "foxes.core.WakeFrame.calc_order", "foxes.core.WakeFrame.get_centreline_points", "foxes.core.WakeFrame.get_wake_coos", "foxes.core.WakeModel", "foxes.core.WakeModel.contribute_to_wake_deltas", "foxes.core.WakeModel.finalize_wake_deltas", "foxes.core.WakeModel.init_wake_deltas", "foxes.core.WakeSuperposition", "foxes.core.WakeSuperposition.calc_final_wake_delta", "foxes.core.WakeSuperposition.calc_wakes_plus_wake", "foxes.core.WindFarm", "foxes.core.WindFarm.__init__", "foxes.core.WindFarm.add_turbine", "foxes.core.WindFarm.n_turbines", "foxes.core.WindFarm.turbine_names", "foxes.data.StaticData", "foxes.data.StaticData.__init__", "foxes.data.parse_Pct_file_name", "foxes.data.parse_Pct_two_files", "foxes.constants.AMB_RPOINT_RESULTS", "foxes.constants.DTYPE", "foxes.constants.DTYPE.T", "foxes.constants.DTYPE.__abs__", "foxes.constants.DTYPE.__add__", "foxes.constants.DTYPE.__and__", "foxes.constants.DTYPE.__array__", "foxes.constants.DTYPE.__array_interface__", "foxes.constants.DTYPE.__array_priority__", "foxes.constants.DTYPE.__array_struct__", "foxes.constants.DTYPE.__array_wrap__", "foxes.constants.DTYPE.__bool__", "foxes.constants.DTYPE.__class_getitem__", "foxes.constants.DTYPE.__divmod__", "foxes.constants.DTYPE.__eq__", "foxes.constants.DTYPE.__float__", "foxes.constants.DTYPE.__floordiv__", "foxes.constants.DTYPE.__format__", "foxes.constants.DTYPE.__ge__", "foxes.constants.DTYPE.__getitem__", "foxes.constants.DTYPE.__gt__", "foxes.constants.DTYPE.__hash__", "foxes.constants.DTYPE.__int__", "foxes.constants.DTYPE.__invert__", "foxes.constants.DTYPE.__le__", "foxes.constants.DTYPE.__lshift__", "foxes.constants.DTYPE.__lt__", "foxes.constants.DTYPE.__mod__", "foxes.constants.DTYPE.__mul__", "foxes.constants.DTYPE.__ne__", "foxes.constants.DTYPE.__neg__", "foxes.constants.DTYPE.__new__", "foxes.constants.DTYPE.__or__", "foxes.constants.DTYPE.__pos__", "foxes.constants.DTYPE.__pow__", "foxes.constants.DTYPE.__radd__", "foxes.constants.DTYPE.__rand__", "foxes.constants.DTYPE.__rdivmod__", "foxes.constants.DTYPE.__reduce__", "foxes.constants.DTYPE.__repr__", "foxes.constants.DTYPE.__rfloordiv__", "foxes.constants.DTYPE.__rlshift__", "foxes.constants.DTYPE.__rmod__", "foxes.constants.DTYPE.__rmul__", "foxes.constants.DTYPE.__ror__", "foxes.constants.DTYPE.__rpow__", "foxes.constants.DTYPE.__rrshift__", "foxes.constants.DTYPE.__rshift__", "foxes.constants.DTYPE.__rsub__", "foxes.constants.DTYPE.__rtruediv__", "foxes.constants.DTYPE.__rxor__", "foxes.constants.DTYPE.__sizeof__", "foxes.constants.DTYPE.__str__", "foxes.constants.DTYPE.__sub__", "foxes.constants.DTYPE.__truediv__", "foxes.constants.DTYPE.__xor__", "foxes.constants.DTYPE.all", "foxes.constants.DTYPE.any", "foxes.constants.DTYPE.argmax", "foxes.constants.DTYPE.argmin", "foxes.constants.DTYPE.argsort", "foxes.constants.DTYPE.as_integer_ratio", "foxes.constants.DTYPE.astype", "foxes.constants.DTYPE.base", "foxes.constants.DTYPE.byteswap", "foxes.constants.DTYPE.choose", "foxes.constants.DTYPE.clip", "foxes.constants.DTYPE.compress", "foxes.constants.DTYPE.conj", "foxes.constants.DTYPE.conjugate", "foxes.constants.DTYPE.copy", "foxes.constants.DTYPE.cumprod", "foxes.constants.DTYPE.cumsum", "foxes.constants.DTYPE.data", "foxes.constants.DTYPE.diagonal", "foxes.constants.DTYPE.dtype", "foxes.constants.DTYPE.dump", "foxes.constants.DTYPE.dumps", "foxes.constants.DTYPE.fill", "foxes.constants.DTYPE.flags", "foxes.constants.DTYPE.flat", "foxes.constants.DTYPE.flatten", "foxes.constants.DTYPE.getfield", "foxes.constants.DTYPE.imag", "foxes.constants.DTYPE.is_integer", "foxes.constants.DTYPE.item", "foxes.constants.DTYPE.itemset", "foxes.constants.DTYPE.itemsize", "foxes.constants.DTYPE.max", "foxes.constants.DTYPE.mean", "foxes.constants.DTYPE.min", "foxes.constants.DTYPE.nbytes", "foxes.constants.DTYPE.ndim", "foxes.constants.DTYPE.newbyteorder", "foxes.constants.DTYPE.nonzero", "foxes.constants.DTYPE.prod", "foxes.constants.DTYPE.ptp", "foxes.constants.DTYPE.put", "foxes.constants.DTYPE.ravel", "foxes.constants.DTYPE.real", "foxes.constants.DTYPE.repeat", "foxes.constants.DTYPE.reshape", "foxes.constants.DTYPE.resize", "foxes.constants.DTYPE.round", "foxes.constants.DTYPE.searchsorted", "foxes.constants.DTYPE.setfield", "foxes.constants.DTYPE.setflags", "foxes.constants.DTYPE.shape", "foxes.constants.DTYPE.size", "foxes.constants.DTYPE.sort", "foxes.constants.DTYPE.squeeze", "foxes.constants.DTYPE.std", "foxes.constants.DTYPE.strides", "foxes.constants.DTYPE.sum", "foxes.constants.DTYPE.swapaxes", "foxes.constants.DTYPE.take", "foxes.constants.DTYPE.tobytes", "foxes.constants.DTYPE.tofile", "foxes.constants.DTYPE.tolist", "foxes.constants.DTYPE.tostring", "foxes.constants.DTYPE.trace", "foxes.constants.DTYPE.transpose", "foxes.constants.DTYPE.var", "foxes.constants.DTYPE.view", "foxes.constants.FARM", "foxes.constants.GW", "foxes.constants.ITYPE", "foxes.constants.ITYPE.__abs__", "foxes.constants.ITYPE.__add__", "foxes.constants.ITYPE.__and__", "foxes.constants.ITYPE.__bool__", "foxes.constants.ITYPE.__class_getitem__", "foxes.constants.ITYPE.__divmod__", "foxes.constants.ITYPE.__eq__", "foxes.constants.ITYPE.__float__", "foxes.constants.ITYPE.__floordiv__", "foxes.constants.ITYPE.__ge__", "foxes.constants.ITYPE.__gt__", "foxes.constants.ITYPE.__hash__", "foxes.constants.ITYPE.__index__", "foxes.constants.ITYPE.__int__", "foxes.constants.ITYPE.__invert__", "foxes.constants.ITYPE.__le__", "foxes.constants.ITYPE.__lshift__", "foxes.constants.ITYPE.__lt__", "foxes.constants.ITYPE.__mod__", "foxes.constants.ITYPE.__mul__", "foxes.constants.ITYPE.__ne__", "foxes.constants.ITYPE.__neg__", "foxes.constants.ITYPE.__new__", "foxes.constants.ITYPE.__or__", "foxes.constants.ITYPE.__pos__", "foxes.constants.ITYPE.__pow__", "foxes.constants.ITYPE.__radd__", "foxes.constants.ITYPE.__rand__", "foxes.constants.ITYPE.__rdivmod__", "foxes.constants.ITYPE.__repr__", "foxes.constants.ITYPE.__rfloordiv__", "foxes.constants.ITYPE.__rlshift__", "foxes.constants.ITYPE.__rmod__", "foxes.constants.ITYPE.__rmul__", "foxes.constants.ITYPE.__ror__", "foxes.constants.ITYPE.__rpow__", "foxes.constants.ITYPE.__rrshift__", "foxes.constants.ITYPE.__rshift__", "foxes.constants.ITYPE.__rsub__", "foxes.constants.ITYPE.__rtruediv__", "foxes.constants.ITYPE.__rxor__", "foxes.constants.ITYPE.__str__", "foxes.constants.ITYPE.__sub__", "foxes.constants.ITYPE.__truediv__", "foxes.constants.ITYPE.__xor__", "foxes.constants.ITYPE.bit_count", "foxes.constants.ITYPE.denominator", "foxes.constants.ITYPE.is_integer", "foxes.constants.ITYPE.numerator", "foxes.constants.KAPPA", "foxes.constants.MW", "foxes.constants.POINT", "foxes.constants.POINTS", "foxes.constants.POP", "foxes.constants.P_UNITS", "foxes.constants.RPOINT", "foxes.constants.RPOINTS", "foxes.constants.RWEIGHTS", "foxes.constants.STATE", "foxes.constants.STATES_SEL", "foxes.constants.STATE_POINT", "foxes.constants.STATE_SOURCE_TURBINE", "foxes.constants.STATE_TURBINE", "foxes.constants.TMODELS", "foxes.constants.TMODEL_SELS", "foxes.constants.TNAME", "foxes.constants.TURBINE", "foxes.constants.TW", "foxes.constants.VALID", "foxes.constants.VARS", "foxes.constants.W", "foxes.constants.XYH", "foxes.constants.kW", "foxes.variables.AMB_CAP", "foxes.variables.AMB_CT", "foxes.variables.AMB_P", "foxes.variables.AMB_REWS", "foxes.variables.AMB_REWS2", "foxes.variables.AMB_REWS3", "foxes.variables.AMB_RHO", "foxes.variables.AMB_T", "foxes.variables.AMB_TI", "foxes.variables.AMB_WD", "foxes.variables.AMB_WS", "foxes.variables.AMB_YAW", "foxes.variables.AMB_YAWM", "foxes.variables.AMB_YLD", "foxes.variables.CAP", "foxes.variables.CT", "foxes.variables.D", "foxes.variables.EFF", "foxes.variables.H", "foxes.variables.K", "foxes.variables.KB", "foxes.variables.KTI", "foxes.variables.MAX_P", "foxes.variables.MOL", "foxes.variables.ORDER", "foxes.variables.P", "foxes.variables.PA_ALPHA", "foxes.variables.PA_BETA", "foxes.variables.REWS", "foxes.variables.REWS2", "foxes.variables.REWS3", "foxes.variables.RHO", "foxes.variables.SHEAR", "foxes.variables.T", "foxes.variables.TI", "foxes.variables.TXYH", "foxes.variables.WD", "foxes.variables.WEIGHT", "foxes.variables.WS", "foxes.variables.X", "foxes.variables.Y", "foxes.variables.YAW", "foxes.variables.YAWM", "foxes.variables.YLD", "foxes.variables.Z0", "foxes.variables.amb2var", "foxes.variables.var2amb", "foxes.input.farm_layout.add_from_csv", "foxes.input.farm_layout.add_from_df", "foxes.input.farm_layout.add_from_file", "foxes.input.farm_layout.add_from_json", "foxes.input.farm_layout.add_grid", "foxes.input.farm_layout.add_row", "foxes.input.states.FieldDataNC", "foxes.input.states.FieldDataNC.__init__", "foxes.input.states.FieldDataNC.calculate", "foxes.input.states.FieldDataNC.index", "foxes.input.states.FieldDataNC.initialize", "foxes.input.states.FieldDataNC.output_point_vars", "foxes.input.states.FieldDataNC.size", "foxes.input.states.FieldDataNC.weights", "foxes.input.states.MultiHeightStates", "foxes.input.states.MultiHeightStates.RDICT", "foxes.input.states.MultiHeightStates.__init__", "foxes.input.states.MultiHeightStates.calculate", "foxes.input.states.MultiHeightStates.finalize", "foxes.input.states.MultiHeightStates.index", "foxes.input.states.MultiHeightStates.initialize", "foxes.input.states.MultiHeightStates.output_point_vars", "foxes.input.states.MultiHeightStates.reset", "foxes.input.states.MultiHeightStates.size", "foxes.input.states.MultiHeightStates.weights", "foxes.input.states.MultiHeightTimeseries", "foxes.input.states.MultiHeightTimeseries.RDICT", "foxes.input.states.ScanWS", "foxes.input.states.ScanWS.__init__", "foxes.input.states.ScanWS.calculate", "foxes.input.states.ScanWS.initialize", "foxes.input.states.ScanWS.output_point_vars", "foxes.input.states.ScanWS.size", "foxes.input.states.ScanWS.weights", "foxes.input.states.SingleStateStates", "foxes.input.states.SingleStateStates.__init__", "foxes.input.states.SingleStateStates.calculate", "foxes.input.states.SingleStateStates.initialize", "foxes.input.states.SingleStateStates.output_point_vars", "foxes.input.states.SingleStateStates.size", "foxes.input.states.SingleStateStates.weights", "foxes.input.states.StatesTable", "foxes.input.states.StatesTable.RDICT", "foxes.input.states.StatesTable.__init__", "foxes.input.states.StatesTable.calculate", "foxes.input.states.StatesTable.finalize", "foxes.input.states.StatesTable.index", "foxes.input.states.StatesTable.initialize", "foxes.input.states.StatesTable.output_point_vars", "foxes.input.states.StatesTable.reset", "foxes.input.states.StatesTable.size", "foxes.input.states.StatesTable.weights", "foxes.input.states.Timeseries", "foxes.input.states.Timeseries.RDICT", "foxes.input.states.create_random_abl_states", "foxes.input.windio.read_case", "foxes.models.farm_controllers.BasicFarmController", "foxes.models.farm_models.Turbine2FarmModel", "foxes.models.farm_models.Turbine2FarmModel.__init__", "foxes.models.farm_models.Turbine2FarmModel.__repr__", "foxes.models.farm_models.Turbine2FarmModel.calculate", "foxes.models.farm_models.Turbine2FarmModel.finalize", "foxes.models.farm_models.Turbine2FarmModel.initialize", "foxes.models.farm_models.Turbine2FarmModel.output_farm_vars", "foxes.models.model_book.Dict", "foxes.models.model_book.Dict.__getitem__", "foxes.models.model_book.Dict.__init__", "foxes.models.model_book.ModelBook", "foxes.models.model_book.ModelBook.__getitem__", "foxes.models.model_book.ModelBook.__init__", "foxes.models.model_book.ModelBook.finalize", "foxes.models.model_book.ModelBook.print_toc", "foxes.models.partial_wakes.Mapped", "foxes.models.partial_wakes.Mapped.__init__", "foxes.models.partial_wakes.Mapped.contribute_to_wake_deltas", "foxes.models.partial_wakes.Mapped.evaluate_results", "foxes.models.partial_wakes.Mapped.finalize", "foxes.models.partial_wakes.Mapped.initialize", "foxes.models.partial_wakes.Mapped.keep", "foxes.models.partial_wakes.Mapped.new_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake", "foxes.models.partial_wakes.PartialAxiwake.__init__", "foxes.models.partial_wakes.PartialAxiwake.__repr__", "foxes.models.partial_wakes.PartialAxiwake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake.evaluate_results", "foxes.models.partial_wakes.PartialAxiwake.finalize", "foxes.models.partial_wakes.PartialAxiwake.initialize", "foxes.models.partial_wakes.PartialAxiwake.keep", "foxes.models.partial_wakes.PartialAxiwake.new_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake", "foxes.models.partial_wakes.PartialDistSlicedWake.__init__", "foxes.models.partial_wakes.PartialDistSlicedWake.__repr__", "foxes.models.partial_wakes.PartialDistSlicedWake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake.evaluate_results", "foxes.models.partial_wakes.PartialDistSlicedWake.finalize", "foxes.models.partial_wakes.PartialDistSlicedWake.initialize", "foxes.models.partial_wakes.PartialDistSlicedWake.keep", "foxes.models.partial_wakes.PartialDistSlicedWake.new_wake_deltas", "foxes.models.partial_wakes.PartialGrid", "foxes.models.partial_wakes.PartialGrid.__init__", "foxes.models.partial_wakes.PartialGrid.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat", "foxes.models.partial_wakes.PartialTopHat.__init__", "foxes.models.partial_wakes.PartialTopHat.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat.evaluate_results", "foxes.models.partial_wakes.PartialTopHat.finalize", "foxes.models.partial_wakes.PartialTopHat.initialize", "foxes.models.partial_wakes.PartialTopHat.keep", "foxes.models.partial_wakes.PartialTopHat.new_wake_deltas", "foxes.models.partial_wakes.RotorPoints", "foxes.models.partial_wakes.RotorPoints.__init__", "foxes.models.partial_wakes.RotorPoints.contribute_to_wake_deltas", "foxes.models.partial_wakes.RotorPoints.evaluate_results", "foxes.models.partial_wakes.RotorPoints.get_wake_points", "foxes.models.partial_wakes.RotorPoints.new_wake_deltas", "foxes.models.point_models.SetUniformData", "foxes.models.point_models.SetUniformData.__init__", "foxes.models.point_models.SetUniformData.calculate", "foxes.models.point_models.SetUniformData.initialize", "foxes.models.point_models.SetUniformData.output_point_vars", "foxes.models.point_models.TKE2TI", "foxes.models.point_models.TKE2TI.calculate", "foxes.models.point_models.TKE2TI.output_point_vars", "foxes.models.point_models.WakeDeltas", "foxes.models.point_models.WakeDeltas.__init__", "foxes.models.point_models.WakeDeltas.calculate", "foxes.models.point_models.WakeDeltas.output_point_vars", "foxes.models.rotor_models.CentreRotor", "foxes.models.rotor_models.CentreRotor.design_points", "foxes.models.rotor_models.CentreRotor.eval_rpoint_results", "foxes.models.rotor_models.CentreRotor.get_rotor_points", "foxes.models.rotor_models.CentreRotor.n_rotor_points", "foxes.models.rotor_models.CentreRotor.rotor_point_weights", "foxes.models.rotor_models.GridRotor", "foxes.models.rotor_models.GridRotor.__init__", "foxes.models.rotor_models.GridRotor.__repr__", "foxes.models.rotor_models.GridRotor.design_points", "foxes.models.rotor_models.GridRotor.initialize", "foxes.models.rotor_models.GridRotor.n_rotor_points", "foxes.models.rotor_models.GridRotor.rotor_point_weights", "foxes.models.turbine_models.Calculator", "foxes.models.turbine_models.Calculator.__init__", "foxes.models.turbine_models.Calculator.calculate", "foxes.models.turbine_models.Calculator.output_farm_vars", "foxes.models.turbine_models.LookupTable", "foxes.models.turbine_models.LookupTable.__init__", "foxes.models.turbine_models.LookupTable.calculate", "foxes.models.turbine_models.LookupTable.initialize", "foxes.models.turbine_models.LookupTable.output_farm_vars", "foxes.models.turbine_models.PowerMask", "foxes.models.turbine_models.PowerMask.__init__", "foxes.models.turbine_models.PowerMask.calculate", "foxes.models.turbine_models.PowerMask.initialize", "foxes.models.turbine_models.PowerMask.output_farm_vars", "foxes.models.turbine_models.PowerMask.update_P_ct", "foxes.models.turbine_models.RotorCentreCalc", "foxes.models.turbine_models.RotorCentreCalc.__init__", "foxes.models.turbine_models.RotorCentreCalc.calculate", "foxes.models.turbine_models.RotorCentreCalc.finalize", "foxes.models.turbine_models.RotorCentreCalc.initialize", "foxes.models.turbine_models.RotorCentreCalc.output_farm_vars", "foxes.models.turbine_models.SectorManagement", "foxes.models.turbine_models.SectorManagement.__init__", "foxes.models.turbine_models.SectorManagement.calculate", "foxes.models.turbine_models.SectorManagement.initialize", "foxes.models.turbine_models.SectorManagement.output_farm_vars", "foxes.models.turbine_models.SetFarmVars", "foxes.models.turbine_models.SetFarmVars.__init__", "foxes.models.turbine_models.SetFarmVars.add_var", "foxes.models.turbine_models.SetFarmVars.calculate", "foxes.models.turbine_models.SetFarmVars.initialize", "foxes.models.turbine_models.SetFarmVars.output_farm_vars", "foxes.models.turbine_models.SetFarmVars.reset", "foxes.models.turbine_models.SetXYHD", "foxes.models.turbine_models.SetXYHD.__init__", "foxes.models.turbine_models.SetXYHD.calculate", "foxes.models.turbine_models.SetXYHD.output_farm_vars", "foxes.models.turbine_models.TableFactors", "foxes.models.turbine_models.TableFactors.__init__", "foxes.models.turbine_models.TableFactors.calculate", "foxes.models.turbine_models.TableFactors.initialize", "foxes.models.turbine_models.TableFactors.output_farm_vars", "foxes.models.turbine_models.Thrust2Ct", "foxes.models.turbine_models.Thrust2Ct.__init__", "foxes.models.turbine_models.Thrust2Ct.calculate", "foxes.models.turbine_models.Thrust2Ct.output_farm_vars", "foxes.models.turbine_models.YAW2YAWM", "foxes.models.turbine_models.YAW2YAWM.calculate", "foxes.models.turbine_models.YAW2YAWM.output_farm_vars", "foxes.models.turbine_models.YAWM2YAW", "foxes.models.turbine_models.YAWM2YAW.calculate", "foxes.models.turbine_models.YAWM2YAW.output_farm_vars", "foxes.models.turbine_models.kTI", "foxes.models.turbine_models.kTI.__init__", "foxes.models.turbine_models.kTI.__repr__", "foxes.models.turbine_models.kTI.calculate", "foxes.models.turbine_models.kTI.output_farm_vars", "foxes.models.turbine_types.CpCtFile", "foxes.models.turbine_types.CpCtFile.__init__", "foxes.models.turbine_types.CpCtFromTwo", "foxes.models.turbine_types.CpCtFromTwo.__init__", "foxes.models.turbine_types.NullType", "foxes.models.turbine_types.NullType.calculate", "foxes.models.turbine_types.NullType.output_farm_vars", "foxes.models.turbine_types.PCtFile", "foxes.models.turbine_types.PCtFile.__init__", "foxes.models.turbine_types.PCtFile.calculate", "foxes.models.turbine_types.PCtFile.finalize", "foxes.models.turbine_types.PCtFile.initialize", "foxes.models.turbine_types.PCtFile.output_farm_vars", "foxes.models.turbine_types.PCtFromTwo", "foxes.models.turbine_types.PCtFromTwo.__init__", "foxes.models.turbine_types.PCtFromTwo.calculate", "foxes.models.turbine_types.PCtFromTwo.finalize", "foxes.models.turbine_types.PCtFromTwo.initialize", "foxes.models.turbine_types.PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsRho2PCtFromTwo", "foxes.models.turbine_types.WsRho2PCtFromTwo.__init__", "foxes.models.turbine_types.WsRho2PCtFromTwo.calculate", "foxes.models.turbine_types.WsRho2PCtFromTwo.finalize", "foxes.models.turbine_types.WsRho2PCtFromTwo.initialize", "foxes.models.turbine_types.WsRho2PCtFromTwo.output_farm_vars", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogStableWsProfile", "foxes.models.vertical_profiles.ABLLogStableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogStableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogWsProfile", "foxes.models.vertical_profiles.ABLLogWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogWsProfile.input_vars", "foxes.models.vertical_profiles.ShearedProfile", "foxes.models.vertical_profiles.ShearedProfile.calculate", "foxes.models.vertical_profiles.ShearedProfile.input_vars", "foxes.models.vertical_profiles.UniformProfile", "foxes.models.vertical_profiles.UniformProfile.__init__", "foxes.models.vertical_profiles.UniformProfile.calculate", "foxes.models.vertical_profiles.UniformProfile.input_vars", "foxes.models.wake_frames.FarmOrder", "foxes.models.wake_frames.FarmOrder.__init__", "foxes.models.wake_frames.FarmOrder.calc_order", "foxes.models.wake_frames.FarmOrder.finalize", "foxes.models.wake_frames.FarmOrder.get_centreline_points", "foxes.models.wake_frames.FarmOrder.get_wake_coos", "foxes.models.wake_frames.FarmOrder.initialize", "foxes.models.wake_frames.RotorWD", "foxes.models.wake_frames.RotorWD.__init__", "foxes.models.wake_frames.RotorWD.calc_order", "foxes.models.wake_frames.RotorWD.get_centreline_points", "foxes.models.wake_frames.RotorWD.get_wake_coos", "foxes.models.wake_frames.Streamlines", "foxes.models.wake_frames.Streamlines.__init__", "foxes.models.wake_frames.Streamlines.__repr__", "foxes.models.wake_frames.Streamlines.calc_order", "foxes.models.wake_frames.Streamlines.get_centreline_points", "foxes.models.wake_frames.Streamlines.get_wake_coos", "foxes.models.wake_frames.Streamlines.initialize", "foxes.models.wake_frames.Timelines", "foxes.models.wake_frames.Timelines.__init__", "foxes.models.wake_frames.Timelines.calc_order", "foxes.models.wake_frames.Timelines.get_centreline_points", "foxes.models.wake_frames.Timelines.get_wake_coos", "foxes.models.wake_frames.Timelines.initialize", "foxes.models.wake_frames.YawedWakes", "foxes.models.wake_frames.YawedWakes.__init__", "foxes.models.wake_frames.YawedWakes.calc_order", "foxes.models.wake_frames.YawedWakes.finalize", "foxes.models.wake_frames.YawedWakes.get_centreline_points", "foxes.models.wake_frames.YawedWakes.get_wake_coos", "foxes.models.wake_frames.YawedWakes.initialize", "foxes.models.wake_models.AxisymmetricWakeModel", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel", "foxes.models.wake_models.DistSlicedWakeModel.__init__", "foxes.models.wake_models.DistSlicedWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel.contribute_to_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.finalize", "foxes.models.wake_models.DistSlicedWakeModel.finalize_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.initialize", "foxes.models.wake_models.DistSlicedWakeModel.keep", "foxes.models.wake_models.GaussianWakeModel", "foxes.models.wake_models.GaussianWakeModel.calc_amplitude_sigma_spsel", "foxes.models.wake_models.GaussianWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.TopHatWakeModel", "foxes.models.wake_models.TopHatWakeModel.__init__", "foxes.models.wake_models.TopHatWakeModel.calc_centreline_wake_deltas", "foxes.models.wake_models.TopHatWakeModel.calc_wake_radius", "foxes.models.wake_models.TopHatWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.ti.CrespoHernandezTIWake", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__init__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__repr__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_wake_radius", "foxes.models.wake_models.ti.CrespoHernandezTIWake.init_wake_deltas", "foxes.models.wake_models.ti.IECTIWake", "foxes.models.wake_models.ti.IECTIWake.__init__", "foxes.models.wake_models.ti.IECTIWake.__repr__", "foxes.models.wake_models.ti.IECTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.IECTIWake.calc_wake_radius", "foxes.models.wake_models.ti.IECTIWake.init_wake_deltas", "foxes.models.wake_models.wind.BastankhahWake", "foxes.models.wake_models.wind.BastankhahWake.__init__", "foxes.models.wake_models.wind.BastankhahWake.__repr__", "foxes.models.wake_models.wind.BastankhahWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.BastankhahWake.init_wake_deltas", "foxes.models.wake_models.wind.JensenWake", "foxes.models.wake_models.wind.JensenWake.__init__", "foxes.models.wake_models.wind.JensenWake.__repr__", "foxes.models.wake_models.wind.JensenWake.calc_centreline_wake_deltas", "foxes.models.wake_models.wind.JensenWake.calc_wake_radius", "foxes.models.wake_models.wind.JensenWake.init_wake_deltas", "foxes.models.wake_models.wind.PorteAgelModel", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_FAR", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.CHECK", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_FAR", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.MDATA_KEY", "foxes.models.wake_models.wind.PorteAgelModel.NEAR", "foxes.models.wake_models.wind.PorteAgelModel.PARS", "foxes.models.wake_models.wind.PorteAgelModel.R_PC", "foxes.models.wake_models.wind.PorteAgelModel.R_PC_S", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Y_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Z_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SP_SEL", "foxes.models.wake_models.wind.PorteAgelModel.X0", "foxes.models.wake_models.wind.PorteAgelModel.__init__", "foxes.models.wake_models.wind.PorteAgelModel.calc_data", "foxes.models.wake_models.wind.PorteAgelModel.clean", "foxes.models.wake_models.wind.PorteAgelModel.get_data", "foxes.models.wake_models.wind.PorteAgelModel.has_data", "foxes.models.wake_models.wind.PorteAgelModel.pars", "foxes.models.wake_models.wind.PorteAgelWake", "foxes.models.wake_models.wind.PorteAgelWake.__init__", "foxes.models.wake_models.wind.PorteAgelWake.__repr__", "foxes.models.wake_models.wind.PorteAgelWake.calc_wakes_spsel_x_yz", "foxes.models.wake_models.wind.PorteAgelWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWake", "foxes.models.wake_models.wind.TurbOParkWake.__init__", "foxes.models.wake_models.wind.TurbOParkWake.__repr__", "foxes.models.wake_models.wind.TurbOParkWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWakeIX", "foxes.models.wake_models.wind.TurbOParkWakeIX.__init__", "foxes.models.wake_models.wind.TurbOParkWakeIX.__repr__", "foxes.models.wake_models.wind.TurbOParkWakeIX.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWakeIX.finalize", "foxes.models.wake_models.wind.TurbOParkWakeIX.init_wake_deltas", "foxes.models.wake_superpositions.LinearSuperposition", "foxes.models.wake_superpositions.LinearSuperposition.__init__", "foxes.models.wake_superpositions.LinearSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.LinearSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.LinearSuperposition.input_farm_vars", "foxes.models.wake_superpositions.MaxSuperposition", "foxes.models.wake_superpositions.MaxSuperposition.__init__", "foxes.models.wake_superpositions.MaxSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.MaxSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.MaxSuperposition.initialize", "foxes.models.wake_superpositions.MaxSuperposition.input_farm_vars", "foxes.models.wake_superpositions.ProductSuperposition", "foxes.models.wake_superpositions.ProductSuperposition.__init__", "foxes.models.wake_superpositions.ProductSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.ProductSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition", "foxes.models.wake_superpositions.QuadraticSuperposition.__init__", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition.initialize", "foxes.models.wake_superpositions.QuadraticSuperposition.input_farm_vars", "foxes.models.wake_superpositions.TISuperposition", "foxes.models.wake_superpositions.TISuperposition.__init__", "foxes.models.wake_superpositions.TISuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.TISuperposition.calc_wakes_plus_wake", "foxes.output.Animator", "foxes.output.Animator.__init__", "foxes.output.Animator.add_generator", "foxes.output.Animator.animate", "foxes.output.Animator.generators", "foxes.output.FarmLayoutOutput", "foxes.output.FarmLayoutOutput.__init__", "foxes.output.FarmLayoutOutput.get_figure", "foxes.output.FarmLayoutOutput.get_layout_data", "foxes.output.FarmLayoutOutput.get_layout_dict", "foxes.output.FarmLayoutOutput.write_csv", "foxes.output.FarmLayoutOutput.write_json", "foxes.output.FarmLayoutOutput.write_plot", "foxes.output.FarmLayoutOutput.write_xyh", "foxes.output.FarmResultsEval", "foxes.output.FarmResultsEval.__init__", "foxes.output.FarmResultsEval.add_capacity", "foxes.output.FarmResultsEval.add_efficiency", "foxes.output.FarmResultsEval.calc_farm_efficiency", "foxes.output.FarmResultsEval.calc_farm_mean", "foxes.output.FarmResultsEval.calc_farm_sum", "foxes.output.FarmResultsEval.calc_farm_yield", "foxes.output.FarmResultsEval.calc_mean_farm_power", "foxes.output.FarmResultsEval.calc_states_mean", "foxes.output.FarmResultsEval.calc_states_std", "foxes.output.FarmResultsEval.calc_states_sum", "foxes.output.FarmResultsEval.calc_turbine_mean", "foxes.output.FarmResultsEval.calc_turbine_sum", "foxes.output.FarmResultsEval.calc_turbine_yield", "foxes.output.FarmResultsEval.gen_stdata", "foxes.output.FarmResultsEval.reduce_all", "foxes.output.FarmResultsEval.reduce_states", "foxes.output.FarmResultsEval.reduce_turbines", "foxes.output.FarmResultsEval.weinsum", "foxes.output.FlowPlots2D", "foxes.output.FlowPlots2D.__init__", "foxes.output.FlowPlots2D.gen_states_fig_xy", "foxes.output.FlowPlots2D.gen_states_fig_xz", "foxes.output.FlowPlots2D.gen_states_fig_yz", "foxes.output.FlowPlots2D.get_mean_fig_xy", "foxes.output.FlowPlots2D.get_mean_fig_xz", "foxes.output.FlowPlots2D.get_mean_fig_yz", "foxes.output.Output", "foxes.output.Output.new", "foxes.output.Output.print_models", "foxes.output.Output.write", "foxes.output.ResultsWriter", "foxes.output.ResultsWriter.__init__", "foxes.output.ResultsWriter.write_csv", "foxes.output.RosePlotOutput", "foxes.output.RosePlotOutput.__init__", "foxes.output.RosePlotOutput.get_data", "foxes.output.RosePlotOutput.get_data_info", "foxes.output.RosePlotOutput.get_figure", "foxes.output.RosePlotOutput.write_figure", "foxes.output.StateTurbineMap", "foxes.output.StateTurbineMap.__init__", "foxes.output.StateTurbineMap.plot_map", "foxes.output.StatesRosePlotOutput", "foxes.output.StatesRosePlotOutput.__init__", "foxes.output.TurbineTypeCurves", "foxes.output.TurbineTypeCurves.__init__", "foxes.output.TurbineTypeCurves.plot_curves", "foxes.utils.DataBook", "foxes.utils.DataBook.__init__", "foxes.utils.DataBook.add_data_package", "foxes.utils.DataBook.add_data_package_file", "foxes.utils.DataBook.add_file", "foxes.utils.DataBook.add_files", "foxes.utils.DataBook.get_file_path", "foxes.utils.DataBook.toc", "foxes.utils.PandasFileHelper", "foxes.utils.PandasFileHelper.DATA_FILE_FORMATS", "foxes.utils.PandasFileHelper.DEFAULT_FORMAT_DICT", "foxes.utils.PandasFileHelper.DEFAULT_READING_PARAMETERS", "foxes.utils.PandasFileHelper.DEFAULT_WRITING_PARAMETERS", "foxes.utils.PandasFileHelper.read_file", "foxes.utils.PandasFileHelper.write_file", "foxes.utils.abl.neutral.calc_ws", "foxes.utils.abl.neutral.logz", "foxes.utils.abl.neutral.ustar", "foxes.utils.abl.sheared.calc_ws", "foxes.utils.abl.stable.calc_ws", "foxes.utils.abl.stable.lgz", "foxes.utils.abl.stable.logz", "foxes.utils.abl.stable.psi", "foxes.utils.abl.stable.ustar", "foxes.utils.abl.unstable.calc_ws", "foxes.utils.abl.unstable.logz", "foxes.utils.abl.unstable.psi", "foxes.utils.abl.unstable.ustar", "foxes.utils.all_subclasses", "foxes.utils.cubic_roots", "foxes.utils.delta_wd", "foxes.utils.geom2d.AreaGeometry", "foxes.utils.geom2d.AreaGeometry.add_to_figure", "foxes.utils.geom2d.AreaGeometry.inverse", "foxes.utils.geom2d.AreaGeometry.p_max", "foxes.utils.geom2d.AreaGeometry.p_min", "foxes.utils.geom2d.AreaGeometry.points_distance", "foxes.utils.geom2d.AreaGeometry.points_inside", "foxes.utils.geom2d.AreaIntersection", "foxes.utils.geom2d.AreaIntersection.__new__", "foxes.utils.geom2d.AreaUnion", "foxes.utils.geom2d.AreaUnion.__init__", "foxes.utils.geom2d.AreaUnion.add_to_figure", "foxes.utils.geom2d.AreaUnion.inverse", "foxes.utils.geom2d.AreaUnion.p_max", "foxes.utils.geom2d.AreaUnion.p_min", "foxes.utils.geom2d.AreaUnion.points_distance", "foxes.utils.geom2d.AreaUnion.points_inside", "foxes.utils.geom2d.Circle", "foxes.utils.geom2d.Circle.__init__", "foxes.utils.geom2d.Circle.add_to_figure", "foxes.utils.geom2d.Circle.p_max", "foxes.utils.geom2d.Circle.p_min", "foxes.utils.geom2d.Circle.points_distance", "foxes.utils.geom2d.Circle.points_inside", "foxes.utils.geom2d.ClosedPolygon", "foxes.utils.geom2d.ClosedPolygon.__init__", "foxes.utils.geom2d.ClosedPolygon.add_to_figure", "foxes.utils.geom2d.ClosedPolygon.p_max", "foxes.utils.geom2d.ClosedPolygon.p_min", "foxes.utils.geom2d.ClosedPolygon.points_distance", "foxes.utils.geom2d.ClosedPolygon.points_inside", "foxes.utils.geom2d.HalfPlane", "foxes.utils.geom2d.HalfPlane.__init__", "foxes.utils.geom2d.HalfPlane.add_to_figure", "foxes.utils.geom2d.HalfPlane.inverse", "foxes.utils.geom2d.HalfPlane.p_max", "foxes.utils.geom2d.HalfPlane.p_min", "foxes.utils.geom2d.HalfPlane.points_distance", "foxes.utils.geom2d.HalfPlane.points_inside", "foxes.utils.geom2d.InvertedAreaGeometry", "foxes.utils.geom2d.InvertedAreaGeometry.__init__", "foxes.utils.geom2d.InvertedAreaGeometry.add_to_figure", "foxes.utils.geom2d.InvertedAreaGeometry.inverse", "foxes.utils.geom2d.InvertedAreaGeometry.p_max", "foxes.utils.geom2d.InvertedAreaGeometry.p_min", "foxes.utils.geom2d.InvertedAreaGeometry.points_distance", "foxes.utils.geom2d.InvertedAreaGeometry.points_inside", "foxes.opt.constraints.AreaGeometryConstraint", "foxes.opt.constraints.AreaGeometryConstraint.__init__", "foxes.opt.constraints.AreaGeometryConstraint.__str__", "foxes.opt.constraints.AreaGeometryConstraint.ana_deriv", "foxes.opt.constraints.AreaGeometryConstraint.calc_individual", "foxes.opt.constraints.AreaGeometryConstraint.calc_population", "foxes.opt.constraints.AreaGeometryConstraint.component_names", "foxes.opt.constraints.AreaGeometryConstraint.finalize", "foxes.opt.constraints.AreaGeometryConstraint.finalize_individual", "foxes.opt.constraints.AreaGeometryConstraint.finalize_population", "foxes.opt.constraints.AreaGeometryConstraint.initialize", "foxes.opt.constraints.AreaGeometryConstraint.initialized", "foxes.opt.constraints.AreaGeometryConstraint.n_components", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.var_names_float", "foxes.opt.constraints.AreaGeometryConstraint.var_names_int", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_float", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_int", "foxes.opt.constraints.FarmBoundaryConstraint", "foxes.opt.constraints.FarmBoundaryConstraint.__init__", "foxes.opt.constraints.MinDistConstraint", "foxes.opt.constraints.MinDistConstraint.__init__", "foxes.opt.constraints.MinDistConstraint.calc_individual", "foxes.opt.constraints.MinDistConstraint.calc_population", "foxes.opt.constraints.MinDistConstraint.initialize", "foxes.opt.constraints.MinDistConstraint.n_components", "foxes.opt.constraints.MinDistConstraint.vardeps_float", "foxes.opt.core.FarmConstraint", "foxes.opt.core.FarmConstraint.__init__", "foxes.opt.core.FarmConstraint.add_to_layout_figure", "foxes.opt.core.FarmConstraint.calc_individual", "foxes.opt.core.FarmConstraint.calc_population", "foxes.opt.core.FarmConstraint.farm", "foxes.opt.core.FarmConstraint.n_components", "foxes.opt.core.FarmConstraint.n_sel_turbines", "foxes.opt.core.FarmConstraint.print_models", "foxes.opt.core.FarmConstraint.sel_turbines", "foxes.opt.core.FarmConstraint.vardeps_float", "foxes.opt.core.FarmObjective", "foxes.opt.core.FarmObjective.__init__", "foxes.opt.core.FarmObjective.add_to_layout_figure", "foxes.opt.core.FarmObjective.farm", "foxes.opt.core.FarmObjective.n_sel_turbines", "foxes.opt.core.FarmObjective.print_models", "foxes.opt.core.FarmObjective.sel_turbines", "foxes.opt.core.FarmOptProblem", "foxes.opt.core.FarmOptProblem.INT_INF", "foxes.opt.core.FarmOptProblem.__init__", "foxes.opt.core.FarmOptProblem.add_constraint", "foxes.opt.core.FarmOptProblem.add_objective", "foxes.opt.core.FarmOptProblem.add_to_layout_figure", "foxes.opt.core.FarmOptProblem.all_turbines", "foxes.opt.core.FarmOptProblem.apply_individual", "foxes.opt.core.FarmOptProblem.apply_population", "foxes.opt.core.FarmOptProblem.calc_gradients", "foxes.opt.core.FarmOptProblem.check_constraints_individual", "foxes.opt.core.FarmOptProblem.check_constraints_population", "foxes.opt.core.FarmOptProblem.constraints_tol", "foxes.opt.core.FarmOptProblem.counter", "foxes.opt.core.FarmOptProblem.evaluate_individual", "foxes.opt.core.FarmOptProblem.evaluate_population", "foxes.opt.core.FarmOptProblem.farm", "foxes.opt.core.FarmOptProblem.finalize_individual", "foxes.opt.core.FarmOptProblem.finalize_population", "foxes.opt.core.FarmOptProblem.get_gradients", "foxes.opt.core.FarmOptProblem.initial_values_float", "foxes.opt.core.FarmOptProblem.initial_values_int", "foxes.opt.core.FarmOptProblem.initialize", "foxes.opt.core.FarmOptProblem.max_values_constraints", "foxes.opt.core.FarmOptProblem.max_values_float", "foxes.opt.core.FarmOptProblem.max_values_int", "foxes.opt.core.FarmOptProblem.maximize_objs", "foxes.opt.core.FarmOptProblem.min_values_constraints", "foxes.opt.core.FarmOptProblem.min_values_float", "foxes.opt.core.FarmOptProblem.min_values_int", "foxes.opt.core.FarmOptProblem.n_constraints", "foxes.opt.core.FarmOptProblem.n_objectives", "foxes.opt.core.FarmOptProblem.n_sel_turbines", "foxes.opt.core.FarmOptProblem.n_vars_float", "foxes.opt.core.FarmOptProblem.n_vars_int", "foxes.opt.core.FarmOptProblem.parse_tvar", "foxes.opt.core.FarmOptProblem.sel_turbines", "foxes.opt.core.FarmOptProblem.tvar", "foxes.opt.core.FarmOptProblem.update_problem_individual", "foxes.opt.core.FarmOptProblem.update_problem_population", "foxes.opt.core.FarmOptProblem.var_names_float", "foxes.opt.core.FarmOptProblem.var_names_int", "foxes.opt.core.FarmVarsProblem", "foxes.opt.core.FarmVarsProblem.initialize", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_individual", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_population", "foxes.opt.core.FarmVarsProblem.update_problem_individual", "foxes.opt.core.FarmVarsProblem.update_problem_population", "foxes.opt.core.PopStates", "foxes.opt.core.PopStates.__init__", "foxes.opt.core.PopStates.calculate", "foxes.opt.core.PopStates.initialize", "foxes.opt.core.PopStates.output_point_vars", "foxes.opt.core.PopStates.size", "foxes.opt.core.PopStates.weights", "foxes.opt.objectives.FarmVarObjective", "foxes.opt.objectives.FarmVarObjective.__init__", "foxes.opt.objectives.FarmVarObjective.calc_individual", "foxes.opt.objectives.FarmVarObjective.calc_population", "foxes.opt.objectives.FarmVarObjective.finalize_individual", "foxes.opt.objectives.FarmVarObjective.initialize", "foxes.opt.objectives.FarmVarObjective.maximize", "foxes.opt.objectives.FarmVarObjective.n_components", "foxes.opt.objectives.FarmVarObjective.vardeps_float", "foxes.opt.objectives.MaxFarmPower", "foxes.opt.objectives.MaxFarmPower.__init__", "foxes.opt.objectives.MaxNTurbines", "foxes.opt.objectives.MaxNTurbines.__init__", "foxes.opt.objectives.MaxNTurbines.calc_individual", "foxes.opt.objectives.MaxNTurbines.calc_population", "foxes.opt.objectives.MaxNTurbines.maximize", "foxes.opt.objectives.MaxNTurbines.n_components", "foxes.opt.objectives.MinimalMaxTI", "foxes.opt.objectives.MinimalMaxTI.__init__", "foxes.opt.problems.OptFarmVars", "foxes.opt.problems.OptFarmVars.__init__", "foxes.opt.problems.OptFarmVars.add_var", "foxes.opt.problems.OptFarmVars.initial_values_float", "foxes.opt.problems.OptFarmVars.initial_values_int", "foxes.opt.problems.OptFarmVars.initialize", "foxes.opt.problems.OptFarmVars.max_values_float", "foxes.opt.problems.OptFarmVars.max_values_int", "foxes.opt.problems.OptFarmVars.min_values_float", "foxes.opt.problems.OptFarmVars.min_values_int", "foxes.opt.problems.OptFarmVars.opt2farm_vars_individual", "foxes.opt.problems.OptFarmVars.opt2farm_vars_population", "foxes.opt.problems.OptFarmVars.var_names_float", "foxes.opt.problems.OptFarmVars.var_names_int", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_population", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.get_bounds", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Valid", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.cdist", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.Objective", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.cdist", "foxes.opt.problems.layout.geom_layouts.GeomLayout", "foxes.opt.problems.layout.geom_layouts.GeomLayout.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayout.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayout.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.var_names_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_int", "foxes.opt.problems.layout.FarmLayoutOptProblem", "foxes.opt.problems.layout.FarmLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.initialize", "foxes.opt.problems.layout.FarmLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.FarmLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_int", "foxes.opt.problems.layout.RegularLayoutOptProblem", "foxes.opt.problems.layout.RegularLayoutOptProblem.ANGLE", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegularLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegularLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegularLayoutOptProblem.var_names_float", "foxes.utils.read_shp", "foxes.utils.read_shp_polygons", "foxes.utils.runners.DaskRunner", "foxes.utils.runners.DaskRunner.__init__", "foxes.utils.runners.DaskRunner.finalize", "foxes.utils.runners.DaskRunner.initialize", "foxes.utils.runners.DaskRunner.is_distributed", "foxes.utils.runners.DaskRunner.print", "foxes.utils.runners.DaskRunner.run", "foxes.utils.runners.DefaultRunner", "foxes.utils.runners.DefaultRunner.run", "foxes.utils.runners.Runner", "foxes.utils.runners.Runner.__init__", "foxes.utils.runners.Runner.finalize", "foxes.utils.runners.Runner.initialize", "foxes.utils.runners.Runner.initialized", "foxes.utils.runners.Runner.run", "foxes.utils.show_plotly_fig", "foxes.utils.shp2csv", "foxes.utils.shp2geom2d", "foxes.utils.two_circles.area", "foxes.utils.two_circles.calc_area", "foxes.utils.uv2wd", "foxes.utils.wd2uv", "foxes.utils.wd2wdvec", "foxes.utils.wdvec2wd", "API", "foxes.algorithms", "foxes.constants", "foxes.core", "foxes", "foxes.input", "foxes.models", "foxes.opt", "foxes.opt.problems", "foxes.opt.problems.layout.geom_layouts", "foxes.output", "foxes.utils", "foxes.utils.abl.neutral", "foxes.variables", "foxes.models.wake_models", "Citation", "Examples", "History", "Welcome to FOXES", "Installation", "Static data", "Heterogeneous flow", "Layout optimization", "The model book", "Multi-height wind data", "Overview - how to setup foxes", "Power mask", "Wind sector management", "Single row of turbines", "Dynamic wakes", "Timeseries data", "Wind rose data", "Yawed rotor wakes"], "terms": {"class": [0, 1, 5, 11, 22, 23, 28, 30, 34, 38, 42, 47, 51, 53, 62, 67, 75, 78, 88, 97, 102, 110, 111, 124, 130, 132, 136, 144, 153, 158, 162, 164, 166, 169, 170, 175, 179, 182, 187, 444, 452, 463, 465, 472, 479, 490, 494, 495, 502, 505, 510, 511, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 636, 637, 638, 639, 642, 643, 648, 649, 654, 655, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 815, 820, 829, 849, 857, 858, 861, 864, 870, 873, 875, 878, 886, 906, 909, 916, 918, 926, 933, 940, 948, 956, 977, 979, 986, 997, 1004, 1013, 1023, 1046, 1047, 1052, 1059, 1068, 1070, 1076, 1078, 1083, 1092, 1093, 1097, 1098, 1102, 1103, 1107, 1108, 1113, 1118, 1123, 1124, 1129, 1130, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1220, 1226, 1231, 1242, 1251, 1259, 1266, 1268, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1297, 1303, 1306, 1312, 1315], "fox": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "core": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 36, 37, 40, 45, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 441, 442, 443, 444, 446, 448, 449, 451, 452, 455, 456, 458, 459, 462, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 485, 486, 489, 493, 494, 495, 496, 498, 499, 500, 501, 505, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 571, 575, 578, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 607, 608, 609, 611, 613, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 663, 666, 669, 672, 675, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 723, 724, 727, 728, 729, 733, 734, 735, 739, 740, 741, 745, 746, 750, 751, 752, 753, 769, 771, 772, 777, 778, 782, 783, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 807, 808, 809, 810, 811, 813, 814, 831, 843, 873, 956, 979, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1070, 1078, 1118, 1169, 1173, 1183, 1193, 1203, 1217, 1226, 1227, 1242, 1248, 1283, 1284, 1287, 1288, 1289, 1291, 1292, 1297, 1300], "sourc": [0, 1, 5, 8, 11, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 379, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 960, 961, 968, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 994, 997, 998, 999, 1002, 1004, 1006, 1009, 1011, 1012, 1026, 1039, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1297, 1298, 1300, 1301, 1302, 1315], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 192, 270, 274, 278, 282, 283, 284, 290, 299, 316, 317, 367, 368, 385, 388, 389, 390, 392, 393, 397, 398, 399, 400, 401, 402, 403, 406, 407, 409, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 504, 505, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 768, 769, 771, 772, 774, 775, 777, 778, 779, 780, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 1169, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1265, 1267, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1284, 1285, 1287, 1289, 1291, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "turbin": [0, 5, 7, 8, 16, 17, 18, 22, 28, 30, 53, 66, 67, 73, 88, 89, 90, 91, 96, 110, 117, 124, 126, 127, 146, 148, 158, 159, 160, 161, 162, 163, 164, 170, 171, 172, 173, 174, 176, 181, 182, 184, 185, 186, 189, 190, 379, 380, 381, 382, 383, 384, 402, 403, 415, 426, 432, 433, 438, 439, 440, 441, 442, 443, 494, 495, 496, 498, 505, 507, 510, 512, 513, 518, 521, 522, 527, 530, 531, 536, 538, 539, 541, 542, 547, 549, 550, 567, 578, 579, 580, 584, 587, 589, 595, 600, 601, 607, 611, 613, 617, 622, 625, 628, 633, 639, 640, 644, 650, 656, 679, 681, 683, 684, 686, 688, 689, 690, 691, 694, 695, 696, 698, 700, 701, 702, 704, 706, 708, 709, 712, 713, 716, 717, 723, 724, 727, 728, 729, 733, 734, 739, 740, 745, 750, 751, 769, 772, 777, 782, 787, 791, 793, 796, 798, 804, 806, 808, 814, 822, 827, 829, 831, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 854, 855, 856, 863, 864, 866, 868, 869, 870, 873, 875, 877, 956, 957, 977, 979, 980, 986, 987, 993, 995, 997, 998, 1001, 1003, 1004, 1006, 1010, 1036, 1039, 1040, 1041, 1046, 1059, 1060, 1068, 1069, 1070, 1076, 1077, 1078, 1080, 1093, 1097, 1098, 1102, 1103, 1107, 1108, 1113, 1124, 1135, 1154, 1155, 1160, 1166, 1173, 1174, 1183, 1184, 1193, 1194, 1217, 1226, 1242, 1248, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1296, 1299, 1300, 1301, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1312, 1313, 1314, 1315], "ar": [0, 1, 4, 5, 8, 10, 11, 15, 23, 26, 30, 33, 34, 37, 53, 75, 78, 85, 88, 95, 97, 100, 102, 109, 110, 132, 134, 136, 143, 144, 145, 147, 148, 151, 153, 155, 162, 164, 170, 176, 177, 178, 179, 284, 438, 444, 445, 449, 452, 459, 463, 465, 469, 472, 476, 479, 486, 490, 494, 495, 501, 510, 511, 518, 519, 527, 528, 537, 540, 548, 553, 557, 558, 560, 561, 564, 565, 566, 567, 571, 572, 574, 578, 579, 581, 582, 586, 587, 591, 593, 594, 598, 599, 600, 603, 604, 609, 611, 614, 615, 616, 619, 620, 623, 624, 626, 627, 629, 630, 634, 635, 637, 639, 641, 642, 647, 648, 653, 654, 659, 717, 719, 735, 741, 746, 752, 778, 783, 789, 790, 794, 795, 800, 805, 810, 827, 845, 846, 847, 860, 863, 909, 915, 916, 918, 925, 926, 932, 933, 939, 940, 947, 948, 955, 956, 977, 979, 986, 1004, 1010, 1013, 1014, 1015, 1023, 1046, 1052, 1056, 1078, 1080, 1092, 1097, 1102, 1107, 1113, 1118, 1120, 1121, 1122, 1123, 1129, 1134, 1172, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1277, 1288, 1289, 1291, 1292, 1294, 1297, 1299, 1300, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "evalu": [0, 5, 6, 30, 38, 41, 42, 46, 47, 50, 51, 117, 126, 127, 131, 144, 148, 167, 170, 172, 174, 176, 177, 178, 180, 181, 512, 513, 517, 518, 519, 521, 522, 526, 527, 530, 531, 535, 538, 541, 542, 546, 549, 550, 552, 565, 567, 571, 661, 664, 667, 670, 673, 677, 679, 681, 684, 686, 688, 690, 691, 694, 696, 698, 700, 702, 704, 706, 709, 711, 712, 713, 716, 717, 719, 723, 724, 727, 728, 729, 733, 734, 735, 739, 740, 741, 745, 746, 750, 751, 752, 769, 777, 778, 782, 783, 787, 789, 792, 793, 797, 798, 803, 804, 807, 808, 813, 814, 829, 873, 893, 894, 896, 897, 898, 899, 902, 903, 1004, 1018, 1019, 1046, 1078, 1173, 1174, 1183, 1193, 1203, 1217, 1226, 1242, 1284, 1289, 1291, 1292, 1293, 1298, 1300, 1301, 1308, 1310, 1311, 1312, 1313], "onc": [0, 518, 1304, 1305, 1311, 1312, 1315], "order": [0, 30, 117, 170, 172, 192, 284, 317, 415, 494, 505, 654, 679, 681, 686, 688, 691, 694, 698, 700, 704, 706, 1013, 1023, 1284, 1289, 1296, 1305, 1309, 1310, 1311], "i": [0, 2, 7, 13, 24, 31, 36, 75, 76, 77, 81, 90, 99, 101, 105, 117, 133, 135, 139, 147, 148, 158, 163, 172, 179, 192, 252, 275, 284, 317, 330, 365, 438, 440, 446, 452, 455, 467, 474, 482, 492, 498, 510, 511, 518, 519, 527, 528, 537, 539, 540, 548, 553, 554, 555, 559, 563, 566, 567, 571, 572, 574, 578, 579, 580, 584, 587, 589, 595, 601, 607, 613, 617, 622, 624, 625, 627, 628, 633, 640, 642, 643, 644, 648, 649, 650, 654, 656, 679, 681, 688, 694, 700, 706, 711, 712, 713, 714, 716, 723, 724, 727, 729, 733, 736, 737, 739, 742, 745, 750, 777, 782, 787, 801, 836, 857, 862, 872, 877, 914, 915, 924, 925, 931, 932, 938, 939, 946, 947, 954, 955, 1004, 1023, 1026, 1034, 1035, 1042, 1043, 1046, 1050, 1051, 1054, 1059, 1078, 1134, 1172, 1173, 1183, 1193, 1203, 1217, 1226, 1238, 1239, 1242, 1259, 1264, 1289, 1290, 1296, 1297, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "calcul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 36, 37, 40, 45, 49, 53, 56, 67, 68, 75, 76, 77, 78, 81, 82, 84, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 109, 110, 115, 118, 126, 127, 128, 131, 132, 133, 135, 136, 139, 140, 141, 143, 144, 145, 146, 148, 149, 151, 153, 155, 157, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 395, 396, 420, 421, 444, 446, 448, 449, 451, 452, 455, 456, 458, 459, 462, 463, 465, 467, 468, 469, 471, 472, 474, 475, 476, 478, 479, 482, 483, 485, 486, 489, 490, 494, 495, 498, 499, 500, 501, 508, 512, 513, 514, 515, 517, 518, 521, 522, 523, 524, 526, 530, 531, 532, 533, 535, 538, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 571, 572, 575, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 607, 608, 609, 611, 613, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 637, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 745, 746, 747, 750, 751, 752, 753, 769, 774, 777, 778, 779, 782, 783, 784, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 807, 808, 809, 810, 811, 813, 814, 820, 821, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 848, 849, 850, 864, 865, 874, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 905, 907, 908, 909, 914, 916, 918, 924, 926, 931, 933, 938, 940, 946, 948, 954, 956, 959, 960, 961, 977, 979, 981, 982, 986, 989, 990, 997, 1004, 1013, 1023, 1042, 1043, 1046, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1059, 1061, 1062, 1068, 1070, 1072, 1073, 1076, 1078, 1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1123, 1125, 1126, 1129, 1131, 1132, 1134, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1172, 1173, 1183, 1193, 1203, 1217, 1226, 1238, 1239, 1242, 1277, 1278, 1279, 1280, 1281, 1282, 1284, 1286, 1289, 1290, 1293, 1294, 1295, 1296, 1297, 1300, 1301, 1304, 1305, 1306, 1307, 1308, 1309, 1311, 1312, 1313, 1314, 1315], "provid": [0, 1, 3, 5, 9, 11, 14, 22, 23, 25, 30, 32, 34, 53, 75, 78, 84, 88, 93, 97, 102, 107, 110, 111, 117, 118, 124, 128, 132, 136, 141, 144, 153, 162, 164, 166, 170, 175, 179, 444, 448, 452, 458, 463, 465, 468, 472, 475, 479, 485, 490, 494, 495, 500, 510, 515, 518, 524, 527, 533, 536, 539, 544, 547, 553, 556, 558, 561, 565, 571, 575, 578, 582, 585, 587, 590, 593, 597, 599, 602, 604, 608, 611, 615, 618, 620, 624, 627, 630, 635, 637, 639, 642, 646, 648, 652, 654, 658, 660, 663, 666, 669, 672, 675, 679, 685, 686, 691, 697, 698, 703, 704, 710, 711, 714, 720, 722, 725, 730, 736, 742, 747, 774, 779, 784, 790, 795, 799, 801, 805, 809, 811, 857, 872, 877, 1052, 1055, 1287, 1289, 1300, 1303, 1304, 1305, 1306, 1307, 1308, 1311, 1313], "turbineord": [0, 505], "object": [0, 1, 3, 5, 9, 11, 14, 22, 23, 25, 30, 32, 34, 53, 59, 63, 65, 70, 75, 78, 84, 88, 93, 97, 102, 107, 110, 111, 114, 116, 117, 118, 121, 122, 124, 126, 127, 128, 132, 136, 141, 144, 153, 162, 164, 166, 170, 175, 179, 192, 222, 242, 284, 317, 340, 444, 448, 452, 458, 463, 465, 468, 472, 475, 479, 485, 490, 493, 494, 495, 500, 510, 512, 513, 515, 518, 521, 522, 524, 527, 530, 531, 533, 536, 538, 539, 541, 542, 544, 547, 549, 550, 553, 556, 558, 561, 565, 571, 575, 578, 582, 585, 587, 590, 593, 597, 599, 602, 604, 608, 611, 615, 618, 620, 624, 627, 630, 635, 637, 639, 642, 646, 648, 652, 654, 658, 660, 663, 666, 669, 672, 675, 679, 685, 686, 691, 697, 698, 703, 704, 710, 711, 714, 720, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 799, 801, 805, 809, 811, 815, 816, 822, 844, 851, 852, 853, 854, 855, 856, 864, 868, 873, 910, 920, 928, 935, 942, 950, 956, 963, 966, 977, 979, 986, 997, 998, 1004, 1007, 1008, 1013, 1018, 1019, 1021, 1022, 1023, 1026, 1030, 1035, 1046, 1047, 1052, 1055, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1083, 1092, 1097, 1102, 1107, 1111, 1113, 1118, 1123, 1129, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1179, 1183, 1189, 1193, 1199, 1203, 1210, 1217, 1218, 1220, 1226, 1228, 1231, 1242, 1249, 1251, 1276, 1287, 1289, 1291, 1303, 1304, 1305, 1306, 1309, 1310, 1311, 1313, 1314, 1315], "state": [0, 1, 5, 7, 8, 11, 16, 17, 18, 20, 22, 23, 28, 30, 34, 53, 54, 63, 67, 72, 74, 75, 78, 79, 83, 86, 87, 88, 90, 97, 102, 110, 111, 117, 122, 124, 126, 127, 132, 136, 144, 146, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 170, 171, 173, 174, 175, 176, 179, 181, 376, 377, 378, 379, 380, 428, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 510, 512, 513, 518, 521, 522, 527, 530, 531, 536, 538, 539, 541, 542, 547, 549, 550, 553, 554, 558, 561, 565, 567, 571, 578, 579, 580, 582, 584, 587, 589, 593, 595, 599, 601, 604, 607, 611, 613, 615, 617, 620, 622, 624, 625, 627, 628, 630, 633, 635, 637, 639, 640, 642, 644, 648, 650, 654, 656, 660, 663, 666, 669, 672, 675, 679, 683, 684, 686, 689, 690, 691, 695, 696, 698, 701, 702, 704, 708, 709, 711, 712, 713, 714, 716, 717, 722, 723, 724, 725, 727, 728, 729, 730, 733, 734, 736, 739, 740, 742, 745, 747, 750, 751, 753, 769, 772, 774, 777, 779, 782, 784, 787, 790, 793, 795, 798, 801, 804, 805, 808, 811, 814, 820, 821, 822, 829, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 870, 873, 874, 1004, 1026, 1049, 1052, 1053, 1057, 1058, 1060, 1069, 1077, 1080, 1089, 1224, 1237, 1255, 1285, 1286, 1289, 1290, 1293, 1296, 1300, 1301, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "ambient": [0, 11, 16, 17, 18, 22, 34, 127, 144, 145, 146, 148, 153, 177, 180, 191, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 436, 437, 444, 513, 522, 531, 542, 550, 561, 562, 565, 567, 571, 572, 719, 730, 731, 791, 792, 796, 797, 803, 806, 807, 811, 812, 813, 829, 831, 837, 843, 1284, 1285, 1288, 1289, 1296, 1300, 1301, 1307, 1308, 1309, 1311, 1313, 1314], "wake_model": [0, 5, 6, 16, 124, 125, 171, 505, 510, 511, 518, 519, 527, 528, 536, 537, 539, 540, 547, 548, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "list": [0, 1, 4, 5, 6, 8, 10, 11, 12, 15, 16, 18, 22, 23, 26, 30, 33, 34, 37, 42, 43, 47, 48, 53, 58, 65, 67, 68, 75, 77, 78, 79, 80, 83, 85, 88, 94, 95, 97, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 120, 122, 124, 125, 129, 132, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 151, 153, 154, 155, 158, 159, 160, 161, 162, 164, 166, 168, 170, 171, 175, 179, 182, 184, 186, 187, 317, 330, 438, 442, 443, 444, 445, 447, 449, 452, 454, 457, 459, 460, 463, 465, 469, 472, 476, 479, 481, 484, 486, 487, 490, 494, 495, 501, 509, 510, 511, 516, 518, 519, 525, 527, 528, 534, 536, 537, 539, 540, 545, 547, 548, 553, 554, 557, 558, 560, 561, 562, 564, 565, 571, 572, 578, 579, 581, 582, 583, 586, 587, 591, 593, 598, 599, 600, 603, 604, 609, 611, 614, 615, 616, 619, 620, 623, 624, 626, 627, 629, 630, 634, 635, 637, 639, 641, 642, 647, 648, 653, 654, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 678, 679, 686, 691, 698, 704, 711, 714, 721, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 791, 794, 795, 796, 800, 801, 805, 806, 810, 811, 815, 817, 819, 831, 834, 835, 838, 840, 841, 842, 844, 863, 866, 868, 869, 877, 878, 880, 883, 885, 886, 906, 917, 918, 919, 956, 957, 959, 960, 961, 962, 973, 974, 977, 979, 980, 981, 982, 986, 987, 989, 990, 995, 997, 998, 1003, 1006, 1013, 1023, 1026, 1040, 1044, 1045, 1047, 1052, 1056, 1059, 1060, 1061, 1062, 1068, 1069, 1070, 1072, 1073, 1076, 1077, 1080, 1090, 1091, 1094, 1095, 1099, 1100, 1104, 1105, 1109, 1110, 1115, 1116, 1125, 1126, 1131, 1132, 1134, 1137, 1138, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163, 1172, 1182, 1192, 1202, 1215, 1216, 1225, 1240, 1241, 1256, 1258, 1283, 1284, 1286, 1287, 1288, 1293, 1300, 1303, 1306, 1309], "wakemodel": [0, 5, 6, 8, 124, 125, 171, 175, 176, 177, 178, 505, 511, 519, 528, 537, 540, 548, 714, 1286, 1297], "wake": [0, 1, 5, 6, 7, 8, 16, 17, 18, 22, 23, 30, 117, 124, 125, 126, 127, 130, 131, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 410, 417, 418, 436, 505, 510, 511, 512, 513, 517, 518, 519, 521, 522, 526, 527, 528, 530, 531, 535, 536, 537, 538, 539, 540, 541, 542, 546, 547, 548, 549, 550, 551, 552, 561, 630, 679, 680, 683, 684, 686, 689, 690, 691, 695, 696, 698, 699, 701, 702, 704, 705, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 768, 769, 772, 774, 775, 777, 778, 779, 780, 782, 783, 784, 785, 787, 789, 790, 791, 792, 793, 795, 797, 798, 801, 802, 803, 804, 805, 807, 808, 811, 812, 813, 814, 1173, 1183, 1284, 1286, 1289, 1291, 1292, 1296, 1297, 1299, 1300, 1301, 1304, 1308, 1309, 1311, 1313, 1314], "appli": [0, 8, 16, 176, 177, 178, 180, 181, 717, 719, 735, 741, 746, 752, 778, 783, 789, 792, 793, 797, 798, 803, 804, 807, 808, 813, 814, 836, 1004, 1011, 1012, 1046, 1078, 1080, 1134, 1172, 1173, 1175, 1176, 1183, 1185, 1186, 1193, 1195, 1196, 1203, 1205, 1206, 1217, 1226, 1242, 1284, 1289, 1305, 1315], "all": [0, 1, 2, 3, 5, 7, 9, 11, 13, 14, 16, 17, 18, 22, 23, 24, 25, 30, 31, 32, 34, 36, 53, 75, 76, 78, 81, 84, 87, 88, 90, 93, 94, 97, 99, 102, 105, 107, 108, 110, 111, 118, 120, 124, 125, 128, 129, 132, 133, 136, 139, 141, 142, 144, 148, 153, 157, 162, 163, 164, 166, 170, 172, 175, 179, 180, 182, 186, 192, 247, 284, 317, 444, 445, 446, 448, 451, 452, 455, 458, 462, 463, 465, 467, 468, 471, 472, 474, 475, 478, 479, 482, 485, 489, 490, 494, 495, 498, 500, 505, 510, 515, 516, 518, 524, 525, 527, 533, 534, 536, 539, 544, 545, 547, 551, 553, 555, 556, 558, 559, 561, 563, 565, 567, 571, 575, 578, 579, 580, 582, 584, 585, 587, 589, 590, 593, 595, 597, 599, 601, 602, 604, 607, 608, 610, 611, 613, 615, 617, 618, 620, 622, 624, 625, 627, 628, 630, 633, 635, 637, 639, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 663, 666, 669, 672, 675, 679, 681, 685, 686, 688, 691, 694, 697, 698, 700, 703, 704, 706, 710, 711, 714, 720, 721, 722, 725, 730, 736, 742, 747, 753, 770, 774, 779, 784, 790, 792, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 820, 822, 829, 848, 849, 857, 859, 861, 863, 864, 866, 868, 869, 870, 873, 875, 906, 956, 959, 960, 961, 975, 976, 977, 979, 981, 982, 985, 986, 989, 990, 994, 996, 997, 1002, 1004, 1006, 1010, 1013, 1019, 1023, 1034, 1035, 1046, 1052, 1054, 1055, 1058, 1059, 1060, 1061, 1062, 1067, 1068, 1069, 1070, 1072, 1073, 1076, 1077, 1078, 1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1122, 1123, 1125, 1126, 1129, 1131, 1132, 1134, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1172, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1258, 1278, 1283, 1286, 1287, 1288, 1289, 1294, 1300, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1311, 1312, 1314], "rotor_model": [0, 16, 505, 518, 519, 527, 528, 537, 539, 540, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 1304, 1305, 1306, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "rotormodel": [0, 144, 145, 146, 147, 148, 149, 150, 151, 152, 505, 518, 519, 527, 528, 537, 539, 540, 565, 571, 1286, 1289], "rotor": [0, 16, 88, 90, 97, 98, 124, 144, 146, 147, 148, 149, 150, 152, 158, 159, 164, 165, 191, 373, 374, 375, 394, 395, 396, 407, 419, 420, 421, 426, 438, 505, 518, 519, 527, 528, 536, 537, 539, 540, 547, 551, 565, 566, 567, 568, 569, 570, 571, 574, 576, 577, 593, 594, 605, 611, 612, 686, 801, 820, 821, 822, 956, 957, 1080, 1093, 1285, 1286, 1289, 1296, 1299, 1300, 1301, 1305, 1308, 1312, 1313], "wake_fram": [0, 16, 124, 125, 505, 511, 518, 519, 528, 536, 537, 539, 540, 547, 548, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 1304, 1305, 1306, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "wakefram": [0, 124, 125, 170, 171, 172, 173, 174, 505, 511, 519, 528, 537, 540, 548, 679, 680, 686, 691, 698, 704, 705, 1286, 1289], "frame": [0, 16, 30, 124, 125, 147, 170, 171, 173, 174, 176, 452, 505, 511, 519, 528, 537, 540, 548, 553, 554, 566, 574, 679, 680, 683, 684, 689, 690, 695, 696, 701, 702, 704, 705, 708, 709, 717, 753, 1257, 1284, 1286, 1289, 1297, 1300, 1304, 1308, 1312, 1315], "partial_wakes_model": [0, 16, 1304, 1305, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "partialwakesmodel": [0, 124, 125, 126, 127, 128, 129, 130, 131, 510, 518, 527, 539, 547, 1286, 1289], "partial": [0, 16, 124, 130, 505, 510, 511, 518, 527, 536, 539, 547, 711, 714, 1286, 1289, 1297, 1308], "farm_control": [0, 16, 494, 505, 1306], "farmcontrol": [0, 88, 89, 90, 91, 92, 93, 94, 95, 96, 494, 505, 1286, 1289], "farm": [0, 1, 2, 7, 8, 13, 16, 17, 18, 22, 23, 24, 28, 31, 34, 36, 40, 45, 49, 53, 54, 66, 81, 88, 90, 91, 97, 99, 102, 105, 110, 117, 124, 126, 127, 131, 133, 139, 144, 146, 148, 149, 158, 159, 163, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 185, 315, 438, 439, 440, 441, 442, 443, 446, 455, 467, 474, 482, 493, 494, 495, 498, 505, 510, 512, 513, 517, 518, 521, 522, 526, 527, 530, 531, 535, 536, 538, 539, 541, 542, 546, 547, 549, 550, 551, 552, 555, 559, 563, 567, 568, 578, 579, 580, 584, 589, 595, 601, 604, 607, 611, 613, 617, 622, 625, 628, 631, 633, 640, 644, 650, 656, 679, 681, 683, 684, 688, 689, 690, 694, 695, 696, 700, 701, 702, 704, 705, 706, 708, 709, 712, 713, 716, 717, 719, 723, 724, 727, 728, 729, 730, 731, 733, 734, 735, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 769, 774, 775, 777, 778, 782, 783, 787, 789, 792, 793, 797, 798, 803, 804, 807, 808, 813, 814, 820, 821, 822, 823, 824, 829, 830, 831, 832, 833, 836, 837, 849, 850, 851, 852, 853, 854, 855, 856, 861, 862, 864, 865, 866, 868, 869, 870, 871, 874, 956, 977, 979, 986, 991, 997, 1000, 1004, 1020, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1059, 1068, 1070, 1076, 1078, 1080, 1088, 1089, 1173, 1183, 1193, 1203, 1217, 1223, 1224, 1226, 1236, 1237, 1238, 1239, 1242, 1254, 1255, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1298, 1300, 1301, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "control": [0, 16, 494, 505, 1289], "n_state": [0, 2, 7, 8, 13, 18, 24, 31, 36, 63, 67, 70, 72, 81, 87, 88, 90, 99, 105, 117, 126, 127, 133, 139, 146, 148, 149, 157, 158, 159, 160, 161, 163, 171, 172, 173, 174, 176, 177, 178, 180, 181, 446, 451, 455, 462, 467, 471, 474, 478, 482, 489, 492, 498, 512, 513, 521, 522, 530, 531, 538, 541, 542, 549, 550, 551, 555, 559, 563, 567, 568, 578, 579, 580, 584, 589, 595, 601, 606, 607, 613, 617, 622, 625, 628, 633, 640, 644, 650, 656, 681, 683, 684, 688, 689, 690, 694, 695, 696, 700, 701, 702, 706, 708, 709, 712, 713, 716, 717, 719, 723, 724, 727, 728, 729, 733, 734, 735, 739, 740, 741, 745, 746, 750, 751, 752, 769, 772, 777, 778, 782, 783, 787, 789, 792, 793, 797, 798, 803, 804, 807, 808, 813, 814, 1004, 1006, 1046, 1048, 1049, 1052, 1054, 1058, 1078, 1088, 1089, 1217, 1223, 1224, 1226, 1236, 1237, 1242, 1254, 1255, 1288, 1290, 1311], "int": [0, 3, 9, 14, 16, 22, 25, 27, 29, 32, 40, 45, 49, 53, 54, 58, 64, 65, 71, 72, 73, 74, 82, 84, 86, 92, 93, 106, 107, 115, 118, 121, 122, 126, 127, 128, 140, 141, 146, 148, 150, 156, 158, 159, 161, 184, 185, 192, 213, 317, 331, 363, 438, 440, 441, 442, 443, 445, 448, 450, 452, 454, 456, 458, 460, 461, 468, 470, 475, 477, 479, 481, 483, 485, 487, 488, 499, 500, 508, 512, 513, 514, 515, 518, 519, 521, 522, 523, 524, 528, 530, 531, 532, 533, 537, 538, 541, 542, 543, 544, 549, 550, 556, 567, 569, 571, 572, 575, 576, 585, 590, 596, 597, 602, 608, 618, 645, 646, 651, 652, 657, 658, 682, 685, 691, 692, 697, 703, 707, 710, 718, 720, 788, 799, 809, 818, 820, 821, 822, 827, 831, 832, 843, 844, 851, 852, 853, 854, 855, 856, 863, 866, 868, 869, 956, 957, 959, 960, 961, 963, 964, 965, 966, 968, 969, 970, 976, 977, 979, 980, 981, 982, 983, 984, 986, 987, 989, 990, 992, 993, 995, 997, 998, 1001, 1003, 1004, 1006, 1007, 1008, 1013, 1014, 1015, 1017, 1021, 1022, 1023, 1025, 1026, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1046, 1047, 1049, 1052, 1053, 1055, 1057, 1059, 1061, 1062, 1063, 1064, 1066, 1068, 1070, 1072, 1073, 1075, 1076, 1078, 1080, 1082, 1083, 1085, 1087, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1120, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1135, 1137, 1138, 1139, 1141, 1142, 1144, 1145, 1147, 1148, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1163, 1165, 1166, 1169, 1173, 1174, 1179, 1183, 1184, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1199, 1203, 1204, 1209, 1210, 1212, 1214, 1216, 1217, 1218, 1220, 1224, 1226, 1227, 1228, 1230, 1231, 1233, 1235, 1237, 1241, 1242, 1249, 1251, 1255, 1258, 1259, 1260, 1275, 1279, 1280, 1281, 1282, 1285, 1303], "number": [0, 22, 27, 29, 53, 66, 67, 71, 72, 73, 78, 86, 144, 150, 153, 156, 182, 185, 192, 203, 252, 275, 283, 299, 317, 322, 363, 365, 443, 444, 445, 450, 452, 461, 463, 465, 470, 472, 477, 479, 488, 490, 518, 519, 565, 569, 571, 572, 576, 615, 705, 726, 731, 737, 742, 743, 748, 753, 768, 775, 779, 780, 784, 785, 790, 791, 795, 796, 805, 806, 822, 827, 851, 852, 853, 854, 855, 856, 866, 868, 869, 956, 968, 969, 970, 977, 979, 984, 986, 992, 997, 1004, 1034, 1035, 1037, 1038, 1046, 1049, 1052, 1057, 1059, 1066, 1068, 1070, 1075, 1076, 1078, 1089, 1092, 1093, 1096, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1112, 1113, 1117, 1118, 1123, 1124, 1128, 1129, 1133, 1134, 1135, 1141, 1142, 1147, 1148, 1153, 1154, 1155, 1159, 1160, 1165, 1166, 1169, 1172, 1173, 1174, 1183, 1184, 1193, 1194, 1203, 1204, 1217, 1224, 1226, 1227, 1237, 1242, 1255, 1260, 1290, 1292, 1298, 1305, 1306, 1308], "farmwakescalcul": [0, 1, 2, 3, 4, 22, 23, 24, 25, 26], "farmdatamodel": [0, 1, 22, 23, 30, 34, 88, 97, 98, 99, 100, 101, 102, 103, 104, 110, 144, 162, 1284, 1286], "thi": [0, 1, 2, 3, 5, 7, 9, 11, 13, 14, 22, 23, 24, 25, 30, 31, 32, 34, 36, 76, 77, 81, 84, 90, 93, 97, 98, 99, 101, 105, 107, 118, 127, 128, 133, 135, 139, 141, 146, 148, 163, 172, 175, 176, 187, 446, 448, 455, 458, 467, 468, 474, 475, 482, 485, 498, 500, 510, 513, 515, 522, 524, 531, 533, 542, 544, 550, 555, 556, 559, 561, 563, 567, 575, 580, 584, 585, 587, 589, 590, 595, 597, 601, 602, 605, 607, 608, 613, 617, 618, 622, 625, 628, 633, 640, 644, 646, 650, 652, 656, 658, 669, 679, 681, 685, 688, 694, 697, 700, 703, 705, 706, 710, 711, 714, 717, 720, 722, 725, 726, 730, 731, 736, 737, 742, 743, 747, 748, 753, 768, 774, 775, 779, 780, 784, 785, 799, 801, 809, 829, 851, 852, 853, 854, 855, 856, 857, 886, 907, 926, 933, 940, 956, 957, 1023, 1042, 1043, 1050, 1051, 1054, 1055, 1080, 1134, 1172, 1173, 1183, 1193, 1203, 1226, 1238, 1239, 1284, 1287, 1288, 1289, 1290, 1294, 1300, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "effect": [0, 1, 5, 22, 23, 124, 144, 146, 394, 395, 396, 419, 420, 421, 539, 565, 571, 1289, 1291, 1292, 1296, 1308, 1309, 1310, 1314, 1315], "data": [0, 1, 2, 3, 5, 7, 8, 9, 11, 13, 14, 16, 17, 18, 22, 23, 24, 25, 28, 30, 31, 32, 34, 36, 53, 54, 59, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 84, 88, 90, 93, 97, 99, 101, 102, 105, 107, 110, 111, 114, 116, 117, 118, 122, 124, 126, 127, 128, 131, 132, 133, 135, 136, 139, 141, 144, 146, 148, 149, 153, 158, 162, 163, 164, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 190, 192, 264, 266, 284, 317, 438, 439, 440, 441, 444, 445, 446, 448, 452, 454, 455, 458, 463, 465, 467, 468, 472, 473, 474, 475, 479, 481, 482, 485, 490, 492, 494, 495, 498, 500, 510, 512, 513, 515, 517, 518, 521, 522, 524, 526, 527, 530, 531, 533, 535, 536, 538, 539, 541, 542, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 563, 565, 567, 568, 571, 575, 578, 580, 582, 583, 584, 585, 587, 589, 590, 592, 593, 595, 597, 599, 600, 601, 602, 604, 606, 607, 608, 611, 612, 613, 615, 616, 617, 618, 620, 622, 624, 625, 627, 628, 630, 631, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 646, 648, 649, 650, 652, 654, 655, 656, 658, 660, 661, 663, 664, 666, 667, 669, 670, 672, 673, 675, 677, 679, 681, 683, 684, 685, 686, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 769, 770, 771, 772, 774, 775, 777, 778, 779, 782, 783, 784, 787, 789, 790, 792, 793, 795, 797, 798, 799, 801, 803, 804, 805, 807, 808, 809, 811, 813, 814, 820, 821, 829, 834, 835, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 849, 857, 860, 861, 862, 863, 864, 866, 868, 869, 870, 873, 875, 878, 879, 885, 886, 891, 892, 895, 901, 905, 956, 964, 965, 977, 979, 986, 997, 1004, 1021, 1022, 1042, 1043, 1046, 1050, 1051, 1052, 1054, 1055, 1059, 1063, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1218, 1226, 1228, 1238, 1239, 1242, 1249, 1257, 1284, 1285, 1286, 1287, 1288, 1289, 1293, 1294, 1295, 1296, 1299, 1300, 1301, 1304, 1305, 1308, 1309, 1310, 1311, 1312, 1315], "pointwakescalcul": [0, 5, 6, 7, 8, 9, 10, 22], "pointdatamodel": [0, 5, 11, 18, 22, 79, 80, 132, 133, 134, 135, 136, 137, 138, 153, 505, 553, 558, 561, 1286, 1289], "point": [0, 5, 7, 8, 11, 12, 13, 18, 22, 53, 63, 67, 70, 71, 78, 79, 81, 117, 126, 127, 131, 132, 133, 136, 139, 144, 146, 147, 148, 149, 150, 152, 170, 173, 174, 176, 177, 178, 180, 181, 191, 192, 252, 275, 369, 370, 373, 374, 375, 378, 442, 443, 446, 455, 467, 474, 482, 505, 512, 513, 517, 518, 519, 521, 522, 526, 530, 531, 535, 538, 541, 542, 546, 547, 549, 550, 551, 552, 555, 559, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 679, 683, 684, 686, 689, 690, 691, 692, 695, 696, 698, 699, 701, 702, 704, 708, 709, 712, 713, 716, 717, 719, 723, 724, 727, 728, 729, 733, 734, 735, 739, 740, 741, 745, 746, 750, 751, 752, 769, 777, 778, 782, 783, 787, 789, 792, 793, 797, 798, 803, 804, 807, 808, 813, 814, 849, 850, 851, 852, 853, 864, 865, 866, 868, 869, 873, 874, 909, 912, 913, 914, 915, 916, 918, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 944, 945, 946, 947, 948, 952, 953, 954, 955, 1004, 1006, 1054, 1134, 1172, 1173, 1174, 1177, 1183, 1184, 1187, 1193, 1194, 1197, 1203, 1204, 1207, 1227, 1258, 1277, 1278, 1284, 1285, 1286, 1289, 1292, 1294, 1300, 1303, 1304, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1314], "interest": [0, 5, 6, 18, 22, 877, 1289, 1308, 1311, 1312], "setambpointresult": [0, 11, 12, 13, 14, 15, 22], "copi": [0, 11, 12, 22, 34, 148, 192, 261, 317, 567, 1284], "result": [0, 2, 7, 11, 13, 17, 18, 22, 24, 28, 31, 34, 36, 38, 40, 42, 45, 47, 49, 51, 76, 77, 81, 90, 99, 101, 105, 127, 133, 135, 139, 144, 146, 148, 163, 167, 171, 177, 179, 180, 191, 284, 446, 455, 467, 474, 482, 498, 513, 518, 522, 531, 542, 550, 555, 559, 561, 562, 563, 565, 567, 571, 580, 584, 589, 595, 601, 607, 613, 617, 622, 625, 628, 633, 640, 644, 650, 656, 661, 664, 667, 670, 673, 677, 679, 719, 725, 727, 730, 733, 736, 739, 747, 750, 790, 792, 795, 797, 803, 805, 807, 813, 820, 821, 822, 829, 830, 831, 832, 834, 835, 836, 838, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 861, 862, 864, 865, 866, 868, 869, 870, 871, 874, 960, 961, 964, 965, 981, 982, 989, 990, 1011, 1012, 1014, 1015, 1018, 1021, 1022, 1054, 1061, 1062, 1063, 1072, 1073, 1094, 1095, 1099, 1100, 1104, 1105, 1109, 1110, 1115, 1116, 1120, 1121, 1125, 1126, 1131, 1132, 1134, 1137, 1138, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163, 1172, 1175, 1176, 1185, 1186, 1195, 1196, 1205, 1206, 1218, 1228, 1249, 1265, 1267, 1273, 1284, 1285, 1289, 1293, 1296, 1300, 1305, 1307, 1308, 1309, 1311, 1312, 1313, 1314, 1315], "mbook": [0, 16, 53, 54, 493, 873, 874, 875, 876, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "constructor": [0, 1, 5, 6, 11, 12, 16, 22, 23, 27, 30, 34, 35, 38, 39, 42, 43, 47, 48, 51, 52, 53, 54, 62, 67, 68, 75, 78, 79, 88, 89, 97, 98, 102, 103, 110, 111, 112, 124, 125, 132, 136, 137, 144, 145, 153, 158, 159, 162, 164, 165, 166, 170, 175, 179, 182, 183, 187, 188, 444, 445, 452, 454, 463, 465, 466, 472, 473, 479, 481, 490, 494, 495, 496, 502, 504, 505, 507, 510, 511, 518, 519, 527, 528, 536, 537, 539, 540, 547, 548, 553, 554, 558, 561, 562, 565, 571, 572, 578, 579, 582, 583, 587, 588, 593, 594, 599, 600, 604, 605, 611, 612, 615, 616, 620, 621, 624, 627, 630, 631, 635, 636, 637, 638, 639, 642, 643, 648, 649, 654, 655, 660, 663, 666, 669, 672, 675, 676, 679, 680, 686, 687, 691, 692, 698, 699, 704, 705, 711, 714, 715, 722, 725, 726, 730, 731, 736, 737, 742, 743, 747, 748, 753, 768, 774, 775, 779, 780, 784, 785, 790, 791, 795, 796, 801, 802, 805, 806, 811, 812, 815, 816, 820, 821, 829, 830, 849, 850, 861, 862, 864, 865, 870, 871, 873, 874, 875, 876, 878, 879, 916, 917, 918, 919, 933, 934, 940, 941, 948, 949, 956, 957, 977, 978, 979, 980, 986, 987, 1004, 1006, 1046, 1052, 1053, 1059, 1060, 1068, 1069, 1070, 1071, 1076, 1077, 1078, 1079, 1092, 1093, 1097, 1098, 1102, 1103, 1107, 1108, 1123, 1124, 1129, 1130, 1135, 1136, 1142, 1143, 1148, 1149, 1154, 1155, 1160, 1161, 1166, 1167, 1173, 1174, 1183, 1184, 1193, 1194, 1203, 1204, 1217, 1242, 1248, 1259, 1260, 1306, 1313], "init_st": [0, 20, 22], "initi": [0, 1, 3, 5, 9, 11, 14, 20, 21, 22, 23, 25, 30, 32, 34, 53, 61, 65, 68, 70, 75, 77, 78, 84, 88, 93, 96, 97, 102, 107, 110, 111, 118, 119, 124, 128, 131, 132, 136, 141, 144, 153, 162, 164, 166, 170, 175, 178, 179, 444, 445, 448, 452, 458, 463, 465, 468, 472, 475, 479, 485, 490, 494, 495, 500, 510, 515, 517, 518, 524, 526, 527, 533, 535, 536, 539, 544, 546, 547, 552, 553, 556, 558, 561, 565, 571, 575, 578, 582, 585, 587, 590, 593, 597, 599, 602, 604, 608, 611, 615, 618, 620, 624, 627, 630, 635, 637, 639, 642, 646, 648, 652, 654, 658, 660, 663, 666, 669, 672, 675, 679, 685, 686, 691, 697, 698, 703, 704, 710, 711, 714, 720, 722, 725, 730, 735, 736, 741, 742, 746, 747, 752, 753, 774, 778, 779, 783, 784, 789, 790, 795, 799, 801, 805, 809, 811, 956, 966, 967, 977, 979, 983, 986, 997, 1004, 1024, 1025, 1026, 1046, 1047, 1052, 1055, 1059, 1064, 1068, 1070, 1076, 1078, 1080, 1081, 1082, 1083, 1092, 1097, 1102, 1107, 1111, 1113, 1114, 1118, 1119, 1123, 1127, 1129, 1135, 1139, 1142, 1148, 1154, 1160, 1166, 1169, 1170, 1173, 1178, 1179, 1183, 1188, 1189, 1193, 1198, 1199, 1203, 1208, 1209, 1210, 1217, 1219, 1220, 1226, 1229, 1230, 1231, 1242, 1250, 1251, 1259, 1262, 1266, 1268, 1269, 1271, 1272, 1300, 1305, 1307], "need": [0, 20, 22, 117, 166, 168, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 678, 790, 794, 795, 800, 805, 810, 1305, 1307, 1309, 1310, 1314], "calc_farm": [0, 17, 22, 28, 1004, 1006, 1304, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "calc_paramet": [0, 17, 18], "persist": [0, 17], "true": [0, 17, 18, 22, 28, 40, 45, 49, 119, 148, 187, 192, 202, 275, 317, 321, 365, 441, 445, 492, 567, 571, 572, 611, 612, 772, 844, 851, 852, 853, 854, 855, 856, 878, 884, 914, 915, 924, 925, 926, 928, 931, 932, 933, 935, 938, 939, 940, 942, 946, 947, 954, 955, 967, 1010, 1070, 1071, 1177, 1187, 1197, 1207, 1258, 1260, 1304, 1305, 1307, 1309, 1312, 1313, 1314], "final": [0, 1, 5, 11, 16, 17, 18, 19, 22, 23, 28, 30, 34, 53, 54, 57, 58, 75, 78, 82, 88, 92, 96, 97, 102, 106, 110, 111, 115, 124, 132, 136, 140, 144, 153, 162, 164, 166, 170, 175, 177, 179, 180, 444, 452, 456, 463, 465, 472, 479, 483, 490, 494, 495, 499, 505, 508, 510, 514, 518, 523, 527, 532, 536, 539, 543, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 596, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 679, 682, 686, 691, 698, 704, 707, 711, 714, 718, 719, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 788, 790, 791, 792, 795, 797, 801, 802, 803, 805, 807, 811, 813, 956, 963, 964, 965, 977, 979, 986, 997, 1004, 1021, 1022, 1046, 1052, 1059, 1063, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1218, 1226, 1228, 1242, 1249, 1259, 1261, 1266, 1268, 1270, 1305, 1310, 1312, 1314], "calc_point": [0, 18, 22, 851, 852, 853, 854, 855, 856, 1311], "farm_result": [0, 17, 18, 22, 28, 820, 821, 829, 830, 849, 850, 861, 862, 870, 871, 1304, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "var": [0, 1, 5, 11, 18, 22, 23, 30, 34, 53, 75, 77, 78, 88, 97, 102, 110, 111, 123, 124, 127, 132, 136, 144, 153, 162, 164, 166, 168, 170, 175, 179, 192, 313, 317, 387, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 513, 518, 522, 527, 531, 536, 539, 542, 547, 550, 553, 558, 561, 562, 565, 571, 578, 582, 587, 593, 594, 599, 604, 606, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 678, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 791, 795, 796, 801, 805, 806, 811, 829, 834, 835, 838, 839, 840, 841, 842, 848, 849, 851, 852, 853, 854, 855, 856, 864, 866, 868, 869, 873, 956, 959, 977, 979, 986, 997, 1004, 1023, 1039, 1041, 1046, 1047, 1048, 1049, 1052, 1059, 1068, 1070, 1076, 1078, 1088, 1089, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1134, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1172, 1217, 1223, 1224, 1226, 1236, 1237, 1242, 1254, 1255, 1285], "none": [0, 1, 5, 6, 7, 11, 12, 16, 18, 22, 23, 27, 30, 34, 38, 39, 40, 42, 43, 45, 47, 48, 49, 53, 54, 58, 59, 63, 65, 67, 74, 75, 77, 78, 83, 88, 90, 97, 102, 110, 111, 116, 117, 124, 125, 127, 132, 136, 139, 144, 146, 148, 153, 154, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 175, 179, 182, 183, 192, 225, 236, 317, 343, 353, 438, 440, 442, 443, 444, 445, 447, 452, 454, 457, 460, 463, 465, 466, 472, 473, 479, 481, 484, 487, 490, 494, 495, 502, 504, 505, 507, 509, 510, 511, 513, 518, 519, 522, 527, 528, 531, 536, 537, 539, 540, 542, 547, 548, 550, 553, 558, 561, 565, 567, 571, 578, 582, 587, 593, 599, 600, 604, 611, 615, 620, 624, 627, 630, 631, 635, 637, 639, 642, 643, 648, 649, 654, 655, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 699, 704, 705, 711, 714, 722, 725, 730, 731, 736, 742, 743, 747, 748, 774, 775, 779, 784, 790, 791, 795, 796, 801, 802, 805, 806, 811, 815, 816, 820, 821, 822, 825, 826, 827, 828, 829, 831, 836, 843, 844, 849, 850, 851, 852, 853, 854, 855, 856, 861, 862, 863, 864, 866, 868, 869, 870, 872, 873, 874, 875, 877, 878, 879, 884, 907, 926, 928, 933, 935, 940, 942, 956, 957, 959, 960, 961, 977, 979, 980, 981, 982, 986, 987, 989, 990, 997, 998, 1004, 1006, 1007, 1008, 1013, 1023, 1026, 1046, 1052, 1059, 1060, 1061, 1062, 1068, 1069, 1070, 1072, 1073, 1076, 1077, 1078, 1080, 1092, 1093, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1123, 1124, 1125, 1126, 1129, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1170, 1172, 1173, 1174, 1177, 1183, 1184, 1187, 1193, 1194, 1197, 1203, 1204, 1207, 1217, 1226, 1227, 1242, 1258, 1259, 1260, 1294, 1304, 1306, 1307, 1311, 1312, 1315], "vars_to_amb": [0, 11, 12, 18, 22], "given": [0, 1, 5, 11, 18, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 122, 124, 132, 136, 144, 153, 158, 159, 162, 164, 166, 170, 173, 175, 179, 284, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 631, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 683, 686, 689, 691, 695, 698, 701, 704, 705, 708, 711, 714, 722, 725, 730, 731, 736, 742, 743, 747, 748, 753, 774, 775, 779, 784, 790, 795, 801, 805, 811, 829, 831, 836, 843, 848, 878, 884, 893, 896, 897, 902, 956, 964, 965, 977, 979, 986, 997, 1004, 1014, 1015, 1021, 1022, 1046, 1052, 1059, 1063, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1120, 1121, 1123, 1129, 1134, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1172, 1173, 1183, 1193, 1203, 1217, 1218, 1226, 1228, 1242, 1249, 1259, 1265, 1266, 1267, 1268, 1273, 1288, 1289, 1290, 1294, 1295, 1300, 1310], "set": [0, 16, 18, 22, 53, 54, 75, 88, 96, 158, 159, 164, 492, 494, 553, 604, 611, 822, 1289, 1300, 1303, 1309, 1310, 1313, 1314, 1315], "clear_mem": [0, 19, 22, 53, 57, 1312], "fals": [0, 1, 5, 11, 17, 18, 19, 22, 23, 30, 34, 53, 57, 67, 74, 75, 78, 88, 97, 98, 102, 110, 111, 116, 117, 124, 132, 136, 144, 146, 148, 153, 162, 164, 166, 170, 175, 179, 192, 202, 275, 317, 321, 438, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 562, 565, 567, 571, 578, 582, 587, 593, 599, 604, 605, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 731, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 820, 821, 822, 829, 831, 837, 843, 851, 852, 853, 854, 855, 856, 861, 863, 909, 910, 914, 916, 918, 920, 924, 926, 931, 933, 938, 940, 946, 948, 950, 954, 957, 1013, 1023, 1052, 1080, 1258, 1276, 1294, 1300, 1304], "print": [0, 22, 53, 64, 505, 509, 820, 822, 829, 849, 857, 859, 861, 864, 870, 873, 875, 956, 977, 979, 986, 994, 997, 1002, 1059, 1068, 1070, 1076, 1259, 1264, 1303, 1304, 1305, 1306, 1307, 1309, 1311, 1312, 1313, 1314, 1315], "arg": [0, 22, 27, 53, 62, 64, 439, 440, 502, 504, 839, 1078, 1079, 1118, 1119, 1259, 1264, 1265, 1266, 1267, 1268, 1273, 1276, 1288, 1294], "vlim": [0, 22, 53, 64], "1": [0, 16, 22, 53, 64, 147, 148, 182, 184, 192, 203, 252, 271, 275, 317, 322, 363, 364, 365, 372, 438, 440, 441, 442, 443, 445, 492, 566, 567, 574, 635, 636, 638, 643, 649, 654, 655, 730, 736, 780, 815, 818, 820, 822, 829, 831, 832, 853, 856, 863, 877, 907, 964, 965, 1004, 1021, 1026, 1046, 1047, 1060, 1063, 1078, 1083, 1107, 1108, 1134, 1135, 1136, 1148, 1149, 1172, 1173, 1179, 1183, 1189, 1193, 1199, 1203, 1210, 1217, 1218, 1220, 1226, 1227, 1228, 1231, 1242, 1249, 1251, 1260, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1285, 1294, 1297, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "kwarg": [0, 22, 27, 28, 53, 62, 64, 124, 130, 166, 169, 192, 222, 317, 340, 439, 440, 502, 504, 510, 518, 527, 528, 536, 537, 539, 547, 578, 579, 583, 660, 663, 666, 669, 672, 675, 815, 818, 820, 822, 827, 829, 836, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 864, 870, 872, 873, 875, 877, 886, 891, 892, 956, 957, 977, 978, 979, 980, 986, 987, 988, 997, 998, 999, 1004, 1006, 1009, 1046, 1047, 1059, 1060, 1068, 1069, 1070, 1071, 1076, 1077, 1078, 1079, 1083, 1093, 1097, 1098, 1102, 1103, 1108, 1113, 1114, 1118, 1119, 1124, 1129, 1130, 1134, 1172, 1217, 1220, 1226, 1227, 1231, 1242, 1248, 1251, 1257, 1258, 1259, 1264, 1265, 1266, 1267, 1268, 1273, 1276, 1294], "function": [0, 2, 7, 13, 22, 24, 31, 36, 53, 64, 75, 76, 77, 81, 90, 99, 101, 102, 105, 126, 127, 133, 135, 136, 139, 148, 163, 172, 446, 452, 454, 455, 460, 467, 474, 479, 481, 482, 487, 498, 512, 513, 521, 522, 530, 531, 538, 541, 542, 549, 550, 555, 559, 563, 567, 578, 579, 580, 584, 589, 595, 601, 607, 613, 617, 622, 625, 628, 630, 633, 640, 644, 650, 656, 681, 688, 694, 700, 706, 851, 852, 853, 854, 855, 856, 857, 860, 897, 900, 902, 904, 907, 956, 968, 975, 976, 977, 979, 984, 985, 986, 992, 996, 997, 998, 1004, 1013, 1018, 1019, 1021, 1022, 1023, 1034, 1035, 1042, 1043, 1046, 1050, 1051, 1054, 1059, 1060, 1066, 1067, 1068, 1069, 1070, 1071, 1075, 1076, 1077, 1078, 1092, 1096, 1097, 1101, 1102, 1106, 1107, 1112, 1113, 1117, 1118, 1123, 1128, 1129, 1133, 1134, 1135, 1141, 1142, 1147, 1148, 1153, 1154, 1159, 1160, 1165, 1166, 1169, 1172, 1173, 1183, 1193, 1203, 1217, 1218, 1226, 1228, 1238, 1239, 1242, 1249, 1259, 1265, 1266, 1267, 1268, 1273, 1277, 1283, 1286, 1287, 1288, 1289, 1290, 1293, 1294, 1295, 1300, 1303, 1305, 1306, 1314], "base": [0, 1, 2, 5, 7, 11, 13, 22, 23, 24, 28, 30, 31, 34, 36, 38, 53, 64, 75, 76, 78, 79, 81, 88, 90, 91, 97, 99, 102, 105, 110, 111, 121, 124, 132, 133, 136, 139, 144, 153, 162, 163, 164, 166, 170, 172, 175, 179, 192, 254, 317, 438, 442, 443, 444, 446, 452, 455, 463, 465, 467, 472, 474, 479, 482, 490, 494, 495, 498, 510, 518, 527, 536, 539, 547, 553, 555, 558, 559, 561, 563, 565, 571, 578, 580, 582, 584, 587, 589, 593, 595, 599, 601, 604, 607, 611, 613, 615, 617, 620, 622, 624, 625, 627, 628, 630, 633, 635, 637, 639, 640, 642, 644, 648, 650, 654, 656, 660, 663, 666, 669, 672, 675, 679, 681, 686, 688, 691, 694, 698, 700, 704, 706, 711, 714, 722, 725, 730, 736, 737, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 857, 878, 895, 901, 905, 906, 909, 948, 986, 997, 1004, 1013, 1046, 1052, 1054, 1059, 1093, 1098, 1103, 1108, 1118, 1124, 1130, 1169, 1268, 1283, 1284, 1286, 1289, 1290, 1293, 1294, 1295, 1297, 1300, 1307, 1308, 1310, 1312, 1313, 1314, 1315], "verbos": [0, 1, 3, 5, 9, 11, 14, 16, 22, 23, 25, 30, 32, 34, 38, 40, 42, 45, 47, 49, 51, 53, 54, 58, 64, 65, 75, 78, 82, 84, 88, 92, 93, 97, 102, 106, 107, 110, 111, 115, 118, 124, 128, 132, 136, 140, 141, 144, 153, 162, 164, 166, 170, 175, 179, 182, 184, 438, 440, 441, 442, 443, 444, 445, 448, 452, 456, 458, 460, 463, 465, 468, 472, 475, 479, 483, 485, 487, 490, 494, 495, 499, 500, 505, 508, 510, 514, 515, 518, 523, 524, 527, 532, 533, 536, 539, 543, 544, 547, 553, 556, 558, 561, 565, 571, 575, 578, 582, 585, 587, 590, 593, 596, 597, 599, 602, 604, 608, 611, 615, 618, 620, 624, 627, 630, 635, 637, 639, 642, 645, 646, 648, 651, 652, 654, 657, 658, 660, 663, 666, 669, 672, 675, 679, 682, 685, 686, 691, 697, 698, 703, 704, 707, 710, 711, 714, 718, 720, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 788, 790, 795, 799, 801, 805, 809, 811, 815, 818, 829, 831, 832, 851, 852, 853, 854, 855, 856, 863, 956, 963, 964, 965, 966, 977, 979, 983, 986, 997, 1004, 1007, 1008, 1013, 1014, 1015, 1021, 1022, 1023, 1026, 1046, 1047, 1052, 1055, 1059, 1063, 1064, 1068, 1070, 1076, 1078, 1083, 1092, 1097, 1102, 1107, 1111, 1113, 1118, 1120, 1121, 1123, 1127, 1129, 1135, 1139, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1179, 1183, 1189, 1193, 1199, 1203, 1210, 1217, 1218, 1220, 1226, 1228, 1231, 1242, 1249, 1251, 1259, 1260, 1264, 1275, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "chunk": [0, 2, 3, 7, 9, 13, 14, 16, 17, 18, 22, 24, 25, 31, 32, 36, 53, 54, 55, 67, 74, 75, 76, 81, 84, 90, 93, 99, 105, 107, 118, 128, 133, 139, 141, 163, 172, 446, 448, 455, 458, 467, 468, 474, 475, 482, 485, 498, 500, 515, 524, 533, 544, 555, 556, 559, 563, 575, 580, 584, 585, 589, 590, 595, 597, 601, 602, 607, 608, 613, 617, 618, 622, 625, 628, 633, 640, 644, 646, 650, 652, 656, 658, 681, 685, 688, 694, 697, 700, 703, 706, 710, 720, 799, 809, 1054, 1055, 1300, 1304, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "d": [0, 22, 53, 55, 158, 159, 164, 165, 189, 190, 192, 271, 317, 407, 639, 730, 731, 820, 821, 956, 957, 979, 980, 1092, 1093, 1134, 1172, 1173, 1174, 1177, 1183, 1184, 1187, 1193, 1194, 1197, 1203, 1204, 1207, 1277, 1278, 1294, 1296, 1305], "update_idata": [0, 22, 53, 65], "idata": [0, 3, 9, 14, 19, 22, 25, 32, 53, 57, 59, 60, 65, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055], "add": [0, 1, 5, 11, 22, 23, 30, 34, 42, 44, 53, 65, 67, 69, 75, 78, 80, 88, 94, 97, 102, 104, 108, 110, 111, 114, 120, 124, 129, 132, 136, 138, 142, 144, 152, 153, 158, 160, 162, 164, 166, 170, 175, 178, 179, 181, 182, 184, 187, 438, 439, 440, 441, 442, 443, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 516, 518, 525, 527, 534, 536, 539, 545, 547, 553, 558, 561, 565, 570, 571, 577, 578, 582, 587, 593, 599, 604, 606, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 721, 722, 725, 730, 735, 736, 741, 742, 746, 747, 752, 753, 774, 778, 779, 783, 784, 789, 790, 793, 795, 798, 801, 804, 805, 808, 811, 814, 815, 817, 822, 829, 831, 832, 851, 852, 853, 854, 855, 856, 878, 880, 881, 882, 883, 909, 910, 916, 918, 920, 926, 928, 933, 935, 940, 942, 948, 950, 956, 977, 979, 986, 988, 997, 999, 1004, 1007, 1008, 1009, 1046, 1052, 1059, 1068, 1070, 1076, 1078, 1080, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1288, 1305, 1306, 1309, 1310, 1311, 1312, 1313], "memori": [0, 3, 9, 14, 16, 17, 18, 19, 22, 25, 32, 53, 54, 57, 60, 65, 84, 93, 107, 118, 128, 141, 192, 242, 317, 444, 445, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055, 1134, 1172, 1300, 1313], "option": [0, 6, 7, 12, 16, 18, 22, 27, 28, 38, 39, 43, 48, 53, 54, 58, 59, 62, 63, 64, 65, 74, 76, 77, 79, 90, 101, 105, 116, 117, 124, 125, 127, 135, 139, 146, 148, 158, 159, 160, 161, 165, 171, 182, 188, 284, 438, 439, 440, 441, 442, 443, 445, 452, 454, 460, 463, 466, 473, 479, 481, 487, 490, 492, 498, 504, 507, 509, 511, 513, 519, 522, 528, 531, 537, 540, 542, 548, 550, 567, 572, 579, 583, 600, 616, 631, 636, 638, 642, 643, 648, 649, 654, 655, 698, 699, 705, 731, 742, 743, 747, 748, 785, 790, 791, 795, 796, 802, 805, 806, 816, 818, 821, 822, 831, 836, 843, 844, 849, 850, 851, 852, 853, 854, 855, 856, 862, 863, 866, 868, 869, 872, 873, 875, 877, 878, 879, 891, 892, 910, 914, 920, 924, 928, 931, 935, 938, 942, 946, 950, 954, 957, 960, 961, 978, 980, 981, 982, 987, 989, 990, 998, 1006, 1007, 1008, 1013, 1023, 1026, 1047, 1060, 1061, 1062, 1068, 1069, 1071, 1072, 1073, 1076, 1077, 1079, 1080, 1083, 1093, 1094, 1095, 1098, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1110, 1115, 1116, 1124, 1125, 1126, 1130, 1131, 1132, 1134, 1136, 1137, 1138, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163, 1172, 1174, 1177, 1184, 1187, 1194, 1197, 1204, 1207, 1220, 1227, 1231, 1248, 1251, 1257, 1258, 1259, 1260, 1276, 1289, 1293, 1300, 1305, 1307, 1308, 1310, 1313, 1314], "updat": [0, 22, 53, 65, 124, 127, 181, 510, 513, 518, 522, 527, 531, 536, 539, 542, 547, 550, 587, 793, 798, 804, 808, 814, 1004, 1042, 1043, 1046, 1050, 1051, 1078, 1217, 1226, 1238, 1239, 1242, 1300, 1305, 1315], "return": [0, 1, 5, 11, 22, 23, 30, 34, 53, 65, 75, 78, 88, 97, 102, 110, 111, 113, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 192, 195, 196, 197, 201, 204, 205, 207, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 252, 275, 317, 319, 320, 323, 324, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 444, 452, 463, 465, 472, 479, 490, 494, 495, 497, 510, 518, 520, 527, 529, 536, 539, 547, 553, 558, 561, 565, 571, 573, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 632, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 693, 698, 704, 711, 714, 722, 725, 730, 732, 736, 738, 742, 744, 747, 749, 753, 774, 776, 779, 781, 784, 786, 790, 795, 801, 805, 811, 820, 839, 844, 851, 852, 853, 854, 855, 856, 864, 873, 909, 916, 918, 926, 933, 940, 948, 956, 977, 979, 986, 997, 1052, 1059, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1120, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1311], "cleanup": [0, 22, 53, 56], "after": [0, 17, 18, 22, 28, 53, 56, 79, 148, 179, 180, 438, 567, 587, 790, 792, 795, 797, 801, 803, 805, 807, 811, 813, 851, 852, 854, 855, 856, 1305, 1309], "properti": [0, 1, 5, 11, 22, 23, 29, 30, 34, 53, 60, 67, 71, 72, 73, 75, 78, 88, 97, 102, 110, 111, 119, 121, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 182, 185, 186, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 773, 774, 779, 784, 790, 795, 801, 805, 811, 815, 819, 956, 962, 967, 969, 970, 973, 974, 977, 979, 986, 991, 993, 995, 997, 1000, 1001, 1003, 1004, 1010, 1016, 1017, 1020, 1027, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1040, 1046, 1052, 1059, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1259, 1266, 1268, 1272], "idata_mem": [0, 22, 53, 60], "current": [0, 22, 29, 40, 45, 49, 53, 60, 284, 1004, 1017, 1046, 1078, 1217, 1226, 1242, 1289, 1308, 1310], "update_n_turbin": [0, 22, 53, 66], "reset": [0, 22, 53, 66, 452, 460, 463, 479, 487, 490, 604, 610, 1307, 1309], "accord": [0, 22, 53, 66, 124, 127, 440, 510, 513, 518, 522, 527, 531, 536, 539, 542, 547, 550, 669, 886, 891, 892, 1306, 1310], "self": [0, 1, 3, 5, 9, 11, 14, 22, 23, 25, 30, 32, 34, 53, 66, 75, 78, 84, 88, 93, 97, 102, 107, 110, 111, 113, 117, 118, 124, 128, 132, 136, 141, 144, 153, 162, 164, 166, 170, 175, 179, 192, 194, 195, 196, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 444, 448, 452, 458, 463, 465, 468, 472, 475, 479, 485, 490, 494, 495, 497, 500, 510, 515, 518, 520, 524, 527, 529, 533, 536, 539, 544, 547, 553, 556, 558, 561, 565, 571, 572, 573, 575, 578, 582, 585, 587, 590, 593, 597, 599, 602, 604, 608, 611, 615, 618, 620, 624, 627, 630, 632, 635, 637, 639, 642, 646, 648, 652, 654, 658, 660, 663, 666, 669, 672, 675, 679, 685, 686, 691, 693, 697, 698, 703, 704, 710, 711, 714, 720, 722, 725, 730, 732, 736, 738, 742, 744, 747, 749, 753, 774, 776, 779, 781, 784, 786, 790, 795, 799, 801, 805, 809, 811, 827, 1029, 1033, 1052, 1055, 1085, 1087, 1113, 1114, 1118, 1119, 1169, 1170, 1177, 1187, 1197, 1207, 1212, 1214, 1233, 1235, 1266, 1268, 1269], "get_models_data": [0, 22, 53, 59], "creat": [0, 1, 5, 11, 22, 23, 30, 34, 53, 59, 63, 67, 70, 75, 78, 88, 97, 102, 110, 111, 123, 124, 126, 127, 131, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 192, 222, 317, 340, 444, 452, 463, 465, 472, 479, 490, 492, 494, 495, 510, 512, 513, 517, 518, 521, 522, 526, 527, 530, 531, 535, 536, 538, 539, 541, 542, 546, 547, 549, 550, 552, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 815, 818, 820, 822, 864, 868, 870, 873, 875, 1052, 1080, 1288, 1293, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "xarrai": [0, 1, 5, 11, 17, 18, 22, 23, 28, 30, 34, 40, 45, 49, 53, 59, 63, 67, 68, 75, 77, 78, 88, 97, 101, 102, 110, 132, 135, 136, 144, 153, 162, 164, 444, 445, 452, 463, 465, 472, 479, 490, 494, 495, 553, 558, 561, 565, 571, 578, 582, 583, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 820, 821, 829, 830, 849, 850, 862, 865, 870, 871, 874, 1052, 1286, 1300, 1305, 1311], "from": [0, 1, 3, 5, 6, 8, 9, 11, 14, 22, 23, 25, 30, 32, 34, 53, 59, 67, 70, 75, 78, 79, 84, 88, 93, 97, 102, 107, 110, 111, 114, 116, 117, 118, 124, 125, 126, 128, 132, 136, 141, 144, 146, 149, 153, 162, 164, 166, 170, 171, 175, 179, 187, 188, 189, 190, 192, 197, 201, 203, 284, 317, 322, 395, 396, 420, 421, 436, 437, 440, 441, 444, 445, 448, 452, 454, 458, 463, 465, 468, 472, 475, 479, 481, 485, 490, 492, 494, 495, 500, 510, 511, 512, 515, 518, 519, 521, 524, 527, 528, 530, 533, 536, 537, 538, 539, 540, 541, 544, 547, 548, 549, 553, 554, 556, 558, 561, 565, 568, 571, 575, 578, 582, 583, 585, 587, 590, 593, 597, 599, 600, 602, 604, 608, 611, 615, 618, 620, 624, 627, 630, 635, 637, 639, 642, 646, 648, 652, 654, 658, 660, 663, 666, 669, 672, 675, 679, 680, 685, 686, 691, 697, 698, 699, 703, 704, 705, 710, 711, 714, 720, 722, 725, 730, 731, 736, 742, 747, 753, 774, 779, 780, 784, 790, 795, 799, 801, 805, 809, 811, 815, 820, 821, 854, 855, 856, 860, 866, 868, 869, 873, 877, 878, 879, 880, 881, 906, 1004, 1007, 1008, 1026, 1039, 1046, 1052, 1055, 1078, 1134, 1172, 1217, 1226, 1242, 1258, 1279, 1280, 1281, 1282, 1287, 1288, 1289, 1293, 1294, 1296, 1297, 1300, 1302, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1315], "input": [0, 22, 53, 59, 76, 77, 101, 135, 166, 167, 168, 317, 363, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 578, 579, 582, 583, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 794, 800, 810, 1134, 1172, 1275, 1283, 1289, 1296, 1300, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "new_point_data": [0, 22, 53, 63], "states_indic": [0, 22, 53, 63], "contain": [0, 22, 53, 63, 67, 68, 70, 505, 878, 880, 881, 1023, 1258, 1286, 1287, 1288, 1289, 1290, 1294, 1304, 1305, 1306, 1308, 1309, 1311, 1313], "onli": [0, 22, 53, 63, 65, 438, 518, 679, 722, 723, 725, 728, 730, 734, 736, 740, 742, 745, 747, 751, 779, 782, 784, 787, 866, 868, 869, 907, 1013, 1134, 1172, 1300, 1302, 1303, 1306, 1311, 1312, 1313, 1315], "finalize_model": [0, 22, 53, 58], "call": [0, 22, 53, 58, 75, 77, 88, 101, 102, 135, 136, 587, 1004, 1013, 1042, 1043, 1046, 1050, 1051, 1078, 1134, 1172, 1173, 1183, 1193, 1203, 1217, 1226, 1238, 1239, 1242, 1286, 1289, 1300, 1302, 1308, 1309, 1311, 1312, 1315], "routin": [0, 22, 53, 58], "kept": [0, 18, 22, 53, 58], "classmethod": [0, 1, 5, 11, 22, 23, 30, 34, 53, 62, 67, 70, 75, 78, 88, 97, 102, 110, 111, 122, 124, 130, 132, 136, 144, 153, 162, 164, 166, 169, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 592, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 820, 829, 849, 857, 858, 859, 860, 861, 864, 867, 870, 873, 875, 886, 891, 892, 956, 977, 979, 986, 994, 997, 1002, 1004, 1039, 1041, 1046, 1052, 1059, 1068, 1070, 1076, 1078, 1217, 1226, 1242, 1259, 1263], "new": [0, 22, 53, 62, 124, 130, 131, 166, 169, 181, 192, 203, 222, 275, 284, 317, 322, 340, 365, 510, 517, 518, 526, 527, 535, 536, 539, 546, 547, 552, 660, 663, 666, 669, 672, 675, 793, 798, 804, 808, 814, 820, 829, 849, 857, 858, 861, 864, 870, 873, 875, 971, 972, 1004, 1011, 1012, 1046, 1078, 1173, 1175, 1176, 1183, 1185, 1186, 1193, 1195, 1196, 1203, 1205, 1206, 1217, 1226, 1242, 1300, 1302, 1305, 1306], "algo_typ": [0, 22, 53, 62], "run": [0, 1, 5, 11, 16, 22, 23, 30, 34, 53, 54, 62, 75, 78, 88, 90, 97, 98, 102, 110, 111, 114, 124, 130, 132, 136, 144, 153, 162, 164, 166, 167, 169, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 605, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 661, 663, 664, 666, 667, 669, 670, 672, 673, 675, 677, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 794, 795, 800, 801, 805, 810, 811, 820, 829, 849, 857, 858, 861, 864, 870, 873, 875, 1004, 1006, 1042, 1043, 1050, 1051, 1052, 1227, 1238, 1239, 1259, 1260, 1265, 1266, 1267, 1268, 1273, 1286, 1289, 1290, 1300, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1314], "time": [0, 22, 53, 62, 124, 130, 166, 169, 445, 510, 518, 527, 536, 539, 547, 660, 663, 666, 669, 672, 675, 820, 829, 843, 849, 857, 858, 861, 864, 870, 873, 875, 1052, 1134, 1172, 1290, 1300, 1302, 1303, 1304, 1307, 1308, 1309, 1312, 1313, 1314], "factori": [0, 22, 53, 62, 124, 130, 166, 169, 510, 518, 527, 536, 539, 547, 660, 663, 666, 669, 672, 675, 820, 829, 849, 857, 858, 861, 864, 870, 873, 875], "__repr__": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 113, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 192, 230, 317, 347, 444, 452, 463, 465, 472, 479, 490, 494, 495, 497, 510, 518, 520, 527, 529, 536, 539, 547, 553, 558, 561, 565, 571, 573, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 632, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 693, 698, 704, 711, 714, 722, 725, 730, 732, 736, 738, 742, 744, 747, 749, 753, 774, 776, 779, 781, 784, 786, 790, 795, 801, 805, 811, 1052], "repr": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 113, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 192, 230, 317, 347, 444, 452, 463, 465, 472, 479, 490, 494, 495, 497, 510, 518, 520, 527, 529, 536, 539, 547, 553, 558, 561, 565, 571, 573, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 632, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 693, 698, 704, 711, 714, 722, 725, 730, 732, 736, 738, 742, 744, 747, 749, 753, 774, 776, 779, 781, 784, 786, 790, 795, 801, 805, 811, 1052], "data_to_stor": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 114, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052], "name": [0, 1, 4, 5, 8, 10, 11, 15, 17, 18, 22, 23, 26, 30, 33, 34, 37, 38, 39, 42, 43, 47, 48, 53, 60, 62, 67, 68, 69, 70, 75, 78, 85, 88, 89, 95, 96, 97, 100, 102, 109, 110, 111, 114, 116, 123, 124, 130, 131, 132, 134, 136, 143, 144, 146, 151, 153, 155, 158, 159, 162, 164, 165, 166, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 189, 190, 383, 438, 441, 442, 443, 444, 445, 449, 452, 454, 459, 463, 465, 469, 472, 473, 476, 479, 481, 486, 490, 492, 494, 495, 501, 502, 504, 505, 509, 510, 511, 517, 518, 526, 527, 535, 536, 539, 546, 547, 552, 553, 554, 557, 558, 560, 561, 564, 565, 571, 572, 578, 581, 582, 583, 586, 587, 591, 593, 594, 598, 599, 600, 603, 604, 606, 609, 611, 614, 615, 619, 620, 621, 623, 624, 626, 627, 629, 630, 631, 634, 635, 636, 637, 638, 639, 641, 642, 643, 647, 648, 649, 653, 654, 655, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 678, 679, 686, 691, 698, 704, 705, 711, 712, 713, 714, 715, 716, 717, 719, 722, 724, 725, 726, 727, 729, 730, 731, 733, 735, 736, 737, 739, 741, 742, 743, 746, 747, 748, 750, 752, 753, 774, 775, 777, 778, 779, 780, 783, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 804, 805, 806, 807, 808, 810, 811, 813, 814, 820, 822, 829, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 873, 875, 877, 878, 881, 884, 956, 957, 962, 971, 972, 973, 974, 977, 978, 979, 980, 986, 987, 994, 997, 998, 1002, 1004, 1006, 1026, 1039, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1056, 1059, 1060, 1068, 1069, 1070, 1071, 1076, 1077, 1078, 1080, 1088, 1089, 1090, 1091, 1092, 1093, 1097, 1098, 1102, 1103, 1107, 1108, 1113, 1114, 1118, 1123, 1124, 1129, 1130, 1135, 1136, 1142, 1143, 1148, 1149, 1154, 1155, 1160, 1161, 1166, 1167, 1169, 1170, 1173, 1182, 1183, 1192, 1193, 1202, 1203, 1215, 1216, 1217, 1223, 1224, 1225, 1226, 1227, 1236, 1237, 1240, 1241, 1242, 1248, 1254, 1255, 1256, 1258, 1285, 1287, 1294, 1300, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1313], "algo": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 36, 37, 38, 40, 42, 45, 47, 49, 51, 53, 67, 74, 75, 76, 77, 78, 81, 82, 84, 85, 87, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 120, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 146, 148, 149, 151, 153, 155, 157, 162, 163, 164, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 444, 446, 448, 449, 451, 452, 455, 456, 458, 459, 460, 462, 463, 465, 467, 468, 469, 471, 472, 474, 475, 476, 478, 479, 482, 483, 485, 486, 487, 489, 490, 493, 494, 495, 498, 499, 500, 501, 505, 508, 510, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 571, 575, 578, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 607, 608, 609, 611, 613, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 637, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 663, 666, 669, 672, 675, 679, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 733, 734, 735, 736, 739, 740, 741, 742, 745, 746, 747, 750, 751, 752, 753, 769, 774, 777, 778, 779, 782, 783, 784, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 807, 808, 809, 810, 811, 813, 814, 829, 831, 843, 849, 850, 1004, 1006, 1026, 1042, 1043, 1046, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1078, 1217, 1226, 1227, 1238, 1239, 1242, 1248, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "mdata": [0, 1, 2, 3, 5, 7, 8, 9, 11, 13, 14, 22, 23, 24, 25, 30, 31, 32, 34, 36, 53, 75, 78, 81, 84, 88, 90, 93, 97, 99, 102, 105, 107, 110, 111, 114, 116, 117, 118, 122, 124, 126, 127, 128, 131, 132, 133, 136, 139, 141, 144, 146, 148, 149, 153, 162, 163, 164, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 444, 446, 448, 452, 455, 458, 463, 465, 467, 468, 472, 474, 475, 479, 482, 485, 490, 494, 495, 498, 500, 510, 512, 513, 515, 517, 518, 521, 522, 524, 526, 527, 530, 531, 533, 535, 536, 538, 539, 541, 542, 544, 546, 547, 549, 550, 551, 552, 553, 555, 556, 558, 559, 561, 563, 565, 567, 568, 571, 575, 578, 580, 582, 584, 585, 587, 589, 590, 593, 595, 597, 599, 601, 602, 604, 607, 608, 611, 613, 615, 617, 618, 620, 622, 624, 625, 627, 628, 630, 633, 635, 637, 639, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 663, 666, 669, 672, 675, 679, 681, 683, 684, 685, 686, 688, 689, 690, 691, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 733, 734, 735, 736, 739, 740, 741, 742, 745, 746, 747, 750, 751, 752, 753, 769, 770, 771, 772, 774, 777, 778, 779, 782, 783, 784, 787, 789, 790, 792, 793, 795, 797, 798, 799, 801, 803, 804, 805, 807, 808, 809, 811, 813, 814, 1052, 1054, 1055], "local": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 114, 116, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 731, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052, 1289, 1301, 1302, 1303, 1305, 1308, 1313], "store": [0, 1, 3, 5, 9, 11, 14, 18, 22, 23, 25, 30, 32, 34, 53, 68, 70, 75, 78, 84, 88, 89, 93, 97, 102, 107, 110, 111, 114, 116, 118, 124, 128, 132, 136, 141, 144, 146, 153, 162, 164, 166, 170, 175, 179, 444, 448, 452, 458, 463, 465, 468, 472, 475, 479, 485, 490, 494, 495, 500, 510, 515, 518, 524, 527, 533, 536, 539, 544, 547, 553, 556, 558, 561, 565, 571, 575, 578, 582, 585, 587, 590, 593, 597, 599, 602, 604, 608, 611, 615, 618, 620, 624, 627, 630, 635, 637, 639, 642, 646, 648, 652, 654, 658, 660, 663, 666, 669, 672, 675, 679, 685, 686, 691, 697, 698, 703, 704, 710, 711, 714, 720, 722, 725, 730, 736, 742, 747, 753, 769, 774, 779, 784, 790, 795, 799, 801, 805, 809, 811, 1052, 1055, 1134, 1172, 1306], "intend": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 114, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 829, 844, 1052], "iter": [0, 1, 5, 11, 23, 24, 25, 26, 27, 28, 29, 30, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 75, 78, 88, 97, 102, 110, 111, 114, 117, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052, 1300, 1312], "from_data_or_stor": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 116, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052], "ret_dim": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 116, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052], "safe": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 116, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052], "get": [0, 1, 5, 11, 22, 23, 30, 34, 38, 41, 42, 46, 47, 50, 51, 53, 67, 74, 75, 78, 88, 97, 102, 110, 111, 116, 124, 132, 136, 144, 153, 162, 164, 166, 170, 173, 175, 179, 187, 192, 266, 317, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 551, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 683, 686, 689, 691, 695, 698, 701, 704, 708, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 864, 866, 873, 878, 884, 885, 909, 911, 916, 918, 921, 926, 933, 940, 943, 948, 951, 956, 958, 975, 976, 977, 979, 985, 986, 996, 997, 1004, 1016, 1027, 1031, 1041, 1046, 1052, 1059, 1067, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1300, 1303], "keep": [0, 1, 5, 11, 16, 22, 23, 30, 34, 53, 54, 75, 78, 88, 94, 97, 102, 108, 110, 111, 120, 124, 129, 132, 136, 142, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 516, 518, 525, 527, 534, 536, 539, 545, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 721, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 979, 1052, 1290, 1302], "sub": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 94, 97, 102, 108, 110, 111, 120, 124, 129, 132, 136, 142, 144, 153, 162, 164, 166, 170, 175, 179, 284, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 516, 518, 525, 527, 534, 536, 539, 545, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 721, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1047, 1052, 1080, 1290, 1300, 1305], "keep_model": [0, 1, 5, 11, 16, 19, 22, 23, 30, 34, 53, 54, 57, 58, 75, 78, 88, 94, 97, 102, 108, 110, 111, 120, 124, 129, 132, 136, 142, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 516, 518, 525, 527, 534, 536, 539, 545, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 721, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1026, 1052], "model_id": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 121, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052], "uniqu": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 121, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052], "id": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 121, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 438, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052], "type": [0, 1, 3, 5, 9, 11, 14, 22, 23, 25, 30, 32, 34, 47, 48, 53, 75, 78, 84, 88, 93, 97, 102, 107, 110, 111, 118, 121, 124, 128, 132, 136, 141, 144, 153, 158, 159, 162, 164, 166, 170, 175, 179, 192, 203, 222, 284, 317, 322, 340, 444, 448, 452, 458, 463, 465, 468, 472, 475, 479, 485, 490, 494, 495, 500, 505, 507, 509, 510, 515, 518, 524, 527, 533, 536, 539, 544, 547, 553, 556, 558, 561, 565, 571, 575, 578, 582, 585, 587, 590, 593, 597, 599, 602, 604, 608, 611, 615, 618, 620, 624, 627, 630, 635, 637, 639, 642, 646, 648, 652, 654, 658, 660, 663, 666, 669, 672, 675, 679, 685, 686, 691, 697, 698, 703, 704, 710, 711, 714, 720, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 799, 801, 805, 809, 811, 875, 877, 1052, 1055, 1080, 1113, 1114, 1118, 1119, 1134, 1169, 1170, 1172, 1266, 1268, 1269, 1285, 1286, 1289, 1293, 1300, 1303, 1304, 1305, 1306, 1308, 1309, 1311, 1313, 1315], "v": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 123, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052, 1134, 1172, 1279, 1280], "specif": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 123, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 284, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052, 1294, 1313], "variabl": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 22, 23, 24, 26, 28, 30, 31, 33, 34, 36, 37, 47, 48, 53, 75, 76, 77, 78, 81, 85, 88, 90, 95, 97, 99, 100, 101, 102, 105, 109, 110, 111, 117, 123, 124, 131, 132, 133, 134, 135, 136, 139, 143, 144, 145, 146, 148, 151, 153, 155, 162, 163, 164, 166, 168, 170, 171, 175, 176, 177, 178, 179, 180, 181, 387, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 444, 445, 446, 449, 452, 454, 455, 459, 463, 465, 467, 469, 472, 473, 474, 476, 479, 481, 482, 486, 490, 492, 494, 495, 498, 501, 510, 517, 518, 526, 527, 535, 536, 539, 546, 547, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 571, 572, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 591, 593, 594, 595, 598, 599, 600, 601, 603, 604, 606, 607, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 653, 654, 655, 656, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 676, 678, 679, 686, 687, 691, 698, 704, 705, 711, 712, 713, 714, 715, 716, 717, 719, 722, 724, 725, 726, 727, 729, 730, 731, 733, 735, 736, 737, 739, 741, 742, 743, 746, 747, 748, 750, 752, 753, 774, 775, 777, 778, 779, 780, 783, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 814, 822, 829, 834, 835, 838, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 860, 861, 863, 864, 866, 867, 868, 869, 870, 872, 873, 875, 877, 956, 959, 960, 961, 964, 965, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982, 985, 986, 989, 990, 996, 997, 1004, 1007, 1008, 1011, 1012, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1032, 1033, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1056, 1059, 1060, 1061, 1062, 1063, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1123, 1125, 1126, 1129, 1131, 1132, 1134, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1172, 1173, 1175, 1176, 1178, 1180, 1181, 1182, 1183, 1185, 1186, 1188, 1190, 1191, 1192, 1193, 1195, 1196, 1198, 1200, 1201, 1202, 1203, 1205, 1206, 1208, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1283, 1284, 1285, 1288, 1289, 1290, 1291, 1300, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "flag": [0, 1, 5, 11, 17, 18, 22, 23, 28, 30, 34, 40, 45, 49, 53, 75, 78, 88, 90, 97, 98, 102, 110, 111, 119, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 192, 270, 317, 441, 444, 445, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 572, 578, 582, 587, 593, 599, 604, 605, 611, 612, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 731, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 820, 821, 822, 831, 837, 843, 844, 851, 852, 853, 854, 855, 856, 884, 914, 924, 931, 938, 946, 954, 956, 967, 977, 979, 986, 997, 1004, 1010, 1013, 1018, 1023, 1030, 1046, 1052, 1059, 1065, 1068, 1070, 1074, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1140, 1142, 1146, 1148, 1152, 1154, 1158, 1160, 1164, 1166, 1168, 1169, 1171, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1259, 1260, 1266, 1268, 1272, 1302, 1305], "get_data": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 117, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 771, 774, 779, 784, 790, 795, 801, 805, 811, 864, 866, 873, 1052], "target": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 117, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 774, 779, 784, 790, 795, 801, 805, 811, 1052, 1310], "lookup": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 117, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 583, 587, 588, 593, 599, 604, 611, 615, 620, 621, 624, 627, 630, 635, 637, 639, 642, 643, 648, 649, 654, 655, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 774, 779, 784, 790, 795, 801, 805, 811, 843, 1052, 1289, 1300], "smfp": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 117, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 774, 779, 784, 790, 795, 801, 805, 811, 1052], "getter": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 117, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 774, 779, 784, 790, 795, 801, 805, 811, 1052], "entri": [0, 1, 3, 5, 9, 11, 14, 19, 22, 23, 25, 30, 32, 34, 53, 57, 59, 67, 69, 75, 78, 84, 88, 93, 97, 102, 107, 110, 111, 117, 118, 124, 128, 132, 136, 141, 144, 153, 158, 162, 164, 166, 170, 175, 179, 444, 448, 452, 458, 463, 465, 468, 472, 475, 479, 485, 490, 494, 495, 500, 510, 515, 518, 524, 527, 533, 536, 539, 544, 547, 553, 556, 558, 561, 565, 571, 575, 578, 582, 585, 587, 590, 593, 597, 599, 602, 604, 608, 611, 615, 618, 620, 624, 627, 630, 635, 637, 639, 642, 646, 648, 652, 654, 658, 660, 663, 666, 669, 672, 675, 679, 685, 686, 691, 697, 698, 703, 704, 710, 711, 714, 720, 722, 725, 730, 736, 742, 747, 753, 771, 774, 779, 784, 790, 795, 799, 801, 805, 809, 811, 860, 892, 1052, 1055, 1134, 1172, 1288, 1300, 1303, 1310], "reduce_st": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 122, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 829, 846, 1052, 1313], "sel_stat": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 122, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052], "obj": [0, 1, 5, 11, 22, 23, 30, 34, 53, 75, 78, 88, 97, 102, 110, 111, 122, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 192, 201, 317, 444, 452, 463, 465, 472, 479, 490, 494, 495, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1018, 1019, 1021, 1022, 1052, 1218, 1228, 1249], "modifi": [0, 1, 4, 5, 8, 10, 11, 15, 22, 23, 26, 30, 33, 34, 37, 53, 75, 78, 85, 88, 95, 97, 100, 102, 109, 110, 111, 122, 124, 126, 127, 132, 134, 136, 143, 144, 148, 151, 153, 155, 162, 164, 166, 170, 175, 176, 177, 179, 444, 449, 452, 459, 463, 465, 469, 472, 476, 479, 486, 490, 494, 495, 501, 510, 512, 513, 518, 521, 522, 527, 530, 531, 536, 538, 539, 541, 542, 547, 549, 550, 553, 557, 558, 560, 561, 564, 565, 567, 571, 578, 581, 582, 586, 587, 591, 593, 598, 599, 603, 604, 609, 611, 614, 615, 619, 620, 623, 624, 626, 627, 629, 630, 634, 635, 637, 639, 641, 642, 647, 648, 653, 654, 659, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 717, 719, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052, 1056, 1286], "select": [0, 1, 5, 11, 22, 23, 30, 34, 47, 53, 62, 75, 78, 88, 90, 97, 102, 110, 111, 122, 124, 125, 130, 132, 136, 144, 153, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 175, 179, 181, 377, 382, 444, 445, 452, 454, 460, 463, 465, 472, 479, 481, 487, 490, 494, 495, 509, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 579, 580, 582, 584, 587, 589, 593, 595, 599, 601, 604, 607, 611, 613, 615, 617, 620, 622, 624, 625, 627, 628, 630, 633, 635, 637, 639, 640, 642, 644, 648, 650, 654, 656, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 712, 713, 714, 716, 722, 723, 724, 725, 727, 729, 730, 733, 736, 739, 742, 745, 747, 750, 753, 774, 777, 779, 782, 784, 787, 790, 793, 795, 798, 801, 804, 805, 808, 811, 814, 858, 870, 872, 956, 957, 959, 960, 961, 977, 979, 980, 981, 982, 986, 987, 989, 990, 993, 995, 997, 998, 1001, 1003, 1004, 1006, 1013, 1023, 1036, 1040, 1046, 1052, 1059, 1061, 1062, 1068, 1070, 1072, 1073, 1076, 1078, 1080, 1094, 1095, 1099, 1100, 1104, 1105, 1109, 1110, 1115, 1116, 1125, 1126, 1131, 1132, 1137, 1138, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163, 1217, 1226, 1242, 1283, 1284, 1285, 1286, 1287, 1289, 1291, 1300, 1304, 1305, 1306, 1307, 1308, 1311, 1313], "subset": [0, 1, 5, 11, 22, 23, 30, 34, 53, 67, 68, 70, 75, 78, 88, 97, 102, 110, 111, 122, 124, 132, 136, 144, 153, 162, 164, 166, 170, 175, 179, 444, 445, 452, 454, 460, 463, 465, 472, 479, 481, 487, 490, 494, 495, 505, 509, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 1052, 1286, 1289, 1300, 1306], "algorithm": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 76, 77, 81, 82, 84, 85, 87, 90, 91, 92, 93, 94, 95, 99, 100, 101, 105, 106, 107, 108, 109, 114, 115, 116, 117, 118, 120, 125, 126, 127, 128, 129, 131, 133, 135, 139, 140, 141, 142, 143, 146, 148, 149, 151, 155, 157, 163, 171, 172, 173, 174, 176, 177, 178, 180, 181, 446, 448, 449, 451, 455, 456, 458, 459, 462, 467, 468, 469, 471, 474, 475, 476, 478, 482, 483, 485, 486, 489, 493, 498, 499, 500, 501, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 555, 556, 557, 559, 560, 563, 564, 567, 568, 575, 580, 581, 584, 585, 586, 589, 590, 591, 595, 596, 597, 598, 601, 602, 603, 607, 608, 609, 613, 614, 617, 618, 619, 622, 623, 625, 626, 628, 629, 633, 634, 640, 641, 644, 645, 646, 647, 650, 651, 652, 653, 656, 657, 658, 659, 679, 681, 682, 683, 684, 685, 688, 689, 690, 694, 695, 696, 697, 700, 701, 702, 703, 706, 707, 708, 709, 710, 712, 713, 716, 717, 718, 719, 720, 721, 723, 724, 727, 728, 729, 733, 734, 735, 739, 740, 741, 745, 746, 750, 751, 752, 769, 777, 778, 782, 783, 787, 788, 789, 792, 793, 794, 797, 798, 799, 800, 803, 804, 807, 808, 809, 810, 813, 814, 831, 843, 849, 850, 851, 852, 853, 854, 855, 856, 1004, 1006, 1054, 1055, 1056, 1058, 1227, 1248, 1283, 1286, 1289, 1300, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "downwind": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 30, 31, 32, 33, 34, 35, 36, 37, 1300, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "model": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 53, 54, 58, 59, 60, 65, 67, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 381, 382, 417, 418, 438, 444, 446, 448, 449, 452, 455, 456, 458, 459, 463, 465, 467, 468, 469, 472, 474, 475, 476, 479, 482, 483, 485, 486, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 820, 829, 849, 857, 858, 859, 861, 864, 870, 873, 875, 876, 877, 956, 977, 979, 986, 994, 997, 1002, 1026, 1046, 1047, 1052, 1054, 1055, 1056, 1059, 1068, 1070, 1076, 1080, 1283, 1284, 1285, 1286, 1287, 1290, 1294, 1296, 1299, 1300, 1301, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "output_farm_var": [1, 4, 23, 26, 30, 33, 34, 37, 88, 95, 97, 100, 102, 109, 110, 144, 151, 162, 164, 494, 495, 501, 565, 571, 578, 581, 582, 586, 587, 591, 593, 598, 599, 603, 604, 609, 611, 614, 615, 619, 620, 623, 624, 626, 627, 629, 630, 634, 635, 637, 639, 641, 642, 647, 648, 653, 654, 659], "which": [1, 4, 5, 8, 10, 11, 15, 18, 23, 26, 30, 33, 34, 37, 53, 78, 85, 88, 95, 97, 100, 102, 109, 110, 127, 132, 134, 136, 143, 144, 151, 153, 155, 162, 164, 170, 176, 177, 178, 180, 181, 444, 449, 452, 454, 459, 463, 465, 469, 472, 476, 479, 486, 490, 494, 495, 501, 513, 522, 531, 542, 550, 553, 557, 558, 560, 561, 564, 565, 571, 578, 581, 582, 586, 587, 591, 593, 598, 599, 600, 603, 604, 609, 611, 614, 615, 616, 619, 620, 623, 624, 626, 627, 629, 630, 634, 635, 637, 639, 641, 642, 643, 647, 648, 649, 653, 654, 659, 679, 680, 704, 705, 712, 713, 714, 716, 717, 719, 723, 724, 727, 729, 733, 735, 739, 741, 745, 746, 750, 752, 777, 778, 782, 783, 787, 789, 790, 792, 793, 794, 795, 797, 798, 800, 803, 804, 805, 807, 808, 810, 813, 814, 822, 825, 826, 827, 828, 844, 854, 855, 856, 873, 1013, 1023, 1052, 1056, 1059, 1060, 1069, 1077, 1080, 1134, 1172, 1279, 1282, 1286, 1289, 1297, 1301, 1304, 1305, 1308, 1311, 1312, 1313, 1314, 1315], "being": [1, 4, 5, 8, 10, 11, 15, 23, 26, 30, 33, 34, 37, 78, 85, 88, 95, 97, 100, 102, 109, 110, 132, 134, 136, 143, 144, 151, 153, 155, 162, 164, 176, 177, 444, 449, 452, 459, 463, 465, 469, 472, 476, 479, 486, 490, 494, 495, 501, 553, 557, 558, 560, 561, 564, 565, 571, 578, 581, 582, 586, 587, 591, 593, 598, 599, 603, 604, 609, 611, 614, 615, 619, 620, 623, 624, 626, 627, 629, 630, 634, 635, 637, 639, 641, 642, 647, 648, 653, 654, 659, 717, 719, 1023, 1052, 1056, 1134, 1172], "0": [1, 3, 5, 9, 11, 14, 16, 23, 25, 30, 32, 34, 38, 40, 42, 45, 47, 49, 51, 53, 54, 58, 65, 75, 78, 82, 84, 88, 92, 93, 97, 102, 106, 107, 110, 111, 115, 118, 124, 128, 132, 136, 140, 141, 144, 147, 153, 162, 164, 166, 170, 175, 179, 184, 192, 197, 252, 275, 317, 367, 372, 438, 440, 441, 442, 443, 444, 448, 452, 453, 456, 458, 460, 463, 464, 465, 468, 472, 475, 479, 480, 483, 485, 487, 490, 491, 492, 494, 495, 499, 500, 505, 508, 510, 514, 515, 518, 523, 524, 527, 532, 533, 536, 539, 543, 544, 547, 553, 556, 558, 561, 565, 566, 571, 574, 575, 578, 582, 585, 587, 588, 590, 593, 596, 597, 599, 600, 602, 604, 608, 611, 615, 618, 620, 624, 627, 630, 635, 637, 639, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 660, 663, 666, 669, 672, 675, 679, 682, 685, 686, 691, 692, 697, 698, 699, 703, 704, 705, 707, 710, 711, 714, 718, 720, 722, 725, 726, 730, 731, 736, 737, 742, 743, 747, 748, 753, 768, 774, 775, 779, 780, 784, 785, 788, 790, 795, 799, 801, 805, 809, 811, 818, 822, 831, 832, 849, 851, 852, 853, 854, 855, 856, 863, 877, 893, 895, 897, 901, 902, 905, 907, 956, 963, 964, 965, 966, 977, 979, 983, 986, 997, 1004, 1007, 1008, 1013, 1014, 1015, 1021, 1022, 1023, 1026, 1046, 1047, 1052, 1055, 1059, 1060, 1063, 1064, 1068, 1070, 1076, 1078, 1083, 1092, 1097, 1102, 1107, 1111, 1113, 1118, 1120, 1121, 1123, 1127, 1129, 1134, 1135, 1139, 1142, 1148, 1149, 1154, 1160, 1166, 1169, 1172, 1173, 1179, 1183, 1189, 1193, 1199, 1203, 1210, 1217, 1218, 1220, 1226, 1228, 1231, 1242, 1249, 1251, 1259, 1260, 1275, 1280, 1281, 1285, 1294, 1295, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "fdata": [1, 2, 5, 7, 8, 11, 13, 23, 24, 30, 31, 34, 36, 78, 81, 88, 90, 97, 99, 102, 105, 110, 114, 116, 117, 122, 124, 126, 127, 131, 132, 133, 136, 139, 144, 146, 148, 149, 153, 162, 163, 164, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 444, 446, 452, 455, 463, 465, 467, 472, 474, 479, 482, 490, 494, 495, 498, 510, 512, 513, 517, 518, 521, 522, 526, 527, 530, 531, 535, 536, 538, 539, 541, 542, 546, 547, 549, 550, 551, 552, 553, 555, 558, 559, 561, 563, 565, 567, 568, 571, 578, 580, 582, 584, 587, 589, 593, 595, 599, 601, 604, 607, 611, 613, 615, 617, 620, 622, 624, 625, 627, 628, 630, 633, 635, 637, 639, 640, 642, 644, 648, 650, 654, 656, 679, 681, 683, 684, 686, 688, 689, 690, 691, 694, 695, 696, 698, 700, 701, 702, 704, 706, 708, 709, 711, 712, 713, 714, 716, 717, 719, 722, 723, 724, 725, 727, 728, 729, 730, 733, 734, 735, 736, 739, 740, 741, 742, 745, 746, 747, 750, 751, 752, 753, 769, 774, 777, 778, 779, 782, 783, 784, 787, 789, 790, 792, 793, 795, 797, 798, 801, 803, 804, 805, 807, 808, 811, 813, 814, 1052, 1054], "main": [1, 2, 5, 7, 11, 13, 23, 24, 30, 31, 34, 36, 75, 76, 78, 81, 88, 90, 97, 99, 102, 105, 110, 132, 133, 136, 139, 153, 162, 163, 164, 444, 446, 452, 455, 463, 465, 467, 472, 474, 479, 482, 490, 494, 495, 498, 553, 555, 558, 559, 561, 563, 578, 580, 582, 584, 587, 589, 593, 595, 599, 601, 604, 607, 611, 613, 615, 617, 620, 622, 624, 625, 627, 628, 630, 633, 635, 637, 639, 640, 642, 644, 648, 650, 654, 656, 1052, 1054, 1302, 1303], "pre_rotor": [1, 23, 30, 88, 90, 97, 98, 110, 162, 494, 604, 605, 624, 627, 1047, 1080], "run_calcul": [1, 5, 11, 23, 30, 34, 75, 77, 78, 88, 97, 101, 102, 110, 132, 135, 136, 144, 153, 162, 164, 444, 452, 463, 465, 472, 479, 490, 494, 495, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 1052], "out_var": [1, 5, 11, 23, 30, 34, 75, 77, 78, 88, 97, 101, 102, 110, 132, 135, 136, 144, 153, 162, 164, 444, 452, 463, 465, 472, 479, 490, 494, 495, 553, 558, 561, 565, 571, 578, 579, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 1052], "calc_par": [1, 5, 11, 23, 30, 34, 77, 78, 88, 96, 97, 101, 102, 110, 132, 135, 136, 144, 153, 162, 164, 444, 452, 463, 465, 472, 479, 490, 494, 495, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 1052], "start": [1, 5, 11, 23, 30, 34, 75, 77, 78, 79, 88, 97, 101, 102, 110, 132, 135, 136, 144, 153, 162, 164, 188, 192, 264, 317, 438, 444, 452, 463, 465, 472, 479, 490, 494, 495, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 679, 680, 704, 705, 878, 879, 1052, 1300, 1303, 1309, 1311, 1315], "parallel": [1, 5, 11, 16, 23, 30, 34, 53, 54, 75, 77, 78, 88, 97, 101, 102, 110, 132, 135, 136, 144, 153, 162, 164, 444, 452, 463, 465, 472, 479, 490, 494, 495, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 1052, 1134, 1172, 1260, 1300, 1301, 1305, 1308, 1313, 1314], "via": [1, 5, 11, 23, 30, 34, 75, 77, 78, 88, 97, 101, 102, 110, 132, 135, 136, 144, 153, 162, 164, 438, 439, 444, 445, 452, 454, 460, 463, 465, 472, 479, 481, 487, 490, 494, 495, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 820, 829, 849, 857, 860, 861, 864, 870, 873, 875, 886, 1013, 1023, 1052, 1259, 1284, 1287, 1288, 1290, 1294, 1300, 1301, 1305, 1308, 1309, 1313, 1315], "": [1, 5, 11, 23, 30, 34, 59, 67, 68, 75, 77, 78, 88, 97, 101, 102, 110, 117, 132, 135, 136, 144, 153, 162, 164, 192, 284, 317, 394, 395, 396, 401, 419, 420, 421, 429, 444, 445, 452, 463, 465, 472, 479, 490, 494, 495, 527, 528, 537, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 848, 851, 852, 853, 854, 855, 856, 907, 1006, 1013, 1023, 1052, 1227, 1248, 1296, 1300, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "apply_ufunc": [1, 5, 11, 23, 30, 34, 67, 68, 75, 77, 78, 88, 97, 101, 102, 110, 132, 135, 136, 144, 153, 162, 164, 444, 452, 463, 465, 472, 479, 490, 494, 495, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 1052], "execut": [2, 7, 13, 18, 24, 31, 36, 76, 79, 81, 90, 99, 105, 133, 139, 163, 172, 446, 455, 467, 474, 482, 498, 555, 559, 563, 580, 584, 589, 595, 601, 607, 613, 617, 622, 625, 628, 633, 640, 644, 650, 656, 681, 688, 694, 700, 706, 1054, 1259, 1266, 1289, 1294, 1302], "singl": [2, 7, 13, 24, 31, 36, 67, 76, 81, 90, 99, 105, 133, 139, 163, 172, 443, 446, 455, 467, 472, 474, 482, 498, 555, 559, 563, 565, 580, 584, 589, 595, 601, 607, 613, 617, 622, 625, 628, 633, 640, 644, 650, 656, 681, 688, 694, 700, 706, 866, 868, 869, 956, 960, 977, 979, 981, 986, 989, 997, 1004, 1018, 1046, 1054, 1059, 1061, 1068, 1070, 1072, 1076, 1078, 1092, 1094, 1097, 1099, 1102, 1104, 1107, 1109, 1113, 1115, 1118, 1123, 1125, 1129, 1131, 1135, 1137, 1142, 1144, 1148, 1150, 1154, 1156, 1160, 1162, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1284, 1288, 1299, 1300, 1301, 1303, 1307, 1308, 1312], "comput": [2, 7, 13, 24, 31, 36, 76, 81, 90, 99, 105, 124, 133, 139, 163, 172, 179, 317, 363, 446, 455, 467, 474, 482, 498, 555, 559, 563, 580, 584, 589, 595, 601, 607, 613, 617, 622, 625, 628, 633, 639, 640, 644, 650, 656, 681, 688, 694, 700, 704, 706, 774, 873, 1054, 1134, 1172, 1289, 1300, 1308, 1312, 1315], "should": [2, 3, 7, 9, 13, 14, 18, 24, 25, 31, 32, 36, 76, 81, 84, 90, 93, 99, 105, 107, 118, 128, 133, 139, 141, 163, 172, 444, 445, 446, 448, 455, 458, 467, 468, 474, 475, 482, 485, 498, 500, 510, 515, 524, 533, 544, 555, 556, 559, 563, 575, 580, 584, 585, 589, 590, 595, 597, 601, 602, 607, 608, 613, 617, 618, 622, 625, 628, 633, 640, 644, 646, 650, 652, 656, 658, 681, 685, 688, 694, 697, 700, 703, 706, 710, 720, 799, 801, 809, 1054, 1055, 1134, 1172, 1278, 1302, 1304, 1305, 1309, 1310, 1313, 1314, 1315], "numpi": [2, 7, 8, 13, 18, 24, 31, 36, 63, 67, 76, 81, 87, 88, 90, 99, 105, 116, 117, 126, 127, 133, 139, 146, 147, 148, 149, 152, 157, 158, 159, 160, 161, 163, 167, 171, 172, 173, 174, 176, 177, 178, 180, 181, 192, 203, 208, 317, 322, 442, 443, 446, 451, 455, 462, 467, 471, 474, 478, 482, 489, 498, 512, 513, 521, 522, 530, 531, 538, 541, 542, 549, 550, 551, 555, 559, 563, 566, 567, 568, 570, 574, 577, 578, 579, 580, 584, 589, 595, 601, 606, 607, 613, 617, 622, 625, 628, 633, 640, 644, 650, 656, 661, 664, 667, 670, 673, 677, 681, 683, 684, 688, 689, 690, 694, 695, 696, 700, 701, 702, 706, 708, 709, 712, 713, 716, 717, 719, 723, 724, 727, 728, 729, 733, 734, 735, 739, 740, 741, 745, 746, 750, 751, 752, 769, 771, 772, 777, 778, 782, 783, 787, 789, 792, 793, 797, 798, 803, 804, 807, 808, 813, 814, 823, 873, 907, 908, 912, 913, 914, 915, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 944, 945, 946, 947, 952, 953, 954, 955, 959, 975, 976, 985, 996, 1004, 1006, 1013, 1016, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1048, 1049, 1054, 1058, 1067, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1134, 1172, 1177, 1178, 1180, 1181, 1187, 1188, 1190, 1191, 1197, 1198, 1200, 1201, 1207, 1208, 1209, 1211, 1212, 1213, 1214, 1219, 1221, 1222, 1223, 1224, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1250, 1252, 1253, 1254, 1255, 1277, 1278, 1279, 1280, 1281, 1282, 1285, 1304, 1305, 1309, 1311, 1312, 1315], "arrai": [2, 3, 7, 9, 13, 14, 24, 25, 31, 32, 36, 76, 81, 84, 90, 93, 99, 105, 107, 117, 118, 128, 133, 139, 141, 158, 159, 163, 172, 192, 193, 197, 198, 199, 200, 201, 208, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 272, 273, 276, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 446, 448, 455, 458, 467, 468, 474, 475, 482, 485, 498, 500, 515, 524, 533, 544, 555, 556, 559, 563, 575, 578, 579, 580, 584, 585, 589, 590, 595, 597, 601, 602, 607, 608, 613, 617, 618, 622, 625, 628, 633, 640, 644, 646, 650, 652, 656, 658, 681, 685, 688, 694, 697, 700, 703, 706, 710, 720, 799, 809, 848, 907, 908, 959, 960, 961, 964, 965, 981, 982, 989, 990, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1021, 1022, 1023, 1042, 1043, 1050, 1051, 1054, 1055, 1061, 1062, 1063, 1065, 1072, 1073, 1074, 1094, 1095, 1099, 1100, 1104, 1105, 1109, 1110, 1115, 1116, 1120, 1121, 1122, 1125, 1126, 1131, 1132, 1134, 1137, 1138, 1140, 1144, 1145, 1146, 1150, 1151, 1152, 1156, 1157, 1158, 1162, 1163, 1164, 1168, 1171, 1172, 1175, 1176, 1177, 1185, 1186, 1187, 1195, 1196, 1197, 1205, 1206, 1207, 1218, 1228, 1238, 1239, 1249, 1258, 1279, 1280, 1281, 1282, 1304, 1305, 1312, 1315], "dict": [2, 3, 5, 6, 7, 8, 9, 13, 14, 16, 17, 18, 24, 25, 27, 28, 31, 32, 36, 41, 46, 47, 48, 50, 53, 54, 59, 60, 62, 64, 65, 67, 68, 70, 76, 77, 81, 84, 88, 89, 90, 93, 96, 99, 101, 105, 107, 118, 127, 128, 131, 133, 135, 139, 141, 146, 148, 163, 167, 171, 176, 177, 178, 189, 190, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 452, 454, 455, 458, 467, 468, 472, 473, 474, 475, 479, 481, 482, 485, 492, 493, 498, 500, 502, 503, 504, 505, 510, 511, 513, 515, 517, 522, 524, 526, 528, 531, 533, 535, 537, 542, 544, 546, 550, 552, 553, 554, 555, 556, 559, 563, 567, 575, 579, 580, 582, 583, 584, 585, 589, 590, 593, 594, 595, 597, 600, 601, 602, 607, 608, 613, 616, 617, 618, 622, 625, 628, 633, 636, 638, 640, 642, 643, 644, 646, 648, 649, 650, 652, 654, 655, 656, 658, 661, 664, 667, 670, 673, 677, 685, 691, 692, 697, 698, 699, 703, 710, 712, 713, 714, 715, 716, 717, 719, 720, 724, 726, 727, 729, 731, 733, 735, 737, 739, 741, 743, 746, 748, 750, 752, 773, 775, 777, 778, 780, 783, 784, 785, 789, 790, 791, 795, 796, 799, 801, 802, 805, 806, 809, 818, 822, 824, 834, 835, 836, 845, 846, 847, 851, 852, 853, 854, 855, 856, 860, 863, 868, 869, 872, 877, 878, 886, 891, 892, 910, 920, 928, 935, 942, 950, 957, 971, 972, 978, 980, 987, 998, 1004, 1006, 1007, 1008, 1047, 1048, 1049, 1054, 1055, 1059, 1060, 1068, 1069, 1071, 1076, 1077, 1079, 1083, 1088, 1089, 1093, 1098, 1103, 1108, 1124, 1130, 1134, 1172, 1177, 1187, 1197, 1207, 1220, 1223, 1224, 1227, 1231, 1236, 1237, 1248, 1251, 1254, 1255, 1257, 1258, 1259, 1260, 1265, 1267, 1273, 1275, 1276, 1286, 1294, 1304, 1305, 1310, 1312], "kei": [2, 7, 8, 13, 17, 18, 24, 31, 36, 47, 48, 60, 67, 68, 70, 76, 81, 90, 99, 105, 117, 127, 131, 133, 139, 146, 148, 163, 176, 177, 178, 192, 210, 317, 372, 446, 455, 467, 472, 473, 474, 479, 481, 482, 492, 498, 502, 503, 505, 506, 510, 511, 513, 517, 522, 526, 531, 535, 542, 546, 550, 552, 555, 559, 563, 567, 580, 584, 589, 593, 594, 595, 601, 607, 613, 617, 622, 625, 628, 633, 640, 644, 650, 656, 712, 713, 714, 715, 716, 717, 719, 724, 726, 727, 729, 731, 733, 735, 737, 739, 741, 743, 746, 748, 750, 752, 753, 771, 775, 777, 778, 780, 783, 785, 789, 790, 791, 796, 801, 802, 806, 845, 846, 847, 860, 863, 878, 885, 886, 890, 971, 972, 1007, 1008, 1047, 1048, 1049, 1054, 1059, 1080, 1088, 1089, 1223, 1224, 1236, 1237, 1254, 1255, 1258, 1285, 1306], "output": [2, 4, 7, 10, 11, 12, 13, 15, 18, 24, 26, 31, 33, 36, 37, 76, 77, 81, 85, 90, 95, 99, 100, 101, 105, 109, 117, 133, 134, 135, 139, 143, 151, 155, 163, 184, 444, 445, 446, 449, 452, 454, 455, 459, 467, 469, 472, 473, 474, 476, 479, 481, 482, 486, 498, 501, 555, 557, 559, 560, 563, 564, 578, 579, 580, 581, 582, 583, 584, 586, 589, 591, 595, 598, 601, 603, 607, 609, 613, 614, 617, 619, 622, 623, 625, 626, 628, 629, 633, 634, 640, 641, 644, 647, 650, 653, 656, 659, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 1054, 1056, 1134, 1172, 1275, 1283, 1300, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "str": [2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 24, 26, 31, 33, 34, 36, 37, 38, 39, 43, 47, 48, 53, 54, 62, 67, 68, 69, 70, 76, 77, 81, 85, 88, 90, 95, 96, 99, 100, 101, 105, 109, 111, 114, 116, 117, 123, 127, 130, 131, 133, 134, 135, 139, 143, 144, 145, 146, 148, 151, 155, 158, 159, 163, 164, 165, 168, 169, 171, 176, 177, 178, 180, 181, 182, 183, 186, 189, 190, 192, 243, 284, 317, 359, 372, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 452, 454, 455, 459, 467, 469, 472, 473, 474, 476, 479, 481, 482, 486, 492, 493, 498, 501, 502, 504, 505, 507, 509, 510, 511, 513, 517, 522, 526, 531, 535, 542, 546, 550, 552, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 567, 572, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 591, 595, 598, 599, 600, 601, 603, 604, 606, 607, 609, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 625, 626, 628, 629, 630, 631, 633, 634, 636, 638, 640, 641, 642, 643, 644, 647, 648, 649, 650, 653, 654, 655, 656, 659, 662, 665, 668, 671, 674, 678, 686, 687, 704, 705, 712, 713, 714, 715, 716, 717, 719, 724, 726, 727, 729, 730, 731, 733, 735, 736, 737, 739, 741, 742, 743, 746, 747, 748, 750, 752, 771, 774, 775, 777, 778, 780, 783, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 822, 825, 826, 827, 828, 834, 835, 838, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 863, 866, 867, 868, 869, 872, 877, 878, 880, 881, 882, 883, 884, 885, 886, 891, 892, 910, 920, 928, 935, 942, 950, 957, 958, 962, 971, 972, 973, 974, 978, 979, 980, 987, 998, 1006, 1007, 1008, 1023, 1026, 1039, 1041, 1044, 1045, 1047, 1054, 1056, 1059, 1060, 1068, 1069, 1071, 1076, 1077, 1080, 1090, 1091, 1093, 1098, 1103, 1108, 1124, 1130, 1134, 1136, 1143, 1149, 1155, 1161, 1167, 1172, 1177, 1182, 1187, 1192, 1197, 1202, 1207, 1215, 1216, 1225, 1227, 1240, 1241, 1248, 1256, 1257, 1258, 1259, 1260, 1275, 1276, 1285, 1300, 1306], "valu": [2, 7, 8, 13, 17, 18, 24, 31, 36, 47, 48, 60, 76, 81, 90, 99, 105, 127, 131, 133, 139, 146, 148, 163, 170, 173, 176, 177, 178, 192, 195, 196, 204, 205, 207, 209, 211, 215, 216, 217, 218, 219, 220, 223, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 270, 275, 284, 317, 319, 320, 323, 324, 326, 327, 328, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 372, 411, 444, 445, 446, 452, 454, 455, 465, 466, 467, 472, 473, 474, 479, 481, 482, 492, 498, 505, 510, 511, 513, 517, 522, 526, 531, 535, 542, 546, 550, 552, 555, 559, 561, 562, 563, 567, 580, 583, 584, 587, 589, 593, 594, 595, 601, 607, 613, 617, 622, 625, 628, 631, 633, 640, 644, 650, 654, 656, 669, 675, 676, 679, 683, 686, 689, 691, 695, 698, 699, 701, 704, 705, 708, 711, 712, 713, 714, 715, 716, 717, 719, 723, 724, 726, 727, 728, 729, 731, 733, 734, 735, 737, 739, 740, 741, 742, 743, 745, 746, 748, 750, 751, 752, 753, 768, 769, 772, 775, 777, 778, 779, 780, 782, 783, 784, 785, 787, 789, 790, 791, 796, 801, 802, 806, 831, 836, 843, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 863, 866, 868, 869, 877, 878, 897, 900, 902, 904, 956, 959, 960, 961, 964, 965, 971, 972, 977, 979, 981, 982, 986, 989, 990, 997, 1004, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1031, 1032, 1033, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1059, 1061, 1062, 1063, 1068, 1070, 1072, 1073, 1076, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1120, 1121, 1123, 1125, 1126, 1129, 1131, 1132, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1193, 1195, 1196, 1198, 1200, 1201, 1203, 1205, 1206, 1208, 1209, 1211, 1212, 1213, 1214, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1226, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1242, 1249, 1250, 1252, 1253, 1254, 1255, 1258, 1265, 1267, 1273, 1285, 1289, 1296, 1300, 1304, 1309, 1310, 1315], "ndarrai": [2, 7, 8, 13, 18, 24, 31, 36, 63, 69, 70, 76, 81, 87, 88, 90, 99, 105, 116, 117, 126, 127, 133, 139, 146, 147, 148, 149, 152, 157, 158, 159, 160, 161, 163, 167, 171, 172, 173, 174, 176, 177, 178, 180, 181, 193, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 268, 269, 272, 273, 276, 277, 279, 280, 281, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 442, 443, 446, 451, 455, 462, 467, 471, 474, 478, 482, 489, 498, 512, 513, 521, 522, 530, 531, 538, 541, 542, 549, 550, 551, 555, 559, 563, 566, 567, 568, 570, 574, 577, 578, 579, 580, 584, 589, 595, 601, 606, 607, 613, 617, 622, 625, 628, 633, 640, 644, 650, 656, 661, 664, 667, 670, 673, 677, 681, 683, 684, 688, 689, 690, 694, 695, 696, 700, 701, 702, 706, 708, 709, 712, 713, 716, 717, 719, 723, 724, 727, 728, 729, 733, 734, 735, 739, 740, 741, 745, 746, 750, 751, 752, 769, 771, 772, 777, 778, 782, 783, 787, 789, 792, 793, 797, 798, 803, 804, 807, 808, 813, 814, 823, 848, 873, 907, 908, 912, 913, 914, 915, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 944, 945, 946, 947, 952, 953, 954, 955, 959, 975, 976, 985, 996, 1004, 1006, 1013, 1016, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1048, 1049, 1054, 1058, 1067, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1134, 1172, 1177, 1178, 1180, 1181, 1187, 1188, 1190, 1191, 1197, 1198, 1200, 1201, 1207, 1208, 1209, 1211, 1212, 1213, 1214, 1219, 1221, 1222, 1223, 1224, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1250, 1252, 1253, 1254, 1255, 1258, 1277, 1278, 1279, 1280, 1281, 1282, 1315], "shape": [2, 7, 8, 13, 18, 24, 31, 36, 63, 70, 81, 87, 88, 90, 99, 105, 117, 126, 127, 133, 139, 146, 147, 148, 149, 152, 157, 158, 159, 160, 161, 163, 167, 171, 172, 173, 174, 176, 177, 178, 180, 181, 192, 298, 317, 442, 443, 446, 451, 455, 462, 467, 471, 474, 478, 482, 489, 498, 512, 513, 521, 522, 530, 531, 538, 541, 542, 549, 550, 551, 555, 559, 563, 566, 567, 568, 570, 574, 577, 578, 579, 580, 584, 589, 595, 601, 606, 607, 613, 617, 622, 625, 628, 633, 640, 644, 650, 656, 661, 664, 667, 670, 673, 677, 681, 683, 684, 688, 689, 690, 694, 695, 696, 700, 701, 702, 706, 708, 709, 712, 713, 716, 717, 719, 723, 724, 727, 728, 729, 733, 734, 735, 739, 740, 741, 745, 746, 750, 751, 752, 769, 772, 777, 778, 782, 783, 787, 789, 792, 793, 797, 798, 803, 804, 807, 808, 813, 814, 823, 873, 907, 908, 912, 913, 914, 915, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 934, 936, 937, 938, 939, 940, 941, 944, 945, 946, 947, 952, 953, 954, 955, 959, 960, 961, 964, 965, 975, 976, 981, 982, 985, 989, 990, 996, 1004, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1042, 1043, 1048, 1049, 1050, 1051, 1054, 1058, 1061, 1062, 1063, 1065, 1067, 1072, 1073, 1074, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1094, 1095, 1099, 1100, 1104, 1105, 1109, 1110, 1115, 1116, 1120, 1121, 1122, 1125, 1126, 1131, 1132, 1137, 1138, 1140, 1144, 1145, 1146, 1150, 1151, 1152, 1156, 1157, 1158, 1162, 1163, 1164, 1168, 1171, 1175, 1176, 1177, 1178, 1180, 1181, 1185, 1186, 1187, 1188, 1190, 1191, 1195, 1196, 1197, 1198, 1200, 1201, 1205, 1206, 1207, 1208, 1209, 1211, 1212, 1213, 1214, 1218, 1219, 1221, 1222, 1223, 1224, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1249, 1250, 1252, 1253, 1254, 1255, 1257, 1258, 1275, 1278, 1279, 1280, 1281, 1282, 1294, 1300, 1311, 1315], "n_turbin": [2, 24, 31, 36, 67, 73, 87, 88, 90, 99, 105, 146, 148, 149, 157, 163, 172, 182, 185, 443, 451, 462, 471, 478, 489, 498, 567, 568, 578, 579, 580, 584, 589, 595, 601, 606, 607, 613, 617, 622, 625, 628, 633, 640, 644, 650, 656, 681, 688, 694, 700, 706, 823, 1058, 1092, 1093, 1123, 1124, 1173, 1174, 1183, 1184, 1193, 1194, 1305, 1307, 1309, 1310, 1311], "includ": [3, 7, 9, 14, 19, 25, 32, 57, 78, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 875, 880, 1055, 1293, 1300, 1302, 1303, 1305, 1314, 1315], "load": [3, 9, 14, 17, 18, 25, 32, 84, 93, 107, 118, 128, 141, 444, 445, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055, 1300, 1304], "requir": [3, 9, 14, 25, 32, 47, 53, 74, 77, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 510, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055, 1284, 1301, 1303, 1304, 1305, 1306, 1308, 1313, 1315], "file": [3, 9, 14, 25, 32, 84, 93, 107, 118, 128, 141, 187, 189, 190, 438, 439, 440, 441, 444, 445, 448, 452, 454, 458, 468, 475, 479, 481, 485, 493, 500, 507, 515, 524, 533, 544, 553, 554, 556, 575, 583, 585, 590, 597, 599, 600, 602, 608, 615, 616, 618, 635, 636, 637, 638, 642, 643, 646, 648, 649, 652, 654, 655, 658, 685, 697, 703, 710, 720, 736, 799, 809, 820, 825, 826, 827, 828, 829, 849, 857, 860, 861, 863, 864, 869, 870, 873, 875, 878, 880, 881, 882, 883, 884, 886, 891, 892, 1055, 1257, 1258, 1275, 1287, 1288, 1289, 1293, 1294, 1300, 1301, 1302, 1304, 1305, 1307, 1310, 1311, 1313, 1314], "part": [3, 9, 14, 25, 32, 84, 93, 107, 118, 128, 141, 192, 274, 290, 317, 448, 458, 468, 475, 485, 500, 509, 515, 518, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055, 1303, 1305, 1307, 1308, 1310], "dictionari": [3, 9, 14, 25, 32, 65, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 502, 504, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 753, 773, 799, 809, 860, 892, 1055, 1294], "under": [3, 9, 14, 25, 32, 84, 88, 89, 93, 102, 107, 118, 128, 136, 141, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055, 1297, 1300, 1301, 1303, 1304, 1306, 1309, 1315], "reason": [3, 9, 14, 25, 32, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055], "dure": [3, 9, 14, 25, 32, 67, 68, 77, 84, 93, 107, 118, 128, 141, 444, 445, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055, 1300, 1305, 1306, 1312, 1313], "level": [3, 9, 14, 16, 25, 32, 40, 45, 49, 53, 54, 58, 65, 82, 84, 92, 93, 106, 107, 110, 115, 118, 128, 140, 141, 438, 440, 441, 442, 443, 445, 448, 456, 458, 460, 468, 475, 483, 485, 487, 499, 500, 508, 514, 515, 523, 524, 532, 533, 543, 544, 556, 575, 585, 590, 596, 597, 602, 608, 618, 645, 646, 651, 652, 657, 658, 682, 685, 697, 703, 707, 710, 718, 720, 788, 799, 809, 818, 829, 831, 832, 836, 851, 852, 853, 854, 855, 856, 863, 963, 964, 965, 966, 983, 1007, 1008, 1013, 1014, 1015, 1021, 1022, 1023, 1026, 1047, 1055, 1063, 1064, 1078, 1080, 1083, 1111, 1120, 1121, 1127, 1139, 1179, 1189, 1199, 1210, 1218, 1220, 1228, 1231, 1249, 1251, 1259, 1260, 1275, 1283, 1286, 1287, 1300], "silent": [3, 9, 14, 16, 25, 32, 40, 45, 49, 53, 54, 58, 65, 84, 92, 93, 106, 107, 115, 118, 128, 140, 141, 184, 438, 440, 441, 442, 443, 448, 458, 460, 468, 475, 485, 487, 500, 508, 515, 524, 533, 544, 556, 575, 585, 590, 596, 597, 602, 608, 618, 646, 652, 658, 682, 685, 697, 703, 707, 710, 718, 720, 788, 799, 809, 818, 831, 832, 863, 963, 964, 965, 966, 983, 1007, 1008, 1013, 1014, 1015, 1021, 1022, 1023, 1026, 1047, 1055, 1063, 1064, 1083, 1111, 1120, 1121, 1127, 1139, 1179, 1189, 1199, 1210, 1218, 1220, 1228, 1231, 1249, 1251, 1259, 1260, 1275], "ha": [3, 9, 14, 25, 32, 59, 84, 93, 107, 118, 119, 128, 141, 448, 458, 468, 475, 485, 500, 509, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 967, 1055, 1226, 1280, 1281, 1284, 1300, 1301, 1304, 1307, 1309, 1310, 1312, 1313], "exactli": [3, 9, 14, 25, 32, 59, 84, 93, 107, 118, 128, 141, 192, 252, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055], "two": [3, 9, 14, 25, 32, 59, 84, 93, 107, 118, 128, 141, 442, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 615, 618, 637, 646, 652, 654, 658, 685, 697, 703, 710, 720, 799, 809, 907, 1055, 1134, 1172, 1277, 1278, 1289, 1294, 1300, 1304, 1305, 1308, 1309, 1310, 1313, 1315], "data_var": [3, 9, 14, 25, 32, 59, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055], "name_str": [3, 9, 14, 25, 32, 59, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055], "dim_tupl": [3, 9, 14, 25, 32, 59, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055], "data_ndarrai": [3, 9, 14, 25, 32, 59, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055], "coord": [3, 9, 14, 25, 32, 59, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055, 1134, 1172], "dim_name_str": [3, 9, 14, 25, 32, 59, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055], "dim_arrai": [3, 9, 14, 25, 32, 59, 84, 93, 107, 118, 128, 141, 448, 458, 468, 475, 485, 500, 515, 524, 533, 544, 556, 575, 585, 590, 597, 602, 608, 618, 646, 652, 658, 685, 697, 703, 710, 720, 799, 809, 1055], "output_var": [4, 10, 15, 26, 33, 37, 85, 95, 100, 109, 134, 143, 151, 155, 444, 445, 449, 452, 454, 459, 463, 469, 476, 479, 481, 486, 490, 501, 553, 554, 557, 560, 564, 581, 582, 583, 586, 591, 598, 603, 609, 614, 615, 616, 619, 623, 626, 629, 634, 641, 647, 653, 659, 1056, 1303, 1304, 1305, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "point_var": [5, 6, 11, 12], "emodel": [5, 6], "pointdatamodellist": [5, 6, 78, 136, 137, 138, 139, 140, 141, 142, 143, 1286], "extra": [5, 6, 851, 852, 853, 854, 855, 856, 1134, 1172], "emodels_cpar": [5, 6], "paramet": [5, 75, 88, 102, 136, 410, 417, 418, 452, 479, 492, 494, 495, 510, 630, 642, 648, 654, 691, 698, 704, 730, 736, 742, 747, 753, 773, 774, 779, 784, 886, 1004, 1226, 1242, 1289, 1291, 1296, 1305, 1308, 1311, 1313, 1314], "default": [5, 6, 7, 16, 51, 53, 54, 59, 83, 154, 171, 192, 284, 317, 440, 447, 452, 457, 479, 484, 507, 511, 518, 519, 527, 528, 537, 539, 540, 548, 583, 631, 705, 753, 768, 775, 825, 826, 827, 828, 831, 843, 864, 867, 873, 886, 1023, 1026, 1134, 1172, 1258, 1266, 1284, 1285, 1294, 1300, 1303, 1304, 1305, 1306, 1307, 1309, 1311, 1312, 1313, 1315], "output_point_var": [5, 10, 11, 15, 78, 85, 132, 134, 136, 143, 153, 155, 444, 449, 452, 459, 463, 465, 469, 472, 476, 479, 486, 490, 553, 557, 558, 560, 561, 564, 1052, 1056], "contribute_to_wake_delta": [5, 8, 124, 126, 127, 175, 176, 510, 512, 513, 518, 521, 522, 527, 530, 531, 536, 538, 539, 541, 542, 547, 549, 550, 711, 714, 717, 722, 725, 730, 736, 742, 747, 774, 779, 784], "pdata": [5, 7, 8, 11, 13, 67, 70, 78, 81, 114, 116, 117, 122, 124, 126, 127, 131, 132, 133, 136, 139, 153, 170, 174, 175, 176, 177, 178, 179, 180, 181, 444, 446, 452, 455, 463, 465, 467, 472, 474, 479, 482, 490, 510, 512, 513, 517, 518, 521, 522, 526, 527, 530, 531, 535, 536, 538, 539, 541, 542, 546, 547, 549, 550, 552, 553, 555, 558, 559, 561, 563, 679, 684, 686, 690, 691, 696, 698, 702, 704, 709, 711, 712, 713, 714, 716, 717, 719, 722, 723, 724, 725, 727, 728, 729, 730, 733, 734, 735, 736, 739, 740, 741, 742, 745, 746, 747, 750, 751, 752, 753, 769, 774, 777, 778, 779, 782, 783, 784, 787, 789, 790, 792, 793, 795, 797, 798, 801, 803, 804, 805, 807, 808, 811, 813, 814, 1052, 1054], "contribut": [5, 8, 124, 126, 175, 176, 179, 180, 510, 512, 518, 521, 527, 530, 536, 538, 539, 541, 547, 549, 711, 714, 717, 722, 725, 730, 736, 742, 747, 774, 779, 784, 790, 792, 795, 797, 801, 803, 805, 807, 811, 813], "delta": [5, 8, 38, 41, 42, 46, 47, 50, 51, 124, 126, 127, 131, 175, 176, 177, 178, 179, 180, 181, 510, 512, 513, 517, 518, 521, 522, 526, 527, 530, 531, 535, 536, 538, 539, 541, 542, 546, 547, 549, 550, 552, 561, 562, 624, 627, 698, 699, 711, 712, 713, 714, 716, 717, 719, 722, 724, 725, 727, 729, 730, 733, 735, 736, 739, 741, 742, 746, 747, 750, 752, 774, 777, 778, 779, 783, 784, 789, 790, 791, 792, 793, 795, 797, 798, 801, 802, 803, 804, 805, 807, 808, 811, 812, 813, 814, 822, 843, 908, 1108, 1136, 1289, 1300, 1308, 1312], "states_source_turbin": [5, 7, 8, 117, 126, 170, 171, 173, 174, 176, 181, 512, 521, 530, 538, 541, 549, 679, 683, 684, 686, 689, 690, 691, 695, 696, 698, 701, 702, 704, 708, 709, 712, 713, 716, 717, 723, 724, 727, 728, 729, 733, 734, 739, 740, 745, 750, 751, 753, 769, 772, 777, 782, 787, 793, 798, 804, 808, 814], "For": [7, 8, 75, 117, 126, 127, 158, 159, 171, 173, 174, 176, 181, 492, 512, 513, 521, 522, 530, 531, 538, 541, 542, 549, 550, 587, 683, 684, 689, 690, 695, 696, 701, 702, 708, 709, 712, 713, 716, 717, 723, 724, 727, 728, 729, 730, 733, 734, 739, 740, 745, 750, 751, 769, 772, 777, 782, 787, 793, 798, 804, 808, 814, 877, 1134, 1172, 1302, 1303, 1305, 1307, 1308, 1309, 1311, 1312, 1313, 1315], "each": [7, 8, 75, 88, 105, 117, 126, 127, 139, 158, 159, 171, 173, 174, 176, 181, 192, 303, 317, 492, 512, 513, 521, 522, 530, 531, 538, 541, 542, 549, 550, 654, 683, 684, 686, 689, 690, 695, 696, 701, 702, 708, 709, 712, 713, 716, 717, 723, 724, 727, 728, 729, 733, 734, 739, 740, 745, 750, 751, 769, 772, 777, 782, 787, 793, 798, 804, 808, 814, 831, 851, 877, 997, 1059, 1065, 1068, 1070, 1074, 1076, 1134, 1135, 1140, 1142, 1146, 1148, 1152, 1154, 1158, 1160, 1164, 1166, 1168, 1169, 1171, 1172, 1289, 1303, 1305, 1308, 1309, 1311, 1312, 1313, 1314, 1315], "one": [7, 8, 102, 105, 117, 126, 127, 136, 139, 146, 148, 152, 171, 173, 174, 176, 181, 192, 278, 317, 510, 511, 512, 513, 518, 519, 521, 522, 527, 528, 530, 531, 536, 537, 538, 539, 540, 541, 542, 548, 549, 550, 567, 570, 571, 572, 577, 683, 684, 689, 690, 695, 696, 701, 702, 708, 709, 712, 713, 716, 717, 723, 724, 727, 728, 729, 733, 734, 739, 740, 745, 750, 751, 769, 772, 777, 782, 787, 793, 798, 804, 808, 814, 870, 877, 907, 1134, 1172, 1278, 1289, 1293, 1300, 1303, 1307, 1314, 1315], "index": [7, 8, 74, 78, 83, 117, 126, 127, 153, 154, 158, 159, 161, 171, 173, 174, 176, 181, 317, 330, 438, 444, 447, 452, 454, 457, 460, 463, 465, 472, 479, 481, 484, 487, 490, 512, 513, 521, 522, 530, 531, 538, 541, 542, 549, 550, 600, 683, 684, 689, 690, 695, 696, 701, 702, 708, 709, 712, 713, 716, 717, 723, 724, 727, 728, 729, 733, 734, 739, 740, 745, 750, 751, 769, 772, 777, 782, 787, 793, 798, 804, 808, 814, 820, 821, 822, 851, 852, 853, 854, 855, 856, 959, 1004, 1039, 1041, 1046, 1052, 1078, 1217, 1226, 1242, 1277, 1300, 1303, 1309, 1310, 1313, 1315], "caus": [7, 8, 117, 126, 171, 173, 174, 176, 181, 512, 521, 530, 538, 541, 549, 683, 684, 689, 690, 695, 696, 701, 702, 708, 709, 712, 713, 716, 717, 723, 724, 727, 728, 729, 733, 734, 739, 740, 745, 750, 751, 769, 772, 777, 782, 787, 793, 798, 804, 808, 814, 1300], "n_point": [7, 8, 13, 18, 63, 67, 70, 71, 81, 127, 133, 139, 147, 171, 173, 174, 176, 177, 178, 180, 181, 446, 455, 467, 474, 482, 513, 522, 531, 542, 550, 551, 555, 559, 563, 566, 574, 683, 684, 689, 690, 695, 696, 701, 702, 708, 709, 712, 713, 716, 717, 719, 723, 724, 727, 728, 729, 733, 734, 735, 739, 740, 741, 745, 746, 750, 751, 752, 769, 772, 777, 778, 782, 783, 787, 789, 792, 793, 797, 798, 803, 804, 807, 808, 813, 814, 914, 915, 924, 925, 931, 932, 934, 938, 939, 946, 947, 954, 955, 1004, 1006, 1054, 1177, 1187, 1197, 1207, 1258, 1311], "wmodel": 8, "wdelta": [8, 181, 712, 713, 716, 724, 729, 777, 793, 798, 804, 808, 814], "ob": [8, 176, 177, 717, 719], "fly": [8, 176, 177, 178, 717, 719, 735, 741, 746, 752, 778, 783, 789], "pvar": 11, "treat": [11, 12, 848], "centr": [16, 147, 426, 565, 566, 574, 593, 691, 692, 698, 699, 725, 727, 730, 733, 736, 739, 747, 750, 926, 927, 940, 941, 1277, 1278, 1289, 1294, 1296, 1300, 1303, 1305, 1306, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "rotor_wd": [16, 1305, 1306, 1307, 1309, 1310, 1313, 1314], "auto": [16, 1304, 1305, 1306, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "basic_ctrl": [16, 1306], "1000": [16, 53, 54, 372, 587, 588, 843, 1285, 1304, 1305, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "dbook": [16, 53, 54, 440, 1303], "modelbook": [16, 53, 54, 493, 505, 506, 507, 508, 509, 873, 875, 876, 1287, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "book": [16, 53, 54, 158, 159, 188, 440, 493, 714, 715, 726, 731, 737, 743, 748, 775, 780, 785, 873, 875, 876, 877, 878, 879, 1299, 1301, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314], "windfarm": [16, 53, 54, 182, 183, 184, 185, 186, 438, 439, 440, 441, 442, 443, 493, 820, 821, 956, 979, 991, 1000, 1020, 1287, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "wind": [16, 47, 48, 53, 54, 88, 91, 153, 158, 159, 182, 183, 184, 185, 315, 383, 384, 394, 395, 396, 400, 401, 419, 420, 421, 427, 429, 438, 439, 440, 441, 442, 443, 452, 465, 466, 472, 473, 493, 494, 587, 588, 620, 621, 636, 638, 642, 643, 648, 649, 654, 655, 660, 663, 666, 669, 672, 679, 686, 687, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 801, 820, 821, 823, 824, 837, 851, 852, 853, 854, 855, 856, 864, 866, 868, 869, 873, 877, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 905, 908, 956, 977, 979, 986, 991, 997, 1000, 1004, 1020, 1046, 1059, 1068, 1070, 1076, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1279, 1280, 1281, 1282, 1283, 1285, 1287, 1288, 1289, 1290, 1291, 1294, 1295, 1296, 1299, 1300, 1301, 1304, 1305, 1306, 1308, 1309, 1311, 1312, 1313, 1315], "Will": 16, "look": [16, 714, 715, 726, 731, 737, 743, 748, 775, 780, 785, 843, 1303, 1305, 1308, 1310, 1314], "up": [16, 714, 715, 726, 731, 737, 743, 748, 775, 780, 785, 843], "choic": [16, 53, 54, 158, 165, 393, 416, 811, 812, 822, 845, 846, 847, 1080, 1259, 1260, 1296, 1308, 1311, 1312, 1313, 1314, 1315], "dask": [16, 17, 18, 53, 54, 75, 1259, 1260, 1294, 1300, 1301, 1313], "e": [16, 53, 54, 75, 117, 122, 492, 553, 554, 587, 588, 624, 627, 860, 892, 1004, 1034, 1035, 1046, 1078, 1134, 1172, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1258, 1276, 1287, 1289, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1315], "g": [16, 53, 54, 117, 122, 587, 588, 860, 892, 1134, 1172, 1258, 1276, 1287, 1289, 1300, 1301, 1304, 1307, 1311, 1315], "databook": [16, 53, 54, 187, 188, 440, 878, 879, 880, 881, 882, 883, 884, 885, 1287, 1294], "do": [16, 53, 54, 117, 1134, 1172, 1289, 1305, 1307, 1312, 1313, 1314], "them": [16, 53, 54, 907, 1134, 1172, 1304, 1314], "mean": [16, 18, 53, 54, 92, 106, 140, 179, 192, 280, 317, 822, 829, 834, 837, 838, 841, 845, 846, 847, 854, 866, 868, 869, 1059, 1060, 1068, 1069, 1077, 1134, 1148, 1149, 1172, 1290, 1292, 1300, 1305, 1307, 1313, 1314], "chunked_result": [17, 18], "bool": [17, 18, 19, 28, 40, 45, 49, 57, 74, 88, 90, 97, 98, 116, 117, 119, 146, 148, 160, 161, 163, 181, 192, 275, 317, 365, 438, 441, 444, 445, 492, 561, 562, 567, 571, 572, 580, 584, 589, 595, 601, 605, 607, 611, 612, 613, 617, 622, 625, 628, 633, 640, 644, 650, 656, 712, 713, 716, 723, 724, 727, 729, 730, 731, 733, 739, 745, 750, 772, 777, 782, 787, 793, 798, 804, 808, 814, 820, 821, 822, 831, 837, 843, 844, 851, 852, 853, 854, 855, 856, 863, 884, 910, 914, 920, 924, 928, 931, 935, 938, 942, 946, 950, 954, 956, 957, 967, 975, 976, 985, 996, 1010, 1013, 1018, 1023, 1059, 1060, 1065, 1067, 1069, 1070, 1071, 1074, 1077, 1080, 1140, 1146, 1152, 1158, 1164, 1168, 1171, 1173, 1174, 1177, 1187, 1197, 1207, 1258, 1259, 1260, 1272, 1276], "switch": [17, 18, 146, 851, 852, 853, 854, 855, 856, 1059, 1060, 1069, 1077, 1300, 1310], "forc": [17, 18, 284, 620, 1289, 1302], "instead": [17, 18, 74, 116, 438, 444, 445, 452, 454, 479, 481, 730, 731, 742, 863, 1004, 1013, 1046, 1078, 1134, 1172, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1300, 1302, 1307, 1312, 1314, 1315], "dataset": [17, 18, 28, 40, 45, 49, 59, 63, 75, 77, 101, 135, 444, 445, 820, 821, 829, 830, 849, 850, 862, 865, 870, 871, 874, 1286, 1300, 1305, 1311], "have": [17, 18, 28, 148, 567, 578, 579, 1134, 1172, 1278, 1289, 1300, 1305, 1307, 1308, 1309, 1310, 1311, 1314], "dimens": [17, 18, 28, 63, 67, 68, 69, 70, 77, 116, 117, 122, 148, 192, 283, 298, 303, 317, 378, 380, 567, 829, 845, 846, 847, 1281, 1285, 1289, 1303, 1305, 1311, 1315], "point_model": [18, 78, 79, 505, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 1306], "persist_mdata": 18, "persist_pdata": 18, "3": [18, 63, 70, 146, 147, 149, 173, 174, 176, 275, 551, 558, 566, 568, 574, 683, 684, 689, 690, 695, 696, 701, 702, 708, 709, 717, 823, 873, 907, 1004, 1006, 1134, 1172, 1289, 1294, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "addit": [18, 62, 77, 101, 135, 171, 438, 439, 472, 473, 493, 528, 537, 579, 583, 636, 638, 643, 649, 655, 784, 785, 863, 872, 877, 957, 978, 980, 987, 998, 1004, 1006, 1047, 1060, 1068, 1069, 1071, 1076, 1077, 1083, 1220, 1227, 1231, 1248, 1251, 1257, 1258, 1275, 1300, 1310, 1313, 1314], "persist_fdata": 18, "point_result": [18, 1311], "clear": [19, 57, 1308], "max_it": [22, 27], "maxim": [22, 27, 413, 571, 572, 587, 691, 692, 698, 699, 705, 726, 731, 737, 742, 743, 748, 753, 768, 775, 779, 780, 784, 785, 877, 909, 912, 916, 918, 922, 926, 929, 933, 936, 940, 944, 948, 952, 997, 1004, 1027, 1028, 1029, 1030, 1046, 1059, 1060, 1065, 1068, 1069, 1070, 1074, 1076, 1077, 1078, 1084, 1085, 1102, 1103, 1135, 1140, 1142, 1146, 1148, 1152, 1154, 1158, 1160, 1164, 1166, 1168, 1169, 1171, 1173, 1180, 1183, 1190, 1193, 1194, 1200, 1203, 1204, 1211, 1212, 1217, 1221, 1226, 1227, 1232, 1233, 1242, 1252, 1289, 1290, 1292, 1296, 1300, 1305, 1309], "conv_crit": [22, 27], "convcrit": [22, 27, 38, 39, 40, 41, 42, 43, 44, 47, 1284], "converg": [22, 27, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 51, 1284, 1300, 1312], "criteria": [22, 27, 38, 39, 40, 42, 43, 45, 47, 48, 49, 51, 1284], "tupl": [27, 62, 64, 67, 68, 69, 70, 76, 77, 101, 116, 135, 192, 298, 303, 317, 439, 440, 492, 504, 510, 511, 723, 745, 782, 787, 822, 844, 848, 851, 852, 853, 854, 855, 856, 872, 877, 1079, 1265, 1267, 1273, 1276], "argument": [27, 28, 64, 77, 101, 135, 493, 504, 579, 818, 822, 829, 848, 872, 877, 1079, 1134, 1172, 1177, 1187, 1197, 1207, 1259, 1260, 1265, 1267, 1273, 1276, 1300, 1303, 1309, 1313, 1314], "keyword": [27, 64, 1079, 1265, 1267, 1273, 1276], "calcord": [30, 31, 32, 33, 1284], "setambfarmresult": [34, 35, 36, 37, 1284], "abstract": [38, 40, 41, 53, 75, 76, 97, 99, 100, 110, 124, 126, 127, 131, 132, 133, 134, 144, 147, 150, 152, 153, 156, 157, 162, 163, 164, 166, 167, 168, 170, 172, 174, 175, 176, 178, 179, 180, 181, 711, 712, 714, 716, 722, 723, 725, 727, 728, 909, 912, 913, 914, 915, 916, 986, 992, 997, 1004, 1046, 1048, 1049, 1118, 1169, 1171, 1268, 1273, 1283, 1284, 1286, 1290, 1294, 1297, 1300], "check_converg": [38, 40, 42, 45, 47, 49, 51], "prev_result": [38, 40, 42, 45, 47, 49, 51], "check": [38, 40, 42, 45, 47, 49, 51, 753, 756, 772, 884, 956, 977, 979, 986, 1004, 1014, 1015, 1046, 1070, 1071, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1120, 1121, 1123, 1129, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1277, 1300, 1305, 1312, 1313], "get_delta": [38, 41, 42, 46, 47, 50, 51], "most": [38, 41, 42, 46, 47, 50, 51, 1315], "recent": [38, 41, 42, 46, 47, 50, 51], "previou": [40, 45, 49, 117, 179, 181, 790, 793, 795, 798, 801, 804, 805, 808, 811, 814, 1312], "first": [40, 45, 49, 67, 74, 78, 117, 190, 654, 686, 1289, 1302, 1305, 1307, 1313, 1314, 1315], "convcritlist": [42, 43, 44, 45, 46, 1284], "A": [42, 63, 102, 105, 110, 136, 139, 187, 188, 192, 203, 271, 317, 322, 465, 472, 502, 639, 672, 675, 779, 780, 784, 785, 811, 817, 843, 878, 879, 1134, 1172, 1173, 1183, 1193, 1203, 1284, 1286, 1287, 1288, 1289, 1292, 1294, 1303, 1304, 1306], "crit": [42, 43, 44], "add_crit": [42, 44], "criterion": [42, 44], "convvardelta": [47, 48, 49, 50, 51, 1284], "limit": [47, 48, 64, 705, 726, 731, 737, 742, 743, 748, 753, 768, 775, 779, 780, 784, 785, 790, 791, 801, 802, 1300], "float": [47, 48, 158, 159, 164, 165, 171, 192, 206, 252, 275, 317, 325, 452, 454, 465, 466, 472, 473, 587, 588, 631, 636, 638, 642, 643, 648, 649, 655, 675, 676, 691, 692, 698, 699, 704, 705, 726, 730, 731, 736, 737, 742, 743, 747, 748, 753, 768, 774, 775, 779, 780, 784, 785, 790, 791, 801, 802, 820, 821, 822, 831, 833, 836, 837, 843, 851, 852, 853, 854, 855, 856, 866, 868, 869, 877, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 926, 927, 956, 957, 959, 960, 961, 964, 965, 969, 971, 973, 975, 977, 979, 980, 981, 982, 985, 986, 989, 990, 996, 997, 1004, 1011, 1012, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1028, 1032, 1037, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1059, 1060, 1061, 1062, 1063, 1067, 1068, 1069, 1070, 1072, 1073, 1076, 1077, 1078, 1080, 1081, 1084, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1108, 1109, 1110, 1113, 1115, 1116, 1118, 1123, 1124, 1125, 1126, 1129, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1142, 1144, 1145, 1148, 1149, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1172, 1173, 1174, 1175, 1176, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1193, 1194, 1195, 1196, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1211, 1213, 1215, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1232, 1234, 1236, 1237, 1238, 1239, 1240, 1242, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1277, 1280, 1281, 1285, 1303, 1305], "wd_var": [47, 48, 864, 866, 868, 869, 873], "direct": [47, 48, 153, 400, 427, 465, 466, 472, 473, 571, 572, 686, 687, 851, 852, 853, 854, 855, 856, 866, 868, 869, 908, 940, 941, 1279, 1280, 1281, 1282, 1284, 1287, 1289, 1294, 1296, 1300, 1303, 1304, 1307, 1308, 1310, 1311, 1313, 1314, 1315], "unit": [47, 48, 164, 165, 316, 368, 372, 385, 388, 390, 393, 416, 587, 588, 730, 731, 836, 843, 979, 980, 1134, 1172, 1285, 1296, 1303], "deg": [47, 48, 1303], "defaultconv": [51, 52, 1284, 1312], "collect": [53, 203, 322, 811, 844, 851, 852, 853, 854, 855, 856, 1134, 1172, 1289, 1308, 1311], "meant": 53, "top": [53, 539, 725, 1283, 1287, 1289, 1297, 1315], "code": [53, 284, 753, 1297, 1300, 1301, 1302], "take": [59, 125, 192, 306, 317, 854, 855, 856], "deriv": [62, 130, 169, 858, 906, 956, 959, 977, 979, 986, 997, 1013, 1023, 1059, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1294], "array_lik": [63, 67, 68, 77, 83, 154, 158, 159, 442, 447, 457, 466, 484, 492, 1134, 1172], "indic": [63, 83, 146, 148, 154, 442, 443, 447, 457, 484, 567, 822, 863, 1013, 1040], "els": [65, 148, 192, 202, 317, 321, 567, 866, 868, 869], "model_book": [67, 502, 503, 504, 505, 506, 507, 508, 509, 1286, 1287, 1294], "meta": [67, 1286], "us": [67, 77, 102, 136, 179, 317, 330, 438, 510, 527, 558, 587, 679, 705, 711, 714, 730, 731, 742, 753, 768, 775, 822, 829, 844, 863, 956, 957, 959, 1004, 1028, 1029, 1032, 1033, 1042, 1043, 1046, 1050, 1051, 1078, 1084, 1085, 1086, 1087, 1134, 1172, 1180, 1181, 1200, 1201, 1211, 1212, 1213, 1214, 1217, 1221, 1222, 1226, 1232, 1233, 1234, 1235, 1238, 1239, 1242, 1252, 1253, 1288, 1289, 1290, 1300, 1302, 1305, 1306, 1307, 1308, 1309, 1311, 1312, 1313, 1314, 1315], "usual": [67, 1308], "dim": [67, 68, 69, 70, 116, 117, 192, 197, 317], "same": [67, 68, 70, 167, 661, 664, 667, 670, 673, 677, 836, 908, 1080, 1134, 1172, 1278, 1300, 1313, 1315], "loop_dim": [67, 68, 75, 77], "loop": [67, 68, 77, 907, 1300, 1312], "size": [67, 78, 86, 148, 153, 156, 171, 192, 242, 299, 317, 444, 450, 452, 461, 463, 465, 470, 472, 477, 479, 488, 490, 567, 691, 692, 784, 785, 822, 827, 877, 1052, 1053, 1057, 1304, 1305, 1313], "states_i0": [67, 74], "counter": [67, 74, 1004, 1017, 1046, 1078, 1217, 1226, 1242], "from_point": [67, 70], "__getitem__": [67, 192, 210, 317, 502, 503, 505, 506], "x": [67, 147, 170, 171, 173, 389, 426, 430, 438, 442, 444, 445, 502, 503, 518, 566, 571, 574, 611, 612, 679, 683, 686, 689, 691, 695, 698, 701, 704, 708, 711, 712, 713, 714, 716, 722, 723, 724, 725, 727, 728, 729, 730, 733, 734, 736, 739, 740, 742, 745, 747, 750, 751, 753, 769, 772, 777, 779, 782, 784, 787, 822, 823, 851, 852, 853, 854, 855, 856, 877, 907, 909, 910, 912, 913, 916, 918, 920, 922, 923, 926, 928, 929, 930, 933, 935, 936, 937, 940, 942, 944, 945, 948, 950, 952, 953, 1134, 1172, 1281, 1282, 1289, 1296, 1297, 1301, 1303, 1304, 1305, 1307, 1311, 1312, 1313, 1314, 1315], "y": [67, 147, 389, 426, 431, 438, 442, 444, 445, 502, 503, 566, 574, 611, 612, 822, 823, 851, 852, 853, 854, 855, 856, 877, 909, 910, 912, 913, 916, 918, 920, 922, 923, 926, 928, 929, 930, 933, 935, 936, 937, 940, 942, 944, 945, 948, 950, 952, 953, 1134, 1172, 1281, 1282, 1296, 1303, 1304, 1305, 1311, 1313], "np": [69, 70, 117, 203, 252, 275, 322, 363, 365, 843, 848, 907, 959, 960, 961, 964, 965, 981, 982, 989, 990, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1021, 1022, 1023, 1042, 1043, 1050, 1051, 1061, 1062, 1063, 1065, 1072, 1073, 1074, 1094, 1095, 1099, 1100, 1104, 1105, 1109, 1110, 1115, 1116, 1120, 1121, 1122, 1125, 1126, 1131, 1132, 1134, 1137, 1138, 1140, 1144, 1145, 1146, 1150, 1151, 1152, 1156, 1157, 1158, 1162, 1163, 1164, 1168, 1171, 1172, 1175, 1176, 1185, 1186, 1195, 1196, 1205, 1206, 1218, 1228, 1238, 1239, 1249, 1258, 1304, 1305, 1309, 1311, 1312, 1315], "correspond": [74, 126, 192, 193, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 268, 269, 272, 273, 276, 277, 279, 280, 281, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 436, 437, 512, 521, 530, 538, 541, 549, 587, 1279, 1282, 1296, 1302, 1306, 1307, 1310], "datacalcmodel": [75, 76, 77, 97, 132, 1286, 1300], "thei": [75, 146, 158, 159, 170, 178, 735, 741, 746, 752, 778, 783, 789, 1289, 1297, 1300, 1303, 1304, 1305, 1306, 1308, 1313], "depend": [75, 148, 393, 416, 510, 518, 553, 554, 567, 643, 649, 654, 655, 711, 714, 722, 723, 725, 728, 730, 734, 736, 740, 742, 745, 747, 751, 779, 782, 784, 787, 956, 975, 976, 977, 979, 985, 986, 996, 997, 1059, 1060, 1067, 1068, 1069, 1070, 1076, 1077, 1080, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1289, 1296, 1297, 1300, 1302, 1304, 1307, 1308, 1313, 1315], "individu": [75, 158, 164, 654, 956, 960, 961, 977, 979, 981, 982, 986, 989, 990, 997, 1004, 1014, 1018, 1019, 1046, 1059, 1061, 1062, 1068, 1070, 1072, 1073, 1076, 1078, 1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1120, 1123, 1125, 1126, 1129, 1131, 1132, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1287, 1289, 1305, 1308], "out_core_var": 77, "initial_result": 77, "typic": [77, 101, 135, 153, 1023], "fc": [77, 117, 1070, 1071, 1304, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "extendedst": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 1286, 1300], "extend": [78, 1286, 1298, 1301], "pmodel": 78, "append": [78, 80, 102, 104, 136, 138], "total": [78, 86, 153, 156, 179, 185, 444, 450, 452, 461, 463, 465, 470, 472, 477, 479, 488, 490, 829, 837, 1004, 1034, 1035, 1046, 1052, 1057, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1300, 1305], "weight": [78, 87, 144, 146, 148, 152, 153, 157, 375, 428, 444, 445, 451, 452, 462, 463, 465, 471, 472, 478, 479, 489, 490, 492, 518, 539, 565, 567, 570, 571, 572, 577, 829, 848, 854, 855, 856, 1052, 1058, 1134, 1149, 1172, 1285, 1289, 1296, 1303, 1305, 1310, 1311, 1314], "statist": [78, 87, 153, 157, 428, 444, 451, 452, 462, 463, 465, 471, 472, 478, 479, 489, 490, 1052, 1058, 1296, 1303, 1314], "label": [83, 154, 158, 159, 447, 457, 484, 851, 852, 853, 854, 855, 856, 877, 1303, 1310, 1313], "integ": [83, 154, 192, 252, 270, 317, 330, 447, 457, 484, 956, 959, 960, 961, 964, 965, 972, 974, 977, 979, 981, 982, 986, 989, 990, 997, 1004, 1011, 1012, 1013, 1018, 1019, 1021, 1022, 1023, 1025, 1029, 1033, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1059, 1061, 1062, 1063, 1068, 1070, 1072, 1073, 1076, 1078, 1085, 1087, 1088, 1089, 1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1123, 1125, 1126, 1129, 1131, 1132, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1173, 1175, 1176, 1185, 1186, 1193, 1195, 1196, 1203, 1205, 1206, 1212, 1214, 1217, 1218, 1223, 1224, 1226, 1228, 1233, 1235, 1236, 1237, 1238, 1239, 1242, 1249, 1254, 1255], "analys": [88, 1286], "handl": [88, 1286, 1300], "turbine_typ": [88, 505, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 875, 877, 1303, 1306, 1310, 1311, 1313], "turbinetyp": [88, 164, 165, 505, 639, 642, 643, 648, 649, 654, 655, 1286, 1289], "turbine_model_nam": 88, "found": [88, 116, 884, 1288, 1290, 1306, 1311, 1313], "turbine_model_sel": 88, "n_model": 88, "pre_rotor_model": 88, "farmdatamodellist": [88, 102, 103, 104, 105, 106, 107, 108, 109, 1286], "pre": [88, 90, 1302, 1309, 1312], "post_rotor_model": 88, "without": [88, 494, 848, 1289, 1305, 1309, 1311], "par": [88, 89, 494, 753, 761, 773], "respecitv": 88, "set_par": [88, 96, 494], "model_nam": [88, 96, 494], "init_par": [88, 96, 494], "final_par": [88, 96, 494], "collect_model": [88, 91, 494], "analyz": [88, 91, 494], "gather": [88, 91, 494], "st_sel": [88, 90, 162, 163, 164, 494, 578, 579, 580, 582, 584, 587, 589, 593, 595, 599, 601, 604, 607, 611, 613, 615, 617, 620, 622, 624, 625, 627, 628, 630, 633, 635, 637, 639, 640, 642, 644, 648, 650, 654, 656], "respect": [89, 442, 1134, 1172, 1303, 1313, 1314, 1315], "post": [90, 1301, 1308], "befor": [97, 98, 177, 438, 605, 719, 851, 852, 854, 855, 856, 1042, 1043, 1050, 1051, 1070, 1071, 1080, 1238, 1239, 1305], "By": [102, 136, 1023, 1315], "togeth": [102, 136, 1315], "common": [102, 136, 704, 753, 769, 774, 1134, 1172, 1297], "farmmodel": [110, 495, 505, 1286, 1289], "oper": [110, 180, 792, 797, 803, 807, 813, 829, 845, 846, 847, 1286, 1309], "contrast": [110, 907, 1286], "turbinemodel": [110, 160, 161, 162, 163, 164, 495, 496, 505, 578, 579, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 1286, 1289], "allow": [110, 492, 1286, 1300, 1305, 1312], "applic": [110, 960, 961, 964, 965, 981, 982, 989, 990, 1004, 1011, 1012, 1017, 1021, 1022, 1046, 1061, 1062, 1063, 1072, 1073, 1078, 1094, 1095, 1099, 1100, 1104, 1105, 1109, 1110, 1115, 1116, 1125, 1126, 1131, 1132, 1137, 1138, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163, 1175, 1176, 1185, 1186, 1195, 1196, 1205, 1206, 1217, 1218, 1226, 1228, 1242, 1249, 1286, 1301, 1305], "util": [114, 116, 182, 187, 505, 849, 850, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 1173, 1174, 1183, 1184, 1193, 1194, 1203, 1204, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1287, 1300, 1305, 1312, 1313, 1314], "error": [116, 117, 187, 444, 445, 736, 878, 884, 1313], "upcast": 117, "accept_non": 117, "serv": [117, 1303], "identifi": [117, 191, 315, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 1283, 1285, 1300, 1312], "state_turbin": [117, 380, 1285], "state_point": [117, 378, 1285], "combin": [117, 811, 812, 1315], "m": [117, 394, 395, 396, 401, 407, 409, 414, 419, 420, 421, 429, 430, 435, 445, 452, 654, 691, 692, 851, 852, 853, 854, 855, 856, 979, 980, 1134, 1172, 1296, 1302, 1303, 1304, 1307, 1311, 1312, 1313, 1314], "f": [117, 578, 579, 907, 1134, 1172, 1307, 1309, 1313, 1314, 1315], "p": [117, 405, 408, 416, 436, 437, 587, 642, 643, 649, 655, 860, 877, 886, 888, 1134, 1172, 1296, 1300, 1301, 1303, 1304, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "scalar": [117, 192, 193, 197, 201, 208, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 268, 269, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 553, 554, 1134, 1172], "data_prio": 117, "search": [117, 444, 445, 452, 454, 505, 509, 631, 704, 705, 730, 731, 742, 743, 747, 748, 774, 775, 906, 1294, 1300, 1306, 1307, 1311, 1313], "throw": 117, "an": [117, 158, 317, 330, 571, 572, 679, 736, 815, 851, 852, 853, 854, 855, 856, 907, 1004, 1008, 1046, 1078, 1134, 1172, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1287, 1288, 1293, 1304, 1310, 1313, 1315], "nan": [117, 192, 252, 492, 848, 907, 959, 1300, 1309], "been": [119, 967, 1284, 1300, 1301], "mobj": 122, "reduc": [122, 571, 572, 829, 845, 846, 847, 1300], "quantiti": [124, 144, 1308], "new_wake_delta": [124, 126, 127, 131, 510, 512, 513, 517, 518, 521, 522, 526, 527, 530, 531, 535, 536, 538, 539, 541, 542, 546, 547, 549, 550, 552], "fill": [124, 127, 131, 187, 192, 269, 317, 444, 445, 510, 513, 517, 518, 522, 526, 527, 531, 535, 536, 539, 542, 546, 547, 550, 552, 910, 920, 928, 935, 942, 950, 1287], "zero": [124, 131, 411, 510, 517, 518, 526, 527, 535, 536, 539, 546, 547, 552, 631, 712, 713, 716, 723, 724, 727, 729, 733, 739, 745, 750, 777, 782, 787, 1134, 1172, 1259, 1264, 1296, 1311], "specifi": [124, 126, 192, 197, 317, 510, 512, 518, 521, 527, 530, 536, 538, 539, 541, 547, 549, 600, 1289, 1300, 1305, 1313], "evaluate_result": [124, 127, 510, 513, 518, 522, 527, 531, 536, 539, 542, 547, 550], "pwake_typ": [124, 130, 510, 518, 527, 536, 539, 547], "wake_delta": [126, 127, 131, 175, 176, 177, 178, 180, 181, 510, 512, 513, 517, 518, 521, 522, 526, 527, 530, 531, 535, 536, 538, 539, 541, 542, 546, 547, 549, 550, 552, 711, 714, 717, 719, 722, 725, 730, 735, 736, 741, 742, 746, 747, 752, 774, 778, 779, 783, 784, 789, 792, 793, 797, 798, 803, 804, 807, 808, 813, 814], "ani": [126, 127, 131, 192, 203, 248, 284, 317, 322, 512, 513, 517, 521, 522, 526, 530, 531, 535, 538, 541, 542, 546, 549, 550, 552, 639, 818, 908, 960, 961, 964, 965, 981, 982, 989, 990, 1011, 1012, 1021, 1022, 1061, 1062, 1063, 1072, 1073, 1094, 1095, 1099, 1100, 1104, 1105, 1109, 1110, 1115, 1116, 1125, 1126, 1131, 1132, 1137, 1138, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163, 1175, 1176, 1185, 1186, 1195, 1196, 1205, 1206, 1218, 1228, 1249, 1265, 1267, 1273, 1279, 1280, 1281, 1282, 1289, 1302, 1304, 1308, 1312, 1313, 1315], "states_turbin": [127, 146, 148, 513, 522, 531, 542, 550, 567], "amb_r": [127, 513, 522, 531, 542, 550], "place": [127, 513, 522, 531, 542, 550, 851, 852, 853, 1080, 1226, 1242, 1291, 1304, 1305, 1309], "calc_var": [144, 145, 565, 571, 572, 593, 594], "Their": [144, 145, 572], "ad": [144, 145, 178, 179, 180, 572, 583, 735, 741, 746, 752, 778, 783, 789, 790, 792, 795, 797, 801, 803, 805, 807, 811, 813, 829, 848, 1023, 1080, 1288, 1300, 1302, 1305, 1306, 1310, 1311, 1313, 1314, 1315], "automat": [144, 145, 146, 572, 822, 843, 851, 852, 853, 854, 855, 856, 1134, 1172, 1300, 1313], "n_rotor_point": [144, 150, 565, 569, 571, 576], "rotor_point_weight": [144, 152, 565, 570, 571, 577], "design_point": [144, 147, 565, 566, 571, 574], "design": [144, 147, 149, 565, 566, 568, 571, 574], "get_rotor_point": [144, 149, 565, 568, 571], "eval_rpoint_result": [144, 148, 565, 567, 571], "rpoint_result": [144, 148, 565, 567, 571], "rpoint": [144, 146, 373, 374, 551, 565, 571, 1285], "store_rpoint": 146, "store_rweight": 146, "store_amb_r": 146, "n_rpoint": [146, 148, 149, 150, 152, 567, 568, 569, 570, 576, 577], "reult": 146, "come": [146, 1303, 1310, 1313], "per": [146, 148, 379, 452, 567, 571, 572, 711, 829, 838, 840, 841, 842, 843, 846, 847, 1226, 1260, 1285, 1288, 1310], "formul": [147, 566, 574, 1310], "plane": [147, 566, 574, 849, 851, 852, 853, 854, 855, 856, 940, 1294], "z": [147, 566, 574, 851, 852, 853, 854, 855, 856], "coordin": [147, 170, 171, 173, 174, 176, 426, 430, 431, 444, 445, 566, 574, 679, 683, 684, 686, 689, 690, 691, 695, 696, 698, 701, 702, 704, 708, 709, 717, 820, 821, 851, 852, 853, 854, 855, 856, 1059, 1134, 1172, 1177, 1187, 1197, 1207, 1258, 1296, 1303, 1304, 1305, 1308, 1311], "radiu": [147, 566, 574, 725, 728, 730, 734, 736, 740, 742, 747, 751, 926, 927, 956, 957, 1277, 1278], "n_rotor_axi": [147, 566, 574], "n_rotor_sid": [147, 566, 574], "n_rotor_up": [147, 566, 574], "dpoint": [147, 566, 574], "copy_to_ambi": [148, 567], "either": [148, 452, 454, 479, 481, 553, 554, 567, 615, 616, 878, 979, 980, 1080, 1294, 1296, 1310, 1312], "In": [148, 567, 742, 907, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "latter": [148, 518, 567, 1258, 1300, 1305, 1309, 1310, 1313, 1315], "case": [148, 444, 445, 493, 567, 843, 866, 868, 869, 872, 877, 884, 1288, 1300, 1305, 1309, 1310, 1311, 1312, 1313, 1315], "expect": [148, 189, 190, 567, 600, 615, 1304, 1307], "If": [148, 567, 631, 704, 705, 730, 731, 742, 743, 747, 748, 774, 775, 791, 796, 806, 863, 866, 868, 869, 907, 1047, 1134, 1172, 1258, 1309, 1313], "describ": [153, 1288, 1303, 1304, 1311], "meteorolog": [153, 1308], "speed": [153, 394, 395, 396, 401, 419, 420, 421, 429, 452, 465, 466, 472, 473, 587, 588, 620, 621, 636, 638, 642, 643, 648, 649, 654, 655, 660, 663, 666, 669, 801, 877, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 905, 1280, 1281, 1288, 1289, 1295, 1296, 1303, 1304, 1305, 1307, 1308, 1310, 1311, 1313, 1314, 1315], "turbul": [153, 399, 425, 779, 780, 1296, 1297, 1300, 1304, 1307, 1308, 1313, 1314, 1315], "intens": [153, 399, 425, 1296, 1297, 1300, 1304, 1308, 1313, 1314, 1315], "air": [153, 397, 422, 465, 466, 472, 473, 636, 638, 642, 643, 648, 649, 654, 877, 1289, 1296, 1300, 1304, 1307], "densiti": [153, 397, 422, 465, 466, 472, 473, 636, 638, 654, 877, 1107, 1108, 1135, 1289, 1292, 1296, 1300, 1304, 1307], "mere": 158, "defin": [158, 679, 1134, 1172, 1173, 1183, 1289, 1292, 1296, 1305, 1308, 1309, 1310, 1312, 1315], "basic": [158, 189, 190, 494, 518, 611, 1287, 1289, 1305, 1307], "xy": [158, 159, 849, 851, 854, 1173, 1177, 1183, 1187, 1193, 1197, 1203, 1207, 1300, 1304, 1312, 1315], "ground": [158, 159, 409, 1296], "posit": [158, 159, 161, 192, 252, 956, 977, 1217, 1290, 1291, 1300, 1309], "2": [158, 159, 275, 365, 442, 443, 492, 510, 511, 558, 712, 713, 716, 724, 728, 729, 734, 740, 742, 751, 777, 779, 784, 822, 907, 912, 913, 914, 915, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 934, 936, 937, 938, 939, 940, 941, 944, 945, 946, 947, 952, 953, 954, 955, 1134, 1172, 1177, 1187, 1197, 1207, 1258, 1277, 1278, 1289, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "appear": [158, 159, 736, 1305, 1307, 1309, 1313, 1315], "mstates_sel": 158, "boolean": [158, 159, 578, 579, 1014, 1015, 1030, 1120, 1121, 1134, 1172, 1177, 1187, 1197, 1207], "diamet": [158, 159, 164, 165, 407, 438, 611, 612, 730, 820, 821, 822, 1093, 1173, 1174, 1177, 1183, 1184, 1187, 1193, 1194, 1197, 1203, 1204, 1207, 1289, 1296, 1300, 1305, 1308], "overwrit": [158, 159], "h": [158, 159, 164, 165, 189, 190, 409, 445, 639, 823, 1296, 1303, 1304, 1307, 1311], "hub": [158, 159, 164, 165, 438, 1289, 1300, 1307, 1308, 1311], "height": [158, 159, 164, 165, 166, 167, 389, 409, 426, 438, 444, 445, 452, 454, 463, 611, 612, 660, 661, 663, 664, 666, 667, 669, 670, 672, 673, 675, 677, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 1288, 1289, 1295, 1296, 1299, 1300, 1301, 1303, 1304, 1308, 1311], "turbine_model": [158, 159, 438, 495, 496, 505, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "add_model": [158, 160], "states_sel": [158, 160, 161, 377, 452, 454, 460, 463, 479, 481, 487, 490, 1285], "insert_model": [158, 161], "insert": [158, 161, 1280, 1281], "models_state_sel": 159, "can": [164, 284, 527, 553, 714, 753, 1013, 1080, 1134, 1172, 1287, 1288, 1289, 1290, 1297, 1300, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "overwritten": 164, "p_nomin": [164, 165, 391, 405, 639, 843, 1296, 1300], "nomin": [164, 165, 831, 1309], "power": [164, 165, 372, 393, 413, 416, 507, 587, 588, 635, 637, 642, 643, 648, 649, 654, 655, 829, 831, 836, 837, 843, 875, 877, 1068, 1285, 1289, 1290, 1293, 1296, 1299, 1300, 1301, 1305, 1307, 1308, 1310, 1313, 1314, 1315], "kw": [164, 165, 372, 390, 587, 588, 639, 843, 1285], "p_unit": [164, 165, 372, 639, 1285, 1300], "w": [165, 372, 388, 429, 436, 437, 452, 472, 473, 558, 635, 636, 638, 642, 643, 648, 649, 654, 886, 888, 890, 893, 896, 897, 902, 1134, 1172, 1280, 1281, 1285, 1289, 1294, 1296, 1300, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "mw": [165, 189, 190, 368, 372, 1285, 1303, 1307, 1309, 1313, 1314], "gw": [165, 316, 372, 1285, 1301], "verticalprofil": [166, 167, 168, 169, 472, 473, 479, 481, 660, 663, 666, 669, 672, 675, 1286, 1289], "vertic": [166, 849, 852, 855, 856, 1286, 1289, 1293, 1300, 1307, 1315], "profil": [166, 167, 168, 169, 472, 473, 481, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 894, 898, 899, 903, 1286, 1289, 1295, 1300, 1303, 1307], "input_var": [166, 168, 582, 583, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 678, 794, 800, 810], "profile_typ": [166, 169, 660, 663, 666, 669, 672, 675], "translat": [170, 1046, 1048, 1049, 1078, 1088, 1089, 1217, 1223, 1224, 1226, 1236, 1237, 1242, 1254, 1255, 1308, 1315], "global": [170, 1303], "also": [170, 284, 822, 1300, 1301, 1303, 1305, 1308, 1309, 1310, 1313, 1315], "respons": [170, 1289, 1308, 1310], "calc_ord": [170, 172, 679, 681, 686, 688, 691, 694, 698, 700, 704, 706], "get_wake_coo": [170, 174, 679, 684, 686, 690, 691, 696, 698, 702, 704, 709], "get_centreline_point": [170, 173, 679, 683, 686, 689, 691, 695, 698, 701, 704, 708], "along": [170, 171, 173, 571, 572, 679, 683, 686, 689, 691, 695, 698, 701, 704, 708, 1289, 1300, 1308, 1311, 1315], "centrelin": [170, 171, 173, 679, 683, 686, 689, 691, 695, 698, 701, 704, 708, 784, 785, 1300, 1308], "calc_centreline_integr": [170, 171, 679, 686, 691, 698, 704], "integr": [170, 171, 192, 275, 317, 365, 571, 572, 679, 686, 691, 698, 704, 784, 785, 1297, 1300], "dx": [171, 784, 785, 1306], "ipar": [171, 454, 616, 784, 785], "upper": [171, 1122, 1312], "bound": [171, 444, 445, 956, 977, 979, 986, 1092, 1097, 1102, 1107, 1113, 1118, 1122, 1123, 1129], "step": [171, 192, 303, 317, 442, 443, 571, 572, 691, 692, 784, 785, 843, 877, 1300, 1303, 1304, 1306, 1307, 1308, 1312, 1314], "consid": [171, 1013, 1023, 1300, 1313], "interpol": [171, 454, 582, 583, 616, 635, 637, 642, 648, 654, 655, 691, 692, 698, 699, 1289, 1300], "n_var": [171, 1023], "wake_coo": [174, 176, 684, 690, 696, 702, 709, 717], "init_wake_delta": [175, 178, 711, 714, 722, 725, 730, 735, 736, 741, 742, 746, 747, 752, 774, 778, 779, 783, 784, 789], "storag": [175, 178, 691, 692, 711, 714, 722, 725, 730, 735, 736, 741, 742, 746, 747, 752, 774, 778, 779, 783, 784, 789], "finalize_wake_delta": [175, 177, 711, 714, 719, 722, 725, 730, 736, 742, 747, 774, 779, 784], "amb_result": [175, 177, 180, 711, 714, 719, 722, 725, 730, 736, 742, 747, 774, 779, 784, 792, 797, 803, 807, 813], "afterward": [177, 719], "wakesuperposit": [179, 180, 181, 505, 714, 790, 795, 801, 805, 811, 1286, 1289], "superposit": [179, 505, 711, 714, 715, 722, 725, 726, 730, 731, 736, 737, 742, 743, 747, 748, 774, 775, 779, 780, 784, 785, 801, 811, 1286, 1289, 1300, 1306, 1308, 1314], "note": [179, 860, 1226, 1289, 1303, 1304, 1305, 1307, 1310, 1311, 1314, 1315], "matter": [179, 1309], "other": [179, 465, 870, 1004, 1042, 1043, 1046, 1050, 1051, 1078, 1217, 1226, 1238, 1239, 1242, 1288, 1293, 1300, 1302, 1304, 1306, 1308, 1309, 1310, 1315], "calc_wakes_plus_wak": [179, 181, 790, 793, 795, 798, 801, 804, 805, 808, 811, 814], "calc_final_wake_delta": [179, 180, 790, 792, 795, 797, 801, 803, 805, 807, 811, 813], "final_wake_delta": [180, 792, 797, 803, 807, 813], "simpl": [180, 792, 797, 803, 807, 813, 1300, 1304, 1309, 1311, 1315], "plu": [180, 792, 797, 803, 807, 813, 1258, 1276], "sel_sp": [181, 793, 798, 804, 808, 814], "wake_model_result": [181, 793, 798, 804, 808, 814], "origin": [181, 192, 252, 793, 798, 804, 808, 814, 949, 1026, 1049, 1052, 1053, 1089, 1134, 1172, 1224, 1237, 1255, 1301, 1312], "n_sel_sp": [181, 793, 798, 804, 808, 814], "boundari": [182, 183, 822, 909, 910, 914, 916, 918, 920, 924, 926, 928, 931, 933, 935, 938, 940, 942, 946, 948, 950, 954, 956, 957, 977, 978, 1092, 1093, 1094, 1095, 1096, 1173, 1174, 1177, 1183, 1184, 1187, 1193, 1194, 1197, 1203, 1204, 1207, 1290, 1292, 1303, 1305], "geom2d": [182, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 1173, 1174, 1183, 1184, 1193, 1194, 1203, 1204, 1276, 1305], "areageometri": [182, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 926, 933, 940, 948, 949, 956, 957, 1173, 1174, 1183, 1184, 1193, 1194, 1203, 1204, 1276, 1294], "wind_farm": [182, 183], "add_turbin": [182, 184, 438, 1315], "turbine_nam": [182, 186, 861, 863], "staticdata": [187, 188, 1287, 1303], "static": [187, 636, 638, 642, 643, 648, 649, 654, 655, 878, 880, 881, 916, 917, 1287, 1294, 1300, 1301, 1304, 1305, 1307, 1310, 1311, 1313, 1314], "directori": [187, 1287], "add_data_packag": [187, 878, 880], "context": [187, 878, 880, 881, 882, 883, 884, 885, 1305], "packag": [187, 878, 880, 881, 1283, 1287, 1288, 1289, 1290, 1294, 1297, 1300, 1301, 1302, 1303, 1305, 1306, 1308, 1311, 1315], "file_sfx": [187, 878, 880], "locat": [187, 565, 844, 878, 880, 881, 1280, 1281, 1302, 1303, 1310, 1315], "add_data_package_fil": [187, 878, 881], "file_nam": [187, 189, 864, 869, 873, 878, 881, 884, 1287], "add_fil": [187, 878, 882, 883], "file_path": [187, 440, 441, 820, 825, 826, 827, 828, 829, 849, 857, 860, 861, 863, 864, 870, 873, 875, 878, 882, 883, 886, 891, 892, 1288], "path": [187, 189, 190, 440, 441, 452, 454, 479, 481, 493, 507, 599, 600, 615, 616, 636, 638, 642, 643, 648, 649, 654, 655, 860, 863, 869, 878, 882, 883, 884, 891, 892, 933, 1257, 1258, 1275, 1294, 1301, 1313], "get_file_path": [187, 878, 884, 1303], "check_raw": [187, 878, 884], "toc": [187, 878, 885, 1303], "content": [187, 505, 509, 878, 885, 1313], "data_book": [188, 878, 879], "parse_pct_file_nam": [189, 1287], "pars": [189, 190, 444, 445, 1004, 1039, 1046, 1078, 1217, 1226, 1242, 1287], "format": [189, 190, 444, 445, 452, 824, 860, 886, 892, 1288, 1303, 1304], "csv": [189, 190, 438, 439, 452, 820, 825, 861, 863, 886, 887, 889, 890, 1275, 1288, 1294, 1300, 1305, 1307, 1310, 1311, 1312, 1313, 1314], "pathlib": [189, 190, 878, 884, 1303], "parsed_data": [189, 190], "parse_pct_two_fil": [190, 1287], "file_name_a": [190, 1287], "file_name_b": [190, 1287], "second": [190, 395, 420, 1296], "constant": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 742, 893, 895, 897, 901, 902, 905, 1283, 1296, 1300, 1304, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "amb_rpoint_result": [191, 1285], "amb_rpoint_r": [191, 1285], "dtype": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 1285, 1305], "see": [192, 193, 222, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 268, 269, 272, 273, 276, 277, 279, 280, 281, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 340, 1113, 1114, 1118, 1119, 1134, 1169, 1170, 1172, 1266, 1268, 1269, 1300, 1305, 1307, 1308, 1314], "help": [192, 222, 317, 340, 886, 1113, 1114, 1118, 1119, 1169, 1170, 1266, 1268, 1269, 1294], "accur": [192, 222, 317, 340, 1113, 1114, 1118, 1119, 1169, 1170, 1266, 1268, 1269], "signatur": [192, 222, 317, 340, 1113, 1114, 1118, 1119, 1169, 1170, 1266, 1268, 1269], "__hash__": [192, 212, 317, 329], "hash": [192, 212, 317, 329], "__str__": [192, 243, 317, 359, 956, 958, 977, 979, 986, 997, 1004, 1046, 1059, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "__lt__": [192, 217, 317, 335], "__le__": [192, 215, 317, 333], "__eq__": [192, 205, 317, 324], "__ne__": [192, 220, 317, 338], "__gt__": [192, 211, 317, 328], "__ge__": [192, 209, 317, 327], "__add__": [192, 195, 317, 319], "__radd__": [192, 226, 317, 344], "__sub__": [192, 244, 317, 360], "__rsub__": [192, 239, 317, 356], "__mul__": [192, 219, 317, 337], "__rmul__": [192, 234, 317, 351], "__mod__": [192, 218, 317, 336], "__rmod__": [192, 233, 317, 350], "__divmod__": [192, 204, 317, 323], "divmod": [192, 204, 228, 317, 323, 346], "__rdivmod__": [192, 228, 317, 346], "__pow__": [192, 225, 317, 343], "mod": [192, 225, 236, 317, 343, 353], "pow": [192, 225, 236, 317, 343, 353], "__rpow__": [192, 236, 317, 353], "__neg__": [192, 221, 317, 339], "__pos__": [192, 224, 317, 342], "__abs__": [192, 194, 317, 318], "ab": [192, 194, 317, 318], "__bool__": [192, 202, 317, 321], "__int__": [192, 213, 317, 331], "__float__": [192, 206, 317, 325], "__floordiv__": [192, 207, 317, 326], "__rfloordiv__": [192, 231, 317, 348], "__truediv__": [192, 245, 317, 361], "__rtruediv__": [192, 240, 317, 357], "as_integer_ratio": [192, 252], "pair": [192, 252, 1134, 1172], "whose": [192, 252, 1290, 1303], "ratio": [192, 252], "equal": [192, 252, 391, 405, 408, 1296], "denomin": [192, 252, 317, 364], "rais": [192, 252, 444, 445, 884], "overflowerror": [192, 252], "infin": [192, 252], "valueerror": [192, 252, 1134, 1172], "is_integ": [192, 275, 317, 365], "finit": [192, 275, 317, 365], "otherwis": [192, 275, 884, 1307], "item": [192, 203, 276, 317, 322], "parametr": [192, 203, 317, 322], "wrapper": [192, 203, 317, 322, 495, 1289], "around": [192, 203, 317, 322], "__invert__": [192, 214, 317, 332], "__lshift__": [192, 216, 317, 334], "__rlshift__": [192, 232, 317, 349], "__rshift__": [192, 238, 317, 355], "__rrshift__": [192, 237, 317, 354], "__and__": [192, 196, 317, 320], "__rand__": [192, 227, 317, 345], "__xor__": [192, 246, 317, 362], "__rxor__": [192, 241, 317, 358], "__or__": [192, 223, 317, 341], "__ror__": [192, 235, 317, 352], "tolist": [192, 309, 317], "method": [192, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 268, 269, 272, 273, 276, 277, 279, 280, 281, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 440, 583, 811, 812, 891, 892], "ident": [192, 193, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 268, 269, 272, 273, 276, 277, 279, 280, 281, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 1304, 1315], "attribut": [192, 193, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 268, 269, 272, 273, 276, 277, 279, 280, 281, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 1303], "itemset": [192, 277, 317], "tobyt": [192, 307, 317], "tofil": [192, 308, 317], "tostr": [192, 310, 317], "byteswap": [192, 255, 317], "astyp": [192, 253, 317], "getfield": [192, 273, 317], "setfield": [192, 296, 317], "resiz": [192, 293, 317], "__array__": [192, 197, 317], "sc": [192, 197, 201, 317], "__array_wrap__": [192, 201, 317], "__sizeof__": [192, 242, 317], "byte": [192, 242, 278, 282, 284, 303, 317], "__reduce__": [192, 229, 317], "helper": [192, 229, 317, 857, 886, 891, 892, 1052, 1283, 1290, 1294], "pickl": [192, 229, 317], "dump": [192, 267, 268, 317], "transpos": [192, 312, 317], "put": [192, 288, 317], "repeat": [192, 291, 317, 1080], "choos": [192, 256, 317, 1134, 1172, 1302, 1307, 1309, 1314], "sort": [192, 300, 317], "argsort": [192, 251, 317], "searchsort": [192, 295, 317], "argmax": [192, 249, 317], "argmin": [192, 250, 317], "reshap": [192, 292, 317], "squeez": [192, 301, 317], "view": [192, 271, 314, 317], "swapax": [192, 305, 317], "max": [192, 279, 317, 492, 600, 811, 812, 822, 845, 846, 847, 851, 852, 853, 854, 855, 856, 1059, 1060, 1069, 1077, 1078, 1080, 1122, 1148, 1149, 1292, 1300, 1306, 1310], "min": [192, 281, 317, 492, 600, 822, 845, 846, 847, 851, 852, 853, 854, 855, 856, 1059, 1060, 1069, 1077, 1078, 1080, 1122, 1148, 1149, 1292, 1300, 1310, 1312], "ptp": [192, 287, 317], "trace": [192, 311, 317, 1312], "diagon": [192, 265, 317], "clip": [192, 257, 317], "conj": [192, 259, 317], "conjug": [192, 260, 317], "nonzero": [192, 285, 317], "std": [192, 302, 317], "sum": [192, 304, 317, 822, 829, 835, 840, 842, 845, 846, 847, 848, 1004, 1034, 1035, 1046, 1059, 1060, 1069, 1077, 1078, 1134, 1172, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1300, 1313], "cumsum": [192, 263, 317], "prod": [192, 286, 317], "cumprod": [192, 262, 317], "compress": [192, 258, 317], "flatten": [192, 272, 317], "ravel": [192, 289, 317], "round": [192, 294, 317], "__format__": [192, 208, 317], "formatt": [192, 208, 317], "setflag": [192, 297, 317], "newbyteord": [192, 284, 317], "new_ord": [192, 284, 317], "differ": [192, 284, 317, 510, 527, 536, 1289, 1297, 1300, 1303, 1304, 1310], "ndim": [192, 283, 317], "stride": [192, 303, 317], "pointer": [192, 264, 317], "items": [192, 278, 317], "length": [192, 278, 282, 317, 414, 435, 442, 492, 510, 511, 691, 692, 698, 699, 893, 894, 895, 897, 898, 899, 901, 902, 903, 905, 1052, 1290, 1296, 1300, 1303], "element": [192, 278, 299, 317, 571, 572, 1134, 1172], "gentyp": [192, 299, 317], "nbyte": [192, 282, 317], "descriptor": [192, 266, 317], "real": [192, 290, 317, 907, 1294], "imag": [192, 274, 317, 822, 844, 851, 852, 853, 854, 855, 856, 909, 910, 916, 918, 920, 926, 928, 933, 935, 940, 942, 948, 950], "imaginari": [192, 274, 317], "flat": [192, 271, 317], "t": [192, 193, 317, 424, 436, 437, 438, 620, 621, 698, 699, 848, 886, 888, 1134, 1172, 1296], "__array_interface__": [192, 198, 317], "protocol": [192, 198, 200, 317], "python": [192, 198, 317, 1134, 1172, 1300, 1301, 1308], "side": [192, 198, 317, 848], "__array_struct__": [192, 200, 317], "struct": [192, 200, 317], "__array_priority__": [192, 199, 317], "prioriti": [192, 199, 317], "pleas": [193, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 268, 269, 272, 273, 276, 277, 279, 280, 281, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 1298, 1301], "version": [203, 275, 322, 365, 1134, 1172, 1300, 1302], "22": [203, 275, 322, 365, 1303, 1305, 1309, 1312, 1313], "alia": [203, 322], "genericalia": [203, 322], "import": [203, 322, 1134, 1172, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "signedinteg": [203, 317, 322, 1285], "pep": [203, 322], "585": [203, 322], "hint": [203, 322], "gener": [203, 322, 679, 784, 815, 817, 819, 829, 844, 849, 851, 852, 853, 854, 855, 856, 965, 1022, 1291, 1293, 1297, 1300, 1303, 1305], "standard": [203, 322, 829, 839, 1134, 1172, 1311], "doubl": [252, 275, 1300], "10": [252, 704, 730, 742, 753, 774, 779, 784, 1298, 1300, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "25": [252, 731, 742, 743, 779, 780, 784, 785, 1303, 1305, 1307, 1309, 1311, 1313], "4": [252, 730, 1134, 1172, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "chang": [284, 599, 600, 1289, 1300, 1301, 1302, 1303, 1307], "made": 284, "field": [284, 801, 829, 848, 1304, 1308, 1311, 1314, 1315], "follow": [284, 452, 691, 736, 1134, 1172, 1289, 1299, 1300, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1312, 1313, 1314, 1315], "swap": 284, "opposit": 284, "endian": 284, "littl": 284, "big": 284, "nativ": 284, "ignor": 284, "abov": [284, 852, 853, 855, 856, 1301, 1305, 1309, 1310, 1313, 1315], "new_dtyp": 284, "giga": [316, 1285], "watt": [316, 368, 372, 385, 388, 390, 843, 1285], "ityp": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 1285], "__index__": [317, 330], "convert": [317, 330, 1134, 1172, 1258, 1311], "suitabl": [317, 330], "bit_count": [317, 363], "bit": [317, 363], "absolut": [317, 363, 402, 432, 624, 627, 1289, 1296, 1300, 1315], "analog": [317, 363], "builtin": [317, 363], "popcount": [317, 363], "c": [317, 363, 1134, 1172, 1302, 1315], "numer": [317, 366, 956, 977, 979, 986, 993, 997, 1001, 1004, 1036, 1046, 1059, 1068, 1070, 1076, 1078, 1217, 1226, 1242], "itself": [317, 366], "int64": [363, 365, 1305, 1311], "127": [363, 1313], "7": [363, 1134, 1172, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "uint32": 365, "5": [365, 730, 780, 1134, 1172, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "kappa": [367, 893, 895, 897, 901, 902, 905, 1285, 1295], "41": [367, 893, 895, 897, 901, 902, 905, 1285, 1295, 1305], "van": [367, 893, 895, 897, 901, 902, 905, 1285], "karman": [367, 893, 895, 897, 901, 902, 905, 1285], "mega": [368, 1285], "pop": [371, 1013, 1023, 1049, 1089, 1224, 1237, 1255, 1285], "popul": [371, 956, 961, 965, 977, 979, 982, 986, 990, 997, 1004, 1012, 1013, 1015, 1019, 1022, 1023, 1046, 1052, 1053, 1059, 1062, 1068, 1070, 1073, 1076, 1078, 1092, 1095, 1097, 1100, 1102, 1105, 1107, 1110, 1113, 1116, 1118, 1121, 1123, 1126, 1129, 1132, 1135, 1138, 1142, 1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166, 1169, 1173, 1176, 1183, 1186, 1193, 1196, 1203, 1206, 1217, 1226, 1242, 1285, 1290, 1303, 1305], "1000000000": [372, 1285], "1000000": [372, 1285], "tw": [372, 385, 1285], "1000000000000": [372, 1285], "factor": [372, 412, 587, 588, 615, 616, 730, 731, 742, 743, 779, 780, 784, 785, 894, 898, 899, 903, 1059, 1060, 1069, 1077, 1108, 1136, 1285, 1289, 1295, 1296, 1300, 1315], "rel": [372, 403, 433, 1285, 1296], "rotor_point": [373, 374, 1285, 1306], "rweight": [375, 1285], "rotor_weight": [375, 1285], "state_source_turbin": [379, 1285], "tmodel": [381, 1285], "tmodel_sel": [382, 1285], "tname": [383, 1285, 1305, 1310, 1311], "terra": [385, 1285], "valid": [386, 642, 643, 648, 649, 742, 1070, 1071, 1129, 1130, 1131, 1132, 1133, 1173, 1174, 1177, 1183, 1187, 1193, 1197, 1203, 1207, 1285, 1292, 1301, 1313], "xyh": [389, 820, 826, 828, 1296], "vector": [389, 426, 442, 443, 851, 852, 853, 940, 941, 1013, 1023, 1052, 1134, 1172, 1279, 1280, 1281, 1282, 1290, 1294, 1296, 1301, 1305, 1313, 1314], "kilo": [390, 1285], "amb_cap": [391, 436, 437, 886, 888, 1296, 1313], "capac": [391, 405, 829, 831, 1296, 1300, 1313], "amb_p": [391, 393, 408, 436, 437, 886, 888, 1296, 1304, 1305, 1309, 1311, 1313], "amb_ct": [392, 436, 437, 886, 888, 1296, 1305, 1311], "thrust": [392, 406, 620, 621, 1289, 1296, 1300, 1301, 1308, 1309, 1315], "coeffici": [392, 406, 907, 1296, 1308, 1309], "user": [393, 416, 1134, 1172, 1283, 1288, 1296, 1300, 1308], "amb_rew": [394, 436, 437, 873, 874, 886, 888, 1296, 1304, 1305, 1309, 1311, 1312, 1313], "amb_rews2": [395, 436, 437, 886, 888, 1296, 1305, 1311], "moment": [395, 396, 420, 421, 1296], "amb_rews3": [396, 436, 437, 886, 888, 1296, 1305, 1311], "third": [396, 421, 1296], "amb_rho": [397, 436, 437, 886, 888, 1296, 1305, 1311], "kg": [397, 422, 1296], "m3": [397, 422, 1296], "amb_t": [398, 436, 437, 886, 888, 1296], "temperatur": [398, 424, 1296], "kelvin": [398, 424, 1296], "amb_ti": [399, 436, 437, 886, 888, 1296, 1306, 1311], "amb_wd": [400, 436, 437, 600, 864, 866, 868, 869, 873, 886, 888, 1296, 1311], "degre": [400, 402, 403, 427, 432, 433, 907, 1280, 1281, 1294, 1296, 1315], "amb_w": [401, 436, 437, 886, 888, 1296, 1303, 1305, 1307, 1310, 1311, 1313, 1314], "amb_yaw": [402, 436, 437, 1296], "yaw": [402, 403, 432, 433, 436, 437, 624, 627, 643, 649, 655, 704, 774, 1289, 1296, 1299, 1300, 1301, 1305, 1306, 1311], "angl": [402, 403, 432, 433, 736, 737, 769, 1242, 1243, 1296, 1304, 1312, 1315], "amb_yawm": [403, 436, 437, 1296], "amb_yld": [404, 436, 437, 886, 888, 1296, 1313], "yield": [404, 434, 815, 817, 819, 829, 836, 843, 1293, 1296, 1298, 1300, 1301, 1307, 1308, 1313, 1314], "gwh": [404, 434, 843, 1296, 1307, 1313, 1314], "cap": [405, 436, 437, 886, 888, 1296, 1313], "ct": [406, 436, 437, 507, 587, 620, 621, 635, 637, 638, 642, 643, 648, 649, 654, 655, 705, 726, 727, 728, 730, 731, 733, 734, 737, 739, 740, 742, 743, 748, 750, 751, 753, 768, 775, 779, 780, 784, 785, 875, 877, 886, 888, 1289, 1293, 1296, 1300, 1303, 1309, 1311, 1315], "eff": [408, 833, 886, 888, 1296, 1313], "effici": [408, 829, 832, 833, 1134, 1172, 1296, 1300, 1307, 1309, 1313, 1314], "over": [409, 784, 829, 834, 835, 866, 868, 869, 907, 1134, 1172, 1296, 1297, 1300, 1305, 1314], "k": [410, 411, 412, 630, 631, 704, 705, 730, 731, 736, 737, 742, 743, 747, 748, 769, 774, 775, 1289, 1296, 1300, 1306, 1313, 1314], "growth": [410, 704, 705, 730, 731, 736, 737, 742, 743, 747, 748, 774, 775, 779, 780, 784, 785, 1296, 1300, 1314], "kb": [411, 412, 630, 631, 1296, 1300], "kti": [411, 412, 630, 631, 632, 633, 634, 1289, 1296, 1300, 1306, 1313], "ti": [411, 412, 425, 436, 437, 465, 466, 472, 473, 558, 630, 631, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 784, 785, 811, 877, 886, 888, 1076, 1289, 1290, 1296, 1300, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "between": [412, 1124, 1134, 1172, 1173, 1174, 1183, 1184, 1193, 1194, 1203, 1204, 1227, 1277, 1278, 1296, 1304, 1305, 1307], "max_p": [413, 587, 592, 1296, 1309, 1310], "maxp": [413, 1296, 1309, 1310], "derat": [413, 587, 875, 1293, 1296, 1300, 1309, 1310], "boost": [413, 587, 875, 1293, 1296, 1300, 1309, 1310], "mol": [414, 492, 669, 900, 901, 904, 905, 1295, 1296, 1303], "monin": [414, 900, 901, 904, 905, 1296, 1303], "ubukhof": [414, 1296], "pa_alpha": [417, 1296], "alpha": [417, 704, 705, 753, 768, 774, 775, 1296, 1305], "porteagel": [417, 418, 774, 1296, 1297, 1300], "pa_beta": [418, 1296], "beta": [418, 704, 705, 753, 768, 775, 1296], "rew": [419, 436, 437, 886, 888, 1296, 1300, 1304, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "rews2": [420, 436, 437, 620, 621, 643, 649, 655, 886, 888, 1296], "rews3": [421, 436, 437, 587, 588, 592, 643, 649, 655, 886, 888, 1296], "rho": [422, 436, 437, 465, 466, 472, 473, 635, 636, 638, 642, 643, 648, 649, 877, 886, 888, 1296, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "shear": [423, 672, 896, 1289, 1294, 1296, 1300], "expon": [423, 643, 649, 655, 672, 896, 1289, 1296, 1300, 1315], "txyh": [426, 1296], "wd": [427, 436, 437, 465, 466, 472, 473, 600, 686, 687, 886, 888, 1279, 1280, 1281, 1282, 1294, 1296, 1300, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "yawm": [433, 436, 437, 624, 627, 704, 769, 774, 1289, 1296, 1315], "yld": [434, 436, 437, 886, 888, 1296, 1313], "z0": [435, 893, 894, 895, 897, 898, 899, 901, 902, 903, 905, 1295, 1296, 1303], "rough": [435, 893, 894, 895, 897, 898, 899, 901, 902, 903, 905, 1296], "amb2var": [436, 1296], "map": [436, 437, 444, 445, 452, 454, 479, 481, 492, 510, 511, 512, 513, 514, 515, 516, 517, 553, 554, 582, 583, 600, 860, 870, 872, 971, 972, 1007, 1008, 1289, 1293, 1296, 1300, 1306, 1307, 1310], "var2amb": [437, 1296], "farm_layout": [438, 439, 440, 441, 442, 443, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314], "add_from_csv": [438, 439, 1288], "data_sourc": [438, 439, 444, 445, 452, 454, 463, 479, 481, 490, 553, 554, 582, 583, 599, 600, 615, 616, 635, 636, 642, 643, 1288, 1303, 1304, 1305, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "col_index": 438, "col_nam": 438, "col_x": 438, "col_i": 438, "col_h": 438, "col_d": 438, "col_id": 438, "cols_models_pr": 438, "cols_models_post": 438, "turbine_base_nam": 438, "turbine_id": 438, "turbine_base_name_count_shift": 438, "turbine_paramet": [438, 441, 442, 443], "panda": [438, 439, 452, 454, 460, 479, 481, 487, 492, 553, 554, 582, 583, 599, 600, 615, 616, 635, 636, 637, 638, 642, 643, 648, 649, 654, 655, 820, 829, 836, 838, 840, 841, 842, 843, 846, 847, 849, 857, 860, 861, 862, 864, 866, 870, 873, 875, 886, 891, 892, 1288, 1289, 1294, 1300, 1309, 1310, 1311, 1313, 1315], "datafram": [438, 439, 452, 454, 479, 481, 492, 553, 554, 582, 583, 599, 600, 615, 616, 635, 636, 637, 638, 642, 643, 648, 649, 654, 655, 836, 838, 840, 841, 842, 843, 846, 847, 860, 861, 862, 864, 866, 873, 891, 892, 1288, 1289, 1300, 1309, 1310, 1311, 1313, 1315], "column": [438, 452, 454, 479, 481, 492, 553, 554, 582, 583, 600, 615, 616, 636, 638, 642, 643, 648, 649, 654, 860, 863, 886, 892, 907, 1134, 1172, 1258, 1303, 1307, 1309, 1310, 1312, 1313], "enter": 438, "forward": [438, 440, 441, 442, 443, 498, 822, 827, 851, 852, 853, 854, 855, 856, 860, 891, 892], "add_from_df": [439, 1288, 1300], "add_from_fil": [440, 1288, 1303, 1313], "infer": [440, 441, 1311], "suffix": [440, 444, 445], "add_from_json": [441, 1288], "set_farm_nam": 441, "turbim": [441, 1288], "json": [441, 824, 1288], "add_grid": [442, 1288, 1304, 1312, 1314], "xy_bas": [442, 443, 1288, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1314], "step_vector": [442, 1288, 1304, 1312, 1314], "regular": [442, 444, 571, 1193, 1203, 1226, 1242, 1288, 1289, 1291, 1292, 1300, 1312, 1314], "grid": [442, 444, 527, 536, 571, 1108, 1136, 1142, 1183, 1184, 1193, 1203, 1204, 1226, 1227, 1242, 1288, 1289, 1291, 1292, 1300, 1304, 1314], "add_row": [443, 1288, 1305, 1307, 1309, 1310, 1311], "xy_step": [443, 1288, 1305, 1307, 1309, 1310, 1311], "row": [443, 615, 616, 1134, 1172, 1203, 1204, 1226, 1227, 1288, 1299, 1301, 1307, 1309, 1312, 1313], "fielddatanc": [444, 445, 446, 447, 448, 449, 450, 451, 1288, 1300, 1304], "heterogen": [444, 1288, 1299, 1301, 1307], "horizont": [444, 849, 851, 854, 1288, 1293, 1300, 1303, 1304, 1307, 1311], "netcdf": [444, 1288, 1304], "pattern": [444, 445, 1300, 1309], "end": [444, 445, 848, 880, 886, 891, 892], "nc": [444, 445, 886, 887, 889, 890, 1300, 1304], "One": [444, 445, 1304], "mani": [444, 445, 1300, 1301], "ovar": [444, 452, 479, 553, 615], "var2ncvar": [444, 445, 1304], "fixed_var": [444, 445, 452, 454, 479, 481, 490, 1303, 1304, 1305, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "uniform": [444, 445, 452, 454, 472, 479, 481, 553, 554, 631, 675, 698, 1078, 1080, 1288, 1289, 1300, 1303, 1311, 1312, 1313, 1315], "read": [444, 445, 452, 454, 479, 481, 493, 554, 583, 600, 616, 636, 638, 642, 643, 648, 649, 654, 655, 886, 891, 1257, 1258, 1275, 1276, 1288, 1294, 1300, 1304, 1313], "states_coord": [444, 445, 1304], "x_coord": [444, 445, 1304], "y_coord": [444, 445, 1304], "h_coord": [444, 445, 1304], "pre_load": [444, 445, 1304], "weight_ncvar": [444, 445], "bounds_error": [444, 445, 1304], "exceed": [444, 445, 492], "fill_valu": [444, 445], "time_format": [444, 445, 1304], "datetim": [444, 445], "string": [444, 445, 509, 858, 860, 866, 868, 869, 956, 958, 977, 979, 986, 997, 1004, 1046, 1059, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1134, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1172, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "sel": [444, 445, 1078, 1080], "xr": [444, 445], "utmx": [445, 1304], "utmi": [445, 1304], "d_": 445, "multiheightst": [452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 1288, 1300], "multipl": [452, 711, 1288, 1289, 1300, 1301, 1310], "taken": [452, 1311], "exampl": [452, 877, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "50": [452, 492, 1303, 1305, 1306, 1307, 1310, 1314], "60": [452, 1305], "100": [452, 592, 691, 692, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "var2col": [452, 454, 479, 481, 490, 492, 553, 554, 1303, 1305, 1307, 1310, 1312, 1313, 1314], "fix": [452, 454, 465, 479, 481, 1097, 1154, 1183, 1288, 1292, 1300], "pd_read_par": [452, 454, 481, 554], "slice": [452, 454, 460, 479, 481, 487, 527, 1289, 1311], "rang": [452, 454, 460, 479, 481, 487, 599, 600, 1289, 1300, 1309, 1310, 1315], "states_loc": [452, 454, 460, 463, 479, 481, 487, 490, 1307], "loc": [452, 454, 460, 479, 481, 487, 1309, 1310], "rdict": [452, 453, 463, 464, 479, 480, 490, 491], "index_col": [452, 453, 463, 464, 479, 480, 490, 491], "scipi": [454, 616, 654, 655, 1134, 1172], "interp1d": 454, "multiheighttimeseri": [463, 464, 1288, 1300, 1303, 1307], "multi": [463, 714, 1288, 1299, 1300, 1301], "timeseri": [463, 490, 491, 698, 699, 843, 1288, 1289, 1299, 1300, 1301, 1307, 1312], "parse_d": [463, 464, 490, 491], "scanw": [465, 466, 467, 468, 469, 470, 471, 1288], "ws_list": [465, 466], "singlestatest": [472, 473, 474, 475, 476, 477, 478, 1288, 1300, 1311], "profdict": [472, 479], "profdata": [472, 473], "statest": [479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 1288, 1303, 1305, 1309, 1310, 1314, 1315], "readabl": [479, 1288, 1310, 1313], "rpar": [479, 642], "create_random_abl_st": [492, 1288], "cols_minmax": 492, "mol_abs_rang": 492, "5000": [492, 1305, 1309, 1312, 1313], "normal": [492, 561, 562, 686, 822, 1134, 1172, 1289, 1303, 1309, 1314], "random": [492, 1288, 1303], "abl": [492, 660, 663, 666, 669, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 1288, 1289, 1300], "neutral": [492, 660, 669, 893, 894, 895, 1289, 1294], "stratif": 492, "windio": [493, 1300], "read_cas": [493, 1288], "case_yaml": [493, 1288], "site_par": [493, 1288], "farm_par": 493, "ana_par": 493, "yaml": [493, 1288, 1300], "read_sit": 493, "read_farm": 493, "read_analys": 493, "basicfarmcontrol": [494, 1289, 1306], "condit": [494, 599, 956, 957, 1277, 1289, 1300, 1305, 1308, 1310, 1311, 1315], "farm_model": [495, 496, 497, 498, 499, 500, 501, 505, 1306], "turbine2farmmodel": [495, 496, 497, 498, 499, 500, 501, 1289, 1306], "promot": [495, 1289], "simpli": [495, 561, 1289, 1302, 1303, 1306, 1310, 1314], "init": [498, 880, 881, 1047, 1078, 1080, 1083, 1220, 1231, 1251], "slightli": [502, 1294, 1310], "enhanc": [502, 1294], "pass": [504, 1134, 1172, 1314], "kind": [505, 1287, 1304, 1315], "turbine_ord": 505, "partial_wak": [505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 1306], "partialwakemodel": 505, "wake_superposit": [505, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 1306], "pct_file": [505, 507], "print_toc": [505, 509, 1306], "curv": [507, 635, 636, 638, 642, 648, 649, 654, 655, 875, 877, 1289, 1293, 1300, 1301, 1309], "creation": [507, 864, 873, 1283, 1293, 1314], "more": [510, 1134, 1172, 1300, 1310, 1313], "than": [510, 801, 1313], "invok": [510, 587, 679, 1289, 1300, 1301, 1302, 1305, 1313, 1314, 1315], "wname2pwak": [510, 511], "wtype2pwak": [510, 511], "ones": [511, 519, 528, 537, 540, 548, 907], "partialaxiwak": [518, 519, 520, 521, 522, 523, 524, 525, 526, 711, 1289, 1306], "axial": [518, 1289], "idea": [518, 801, 1309], "radial": [518, 519, 712, 724, 728, 729, 734, 740, 751], "n": [518, 519, 527, 528, 536, 537, 571, 572, 851, 852, 853, 940, 941, 969, 970, 1037, 1038, 1097, 1098, 1102, 1103, 1113, 1114, 1134, 1154, 1155, 1172, 1289, 1303, 1306, 1311, 1312, 1313, 1315], "radii": [518, 727, 728, 733, 734, 739, 740, 750, 751, 1277, 1294], "cover": 518, "disc": [518, 539, 956, 957, 1308], "overlap": [518, 539, 571, 572], "circl": [518, 539, 926, 927, 928, 929, 930, 931, 932, 1173, 1174, 1177, 1183, 1184, 1187, 1193, 1194, 1197, 1203, 1204, 1207, 1277, 1278, 1294, 1305], "area": [518, 571, 572, 910, 916, 918, 920, 926, 928, 935, 942, 950, 956, 957, 1258, 1277, 1278, 1290, 1294, 1300, 1305], "partialdistslicedwak": [527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 714, 1289, 1306], "distanc": [527, 730, 731, 909, 910, 914, 916, 918, 920, 924, 926, 928, 931, 933, 935, 938, 940, 942, 946, 948, 950, 954, 979, 980, 1123, 1124, 1134, 1136, 1148, 1149, 1172, 1173, 1174, 1183, 1184, 1193, 1194, 1203, 1204, 1227, 1277, 1278, 1289, 1290, 1292, 1294, 1305, 1315], "make": [527, 1274, 1277, 1289, 1290, 1302, 1305, 1313], "structur": [527, 654, 1289, 1300, 1307, 1313], "optin": [527, 1258], "done": [527, 967, 1312], "grotor": 527, "gridrotor": [527, 528, 537, 571, 572, 573, 574, 575, 576, 577, 1289, 1306], "partialgrid": [536, 537, 538, 1289, 1306], "mai": [536, 587, 1289, 1304, 1315], "partialtophat": [539, 540, 541, 542, 543, 544, 545, 546, 1289, 1306], "hat": [539, 725, 1289, 1297, 1315], "rotorpoint": [547, 548, 549, 550, 551, 552, 1289, 1306], "directli": [547, 873, 878, 1004, 1013, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1287, 1289, 1293, 1294, 1297, 1310], "get_wake_point": [547, 551], "setuniformdata": [553, 554, 555, 556, 557, 1289, 1300], "both": [553, 554, 722, 723, 742, 745, 779, 782, 784, 787, 1226, 1309, 1313, 1314], "assum": [553, 554, 1277, 1312], "Or": [553, 554], "independ": [553, 554, 1307], "written": [553, 554, 863, 1301], "tke2ti": [558, 559, 560, 1289, 1300, 1306], "tke": [558, 1289, 1300, 1303, 1307, 1308], "sqrt": [558, 1134, 1172, 1289], "wakedelta": [561, 562, 563, 564, 1289], "subtract": [561, 1289, 1305], "divid": [561, 562, 851, 852, 853, 854, 855, 856], "centrerotor": [565, 566, 567, 568, 569, 570, 1289, 1306], "compos": [571, 1289], "possibli": [571, 1289], "kick": [571, 1289], "out": [571, 1134, 1172, 1289, 1310, 1312, 1315], "outsid": [571, 1289, 1304], "reduct": [571, 572], "actual": [571, 572, 1004, 1013, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1300, 1302, 1307, 1309, 1311], "repres": [571, 572, 615, 654, 823, 926, 933, 940, 1289, 1294, 1303, 1314, 1315], "circ": [571, 572], "recalcul": [571, 572], "accordingli": [571, 572], "nint": [571, 572], "200": [571, 572, 1303, 1305, 1307, 1309, 1315], "in_var": [578, 579], "vairabl": [578, 579], "func": [578, 579, 1004, 1013, 1023, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1259, 1265, 1266, 1267, 1268, 1273], "in0": [578, 579], "in1": [578, 579], "stsel": [578, 579], "out0": [578, 579], "ou1": [578, 579], "where": [578, 579, 823, 1134, 1172, 1280, 1281, 1305, 1307, 1308, 1310, 1315], "inx": [578, 579], "outi": [578, 579], "lookupt": [582, 583, 584, 585, 586, 1289, 1300], "tabl": [582, 583, 615, 1289, 1300, 1309, 1310], "varmap": [582, 583, 956, 971, 972, 977, 979, 986, 997, 1059, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169], "pd_file_read_par": [583, 600, 616, 636, 643], "xr_interp_arg": 583, "powermask": [587, 588, 589, 590, 591, 592, 1289, 1300, 1306, 1309], "below": [587, 852, 853, 855, 856, 1300, 1302], "rate": 587, "higher": [587, 790, 791, 801, 802, 1300], "introduc": [587, 1297, 1300], "so": [587, 907, 1300, 1308, 1309, 1311, 1312], "wise": [587, 615, 616, 1134, 1172], "var_ws_p": [587, 588, 643, 649, 655], "factor_p": [587, 588, 592], "update_p_ct": [587, 592], "rated_p": [587, 592], "var_w": 592, "p_lim": 592, "rotorcentrecalc": [593, 594, 595, 596, 597, 598, 1289, 1300, 1306], "sectormanag": [599, 600, 601, 602, 603, 1289, 1300, 1310], "range_var": [599, 600, 1310], "target_var": [599, 600, 1310], "col_tind": 600, "col_tnam": [600, 1310], "colmap": [600, 1310], "var_period": 600, "360": 600, "within": [600, 878, 1173, 1174, 1183, 1184, 1193, 1194, 1203, 1204, 1277, 1290, 1292, 1294, 1300, 1302, 1305, 1308], "exist": [600, 753, 772, 884, 1122, 1308, 1311, 1315], "period": 600, "setfarmvar": [604, 605, 606, 607, 608, 609, 610, 1289, 1300, 1309, 1315], "add_var": [604, 606, 1078, 1080, 1309, 1315], "remov": [604, 610, 1302, 1309], "setxyhd": [611, 612, 613, 614, 1289], "set_xi": [611, 612], "set_h": [611, 612], "set_d": [611, 612], "tablefactor": [615, 616, 617, 618, 619, 1289, 1300], "multipli": [615, 616, 730, 731, 742, 743, 779, 780, 784, 785, 1289, 1300], "dimension": [615, 1134, 1172, 1289, 1300], "col_var": [615, 616], "row_var": [615, 616], "onto": [615, 616], "interpn": [616, 654, 655], "thrust2ct": [620, 621, 622, 623, 1289, 1300, 1306], "thrust_var": [620, 621], "wsct": [620, 642, 648, 654], "var_ws_ct": [620, 621, 643, 649, 655], "yaw2yawm": [624, 625, 626, 1289, 1300, 1306, 1315], "yawm2yaw": [627, 628, 629, 1289, 1300, 1306, 1315], "linear": [630, 790, 811, 812, 1289, 1306, 1314], "ti_var": [630, 631, 784, 785], "k_var": [630, 631, 704, 705, 730, 731, 736, 737, 742, 743, 747, 748, 774, 775], "ti_val": [630, 631], "cpctfile": [635, 636, 1289, 1300], "pctfile": [635, 636, 638, 642, 643, 644, 645, 646, 647, 1289, 1303, 1306, 1310, 1311, 1313], "cp": [635, 636, 637, 638, 1289, 1300], "col_w": [635, 636, 642, 643, 648], "col_cp": [635, 636, 638], "225": [635, 636, 638, 654, 877, 1303, 1304, 1305, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "paramer": 636, "cpctfromtwo": [637, 638, 1289, 1300], "pctfromtwo": [637, 648, 649, 650, 651, 652, 653, 1289], "data_source_cp": [637, 638], "data_source_ct": [637, 638, 648, 649, 654, 655], "col_ws_cp_fil": 638, "pd_file_read_pars_cp": 638, "pd_file_read_pars_ct": [638, 649, 655], "nulltyp": [639, 640, 641, 1289, 1300, 1306], "doe": [639, 1173, 1183, 1193, 1203, 1289, 1307, 1309, 1312], "col_p": [642, 643, 648, 649], "col_ct": [642, 643, 648, 649], "densitii": [642, 643, 648, 649], "correct": [642, 643, 648, 649, 679, 730, 731, 736, 801, 1289, 1300, 1308, 1309, 1311], "wsp": [642, 648, 654], "p_ct": [643, 649, 654, 655], "p_p": [643, 649, 655, 1315], "88": [643, 649, 655, 1303, 1305, 1313, 1315], "source_p": [648, 654], "source_ct": [648, 654], "rpars_p": [648, 654], "rpars_ct": [648, 654], "data_source_p": [648, 649, 654, 655], "col_ws_p_fil": [648, 649], "col_ws_ct_fil": 649, "pd_file_read_pars_p": [649, 655], "wsrho2pctfromtwo": [654, 655, 656, 657, 658, 659, 1289], "950": [654, 1305], "975": 654, "275": 654, "subsequ": [654, 1308], "neccessarili": [654, 1289, 1313], "ipars_p": 654, "ipars_ct": 654, "interpn_pars_p": 655, "interpn_pars_ct": 655, "vertical_profil": [660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678], "abllogneutralwsprofil": [660, 661, 662, 1289], "log": [660, 663, 666, 669, 894, 898, 899, 903, 1289, 1295], "abllogstablewsprofil": [663, 664, 665, 1289], "stabl": [663, 669, 897, 898, 899, 900, 901, 1289, 1294, 1302], "abllogunstablewsprofil": [666, 667, 668, 1289], "unstabl": [666, 669, 902, 903, 904, 905, 1289, 1294], "abllogwsprofil": [669, 670, 671, 1289, 1303], "pick": 669, "shearedprofil": [672, 673, 674, 1289, 1300], "uniformprofil": [675, 676, 677, 678, 1289], "farmord": [679, 680, 681, 682, 683, 684, 685, 1289, 1306], "warn": 679, "test": [679, 909, 915, 916, 918, 925, 926, 932, 933, 939, 940, 947, 948, 955, 1300, 1303], "purpos": [679, 1303, 1305, 1311], "give": [679, 1300, 1313], "when": [679, 1300, 1303, 1304, 1305, 1309, 1313], "base_fram": [679, 680, 704, 705], "rotorwd1": [679, 680], "rotorwd": [679, 680, 686, 687, 688, 689, 690, 705, 1289, 1306], "align": [686, 1289], "axi": [686, 822, 851, 852, 853, 854, 855, 856, 867, 870, 872, 877, 910, 920, 928, 935, 942, 950, 988, 999, 1009, 1134, 1172, 1173, 1177, 1183, 1187, 1193, 1197, 1203, 1207, 1279, 1280, 1281, 1282, 1289, 1293, 1294, 1311, 1315], "var_wd": [686, 687], "streamlin": [691, 692, 693, 694, 695, 696, 697, 784, 1289, 1297, 1300, 1304, 1306, 1308], "n_delstor": [691, 692], "increas": [691, 692, 1297], "max_length": [691, 692], "cl_ipar": [691, 692, 698, 699], "line": [691, 692, 698, 699, 725, 727, 730, 733, 736, 739, 747, 750, 910, 920, 928, 935, 942, 950, 1300, 1302, 1311], "100000": [691, 692, 1309], "timelin": [698, 699, 700, 701, 702, 703, 1289, 1300, 1306, 1312], "dynam": [698, 1289, 1299, 1301], "spatial": [698, 979, 1134, 1172, 1289, 1290, 1300, 1303, 1312], "max_wake_length": [698, 699], "dt_min": [698, 699, 1312], "minut": [698, 699, 1303, 1307, 1312], "20000": [698, 699], "yawedwak": [704, 705, 706, 707, 708, 709, 710, 1289, 1300, 1306], "bend": [704, 1289, 1300, 1315], "bastankhah": [704, 742, 753, 774, 1297, 1300, 1315], "port": [704, 753, 774, 1315], "agel": [704, 753, 774, 1315], "2016": [704, 753, 774, 1300], "http": [704, 730, 736, 742, 753, 774, 779, 784, 801, 907, 1274, 1277, 1298, 1300, 1301, 1302, 1313], "doi": [704, 730, 742, 753, 774, 1298], "org": [704, 730, 742, 753, 774, 779, 784, 801, 1298], "1017": [704, 753, 774], "jfm": [704, 753, 774], "595": [704, 753, 774], "porteagelmodel": [704, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 1297], "here": [704, 705, 730, 731, 742, 743, 747, 748, 774, 775, 1287, 1288, 1290, 1300, 1301, 1303, 1305, 1307, 1309, 1310, 1311, 1313, 1314, 1315], "misalign": [704, 774, 1315], "ct_max": [704, 705, 725, 726, 731, 736, 737, 742, 743, 747, 748, 753, 768, 774, 775, 779, 780, 784, 785], "9999": [704, 705, 725, 726, 731, 736, 737, 743, 747, 748, 753, 768, 774, 775, 780, 785], "58": [704, 705, 753, 768, 774, 775, 1303, 1305], "07": [704, 705, 753, 768, 775, 1303, 1304, 1306, 1312], "beyond": [705, 726, 731, 737, 742, 743, 748, 753, 768, 775, 779, 780, 784, 785], "determin": [705, 753, 768, 775, 843, 1300, 1308], "onset": [705, 753, 768, 775], "far": [705, 753, 768, 775, 1300], "region": [705, 753, 768, 775], "axisymmetricwakemodel": [711, 712, 713, 722, 725, 1297], "distslicedwakemodel": [711, 714, 715, 716, 717, 718, 719, 720, 721, 774, 1297], "r": [711, 712, 722, 723, 724, 725, 728, 729, 730, 734, 736, 740, 742, 745, 747, 751, 779, 782, 784, 787, 1297], "separ": [711, 714, 1297, 1300, 1308], "abil": [711, 714], "calc_wakes_spsel_x_r": [711, 712, 722, 724, 725, 729, 730, 736, 742, 747, 779, 784], "calc_wakes_spsel_x_yz": [711, 713, 714, 716, 722, 725, 730, 736, 742, 747, 774, 777, 779, 784], "n_r_per_x": [712, 724, 728, 729, 734, 740, 751], "n_sp_sel": [712, 713, 716, 723, 724, 727, 729, 733, 739, 745, 750, 777, 782, 787], "sp_sel": [712, 713, 716, 723, 724, 727, 729, 733, 739, 745, 750, 753, 766, 777, 782, 787], "non": [712, 713, 716, 723, 724, 727, 729, 733, 739, 745, 750, 777, 782, 787, 1049, 1089, 1122, 1134, 1172, 1224, 1237, 1255, 1301, 1302], "yz": [713, 714, 716, 777, 849, 856, 1297, 1300], "n_yz_per_x": [713, 716, 777], "denpend": [714, 1297], "superp": 714, "gaussianwakemodel": [722, 723, 724, 742, 779, 784, 1297], "gaussian": [722, 1297], "calc_amplitude_sigma_spsel": [722, 723, 742, 745, 779, 782, 784, 787], "amplitud": [722, 723, 742, 745, 779, 782, 784, 787], "sigma": [722, 723, 742, 745, 779, 782, 784, 787, 1300], "amsi": [723, 745, 782, 787], "tophatwakemodel": [725, 726, 727, 728, 729, 730, 736, 747, 1297], "calc_wake_radiu": [725, 728, 730, 734, 736, 740, 747, 751], "calc_centreline_wake_delta": [725, 727, 730, 733, 736, 739, 747, 750], "wake_r": [727, 728, 733, 734, 739, 740, 750, 751], "cl_del": [727, 733, 739, 750], "varlu": [727, 733, 739, 750], "crespohernandeztiwak": [730, 731, 732, 733, 734, 735, 1297, 1300, 1306], "crespo": [730, 1297], "hernandez": [730, 1297], "empir": [730, 1297], "correl": [730, 1134, 1172, 1297], "1016": [730, 742], "0167": 730, "6105": 730, "95": [730, 1303, 1305, 1314], "00033": 730, "we": [730, 1134, 1172, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "eqn": 730, "17": [730, 1303, 1305, 1309, 1314], "15": [730, 1303, 1304, 1305, 1307, 1309, 1310, 1313, 1314], "1088": [730, 779, 784], "1742": [730, 779, 784], "6596": [730, 779, 784], "625": 730, "012039": 730, "a_near": [730, 731], "a_far": [730, 731], "e1": [730, 731], "e2": [730, 731], "e3": [730, 731], "use_ambti": [730, 731], "sbeta_factor": [730, 731, 742, 743, 779, 780, 784, 785], "sbeta": [730, 731, 742, 743, 779, 780, 784, 785], "near_wake_d": [730, 731], "362": 731, "73": [731, 1305], "83": [731, 1134, 1172, 1305], "0325": 731, "32": [731, 1305], "iectiwak": [736, 737, 738, 739, 740, 741, 1297, 1306], "iec": [736, 1297], "64100": [736, 1297], "2005": [736, 1297], "8": [736, 780, 801, 820, 822, 827, 1297, 1298, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "orbit": 736, "dtu": 736, "dk": 736, "3750291": 736, "2009_31": 736, "pdf": [736, 779, 784, 801], "v2": 736, "volluk": 736, "implement": [736, 1305, 1308], "document": [736, 1134, 1172, 1290, 1300], "frandsen": [736, 779, 780, 1300], "2019": [736, 737], "opening_angl": [736, 737], "open": [736, 737, 1298, 1300], "21": [736, 737, 1303, 1305, 1309], "6": [736, 737, 1134, 1172, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "iec_typ": 737, "bastankhahwak": [742, 743, 744, 745, 746, 1297, 1306], "j": [742, 1134, 1172], "renen": 742, "2014": 742, "01": [742, 1303, 1305, 1306, 1307, 1312, 1313], "002": 742, "modif": 742, "fit": 742, "better": 742, "jensenwak": [747, 748, 749, 750, 751, 752, 1297, 1306], "jensen": [747, 1134, 1172, 1297, 1306], "repetit": [753, 1297], "avoid": [753, 1134, 1172, 1297, 1315], "mdata_kei": [753, 759], "x0": [753, 767], "NEAR": [753, 760], "r_pc": [753, 762], "r_pc_": [753, 763], "ampl_near": [753, 755], "delta_near": [753, 758], "ampl_far": [753, 754], "sigma_y_far": [753, 764], "sigma_z_far": [753, 765], "delta_far": [753, 757], "calc_data": [753, 769], "has_data": [753, 772], "clean": [753, 770], "gamma": [769, 1315], "radiant": [769, 1315], "porteagelwak": [774, 775, 776, 777, 778, 1297, 1306], "turboparkwak": [779, 780, 781, 782, 783, 1297, 1300, 1306], "turbopark": [779, 784, 1297, 1300], "iopscienc": [779, 784], "iop": [779, 784], "articl": [779, 784, 1298], "2265": [779, 784], "022063": [779, 784], "c1": [779, 780, 1148, 1149], "c2": [779, 780, 1148, 1149], "turboparkwakeix": [784, 785, 786, 787, 788, 789, 1297, 1306], "linearsuperposit": [790, 791, 792, 793, 794, 1289, 1300, 1306], "supersposit": [790, 795, 805, 1289], "rescal": [790, 795, 801, 805, 1289], "scale": [790, 791, 795, 796, 805, 806, 1059, 1060, 1069, 1077, 1148, 1149, 1304, 1312], "rule": [790, 791, 795, 796, 805, 806, 1059, 1060, 1069, 1077, 1300, 1310, 1315], "lim_low": [790, 791, 801, 802], "lower": [790, 791, 801, 802, 844, 1122, 1300, 1312], "lim_high": [790, 791, 801, 802], "svar": [790, 791, 795, 796, 805, 806], "vafriabl": [790, 791], "input_farm_var": [790, 794, 795, 800, 805, 810], "source_turbin": [791, 796, 806], "source_turbine_amb": [791, 796, 806], "source_turbine_": [791, 796, 806], "maxsuperposit": [795, 796, 797, 798, 799, 800, 1289, 1306], "maximum": [795, 851, 852, 853, 854, 855, 856, 1134, 1172, 1289, 1300, 1314], "productsuperposit": [801, 802, 803, 804, 1289, 1300, 1306], "product": [801, 1134, 1172, 1289, 1306], "dimensionless": 801, "deficit": [801, 1297, 1308, 1313, 1314, 1315], "rather": 801, "equival": [801, 1308, 1313, 1315], "arxiv": 801, "2010": 801, "03873": 801, "equat": [801, 1300], "quadraticsuperposit": [805, 806, 807, 808, 809, 810, 1289, 1306], "quadrat": [805, 811, 812, 1289, 1306], "tisuperposit": [811, 812, 813, 814, 1289, 1306], "ti_superp": [811, 812], "superp_to_amb": [811, 812], "anim": [815, 816, 817, 818, 819, 829, 844, 851, 852, 853, 854, 855, 856, 1293, 1300, 1312], "artist": [815, 817, 819, 844, 1293, 1300], "fig": [815, 816, 817, 819, 822, 829, 844, 851, 852, 853, 854, 855, 856, 1274, 1294, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "pyplot": [815, 816, 818, 822, 872, 877, 910, 920, 928, 935, 942, 950, 988, 999, 1009, 1177, 1187, 1197, 1207, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "figur": [815, 816, 820, 822, 844, 849, 851, 852, 853, 854, 855, 856, 864, 868, 869, 873, 909, 910, 916, 918, 920, 926, 928, 933, 935, 940, 942, 948, 950, 956, 977, 979, 986, 988, 997, 999, 1004, 1009, 1046, 1059, 1068, 1070, 1076, 1078, 1173, 1177, 1183, 1187, 1193, 1197, 1203, 1207, 1217, 1226, 1242, 1274, 1294, 1300, 1305, 1307, 1311, 1313], "add_gener": [815, 817, 1312], "gen": [815, 817, 819], "verbostii": 818, "artistanim": 818, "farmlayoutoutput": [820, 821, 822, 823, 824, 825, 826, 827, 828, 1293, 1300, 1303, 1305, 1307, 1310, 1313, 1314], "plot": [820, 822, 825, 826, 827, 828, 849, 851, 852, 853, 854, 855, 856, 864, 868, 869, 870, 872, 873, 875, 877, 910, 920, 928, 935, 942, 950, 1177, 1187, 1197, 1207, 1274, 1293, 1300, 1304, 1305, 1309, 1310, 1311, 1313, 1314, 1315], "layout": [820, 822, 823, 824, 825, 826, 827, 828, 868, 869, 956, 977, 979, 986, 988, 997, 999, 1004, 1009, 1046, 1059, 1068, 1070, 1076, 1078, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1290, 1293, 1299, 1300, 1301, 1312, 1313], "fre": 820, "from_r": [820, 821], "results_st": [820, 821], "from_result": [820, 821], "get_layout_data": [820, 823], "get_layout_dict": [820, 824], "get_figur": [820, 822, 827, 864, 868, 873, 1303, 1305, 1307, 1310, 1313, 1314], "color_bi": [820, 822, 1307, 1313, 1314], "fontsiz": [820, 822, 827], "figsiz": [820, 822, 829, 844, 851, 852, 853, 854, 855, 856, 870, 872, 877, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314], "annot": [820, 822, 1307, 1313, 1314], "write_plot": [820, 827], "write": [820, 825, 826, 827, 828, 829, 849, 857, 860, 861, 863, 864, 869, 870, 873, 875, 886, 892, 1275, 1293, 1294, 1300], "write_xyh": [820, 828], "write_csv": [820, 825, 861, 863], "write_json": [820, 826], "format_col2var": [820, 829, 849, 857, 860, 861, 864, 870, 873, 875], "print_model": [820, 829, 849, 857, 859, 861, 864, 870, 873, 875, 956, 977, 979, 986, 994, 997, 1002, 1059, 1068, 1070, 1076], "model_typ": [820, 829, 849, 857, 858, 861, 864, 870, 873, 875], "titl": [822, 851, 852, 853, 854, 855, 856, 867, 868, 869, 870, 872, 875, 877, 1173, 1177, 1183, 1187, 1193, 1197, 1203, 1207, 1298, 1303, 1307, 1309, 1310, 1312, 1313, 1314], "ax": [822, 829, 844, 851, 852, 853, 854, 855, 856, 870, 872, 877, 909, 910, 916, 918, 920, 926, 928, 933, 935, 940, 942, 948, 950, 956, 977, 979, 986, 988, 997, 999, 1004, 1009, 1046, 1059, 1068, 1070, 1076, 1078, 1173, 1177, 1183, 1187, 1193, 1197, 1203, 1207, 1217, 1226, 1242, 1303, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314], "normalize_d": 822, "ret_im": [822, 844, 851, 852, 853, 854, 855, 856, 1312], "barg": [822, 1177, 1187, 1197, 1207], "anno_delx": 822, "anno_d": 822, "scatter": [822, 844, 1300], "color": [822, 851, 852, 853, 854, 855, 856, 910, 920, 928, 935, 942, 950, 1300, 1313], "mean_rew": [822, 1307, 1313, 1314], "etc": [822, 1305, 1307], "wrt": [822, 829, 838, 839, 840, 841, 842, 909, 914, 916, 918, 924, 926, 931, 933, 938, 940, 946, 948, 954, 1013, 1023], "plt": [822, 844, 851, 852, 853, 854, 855, 856, 872, 877, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "No": 822, "matplotlib": [822, 844, 851, 852, 853, 854, 855, 856, 910, 920, 928, 933, 935, 942, 950, 988, 999, 1009, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "im": [822, 844, 851, 852, 853, 854, 855, 856], "pathcollect": [822, 844], "farmresultsev": [829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 1293, 1300, 1307, 1309, 1312, 1313, 1314], "farm_calc": 829, "weinsum": [829, 848], "rh": [829, 848], "einstein": [829, 848, 1300], "last": [829, 848, 907, 1302], "vars_op": [829, 846, 847], "some": [829, 845, 846, 847, 906, 1134, 1172, 1294, 1305, 1308, 1309, 1315], "reduce_turbin": [829, 847], "reduce_al": [829, 845], "states_op": [829, 845], "turbines_op": [829, 845], "calc_states_mean": [829, 838], "calc_states_sum": [829, 840], "calc_states_std": [829, 839], "deviat": [829, 839], "calc_turbine_mean": [829, 841], "calc_turbine_sum": [829, 842], "calc_farm_mean": [829, 834], "calc_farm_sum": [829, 835], "calc_mean_farm_pow": [829, 837, 1307, 1309, 1313, 1314], "calc_turbine_yield": [829, 836, 843, 1313], "annual": [829, 843, 1307, 1313, 1314], "add_capac": [829, 831, 1313], "p_nom": [829, 831], "calc_farm_yield": [829, 836, 1307, 1314], "turbine_yield": [829, 836], "power_uncert": [829, 836], "p75": [829, 836, 1300], "p90": [829, 836, 1300], "add_effici": [829, 832, 1313, 1314], "calc_farm_effici": [829, 833, 1307, 1313, 1314], "gen_stdata": [829, 844, 1312], "fulli": [834, 835, 845, 1173, 1174, 1183, 1184, 1193, 1194, 1203, 1204, 1301], "contract": [834, 835, 845, 1059, 1060, 1069, 1077], "uncertainti": 836, "trigger": 836, "farm_yield": 836, "_type_": 839, "_description_": 839, "hour": 843, "delta_t": 843, "p_unit_w": 843, "retur": 843, "durat": 843, "datetime64": 843, "seri": [843, 1300, 1308, 1313], "legloc": [844, 1312], "right": [844, 848, 853], "legend": [844, 866, 867, 868, 869], "It": [848, 1301, 1304, 1307, 1309, 1310], "about": [848, 1026, 1305, 1309], "hand": 848, "einsum": 848, "express": [848, 1122], "convent": [848, 907, 1134, 1172], "mention": [848, 1303, 1307], "obligatori": 848, "flowplots2d": [849, 850, 851, 852, 853, 854, 855, 856, 1293, 1300, 1304, 1305, 1307, 1311, 1312, 1314, 1315], "2d": [849, 851, 852, 853, 854, 855, 856, 909, 933, 940, 1293, 1294, 1314], "flow": [849, 851, 852, 853, 854, 855, 856, 1293, 1299, 1300, 1301, 1307, 1308, 1311, 1312], "runner": [849, 850, 1004, 1006, 1046, 1217, 1227, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1300, 1305, 1312, 1313, 1314], "get_mean_fig_xi": [849, 854, 1305, 1314], "resolut": [849, 851, 852, 853, 854, 855, 856, 1304, 1305, 1307, 1311, 1312, 1314, 1315], "xmin": [849, 851, 852, 854, 855, 1305, 1307, 1315], "ymin": [849, 851, 853, 854, 856, 1305, 1315], "get_mean_fig_xz": [849, 855], "x_direct": [849, 852, 853, 855, 856, 1307], "270": [849, 852, 853, 855, 856, 1303, 1307, 1309, 1311, 1315], "xz": [849, 852, 855, 1300], "get_mean_fig_yz": [849, 856], "gen_states_fig_xi": [849, 851, 1304, 1311, 1312, 1315], "gen_states_fig_xz": [849, 852, 1307], "gen_states_fig_yz": [849, 853, 1315], "xmax": [851, 852, 854, 855, 1305, 1307, 1312, 1315], "ymax": [851, 853, 854, 856, 1305, 1312, 1315], "xlabel": [851, 852, 854, 855], "ylabel": [851, 853, 854, 856], "xspace": [851, 852, 854, 855, 1304], "500": [851, 852, 853, 854, 855, 856, 1148, 1149, 1303, 1304, 1305, 1306, 1307, 1310, 1312, 1314], "yspace": [851, 853, 854, 856, 1304], "var_min": [851, 852, 853, 854, 855, 856], "var_max": [851, 852, 853, 854, 855, 856], "normalize_xi": [851, 854], "normalize_var": [851, 852, 853, 854, 855, 856], "vlabel": [851, 852, 853, 854, 855, 856], "add_bar": [851, 852, 853, 854, 855, 856], "cmap": [851, 852, 853, 854, 855, 856, 868, 869, 1309], "quiver_n": [851, 852, 853, 1304, 1312], "quiver_par": [851, 852, 853, 1304, 1312], "ret_stat": [851, 852, 853, 854, 855, 856], "space": [851, 852, 853, 854, 855, 856, 1108, 1134, 1136, 1142, 1172, 1183, 1184, 1226, 1242, 1248, 1292, 1300], "contourf": [851, 852, 853, 854, 855, 856], "pure": [851, 852, 853, 854, 855, 856, 1092, 1097, 1102, 1107, 1113, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1173, 1183, 1291, 1292, 1300], "minimum": [851, 852, 853, 854, 855, 856], "bar": [851, 852, 853, 854, 855, 856, 1134, 1172, 1177, 1187, 1197, 1207, 1259, 1260, 1314], "colormap": [851, 852, 853, 854, 855, 856], "th": [851, 852, 853, 1134, 1172], "quiver": [851, 852, 853], "usag": [851, 852, 853, 854, 855, 856, 1300], "si": [851, 852, 853, 854, 855, 856], "quadmesh": [851, 852, 853, 854, 855, 856], "quadcontourset": [851, 852, 853, 854, 855, 856], "zmin": [852, 853, 855, 856, 1307, 1315], "zmax": [852, 853, 855, 856, 1307, 1315], "zlabel": [852, 853, 855, 856], "zspace": [852, 853, 855, 856], "normalize_x": [852, 855], "normalize_z": [852, 853, 855, 856], "north": [852, 853, 855, 856, 1310], "ech": [852, 853], "normalize_i": [853, 856], "left": [853, 1312], "weight_turbin": [854, 855, 856], "job": 857, "handi": 857, "format_dict": [860, 886, 892], "underli": [860, 956, 957, 960, 977, 978, 979, 980, 981, 986, 987, 989, 997, 998, 1059, 1060, 1061, 1068, 1069, 1070, 1071, 1072, 1076, 1077, 1092, 1093, 1094, 1097, 1098, 1099, 1102, 1103, 1104, 1107, 1108, 1109, 1113, 1115, 1118, 1123, 1124, 1125, 1129, 1130, 1131, 1135, 1136, 1137, 1142, 1143, 1144, 1148, 1149, 1150, 1154, 1155, 1156, 1160, 1161, 1162, 1166, 1167, 1169], "flappi": [860, 886, 890, 1300, 1301], "fv": [860, 877, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "4f": [860, 886, 888, 892], "resultswrit": [861, 862, 863, 1293, 1300], "roseplotoutput": [864, 865, 866, 867, 868, 869, 873, 1293, 1310], "rose": [864, 866, 868, 869, 873, 1293, 1299, 1300, 1301, 1303, 1305, 1310, 1313], "get_data_info": [864, 867, 873], "dname": [864, 867, 873], "descript": [864, 867, 873, 1283, 1284, 1288, 1289, 1290, 1297], "sector": [864, 866, 868, 869, 873, 1299, 1300, 1301, 1308, 1313], "var_bin": [864, 866, 868, 869, 873], "px": [864, 868, 869, 873], "write_figur": [864, 869, 873], "bin": [866, 868, 869, 1302, 1303, 1313, 1314], "seper": [866, 868, 869], "relev": [866, 868, 869, 1289, 1297], "pd": [866, 1309, 1310, 1315], "long": [867, 1300], "text": 867, "turbo": [868, 869], "layout_dict": [868, 869], "title_dict": [868, 869], "stateturbinemap": [870, 871, 872, 1293, 1300, 1309], "heat": [870, 872, 1293, 1300], "plot_map": [870, 872, 1309], "subplot": [872, 877, 1303, 1305, 1309, 1311, 1312, 1313, 1314], "pcolormesh": 872, "statesroseplotoutput": [873, 874, 1293, 1300, 1303, 1305, 1307, 1310, 1313, 1314], "ws_var": [873, 874], "turbinetypecurv": [875, 876, 877, 1293, 1300, 1303, 1309], "plot_curv": [875, 877, 1303, 1309], "p_max": [875, 877, 909, 912, 916, 918, 922, 926, 929, 933, 936, 940, 944, 948, 952, 1305, 1309], "x_label": 877, "y_label": 877, "ws_min": [877, 1310], "ws_max": [877, 1310], "30": [877, 1303, 1305, 1312, 1313, 1314, 1315], "ws_step": 877, "05": [877, 1118, 1119, 1303, 1305, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "pmax_arg": 877, "mask": [877, 1299, 1300, 1301, 1310], "labl": 877, "minim": [877, 909, 913, 916, 918, 923, 926, 930, 933, 937, 940, 945, 948, 953, 979, 980, 1004, 1031, 1032, 1033, 1046, 1059, 1060, 1069, 1076, 1077, 1078, 1086, 1087, 1107, 1108, 1113, 1123, 1124, 1136, 1166, 1173, 1174, 1181, 1183, 1184, 1191, 1193, 1194, 1201, 1203, 1204, 1213, 1214, 1217, 1222, 1226, 1227, 1234, 1235, 1242, 1248, 1253, 1290, 1292, 1305], "dbase": 878, "must": [880, 881, 979, 1290, 1304], "py": 881, "file_man": 881, "keyerror": 884, "pandasfilehelp": [886, 887, 888, 889, 890, 891, 892, 1294], "default_reading_paramet": [886, 889], "support": [886, 1134, 1172, 1300, 1301, 1302, 1308], "default_writing_paramet": [886, 890], "data_file_format": [886, 887], "export": 886, "default_format_dict": [886, 888], "bz2": [886, 887, 889, 890], "gz": [886, 887, 889, 890, 1300, 1307, 1312, 1313, 1314], "zip": [886, 887, 889, 890], "h5": [886, 887, 889, 890], "mode": [886, 890], "5f": [886, 888], "6f": [886, 888], "3f": [886, 888], "read_fil": [886, 891, 1257, 1275], "write_fil": [886, 892], "calc_w": [893, 896, 897, 902, 1295], "ustar": [893, 895, 897, 901, 902, 905, 1295], "friction": [893, 895, 897, 901, 902, 905, 1295], "veloc": [893, 895, 897, 901, 902, 905, 1295], "logz": [894, 899, 903, 1295], "lz": [894, 898, 899, 903], "ws_ref": [895, 901, 905, 1295], "h_ref": [895, 901, 905, 1295], "refer": [895, 896, 901, 905, 1134, 1172, 1274, 1295, 1303, 1315], "height0": [896, 1295], "ws0": [896, 1295], "psi": [897, 900, 902, 904, 1295], "lgz": [898, 1295], "obukhov": [900, 901, 904, 905, 1303], "all_subclass": [906, 1294], "cl": [906, 916, 917, 1294], "cubic_root": [907, 1294, 1300], "a0": [907, 1294], "a1": [907, 1294], "a2": [907, 1294], "a3": [907, 1294], "root": [907, 1294], "polynomi": [907, 1294], "work": [907, 1300, 1302, 1304, 1312, 1314], "fast": [907, 1301], "you": [907, 1134, 1172, 1302, 1306, 1307, 1308, 1311, 1313, 1315], "spare": 907, "yourself": [907, 1303], "github": [907, 1299, 1300, 1301, 1302], "com": [907, 1274, 1277, 1300, 1301, 1302], "opencv": 907, "blob": 907, "master": 907, "modul": 907, "calib3d": 907, "src": 907, "polynom_solv": 907, "cpp": 907, "n_a0": 907, "delta_wd": [908, 1294], "wd_a": [908, 1294], "wd_b": [908, 1294], "close": [909, 933, 1294, 1304, 1312], "geometri": [909, 911, 915, 916, 917, 918, 919, 921, 925, 926, 932, 933, 939, 940, 943, 947, 948, 949, 951, 955, 956, 957, 1173, 1174, 1183, 1184, 1193, 1194, 1203, 1204, 1258, 1276, 1290, 1292, 1294, 1305], "p_min": [909, 912, 913, 916, 918, 922, 923, 926, 929, 930, 933, 936, 937, 940, 944, 945, 948, 952, 953, 1305], "points_dist": [909, 914, 916, 918, 924, 926, 931, 933, 938, 940, 946, 948, 954], "return_nearest": [909, 914, 916, 918, 924, 926, 931, 933, 938, 940, 946, 948, 954], "points_insid": [909, 915, 916, 918, 925, 926, 932, 933, 939, 940, 947, 948, 955], "insid": [909, 915, 916, 918, 925, 926, 932, 933, 939, 940, 941, 947, 948, 955, 956, 957, 977, 1290, 1304], "add_to_figur": [909, 910, 916, 918, 920, 926, 928, 933, 935, 940, 942, 948, 950, 1305], "show_boundari": [909, 910, 916, 918, 920, 926, 928, 933, 935, 940, 942, 948, 950], "invers": [909, 911, 916, 918, 921, 926, 933, 940, 943, 948, 951, 1134, 1172, 1315], "invert": [909, 911, 916, 918, 921, 926, 933, 940, 943, 948, 951, 1294], "fill_mod": [910, 920, 926, 928, 933, 935, 940, 942, 950, 1305], "inside_slategrai": [910, 920, 950], "pars_boundari": [910, 920, 928, 935, 942, 950], "pars_dist": [910, 920, 928, 935, 942, 950, 1305], "dist": [910, 914, 920, 924, 928, 931, 935, 938, 942, 946, 950, 954, 980, 1134, 1172], "dist_insid": [910, 920, 928, 935, 942, 950, 1305], "dist_outsid": [910, 920, 928, 935, 942, 950, 1305], "inside_": [910, 920, 928, 935, 942, 950], "outside_": [910, 920, 928, 935, 942, 950], "command": [910, 920, 928, 935, 942, 950, 1302], "invertedareageometri": [911, 921, 943, 948, 949, 950, 951, 952, 953, 954, 955, 1294], "probe": [914, 915, 924, 925, 931, 932, 938, 939, 946, 947, 954, 955, 1004, 1006], "nearest": [914, 924, 931, 938, 946, 954], "bundari": [914, 924, 931, 938, 946, 954], "smallest": [914, 924, 931, 938, 946, 954], "p_nearest": [914, 924, 931, 938, 946, 954], "areaintersect": [916, 917, 1294], "intersect": [916, 1277, 1278, 1294], "areaunion": [918, 919, 920, 921, 922, 923, 924, 925, 1294], "union": [918, 1294], "cobnstructor": [926, 927], "closedpolygon": [933, 934, 935, 936, 937, 938, 939, 1294, 1305], "polygon": [933, 934, 1258, 1294, 1305], "poli": 933, "halfplan": [940, 941, 942, 943, 944, 945, 946, 947, 1294], "half": [940, 1294], "orthogon": 940, "opt": [956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1283, 1300, 1305], "constraint": [956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 997, 998, 1004, 1007, 1013, 1014, 1015, 1016, 1018, 1019, 1021, 1022, 1023, 1027, 1031, 1034, 1046, 1078, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1143, 1149, 1155, 1161, 1167, 1173, 1183, 1193, 1203, 1217, 1218, 1226, 1227, 1228, 1242, 1249, 1291, 1305], "areageometryconstraint": [956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 1290], "farmconstraint": [956, 979, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 1290], "constrain": [956, 977, 1290], "sel_turbin": [956, 957, 977, 979, 980, 986, 987, 995, 997, 998, 1003, 1004, 1006, 1040, 1046, 1059, 1068, 1070, 1076, 1078, 1217, 1226, 1242], "disc_insid": [956, 957], "ensur": [956, 957], "full": [956, 957, 1300, 1303, 1307], "problem": [956, 957, 960, 961, 964, 965, 977, 978, 979, 980, 981, 982, 986, 987, 989, 990, 997, 998, 1004, 1006, 1007, 1008, 1011, 1012, 1013, 1018, 1021, 1022, 1023, 1026, 1046, 1059, 1060, 1061, 1062, 1063, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1300, 1305, 1313], "n_compon": [956, 964, 965, 968, 975, 976, 977, 979, 984, 985, 986, 992, 996, 997, 1013, 1014, 1015, 1022, 1023, 1059, 1063, 1065, 1066, 1067, 1068, 1070, 1074, 1075, 1076, 1092, 1096, 1097, 1101, 1102, 1106, 1107, 1112, 1113, 1117, 1118, 1120, 1121, 1122, 1123, 1128, 1129, 1133, 1135, 1140, 1141, 1142, 1146, 1147, 1148, 1152, 1153, 1154, 1158, 1159, 1160, 1164, 1165, 1166, 1168, 1169, 1171], "compon": [956, 959, 960, 961, 962, 964, 965, 968, 975, 976, 977, 979, 981, 982, 984, 985, 986, 989, 990, 992, 996, 997, 1004, 1013, 1023, 1034, 1035, 1046, 1059, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1070, 1072, 1073, 1074, 1075, 1076, 1078, 1092, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1112, 1113, 1115, 1116, 1117, 1118, 1122, 1123, 1125, 1126, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1137, 1138, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1171, 1172, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1279, 1280, 1282, 1305], "vardeps_float": [956, 975, 977, 979, 985, 986, 996, 997, 1059, 1067, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169], "calc_individu": [956, 960, 977, 979, 981, 986, 989, 997, 1059, 1061, 1068, 1070, 1072, 1076, 1092, 1094, 1097, 1099, 1102, 1104, 1107, 1109, 1113, 1115, 1118, 1123, 1125, 1129, 1131, 1135, 1137, 1142, 1144, 1148, 1150, 1154, 1156, 1160, 1162, 1166, 1169], "vars_int": [956, 959, 960, 961, 964, 965, 977, 979, 981, 982, 986, 989, 990, 997, 1004, 1011, 1012, 1013, 1018, 1019, 1021, 1022, 1023, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1059, 1061, 1062, 1063, 1068, 1070, 1072, 1073, 1076, 1078, 1088, 1089, 1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1123, 1125, 1126, 1129, 1131, 1132, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1173, 1175, 1176, 1183, 1185, 1186, 1193, 1195, 1196, 1203, 1205, 1206, 1217, 1218, 1223, 1224, 1226, 1228, 1236, 1237, 1238, 1239, 1242, 1249, 1254, 1255], "vars_float": [956, 959, 960, 961, 964, 965, 977, 979, 981, 982, 986, 989, 990, 997, 1004, 1011, 1012, 1013, 1018, 1019, 1021, 1022, 1023, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1059, 1061, 1062, 1063, 1068, 1070, 1072, 1073, 1076, 1078, 1088, 1089, 1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1123, 1125, 1126, 1129, 1131, 1132, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1173, 1175, 1176, 1183, 1185, 1186, 1193, 1195, 1196, 1203, 1205, 1206, 1217, 1218, 1223, 1224, 1226, 1228, 1236, 1237, 1238, 1239, 1242, 1249, 1254, 1255], "problem_result": [956, 960, 961, 964, 965, 977, 979, 981, 982, 986, 989, 990, 997, 1011, 1012, 1021, 1022, 1059, 1061, 1062, 1063, 1068, 1070, 1072, 1073, 1076, 1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1123, 1125, 1126, 1129, 1131, 1132, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1175, 1176, 1185, 1186, 1195, 1196, 1205, 1206, 1218, 1228, 1249, 1305], "calc_popul": [956, 961, 977, 979, 982, 986, 990, 997, 1059, 1062, 1068, 1070, 1073, 1076, 1092, 1095, 1097, 1100, 1102, 1105, 1107, 1110, 1113, 1116, 1118, 1123, 1126, 1129, 1132, 1135, 1138, 1142, 1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166, 1169], "n_sel_turbin": [956, 977, 979, 986, 993, 997, 1001, 1004, 1036, 1046, 1048, 1049, 1059, 1068, 1070, 1076, 1078, 1088, 1089, 1217, 1223, 1224, 1226, 1236, 1237, 1242, 1254, 1255], "add_to_layout_figur": [956, 977, 979, 986, 988, 997, 999, 1004, 1009, 1046, 1059, 1068, 1070, 1076, 1078, 1217, 1226, 1242], "get_bound": [956, 977, 979, 986, 1092, 1097, 1102, 1107, 1113, 1118, 1122, 1123, 1129], "check_individu": [956, 977, 979, 986, 1092, 1097, 1102, 1107, 1113, 1118, 1120, 1123, 1129], "constraint_valu": [956, 977, 979, 986, 1004, 1014, 1015, 1046, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1120, 1121, 1123, 1129, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "fullfil": [956, 977, 979, 986, 1004, 1014, 1015, 1046, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1120, 1121, 1123, 1129, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "check_popul": [956, 977, 979, 986, 1092, 1097, 1102, 1107, 1113, 1118, 1121, 1123, 1129], "component_nam": [956, 962, 977, 979, 986, 997, 1059, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169], "var_names_int": [956, 974, 977, 979, 986, 997, 1004, 1045, 1046, 1059, 1068, 1070, 1076, 1078, 1091, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1192, 1193, 1203, 1216, 1217, 1226, 1241, 1242], "n_vars_int": [956, 959, 960, 961, 964, 965, 970, 976, 977, 979, 981, 982, 986, 989, 990, 997, 1004, 1011, 1012, 1013, 1018, 1019, 1021, 1022, 1023, 1025, 1029, 1033, 1038, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1059, 1061, 1062, 1063, 1068, 1070, 1072, 1073, 1076, 1078, 1082, 1085, 1087, 1088, 1089, 1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1123, 1125, 1126, 1129, 1131, 1132, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1170, 1173, 1175, 1176, 1183, 1185, 1186, 1188, 1190, 1191, 1193, 1195, 1196, 1203, 1205, 1206, 1209, 1212, 1214, 1217, 1218, 1223, 1224, 1226, 1228, 1230, 1233, 1235, 1236, 1237, 1238, 1239, 1242, 1249, 1254, 1255, 1305], "var_names_float": [956, 973, 977, 979, 986, 997, 1004, 1044, 1046, 1059, 1068, 1070, 1076, 1078, 1090, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1182, 1183, 1193, 1202, 1203, 1215, 1217, 1225, 1226, 1240, 1242, 1256], "n_vars_float": [956, 959, 960, 961, 964, 965, 969, 975, 977, 979, 981, 982, 985, 986, 989, 990, 996, 997, 1004, 1011, 1012, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1028, 1032, 1037, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1059, 1061, 1062, 1063, 1067, 1068, 1070, 1072, 1073, 1076, 1078, 1081, 1084, 1086, 1088, 1089, 1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1118, 1123, 1125, 1126, 1129, 1131, 1132, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166, 1169, 1170, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1193, 1195, 1196, 1198, 1200, 1201, 1203, 1205, 1206, 1208, 1211, 1213, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1226, 1228, 1229, 1232, 1234, 1236, 1237, 1238, 1239, 1242, 1249, 1250, 1252, 1253, 1254, 1255, 1305], "vardeps_int": [956, 976, 977, 979, 986, 997, 1059, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169], "rename_vars_int": [956, 972, 977, 979, 986, 997, 1059, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169], "renam": [956, 971, 972, 977, 979, 986, 997, 1059, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1300], "rename_vars_float": [956, 971, 977, 979, 986, 997, 1059, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169], "finalize_individu": [956, 964, 977, 979, 986, 997, 1004, 1021, 1046, 1059, 1063, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1218, 1226, 1228, 1242, 1249], "champion": [956, 964, 977, 979, 986, 997, 1004, 1021, 1046, 1059, 1063, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1218, 1226, 1228, 1242, 1249], "finalize_popul": [956, 965, 977, 979, 986, 997, 1004, 1022, 1046, 1059, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "ana_deriv": [956, 959, 977, 979, 986, 997, 1059, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169], "analyt": [956, 959, 977, 979, 986, 997, 1013, 1059, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169], "possibl": [956, 959, 977, 979, 986, 997, 1059, 1068, 1070, 1076, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1134, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1172, 1310], "info": [956, 958, 977, 979, 986, 997, 1004, 1046, 1059, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "finish": [956, 967, 977, 979, 986, 997, 1004, 1046, 1059, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1305], "farmoptproblem": [957, 978, 980, 987, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1060, 1068, 1069, 1071, 1076, 1077, 1093, 1098, 1103, 1108, 1124, 1130, 1136, 1143, 1149, 1155, 1161, 1167, 1290, 1300], "optim": [957, 964, 978, 980, 986, 987, 998, 1004, 1006, 1010, 1021, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1060, 1063, 1068, 1069, 1071, 1076, 1077, 1078, 1088, 1089, 1093, 1098, 1103, 1108, 1118, 1124, 1130, 1134, 1136, 1143, 1149, 1155, 1161, 1167, 1172, 1173, 1183, 1193, 1203, 1217, 1218, 1223, 1224, 1226, 1228, 1236, 1237, 1238, 1239, 1242, 1249, 1254, 1255, 1283, 1290, 1291, 1292, 1298, 1299, 1300, 1301], "iwopi": [957, 980, 987, 998, 1004, 1006, 1007, 1008, 1013, 1023, 1118, 1169, 1173, 1183, 1193, 1203, 1290, 1292, 1301, 1305], "cannot": 959, "differenti": [959, 1013, 1023], "n_sel_compon": [959, 960, 961, 981, 982, 989, 990, 1061, 1062, 1072, 1073, 1094, 1095, 1099, 1100, 1104, 1105, 1109, 1110, 1115, 1116, 1125, 1126, 1131, 1132, 1137, 1138, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163], "n_pop": [961, 965, 982, 990, 1012, 1015, 1019, 1022, 1043, 1049, 1051, 1052, 1053, 1062, 1073, 1089, 1095, 1100, 1105, 1110, 1116, 1121, 1126, 1132, 1138, 1145, 1151, 1157, 1163, 1176, 1186, 1196, 1206, 1224, 1237, 1239, 1255, 1290], "old": [971, 972], "dep": [975, 976, 985, 996, 1059, 1060, 1067, 1069, 1077], "farmboundaryconstraint": [977, 978, 1290, 1305], "mindistconstraint": [979, 980, 981, 982, 983, 984, 985, 1290, 1305], "least": [979, 1134, 1172, 1290], "min_dist": [979, 980, 1123, 1124, 1135, 1136, 1173, 1174, 1183, 1184, 1193, 1194, 1203, 1204, 1226, 1227, 1305], "min_dist_unit": [979, 980, 1305], "constaint": [979, 983, 1123, 1127], "geom_layout": [986, 997, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1290], "farmobject": [997, 998, 999, 1000, 1001, 1002, 1003, 1059, 1060, 1069, 1070, 1071, 1077, 1290], "calc_farm_arg": [1004, 1006], "all_turbin": [1004, 1010, 1046, 1078, 1217, 1226, 1242], "tvar": [1004, 1041, 1046, 1078, 1217, 1226, 1242], "turbine_i": [1004, 1039, 1041, 1046, 1078, 1217, 1226, 1242], "parse_tvar": [1004, 1039, 1046, 1078, 1217, 1226, 1242], "tvr": [1004, 1039, 1046, 1078, 1217, 1226, 1242], "drop_var": [1004, 1026], "exclud": [1004, 1026], "update_problem_individu": [1004, 1042, 1046, 1050, 1078, 1217, 1226, 1238, 1242], "latest": [1004, 1042, 1043, 1046, 1050, 1051, 1078, 1217, 1226, 1238, 1239, 1242, 1302], "update_problem_popul": [1004, 1043, 1046, 1051, 1078, 1217, 1226, 1239, 1242], "apply_individu": [1004, 1011, 1046, 1078, 1173, 1175, 1183, 1185, 1193, 1195, 1203, 1205, 1217, 1226, 1242], "apply_popul": [1004, 1012, 1046, 1078, 1173, 1176, 1183, 1186, 1193, 1196, 1203, 1206, 1217, 1226, 1242], "whole": [1004, 1012, 1046, 1078, 1173, 1176, 1183, 1186, 1193, 1196, 1203, 1206, 1217, 1226, 1242, 1300], "int_inf": [1004, 1005, 1029, 1033, 1046, 1078, 1085, 1087, 1173, 1183, 1193, 1203, 1212, 1214, 1217, 1226, 1233, 1235, 1242], "999999": [1004, 1005, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "initial_values_int": [1004, 1025, 1046, 1078, 1082, 1173, 1183, 1188, 1193, 1203, 1209, 1217, 1226, 1230, 1242], "min_values_int": [1004, 1033, 1046, 1078, 1087, 1173, 1183, 1191, 1193, 1203, 1214, 1217, 1226, 1235, 1242], "max_values_int": [1004, 1029, 1046, 1078, 1085, 1173, 1183, 1190, 1193, 1203, 1212, 1217, 1226, 1233, 1242], "initial_values_float": [1004, 1024, 1046, 1078, 1081, 1173, 1178, 1183, 1193, 1198, 1203, 1208, 1217, 1219, 1226, 1229, 1242, 1250], "min_values_float": [1004, 1032, 1046, 1078, 1086, 1173, 1181, 1183, 1193, 1201, 1203, 1213, 1217, 1222, 1226, 1234, 1242, 1253], "max_values_float": [1004, 1028, 1046, 1078, 1084, 1173, 1180, 1183, 1193, 1200, 1203, 1211, 1217, 1221, 1226, 1232, 1242, 1252], "add_object": [1004, 1008, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1305], "varmap_int": [1004, 1007, 1008, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "varmap_float": [1004, 1007, 1008, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "add_constraint": [1004, 1007, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1305], "min_values_constraint": [1004, 1031, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "max_values_constraint": [1004, 1027, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "constraints_tol": [1004, 1016, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "toler": [1004, 1016, 1046, 1078, 1118, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "n_object": [1004, 1018, 1019, 1021, 1030, 1035, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1218, 1226, 1228, 1242, 1249, 1305], "n_constraint": [1004, 1016, 1018, 1019, 1021, 1022, 1027, 1031, 1034, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1218, 1226, 1228, 1242, 1249, 1305], "calc_gradi": [1004, 1013, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "ivar": [1004, 1013, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "gradient": [1004, 1013, 1023, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "get_gradi": [1004, 1013, 1023, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "obtain": [1004, 1023, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1303, 1307, 1314], "link": [1004, 1023, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1301, 1305, 1313], "maximize_obj": [1004, 1030, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "evaluate_individu": [1004, 1018, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "evaluate_popul": [1004, 1019, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "check_constraints_individu": [1004, 1014, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "check_constraints_popul": [1004, 1015, 1046, 1078, 1173, 1183, 1193, 1203, 1217, 1226, 1242], "subject": 1010, "fvar": 1013, "vr": 1013, "overload": 1013, "optfunctionlist": [1013, 1023], "n_vr": 1013, "ctol": 1016, "ret_prob_r": 1018, "addition": 1018, "con": [1018, 1019, 1021, 1022, 1218, 1228, 1249], "were": [1023, 1300, 1308, 1314, 1315], "previous": 1023, "cf": [1023, 1310], "problemdefaultfunc": 1023, "decid": [1026, 1302], "drop": 1026, "cma": 1027, "inf": [1028, 1032, 1084, 1086, 1122, 1180, 1181, 1200, 1201, 1211, 1213, 1221, 1222, 1232, 1234, 1252, 1253], "unbound": [1028, 1029, 1032, 1033, 1084, 1085, 1086, 1087, 1180, 1181, 1200, 1201, 1211, 1212, 1213, 1214, 1221, 1222, 1232, 1233, 1234, 1235, 1252, 1253], "cmi": 1031, "n_con": 1034, "n_obj": 1035, "farmvarsproblem": [1046, 1047, 1048, 1049, 1050, 1051, 1078, 1079, 1217, 1226, 1227, 1242, 1248, 1290, 1291, 1300], "pre_rotor_var": [1046, 1047], "post_rotor_var": [1046, 1047], "opt2farm_vars_individu": [1046, 1048, 1078, 1088, 1217, 1223, 1226, 1236, 1242, 1254], "opt2farm_vars_popul": [1046, 1049, 1078, 1089, 1217, 1224, 1226, 1237, 1242, 1255], "post_rotor": 1047, "super": [1047, 1083, 1220, 1231, 1251], "farm_var": [1048, 1049, 1088, 1089, 1223, 1224, 1236, 1237, 1254, 1255], "popstat": [1052, 1053, 1054, 1055, 1056, 1057, 1058, 1290], "artifici": [1052, 1290], "farmvarobject": [1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1076, 1290], "contract_st": [1059, 1060, 1069, 1077], "contract_turbin": [1060, 1069, 1077], "maxfarmpow": [1068, 1069, 1290, 1305], "maximize_pow": [1068, 1069, 1305], "maxnturbin": [1070, 1071, 1072, 1073, 1074, 1075, 1290], "turrbin": [1070, 1290], "check_valid": [1070, 1071], "count": [1070, 1071, 1300], "max_n_turbin": [1070, 1071], "minimalmaxti": [1076, 1077, 1290], "minimize_ti": [1076, 1077], "optfarmvar": [1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1291], "typ": [1078, 1080], "model_kei": 1080, "geometr": [1092, 1093, 1097, 1098, 1102, 1103, 1107, 1108, 1113, 1123, 1124, 1129, 1130, 1135, 1136, 1142, 1143, 1148, 1149, 1154, 1155, 1160, 1161, 1166, 1167, 1173, 1183, 1291, 1292, 1300], "cmpnt": [1092, 1094, 1095, 1097, 1099, 1100, 1102, 1104, 1105, 1107, 1109, 1110, 1113, 1115, 1116, 1123, 1125, 1126, 1129, 1131, 1132, 1135, 1137, 1138, 1142, 1144, 1145, 1148, 1150, 1151, 1154, 1156, 1157, 1160, 1162, 1163, 1166], "additio": [1093, 1098, 1103, 1108, 1124, 1130], "cfixn": [1097, 1098, 1099, 1100, 1101, 1292], "cmaxn": [1102, 1103, 1104, 1105, 1106, 1292], "cmindens": [1107, 1108, 1109, 1110, 1111, 1112, 1292], "min_valu": [1107, 1108], "dfactor": [1107, 1108, 1135, 1136], "min_dens": [1107, 1108], "cminn": [1113, 1114, 1115, 1116, 1117, 1292], "optfunct": [1118, 1169], "tol": [1118, 1119], "violat": 1118, "1e": [1118, 1119, 1305], "mindist": [1123, 1124, 1125, 1126, 1127, 1128, 1292], "cdist": [1134, 1172], "xa": [1134, 1172], "xb": [1134, 1172], "metric": [1134, 1172], "euclidean": [1134, 1172], "m_a": [1134, 1172], "observ": [1134, 1172], "m_b": [1134, 1172], "callabl": [1134, 1172], "braycurti": [1134, 1172], "canberra": [1134, 1172], "chebyshev": [1134, 1172], "cityblock": [1134, 1172], "cosin": [1134, 1172], "dice": [1134, 1172], "ham": [1134, 1172], "jaccard": [1134, 1172], "jensenshannon": [1134, 1172], "kulczynski1": [1134, 1172], "mahalanobi": [1134, 1172], "match": [1134, 1172], "minkowski": [1134, 1172], "rogerstanimoto": [1134, 1172], "russellrao": [1134, 1172], "seuclidean": [1134, 1172], "sokalmichen": [1134, 1172], "sokalsneath": [1134, 1172], "sqeuclidean": [1134, 1172], "yule": [1134, 1172], "norm": [1134, 1172], "unweight": [1134, 1172], "varianc": [1134, 1172], "vstack": [1134, 1172], "ddof": [1134, 1172], "vi": [1134, 1172], "covari": [1134, 1172], "matrix": [1134, 1172], "inv": [1134, 1172], "cov": [1134, 1172], "u": [1134, 1172, 1279, 1280, 1305], "ij": [1134, 1172], "except": [1134, 1172], "thrown": [1134, 1172], "arrang": [1134, 1172], "_p": [1134, 1172], "quasi": [1134, 1172], "citi": [1134, 1172], "block": [1134, 1172, 1305], "manhattan": [1134, 1172], "u_i": [1134, 1172], "v_i": [1134, 1172], "x_i": [1134, 1172], "squar": [1134, 1172], "_2": [1134, 1172], "frac": [1134, 1172], "cdot": [1134, 1172], "its": [1134, 1172, 1242, 1291, 1301, 1308, 1311], "dot": [1134, 1172], "proport": [1134, 1172], "those": [1134, 1172, 1308], "disagre": [1134, 1172], "To": [1134, 1172], "save": [1134, 1172, 1313], "shannon": [1134, 1172], "probabl": [1134, 1172], "q": [1134, 1172], "pointwis": [1134, 1172], "kullback": [1134, 1172], "leibler": [1134, 1172], "diverg": [1134, 1172], "precis": [1134, 1172], "max_i": [1134, 1172], "sum_i": [1134, 1172], "brai": [1134, 1172], "curti": [1134, 1172], "synonym": [1134, 1172], "kulczynski": [1134, 1172], "roger": [1134, 1172], "tanimoto": [1134, 1172], "russel": [1134, 1172], "rao": [1134, 1172], "sokal": [1134, 1172], "michen": [1134, 1172], "sneath": [1134, 1172], "suppli": [1134, 1172], "ariti": [1134, 1172], "could": [1134, 1172, 1300, 1308, 1310, 1311, 1314], "dm": [1134, 1172], "lambda": [1134, 1172], "librari": [1134, 1172, 1305, 1311], "would": [1134, 1172], "ineffici": [1134, 1172], "syntax": [1134, 1172], "find": [1134, 1172, 1300], "four": [1134, 1172, 1304], "35": [1134, 1172, 1303, 1305, 1312], "0456": [1134, 1172], "85": [1134, 1172, 1305], "2672": [1134, 1172], "1174": [1134, 1172], "89": [1134, 1172, 1305, 1309, 1313], "9711": [1134, 1172], "9728": [1134, 1172], "9422": [1134, 1172], "36": [1134, 1172, 1303, 1305], "1667": [1134, 1172], "86": [1134, 1172, 1298, 1305, 1307, 1313], "7833": [1134, 1172], "7044": [1134, 1172], "6172": [1134, 1172], "8856": [1134, 1172], "0893": [1134, 1172], "3561": [1134, 1172], "8477": [1134, 1172], "corner": [1134, 1172, 1304], "cube": [1134, 1172], "b": [1134, 1172, 1301], "9": [1134, 1172, 1300, 1302, 1303, 1305, 1306, 1309, 1310, 1311, 1313, 1315], "maxdens": [1135, 1136, 1137, 1138, 1139, 1140, 1141, 1292], "max_dens": [1135, 1136], "maxgridspac": [1142, 1143, 1144, 1145, 1146, 1147, 1292], "max_dxdi": [1142, 1143], "memimadist": [1148, 1149, 1150, 1151, 1152, 1153, 1292], "c3": [1148, 1149], "mimamean": [1148, 1149], "diff": 1149, "ofixn": [1154, 1155, 1156, 1157, 1158, 1159, 1292], "omaxn": [1160, 1161, 1162, 1163, 1164, 1165, 1166, 1292], "maxn": [1160, 1161], "ominn": [1166, 1167, 1168, 1292], "vnames_int": 1170, "vnames_float": 1170, "cname": 1170, "geomlayout": [1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1292, 1300], "involv": [1173, 1183, 1193, 1203, 1300], "calc_valid": [1173, 1174], "get_fig": [1173, 1177, 1183, 1187, 1193, 1197, 1203, 1207], "plotli": [1173, 1177, 1183, 1187, 1193, 1197, 1203, 1207, 1274, 1294, 1300], "true_circl": [1177, 1187, 1197, 1207], "ndarari": [1177, 1187, 1197, 1207], "draw": [1177, 1187, 1197, 1207], "geomlayoutgrid": [1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1292, 1300], "background": [1183, 1184, 1292, 1300, 1304, 1305, 1308], "grid_spac": [1183, 1184], "geomreggrid": [1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1292, 1300], "max_dist": [1193, 1194, 1203, 1204, 1227], "n_grid": [1203, 1204, 1226, 1227], "n_max": [1203, 1204], "n_row_max": [1203, 1204, 1227], "farmlayoutoptproblem": [1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1291, 1305], "reggridslayoutoptproblem": [1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1291], "sever": [1226, 1291, 1300], "mix": 1226, "min_spac": [1226, 1242, 1248], "max_n_row": 1226, "regularlayoutoptproblem": [1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1291, 1300], "spacing_x": [1242, 1246], "spacing_i": [1242, 1247], "offset_x": [1242, 1244], "offset_i": [1242, 1245], "read_shp": [1257, 1258, 1294, 1300], "fname": [1257, 1258, 1294], "shp": [1257, 1258, 1275, 1294], "geopanda": [1257, 1258, 1275], "geodatafram": 1257, "wsg84": 1257, "read_shp_polygon": [1258, 1276, 1294, 1300], "name_col": 1258, "geom_col": 1258, "to_utm": 1258, "ret_utm_zon": [1258, 1276, 1294], "extract": 1258, "utm": [1258, 1276], "zone": [1258, 1276], "letter": [1258, 1276], "32u": [1258, 1276], "point_dict_exterior": 1258, "point_dict_interior": 1258, "utm_zone_str": [1258, 1276], "utem": [1258, 1276], "daskrunn": [1259, 1260, 1261, 1262, 1263, 1264, 1265, 1294, 1300, 1304, 1305, 1312, 1313, 1314], "schedul": [1259, 1260, 1300, 1305, 1313], "progress_bar": [1259, 1260, 1300], "show": [1259, 1260, 1300, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1313, 1314, 1315], "progress": [1259, 1260, 1313, 1314], "cluster_arg": [1259, 1260], "explicit": [1259, 1260, 1300, 1304], "cluster": [1259, 1260, 1300, 1301, 1305, 1313, 1314], "setup": [1259, 1260, 1299, 1300, 1301, 1305, 1307, 1309, 1310, 1311, 1314, 1315], "client_arg": [1259, 1260], "client": [1259, 1260], "n_worker": [1259, 1260], "is_distribut": [1259, 1263], "threads_per_work": 1260, "process": [1260, 1308], "worker": [1260, 1313], "thread": [1260, 1313], "defaultrunn": [1266, 1267, 1294, 1300], "show_plotly_fig": [1274, 1294, 1300], "displai": [1274, 1294, 1313, 1314], "window": [1274, 1294, 1300], "stackoverflow": 1274, "question": [1274, 1305], "53570384": 1274, "how": [1274, 1299, 1300, 1301, 1309, 1313, 1314], "standalon": 1274, "shp2csv": [1275, 1294, 1300], "ifil": [1275, 1294], "ofil": [1275, 1294], "in_kwarg": [1275, 1294], "out_kwarg": [1275, 1294], "inam": 1275, "onam": 1275, "to_csv": 1275, "shp2geom2d": [1276, 1294], "shapefil": [1276, 1294], "geom": 1276, "tool": [1276, 1313], "two_circl": [1277, 1278], "r1": [1277, 1278, 1294], "r2": [1277, 1278, 1294], "sure": [1277, 1302, 1305, 1313], "These": [1277, 1289, 1304, 1305, 1307, 1312, 1315], "diego": 1277, "assencio": 1277, "8d6ca3d82151bad815f78addf9b5c1c6": 1277, "calc_area": [1278, 1294], "broadcast": [1278, 1280, 1281], "anoth": [1278, 1314, 1315], "uv2wd": [1279, 1294], "uv": [1279, 1280, 1294], "wd2uv": [1280, 1294], "against": [1280, 1281], "wd2wdvec": [1281, 1294], "wdvec": [1281, 1282, 1294], "wdvec2wd": [1282, 1294], "shortcut": 1283, "concret": [1283, 1289, 1297], "manag": [1284, 1299, 1300, 1301, 1308], "sweep": 1284, "until": [1284, 1300], "reach": [1284, 1287, 1300, 1312], "access": 1287, "atmospher": [1288, 1289, 1303], "interfac": [1288, 1300, 1305], "propag": [1289, 1300, 1308, 1312], "due": [1289, 1310], "ie": 1289, "avail": [1289, 1297, 1299, 1302, 1303, 1313], "machin": 1289, "net": 1289, "intern": [1290, 1301], "extern": 1290, "classif": 1297, "cite": 1298, "joss": 1298, "paper": 1298, "softwar": [1298, 1301, 1303], "bibtex": 1298, "schmidt2023": 1298, "author": [1298, 1303], "jona": [1298, 1304], "schmidt": 1298, "luka": 1298, "vollmer": 1298, "martin": 1298, "d\u00f6renk\u00e4mper": 1298, "bernhard": 1298, "stoevesandt": 1298, "21105": 1298, "05464": 1298, "url": 1298, "year": 1298, "2023": [1298, 1303, 1312], "publish": 1298, "journal": 1298, "volum": 1298, "page": 1298, "5464": 1298, "jupyt": 1299, "notebook": [1299, 1300, 1308], "folder": [1299, 1300], "repositori": [1299, 1301], "overview": [1299, 1300, 1301, 1311], "releas": [1300, 1302], "readi": [1300, 1306, 1311, 1312, 1315], "transfer": [1300, 1315], "fraunhof": [1300, 1301, 1305], "iw": [1300, 1301, 1303, 1305], "hous": 1300, "predecessor": [1300, 1301], "yet": 1300, "just": [1300, 1309], "enjoi": 1300, "await": 1300, "comment": 1300, "issu": [1300, 1301], "thank": 1300, "changelog": 1300, "fraunhoferiw": [1300, 1301, 1302], "commit": [1300, 1301], "style": 1300, "black": 1300, "small": [1300, 1303], "discov": 1300, "flake8": 1300, "now": [1300, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1314, 1315], "pytest": 1300, "unittest": 1300, "workflow": 1300, "docu": 1300, "io": 1300, "doc": [1300, 1313], "html": [1300, 1312], "miss": 1300, "wind_rot": [1300, 1304], "manifest": 1300, "orst": 1300, "pctsinglefil": 1300, "iecti2019": 1300, "iecti2005": 1300, "concept": [1300, 1312], "instal": [1300, 1301], "pip": [1300, 1301], "capabl": [1300, 1301], "As": [1300, 1302, 1315], "pcttwofil": 1300, "windroseoutput": 1300, "histogram": 1300, "ambientwindroseoutput": 1300, "improv": 1300, "browser": 1300, "featur": [1300, 1310], "wind_ros": 1300, "layout_single_st": 1300, "layout_wind_ros": 1300, "layout_opt": [1300, 1305], "ipynb": 1300, "demonstr": [1300, 1303, 1305, 1309, 1311, 1314, 1315], "wrf": [1300, 1307, 1308], "ambientroseplotoutput": 1300, "multi_height": 1300, "bug": 1300, "veer": 1300, "power_mask": 1300, "solv": [1300, 1305], "cubic": 1300, "forgotten": 1300, "api": [1300, 1301, 1313], "hotfix": 1300, "wsrho2pcttwofil": 1300, "sector_manag": 1300, "sector_man": 1300, "col_model": 1300, "offset": 1300, "compare_wak": 1300, "compar": [1300, 1309, 1310], "yawed_wak": 1300, "width": 1300, "simplifi": 1300, "accept": 1300, "replac": [1300, 1302], "intuit": 1300, "turboparkix": 1300, "summar": 1300, "bracket": 1300, "eq": 1300, "wrong": 1300, "layout_regular_grid": 1300, "geom_reggrid": 1300, "affect": [1300, 1309], "geopandas_help": 1300, "interior": 1300, "11": [1300, 1302, 1303, 1305, 1309, 1312, 1313, 1315], "cleaner": 1300, "treatment": 1300, "slimmer": 1300, "distribut": [1300, 1303, 1305, 1313], "move": [1300, 1305], "irrespect": 1300, "restart": 1300, "complet": [1300, 1303, 1306, 1307, 1310, 1312, 1313, 1314], "incomplet": 1300, "slurm": 1300, "queue": 1300, "system": [1300, 1302, 1303, 1308, 1311, 1313], "timeseries_slurm": 1300, "hpc": 1300, "apigen": 1300, "through": [1300, 1301], "outer": 1300, "consist": [1300, 1303, 1309, 1310, 1311, 1314], "timeseries_100": [1300, 1312], "short": [1300, 1303], "timestep": 1300, "vari": [1300, 1303, 1307], "chosen": 1300, "slow": 1300, "down": [1300, 1313], "prevent": 1300, "shown": [1300, 1303], "signal": [1300, 1312], "modular": 1301, "steer": 1301, "construct": 1301, "analysi": 1301, "studi": 1301, "comparison": 1301, "simul": [1301, 1303, 1308], "complex": [1301, 1313], "chain": 1301, "perform": 1301, "ow": 1301, "remot": 1301, "enabl": 1301, "well": [1301, 1303, 1305, 1315], "tracker": 1301, "report": 1301, "mit": 1301, "citat": 1301, "conda": 1301, "histori": 1301, "fork": [1301, 1302], "branch": [1301, 1302], "git": [1301, 1302, 1304], "checkout": 1301, "new_branch": 1301, "your": [1301, 1302, 1311], "am": [1301, 1312], "awesom": 1301, "messag": 1301, "push": 1301, "pull": 1301, "request": 1301, "develop": 1301, "flapfoam": 1301, "public": [1301, 1315], "publicli": 1301, "fund": 1301, "research": 1301, "project": 1301, "particular": [1301, 1313], "feder": 1301, "ministri": 1301, "econom": 1301, "affair": 1301, "climat": 1301, "action": [1301, 1308], "bmwk": 1301, "roject": 1301, "smart": 1301, "grant": 1301, "0325851b": 1301, "0325397b": 1301, "03ee3008a": 1301, "educ": 1301, "bmbf": 1301, "framework": 1301, "h2digit": 1301, "03sf0635": 1301, "venv": 1302, "conveni": [1302, 1311], "prefer": 1302, "python3": 1302, "Then": 1302, "activ": 1302, "everi": 1302, "leav": 1302, "deactiv": 1302, "altern": 1302, "dev": 1302, "egg": 1302, "clone": 1302, "cd": 1302, "whenev": 1302, "concern": 1302, "recommend": [1302, 1304], "forg": 1302, "channel": 1302, "while": 1302, "again": [1302, 1305, 1309], "build": 1302, "Such": 1303, "often": [1303, 1308], "terminologi": [1303, 1308, 1311], "three": [1303, 1315], "67": [1303, 1305, 1313], "randomli": 1303, "t0": [1303, 1305, 1309, 1310, 1311, 1313, 1315], "101872": [1303, 1313], "70": [1303, 1304, 1305, 1310, 1313], "1004753": [1303, 1313], "57": [1303, 1305, 1313, 1314], "t1": [1303, 1305, 1309, 1310, 1311, 1313, 1315], "103659": [1303, 1313], "97": [1303, 1305, 1313], "1002993": [1303, 1313], "29": [1303, 1305, 1312, 1313], "t2": [1303, 1305, 1309, 1311, 1313], "100780": [1303, 1313], "09": [1303, 1313], "1000779": [1303, 1313], "t3": [1303, 1305, 1309, 1311, 1313], "100290": [1303, 1313], "42": [1303, 1305, 1313], "1004330": [1303, 1313], "t4": [1303, 1305, 1309, 1311], "103005": 1303, "1003540": 1303, "t5": [1303, 1305], "100102": 1303, "92": [1303, 1305], "1004849": 1303, "55": [1303, 1305], "t6": [1303, 1305], "104162": 1303, "1001061": 1303, "like": [1303, 1308, 1310], "mesoscal": 1303, "75": [1303, 1304, 1305, 1307, 1313], "2009": [1303, 1307], "00": [1303, 1305, 1307, 1312, 1313], "37214": [1303, 1307], "42685": [1303, 1307], "28838": [1303, 1307], "31": [1303, 1304, 1305, 1307, 1313], "23": [1303, 1305, 1307, 1313], "27767": [1303, 1307], "36368": [1303, 1307], "30095": [1303, 1307], "At": 1303, "90": [1303, 1305, 1307], "150": [1303, 1305, 1307, 1313, 1314], "250": [1303, 1305, 1307, 1310, 1315], "o": [1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "16": [1303, 1305, 1307, 1309, 1310, 1313, 1314], "20": [1303, 1304, 1305, 1306, 1307, 1309, 1310, 1313, 1314], "svg": [1303, 1305, 1307, 1310, 1313, 1314], "binnd": 1303, "layer": 1303, "64": [1303, 1305, 1313], "253": 1303, "032": 1303, "542331196166035e": 1303, "65": [1303, 1305, 1313, 1314], "207": 1303, "145": 1303, "0001230528308906": 1303, "49": [1303, 1304, 1305], "46": [1303, 1305], "116": 1303, "0001563449299843": 1303, "72": [1303, 1304, 1305, 1309], "314": 1303, "048": 1303, "618827331554488e": 1303, "18": [1303, 1305, 1309], "302": 1303, "027": 1303, "694": 1303, "98695302482496e": 1303, "3000": [1303, 1305, 1309, 1315], "2018": 1303, "24": [1303, 1305, 1309, 1312, 1313], "172": 1303, "27": [1303, 1305, 1312, 1314], "51": [1303, 1305, 1312], "184": 1303, "13": [1303, 1305, 1307, 1309, 1312], "52": [1303, 1305], "198": 1303, "04": [1303, 1305, 1306], "34": [1303, 1305], "209": [1303, 1305], "93": [1303, 1305, 1312], "19": [1303, 1305, 1309, 1313], "78": [1303, 1305, 1314], "217": [1303, 1312], "223": 1303, "26": [1303, 1304, 1305, 1313], "68": [1303, 1305], "227": 1303, "02": [1303, 1305, 1306], "8000": [1303, 1311, 1313], "2017": [1303, 1313], "62": [1303, 1305, 1312, 1313], "244": [1303, 1313], "06": [1303, 1305, 1307, 1312, 1313], "0504": [1303, 1313], "99": [1303, 1305, 1310, 1313], "243": [1303, 1313], "03": [1303, 1305, 1311, 1313], "0514": [1303, 1313], "0522": [1303, 1313], "33": [1303, 1305, 1312, 1313], "241": [1303, 1313], "0523": [1303, 1313], "0518": 1303, "242": 1303, "0513": 1303, "12": [1303, 1305, 1309, 1311, 1312, 1314, 1315], "269": 1303, "836": 1303, "344": 1303, "268": 1303, "532": 1303, "267": 1303, "406": 1303, "265": 1303, "981": 1303, "39": [1303, 1304, 1305, 1311, 1312, 1313], "coars": [1303, 1305, 1314], "216": [1303, 1305, 1314], "site": [1303, 1305], "bremen": [1303, 1305, 1310], "germani": [1303, 1305], "00158": [1303, 1305, 1314], "00244": [1303, 1305, 1314], "00319": [1303, 1305, 1314], "00367": 1303, "00042": [1303, 1305, 1314], "veri": [1303, 1304, 1305, 1313], "inhomogen": 1303, "long_nam": 1303, "rotat": 1303, "subtitl": 1303, "date": 1303, "2021": 1303, "300": [1303, 1305, 1309, 1315], "2500": [1303, 1304, 1305], "180": 1303, "220": 1303, "120": 1303, "dtu10": 1303, "dtu10mw": [1303, 1306, 1312], "iea15": 1303, "iea15mw": [1303, 1306], "iwt7": [1303, 1306], "nrel5": [1303, 1309, 1311, 1313], "nrel5mw": [1303, 1304, 1305, 1306, 1307, 1309, 1311, 1313, 1314, 1315], "14": [1303, 1305, 1309, 1313], "nstate": 1303, "ncurv": 1303, "pctcurv": 1303, "categori": 1303, "relative_to": 1303, "parent": 1303, "lt": [1303, 1305, 1311], "posixpath": 1303, "gt": [1303, 1305, 1311], "printout": [1303, 1311], "feel": 1303, "invit": 1303, "best": [1304, 1305, 1310], "wai": 1304, "similar": 1304, "claim": 1304, "inlin": [1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "associ": 1304, "netcfd": 1304, "back": 1304, "our": [1304, 1305, 1306, 1307, 1309, 1310, 1314, 1315], "let": [1304, 1305, 1307, 1309, 1310, 1312, 1313, 1314, 1315], "domain": 1304, "rectangl": 1304, "realiz": [1304, 1315], "instanc": [1304, 1312], "streamlines_100": [1304, 1306], "grid16": [1304, 1306], "jensen_linear_k007": [1304, 1306, 1311], "4000": [1304, 1305, 1310, 1314], "implicit": [1304, 1305, 1313, 1315], "fr": [1304, 1307, 1309, 1311, 1313], "to_datafram": [1304, 1307, 1309, 1311, 1312, 1313, 1315], "scale_unit": [1304, 1312], "201": 1304, "158092": 1304, "491089": 1304, "1474": 1304, "211367": 1304, "208": [1304, 1305], "044994": 1304, "673386": 1304, "1580": 1304, "523022": 1304, "214": [1304, 1305], "523994": 1304, "960601": 1304, "1748": 1304, "171047": 1304, "218": 1304, "242345": 1304, "867297": 1304, "1127": 1304, "597810": 1304, "222": 1304, "297880": 1304, "283373": 1304, "1352": 1304, "715530": 1304, "899315": 1304, "731909": 1304, "808657": 1304, "1614": 1304, "607085": 1304, "1101": 1304, "211997": 1304, "236": 1304, "751304": 1304, "932726": 1304, "1156": 1304, "958672": 1304, "237": 1304, "139685": 1304, "375640": 1304, "142662": 1304, "1406": 1304, "547918": 1304, "801": 1304, "751505": 1304, "484049": 1304, "818854": 1304, "381124": 1304, "1665": 1304, "347000": 1304, "908": 1304, "970303": 1304, "311353": 1304, "703701": 1304, "149847": 1304, "1054": 1304, "871543": 1304, "454": 1304, "760942": 1304, "259090": 1304, "995899": 1304, "857833": 1304, "1185": 1304, "898485": 1304, "690": 1304, "639688": 1304, "676969": 1304, "357075": 1304, "1396": 1304, "122949": 1304, "44": [1304, 1305], "537113": 1304, "352448": 1304, "263710": 1304, "521": 1304, "748653": 1304, "492": 1304, "140844": 1304, "47": [1304, 1305], "447853": 1304, "960030": 1304, "917024": 1304, "724": 1304, "421405": 1304, "710": 1304, "071241": 1304, "815208": 1304, "580130": 1304, "998": [1304, 1305], "581195": 1304, "462887": 1304, "352662": 1304, "621921": 1304, "552147": 1304, "960214": 1304, "363478": 1304, "184792": 1304, "580285": 1304, "552663": 1304, "task": 1305, "detail": [1305, 1308, 1313], "pymoo": 1305, "nice": 1305, "genet": 1305, "optimizer_pymoo": 1305, "gm": 1305, "tackl": 1305, "wind_rose_bremen": [1305, 1310, 1314], "0036700002": [1305, 1314], "next": [1305, 1307, 1309, 1311, 1313, 1314], "1200": 1305, "800": [1305, 1311, 1312], "900": [1305, 1312, 1314], "float64": [1305, 1311], "1500": 1305, "700": 1305, "later": [1305, 1309, 1312, 1313], "wish": [1305, 1313, 1314, 1315], "t7": 1305, "t8": 1305, "t9": 1305, "notic": [1305, 1309, 1310, 1312, 1313, 1315], "shortli": 1305, "begin": 1305, "bastankhah_linear_k002": [1305, 1306, 1307, 1309, 1310], "n_obj_cmptn": 1305, "n_con_cmptn": 1305, "impli": 1305, "ga": 1305, "form": [1305, 1313], "n_max_gen": 1305, "pop_siz": 1305, "solver": 1305, "problem_par": 1305, "algo_par": 1305, "seed": 1305, "setup_par": 1305, "term_par": 1305, "ftol": 1305, "xtol": 1305, "print_info": 1305, "sampl": 1305, "float_random": 1305, "floatrandomsampl": 1305, "termin": 1305, "defaultsingleobjectivetermin": 1305, "001": 1305, "n_gen": 1305, "n_eval": 1305, "cv_min": 1305, "cv_avg": 1305, "f_avg": 1305, "f_min": 1305, "257950e": 1305, "094916e": 1305, "180418e": 1305, "141625e": 1305, "279782e": 1305, "157184e": 1305, "404513e": 1305, "577682e": 1305, "579169e": 1305, "703733e": 1305, "350": 1305, "531147e": 1305, "050876e": 1305, "400": 1305, "000000e": 1305, "605222e": 1305, "588240e": 1305, "450": 1305, "103920e": 1305, "527620e": 1305, "582192e": 1305, "550": 1305, "732673e": 1305, "600": [1305, 1307, 1309, 1310], "832754e": 1305, "586968e": 1305, "591846e": 1305, "650": 1305, "055741e": 1305, "588486e": 1305, "604179e": 1305, "8416979966": 1305, "586179e": 1305, "750": [1305, 1315], "0056020975": 1305, "586244e": 1305, "592827e": 1305, "609887e": 1305, "850": 1305, "597835e": 1305, "616432e": 1305, "601994e": 1305, "619099e": 1305, "608318e": 1305, "637494e": 1305, "615190e": 1305, "645683e": 1305, "1050": 1305, "622881e": 1305, "646187e": 1305, "1100": 1305, "631506e": 1305, "653047e": 1305, "1150": 1305, "640921e": 1305, "655091e": 1305, "648388e": 1305, "657861e": 1305, "1250": 1305, "651988e": 1305, "663615e": 1305, "1300": 1305, "655195e": 1305, "1350": 1305, "658165e": 1305, "667660e": 1305, "28": 1305, "1400": 1305, "660791e": 1305, "671652e": 1305, "1450": 1305, "663724e": 1305, "676832e": 1305, "667884e": 1305, "679974e": 1305, "1550": 1305, "672357e": 1305, "685551e": 1305, "1600": 1305, "676653e": 1305, "688468e": 1305, "1650": 1305, "681032e": 1305, "688999e": 1305, "1700": 1305, "684254e": 1305, "692540e": 1305, "1750": 1305, "686841e": 1305, "1800": 1305, "689011e": 1305, "693343e": 1305, "37": 1305, "1850": 1305, "690736e": 1305, "700848e": 1305, "38": 1305, "1900": 1305, "692806e": 1305, "701437e": 1305, "1950": 1305, "695244e": 1305, "702613e": 1305, "40": 1305, "2000": [1305, 1310], "698077e": 1305, "714461e": 1305, "2050": 1305, "701772e": 1305, "2100": 1305, "705495e": 1305, "716273e": 1305, "43": 1305, "2150": 1305, "709527e": 1305, "720787e": 1305, "2200": 1305, "712644e": 1305, "721430e": 1305, "45": 1305, "2250": 1305, "715937e": 1305, "722818e": 1305, "2300": 1305, "719261e": 1305, "726242e": 1305, "2350": 1305, "721874e": 1305, "728699e": 1305, "48": 1305, "2400": 1305, "724323e": 1305, "729085e": 1305, "2450": 1305, "726669e": 1305, "731540e": 1305, "729169e": 1305, "736498e": 1305, "2550": 1305, "731473e": 1305, "2600": 1305, "733755e": 1305, "739439e": 1305, "53": 1305, "2650": 1305, "736553e": 1305, "741091e": 1305, "54": [1305, 1313], "2700": 1305, "737859e": 1305, "2750": 1305, "739620e": 1305, "746115e": 1305, "56": 1305, "2800": 1305, "741132e": 1305, "2850": 1305, "742407e": 1305, "2900": 1305, "743667e": 1305, "59": [1305, 1314], "2950": 1305, "744499e": 1305, "747450e": 1305, "745637e": 1305, "749378e": 1305, "61": 1305, "3050": 1305, "746819e": 1305, "750740e": 1305, "3100": 1305, "748079e": 1305, "751545e": 1305, "63": [1305, 1313], "3150": 1305, "749500e": 1305, "752455e": 1305, "3200": 1305, "750617e": 1305, "3250": 1305, "751276e": 1305, "752688e": 1305, "66": [1305, 1313], "3300": 1305, "751675e": 1305, "753603e": 1305, "3350": 1305, "752037e": 1305, "753628e": 1305, "3400": 1305, "752663e": 1305, "754781e": 1305, "69": [1305, 1314], "3450": 1305, "753210e": 1305, "3500": 1305, "753684e": 1305, "756003e": 1305, "71": [1305, 1309], "3550": 1305, "754129e": 1305, "756178e": 1305, "3600": 1305, "754564e": 1305, "3650": 1305, "754982e": 1305, "74": 1305, "3700": 1305, "755313e": 1305, "756412e": 1305, "3750": 1305, "755677e": 1305, "756739e": 1305, "76": 1305, "3800": 1305, "756046e": 1305, "757165e": 1305, "77": 1305, "3850": 1305, "756341e": 1305, "757201e": 1305, "3900": 1305, "756572e": 1305, "79": [1305, 1311, 1312], "3950": 1305, "756786e": 1305, "757887e": 1305, "80": [1305, 1314], "756981e": 1305, "81": [1305, 1314], "4050": 1305, "757218e": 1305, "758950e": 1305, "82": 1305, "4100": 1305, "757455e": 1305, "4150": 1305, "757736e": 1305, "759250e": 1305, "84": [1305, 1307], "4200": 1305, "758026e": 1305, "759444e": 1305, "4250": 1305, "758291e": 1305, "759625e": 1305, "4300": 1305, "758684e": 1305, "760079e": 1305, "87": [1305, 1313], "4350": 1305, "759027e": 1305, "4400": 1305, "759303e": 1305, "4450": 1305, "759548e": 1305, "760143e": 1305, "4500": 1305, "759793e": 1305, "760262e": 1305, "91": [1305, 1314], "4550": 1305, "759921e": 1305, "760270e": 1305, "4600": 1305, "760019e": 1305, "760425e": 1305, "4650": 1305, "760142e": 1305, "94": 1305, "4700": 1305, "760209e": 1305, "4750": 1305, "760280e": 1305, "760452e": 1305, "96": 1305, "4800": 1305, "760358e": 1305, "760921e": 1305, "4850": 1305, "760427e": 1305, "98": [1305, 1307], "4900": 1305, "760498e": 1305, "4950": 1305, "760565e": 1305, "761165e": 1305, "760678e": 1305, "761176e": 1305, "success": 1305, "28805": 1305, "88231411075": 1305, "x_0000": 1305, "485921e": 1305, "y_0000": 1305, "382056e": 1305, "x_0001": 1305, "987319e": 1305, "y_0001": 1305, "890996e": 1305, "x_0002": 1305, "182853e": 1305, "y_0002": 1305, "747753e": 1305, "x_0003": 1305, "139201e": 1305, "y_0003": 1305, "356641e": 1305, "x_0004": 1305, "020335e": 1305, "y_0004": 1305, "496776e": 1305, "x_0005": 1305, "981859e": 1305, "y_0005": 1305, "499957e": 1305, "x_0006": 1305, "932836e": 1305, "y_0006": 1305, "805749e": 1305, "x_0007": 1305, "848747e": 1305, "y_0007": 1305, "195881e": 1305, "x_0008": 1305, "945980e": 1305, "y_0008": 1305, "133467e": 1305, "x_0009": 1305, "995140e": 1305, "y_0009": 1305, "422226e": 1305, "880588e": 1305, "boundary_0000": 1305, "123489e": 1305, "boundary_0001": 1305, "268076e": 1305, "boundary_0002": 1305, "boundary_0003": 1305, "444754e": 1305, "boundary_0004": 1305, "033538e": 1305, "boundary_0005": 1305, "325600e": 1305, "boundary_0006": 1305, "716411e": 1305, "boundary_0007": 1305, "boundary_0008": 1305, "401970e": 1305, "boundary_0009": 1305, "860046e": 1305, "dist_0_1": 1305, "004890e": 1305, "dist_0_2": 1305, "081612e": 1305, "dist_0_3": 1305, "498823e": 1305, "dist_0_4": 1305, "078024e": 1305, "dist_0_5": 1305, "033192e": 1305, "dist_0_6": 1305, "855850e": 1305, "dist_0_7": 1305, "157278e": 1305, "dist_0_8": 1305, "126570e": 1305, "dist_0_9": 1305, "311872e": 1305, "dist_1_2": 1305, "859991e": 1305, "dist_1_3": 1305, "987358e": 1305, "dist_1_4": 1305, "619425e": 1305, "dist_1_5": 1305, "588572e": 1305, "dist_1_6": 1305, "303327e": 1305, "dist_1_7": 1305, "031586e": 1305, "dist_1_8": 1305, "923787e": 1305, "dist_1_9": 1305, "011238e": 1305, "dist_2_3": 1305, "642213e": 1305, "dist_2_4": 1305, "107575e": 1305, "dist_2_5": 1305, "042475e": 1305, "dist_2_6": 1305, "443155e": 1305, "dist_2_7": 1305, "691061e": 1305, "dist_2_8": 1305, "425301e": 1305, "dist_2_9": 1305, "489707e": 1305, "dist_3_4": 1305, "384270e": 1305, "dist_3_5": 1305, "428153e": 1305, "dist_3_6": 1305, "532336e": 1305, "dist_3_7": 1305, "214096e": 1305, "dist_3_8": 1305, "072994e": 1305, "dist_3_9": 1305, "068366e": 1305, "dist_4_5": 1305, "441626e": 1305, "dist_4_6": 1305, "316865e": 1305, "dist_4_7": 1305, "329693e": 1305, "dist_4_8": 1305, "600566e": 1305, "dist_4_9": 1305, "517907e": 1305, "dist_5_6": 1305, "241159e": 1305, "dist_5_7": 1305, "911054e": 1305, "dist_5_8": 1305, "145074e": 1305, "dist_5_9": 1305, "057353e": 1305, "dist_6_7": 1305, "297112e": 1305, "dist_6_8": 1305, "746619e": 1305, "dist_6_9": 1305, "834433e": 1305, "dist_7_8": 1305, "441703e": 1305, "dist_7_9": 1305, "452990e": 1305, "dist_8_9": 1305, "392752e": 1305, "210": 1305, "211": 1305, "212": 1305, "213": 1305, "215": 1305, "995": 1305, "081": 1305, "109": 1305, "5e": 1305, "448": 1305, "8183": 1305, "994": 1305, "999": 1305, "338": 1305, "389": 1305, "674": 1305, "133e": 1305, "742": 1305, "00013": 1305, "u2": [1305, 1311], "visual": [1305, 1307, 1309, 1310, 1311, 1312, 1313], "dpar": 1305, "zorder": 1305, "outside_whit": 1305, "anyth": 1305, "organ": 1306, "farm_pmask": 1306, "pmask": [1306, 1309, 1310], "farm_hubh_data": 1306, "hubh_data": 1306, "farm_kti": 1306, "farm_kti_02": 1306, "kti_02": [1306, 1313], "farm_kti_04": 1306, "kti_04": 1306, "farm_kti_05": 1306, "kti_05": [1306, 1314, 1315], "farm_kti_amb": 1306, "kti_amb": 1306, "farm_kti_amb_02": 1306, "kti_amb_02": 1306, "farm_kti_amb_04": 1306, "kti_amb_04": 1306, "farm_kti_amb_05": 1306, "kti_amb_05": 1306, "farm_thrust2ct": 1306, "farm_yaw2yawm": 1306, "farm_yawm2yaw": 1306, "axiwake10": 1306, "axiwake2": 1306, "axiwake20": 1306, "axiwake3": 1306, "axiwake4": 1306, "axiwake5": 1306, "axiwake6": 1306, "axiwake7": 1306, "axiwake8": 1306, "axiwake9": 1306, "distslic": 1306, "distsliced100": 1306, "distsliced16": 1306, "distsliced25": 1306, "distsliced36": 1306, "distsliced4": 1306, "distsliced400": 1306, "distsliced49": 1306, "distsliced64": 1306, "distsliced81": 1306, "distsliced9": 1306, "grid100": 1306, "grid25": 1306, "grid36": 1306, "grid4": 1306, "grid400": 1306, "grid49": 1306, "grid64": 1306, "grid81": 1306, "grid9": [1306, 1307], "top_hat": 1306, "5mw": [1306, 1310, 1311, 1313], "null_typ": 1306, "rotor_wd_farmo": 1306, "streamlines_1": 1306, "streamlines_10": 1306, "streamlines_100_farmo": 1306, "streamlines_100_yaw": 1306, "streamlines_10_farmo": 1306, "streamlines_10_yaw": 1306, "streamlines_1_farmo": 1306, "streamlines_1_yaw": 1306, "streamlines_5": 1306, "streamlines_50": 1306, "streamlines_500": 1306, "streamlines_500_farmo": 1306, "streamlines_500_yaw": 1306, "streamlines_50_farmo": 1306, "streamlines_50_yaw": 1306, "streamlines_5_farmo": 1306, "streamlines_5_yaw": 1306, "timelines_10min": 1306, "timelines_10": [1306, 1312], "timelines_1km": 1306, "timelines_1min": 1306, "timelines_1": 1306, "timelines_30min": 1306, "timelines_30": 1306, "timelines_60min": 1306, "bastankhah_linear": [1306, 1314], "sp": 1306, "bastankhah_linear_amb": 1306, "linear_amb": 1306, "bastankhah_linear_amb_k002": 1306, "bastankhah_linear_amb_k004": 1306, "bastankhah_linear_k004": [1306, 1312], "bastankhah_linear_lim": 1306, "linear_lim": 1306, "bastankhah_linear_lim_k002": 1306, "bastankhah_linear_lim_k004": 1306, "bastankhah_max": 1306, "bastankhah_max_amb": 1306, "max_amb": 1306, "bastankhah_max_amb_k002": 1306, "bastankhah_max_amb_k004": 1306, "bastankhah_max_k002": 1306, "bastankhah_max_k004": 1306, "bastankhah_product": 1306, "bastankhah_product_k002": 1306, "bastankhah_product_k004": 1306, "bastankhah_product_lim": 1306, "product_lim": 1306, "bastankhah_product_lim_k002": 1306, "bastankhah_product_lim_k004": 1306, "bastankhah_quadrat": [1306, 1313], "bastankhah_quadratic_amb": 1306, "quadratic_amb": 1306, "bastankhah_quadratic_amb_k002": 1306, "bastankhah_quadratic_amb_k004": 1306, "bastankhah_quadratic_k002": 1306, "bastankhah_quadratic_k004": 1306, "crespohernandez_ambti_linear": 1306, "ti_linear": 1306, "crespohernandez_ambti_max": 1306, "ti_max": 1306, "crespohernandez_ambti_quadrat": 1306, "ti_quadrat": 1306, "crespohernandez_linear": 1306, "crespohernandez_linear_k002": 1306, "crespohernandez_max": [1306, 1313, 1314, 1315], "crespohernandez_max_k002": 1306, "crespohernandez_quadrat": 1306, "crespohernandez_quadratic_k002": 1306, "iecti2005_linear": 1306, "19076020221856677": 1306, "iecti2005_max": 1306, "iecti2005_quadrat": 1306, "iecti2019_linear": 1306, "iecti2019_max": 1306, "iecti2019_quadrat": 1306, "jensen_linear": 1306, "jensen_linear_amb": 1306, "jensen_linear_amb_k002": 1306, "jensen_linear_amb_k004": 1306, "jensen_linear_amb_k007": 1306, "jensen_linear_amb_k0075": 1306, "075": 1306, "jensen_linear_k002": 1306, "jensen_linear_k004": 1306, "jensen_linear_k0075": 1306, "jensen_linear_lim": 1306, "jensen_linear_lim_k002": 1306, "jensen_linear_lim_k004": 1306, "jensen_linear_lim_k007": 1306, "jensen_linear_lim_k0075": 1306, "jensen_max": 1306, "jensen_max_amb": 1306, "jensen_max_amb_k002": 1306, "jensen_max_amb_k004": 1306, "jensen_max_amb_k007": 1306, "jensen_max_amb_k0075": 1306, "jensen_max_k002": 1306, "jensen_max_k004": 1306, "jensen_max_k007": 1306, "jensen_max_k0075": 1306, "jensen_product": 1306, "jensen_product_k002": 1306, "jensen_product_k004": 1306, "jensen_product_k007": 1306, "jensen_product_k0075": 1306, "jensen_product_lim": 1306, "jensen_product_lim_k002": 1306, "jensen_product_lim_k004": 1306, "jensen_product_lim_k007": 1306, "jensen_product_lim_k0075": 1306, "jensen_quadrat": 1306, "jensen_quadratic_amb": 1306, "jensen_quadratic_amb_k002": 1306, "jensen_quadratic_amb_k004": 1306, "jensen_quadratic_amb_k007": 1306, "jensen_quadratic_amb_k0075": 1306, "jensen_quadratic_k002": 1306, "jensen_quadratic_k004": 1306, "jensen_quadratic_k007": 1306, "jensen_quadratic_k0075": 1306, "porteagel_linear": [1306, 1315], "porteagel_linear_amb": 1306, "porteagel_linear_amb_k002": 1306, "porteagel_linear_amb_k004": 1306, "porteagel_linear_k002": 1306, "porteagel_linear_k004": 1306, "porteagel_linear_lim": 1306, "porteagel_linear_lim_k002": 1306, "porteagel_linear_lim_k004": 1306, "porteagel_max": 1306, "porteagel_max_amb": 1306, "porteagel_max_amb_k002": 1306, "porteagel_max_amb_k004": 1306, "porteagel_max_k002": 1306, "porteagel_max_k004": 1306, "porteagel_product": 1306, "porteagel_product_k002": 1306, "porteagel_product_k004": 1306, "porteagel_product_lim": 1306, "porteagel_product_lim_k002": 1306, "porteagel_product_lim_k004": 1306, "porteagel_quadrat": 1306, "porteagel_quadratic_amb": 1306, "porteagel_quadratic_amb_k002": 1306, "porteagel_quadratic_amb_k004": 1306, "porteagel_quadratic_k002": 1306, "porteagel_quadratic_k004": 1306, "turboparkix_linear_a002_dx001": 1306, "turboparkix_linear_a002_dx1": 1306, "turboparkix_linear_a002_dx10": 1306, "turboparkix_linear_a002_dx100": 1306, "turboparkix_linear_a002_dx5": 1306, "turboparkix_linear_a002_dx50": 1306, "turboparkix_linear_a004_dx001": 1306, "turboparkix_linear_a004_dx1": 1306, "turboparkix_linear_a004_dx10": 1306, "turboparkix_linear_a004_dx100": 1306, "turboparkix_linear_a004_dx5": 1306, "turboparkix_linear_a004_dx50": 1306, "turboparkix_linear_amb_a002_dx001": 1306, "turboparkix_linear_amb_a002_dx1": 1306, "turboparkix_linear_amb_a002_dx10": 1306, "turboparkix_linear_amb_a002_dx100": 1306, "turboparkix_linear_amb_a002_dx5": 1306, "turboparkix_linear_amb_a002_dx50": 1306, "turboparkix_linear_amb_a004_dx001": 1306, "turboparkix_linear_amb_a004_dx1": 1306, "turboparkix_linear_amb_a004_dx10": 1306, "turboparkix_linear_amb_a004_dx100": 1306, "turboparkix_linear_amb_a004_dx5": 1306, "turboparkix_linear_amb_a004_dx50": 1306, "turboparkix_linear_lim_a002_dx001": 1306, "turboparkix_linear_lim_a002_dx1": 1306, "turboparkix_linear_lim_a002_dx10": 1306, "turboparkix_linear_lim_a002_dx100": 1306, "turboparkix_linear_lim_a002_dx5": 1306, "turboparkix_linear_lim_a002_dx50": 1306, "turboparkix_linear_lim_a004_dx001": 1306, "turboparkix_linear_lim_a004_dx1": 1306, "turboparkix_linear_lim_a004_dx10": 1306, "turboparkix_linear_lim_a004_dx100": 1306, "turboparkix_linear_lim_a004_dx5": 1306, "turboparkix_linear_lim_a004_dx50": 1306, "turboparkix_max_a002_dx001": 1306, "turboparkix_max_a002_dx1": 1306, "turboparkix_max_a002_dx10": 1306, "turboparkix_max_a002_dx100": 1306, "turboparkix_max_a002_dx5": 1306, "turboparkix_max_a002_dx50": 1306, "turboparkix_max_a004_dx001": 1306, "turboparkix_max_a004_dx1": 1306, "turboparkix_max_a004_dx10": 1306, "turboparkix_max_a004_dx100": 1306, "turboparkix_max_a004_dx5": 1306, "turboparkix_max_a004_dx50": 1306, "turboparkix_max_amb_a002_dx001": 1306, "turboparkix_max_amb_a002_dx1": 1306, "turboparkix_max_amb_a002_dx10": 1306, "turboparkix_max_amb_a002_dx100": 1306, "turboparkix_max_amb_a002_dx5": 1306, "turboparkix_max_amb_a002_dx50": 1306, "turboparkix_max_amb_a004_dx001": 1306, "turboparkix_max_amb_a004_dx1": 1306, "turboparkix_max_amb_a004_dx10": 1306, "turboparkix_max_amb_a004_dx100": 1306, "turboparkix_max_amb_a004_dx5": 1306, "turboparkix_max_amb_a004_dx50": 1306, "turboparkix_product_a002_dx001": 1306, "turboparkix_product_a002_dx1": 1306, "turboparkix_product_a002_dx10": 1306, "turboparkix_product_a002_dx100": 1306, "turboparkix_product_a002_dx5": 1306, "turboparkix_product_a002_dx50": 1306, "turboparkix_product_a004_dx001": 1306, "turboparkix_product_a004_dx1": 1306, "turboparkix_product_a004_dx10": 1306, "turboparkix_product_a004_dx100": 1306, "turboparkix_product_a004_dx5": 1306, "turboparkix_product_a004_dx50": 1306, "turboparkix_product_lim_a002_dx001": 1306, "turboparkix_product_lim_a002_dx1": 1306, "turboparkix_product_lim_a002_dx10": 1306, "turboparkix_product_lim_a002_dx100": 1306, "turboparkix_product_lim_a002_dx5": 1306, "turboparkix_product_lim_a002_dx50": 1306, "turboparkix_product_lim_a004_dx001": 1306, "turboparkix_product_lim_a004_dx1": 1306, "turboparkix_product_lim_a004_dx10": 1306, "turboparkix_product_lim_a004_dx100": 1306, "turboparkix_product_lim_a004_dx5": 1306, "turboparkix_product_lim_a004_dx50": 1306, "turboparkix_quadratic_a002_dx001": 1306, "turboparkix_quadratic_a002_dx1": 1306, "turboparkix_quadratic_a002_dx10": 1306, "turboparkix_quadratic_a002_dx100": 1306, "turboparkix_quadratic_a002_dx5": 1306, "turboparkix_quadratic_a002_dx50": 1306, "turboparkix_quadratic_a004_dx001": 1306, "turboparkix_quadratic_a004_dx1": 1306, "turboparkix_quadratic_a004_dx10": 1306, "turboparkix_quadratic_a004_dx100": 1306, "turboparkix_quadratic_a004_dx5": 1306, "turboparkix_quadratic_a004_dx50": 1306, "turboparkix_quadratic_amb_a002_dx001": 1306, "turboparkix_quadratic_amb_a002_dx1": 1306, "turboparkix_quadratic_amb_a002_dx10": 1306, "turboparkix_quadratic_amb_a002_dx100": 1306, "turboparkix_quadratic_amb_a002_dx5": 1306, "turboparkix_quadratic_amb_a002_dx50": 1306, "turboparkix_quadratic_amb_a004_dx001": 1306, "turboparkix_quadratic_amb_a004_dx1": 1306, "turboparkix_quadratic_amb_a004_dx10": 1306, "turboparkix_quadratic_amb_a004_dx100": 1306, "turboparkix_quadratic_amb_a004_dx5": 1306, "turboparkix_quadratic_amb_a004_dx50": 1306, "turbopark_linear_a002": 1306, "turbopark_linear_a004": 1306, "turbopark_linear_amb_a002": 1306, "turbopark_linear_amb_a004": 1306, "turbopark_linear_lim_a002": 1306, "turbopark_linear_lim_a004": 1306, "turbopark_max_a002": 1306, "turbopark_max_a004": 1306, "turbopark_max_amb_a002": 1306, "turbopark_max_amb_a004": 1306, "turbopark_product_a002": 1306, "turbopark_product_a004": 1306, "turbopark_product_lim_a002": 1306, "turbopark_product_lim_a004": 1306, "turbopark_quadratic_a002": 1306, "turbopark_quadratic_a004": 1306, "turbopark_quadratic_amb_a002": 1306, "turbopark_quadratic_amb_a004": 1306, "my_jensen": 1306, "042": 1306, "jensenwake45": 1306, "freshli": 1306, "similarli": [1306, 1309, 1315], "section": [1306, 1308, 1311, 1313, 1315], "explor": 1307, "download": 1307, "newa": 1307, "websit": 1307, "4464": 1307, "stamp": 1307, "mark": 1307, "month": 1307, "kinet": [1307, 1308], "energi": [1307, 1308], "assumpt": 1307, "variat": 1307, "neglect": 1307, "inflow": [1307, 1313], "manual": 1307, "alreadi": [1307, 1311], "howev": [1307, 1315], "neither": [1307, 1309], "goal": 1307, "certain": 1307, "approxim": 1307, "west": [1307, 1310, 1315], "undo": 1307, "earlier": 1307, "p0": [1307, 1309, 1313, 1314], "nfarm": [1307, 1309, 1311, 1312, 1313, 1314, 1315], "1f": [1307, 1309, 1313, 1314], "2f": [1307, 1309, 1313, 1314], "340": [1307, 1310], "14377": 1307, "593022": 1307, "1533": 1307, "584614": 1307, "83636": 1307, "192504": 1307, "1299": 1307, "635898": 1307, "299802": 1307, "1362": 1307, "286874": 1307, "538688": 1307, "1501": 1307, "771092": 1307, "226181": 1307, "1940": 1307, "207249": 1307, "532676": 1307, "4041": 1307, "896723": 1307, "22320": 1307, "131": 1307, "reflect": [1308, 1312, 1315], "script": 1308, "inform": [1308, 1311, 1313], "arbitrari": 1308, "becom": 1308, "reli": 1308, "averag": 1308, "stem": 1308, "henc": [1308, 1309, 1310, 1313], "approach": 1308, "might": 1308, "sdata": [1309, 1315], "exce": 1309, "nor": 1309, "pmax_": 1309, "s_": 1309, "pmax_4": 1309, "6000": [1309, 1310], "pmax_2": 1309, "pmax_0": 1309, "pmax_1": 1309, "pmax_3": 1309, "set_pmax": 1309, "thought": 1309, "sinc": [1309, 1312], "od": 1309, "furthermor": 1309, "somewher": 1309, "present": 1309, "influenc": 1309, "o1": 1309, "000000": [1309, 1311, 1312, 1313, 1315], "100622": 1309, "403": 1309, "460668": 1309, "230759": 1309, "160101": 1309, "836726": 1309, "448432": 1309, "102": 1309, "024826": 1309, "1771": 1309, "969501": 1309, "727": 1309, "422438": 1309, "109672": 1309, "440": 1309, "497551": 1309, "664896": 1309, "328": 1309, "099527": 1309, "346418": 1309, "256": 1309, "059846": 1309, "4562": 1309, "500000": 1309, "218395": 1309, "1934": 1309, "349917": 1309, "026105": 1309, "1202": 1309, "442515": 1309, "419438": 1309, "926": 1309, "179190": 1309, "069268": 1309, "768": 1309, "743105": 1309, "740422": 1309, "265493": 1309, "610241": 1309, "4829": 1309, "480538": 1309, "737726": 1309, "305147": 1309, "704317": 1309, "538785": 1309, "001123": 1309, "463783": 1309, "027022": 1309, "922952": 1309, "572237": 1309, "549852": 1309, "200276": 1309, "124457": 1309, "856675": 1309, "753726": 1309, "552823": 1309, "501976": 1309, "340518": 1309, "re": [1309, 1312], "o0": 1309, "edgecolor": 1309, "white": 1309, "ylorrd": 1309, "vmin": 1309, "vmax": 1309, "nanmax": 1309, "ylgn": 1309, "produc": [1309, 1313], "off": 1310, "persu": 1310, "east": 1310, "wd_min": 1310, "wd_max": 1310, "170": 1310, "191": 1310, "290": 1310, "110": 1310, "correspons": 1310, "fulfil": 1310, "ttype": 1310, "nrel": [1310, 1311, 1313], "d126": [1310, 1311, 1313], "h90": [1310, 1311, 1313], "sector_rul": 1310, "rews_min": 1310, "rews_max": 1310, "orient": 1310, "wa": [1310, 1312], "5001": 1310, "7000": 1310, "high": 1310, "westerli": 1310, "south": 1310, "summari": 1311, "skip": 1311, "own": 1311, "ask": 1311, "519e": 1311, "6e": 1311, "4e": 1311, "2e": 1311, "easili": 1311, "2518": 1311, "600000": 1311, "790000": 1311, "633459": 1311, "1557": 1311, "076947": 1311, "803665": 1311, "176627": 1311, "1290": 1311, "332498": 1311, "808234": 1311, "955794": 1311, "1167": 1311, "325199": 1311, "812210": 1311, "821354": 1311, "1106": 1311, "880886": 1311, "818932": 1311, "linspac": 1311, "15000": 1311, "npoint": 1311, "set_xlabel": 1311, "set_ylabel": 1311, "916": 1311, "principl": 1312, "backward": 1312, "trajectori": 1312, "hit": [1312, 1315], "fall": 1312, "necessari": 1312, "cross": [1312, 1315], "commun": 1312, "inlcud": 1312, "rcparam": 1312, "jshtml": 1312, "101": [1312, 1313, 1314], "204": 1312, "202": [1312, 1314], "324e": 1312, "lim": 1312, "000e": 1312, "fail": 1312, "ok": 1312, "behaviour": 1312, "farm_df": [1312, 1315], "1532": 1312, "700000": [1312, 1313], "063574": 1312, "845": 1312, "738040": 1312, "693421": 1312, "640": 1312, "016335": 1312, "gridspec_kw": 1312, "height_ratio": 1312, "anom": 1312, "panel": 1312, "013": 1312, "08": 1312, "fun": [1312, 1313], "304": 1312, "desir": [1313, 1315], "timeseries_8000": 1313, "test_farm_67": 1313, "further": 1313, "alwai": 1313, "598951": 1313, "307949": 1313, "067607": 1313, "522240": 1313, "728003": 1313, "299": 1313, "208883": 1313, "4868": 1313, "2712": 1313, "819583": 1313, "435150": 1313, "4752": 1313, "878044": 1313, "750000": 1313, "607321": 1313, "4828": 1313, "202797": 1313, "769528": 1313, "3234": 1313, "107125": 1313, "536000": 1313, "turbine_result": 1313, "nresult": 1313, "3067": 1313, "723397": 1313, "2778": 1313, "987770": 1313, "613545": 1313, "555798": 1313, "825445": 1313, "873257": 1313, "2531": 1313, "065918": 1313, "506213": 1313, "713413": 1313, "2702": 1313, "820210": 1313, "540564": 1313, "780747": 1313, "2739": 1313, "058250": 1313, "547812": 1313, "805992": 1313, "2593": 1313, "172270": 1313, "518634": 1313, "737070": 1313, "2625": 1313, "796799": 1313, "525159": 1313, "748704": 1313, "2591": 1313, "950988": 1313, "518390": 1313, "731988": 1313, "2864": 1313, "102273": 1313, "572820": 1313, "860799": 1313, "2571": 1313, "260829": 1313, "514252": 1313, "726062": 1313, "2633": 1313, "819847": 1313, "526764": 1313, "755245": 1313, "343933": 1313, "172137": 1313, "676705": 1313, "994150": 1313, "716189": 1313, "001980": 1313, "705491": 1313, "089536": 1313, "524245": 1313, "072262": 1313, "177": 1313, "205": 1313, "1558": 1313, "seen": 1313, "mean_eff": [1313, 1314], "faster": 1313, "overhead": 1313, "But": 1313, "extrem": 1313, "realli": 1313, "dai": 1313, "nmean": 1313, "launch": 1313, "localclust": 1313, "3daf1815": 1313, "tcp": 1313, "40111": 1313, "128": 1313, "251": 1313, "gib": 1313, "dashboard": 1313, "8787": 1313, "statu": 1313, "shut": 1313, "runtim": 1313, "localhost": 1313, "address": 1313, "plenti": 1313, "relat": 1314, "686": 1314, "perfectli": 1314, "fine": 1314, "aim": 1315, "set_yawm": 1315, "want": 1315, "sensit": 1315, "continu": 1315, "downstream": 1315, "clearli": 1315, "frontal": 1315, "146549": 1315, "042770": 1315, "240": 1315, "co": 1315, "corect": 1315, "fact": 1315, "p_": 1315, "crespohernandez": 1315, "even": 1315, "though": 1315}, "objects": {"foxes.algorithms": [[0, 0, 1, "", "Downwind", "The downwind algorithm."], [22, 0, 1, "", "Iterative", "Iterative calculation of farm data."]], "foxes.algorithms.Downwind": [[1, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."], [5, 0, 1, "", "PointWakesCalculation", "This model calculates wake effects at points of interest."], [11, 0, 1, "", "SetAmbPointResults", "This model copies point results to ambient results."], [16, 1, 1, "", "__init__", "Constructor."], [17, 1, 1, "", "calc_farm", "Calculate farm data."], [18, 1, 1, "", "calc_points", "Calculate data at a given set of points."], [19, 1, 1, "", "finalize", "Finalizes the algorithm."], [20, 1, 1, "", "init_states", "Initialize states, if needed."], [21, 1, 1, "", "initialize", "Initializes the algorithm."]], "foxes.algorithms.Downwind.FarmWakesCalculation": [[2, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [3, 1, 1, "", "initialize", "Initializes the model."], [4, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.Downwind.PointWakesCalculation": [[6, 1, 1, "", "__init__", "Constructor."], [7, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [8, 1, 1, "", "contribute_to_wake_deltas", "Contribute to wake deltas from source turbines"], [9, 1, 1, "", "initialize", "Initializes the model."], [10, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.algorithms.Downwind.SetAmbPointResults": [[12, 1, 1, "", "__init__", "Constructor."], [13, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [14, 1, 1, "", "initialize", "Initializes the model."], [15, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.algorithms.Iterative": [[23, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."], [27, 1, 1, "", "__init__", "Constructor."], [28, 1, 1, "", "calc_farm", "Calculate farm data."], [29, 2, 1, "", "iterations", "The current iteration number"]], "foxes.algorithms.Iterative.FarmWakesCalculation": [[24, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [25, 1, 1, "", "initialize", "Initializes the model."], [26, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models": [[30, 0, 1, "", "CalcOrder", "This model calculates the turbine evaluation order, via wake frames."], [34, 0, 1, "", "SetAmbFarmResults", "This model copies farm data results to ambient results."]], "foxes.algorithms.downwind.models.CalcOrder": [[31, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [32, 1, 1, "", "initialize", "Initializes the model."], [33, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.SetAmbFarmResults": [[35, 1, 1, "", "__init__", "Constructor."], [36, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [37, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.iterative": [[38, 0, 1, "", "ConvCrit", "Abstract base class for convergence criteria"], [42, 0, 1, "", "ConvCritList", "A list of convergence criteria"], [47, 0, 1, "", "ConvVarDelta", "Requires convergence of a selection of variables."], [51, 0, 1, "", "DefaultConv", "Default convergence criteria."]], "foxes.algorithms.iterative.ConvCrit": [[39, 1, 1, "", "__init__", "Constructor."], [40, 1, 1, "", "check_converged", "Check convergence criteria."], [41, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvCritList": [[43, 1, 1, "", "__init__", "Constructor."], [44, 1, 1, "", "add_crit", "Add a convergence criterion"], [45, 1, 1, "", "check_converged", "Check convergence criteria."], [46, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvVarDelta": [[48, 1, 1, "", "__init__", "Constructor."], [49, 1, 1, "", "check_converged", "Check convergence criteria."], [50, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.DefaultConv": [[52, 1, 1, "", "__init__", "Constructor."]], "foxes.constants": [[191, 3, 1, "", "AMB_RPOINT_RESULTS", "Identified for ambient rotor point results"], [192, 4, 1, "", "DTYPE", "Default data type for floats"], [315, 3, 1, "", "FARM", "Wind farm identifier"], [316, 3, 1, "", "GW", "The unit giga watt"], [317, 4, 1, "", "ITYPE", "Default data type for int"], [367, 3, 1, "", "KAPPA", "The Van-Karman constant"], [368, 3, 1, "", "MW", "The unit mega watt"], [369, 3, 1, "", "POINT", "Point identifier"], [370, 3, 1, "", "POINTS", "Points identifier"], [371, 3, 1, "", "POP", "Population identifier"], [372, 3, 1, "", "P_UNITS", "Power unit factors relative to watts, key: unit str, value: factor"], [373, 3, 1, "", "RPOINT", "Rotor point identifier"], [374, 3, 1, "", "RPOINTS", "Rotor points identifier"], [375, 3, 1, "", "RWEIGHTS", "Rotor point weights identifier"], [376, 3, 1, "", "STATE", "States identifier"], [377, 3, 1, "", "STATES_SEL", "Identifier for states selection"], [378, 3, 1, "", "STATE_POINT", "Identifier for state-point dimensions"], [379, 3, 1, "", "STATE_SOURCE_TURBINE", "Identifier for the source turbines per state"], [380, 3, 1, "", "STATE_TURBINE", "Identifier for state-turbine dimensions"], [381, 3, 1, "", "TMODELS", "Turbine models identifier"], [382, 3, 1, "", "TMODEL_SELS", "Selected turbine models identifier"], [383, 3, 1, "", "TNAME", "Wind turbine name identifier"], [384, 3, 1, "", "TURBINE", "Wind turbine identifier"], [385, 3, 1, "", "TW", "The unit terra watt"], [386, 3, 1, "", "VALID", "Validity identifier"], [387, 3, 1, "", "VARS", "Variables identifier"], [388, 3, 1, "", "W", "The unit watt"], [389, 3, 1, "", "XYH", "The vector (x, y, height)"], [390, 3, 1, "", "kW", "The unit kilo watt"]], "foxes.constants.DTYPE": [[193, 4, 1, "", "T", "Scalar attribute identical to the corresponding array attribute."], [194, 1, 1, "", "__abs__", "abs(self)"], [195, 1, 1, "", "__add__", "Return self+value."], [196, 1, 1, "", "__and__", "Return self&value."], [197, 1, 1, "", "__array__", "sc.__array__(dtype) return 0-dim array from scalar with specified dtype"], [198, 4, 1, "", "__array_interface__", "Array protocol: Python side"], [199, 4, 1, "", "__array_priority__", "Array priority."], [200, 4, 1, "", "__array_struct__", "Array protocol: struct"], [201, 1, 1, "", "__array_wrap__", "sc.__array_wrap__(obj) return scalar from array"], [202, 1, 1, "", "__bool__", "True if self else False"], [203, 1, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [204, 1, 1, "", "__divmod__", "Return divmod(self, value)."], [205, 1, 1, "", "__eq__", "Return self==value."], [206, 1, 1, "", "__float__", "float(self)"], [207, 1, 1, "", "__floordiv__", "Return self//value."], [208, 1, 1, "", "__format__", "NumPy array scalar formatter"], [209, 1, 1, "", "__ge__", "Return self>=value."], [210, 1, 1, "", "__getitem__", "Return self[key]."], [211, 1, 1, "", "__gt__", "Return self>value."], [212, 1, 1, "", "__hash__", "Return hash(self)."], [213, 1, 1, "", "__int__", "int(self)"], [214, 1, 1, "", "__invert__", "~self"], [215, 1, 1, "", "__le__", "Return self<=value."], [216, 1, 1, "", "__lshift__", "Return self<<value."], [217, 1, 1, "", "__lt__", "Return self<value."], [218, 1, 1, "", "__mod__", "Return self%value."], [219, 1, 1, "", "__mul__", "Return self*value."], [220, 1, 1, "", "__ne__", "Return self!=value."], [221, 1, 1, "", "__neg__", "-self"], [222, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [223, 1, 1, "", "__or__", "Return self|value."], [224, 1, 1, "", "__pos__", "+self"], [225, 1, 1, "", "__pow__", "Return pow(self, value, mod)."], [226, 1, 1, "", "__radd__", "Return value+self."], [227, 1, 1, "", "__rand__", "Return value&self."], [228, 1, 1, "", "__rdivmod__", "Return divmod(value, self)."], [229, 1, 1, "", "__reduce__", "Helper for pickle."], [230, 1, 1, "", "__repr__", "Return repr(self)."], [231, 1, 1, "", "__rfloordiv__", "Return value//self."], [232, 1, 1, "", "__rlshift__", "Return value<<self."], [233, 1, 1, "", "__rmod__", "Return value%self."], [234, 1, 1, "", "__rmul__", "Return value*self."], [235, 1, 1, "", "__ror__", "Return value|self."], [236, 1, 1, "", "__rpow__", "Return pow(value, self, mod)."], [237, 1, 1, "", "__rrshift__", "Return value>>self."], [238, 1, 1, "", "__rshift__", "Return self>>value."], [239, 1, 1, "", "__rsub__", "Return value-self."], [240, 1, 1, "", "__rtruediv__", "Return value/self."], [241, 1, 1, "", "__rxor__", "Return value^self."], [242, 1, 1, "", "__sizeof__", "Size of object in memory, in bytes."], [243, 1, 1, "", "__str__", "Return str(self)."], [244, 1, 1, "", "__sub__", "Return self-value."], [245, 1, 1, "", "__truediv__", "Return self/value."], [246, 1, 1, "", "__xor__", "Return self^value."], [247, 1, 1, "", "all", "Scalar method identical to the corresponding array attribute."], [248, 1, 1, "", "any", "Scalar method identical to the corresponding array attribute."], [249, 1, 1, "", "argmax", "Scalar method identical to the corresponding array attribute."], [250, 1, 1, "", "argmin", "Scalar method identical to the corresponding array attribute."], [251, 1, 1, "", "argsort", "Scalar method identical to the corresponding array attribute."], [252, 1, 1, "", "as_integer_ratio", "Return a pair of integers, whose ratio is exactly equal to the original floating point number, and with a positive denominator. Raise OverflowError on infinities and a ValueError on NaNs."], [253, 1, 1, "", "astype", "Scalar method identical to the corresponding array attribute."], [254, 4, 1, "", "base", "Scalar attribute identical to the corresponding array attribute."], [255, 1, 1, "", "byteswap", "Scalar method identical to the corresponding array attribute."], [256, 1, 1, "", "choose", "Scalar method identical to the corresponding array attribute."], [257, 1, 1, "", "clip", "Scalar method identical to the corresponding array attribute."], [258, 1, 1, "", "compress", "Scalar method identical to the corresponding array attribute."], [259, 1, 1, "", "conj", ""], [260, 1, 1, "", "conjugate", "Scalar method identical to the corresponding array attribute."], [261, 1, 1, "", "copy", "Scalar method identical to the corresponding array attribute."], [262, 1, 1, "", "cumprod", "Scalar method identical to the corresponding array attribute."], [263, 1, 1, "", "cumsum", "Scalar method identical to the corresponding array attribute."], [264, 4, 1, "", "data", "Pointer to start of data."], [265, 1, 1, "", "diagonal", "Scalar method identical to the corresponding array attribute."], [266, 4, 1, "", "dtype", "Get array data-descriptor."], [267, 1, 1, "", "dump", "Scalar method identical to the corresponding array attribute."], [268, 1, 1, "", "dumps", "Scalar method identical to the corresponding array attribute."], [269, 1, 1, "", "fill", "Scalar method identical to the corresponding array attribute."], [270, 4, 1, "", "flags", "The integer value of flags."], [271, 4, 1, "", "flat", "A 1-D view of the scalar."], [272, 1, 1, "", "flatten", "Scalar method identical to the corresponding array attribute."], [273, 1, 1, "", "getfield", "Scalar method identical to the corresponding array attribute."], [274, 4, 1, "", "imag", "The imaginary part of the scalar."], [275, 1, 1, "", "is_integer", "Return True if the floating point number is finite with integral value, and False otherwise."], [276, 1, 1, "", "item", "Scalar method identical to the corresponding array attribute."], [277, 1, 1, "", "itemset", "Scalar method identical to the corresponding array attribute."], [278, 4, 1, "", "itemsize", "The length of one element in bytes."], [279, 1, 1, "", "max", "Scalar method identical to the corresponding array attribute."], [280, 1, 1, "", "mean", "Scalar method identical to the corresponding array attribute."], [281, 1, 1, "", "min", "Scalar method identical to the corresponding array attribute."], [282, 4, 1, "", "nbytes", "The length of the scalar in bytes."], [283, 4, 1, "", "ndim", "The number of array dimensions."], [284, 1, 1, "", "newbyteorder", "Return a new dtype with a different byte order."], [285, 1, 1, "", "nonzero", "Scalar method identical to the corresponding array attribute."], [286, 1, 1, "", "prod", "Scalar method identical to the corresponding array attribute."], [287, 1, 1, "", "ptp", "Scalar method identical to the corresponding array attribute."], [288, 1, 1, "", "put", "Scalar method identical to the corresponding array attribute."], [289, 1, 1, "", "ravel", "Scalar method identical to the corresponding array attribute."], [290, 4, 1, "", "real", "The real part of the scalar."], [291, 1, 1, "", "repeat", "Scalar method identical to the corresponding array attribute."], [292, 1, 1, "", "reshape", "Scalar method identical to the corresponding array attribute."], [293, 1, 1, "", "resize", "Scalar method identical to the corresponding array attribute."], [294, 1, 1, "", "round", "Scalar method identical to the corresponding array attribute."], [295, 1, 1, "", "searchsorted", "Scalar method identical to the corresponding array attribute."], [296, 1, 1, "", "setfield", "Scalar method identical to the corresponding array attribute."], [297, 1, 1, "", "setflags", "Scalar method identical to the corresponding array attribute."], [298, 4, 1, "", "shape", "Tuple of array dimensions."], [299, 4, 1, "", "size", "The number of elements in the gentype."], [300, 1, 1, "", "sort", "Scalar method identical to the corresponding array attribute."], [301, 1, 1, "", "squeeze", "Scalar method identical to the corresponding array attribute."], [302, 1, 1, "", "std", "Scalar method identical to the corresponding array attribute."], [303, 4, 1, "", "strides", "Tuple of bytes steps in each dimension."], [304, 1, 1, "", "sum", "Scalar method identical to the corresponding array attribute."], [305, 1, 1, "", "swapaxes", "Scalar method identical to the corresponding array attribute."], [306, 1, 1, "", "take", "Scalar method identical to the corresponding array attribute."], [307, 1, 1, "", "tobytes", ""], [308, 1, 1, "", "tofile", "Scalar method identical to the corresponding array attribute."], [309, 1, 1, "", "tolist", "Scalar method identical to the corresponding array attribute."], [310, 1, 1, "", "tostring", "Scalar method identical to the corresponding array attribute."], [311, 1, 1, "", "trace", "Scalar method identical to the corresponding array attribute."], [312, 1, 1, "", "transpose", "Scalar method identical to the corresponding array attribute."], [313, 1, 1, "", "var", "Scalar method identical to the corresponding array attribute."], [314, 1, 1, "", "view", "Scalar method identical to the corresponding array attribute."]], "foxes.constants.ITYPE": [[318, 1, 1, "", "__abs__", "abs(self)"], [319, 1, 1, "", "__add__", "Return self+value."], [320, 1, 1, "", "__and__", "Return self&value."], [321, 1, 1, "", "__bool__", "True if self else False"], [322, 1, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [323, 1, 1, "", "__divmod__", "Return divmod(self, value)."], [324, 1, 1, "", "__eq__", "Return self==value."], [325, 1, 1, "", "__float__", "float(self)"], [326, 1, 1, "", "__floordiv__", "Return self//value."], [327, 1, 1, "", "__ge__", "Return self>=value."], [328, 1, 1, "", "__gt__", "Return self>value."], [329, 1, 1, "", "__hash__", "Return hash(self)."], [330, 1, 1, "", "__index__", "Return self converted to an integer, if self is suitable for use as an index into a list."], [331, 1, 1, "", "__int__", "int(self)"], [332, 1, 1, "", "__invert__", "~self"], [333, 1, 1, "", "__le__", "Return self<=value."], [334, 1, 1, "", "__lshift__", "Return self<<value."], [335, 1, 1, "", "__lt__", "Return self<value."], [336, 1, 1, "", "__mod__", "Return self%value."], [337, 1, 1, "", "__mul__", "Return self*value."], [338, 1, 1, "", "__ne__", "Return self!=value."], [339, 1, 1, "", "__neg__", "-self"], [340, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [341, 1, 1, "", "__or__", "Return self|value."], [342, 1, 1, "", "__pos__", "+self"], [343, 1, 1, "", "__pow__", "Return pow(self, value, mod)."], [344, 1, 1, "", "__radd__", "Return value+self."], [345, 1, 1, "", "__rand__", "Return value&self."], [346, 1, 1, "", "__rdivmod__", "Return divmod(value, self)."], [347, 1, 1, "", "__repr__", "Return repr(self)."], [348, 1, 1, "", "__rfloordiv__", "Return value//self."], [349, 1, 1, "", "__rlshift__", "Return value<<self."], [350, 1, 1, "", "__rmod__", "Return value%self."], [351, 1, 1, "", "__rmul__", "Return value*self."], [352, 1, 1, "", "__ror__", "Return value|self."], [353, 1, 1, "", "__rpow__", "Return pow(value, self, mod)."], [354, 1, 1, "", "__rrshift__", "Return value>>self."], [355, 1, 1, "", "__rshift__", "Return self>>value."], [356, 1, 1, "", "__rsub__", "Return value-self."], [357, 1, 1, "", "__rtruediv__", "Return value/self."], [358, 1, 1, "", "__rxor__", "Return value^self."], [359, 1, 1, "", "__str__", "Return str(self)."], [360, 1, 1, "", "__sub__", "Return self-value."], [361, 1, 1, "", "__truediv__", "Return self/value."], [362, 1, 1, "", "__xor__", "Return self^value."], [363, 1, 1, "", "bit_count", "Computes the number of 1-bits in the absolute value of the input. Analogous to the builtin int.bit_count or popcount in C++."], [364, 4, 1, "", "denominator", "denominator of value (1)"], [365, 1, 1, "", "is_integer", "Return True if the number is finite with integral value."], [366, 4, 1, "", "numerator", "numerator of value (the value itself)"]], "foxes.core": [[53, 0, 1, "", "Algorithm", "Abstract base class for algorithms."], [67, 0, 1, "", "Data", "Container for data and meta data."], [75, 0, 1, "", "DataCalcModel", "Abstract base class for models with that run calculation on xarray Dataset data."], [78, 0, 1, "", "ExtendedStates", "States extended by point data models."], [88, 0, 1, "", "FarmController", "Analyses selected turbine models and handles their call."], [97, 0, 1, "", "FarmDataModel", "Abstract base class for models that modify farm data."], [102, 0, 1, "", "FarmDataModelList", "A list of farm data models."], [110, 0, 1, "", "FarmModel", "A FarmDataModel that operates on the farm level (in contrast to a TurbineModel, which allows application to a subset of turbines)."], [111, 0, 1, "", "Model", "Base class for all models."], [124, 0, 1, "", "PartialWakesModel", "Abstract base class for partial wakes models."], [132, 0, 1, "", "PointDataModel", "Abstract base class for models that modify point based data."], [136, 0, 1, "", "PointDataModelList", "A list of point data models."], [144, 0, 1, "", "RotorModel", "Abstract base class of rotor models."], [153, 0, 1, "", "States", "Abstract base class for states."], [158, 0, 1, "", "Turbine", "An individual wind turbine."], [162, 0, 1, "", "TurbineModel", "Abstract base class for turbine models."], [164, 0, 1, "", "TurbineType", "Abstract base class for turbine type models."], [166, 0, 1, "", "VerticalProfile", "Abstract base class for vertical profiles."], [170, 0, 1, "", "WakeFrame", "Abstract base class for wake frames."], [175, 0, 1, "", "WakeModel", "Abstract base class for wake models."], [179, 0, 1, "", "WakeSuperposition", "Abstract base class for wake superposition models."], [182, 0, 1, "", "WindFarm", "The wind farm."]], "foxes.core.Algorithm": [[54, 1, 1, "", "__init__", "Constructor."], [55, 1, 1, "", "chunked", ""], [56, 1, 1, "", "cleanup", "Cleanup after calculation"], [57, 1, 1, "", "finalize", "Finalizes the algorithm."], [58, 1, 1, "", "finalize_model", "Call the finalization routine of the model, if not to be kept."], [59, 1, 1, "", "get_models_data", "Creates xarray from model input data."], [60, 2, 1, "", "idata_mem", "The current idata memory"], [61, 1, 1, "", "initialize", "Initializes the algorithm."], [62, 1, 1, "", "new", "Run-time algorithm factory."], [63, 1, 1, "", "new_point_data", "Creates a point data xarray object, containing only points."], [64, 1, 1, "", "print", "Print function, based on verbosity."], [65, 1, 1, "", "update_idata", "Add to idata memory, optionally update and return idata object."], [66, 1, 1, "", "update_n_turbines", "Reset the number of turbines, according to self.farm"]], "foxes.core.Data": [[68, 1, 1, "", "__init__", "Constructor."], [69, 1, 1, "", "add", "Add data entry"], [70, 1, 1, "", "from_points", "Create from points"], [71, 2, 1, "", "n_points", "The number of points"], [72, 2, 1, "", "n_states", "The number of states"], [73, 2, 1, "", "n_turbines", "The number of turbines"], [74, 1, 1, "", "states_i0", "Get the state counter for first state in chunk"]], "foxes.core.DataCalcModel": [[76, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [77, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.ExtendedStates": [[79, 1, 1, "", "__init__", "Constructor."], [80, 1, 1, "", "append", "Add a model to the list"], [81, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [82, 1, 1, "", "finalize", "Finalizes the model."], [83, 1, 1, "", "index", "The index list"], [84, 1, 1, "", "initialize", "Initializes the model."], [85, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [86, 1, 1, "", "size", "The total number of states."], [87, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.FarmController": [[89, 1, 1, "", "__init__", "Constructor."], [90, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [91, 1, 1, "", "collect_models", "Analyze and gather turbine models, based on the turbines of the wind farm."], [92, 1, 1, "", "finalize", "Finalizes the model."], [93, 1, 1, "", "initialize", "Initializes the model."], [94, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [95, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [96, 1, 1, "", "set_pars", "Set parameters for a turbine model"]], "foxes.core.FarmDataModel": [[98, 1, 1, "", "__init__", "Constructor."], [99, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [100, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [101, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.FarmDataModelList": [[103, 1, 1, "", "__init__", "Constructor."], [104, 1, 1, "", "append", "Add a model to the list"], [105, 1, 1, "", "calculate", "The main model calculation."], [106, 1, 1, "", "finalize", "Finalizes the model."], [107, 1, 1, "", "initialize", "Initializes the model."], [108, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [109, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.core.Model": [[112, 1, 1, "", "__init__", "Constructor."], [113, 1, 1, "", "__repr__", "Return repr(self)."], [114, 1, 1, "", "data_to_store", "Adds data from mdata to the local store, intended for iterative runs."], [115, 1, 1, "", "finalize", "Finalizes the model."], [116, 1, 1, "", "from_data_or_store", "Get data from mdata or local store"], [117, 1, 1, "", "get_data", "Getter for a data entry in the model object or provided data sources"], [118, 1, 1, "", "initialize", "Initializes the model."], [119, 2, 1, "", "initialized", "Initialization flag."], [120, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [121, 2, 1, "", "model_id", "Unique id based on the model type."], [122, 1, 1, "", "reduce_states", "Modifies the given objects by selecting a subset of states."], [123, 1, 1, "", "var", "Creates a model specific variable name."]], "foxes.core.PartialWakesModel": [[125, 1, 1, "", "__init__", "Constructor."], [126, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [127, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [128, 1, 1, "", "initialize", "Initializes the model."], [129, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [130, 1, 1, "", "new", "Run-time partial wakes factory."], [131, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.core.PointDataModel": [[133, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [134, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [135, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.PointDataModelList": [[137, 1, 1, "", "__init__", "Constructor."], [138, 1, 1, "", "append", "Add a model to the list"], [139, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [140, 1, 1, "", "finalize", "Finalizes the model."], [141, 1, 1, "", "initialize", "Initializes the model."], [142, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [143, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.core.RotorModel": [[145, 1, 1, "", "__init__", "Constructor."], [146, 1, 1, "", "calculate", "Calculate ambient rotor effective results."], [147, 1, 1, "", "design_points", "The rotor model design points."], [148, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [149, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [150, 1, 1, "", "n_rotor_points", "The number of rotor points"], [151, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [152, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.core.States": [[154, 1, 1, "", "index", "The index list"], [155, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [156, 1, 1, "", "size", "The total number of states."], [157, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.Turbine": [[159, 1, 1, "", "__init__", "Constructor."], [160, 1, 1, "", "add_model", "Add a turbine model to the list."], [161, 1, 1, "", "insert_model", "Insert a turbine model into the list of models."]], "foxes.core.TurbineModel": [[163, 1, 1, "", "calculate", "The main model calculation."]], "foxes.core.TurbineType": [[165, 1, 1, "", "__init__", "Constructor."]], "foxes.core.VerticalProfile": [[167, 1, 1, "", "calculate", "Run the profile calculation."], [168, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."], [169, 1, 1, "", "new", "Run-time profile factory."]], "foxes.core.WakeFrame": [[171, 1, 1, "", "calc_centreline_integral", "Integrates variables along the centreline."], [172, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [173, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [174, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.core.WakeModel": [[176, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [177, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [178, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.core.WakeSuperposition": [[180, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [181, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.core.WindFarm": [[183, 1, 1, "", "__init__", "Constructor."], [184, 1, 1, "", "add_turbine", "Add a wind turbine to the list."], [185, 2, 1, "", "n_turbines", "The number of turbines in the wind farm"], [186, 2, 1, "", "turbine_names", "The list of names of all turbines"]], "foxes.data": [[187, 0, 1, "", "StaticData", "A DataBook filled with static data from this directory."], [189, 5, 1, "", "parse_Pct_file_name", "Parse basic turbine data from file name"], [190, 5, 1, "", "parse_Pct_two_files", "Parse basic turbine data from file names"]], "foxes.data.StaticData": [[188, 1, 1, "", "__init__", "Constructor."]], "foxes.input.farm_layout": [[438, 5, 1, "", "add_from_csv", "Add turbines to wind farm via csv input file."], [439, 5, 1, "", "add_from_df", "Add turbines to wind farm via pandas DataFrame."], [440, 5, 1, "", "add_from_file", "Add turbines from file."], [441, 5, 1, "", "add_from_json", "Add turbimes from a json file."], [442, 5, 1, "", "add_grid", "Add a regular grid of turbines."], [443, 5, 1, "", "add_row", "Add a single row of turbines."]], "foxes.input.states": [[444, 0, 1, "", "FieldDataNC", "Heterogeneous ambient states on a regular horizontal grid in NetCDF format."], [452, 0, 1, "", "MultiHeightStates", "States with multiple heights data per entry."], [463, 0, 1, "", "MultiHeightTimeseries", "Multi-height timeseries states data."], [465, 0, 1, "", "ScanWS", "A given list of wind speeds, all other variables are fixed."], [472, 0, 1, "", "SingleStateStates", "A single uniform state."], [479, 0, 1, "", "StatesTable", "States from a pandas.DataFrame or a pandas readable file."], [490, 0, 1, "", "Timeseries", "Timeseries states data."], [492, 5, 1, "", "create_random_abl_states", "Create random abl states."]], "foxes.input.states.FieldDataNC": [[445, 1, 1, "", "__init__", "Constructor."], [446, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [447, 1, 1, "", "index", "The index list"], [448, 1, 1, "", "initialize", "Initializes the model."], [449, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [450, 1, 1, "", "size", "The total number of states."], [451, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightStates": [[453, 4, 1, "", "RDICT", ""], [454, 1, 1, "", "__init__", "Constructor."], [455, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [456, 1, 1, "", "finalize", "Finalizes the model."], [457, 1, 1, "", "index", "The index list"], [458, 1, 1, "", "initialize", "Initializes the model."], [459, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [460, 1, 1, "", "reset", "Reset the states, optionally select states"], [461, 1, 1, "", "size", "The total number of states."], [462, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightTimeseries": [[464, 4, 1, "", "RDICT", ""]], "foxes.input.states.ScanWS": [[466, 1, 1, "", "__init__", "Constructor."], [467, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [468, 1, 1, "", "initialize", "Initializes the model."], [469, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [470, 1, 1, "", "size", "The total number of states."], [471, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.SingleStateStates": [[473, 1, 1, "", "__init__", "Constructor."], [474, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [475, 1, 1, "", "initialize", "Initializes the model."], [476, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [477, 1, 1, "", "size", "The total number of states."], [478, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.StatesTable": [[480, 4, 1, "", "RDICT", ""], [481, 1, 1, "", "__init__", "Constructor."], [482, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [483, 1, 1, "", "finalize", "Finalizes the model."], [484, 1, 1, "", "index", "The index list"], [485, 1, 1, "", "initialize", "Initializes the model."], [486, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [487, 1, 1, "", "reset", "Reset the states, optionally select states"], [488, 1, 1, "", "size", "The total number of states."], [489, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.Timeseries": [[491, 4, 1, "", "RDICT", ""]], "foxes.input.windio": [[493, 5, 1, "", "read_case", "Reads a WindIO case"]], "foxes.models.farm_controllers": [[494, 0, 1, "", "BasicFarmController", "The basic farm controller, running all turbine models in their order, without conditions."]], "foxes.models.farm_models": [[495, 0, 1, "", "Turbine2FarmModel", "Wrapper that promotes turbine models into farm models, simply by selecting all turbines."]], "foxes.models.farm_models.Turbine2FarmModel": [[496, 1, 1, "", "__init__", "Constructor."], [497, 1, 1, "", "__repr__", "Return repr(self)."], [498, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [499, 1, 1, "", "finalize", "Finalizes the model."], [500, 1, 1, "", "initialize", "Initializes the model."], [501, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.model_book": [[502, 0, 1, "", "Dict", "A slightly enhanced dictionary."], [505, 0, 1, "", "ModelBook", "Container for all kinds of models."]], "foxes.models.model_book.Dict": [[503, 1, 1, "", "__getitem__", "x.__getitem__(y) <==> x[y]"], [504, 1, 1, "", "__init__", "Constructor."]], "foxes.models.model_book.ModelBook": [[506, 1, 1, "", "__getitem__", ""], [507, 1, 1, "", "__init__", "Constructor."], [508, 1, 1, "", "finalize", "Finalizes the model."], [509, 1, 1, "", "print_toc", "Print the contents."]], "foxes.models.partial_wakes": [[510, 0, 1, "", "Mapped", "Partial wake models depending on the wake model (type)."], [518, 0, 1, "", "PartialAxiwake", "Partial wake calculation for axial wake models."], [527, 0, 1, "", "PartialDistSlicedWake", "Partial wakes for distance sliced wake models, making use of their structure."], [536, 0, 1, "", "PartialGrid", "Partial wakes on a grid rotor that may differ from the one in the algorithm."], [539, 0, 1, "", "PartialTopHat", "Partial wakes for top-hat models."], [547, 0, 1, "", "RotorPoints", "Partial wakes calculation directly by the rotor model."]], "foxes.models.partial_wakes.Mapped": [[511, 1, 1, "", "__init__", "Constructor."], [512, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [513, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [514, 1, 1, "", "finalize", "Finalizes the model."], [515, 1, 1, "", "initialize", "Initializes the model."], [516, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [517, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialAxiwake": [[519, 1, 1, "", "__init__", "Constructor."], [520, 1, 1, "", "__repr__", "Return repr(self)."], [521, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [522, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [523, 1, 1, "", "finalize", "Finalizes the model."], [524, 1, 1, "", "initialize", "Initializes the model."], [525, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [526, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialDistSlicedWake": [[528, 1, 1, "", "__init__", "Constructor."], [529, 1, 1, "", "__repr__", "Return repr(self)."], [530, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [531, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [532, 1, 1, "", "finalize", "Finalizes the model."], [533, 1, 1, "", "initialize", "Initializes the model."], [534, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [535, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialGrid": [[537, 1, 1, "", "__init__", "Constructor."], [538, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes.PartialTopHat": [[540, 1, 1, "", "__init__", "Constructor."], [541, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [542, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [543, 1, 1, "", "finalize", "Finalizes the model."], [544, 1, 1, "", "initialize", "Initializes the model."], [545, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [546, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.RotorPoints": [[548, 1, 1, "", "__init__", "Constructor."], [549, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [550, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [551, 1, 1, "", "get_wake_points", "Get the wake calculation points."], [552, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.point_models": [[553, 0, 1, "", "SetUniformData", "Set uniform data (can be state dependent)"], [558, 0, 1, "", "TKE2TI", "Calculates TI from TKE, using TI = sqrt( 3/2 * TKE) / WS"], [561, 0, 1, "", "WakeDeltas", "This point model simply subtracts ambient results from waked results."]], "foxes.models.point_models.SetUniformData": [[554, 1, 1, "", "__init__", "Constructor."], [555, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [556, 1, 1, "", "initialize", "Initializes the model."], [557, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.TKE2TI": [[559, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [560, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.WakeDeltas": [[562, 1, 1, "", "__init__", "Constructor."], [563, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [564, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.rotor_models": [[565, 0, 1, "", "CentreRotor", "The centre rotor model."], [571, 0, 1, "", "GridRotor", "The weighted regular grid rotor model, composed maximally of n x n points, possibly kicking out the outside points."]], "foxes.models.rotor_models.CentreRotor": [[566, 1, 1, "", "design_points", "The rotor model design points."], [567, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [568, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [569, 1, 1, "", "n_rotor_points", "The number of rotor points"], [570, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.GridRotor": [[572, 1, 1, "", "__init__", "Constructor."], [573, 1, 1, "", "__repr__", "Return repr(self)."], [574, 1, 1, "", "design_points", "The rotor model design points."], [575, 1, 1, "", "initialize", "Initializes the model."], [576, 1, 1, "", "n_rotor_points", "The number of rotor points"], [577, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.turbine_models": [[578, 0, 1, "", "Calculator", "Calculates variables based on given functions."], [582, 0, 1, "", "LookupTable", "Calculates the data by interpolation of lookup-table data"], [587, 0, 1, "", "PowerMask", "Invokes a maximal power value."], [593, 0, 1, "", "RotorCentreCalc", "Calculates data at the rotor centre"], [599, 0, 1, "", "SectorManagement", "Changes variables based on variable range conditions."], [604, 0, 1, "", "SetFarmVars", "Set farm data variables to given data."], [611, 0, 1, "", "SetXYHD", "Sets basic turbine data, from turbine object to farm data."], [615, 0, 1, "", "TableFactors", "Multiplies variables by factors from a two dimensional table."], [620, 0, 1, "", "Thrust2Ct", "Calculates ct from thrust force data."], [624, 0, 1, "", "YAW2YAWM", "Calculates delta yaw (i.e. YAWM) from absolute yaw (i.e. YAW)"], [627, 0, 1, "", "YAWM2YAW", "Calculates absolute yaw (i.e. YAWM) from delta yaw (i.e. YAWM)"], [630, 0, 1, "", "kTI", "Calculates the wake model parameter k as a linear function of TI."]], "foxes.models.turbine_models.Calculator": [[579, 1, 1, "", "__init__", "Constructor."], [580, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [581, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.LookupTable": [[583, 1, 1, "", "__init__", "Constructor."], [584, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [585, 1, 1, "", "initialize", "Initializes the model."], [586, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.PowerMask": [[588, 1, 1, "", "__init__", "Constructor."], [589, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [590, 1, 1, "", "initialize", "Initializes the model."], [591, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [592, 1, 1, "", "update_P_ct", ""]], "foxes.models.turbine_models.RotorCentreCalc": [[594, 1, 1, "", "__init__", "Constructor."], [595, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [596, 1, 1, "", "finalize", "Finalizes the model."], [597, 1, 1, "", "initialize", "Initializes the model."], [598, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SectorManagement": [[600, 1, 1, "", "__init__", "Constructor."], [601, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [602, 1, 1, "", "initialize", "Initializes the model."], [603, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SetFarmVars": [[605, 1, 1, "", "__init__", "Constructor."], [606, 1, 1, "", "add_var", "Add data for a variable."], [607, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [608, 1, 1, "", "initialize", "Initializes the model."], [609, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [610, 1, 1, "", "reset", "Remove all variables."]], "foxes.models.turbine_models.SetXYHD": [[612, 1, 1, "", "__init__", "Constructor."], [613, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [614, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.TableFactors": [[616, 1, 1, "", "__init__", "Constructor."], [617, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [618, 1, 1, "", "initialize", "Initializes the model."], [619, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.Thrust2Ct": [[621, 1, 1, "", "__init__", "Constructor."], [622, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [623, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAW2YAWM": [[625, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [626, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAWM2YAW": [[628, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [629, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.kTI": [[631, 1, 1, "", "__init__", "Constructor."], [632, 1, 1, "", "__repr__", "Return repr(self)."], [633, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [634, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types": [[635, 0, 1, "", "CpCtFile", "Calculate power and ct by interpolating from cp-ct-curve data file (or pandas DataFrame)."], [637, 0, 1, "", "CpCtFromTwo", "Calculate power and ct by interpolating cp and ct from two files (or two pandas DataFrames)."], [639, 0, 1, "", "NullType", "A turbine type that does not compute any data."], [642, 0, 1, "", "PCtFile", "Calculate power and ct by interpolating from power-ct-curve data file (or pandas DataFrame)."], [648, 0, 1, "", "PCtFromTwo", "Calculate power and ct by interpolating from power curve and ct curve data files."], [654, 0, 1, "", "WsRho2PCtFromTwo", "Calculate air density dependent power and ct values, as given by two individual files."]], "foxes.models.turbine_types.CpCtFile": [[636, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.CpCtFromTwo": [[638, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.NullType": [[640, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [641, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFile": [[643, 1, 1, "", "__init__", "Constructor."], [644, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [645, 1, 1, "", "finalize", "Finalizes the model."], [646, 1, 1, "", "initialize", "Initializes the model."], [647, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFromTwo": [[649, 1, 1, "", "__init__", "Constructor."], [650, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [651, 1, 1, "", "finalize", "Finalizes the model."], [652, 1, 1, "", "initialize", "Initializes the model."], [653, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsRho2PCtFromTwo": [[655, 1, 1, "", "__init__", "Constructor."], [656, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [657, 1, 1, "", "finalize", "Finalizes the model."], [658, 1, 1, "", "initialize", "Initializes the model."], [659, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.vertical_profiles": [[660, 0, 1, "", "ABLLogNeutralWsProfile", "The neutral ABL wind speed log profile."], [663, 0, 1, "", "ABLLogStableWsProfile", "The stable ABL wind speed log profile."], [666, 0, 1, "", "ABLLogUnstableWsProfile", "The unstable ABL wind speed log profile."], [669, 0, 1, "", "ABLLogWsProfile", "The neutral/stable/unstable ABL wind speed log profile."], [672, 0, 1, "", "ShearedProfile", "A wind shear profile, based on a shear exponent."], [675, 0, 1, "", "UniformProfile", "A profile with uniform values."]], "foxes.models.vertical_profiles.ABLLogNeutralWsProfile": [[661, 1, 1, "", "calculate", "Run the profile calculation."], [662, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogStableWsProfile": [[664, 1, 1, "", "calculate", "Run the profile calculation."], [665, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogUnstableWsProfile": [[667, 1, 1, "", "calculate", "Run the profile calculation."], [668, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogWsProfile": [[670, 1, 1, "", "calculate", "Run the profile calculation."], [671, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ShearedProfile": [[673, 1, 1, "", "calculate", "Run the profile calculation."], [674, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.UniformProfile": [[676, 1, 1, "", "__init__", "Constructor"], [677, 1, 1, "", "calculate", "Run the profile calculation."], [678, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.wake_frames": [[679, 0, 1, "", "FarmOrder", "Invokes turbine ordering as defined by the wind farm."], [686, 0, 1, "", "RotorWD", "Align the first axis for each rotor with the local normalized wind direction."], [691, 0, 1, "", "Streamlines", "Streamline following wakes"], [698, 0, 1, "", "Timelines", "Dynamic wakes for spatially uniform timeseries states."], [704, 0, 1, "", "YawedWakes", "Bend the wakes for yawed turbines."]], "foxes.models.wake_frames.FarmOrder": [[680, 1, 1, "", "__init__", "Constructor."], [681, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [682, 1, 1, "", "finalize", "Finalizes the model."], [683, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [684, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [685, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.RotorWD": [[687, 1, 1, "", "__init__", "Constructor."], [688, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [689, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [690, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.models.wake_frames.Streamlines": [[692, 1, 1, "", "__init__", "Constructor."], [693, 1, 1, "", "__repr__", "Return repr(self)."], [694, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [695, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [696, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [697, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.Timelines": [[699, 1, 1, "", "__init__", "Constructor."], [700, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [701, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [702, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [703, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.YawedWakes": [[705, 1, 1, "", "__init__", "Constructor."], [706, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [707, 1, 1, "", "finalize", "Finalizes the model."], [708, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [709, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [710, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_models": [[711, 0, 1, "", "AxisymmetricWakeModel", "Abstract base class for wake models that depend on (x, r) separately."], [714, 0, 1, "", "DistSlicedWakeModel", "Abstract base class for wake models for which the x-denpendency can be separated from the yz-dependency."], [722, 0, 1, "", "GaussianWakeModel", "Abstract base class for Gaussian wake models."], [725, 0, 1, "", "TopHatWakeModel", "Abstract base class for top-hat wake models."]], "foxes.models.wake_models.AxisymmetricWakeModel": [[712, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."], [713, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."]], "foxes.models.wake_models.DistSlicedWakeModel": [[715, 1, 1, "", "__init__", "Constructor."], [716, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [717, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [718, 1, 1, "", "finalize", "Finalizes the model."], [719, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [720, 1, 1, "", "initialize", "Initializes the model."], [721, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"]], "foxes.models.wake_models.GaussianWakeModel": [[723, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [724, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.TopHatWakeModel": [[726, 1, 1, "", "__init__", "Constructor."], [727, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [728, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [729, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.ti": [[730, 0, 1, "", "CrespoHernandezTIWake", "The Crespo and Hernandez TI empirical correlation"], [736, 0, 1, "", "IECTIWake", "The TI wake model from IEC-64100-1-2005-8 (2005):"]], "foxes.models.wake_models.ti.CrespoHernandezTIWake": [[731, 1, 1, "", "__init__", "Constructor."], [732, 1, 1, "", "__repr__", "Return repr(self)."], [733, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [734, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [735, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.ti.IECTIWake": [[737, 1, 1, "", "__init__", "Constructor."], [738, 1, 1, "", "__repr__", "Return repr(self)."], [739, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [740, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [741, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind": [[742, 0, 1, "", "BastankhahWake", "The Bastankhah wake model"], [747, 0, 1, "", "JensenWake", "The Jensen wake model."], [753, 0, 1, "", "PorteAgelModel", "Common calculations for the wake model and the wake frame, such that code repetitions can be avoided."], [774, 0, 1, "", "PorteAgelWake", "The Bastankhah PorteAgel wake model"], [779, 0, 1, "", "TurbOParkWake", "The TurbOPark wake model"], [784, 0, 1, "", "TurbOParkWakeIX", "The generalized TurbOPark wake model, integrating TI over the streamline."]], "foxes.models.wake_models.wind.BastankhahWake": [[743, 1, 1, "", "__init__", "Constructor."], [744, 1, 1, "", "__repr__", "Return repr(self)."], [745, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [746, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.JensenWake": [[748, 1, 1, "", "__init__", "Constructor."], [749, 1, 1, "", "__repr__", "Return repr(self)."], [750, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [751, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [752, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.PorteAgelModel": [[754, 4, 1, "", "AMPL_FAR", ""], [755, 4, 1, "", "AMPL_NEAR", ""], [756, 4, 1, "", "CHECK", ""], [757, 4, 1, "", "DELTA_FAR", ""], [758, 4, 1, "", "DELTA_NEAR", ""], [759, 4, 1, "", "MDATA_KEY", ""], [760, 4, 1, "", "NEAR", ""], [761, 4, 1, "", "PARS", ""], [762, 4, 1, "", "R_PC", ""], [763, 4, 1, "", "R_PC_S", ""], [764, 4, 1, "", "SIGMA_Y_FAR", ""], [765, 4, 1, "", "SIGMA_Z_FAR", ""], [766, 4, 1, "", "SP_SEL", ""], [767, 4, 1, "", "X0", ""], [768, 1, 1, "", "__init__", "Constructor."], [769, 1, 1, "", "calc_data", "Calculate common model data, store it in mdata."], [770, 1, 1, "", "clean", "Clean all data"], [771, 1, 1, "", "get_data", "Return data entry"], [772, 1, 1, "", "has_data", "Check if data exists"], [773, 2, 1, "", "pars", "Dictionary of the model parameters"]], "foxes.models.wake_models.wind.PorteAgelWake": [[775, 1, 1, "", "__init__", "Constructor."], [776, 1, 1, "", "__repr__", "Return repr(self)."], [777, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [778, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWake": [[780, 1, 1, "", "__init__", "Constructor."], [781, 1, 1, "", "__repr__", "Return repr(self)."], [782, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [783, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWakeIX": [[785, 1, 1, "", "__init__", "Constructor."], [786, 1, 1, "", "__repr__", "Return repr(self)."], [787, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [788, 1, 1, "", "finalize", "Finalizes the model."], [789, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_superpositions": [[790, 0, 1, "", "LinearSuperposition", "Linear supersposition of wake model results, optionally rescaled."], [795, 0, 1, "", "MaxSuperposition", "Maximum supersposition of wake model results, optionally rescaled."], [801, 0, 1, "", "ProductSuperposition", "Product wind wake superposition."], [805, 0, 1, "", "QuadraticSuperposition", "Quadratic supersposition of wake model results, optionally rescaled."], [811, 0, 1, "", "TISuperposition", "A collection of superpositions for TI."]], "foxes.models.wake_superpositions.LinearSuperposition": [[791, 1, 1, "", "__init__", "Constructor."], [792, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [793, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [794, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.MaxSuperposition": [[796, 1, 1, "", "__init__", "Constructor."], [797, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [798, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [799, 1, 1, "", "initialize", "Initializes the model."], [800, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.ProductSuperposition": [[802, 1, 1, "", "__init__", "Constructor."], [803, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [804, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.QuadraticSuperposition": [[806, 1, 1, "", "__init__", "Constructor."], [807, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [808, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [809, 1, 1, "", "initialize", "Initializes the model."], [810, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.TISuperposition": [[812, 1, 1, "", "__init__", "Constructor."], [813, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [814, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.opt.constraints": [[956, 0, 1, "", "AreaGeometryConstraint", "Constrains turbine positions to the inside of a given area geometry."], [977, 0, 1, "", "FarmBoundaryConstraint", "Constrains turbine positions to the inside of the wind farm boundary"], [979, 0, 1, "", "MinDistConstraint", "Turbines must keep at least a minimal spatial distance."]], "foxes.opt.constraints.AreaGeometryConstraint": [[957, 1, 1, "", "__init__", "Constructor."], [958, 1, 1, "", "__str__", "Get info string"], [959, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [960, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [961, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [962, 2, 1, "", "component_names", "The names of the components"], [963, 1, 1, "", "finalize", "Finalize the object."], [964, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [965, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [966, 1, 1, "", "initialize", "Initialize the object."], [967, 2, 1, "", "initialized", "Flag for finished initialization"], [968, 1, 1, "", "n_components", "Returns the number of components of the function."], [969, 2, 1, "", "n_vars_float", "The number of float variables"], [970, 2, 1, "", "n_vars_int", "The number of int variables"], [971, 1, 1, "", "rename_vars_float", "Rename float variables."], [972, 1, 1, "", "rename_vars_int", "Rename integer variables."], [973, 2, 1, "", "var_names_float", "The names of the float variables"], [974, 2, 1, "", "var_names_int", "The names of the integer variables"], [975, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [976, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "foxes.opt.constraints.FarmBoundaryConstraint": [[978, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.constraints.MinDistConstraint": [[980, 1, 1, "", "__init__", "Constructor."], [981, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [982, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [983, 1, 1, "", "initialize", "Initialize the constaint."], [984, 1, 1, "", "n_components", "Returns the number of components of the function."], [985, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core": [[986, 0, 1, "", "FarmConstraint", "Abstract base class for foxes wind farm optimization constraints."], [997, 0, 1, "", "FarmObjective", "Abstract base class for foxes wind farm objective functions."], [1004, 0, 1, "", "FarmOptProblem", "Abstract base class of wind farm optimization problems."], [1046, 0, 1, "", "FarmVarsProblem", "Abstract base class for models that optimize farm variables."], [1052, 0, 1, "", "PopStates", "Helper class for vectorized opt population calculation, via artificial states of length n_pop times n_states."]], "foxes.opt.core.FarmConstraint": [[987, 1, 1, "", "__init__", "Constructor."], [988, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [989, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [990, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [991, 2, 1, "", "farm", "The wind farm"], [992, 1, 1, "", "n_components", "Returns the number of components of the function."], [993, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [994, 1, 1, "", "print_models", "Prints all model names."], [995, 2, 1, "", "sel_turbines", "The list of selected turbines"], [996, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core.FarmObjective": [[998, 1, 1, "", "__init__", "Constraints."], [999, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1000, 2, 1, "", "farm", "The wind farm"], [1001, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1002, 1, 1, "", "print_models", "Prints all model names."], [1003, 2, 1, "", "sel_turbines", "The list of selected turbines"]], "foxes.opt.core.FarmOptProblem": [[1005, 4, 1, "", "INT_INF", ""], [1006, 1, 1, "", "__init__", "Constructor."], [1007, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [1008, 1, 1, "", "add_objective", "Add an objective to the problem."], [1009, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1010, 2, 1, "", "all_turbines", "Flag for all turbines optimization"], [1011, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1012, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1013, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [1014, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [1015, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [1016, 2, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [1017, 2, 1, "", "counter", "The current value of the application counter"], [1018, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [1019, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [1020, 2, 1, "", "farm", "The wind farm"], [1021, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1022, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [1023, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [1024, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1025, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [1026, 1, 1, "", "initialize", "Initialize the object."], [1027, 2, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [1028, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1029, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1030, 2, 1, "", "maximize_objs", "Flags for objective maximization"], [1031, 2, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [1032, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1033, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1034, 2, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [1035, 2, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [1036, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1037, 2, 1, "", "n_vars_float", "The number of float variables"], [1038, 2, 1, "", "n_vars_int", "The number of int variables"], [1039, 1, 1, "", "parse_tvar", "Parse foxes variable name and turbine index from turbine variable"], [1040, 2, 1, "", "sel_turbines", "The selected turbines"], [1041, 1, 1, "", "tvar", "Gets turbine variable name"], [1042, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1043, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1044, 1, 1, "", "var_names_float", "The names of float variables."], [1045, 1, 1, "", "var_names_int", "The names of integer variables."]], "foxes.opt.core.FarmVarsProblem": [[1047, 1, 1, "", "initialize", "Initialize the object."], [1048, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1049, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1050, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1051, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."]], "foxes.opt.core.PopStates": [[1053, 1, 1, "", "__init__", "Constructor."], [1054, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [1055, 1, 1, "", "initialize", "Initializes the model."], [1056, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [1057, 1, 1, "", "size", "The total number of states."], [1058, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.opt.objectives": [[1059, 0, 1, "", "FarmVarObjective", "Objectives based on farm variables."], [1068, 0, 1, "", "MaxFarmPower", "Maximize the mean wind farm power"], [1070, 0, 1, "", "MaxNTurbines", "Maximizes the number of turrbines."], [1076, 0, 1, "", "MinimalMaxTI", "Minimize the maximal turbine TI"]], "foxes.opt.objectives.FarmVarObjective": [[1060, 1, 1, "", "__init__", "Constructor."], [1061, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1062, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1063, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1064, 1, 1, "", "initialize", "Initialize the object."], [1065, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1066, 1, 1, "", "n_components", "Returns the number of components of the function."], [1067, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.objectives.MaxFarmPower": [[1069, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.objectives.MaxNTurbines": [[1071, 1, 1, "", "__init__", "Constructor."], [1072, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1073, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1074, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1075, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.objectives.MinimalMaxTI": [[1077, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.problems": [[1078, 0, 1, "", "OptFarmVars", "Optimize a selection of farm variables."]], "foxes.opt.problems.OptFarmVars": [[1079, 1, 1, "", "__init__", "Constructor."], [1080, 1, 1, "", "add_var", "Add a variable."], [1081, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1082, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1083, 1, 1, "", "initialize", "Initialize the object."], [1084, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1085, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1086, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1087, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1088, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1089, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1090, 1, 1, "", "var_names_float", "The names of float variables."], [1091, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout": [[1217, 0, 1, "", "FarmLayoutOptProblem", "The turbine positioning optimization problem"], [1226, 0, 1, "", "RegGridsLayoutOptProblem", "Places turbines on several regular grids and optimizes their parameters."], [1242, 0, 1, "", "RegularLayoutOptProblem", "Places turbines on a regular grid and optimizes its parameters."]], "foxes.opt.problems.layout.FarmLayoutOptProblem": [[1218, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1219, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1220, 1, 1, "", "initialize", "Initialize the object."], [1221, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1222, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1223, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1224, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1225, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.RegGridsLayoutOptProblem": [[1227, 1, 1, "", "__init__", "Constraints."], [1228, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1229, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1230, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1231, 1, 1, "", "initialize", "Initialize the object."], [1232, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1233, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1234, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1235, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1236, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1237, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1238, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1239, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1240, 1, 1, "", "var_names_float", "The names of float variables."], [1241, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.RegularLayoutOptProblem": [[1243, 4, 1, "", "ANGLE", ""], [1244, 4, 1, "", "OFFSET_X", ""], [1245, 4, 1, "", "OFFSET_Y", ""], [1246, 4, 1, "", "SPACING_X", ""], [1247, 4, 1, "", "SPACING_Y", ""], [1248, 1, 1, "", "__init__", "Constructor."], [1249, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1250, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1251, 1, 1, "", "initialize", "Initialize the object."], [1252, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1253, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1254, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1255, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1256, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts": [[1173, 0, 1, "", "GeomLayout", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes)."], [1183, 0, 1, "", "GeomLayoutGridded", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes), on a fixes background point grid."], [1193, 0, 1, "", "GeomRegGrid", "A regular grid within a boundary geometry."], [1203, 0, 1, "", "GeomRegGrids", "A regular grid within a boundary geometry."]], "foxes.opt.problems.layout.geom_layouts.GeomLayout": [[1174, 1, 1, "", "__init__", "Constructor."], [1175, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1176, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1177, 1, 1, "", "get_fig", "Return plotly figure axis."], [1178, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1179, 1, 1, "", "initialize", "Initialize the object."], [1180, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1181, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1182, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded": [[1184, 1, 1, "", "__init__", "Constructor."], [1185, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1186, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1187, 1, 1, "", "get_fig", "Return plotly figure axis."], [1188, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1189, 1, 1, "", "initialize", "Initialize the object."], [1190, 1, 1, "", "max_values_int", "The maximal values of the int variables."], [1191, 1, 1, "", "min_values_int", "The minimal values of the int variables."], [1192, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrid": [[1194, 1, 1, "", "__init__", "Constructor."], [1195, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1196, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1197, 1, 1, "", "get_fig", "Return plotly figure axis."], [1198, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1199, 1, 1, "", "initialize", "Initialize the object."], [1200, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1201, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1202, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrids": [[1204, 1, 1, "", "__init__", "Constructor."], [1205, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1206, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1207, 1, 1, "", "get_fig", "Return plotly figure axis."], [1208, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1209, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1210, 1, 1, "", "initialize", "Initialize the object."], [1211, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1212, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1213, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1214, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1215, 1, 1, "", "var_names_float", "The names of float variables."], [1216, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1092, 0, 1, "", "Boundary", "Boundary constraint for purely geometrical layouts problems."], [1097, 0, 1, "", "CFixN", "Fixed number of turbines constraint for purely geometrical layouts problems."], [1102, 0, 1, "", "CMaxN", "Maximal number of turbines constraint for purely geometrical layouts problems."], [1107, 0, 1, "", "CMinDensity", "Minimal turbine density constraint for purely geometrical layouts problems."], [1113, 0, 1, "", "CMinN", "Minimal number of turbines constraint for purely geometrical layouts problems."], [1118, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [1123, 0, 1, "", "MinDist", "Minimal distance constraint for purely geometrical layouts problems."], [1129, 0, 1, "", "Valid", "Validity constraint for purely geometrical layouts problems."], [1134, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.constraints.Boundary": [[1093, 1, 1, "", "__init__", "Constructor."], [1094, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1095, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1096, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CFixN": [[1098, 1, 1, "", "__init__", "Constructor."], [1099, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1100, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1101, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN": [[1103, 1, 1, "", "__init__", "Constructor."], [1104, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1105, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1106, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity": [[1108, 1, 1, "", "__init__", "Constructor."], [1109, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1110, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1111, 1, 1, "", "initialize", "Initialize the object."], [1112, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinN": [[1114, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1115, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1116, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1117, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Constraint": [[1119, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1120, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [1121, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [1122, 1, 1, "", "get_bounds", "Returns the bounds for all components."]], "foxes.opt.problems.layout.geom_layouts.constraints.MinDist": [[1124, 1, 1, "", "__init__", "Constructor."], [1125, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1126, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1127, 1, 1, "", "initialize", "Initialize the constaint."], [1128, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Valid": [[1130, 1, 1, "", "__init__", "Constructor."], [1131, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1132, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1133, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1135, 0, 1, "", "MaxDensity", "Maximal turbine density objective for purely geometrical layouts problems."], [1142, 0, 1, "", "MaxGridSpacing", "Maximal grid spacing objective for purely geometrical layouts problems."], [1148, 0, 1, "", "MeMiMaDist", "Mean-min-max distance objective for purely geometrical layouts problems."], [1154, 0, 1, "", "OFixN", "Fixed number of turbines objective for purely geometrical layouts problems."], [1160, 0, 1, "", "OMaxN", "Maximal number of turbines objective for purely geometrical layouts problems."], [1166, 0, 1, "", "OMinN", "Minimal number of turbines objective for purely geometrical layouts problems."], [1169, 0, 1, "", "Objective", "Abstract base class for objective functions."], [1172, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity": [[1136, 1, 1, "", "__init__", "Constructor."], [1137, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1138, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1139, 1, 1, "", "initialize", "Initialize the object."], [1140, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1141, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing": [[1143, 1, 1, "", "__init__", "Constructor."], [1144, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1145, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1146, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1147, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist": [[1149, 1, 1, "", "__init__", "Constructor."], [1150, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1151, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1152, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1153, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OFixN": [[1155, 1, 1, "", "__init__", "Constructor."], [1156, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1157, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1158, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1159, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN": [[1161, 1, 1, "", "__init__", "Constructor."], [1162, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1163, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1164, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1165, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMinN": [[1167, 1, 1, "", "__init__", "Constructor."], [1168, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.opt.problems.layout.geom_layouts.objectives.Objective": [[1170, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1171, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.output": [[815, 0, 1, "", "Animator", "Creates an animation from generators that yield lists of artists."], [820, 0, 1, "", "FarmLayoutOutput", "Plot the farm layout"], [829, 0, 1, "", "FarmResultsEval", "Evaluates farm results data."], [849, 0, 1, "", "FlowPlots2D", "Class for horizontal or vertical 2D flow plots"], [857, 0, 1, "", "Output", "Base class for foxes output."], [861, 0, 1, "", "ResultsWriter", "Writes results farm data to file."], [864, 0, 1, "", "RosePlotOutput", "Class for rose plot creation"], [870, 0, 1, "", "StateTurbineMap", "Creates heat maps with turbines on the one and states on the other axis."], [873, 0, 1, "", "StatesRosePlotOutput", "Class for rose plot creation directly from states"], [875, 0, 1, "", "TurbineTypeCurves", "Creates power and ct curves for turbine types, optionally including derating/boost."]], "foxes.output.Animator": [[816, 1, 1, "", "__init__", "Constructor."], [817, 1, 1, "", "add_generator", "Add a generator."], [818, 1, 1, "", "animate", "Create the animation"], [819, 2, 1, "", "generators", "The artist generators"]], "foxes.output.FarmLayoutOutput": [[821, 1, 1, "", "__init__", "Constructor."], [822, 1, 1, "", "get_figure", "Creates farm layout figure."], [823, 1, 1, "", "get_layout_data", "Returns wind farm layout."], [824, 1, 1, "", "get_layout_dict", "Returns wind farm layout."], [825, 1, 1, "", "write_csv", "Writes csv layout file."], [826, 1, 1, "", "write_json", "Writes xyh layout file."], [827, 1, 1, "", "write_plot", "Writes the layout plot to file."], [828, 1, 1, "", "write_xyh", "Writes xyh layout file."]], "foxes.output.FarmResultsEval": [[830, 1, 1, "", "__init__", "Constructor."], [831, 1, 1, "", "add_capacity", "Adds capacity to the farm results"], [832, 1, 1, "", "add_efficiency", "Adds efficiency to the farm results"], [833, 1, 1, "", "calc_farm_efficiency", "Calculates farm efficiency"], [834, 1, 1, "", "calc_farm_mean", "Calculates the mean over states and turbines."], [835, 1, 1, "", "calc_farm_sum", "Calculates the sum over states and turbines."], [836, 1, 1, "", "calc_farm_yield", "Calculates yield, P75 and P90 at the farm level"], [837, 1, 1, "", "calc_mean_farm_power", "Calculates the mean total farm power."], [838, 1, 1, "", "calc_states_mean", "Calculates the mean wrt states."], [839, 1, 1, "", "calc_states_std", "Calculates the standard deviation wrt states."], [840, 1, 1, "", "calc_states_sum", "Calculates the sum wrt states."], [841, 1, 1, "", "calc_turbine_mean", "Calculates the mean wrt turbines."], [842, 1, 1, "", "calc_turbine_sum", "Calculates the sum wrt turbines."], [843, 1, 1, "", "calc_turbine_yield", "Calculates the yield per turbine"], [844, 1, 1, "", "gen_stdata", "Generates state-turbine data, intended to be used in animations"], [845, 1, 1, "", "reduce_all", "Reduces states and turbine dimension by some operation"], [846, 1, 1, "", "reduce_states", "Reduces the states dimension by some operation"], [847, 1, 1, "", "reduce_turbines", "Reduces the turbine dimension by some operation"], [848, 1, 1, "", "weinsum", "Calculates Einstein sum, adding weights as last argument to the given fields."]], "foxes.output.FlowPlots2D": [[850, 1, 1, "", "__init__", "Constructor."], [851, 1, 1, "", "gen_states_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [852, 1, 1, "", "gen_states_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [853, 1, 1, "", "gen_states_fig_yz", "Generates 2D farm flow figure in a plane."], [854, 1, 1, "", "get_mean_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [855, 1, 1, "", "get_mean_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [856, 1, 1, "", "get_mean_fig_yz", "Generates 2D farm flow figure in a vertical yz-plane."]], "foxes.output.Output": [[858, 1, 1, "", "new", "Run-time output model factory."], [859, 1, 1, "", "print_models", "Prints all model names."], [860, 1, 1, "", "write", "Writes data to file via pandas."]], "foxes.output.ResultsWriter": [[862, 1, 1, "", "__init__", "Constructor."], [863, 1, 1, "", "write_csv", "Writes a csv file"]], "foxes.output.RosePlotOutput": [[865, 1, 1, "", "__init__", "Constructor."], [866, 1, 1, "", "get_data", "Get pandas DataFrame with wind rose data."], [867, 1, 1, "", "get_data_info", "Returns default description for a variable."], [868, 1, 1, "", "get_figure", "Creates px figure object"], [869, 1, 1, "", "write_figure", "Write rose plot to file"]], "foxes.output.StateTurbineMap": [[871, 1, 1, "", "__init__", "Constructor."], [872, 1, 1, "", "plot_map", "Plot the heat map for the selected variable."]], "foxes.output.StatesRosePlotOutput": [[874, 1, 1, "", "__init__", "Constructor."]], "foxes.output.TurbineTypeCurves": [[876, 1, 1, "", "__init__", "Constructor."], [877, 1, 1, "", "plot_curves", "Plot the power or ct curve."]], "foxes.utils": [[878, 0, 1, "", "DataBook", "Container class for file paths, either directly given or as static data within a package."], [886, 0, 1, "", "PandasFileHelper", "This class helps reading and writing data to files via pandas."], [906, 5, 1, "", "all_subclasses", "Searches all classes derived from some base class."], [907, 5, 1, "", "cubic_roots", "Calculate real roots of polynomials of degree 3."], [908, 5, 1, "", "delta_wd", "Calculates wd_b - wd_a."], [1257, 5, 1, "", "read_shp", "Read a shape file"], [1258, 5, 1, "", "read_shp_polygons", "Reads the polygon points from a shp file."], [1274, 5, 1, "", "show_plotly_fig", "Displays a plotly figure in a window"], [1275, 5, 1, "", "shp2csv", "Read shape file, write csv file"], [1276, 5, 1, "", "shp2geom2d", "Read shapefile into geom2d geometry"], [1279, 5, 1, "", "uv2wd", "Calculate wind direction from wind vectors."], [1280, 5, 1, "", "wd2uv", "Calculate wind vectors from wind directions in degrees."], [1281, 5, 1, "", "wd2wdvec", "Calculate wind direction vectors from wind directions in degrees."], [1282, 5, 1, "", "wdvec2wd", "Calculate wind direction from wind direction vectors."]], "foxes.utils.DataBook": [[879, 1, 1, "", "__init__", "Constructor."], [880, 1, 1, "", "add_data_package", "Add static files from a package location."], [881, 1, 1, "", "add_data_package_file", "Add a static file from a package location."], [882, 1, 1, "", "add_file", "Add a file path"], [883, 1, 1, "", "add_files", "Add file paths"], [884, 1, 1, "", "get_file_path", "Get path of a file"], [885, 1, 1, "", "toc", "Get list of contents"]], "foxes.utils.PandasFileHelper": [[887, 4, 1, "", "DATA_FILE_FORMATS", ""], [888, 4, 1, "", "DEFAULT_FORMAT_DICT", ""], [889, 4, 1, "", "DEFAULT_READING_PARAMETERS", ""], [890, 4, 1, "", "DEFAULT_WRITING_PARAMETERS", ""], [891, 1, 1, "", "read_file", "Helper for reading data according to file ending."], [892, 1, 1, "", "write_file", "Helper for writing data according to file ending."]], "foxes.utils.abl.neutral": [[893, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [894, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [895, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.sheared": [[896, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"]], "foxes.utils.abl.stable": [[897, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [898, 5, 1, "", "lgz", "Calculates the log factor for wind speed profiles."], [899, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [900, 5, 1, "", "psi", "The Psi function"], [901, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.unstable": [[902, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [903, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [904, 5, 1, "", "psi", "The Psi function"], [905, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.geom2d": [[909, 0, 1, "", "AreaGeometry", "Abstract base class for closed 2D geometries."], [916, 0, 1, "", "AreaIntersection", "The intersection of area geometries."], [918, 0, 1, "", "AreaUnion", "The union of area geometries."], [926, 0, 1, "", "Circle", "This class represents the area of a circle."], [933, 0, 1, "", "ClosedPolygon", "This class represents a closed 2D polygon."], [940, 0, 1, "", "HalfPlane", "This class represents a half plane in 2d."], [948, 0, 1, "", "InvertedAreaGeometry", "Base class for inverted geometries."]], "foxes.utils.geom2d.AreaGeometry": [[910, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [911, 1, 1, "", "inverse", "Get the inverted geometry"], [912, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [913, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [914, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [915, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.AreaIntersection": [[917, 1, 1, "", "__new__", "Constructor."]], "foxes.utils.geom2d.AreaUnion": [[919, 1, 1, "", "__init__", "Constructor."], [920, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [921, 1, 1, "", "inverse", "Get the inverted geometry"], [922, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [923, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [924, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [925, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.Circle": [[927, 1, 1, "", "__init__", "Cobnstructor."], [928, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [929, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [930, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [931, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [932, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.ClosedPolygon": [[934, 1, 1, "", "__init__", "Constructor."], [935, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [936, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [937, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [938, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [939, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.HalfPlane": [[941, 1, 1, "", "__init__", "Constructor."], [942, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [943, 1, 1, "", "inverse", "Get the inverted geometry"], [944, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [945, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [946, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [947, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.InvertedAreaGeometry": [[949, 1, 1, "", "__init__", "Constructor."], [950, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [951, 1, 1, "", "inverse", "Get the inverted geometry"], [952, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [953, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [954, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [955, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.runners": [[1259, 0, 1, "", "DaskRunner", "Class for function execution via dask"], [1266, 0, 1, "", "DefaultRunner", "Class for default function execution."], [1268, 0, 1, "", "Runner", "Abstract base class for runners."]], "foxes.utils.runners.DaskRunner": [[1260, 1, 1, "", "__init__", "Constructor."], [1261, 1, 1, "", "finalize", "Finallize the runner"], [1262, 1, 1, "", "initialize", "Initialize the runner"], [1263, 1, 1, "", "is_distributed", ""], [1264, 1, 1, "", "print", "Prints if verbosity is not zero"], [1265, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.DefaultRunner": [[1267, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.Runner": [[1269, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1270, 1, 1, "", "finalize", "Finalize the runner"], [1271, 1, 1, "", "initialize", "Initialize the runner"], [1272, 2, 1, "", "initialized", "Initialization flag"], [1273, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.two_circles": [[1277, 5, 1, "", "area", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."], [1278, 5, 1, "", "calc_area", "Calculates the intersection of two circles."]], "foxes.variables": [[391, 3, 1, "", "AMB_CAP", "Ambient capacity, equals AMB_P/P_nominal"], [392, 3, 1, "", "AMB_CT", "The ambient thrust coefficient"], [393, 3, 1, "", "AMB_P", "The ambient power, unit depends on user choice"], [394, 3, 1, "", "AMB_REWS", "Ambient rotor effective wind speed in m/s"], [395, 3, 1, "", "AMB_REWS2", "Ambient rotor effective wind speed in m/s, calculated from second moment"], [396, 3, 1, "", "AMB_REWS3", "Ambient rotor effective wind speed in m/s, calculated from third moment"], [397, 3, 1, "", "AMB_RHO", "The ambient air density in kg/m3"], [398, 3, 1, "", "AMB_T", "The ambient temperature in Kelvin"], [399, 3, 1, "", "AMB_TI", "The ambient turbulence intensity"], [400, 3, 1, "", "AMB_WD", "The ambient wind direction in degrees"], [401, 3, 1, "", "AMB_WS", "The ambient wind speed in m/s"], [402, 3, 1, "", "AMB_YAW", "The ambient absolute yaw angle of  a turbine in degrees"], [403, 3, 1, "", "AMB_YAWM", "The ambient relative yaw angle of  a turbine in degrees"], [404, 3, 1, "", "AMB_YLD", "Ambient yield in GWh/a"], [405, 3, 1, "", "CAP", "Capacity, equals P/P_nominal"], [406, 3, 1, "", "CT", "The thrust coefficient"], [407, 3, 1, "", "D", "The rotor diameter in m"], [408, 3, 1, "", "EFF", "Efficiency, equals P/AMB_P"], [409, 3, 1, "", "H", "The height over ground in m"], [410, 3, 1, "", "K", "Wake growth parameter"], [411, 3, 1, "", "KB", "KTI value for zero TI, K = KB + KTI*TI"], [412, 3, 1, "", "KTI", "Factor between K and TI, K = KB + KTI*TI"], [413, 3, 1, "", "MAX_P", "The maximal power, for derating/boost"], [414, 3, 1, "", "MOL", "The Monin-Ubukhof length in m"], [415, 3, 1, "", "ORDER", "The turbine order"], [416, 3, 1, "", "P", "The power, unit depends on user choice"], [417, 3, 1, "", "PA_ALPHA", "The alpha parameter of the PorteAgel wake model"], [418, 3, 1, "", "PA_BETA", "The beta parameter of the PorteAgel wake model"], [419, 3, 1, "", "REWS", "Rotor effective wind speed in m/s"], [420, 3, 1, "", "REWS2", "Rotor effective wind speed in m/s, calculated from second moment"], [421, 3, 1, "", "REWS3", "Rotor effective wind speed in m/s, calculated from third moment"], [422, 3, 1, "", "RHO", "The air density in kg/m3"], [423, 3, 1, "", "SHEAR", "The shear exponent"], [424, 3, 1, "", "T", "The temperature in Kelvin"], [425, 3, 1, "", "TI", "The turbulence intensity"], [426, 3, 1, "", "TXYH", "The turbine rotor centre coordinate  vector (x, y, height)"], [427, 3, 1, "", "WD", "The wind direction in degrees"], [428, 3, 1, "", "WEIGHT", "The statistical weight of a state"], [429, 3, 1, "", "WS", "The wind speed in m/s"], [430, 3, 1, "", "X", "The x coordinate in m"], [431, 3, 1, "", "Y", "The y coordinate in"], [432, 3, 1, "", "YAW", "The absolute yaw angle of a turbine in degrees"], [433, 3, 1, "", "YAWM", "The relative yaw angle of a turbine in degrees"], [434, 3, 1, "", "YLD", "Yield in GWh/a"], [435, 3, 1, "", "Z0", "The roughness length in m"], [436, 3, 1, "", "amb2var", "Mapping from ambient variable to the corresponding waked variable"], [437, 3, 1, "", "var2amb", "Mapping from variable to the corresponding ambient variable"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:data", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"algorithm": [0, 22, 1284], "downwind": [0, 22, 1284], "model": [0, 22, 1289, 1297, 1306], "public": [0, 1, 5, 11, 22, 23, 30, 34, 38, 42, 47, 51, 53, 67, 75, 78, 88, 97, 102, 110, 111, 124, 132, 136, 144, 153, 158, 162, 164, 166, 170, 175, 179, 182, 187, 192, 317, 444, 452, 463, 465, 472, 479, 490, 494, 495, 502, 505, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 815, 820, 829, 849, 857, 861, 864, 870, 873, 875, 878, 886, 909, 916, 918, 926, 933, 940, 948, 956, 977, 979, 986, 997, 1004, 1046, 1052, 1059, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1259, 1266, 1268], "member": [0, 1, 5, 11, 22, 23, 30, 34, 38, 42, 47, 51, 53, 67, 75, 78, 88, 97, 102, 110, 111, 124, 132, 136, 144, 153, 158, 162, 164, 166, 170, 175, 179, 182, 187, 192, 317, 444, 452, 463, 465, 472, 479, 490, 494, 495, 502, 505, 510, 518, 527, 536, 539, 547, 553, 558, 561, 565, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 624, 627, 630, 635, 637, 639, 642, 648, 654, 660, 663, 666, 669, 672, 675, 679, 686, 691, 698, 704, 711, 714, 722, 725, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 815, 820, 829, 849, 857, 861, 864, 870, 873, 875, 878, 886, 909, 916, 918, 926, 933, 940, 948, 956, 977, 979, 986, 997, 1004, 1046, 1052, 1059, 1068, 1070, 1076, 1078, 1092, 1097, 1102, 1107, 1113, 1118, 1123, 1129, 1135, 1142, 1148, 1154, 1160, 1166, 1169, 1173, 1183, 1193, 1203, 1217, 1226, 1242, 1259, 1266, 1268], "paramet": [2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 24, 25, 26, 27, 28, 31, 32, 33, 36, 37, 39, 40, 43, 44, 45, 48, 49, 54, 57, 58, 59, 62, 63, 64, 65, 68, 69, 70, 74, 76, 77, 79, 80, 81, 82, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 155, 157, 159, 160, 161, 163, 165, 167, 169, 171, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 188, 189, 190, 284, 438, 439, 440, 441, 442, 443, 445, 446, 448, 449, 451, 454, 455, 456, 458, 459, 460, 462, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 478, 481, 482, 483, 485, 486, 487, 489, 493, 496, 498, 499, 500, 501, 504, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 562, 563, 564, 567, 568, 572, 575, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 625, 626, 628, 629, 631, 633, 634, 636, 638, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 661, 664, 667, 670, 673, 676, 677, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 724, 726, 727, 728, 729, 731, 733, 734, 735, 737, 739, 740, 741, 743, 745, 746, 748, 750, 751, 752, 768, 769, 771, 772, 775, 777, 778, 780, 782, 783, 785, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 799, 800, 802, 803, 804, 806, 807, 808, 809, 810, 812, 813, 814, 816, 817, 818, 821, 822, 825, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 858, 860, 862, 863, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 914, 915, 917, 919, 920, 924, 925, 927, 928, 931, 932, 934, 935, 938, 939, 941, 942, 946, 947, 949, 950, 954, 955, 957, 959, 960, 961, 963, 964, 965, 966, 971, 972, 978, 980, 981, 982, 983, 987, 988, 989, 990, 998, 999, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1021, 1022, 1023, 1026, 1039, 1041, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1060, 1061, 1062, 1063, 1064, 1068, 1069, 1071, 1072, 1073, 1076, 1077, 1079, 1080, 1083, 1088, 1089, 1093, 1094, 1095, 1098, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1110, 1111, 1115, 1116, 1118, 1120, 1121, 1124, 1125, 1126, 1127, 1130, 1131, 1132, 1134, 1136, 1137, 1138, 1139, 1143, 1144, 1145, 1149, 1150, 1151, 1155, 1156, 1157, 1161, 1162, 1163, 1167, 1172, 1174, 1175, 1176, 1177, 1179, 1184, 1185, 1186, 1187, 1189, 1194, 1195, 1196, 1197, 1199, 1204, 1205, 1206, 1207, 1210, 1218, 1220, 1223, 1224, 1227, 1228, 1231, 1236, 1237, 1238, 1239, 1248, 1249, 1251, 1254, 1255, 1257, 1258, 1260, 1265, 1267, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282], "return": [2, 3, 4, 7, 9, 10, 13, 14, 15, 17, 18, 24, 25, 26, 28, 29, 31, 32, 33, 36, 37, 40, 41, 45, 46, 49, 50, 59, 60, 63, 70, 71, 72, 73, 74, 76, 77, 81, 83, 84, 85, 86, 87, 90, 93, 95, 99, 100, 101, 105, 107, 109, 116, 118, 119, 121, 122, 123, 128, 131, 133, 134, 135, 139, 141, 143, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 163, 167, 168, 171, 172, 173, 174, 180, 181, 185, 186, 189, 190, 203, 284, 322, 446, 447, 448, 449, 450, 451, 455, 457, 458, 459, 461, 462, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 482, 484, 485, 486, 488, 489, 492, 493, 498, 500, 501, 515, 517, 524, 526, 533, 535, 544, 546, 551, 552, 555, 556, 557, 559, 560, 563, 564, 566, 568, 569, 570, 574, 575, 576, 577, 580, 581, 584, 585, 586, 589, 590, 591, 595, 597, 598, 601, 602, 603, 607, 608, 609, 613, 614, 617, 618, 619, 622, 623, 625, 626, 628, 629, 633, 634, 640, 641, 644, 646, 647, 650, 652, 653, 656, 658, 659, 661, 662, 664, 665, 667, 668, 670, 671, 673, 674, 677, 678, 681, 683, 684, 685, 688, 689, 690, 694, 695, 696, 697, 700, 701, 702, 703, 706, 708, 709, 710, 712, 713, 716, 720, 723, 724, 727, 728, 729, 733, 734, 739, 740, 745, 750, 751, 771, 772, 773, 777, 782, 787, 792, 793, 794, 797, 798, 799, 800, 803, 804, 807, 808, 809, 810, 813, 814, 818, 819, 822, 823, 824, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 847, 848, 866, 867, 868, 872, 877, 884, 885, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 921, 922, 923, 924, 925, 929, 930, 931, 932, 936, 937, 938, 939, 943, 944, 945, 946, 947, 951, 952, 953, 954, 955, 958, 959, 960, 961, 962, 964, 965, 967, 968, 969, 970, 973, 974, 975, 976, 981, 982, 984, 985, 989, 990, 991, 992, 993, 995, 996, 1000, 1001, 1003, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1048, 1049, 1054, 1055, 1056, 1057, 1058, 1061, 1062, 1063, 1065, 1066, 1067, 1072, 1073, 1074, 1075, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1094, 1095, 1096, 1099, 1100, 1101, 1104, 1105, 1106, 1109, 1110, 1112, 1115, 1116, 1117, 1121, 1122, 1125, 1126, 1128, 1131, 1132, 1133, 1134, 1137, 1138, 1140, 1141, 1144, 1145, 1146, 1147, 1150, 1151, 1152, 1153, 1156, 1157, 1158, 1159, 1162, 1163, 1164, 1165, 1168, 1171, 1172, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1205, 1206, 1207, 1208, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1240, 1241, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1265, 1267, 1272, 1273, 1276, 1277, 1278, 1279, 1280, 1281, 1282], "attribut": [5, 11, 22, 34, 38, 42, 47, 53, 67, 78, 88, 97, 102, 111, 124, 136, 144, 158, 164, 182, 444, 452, 472, 479, 495, 502, 505, 510, 518, 527, 539, 553, 561, 571, 578, 582, 587, 593, 599, 604, 611, 615, 620, 630, 642, 648, 654, 675, 679, 686, 691, 698, 704, 714, 730, 736, 742, 747, 753, 774, 779, 784, 790, 795, 801, 805, 811, 815, 820, 829, 849, 861, 864, 870, 875, 878, 886, 918, 926, 933, 940, 956, 979, 1004, 1052, 1059, 1070, 1118, 1173, 1183, 1193, 1203, 1226, 1242, 1259], "iter": [22, 1284], "exampl": [203, 275, 322, 363, 365, 1134, 1172, 1299], "see": [203, 322], "also": [203, 322], "yield": [844, 851, 852, 853, 854, 855, 856], "rais": [1134, 1172], "note": [1134, 1172], "api": 1283, "fox": [1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1301, 1308], "constant": 1285, "core": [1286, 1290], "input": 1288, "farm_layout": 1288, "state": [1288, 1303], "windio": 1288, "farm_control": 1289, "farm_model": 1289, "partial_wak": 1289, "point_model": 1289, "rotor_model": 1289, "turbine_model": 1289, "turbine_typ": 1289, "vertical_profil": 1289, "wake_fram": 1289, "wake_model": [1289, 1297], "wake_superposit": 1289, "opt": [1290, 1291, 1292], "problem": [1290, 1291, 1292], "object": [1290, 1292], "constraint": [1290, 1292], "layout": [1291, 1292, 1303, 1305], "geom_layout": [1291, 1292], "output": 1293, "util": [1294, 1295], "abl": [1294, 1295], "geom2d": 1294, "runner": 1294, "two_circl": 1294, "neutral": 1295, "stabl": 1295, "unstabl": 1295, "shear": 1295, "variabl": 1296, "wind": [1297, 1303, 1307, 1310, 1314], "ti": 1297, "citat": 1298, "histori": 1300, "v0": 1300, "1": 1300, "0": 1300, "alpha": 1300, "2": 1300, "3": 1300, "4": 1300, "5": 1300, "6": 1300, "welcom": 1301, "licens": 1301, "content": 1301, "contribut": 1301, "acknowledg": 1301, "instal": 1302, "requir": 1302, "via": 1302, "pip": 1302, "virtual": 1302, "python": 1302, "environ": 1302, "standard": 1302, "user": 1302, "develop": 1302, "conda": 1302, "static": 1303, "data": [1303, 1307, 1313, 1314], "farm": 1303, "test_farm_67": 1303, "csv": 1303, "ambient": 1303, "wrf": 1303, "timeseri": [1303, 1313], "4464": 1303, "gz": 1303, "abl_states_6000": 1303, "timeseries_3000": 1303, "timeseries_8000": 1303, "timeseries_100": 1303, "wind_rose_bremen": 1303, "wind_rot": 1303, "nc": 1303, "power": [1303, 1309], "thrust": 1303, "curv": 1303, "dtu": 1303, "10mw": 1303, "d178d3": 1303, "h119": 1303, "iea": 1303, "15mw": 1303, "d240": 1303, "h150": 1303, "iwt": 1303, "7d5mw": 1303, "d164": 1303, "h100": 1303, "nrel": 1303, "5mw": 1303, "d126": 1303, "h90": 1303, "file": 1303, "path": 1303, "heterogen": 1304, "flow": 1304, "optim": 1305, "The": 1306, "book": 1306, "multi": 1307, "height": 1307, "overview": 1308, "how": 1308, "setup": 1308, "mask": 1309, "sector": 1310, "manag": 1310, "singl": 1311, "row": 1311, "turbin": 1311, "dynam": 1312, "wake": [1312, 1315], "rose": 1314, "yaw": 1315, "rotor": 1315}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"algorithms.downwind.models": [[0, "algorithms-downwind-models"], [22, "algorithms-downwind-models"]], "Public members": [[0, "public-members"], [1, "public-members"], [5, "public-members"], [11, "public-members"], [22, "public-members"], [23, "public-members"], [30, "public-members"], [34, "public-members"], [38, "public-members"], [42, "public-members"], [47, "public-members"], [51, "public-members"], [53, "public-members"], [67, "public-members"], [75, "public-members"], [78, "public-members"], [88, "public-members"], [97, "public-members"], [102, "public-members"], [110, "public-members"], [111, "public-members"], [124, "public-members"], [132, "public-members"], [136, "public-members"], [144, "public-members"], [153, "public-members"], [158, "public-members"], [162, "public-members"], [164, "public-members"], [166, "public-members"], [170, "public-members"], [175, "public-members"], [179, "public-members"], [182, "public-members"], [187, "public-members"], [192, "public-members"], [317, "public-members"], [444, "public-members"], [452, "public-members"], [463, "public-members"], [465, "public-members"], [472, "public-members"], [479, "public-members"], [490, "public-members"], [494, "public-members"], [495, "public-members"], [502, "public-members"], [505, "public-members"], [510, "public-members"], [518, "public-members"], [527, "public-members"], [536, "public-members"], [539, "public-members"], [547, "public-members"], [553, "public-members"], [558, "public-members"], [561, "public-members"], [565, "public-members"], [571, "public-members"], [578, "public-members"], [582, "public-members"], [587, "public-members"], [593, "public-members"], [599, "public-members"], [604, "public-members"], [611, "public-members"], [615, "public-members"], [620, "public-members"], [624, "public-members"], [627, "public-members"], [630, "public-members"], [635, "public-members"], [637, "public-members"], [639, "public-members"], [642, "public-members"], [648, "public-members"], [654, "public-members"], [660, "public-members"], [663, "public-members"], [666, "public-members"], [669, "public-members"], [672, "public-members"], [675, "public-members"], [679, "public-members"], [686, "public-members"], [691, "public-members"], [698, "public-members"], [704, "public-members"], [711, "public-members"], [714, "public-members"], [722, "public-members"], [725, "public-members"], [730, "public-members"], [736, "public-members"], [742, "public-members"], [747, "public-members"], [753, "public-members"], [774, "public-members"], [779, "public-members"], [784, "public-members"], [790, "public-members"], [795, "public-members"], [801, "public-members"], [805, "public-members"], [811, "public-members"], [815, "public-members"], [820, "public-members"], [829, "public-members"], [849, "public-members"], [857, "public-members"], [861, "public-members"], [864, "public-members"], [870, "public-members"], [873, "public-members"], [875, "public-members"], [878, "public-members"], [886, "public-members"], [909, "public-members"], [916, "public-members"], [918, "public-members"], [926, "public-members"], [933, "public-members"], [940, "public-members"], [948, "public-members"], [956, "public-members"], [977, "public-members"], [979, "public-members"], [986, "public-members"], [997, "public-members"], [1004, "public-members"], [1046, "public-members"], [1052, "public-members"], [1059, "public-members"], [1068, "public-members"], [1070, "public-members"], [1076, "public-members"], [1078, "public-members"], [1092, "public-members"], [1097, "public-members"], [1102, "public-members"], [1107, "public-members"], [1113, "public-members"], [1118, "public-members"], [1123, "public-members"], [1129, "public-members"], [1135, "public-members"], [1142, "public-members"], [1148, "public-members"], [1154, "public-members"], [1160, "public-members"], [1166, "public-members"], [1169, "public-members"], [1173, "public-members"], [1183, "public-members"], [1193, "public-members"], [1203, "public-members"], [1217, "public-members"], [1226, "public-members"], [1242, "public-members"], [1259, "public-members"], [1266, "public-members"], [1268, "public-members"]], "Parameters": [[2, "parameters"], [3, "parameters"], [4, "parameters"], [6, "parameters"], [7, "parameters"], [8, "parameters"], [9, "parameters"], [10, "parameters"], [12, "parameters"], [13, "parameters"], [14, "parameters"], [16, "parameters"], [17, "parameters"], [18, "parameters"], [19, "parameters"], [24, "parameters"], [25, "parameters"], [26, "parameters"], [27, "parameters"], [28, "parameters"], [31, "parameters"], [32, "parameters"], [33, "parameters"], [36, "parameters"], [37, "parameters"], [39, "parameters"], [40, "parameters"], [43, "parameters"], [44, "parameters"], [45, "parameters"], [48, "parameters"], [49, "parameters"], [54, "parameters"], [57, "parameters"], [58, "parameters"], [59, "parameters"], [62, "parameters"], [63, "parameters"], [64, "parameters"], [65, "parameters"], [68, "parameters"], [69, "parameters"], [70, "parameters"], [74, "parameters"], [76, "parameters"], [77, "parameters"], [79, "parameters"], [80, "parameters"], [81, "parameters"], [82, "parameters"], [84, "parameters"], [85, "parameters"], [87, "parameters"], [89, "parameters"], [90, "parameters"], [91, "parameters"], [92, "parameters"], [93, "parameters"], [94, "parameters"], [95, "parameters"], [96, "parameters"], [98, "parameters"], [99, "parameters"], [100, "parameters"], [101, "parameters"], [103, "parameters"], [104, "parameters"], [105, "parameters"], [106, "parameters"], [107, "parameters"], [108, "parameters"], [109, "parameters"], [114, "parameters"], [115, "parameters"], [116, "parameters"], [117, "parameters"], [118, "parameters"], [120, "parameters"], [122, "parameters"], [123, "parameters"], [125, "parameters"], [126, "parameters"], [127, "parameters"], [128, "parameters"], [129, "parameters"], [130, "parameters"], [131, "parameters"], [133, "parameters"], [135, "parameters"], [137, "parameters"], [138, "parameters"], [139, "parameters"], [140, "parameters"], [141, "parameters"], [142, "parameters"], [143, "parameters"], [145, "parameters"], [146, "parameters"], [148, "parameters"], [149, "parameters"], [151, "parameters"], [155, "parameters"], [157, "parameters"], [159, "parameters"], [160, "parameters"], [161, "parameters"], [163, "parameters"], [165, "parameters"], [167, "parameters"], [169, "parameters"], [171, "parameters"], [172, "parameters"], [173, "parameters"], [174, "parameters"], [176, "parameters"], [177, "parameters"], [178, "parameters"], [180, "parameters"], [181, "parameters"], [183, "parameters"], [184, "parameters"], [188, "parameters"], [189, "parameters"], [190, "parameters"], [284, "parameters"], [438, "parameters"], [439, "parameters"], [440, "parameters"], [441, "parameters"], [442, "parameters"], [443, "parameters"], [445, "parameters"], [446, "parameters"], [448, "parameters"], [449, "parameters"], [451, "parameters"], [454, "parameters"], [455, "parameters"], [456, "parameters"], [458, "parameters"], [459, "parameters"], [460, "parameters"], [462, "parameters"], [465, "parameters"], [466, "parameters"], [467, "parameters"], [468, "parameters"], [469, "parameters"], [471, "parameters"], [473, "parameters"], [474, "parameters"], [475, "parameters"], [476, "parameters"], [478, "parameters"], [481, "parameters"], [482, "parameters"], [483, "parameters"], [485, "parameters"], [486, "parameters"], [487, "parameters"], [489, "parameters"], [493, "parameters"], [496, "parameters"], [498, "parameters"], [499, "parameters"], [500, "parameters"], [501, "parameters"], [504, "parameters"], [507, "parameters"], [508, "parameters"], [509, "parameters"], [511, "parameters"], [512, "parameters"], [513, "parameters"], [514, "parameters"], [515, "parameters"], [516, "parameters"], [517, "parameters"], [519, "parameters"], [521, "parameters"], [522, "parameters"], [523, "parameters"], [524, "parameters"], [525, "parameters"], [526, "parameters"], [528, "parameters"], [530, "parameters"], [531, "parameters"], [532, "parameters"], [533, "parameters"], [534, "parameters"], [535, "parameters"], [537, "parameters"], [538, "parameters"], [540, "parameters"], [541, "parameters"], [542, "parameters"], [543, "parameters"], [544, "parameters"], [545, "parameters"], [546, "parameters"], [548, "parameters"], [549, "parameters"], [550, "parameters"], [551, "parameters"], [552, "parameters"], [554, "parameters"], [555, "parameters"], [556, "parameters"], [557, "parameters"], [559, "parameters"], [560, "parameters"], [562, "parameters"], [563, "parameters"], [564, "parameters"], [567, "parameters"], [568, "parameters"], [572, "parameters"], [575, "parameters"], [579, "parameters"], [580, "parameters"], [581, "parameters"], [583, "parameters"], [584, "parameters"], [585, "parameters"], [586, "parameters"], [588, "parameters"], [589, "parameters"], [590, "parameters"], [591, "parameters"], [594, "parameters"], [595, "parameters"], [596, "parameters"], [597, "parameters"], [598, "parameters"], [600, "parameters"], [601, "parameters"], [602, "parameters"], [603, "parameters"], [605, "parameters"], [606, "parameters"], [607, "parameters"], [608, "parameters"], [609, "parameters"], [612, "parameters"], [613, "parameters"], [614, "parameters"], [616, "parameters"], [617, "parameters"], [618, "parameters"], [619, "parameters"], [621, "parameters"], [622, "parameters"], [623, "parameters"], [625, "parameters"], [626, "parameters"], [628, "parameters"], [629, "parameters"], [631, "parameters"], [633, "parameters"], [634, "parameters"], [636, "parameters"], [638, "parameters"], [640, "parameters"], [641, "parameters"], [643, "parameters"], [644, "parameters"], [645, "parameters"], [646, "parameters"], [647, "parameters"], [649, "parameters"], [650, "parameters"], [651, "parameters"], [652, "parameters"], [653, "parameters"], [655, "parameters"], [656, "parameters"], [657, "parameters"], [658, "parameters"], [659, "parameters"], [661, "parameters"], [664, "parameters"], [667, "parameters"], [670, "parameters"], [673, "parameters"], [676, "parameters"], [677, "parameters"], [680, "parameters"], [681, "parameters"], [682, "parameters"], [683, "parameters"], [684, "parameters"], [685, "parameters"], [687, "parameters"], [688, "parameters"], [689, "parameters"], [690, "parameters"], [692, "parameters"], [694, "parameters"], [695, "parameters"], [696, "parameters"], [697, "parameters"], [699, "parameters"], [700, "parameters"], [701, "parameters"], [702, "parameters"], [703, "parameters"], [705, "parameters"], [706, "parameters"], [707, "parameters"], [708, "parameters"], [709, "parameters"], [710, "parameters"], [712, "parameters"], [713, "parameters"], [715, "parameters"], [716, "parameters"], [717, "parameters"], [718, "parameters"], [719, "parameters"], [720, "parameters"], [721, "parameters"], [723, "parameters"], [724, "parameters"], [726, "parameters"], [727, "parameters"], [728, "parameters"], [729, "parameters"], [731, "parameters"], [733, "parameters"], [734, "parameters"], [735, "parameters"], [737, "parameters"], [739, "parameters"], [740, "parameters"], [741, "parameters"], [743, "parameters"], [745, "parameters"], [746, "parameters"], [748, "parameters"], [750, "parameters"], [751, "parameters"], [752, "parameters"], [768, "parameters"], [769, "parameters"], [771, "parameters"], [772, "parameters"], [775, "parameters"], [777, "parameters"], [778, "parameters"], [780, "parameters"], [782, "parameters"], [783, "parameters"], [785, "parameters"], [787, "parameters"], [788, "parameters"], [789, "parameters"], [791, "parameters"], [792, "parameters"], [793, "parameters"], [794, "parameters"], [796, "parameters"], [797, "parameters"], [798, "parameters"], [799, "parameters"], [800, "parameters"], [802, "parameters"], [803, "parameters"], [804, "parameters"], [806, "parameters"], [807, "parameters"], [808, "parameters"], [809, "parameters"], [810, "parameters"], [812, "parameters"], [813, "parameters"], [814, "parameters"], [816, "parameters"], [817, "parameters"], [818, "parameters"], [821, "parameters"], [822, "parameters"], [825, "parameters"], [826, "parameters"], [827, "parameters"], [828, "parameters"], [830, "parameters"], [831, "parameters"], [832, "parameters"], [834, "parameters"], [835, "parameters"], [836, "parameters"], [837, "parameters"], [838, "parameters"], [840, "parameters"], [841, "parameters"], [842, "parameters"], [843, "parameters"], [844, "parameters"], [845, "parameters"], [846, "parameters"], [847, "parameters"], [848, "parameters"], [850, "parameters"], [851, "parameters"], [852, "parameters"], [853, "parameters"], [854, "parameters"], [855, "parameters"], [856, "parameters"], [858, "parameters"], [860, "parameters"], [862, "parameters"], [863, "parameters"], [865, "parameters"], [866, "parameters"], [867, "parameters"], [868, "parameters"], [869, "parameters"], [871, "parameters"], [872, "parameters"], [873, "parameters"], [874, "parameters"], [876, "parameters"], [877, "parameters"], [878, "parameters"], [879, "parameters"], [880, "parameters"], [881, "parameters"], [882, "parameters"], [883, "parameters"], [884, "parameters"], [885, "parameters"], [891, "parameters"], [892, "parameters"], [893, "parameters"], [894, "parameters"], [895, "parameters"], [896, "parameters"], [897, "parameters"], [898, "parameters"], [899, "parameters"], [900, "parameters"], [901, "parameters"], [902, "parameters"], [903, "parameters"], [904, "parameters"], [905, "parameters"], [906, "parameters"], [907, "parameters"], [908, "parameters"], [910, "parameters"], [914, "parameters"], [915, "parameters"], [917, "parameters"], [919, "parameters"], [920, "parameters"], [924, "parameters"], [925, "parameters"], [927, "parameters"], [928, "parameters"], [931, "parameters"], [932, "parameters"], [934, "parameters"], [935, "parameters"], [938, "parameters"], [939, "parameters"], [941, "parameters"], [942, "parameters"], [946, "parameters"], [947, "parameters"], [949, "parameters"], [950, "parameters"], [954, "parameters"], [955, "parameters"], [957, "parameters"], [959, "parameters"], [960, "parameters"], [961, "parameters"], [963, "parameters"], [964, "parameters"], [965, "parameters"], [966, "parameters"], [971, "parameters"], [972, "parameters"], [978, "parameters"], [980, "parameters"], [981, "parameters"], [982, "parameters"], [983, "parameters"], [987, "parameters"], [988, "parameters"], [989, "parameters"], [990, "parameters"], [998, "parameters"], [999, "parameters"], [1006, "parameters"], [1007, "parameters"], [1008, "parameters"], [1009, "parameters"], [1011, "parameters"], [1012, "parameters"], [1013, "parameters"], [1014, "parameters"], [1015, "parameters"], [1018, "parameters"], [1019, "parameters"], [1021, "parameters"], [1022, "parameters"], [1023, "parameters"], [1026, "parameters"], [1039, "parameters"], [1041, "parameters"], [1042, "parameters"], [1043, "parameters"], [1047, "parameters"], [1048, "parameters"], [1049, "parameters"], [1050, "parameters"], [1051, "parameters"], [1053, "parameters"], [1054, "parameters"], [1055, "parameters"], [1056, "parameters"], [1058, "parameters"], [1060, "parameters"], [1061, "parameters"], [1062, "parameters"], [1063, "parameters"], [1064, "parameters"], [1068, "parameters"], [1069, "parameters"], [1071, "parameters"], [1072, "parameters"], [1073, "parameters"], [1076, "parameters"], [1077, "parameters"], [1079, "parameters"], [1080, "parameters"], [1083, "parameters"], [1088, "parameters"], [1089, "parameters"], [1093, "parameters"], [1094, "parameters"], [1095, "parameters"], [1098, "parameters"], [1099, "parameters"], [1100, "parameters"], [1103, "parameters"], [1104, "parameters"], [1105, "parameters"], [1108, "parameters"], [1109, "parameters"], [1110, "parameters"], [1111, "parameters"], [1115, "parameters"], [1116, "parameters"], [1118, "parameters"], [1120, "parameters"], [1121, "parameters"], [1124, "parameters"], [1125, "parameters"], [1126, "parameters"], [1127, "parameters"], [1130, "parameters"], [1131, "parameters"], [1132, "parameters"], [1134, "parameters"], [1136, "parameters"], [1137, "parameters"], [1138, "parameters"], [1139, "parameters"], [1143, "parameters"], [1144, "parameters"], [1145, "parameters"], [1149, "parameters"], [1150, "parameters"], [1151, "parameters"], [1155, "parameters"], [1156, "parameters"], [1157, "parameters"], [1161, "parameters"], [1162, "parameters"], [1163, "parameters"], [1167, "parameters"], [1172, "parameters"], [1174, "parameters"], [1175, "parameters"], [1176, "parameters"], [1177, "parameters"], [1179, "parameters"], [1184, "parameters"], [1185, "parameters"], [1186, "parameters"], [1187, "parameters"], [1189, "parameters"], [1194, "parameters"], [1195, "parameters"], [1196, "parameters"], [1197, "parameters"], [1199, "parameters"], [1204, "parameters"], [1205, "parameters"], [1206, "parameters"], [1207, "parameters"], [1210, "parameters"], [1218, "parameters"], [1220, "parameters"], [1223, "parameters"], [1224, "parameters"], [1227, "parameters"], [1228, "parameters"], [1231, "parameters"], [1236, "parameters"], [1237, "parameters"], [1238, "parameters"], [1239, "parameters"], [1248, "parameters"], [1249, "parameters"], [1251, "parameters"], [1254, "parameters"], [1255, "parameters"], [1257, "parameters"], [1258, "parameters"], [1260, "parameters"], [1265, "parameters"], [1267, "parameters"], [1273, "parameters"], [1275, "parameters"], [1276, "parameters"], [1277, "parameters"], [1278, "parameters"], [1279, "parameters"], [1280, "parameters"], [1281, "parameters"], [1282, "parameters"]], "Returns": [[2, "returns"], [3, "returns"], [4, "returns"], [7, "returns"], [9, "returns"], [10, "returns"], [13, "returns"], [14, "returns"], [15, "returns"], [17, "returns"], [18, "returns"], [24, "returns"], [25, "returns"], [26, "returns"], [28, "returns"], [29, "returns"], [31, "returns"], [32, "returns"], [33, "returns"], [36, "returns"], [37, "returns"], [40, "returns"], [41, "returns"], [45, "returns"], [46, "returns"], [49, "returns"], [50, "returns"], [59, "returns"], [60, "returns"], [63, "returns"], [70, "returns"], [71, "returns"], [72, "returns"], [73, "returns"], [74, "returns"], [76, "returns"], [77, "returns"], [81, "returns"], [83, "returns"], [84, "returns"], [85, "returns"], [86, "returns"], [87, "returns"], [90, "returns"], [93, "returns"], [95, "returns"], [99, "returns"], [100, "returns"], [101, "returns"], [105, "returns"], [107, "returns"], [109, "returns"], [116, "returns"], [118, "returns"], [119, "returns"], [121, "returns"], [122, "returns"], [123, "returns"], [128, "returns"], [131, "returns"], [133, "returns"], [134, "returns"], [135, "returns"], [139, "returns"], [141, "returns"], [143, "returns"], [146, "returns"], [147, "returns"], [149, "returns"], [150, "returns"], [151, "returns"], [152, "returns"], [154, "returns"], [155, "returns"], [156, "returns"], [157, "returns"], [163, "returns"], [167, "returns"], [168, "returns"], [171, "returns"], [172, "returns"], [173, "returns"], [174, "returns"], [180, "returns"], [181, "returns"], [185, "returns"], [186, "returns"], [189, "returns"], [190, "returns"], [203, "returns"], [284, "returns"], [322, "returns"], [446, "returns"], [447, "returns"], [448, "returns"], [449, "returns"], [450, "returns"], [451, "returns"], [455, "returns"], [457, "returns"], [458, "returns"], [459, "returns"], [461, "returns"], [462, "returns"], [467, "returns"], [468, "returns"], [469, "returns"], [470, "returns"], [471, "returns"], [474, "returns"], [475, "returns"], [476, "returns"], [477, "returns"], [478, "returns"], [482, "returns"], [484, "returns"], [485, "returns"], [486, "returns"], [488, "returns"], [489, "returns"], [492, "returns"], [493, "returns"], [498, "returns"], [500, "returns"], [501, "returns"], [515, "returns"], [517, "returns"], [524, "returns"], [526, "returns"], [533, "returns"], [535, "returns"], [544, "returns"], [546, "returns"], [551, "returns"], [552, "returns"], [555, "returns"], [556, "returns"], [557, "returns"], [559, "returns"], [560, "returns"], [563, "returns"], [564, "returns"], [566, "returns"], [568, "returns"], [569, "returns"], [570, "returns"], [574, "returns"], [575, "returns"], [576, "returns"], [577, "returns"], [580, "returns"], [581, "returns"], [584, "returns"], [585, "returns"], [586, "returns"], [589, "returns"], [590, "returns"], [591, "returns"], [595, "returns"], [597, "returns"], [598, "returns"], [601, "returns"], [602, "returns"], [603, "returns"], [607, "returns"], [608, "returns"], [609, "returns"], [613, "returns"], [614, "returns"], [617, "returns"], [618, "returns"], [619, "returns"], [622, "returns"], [623, "returns"], [625, "returns"], [626, "returns"], [628, "returns"], [629, "returns"], [633, "returns"], [634, "returns"], [640, "returns"], [641, "returns"], [644, "returns"], [646, "returns"], [647, "returns"], [650, "returns"], [652, "returns"], [653, "returns"], [656, "returns"], [658, "returns"], [659, "returns"], [661, "returns"], [662, "returns"], [664, "returns"], [665, "returns"], [667, "returns"], [668, "returns"], [670, "returns"], [671, "returns"], [673, "returns"], [674, "returns"], [677, "returns"], [678, "returns"], [681, "returns"], [683, "returns"], [684, "returns"], [685, "returns"], [688, "returns"], [689, "returns"], [690, "returns"], [694, "returns"], [695, "returns"], [696, "returns"], [697, "returns"], [700, "returns"], [701, "returns"], [702, "returns"], [703, "returns"], [706, "returns"], [708, "returns"], [709, "returns"], [710, "returns"], [712, "returns"], [713, "returns"], [716, "returns"], [720, "returns"], [723, "returns"], [724, "returns"], [727, "returns"], [728, "returns"], [729, "returns"], [733, "returns"], [734, "returns"], [739, "returns"], [740, "returns"], [745, "returns"], [750, "returns"], [751, "returns"], [771, "returns"], [772, "returns"], [773, "returns"], [777, "returns"], [782, "returns"], [787, "returns"], [792, "returns"], [793, "returns"], [794, "returns"], [797, "returns"], [798, "returns"], [799, "returns"], [800, "returns"], [803, "returns"], [804, "returns"], [807, "returns"], [808, "returns"], [809, "returns"], [810, "returns"], [813, "returns"], [814, "returns"], [818, "returns"], [819, "returns"], [822, "returns"], [823, "returns"], [824, "returns"], [833, "returns"], [834, "returns"], [835, "returns"], [836, "returns"], [837, "returns"], [838, "returns"], [840, "returns"], [841, "returns"], [842, "returns"], [843, "returns"], [845, "returns"], [846, "returns"], [847, "returns"], [848, "returns"], [866, "returns"], [867, "returns"], [868, "returns"], [872, "returns"], [877, "returns"], [884, "returns"], [885, "returns"], [891, "returns"], [893, "returns"], [894, "returns"], [895, "returns"], [896, "returns"], [897, "returns"], [898, "returns"], [899, "returns"], [900, "returns"], [901, "returns"], [902, "returns"], [903, "returns"], [904, "returns"], [905, "returns"], [906, "returns"], [907, "returns"], [908, "returns"], [911, "returns"], [912, "returns"], [913, "returns"], [914, "returns"], [915, "returns"], [921, "returns"], [922, "returns"], [923, "returns"], [924, "returns"], [925, "returns"], [929, "returns"], [930, "returns"], [931, "returns"], [932, "returns"], [936, "returns"], [937, "returns"], [938, "returns"], [939, "returns"], [943, "returns"], [944, "returns"], [945, "returns"], [946, "returns"], [947, "returns"], [951, "returns"], [952, "returns"], [953, "returns"], [954, "returns"], [955, "returns"], [958, "returns"], [959, "returns"], [960, "returns"], [961, "returns"], [962, "returns"], [964, "returns"], [965, "returns"], [967, "returns"], [968, "returns"], [969, "returns"], [970, "returns"], [973, "returns"], [974, "returns"], [975, "returns"], [976, "returns"], [981, "returns"], [982, "returns"], [984, "returns"], [985, "returns"], [989, "returns"], [990, "returns"], [991, "returns"], [992, "returns"], [993, "returns"], [995, "returns"], [996, "returns"], [1000, "returns"], [1001, "returns"], [1003, "returns"], [1010, "returns"], [1011, "returns"], [1012, "returns"], [1013, "returns"], [1014, "returns"], [1015, "returns"], [1016, "returns"], [1017, "returns"], [1018, "returns"], [1019, "returns"], [1020, "returns"], [1021, "returns"], [1022, "returns"], [1023, "returns"], [1024, "returns"], [1025, "returns"], [1027, "returns"], [1028, "returns"], [1029, "returns"], [1030, "returns"], [1031, "returns"], [1032, "returns"], [1033, "returns"], [1034, "returns"], [1035, "returns"], [1036, "returns"], [1037, "returns"], [1038, "returns"], [1039, "returns"], [1040, "returns"], [1041, "returns"], [1044, "returns"], [1045, "returns"], [1048, "returns"], [1049, "returns"], [1054, "returns"], [1055, "returns"], [1056, "returns"], [1057, "returns"], [1058, "returns"], [1061, "returns"], [1062, "returns"], [1063, "returns"], [1065, "returns"], [1066, "returns"], [1067, "returns"], [1072, "returns"], [1073, "returns"], [1074, "returns"], [1075, "returns"], [1081, "returns"], [1082, "returns"], [1084, "returns"], [1085, "returns"], [1086, "returns"], [1087, "returns"], [1088, "returns"], [1089, "returns"], [1090, "returns"], [1091, "returns"], [1094, "returns"], [1095, "returns"], [1096, "returns"], [1099, "returns"], [1100, "returns"], [1101, "returns"], [1104, "returns"], [1105, "returns"], [1106, "returns"], [1109, "returns"], [1110, "returns"], [1112, "returns"], [1115, "returns"], [1116, "returns"], [1117, "returns"], [1121, "returns"], [1122, "returns"], [1125, "returns"], [1126, "returns"], [1128, "returns"], [1131, "returns"], [1132, "returns"], [1133, "returns"], [1134, "returns"], [1137, "returns"], [1138, "returns"], [1140, "returns"], [1141, "returns"], [1144, "returns"], [1145, "returns"], [1146, "returns"], [1147, "returns"], [1150, "returns"], [1151, "returns"], [1152, "returns"], [1153, "returns"], [1156, "returns"], [1157, "returns"], [1158, "returns"], [1159, "returns"], [1162, "returns"], [1163, "returns"], [1164, "returns"], [1165, "returns"], [1168, "returns"], [1171, "returns"], [1172, "returns"], [1175, "returns"], [1176, "returns"], [1177, "returns"], [1178, "returns"], [1180, "returns"], [1181, "returns"], [1182, "returns"], [1185, "returns"], [1186, "returns"], [1187, "returns"], [1188, "returns"], [1190, "returns"], [1191, "returns"], [1192, "returns"], [1195, "returns"], [1196, "returns"], [1197, "returns"], [1198, "returns"], [1200, "returns"], [1201, "returns"], [1202, "returns"], [1205, "returns"], [1206, "returns"], [1207, "returns"], [1208, "returns"], [1209, "returns"], [1211, "returns"], [1212, "returns"], [1213, "returns"], [1214, "returns"], [1215, "returns"], [1216, "returns"], [1218, "returns"], [1219, "returns"], [1221, "returns"], [1222, "returns"], [1223, "returns"], [1224, "returns"], [1225, "returns"], [1228, "returns"], [1229, "returns"], [1230, "returns"], [1232, "returns"], [1233, "returns"], [1234, "returns"], [1235, "returns"], [1236, "returns"], [1237, "returns"], [1240, "returns"], [1241, "returns"], [1249, "returns"], [1250, "returns"], [1252, "returns"], [1253, "returns"], [1254, "returns"], [1255, "returns"], [1256, "returns"], [1257, "returns"], [1258, "returns"], [1265, "returns"], [1267, "returns"], [1272, "returns"], [1273, "returns"], [1276, "returns"], [1277, "returns"], [1278, "returns"], [1279, "returns"], [1280, "returns"], [1281, "returns"], [1282, "returns"]], "Attributes": [[5, "attributes"], [11, "attributes"], [22, "attributes"], [34, "attributes"], [38, "attributes"], [42, "attributes"], [47, "attributes"], [53, "attributes"], [67, "attributes"], [78, "attributes"], [88, "attributes"], [97, "attributes"], [102, "attributes"], [111, "attributes"], [124, "attributes"], [136, "attributes"], [144, "attributes"], [158, "attributes"], [164, "attributes"], [182, "attributes"], [444, "attributes"], [452, "attributes"], [472, "attributes"], [479, "attributes"], [495, "attributes"], [502, "attributes"], [505, "attributes"], [510, "attributes"], [518, "attributes"], [527, "attributes"], [539, "attributes"], [553, "attributes"], [561, "attributes"], [571, "attributes"], [578, "attributes"], [582, "attributes"], [587, "attributes"], [593, "attributes"], [599, "attributes"], [604, "attributes"], [611, "attributes"], [615, "attributes"], [620, "attributes"], [630, "attributes"], [642, "attributes"], [648, "attributes"], [654, "attributes"], [675, "attributes"], [679, "attributes"], [686, "attributes"], [691, "attributes"], [698, "attributes"], [704, "attributes"], [714, "attributes"], [730, "attributes"], [736, "attributes"], [742, "attributes"], [747, "attributes"], [753, "attributes"], [774, "attributes"], [779, "attributes"], [784, "attributes"], [790, "attributes"], [795, "attributes"], [801, "attributes"], [805, "attributes"], [811, "attributes"], [815, "attributes"], [820, "attributes"], [829, "attributes"], [849, "attributes"], [861, "attributes"], [864, "attributes"], [870, "attributes"], [875, "attributes"], [878, "attributes"], [886, "attributes"], [918, "attributes"], [926, "attributes"], [933, "attributes"], [940, "attributes"], [956, "attributes"], [979, "attributes"], [1004, "attributes"], [1052, "attributes"], [1059, "attributes"], [1070, "attributes"], [1118, "attributes"], [1173, "attributes"], [1183, "attributes"], [1193, "attributes"], [1203, "attributes"], [1226, "attributes"], [1242, "attributes"], [1259, "attributes"]], "algorithms.iterative.models": [[22, "algorithms-iterative-models"]], "Examples": [[203, "examples"], [275, "examples"], [322, "examples"], [363, "examples"], [365, "examples"], [1134, "examples"], [1172, "examples"], [1299, "examples"]], "See Also": [[203, "see-also"], [322, "see-also"]], "Yields": [[844, "yields"], [851, "yields"], [852, "yields"], [853, "yields"], [854, "yields"], [855, "yields"], [856, "yields"]], "Raises": [[1134, "raises"], [1172, "raises"]], "Notes": [[1134, "notes"], [1172, "notes"]], "API": [[1283, "api"]], "foxes.algorithms": [[1284, "foxes-algorithms"]], "Downwind algorithm": [[1284, "downwind-algorithm"]], "Iterative algorithm": [[1284, "iterative-algorithm"]], "foxes.constants": [[1285, "foxes-constants"]], "foxes.core": [[1286, "foxes-core"]], "foxes": [[1287, "foxes"]], "foxes.input": [[1288, "foxes-input"]], "foxes.input.farm_layout": [[1288, "foxes-input-farm-layout"]], "foxes.input.states": [[1288, "foxes-input-states"]], "foxes.input.windio": [[1288, "foxes-input-windio"]], "foxes.models": [[1289, "foxes-models"]], "foxes.models.farm_controllers": [[1289, "foxes-models-farm-controllers"]], "foxes.models.farm_models": [[1289, "foxes-models-farm-models"]], "foxes.models.partial_wakes": [[1289, "foxes-models-partial-wakes"]], "foxes.models.point_models": [[1289, "foxes-models-point-models"]], "foxes.models.rotor_models": [[1289, "foxes-models-rotor-models"]], "foxes.models.turbine_models": [[1289, "foxes-models-turbine-models"]], "foxes.models.turbine_types": [[1289, "foxes-models-turbine-types"]], "foxes.models.vertical_profiles": [[1289, "foxes-models-vertical-profiles"]], "foxes.models.wake_frames": [[1289, "foxes-models-wake-frames"]], "foxes.models.wake_models": [[1289, "foxes-models-wake-models"], [1297, "foxes-models-wake-models"]], "foxes.models.wake_superpositions": [[1289, "foxes-models-wake-superpositions"]], "foxes.opt": [[1290, "foxes-opt"]], "foxes.opt.core": [[1290, "foxes-opt-core"]], "foxes.opt.problems": [[1290, "foxes-opt-problems"], [1291, "foxes-opt-problems"]], "foxes.opt.objectives": [[1290, "foxes-opt-objectives"]], "foxes.opt.constraints": [[1290, "foxes-opt-constraints"]], "foxes.opt.problems.layout": [[1291, "foxes-opt-problems-layout"]], "foxes.opt.problems.layout.geom_layouts": [[1291, "foxes-opt-problems-layout-geom-layouts"], [1292, "foxes-opt-problems-layout-geom-layouts"]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1292, "foxes-opt-problems-layout-geom-layouts-objectives"]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1292, "foxes-opt-problems-layout-geom-layouts-constraints"]], "foxes.output": [[1293, "foxes-output"]], "foxes.utils": [[1294, "foxes-utils"]], "foxes.utils.abl": [[1294, "foxes-utils-abl"]], "foxes.utils.geom2d": [[1294, "foxes-utils-geom2d"]], "foxes.utils.runners": [[1294, "foxes-utils-runners"]], "foxes.utils.two_circles": [[1294, "foxes-utils-two-circles"]], "foxes.utils.abl.neutral": [[1295, "foxes-utils-abl-neutral"]], "foxes.utils.abl.stable": [[1295, "foxes-utils-abl-stable"]], "foxes.utils.abl.unstable": [[1295, "foxes-utils-abl-unstable"]], "foxes.utils.abl.sheared": [[1295, "foxes-utils-abl-sheared"]], "foxes.variables": [[1296, "foxes-variables"]], "foxes.models.wake_models.wind": [[1297, "foxes-models-wake-models-wind"]], "foxes.models.wake_models.ti": [[1297, "foxes-models-wake-models-ti"]], "Citation": [[1298, "citation"]], "History": [[1300, "history"]], "v0.1.0-alpha": [[1300, "v0-1-0-alpha"]], "v0.1.1-alpha": [[1300, "v0-1-1-alpha"]], "v0.1.2-alpha": [[1300, "v0-1-2-alpha"]], "v0.1.3-alpha": [[1300, "v0-1-3-alpha"]], "v0.1.4-alpha": [[1300, "v0-1-4-alpha"]], "v0.2.0-alpha": [[1300, "v0-2-0-alpha"]], "v0.2.1-alpha": [[1300, "v0-2-1-alpha"]], "v0.2.2-alpha": [[1300, "v0-2-2-alpha"]], "v0.2.3-alpha": [[1300, "v0-2-3-alpha"]], "v0.2.4-alpha": [[1300, "v0-2-4-alpha"]], "v0.2.5-alpha": [[1300, "v0-2-5-alpha"]], "v0.2.6-alpha": [[1300, "v0-2-6-alpha"]], "v0.3.0-alpha": [[1300, "v0-3-0-alpha"]], "v0.3.1-alpha": [[1300, "v0-3-1-alpha"]], "v0.3.2-alpha": [[1300, "v0-3-2-alpha"]], "v0.3.3-alpha": [[1300, "v0-3-3-alpha"]], "v0.3.4-alpha": [[1300, "v0-3-4-alpha"]], "v0.3.5-alpha": [[1300, "v0-3-5-alpha"]], "v0.4.0": [[1300, "v0-4-0"]], "v0.4.1": [[1300, "v0-4-1"]], "v0.4.2": [[1300, "v0-4-2"]], "Welcome to FOXES": [[1301, "welcome-to-foxes"]], "License": [[1301, "license"]], "Contents": [[1301, "contents"]], "Contributing": [[1301, "contributing"]], "Acknowledgements": [[1301, "acknowledgements"]], "Installation": [[1302, "installation"]], "Requirements": [[1302, "requirements"]], "Installation via pip": [[1302, "installation-via-pip"]], "Virtual Python environment": [[1302, "virtual-python-environment"], [1302, "id1"]], "Standard users": [[1302, "standard-users"], [1302, "id2"]], "Developers": [[1302, "developers"], [1302, "id3"]], "Installation via conda": [[1302, "installation-via-conda"]], "Static data": [[1303, "Static-data"]], "Wind farm layout data": [[1303, "Wind-farm-layout-data"]], "test_farm_67.csv": [[1303, "test_farm_67.csv"]], "Ambient states data": [[1303, "Ambient-states-data"]], "WRF-Timeseries-4464.csv.gz": [[1303, "WRF-Timeseries-4464.csv.gz"]], "abl_states_6000.csv.gz": [[1303, "abl_states_6000.csv.gz"]], "timeseries_3000.csv.gz": [[1303, "timeseries_3000.csv.gz"]], "timeseries_8000.csv.gz": [[1303, "timeseries_8000.csv.gz"]], "timeseries_100.csv.gz": [[1303, "timeseries_100.csv.gz"]], "wind_rose_bremen.csv": [[1303, "wind_rose_bremen.csv"]], "wind_rotation.nc": [[1303, "wind_rotation.nc"]], "Power and thrust curves": [[1303, "Power-and-thrust-curves"]], "DTU-10MW-D178d3-H119.csv": [[1303, "DTU-10MW-D178d3-H119.csv"]], "IEA-15MW-D240-H150.csv": [[1303, "IEA-15MW-D240-H150.csv"]], "IWT-7d5MW-D164-H100.csv": [[1303, "IWT-7d5MW-D164-H100.csv"]], "NREL-5MW-D126-H90.csv": [[1303, "NREL-5MW-D126-H90.csv"]], "File paths": [[1303, "File-paths"]], "Heterogeneous flow": [[1304, "Heterogeneous-flow"]], "Layout optimization": [[1305, "Layout-optimization"]], "The model book": [[1306, "The-model-book"]], "Multi-height wind data": [[1307, "Multi-height-wind-data"]], "Overview - how to setup foxes": [[1308, "Overview---how-to-setup-foxes"]], "Power mask": [[1309, "Power-mask"]], "Wind sector management": [[1310, "Wind-sector-management"]], "Single row of turbines": [[1311, "Single-row-of-turbines"]], "Dynamic wakes": [[1312, "Dynamic-wakes"]], "Timeseries data": [[1313, "Timeseries-data"]], "Wind rose data": [[1314, "Wind-rose-data"]], "Yawed rotor wakes": [[1315, "Yawed-rotor-wakes"]]}, "indexentries": {"pep 585": [[203, "index-0"], [322, "index-0"]], "python enhancement proposals": [[203, "index-0"], [322, "index-0"]]}, "docurls": ["_algorithms/Downwind.html", "_algorithms/Downwind.FarmWakesCalculation.html", "_algorithms/Downwind.FarmWakesCalculation.calculate.html", "_algorithms/Downwind.FarmWakesCalculation.initialize.html", "_algorithms/Downwind.FarmWakesCalculation.output_farm_vars.html", "_algorithms/Downwind.PointWakesCalculation.html", "_algorithms/Downwind.PointWakesCalculation.__init__.html", "_algorithms/Downwind.PointWakesCalculation.calculate.html", "_algorithms/Downwind.PointWakesCalculation.contribute_to_wake_deltas.html", "_algorithms/Downwind.PointWakesCalculation.initialize.html", "_algorithms/Downwind.PointWakesCalculation.output_point_vars.html", "_algorithms/Downwind.SetAmbPointResults.html", "_algorithms/Downwind.SetAmbPointResults.__init__.html", "_algorithms/Downwind.SetAmbPointResults.calculate.html", "_algorithms/Downwind.SetAmbPointResults.initialize.html", "_algorithms/Downwind.SetAmbPointResults.output_point_vars.html", "_algorithms/Downwind.__init__.html", "_algorithms/Downwind.calc_farm.html", "_algorithms/Downwind.calc_points.html", "_algorithms/Downwind.finalize.html", "_algorithms/Downwind.init_states.html", "_algorithms/Downwind.initialize.html", "_algorithms/Iterative.html", "_algorithms/Iterative.FarmWakesCalculation.html", "_algorithms/Iterative.FarmWakesCalculation.calculate.html", "_algorithms/Iterative.FarmWakesCalculation.initialize.html", "_algorithms/Iterative.FarmWakesCalculation.output_farm_vars.html", "_algorithms/Iterative.__init__.html", "_algorithms/Iterative.calc_farm.html", "_algorithms/Iterative.iterations.html", "_algorithms/downwind/models/CalcOrder.html", "_algorithms/downwind/models/CalcOrder.calculate.html", "_algorithms/downwind/models/CalcOrder.initialize.html", "_algorithms/downwind/models/CalcOrder.output_farm_vars.html", "_algorithms/downwind/models/SetAmbFarmResults.html", "_algorithms/downwind/models/SetAmbFarmResults.__init__.html", "_algorithms/downwind/models/SetAmbFarmResults.calculate.html", "_algorithms/downwind/models/SetAmbFarmResults.output_farm_vars.html", "_algorithms/iterative/ConvCrit.html", "_algorithms/iterative/ConvCrit.__init__.html", "_algorithms/iterative/ConvCrit.check_converged.html", "_algorithms/iterative/ConvCrit.get_deltas.html", "_algorithms/iterative/ConvCritList.html", "_algorithms/iterative/ConvCritList.__init__.html", "_algorithms/iterative/ConvCritList.add_crit.html", "_algorithms/iterative/ConvCritList.check_converged.html", "_algorithms/iterative/ConvCritList.get_deltas.html", "_algorithms/iterative/ConvVarDelta.html", "_algorithms/iterative/ConvVarDelta.__init__.html", "_algorithms/iterative/ConvVarDelta.check_converged.html", "_algorithms/iterative/ConvVarDelta.get_deltas.html", "_algorithms/iterative/DefaultConv.html", "_algorithms/iterative/DefaultConv.__init__.html", "_core/Algorithm.html", "_core/Algorithm.__init__.html", "_core/Algorithm.chunked.html", "_core/Algorithm.cleanup.html", "_core/Algorithm.finalize.html", "_core/Algorithm.finalize_model.html", "_core/Algorithm.get_models_data.html", "_core/Algorithm.idata_mem.html", "_core/Algorithm.initialize.html", "_core/Algorithm.new.html", "_core/Algorithm.new_point_data.html", "_core/Algorithm.print.html", "_core/Algorithm.update_idata.html", "_core/Algorithm.update_n_turbines.html", "_core/Data.html", "_core/Data.__init__.html", "_core/Data.add.html", "_core/Data.from_points.html", "_core/Data.n_points.html", "_core/Data.n_states.html", "_core/Data.n_turbines.html", "_core/Data.states_i0.html", "_core/DataCalcModel.html", "_core/DataCalcModel.calculate.html", "_core/DataCalcModel.run_calculation.html", "_core/ExtendedStates.html", "_core/ExtendedStates.__init__.html", "_core/ExtendedStates.append.html", "_core/ExtendedStates.calculate.html", "_core/ExtendedStates.finalize.html", "_core/ExtendedStates.index.html", "_core/ExtendedStates.initialize.html", "_core/ExtendedStates.output_point_vars.html", "_core/ExtendedStates.size.html", "_core/ExtendedStates.weights.html", "_core/FarmController.html", "_core/FarmController.__init__.html", "_core/FarmController.calculate.html", "_core/FarmController.collect_models.html", "_core/FarmController.finalize.html", "_core/FarmController.initialize.html", "_core/FarmController.keep.html", "_core/FarmController.output_farm_vars.html", "_core/FarmController.set_pars.html", "_core/FarmDataModel.html", "_core/FarmDataModel.__init__.html", "_core/FarmDataModel.calculate.html", "_core/FarmDataModel.output_farm_vars.html", "_core/FarmDataModel.run_calculation.html", "_core/FarmDataModelList.html", "_core/FarmDataModelList.__init__.html", "_core/FarmDataModelList.append.html", "_core/FarmDataModelList.calculate.html", "_core/FarmDataModelList.finalize.html", "_core/FarmDataModelList.initialize.html", "_core/FarmDataModelList.keep.html", "_core/FarmDataModelList.output_farm_vars.html", "_core/FarmModel.html", "_core/Model.html", "_core/Model.__init__.html", "_core/Model.__repr__.html", "_core/Model.data_to_store.html", "_core/Model.finalize.html", "_core/Model.from_data_or_store.html", "_core/Model.get_data.html", "_core/Model.initialize.html", "_core/Model.initialized.html", "_core/Model.keep.html", "_core/Model.model_id.html", "_core/Model.reduce_states.html", "_core/Model.var.html", "_core/PartialWakesModel.html", "_core/PartialWakesModel.__init__.html", "_core/PartialWakesModel.contribute_to_wake_deltas.html", "_core/PartialWakesModel.evaluate_results.html", "_core/PartialWakesModel.initialize.html", "_core/PartialWakesModel.keep.html", "_core/PartialWakesModel.new.html", "_core/PartialWakesModel.new_wake_deltas.html", "_core/PointDataModel.html", "_core/PointDataModel.calculate.html", "_core/PointDataModel.output_point_vars.html", "_core/PointDataModel.run_calculation.html", "_core/PointDataModelList.html", "_core/PointDataModelList.__init__.html", "_core/PointDataModelList.append.html", "_core/PointDataModelList.calculate.html", "_core/PointDataModelList.finalize.html", "_core/PointDataModelList.initialize.html", "_core/PointDataModelList.keep.html", "_core/PointDataModelList.output_point_vars.html", "_core/RotorModel.html", "_core/RotorModel.__init__.html", "_core/RotorModel.calculate.html", "_core/RotorModel.design_points.html", "_core/RotorModel.eval_rpoint_results.html", "_core/RotorModel.get_rotor_points.html", "_core/RotorModel.n_rotor_points.html", "_core/RotorModel.output_farm_vars.html", "_core/RotorModel.rotor_point_weights.html", "_core/States.html", "_core/States.index.html", "_core/States.output_point_vars.html", "_core/States.size.html", "_core/States.weights.html", "_core/Turbine.html", "_core/Turbine.__init__.html", "_core/Turbine.add_model.html", "_core/Turbine.insert_model.html", "_core/TurbineModel.html", "_core/TurbineModel.calculate.html", "_core/TurbineType.html", "_core/TurbineType.__init__.html", "_core/VerticalProfile.html", "_core/VerticalProfile.calculate.html", "_core/VerticalProfile.input_vars.html", "_core/VerticalProfile.new.html", "_core/WakeFrame.html", "_core/WakeFrame.calc_centreline_integral.html", "_core/WakeFrame.calc_order.html", "_core/WakeFrame.get_centreline_points.html", "_core/WakeFrame.get_wake_coos.html", "_core/WakeModel.html", "_core/WakeModel.contribute_to_wake_deltas.html", "_core/WakeModel.finalize_wake_deltas.html", "_core/WakeModel.init_wake_deltas.html", "_core/WakeSuperposition.html", "_core/WakeSuperposition.calc_final_wake_delta.html", "_core/WakeSuperposition.calc_wakes_plus_wake.html", "_core/WindFarm.html", "_core/WindFarm.__init__.html", "_core/WindFarm.add_turbine.html", "_core/WindFarm.n_turbines.html", "_core/WindFarm.turbine_names.html", "_data/StaticData.html", "_data/StaticData.__init__.html", "_data/parse_Pct_file_name.html", "_data/parse_Pct_two_files.html", "_foxes/constants/AMB_RPOINT_RESULTS.html", "_foxes/constants/DTYPE.html", "_foxes/constants/DTYPE.T.html", "_foxes/constants/DTYPE.__abs__.html", "_foxes/constants/DTYPE.__add__.html", "_foxes/constants/DTYPE.__and__.html", "_foxes/constants/DTYPE.__array__.html", "_foxes/constants/DTYPE.__array_interface__.html", "_foxes/constants/DTYPE.__array_priority__.html", "_foxes/constants/DTYPE.__array_struct__.html", "_foxes/constants/DTYPE.__array_wrap__.html", "_foxes/constants/DTYPE.__bool__.html", "_foxes/constants/DTYPE.__class_getitem__.html", "_foxes/constants/DTYPE.__divmod__.html", "_foxes/constants/DTYPE.__eq__.html", "_foxes/constants/DTYPE.__float__.html", "_foxes/constants/DTYPE.__floordiv__.html", "_foxes/constants/DTYPE.__format__.html", "_foxes/constants/DTYPE.__ge__.html", "_foxes/constants/DTYPE.__getitem__.html", "_foxes/constants/DTYPE.__gt__.html", "_foxes/constants/DTYPE.__hash__.html", "_foxes/constants/DTYPE.__int__.html", "_foxes/constants/DTYPE.__invert__.html", "_foxes/constants/DTYPE.__le__.html", "_foxes/constants/DTYPE.__lshift__.html", "_foxes/constants/DTYPE.__lt__.html", "_foxes/constants/DTYPE.__mod__.html", "_foxes/constants/DTYPE.__mul__.html", "_foxes/constants/DTYPE.__ne__.html", "_foxes/constants/DTYPE.__neg__.html", "_foxes/constants/DTYPE.__new__.html", "_foxes/constants/DTYPE.__or__.html", "_foxes/constants/DTYPE.__pos__.html", "_foxes/constants/DTYPE.__pow__.html", "_foxes/constants/DTYPE.__radd__.html", "_foxes/constants/DTYPE.__rand__.html", "_foxes/constants/DTYPE.__rdivmod__.html", "_foxes/constants/DTYPE.__reduce__.html", "_foxes/constants/DTYPE.__repr__.html", "_foxes/constants/DTYPE.__rfloordiv__.html", "_foxes/constants/DTYPE.__rlshift__.html", "_foxes/constants/DTYPE.__rmod__.html", "_foxes/constants/DTYPE.__rmul__.html", "_foxes/constants/DTYPE.__ror__.html", "_foxes/constants/DTYPE.__rpow__.html", "_foxes/constants/DTYPE.__rrshift__.html", "_foxes/constants/DTYPE.__rshift__.html", "_foxes/constants/DTYPE.__rsub__.html", "_foxes/constants/DTYPE.__rtruediv__.html", "_foxes/constants/DTYPE.__rxor__.html", "_foxes/constants/DTYPE.__sizeof__.html", "_foxes/constants/DTYPE.__str__.html", "_foxes/constants/DTYPE.__sub__.html", "_foxes/constants/DTYPE.__truediv__.html", "_foxes/constants/DTYPE.__xor__.html", "_foxes/constants/DTYPE.all.html", "_foxes/constants/DTYPE.any.html", "_foxes/constants/DTYPE.argmax.html", "_foxes/constants/DTYPE.argmin.html", "_foxes/constants/DTYPE.argsort.html", "_foxes/constants/DTYPE.as_integer_ratio.html", "_foxes/constants/DTYPE.astype.html", "_foxes/constants/DTYPE.base.html", "_foxes/constants/DTYPE.byteswap.html", "_foxes/constants/DTYPE.choose.html", "_foxes/constants/DTYPE.clip.html", "_foxes/constants/DTYPE.compress.html", "_foxes/constants/DTYPE.conj.html", "_foxes/constants/DTYPE.conjugate.html", "_foxes/constants/DTYPE.copy.html", "_foxes/constants/DTYPE.cumprod.html", "_foxes/constants/DTYPE.cumsum.html", "_foxes/constants/DTYPE.data.html", "_foxes/constants/DTYPE.diagonal.html", "_foxes/constants/DTYPE.dtype.html", "_foxes/constants/DTYPE.dump.html", "_foxes/constants/DTYPE.dumps.html", "_foxes/constants/DTYPE.fill.html", "_foxes/constants/DTYPE.flags.html", "_foxes/constants/DTYPE.flat.html", "_foxes/constants/DTYPE.flatten.html", "_foxes/constants/DTYPE.getfield.html", "_foxes/constants/DTYPE.imag.html", "_foxes/constants/DTYPE.is_integer.html", "_foxes/constants/DTYPE.item.html", "_foxes/constants/DTYPE.itemset.html", "_foxes/constants/DTYPE.itemsize.html", "_foxes/constants/DTYPE.max.html", "_foxes/constants/DTYPE.mean.html", "_foxes/constants/DTYPE.min.html", "_foxes/constants/DTYPE.nbytes.html", "_foxes/constants/DTYPE.ndim.html", "_foxes/constants/DTYPE.newbyteorder.html", "_foxes/constants/DTYPE.nonzero.html", "_foxes/constants/DTYPE.prod.html", "_foxes/constants/DTYPE.ptp.html", "_foxes/constants/DTYPE.put.html", "_foxes/constants/DTYPE.ravel.html", "_foxes/constants/DTYPE.real.html", "_foxes/constants/DTYPE.repeat.html", "_foxes/constants/DTYPE.reshape.html", "_foxes/constants/DTYPE.resize.html", "_foxes/constants/DTYPE.round.html", "_foxes/constants/DTYPE.searchsorted.html", "_foxes/constants/DTYPE.setfield.html", "_foxes/constants/DTYPE.setflags.html", "_foxes/constants/DTYPE.shape.html", "_foxes/constants/DTYPE.size.html", "_foxes/constants/DTYPE.sort.html", "_foxes/constants/DTYPE.squeeze.html", "_foxes/constants/DTYPE.std.html", "_foxes/constants/DTYPE.strides.html", "_foxes/constants/DTYPE.sum.html", "_foxes/constants/DTYPE.swapaxes.html", "_foxes/constants/DTYPE.take.html", "_foxes/constants/DTYPE.tobytes.html", "_foxes/constants/DTYPE.tofile.html", "_foxes/constants/DTYPE.tolist.html", "_foxes/constants/DTYPE.tostring.html", "_foxes/constants/DTYPE.trace.html", "_foxes/constants/DTYPE.transpose.html", "_foxes/constants/DTYPE.var.html", "_foxes/constants/DTYPE.view.html", "_foxes/constants/FARM.html", "_foxes/constants/GW.html", "_foxes/constants/ITYPE.html", "_foxes/constants/ITYPE.__abs__.html", "_foxes/constants/ITYPE.__add__.html", "_foxes/constants/ITYPE.__and__.html", "_foxes/constants/ITYPE.__bool__.html", "_foxes/constants/ITYPE.__class_getitem__.html", "_foxes/constants/ITYPE.__divmod__.html", "_foxes/constants/ITYPE.__eq__.html", "_foxes/constants/ITYPE.__float__.html", "_foxes/constants/ITYPE.__floordiv__.html", "_foxes/constants/ITYPE.__ge__.html", "_foxes/constants/ITYPE.__gt__.html", "_foxes/constants/ITYPE.__hash__.html", "_foxes/constants/ITYPE.__index__.html", "_foxes/constants/ITYPE.__int__.html", "_foxes/constants/ITYPE.__invert__.html", "_foxes/constants/ITYPE.__le__.html", "_foxes/constants/ITYPE.__lshift__.html", "_foxes/constants/ITYPE.__lt__.html", "_foxes/constants/ITYPE.__mod__.html", "_foxes/constants/ITYPE.__mul__.html", "_foxes/constants/ITYPE.__ne__.html", "_foxes/constants/ITYPE.__neg__.html", "_foxes/constants/ITYPE.__new__.html", "_foxes/constants/ITYPE.__or__.html", "_foxes/constants/ITYPE.__pos__.html", "_foxes/constants/ITYPE.__pow__.html", "_foxes/constants/ITYPE.__radd__.html", "_foxes/constants/ITYPE.__rand__.html", "_foxes/constants/ITYPE.__rdivmod__.html", "_foxes/constants/ITYPE.__repr__.html", "_foxes/constants/ITYPE.__rfloordiv__.html", "_foxes/constants/ITYPE.__rlshift__.html", "_foxes/constants/ITYPE.__rmod__.html", "_foxes/constants/ITYPE.__rmul__.html", "_foxes/constants/ITYPE.__ror__.html", "_foxes/constants/ITYPE.__rpow__.html", "_foxes/constants/ITYPE.__rrshift__.html", "_foxes/constants/ITYPE.__rshift__.html", "_foxes/constants/ITYPE.__rsub__.html", "_foxes/constants/ITYPE.__rtruediv__.html", "_foxes/constants/ITYPE.__rxor__.html", "_foxes/constants/ITYPE.__str__.html", "_foxes/constants/ITYPE.__sub__.html", "_foxes/constants/ITYPE.__truediv__.html", "_foxes/constants/ITYPE.__xor__.html", "_foxes/constants/ITYPE.bit_count.html", "_foxes/constants/ITYPE.denominator.html", "_foxes/constants/ITYPE.is_integer.html", "_foxes/constants/ITYPE.numerator.html", "_foxes/constants/KAPPA.html", "_foxes/constants/MW.html", "_foxes/constants/POINT.html", "_foxes/constants/POINTS.html", "_foxes/constants/POP.html", "_foxes/constants/P_UNITS.html", "_foxes/constants/RPOINT.html", "_foxes/constants/RPOINTS.html", "_foxes/constants/RWEIGHTS.html", "_foxes/constants/STATE.html", "_foxes/constants/STATES_SEL.html", "_foxes/constants/STATE_POINT.html", "_foxes/constants/STATE_SOURCE_TURBINE.html", "_foxes/constants/STATE_TURBINE.html", "_foxes/constants/TMODELS.html", "_foxes/constants/TMODEL_SELS.html", "_foxes/constants/TNAME.html", "_foxes/constants/TURBINE.html", "_foxes/constants/TW.html", "_foxes/constants/VALID.html", "_foxes/constants/VARS.html", "_foxes/constants/W.html", "_foxes/constants/XYH.html", "_foxes/constants/kW.html", "_foxes/variables/AMB_CAP.html", "_foxes/variables/AMB_CT.html", "_foxes/variables/AMB_P.html", "_foxes/variables/AMB_REWS.html", "_foxes/variables/AMB_REWS2.html", "_foxes/variables/AMB_REWS3.html", "_foxes/variables/AMB_RHO.html", "_foxes/variables/AMB_T.html", "_foxes/variables/AMB_TI.html", "_foxes/variables/AMB_WD.html", "_foxes/variables/AMB_WS.html", "_foxes/variables/AMB_YAW.html", "_foxes/variables/AMB_YAWM.html", "_foxes/variables/AMB_YLD.html", "_foxes/variables/CAP.html", "_foxes/variables/CT.html", "_foxes/variables/D.html", "_foxes/variables/EFF.html", "_foxes/variables/H.html", "_foxes/variables/K.html", "_foxes/variables/KB.html", "_foxes/variables/KTI.html", "_foxes/variables/MAX_P.html", "_foxes/variables/MOL.html", "_foxes/variables/ORDER.html", "_foxes/variables/P.html", "_foxes/variables/PA_ALPHA.html", "_foxes/variables/PA_BETA.html", "_foxes/variables/REWS.html", "_foxes/variables/REWS2.html", "_foxes/variables/REWS3.html", "_foxes/variables/RHO.html", "_foxes/variables/SHEAR.html", "_foxes/variables/T.html", "_foxes/variables/TI.html", "_foxes/variables/TXYH.html", "_foxes/variables/WD.html", "_foxes/variables/WEIGHT.html", "_foxes/variables/WS.html", "_foxes/variables/X.html", "_foxes/variables/Y.html", "_foxes/variables/YAW.html", "_foxes/variables/YAWM.html", "_foxes/variables/YLD.html", "_foxes/variables/Z0.html", "_foxes/variables/amb2var.html", "_foxes/variables/var2amb.html", "_input/farm_layout/add_from_csv.html", "_input/farm_layout/add_from_df.html", "_input/farm_layout/add_from_file.html", "_input/farm_layout/add_from_json.html", "_input/farm_layout/add_grid.html", "_input/farm_layout/add_row.html", "_input/states/FieldDataNC.html", "_input/states/FieldDataNC.__init__.html", "_input/states/FieldDataNC.calculate.html", "_input/states/FieldDataNC.index.html", "_input/states/FieldDataNC.initialize.html", "_input/states/FieldDataNC.output_point_vars.html", "_input/states/FieldDataNC.size.html", "_input/states/FieldDataNC.weights.html", "_input/states/MultiHeightStates.html", "_input/states/MultiHeightStates.RDICT.html", "_input/states/MultiHeightStates.__init__.html", "_input/states/MultiHeightStates.calculate.html", "_input/states/MultiHeightStates.finalize.html", "_input/states/MultiHeightStates.index.html", "_input/states/MultiHeightStates.initialize.html", "_input/states/MultiHeightStates.output_point_vars.html", "_input/states/MultiHeightStates.reset.html", "_input/states/MultiHeightStates.size.html", "_input/states/MultiHeightStates.weights.html", "_input/states/MultiHeightTimeseries.html", "_input/states/MultiHeightTimeseries.RDICT.html", "_input/states/ScanWS.html", "_input/states/ScanWS.__init__.html", "_input/states/ScanWS.calculate.html", "_input/states/ScanWS.initialize.html", "_input/states/ScanWS.output_point_vars.html", "_input/states/ScanWS.size.html", "_input/states/ScanWS.weights.html", "_input/states/SingleStateStates.html", "_input/states/SingleStateStates.__init__.html", "_input/states/SingleStateStates.calculate.html", "_input/states/SingleStateStates.initialize.html", "_input/states/SingleStateStates.output_point_vars.html", "_input/states/SingleStateStates.size.html", "_input/states/SingleStateStates.weights.html", "_input/states/StatesTable.html", "_input/states/StatesTable.RDICT.html", "_input/states/StatesTable.__init__.html", "_input/states/StatesTable.calculate.html", "_input/states/StatesTable.finalize.html", "_input/states/StatesTable.index.html", "_input/states/StatesTable.initialize.html", "_input/states/StatesTable.output_point_vars.html", "_input/states/StatesTable.reset.html", "_input/states/StatesTable.size.html", "_input/states/StatesTable.weights.html", "_input/states/Timeseries.html", "_input/states/Timeseries.RDICT.html", "_input/states/create_random_abl_states.html", "_input/windio/read_case.html", "_models/farm_controllers/BasicFarmController.html", "_models/farm_models/Turbine2FarmModel.html", "_models/farm_models/Turbine2FarmModel.__init__.html", "_models/farm_models/Turbine2FarmModel.__repr__.html", "_models/farm_models/Turbine2FarmModel.calculate.html", "_models/farm_models/Turbine2FarmModel.finalize.html", "_models/farm_models/Turbine2FarmModel.initialize.html", "_models/farm_models/Turbine2FarmModel.output_farm_vars.html", "_models/model_book/Dict.html", "_models/model_book/Dict.__getitem__.html", "_models/model_book/Dict.__init__.html", "_models/model_book/ModelBook.html", "_models/model_book/ModelBook.__getitem__.html", "_models/model_book/ModelBook.__init__.html", "_models/model_book/ModelBook.finalize.html", "_models/model_book/ModelBook.print_toc.html", "_models/partial_wakes/Mapped.html", "_models/partial_wakes/Mapped.__init__.html", "_models/partial_wakes/Mapped.contribute_to_wake_deltas.html", "_models/partial_wakes/Mapped.evaluate_results.html", "_models/partial_wakes/Mapped.finalize.html", "_models/partial_wakes/Mapped.initialize.html", "_models/partial_wakes/Mapped.keep.html", "_models/partial_wakes/Mapped.new_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.html", "_models/partial_wakes/PartialAxiwake.__init__.html", "_models/partial_wakes/PartialAxiwake.__repr__.html", "_models/partial_wakes/PartialAxiwake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.evaluate_results.html", "_models/partial_wakes/PartialAxiwake.finalize.html", "_models/partial_wakes/PartialAxiwake.initialize.html", "_models/partial_wakes/PartialAxiwake.keep.html", "_models/partial_wakes/PartialAxiwake.new_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.html", "_models/partial_wakes/PartialDistSlicedWake.__init__.html", "_models/partial_wakes/PartialDistSlicedWake.__repr__.html", "_models/partial_wakes/PartialDistSlicedWake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.evaluate_results.html", "_models/partial_wakes/PartialDistSlicedWake.finalize.html", "_models/partial_wakes/PartialDistSlicedWake.initialize.html", "_models/partial_wakes/PartialDistSlicedWake.keep.html", "_models/partial_wakes/PartialDistSlicedWake.new_wake_deltas.html", "_models/partial_wakes/PartialGrid.html", "_models/partial_wakes/PartialGrid.__init__.html", "_models/partial_wakes/PartialGrid.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.html", "_models/partial_wakes/PartialTopHat.__init__.html", "_models/partial_wakes/PartialTopHat.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.evaluate_results.html", "_models/partial_wakes/PartialTopHat.finalize.html", "_models/partial_wakes/PartialTopHat.initialize.html", "_models/partial_wakes/PartialTopHat.keep.html", "_models/partial_wakes/PartialTopHat.new_wake_deltas.html", "_models/partial_wakes/RotorPoints.html", "_models/partial_wakes/RotorPoints.__init__.html", "_models/partial_wakes/RotorPoints.contribute_to_wake_deltas.html", "_models/partial_wakes/RotorPoints.evaluate_results.html", "_models/partial_wakes/RotorPoints.get_wake_points.html", "_models/partial_wakes/RotorPoints.new_wake_deltas.html", "_models/point_models/SetUniformData.html", "_models/point_models/SetUniformData.__init__.html", "_models/point_models/SetUniformData.calculate.html", "_models/point_models/SetUniformData.initialize.html", "_models/point_models/SetUniformData.output_point_vars.html", "_models/point_models/TKE2TI.html", "_models/point_models/TKE2TI.calculate.html", "_models/point_models/TKE2TI.output_point_vars.html", "_models/point_models/WakeDeltas.html", "_models/point_models/WakeDeltas.__init__.html", "_models/point_models/WakeDeltas.calculate.html", "_models/point_models/WakeDeltas.output_point_vars.html", "_models/rotor_models/CentreRotor.html", "_models/rotor_models/CentreRotor.design_points.html", "_models/rotor_models/CentreRotor.eval_rpoint_results.html", "_models/rotor_models/CentreRotor.get_rotor_points.html", "_models/rotor_models/CentreRotor.n_rotor_points.html", "_models/rotor_models/CentreRotor.rotor_point_weights.html", "_models/rotor_models/GridRotor.html", "_models/rotor_models/GridRotor.__init__.html", "_models/rotor_models/GridRotor.__repr__.html", "_models/rotor_models/GridRotor.design_points.html", "_models/rotor_models/GridRotor.initialize.html", "_models/rotor_models/GridRotor.n_rotor_points.html", "_models/rotor_models/GridRotor.rotor_point_weights.html", "_models/turbine_models/Calculator.html", "_models/turbine_models/Calculator.__init__.html", "_models/turbine_models/Calculator.calculate.html", "_models/turbine_models/Calculator.output_farm_vars.html", "_models/turbine_models/LookupTable.html", "_models/turbine_models/LookupTable.__init__.html", "_models/turbine_models/LookupTable.calculate.html", "_models/turbine_models/LookupTable.initialize.html", "_models/turbine_models/LookupTable.output_farm_vars.html", "_models/turbine_models/PowerMask.html", "_models/turbine_models/PowerMask.__init__.html", "_models/turbine_models/PowerMask.calculate.html", "_models/turbine_models/PowerMask.initialize.html", "_models/turbine_models/PowerMask.output_farm_vars.html", "_models/turbine_models/PowerMask.update_P_ct.html", "_models/turbine_models/RotorCentreCalc.html", "_models/turbine_models/RotorCentreCalc.__init__.html", "_models/turbine_models/RotorCentreCalc.calculate.html", "_models/turbine_models/RotorCentreCalc.finalize.html", "_models/turbine_models/RotorCentreCalc.initialize.html", "_models/turbine_models/RotorCentreCalc.output_farm_vars.html", "_models/turbine_models/SectorManagement.html", "_models/turbine_models/SectorManagement.__init__.html", "_models/turbine_models/SectorManagement.calculate.html", "_models/turbine_models/SectorManagement.initialize.html", "_models/turbine_models/SectorManagement.output_farm_vars.html", "_models/turbine_models/SetFarmVars.html", "_models/turbine_models/SetFarmVars.__init__.html", "_models/turbine_models/SetFarmVars.add_var.html", "_models/turbine_models/SetFarmVars.calculate.html", "_models/turbine_models/SetFarmVars.initialize.html", "_models/turbine_models/SetFarmVars.output_farm_vars.html", "_models/turbine_models/SetFarmVars.reset.html", "_models/turbine_models/SetXYHD.html", "_models/turbine_models/SetXYHD.__init__.html", "_models/turbine_models/SetXYHD.calculate.html", "_models/turbine_models/SetXYHD.output_farm_vars.html", "_models/turbine_models/TableFactors.html", "_models/turbine_models/TableFactors.__init__.html", "_models/turbine_models/TableFactors.calculate.html", "_models/turbine_models/TableFactors.initialize.html", "_models/turbine_models/TableFactors.output_farm_vars.html", "_models/turbine_models/Thrust2Ct.html", "_models/turbine_models/Thrust2Ct.__init__.html", "_models/turbine_models/Thrust2Ct.calculate.html", "_models/turbine_models/Thrust2Ct.output_farm_vars.html", "_models/turbine_models/YAW2YAWM.html", "_models/turbine_models/YAW2YAWM.calculate.html", "_models/turbine_models/YAW2YAWM.output_farm_vars.html", "_models/turbine_models/YAWM2YAW.html", "_models/turbine_models/YAWM2YAW.calculate.html", "_models/turbine_models/YAWM2YAW.output_farm_vars.html", "_models/turbine_models/kTI.html", "_models/turbine_models/kTI.__init__.html", "_models/turbine_models/kTI.__repr__.html", "_models/turbine_models/kTI.calculate.html", "_models/turbine_models/kTI.output_farm_vars.html", "_models/turbine_types/CpCtFile.html", "_models/turbine_types/CpCtFile.__init__.html", "_models/turbine_types/CpCtFromTwo.html", "_models/turbine_types/CpCtFromTwo.__init__.html", "_models/turbine_types/NullType.html", "_models/turbine_types/NullType.calculate.html", "_models/turbine_types/NullType.output_farm_vars.html", "_models/turbine_types/PCtFile.html", "_models/turbine_types/PCtFile.__init__.html", "_models/turbine_types/PCtFile.calculate.html", "_models/turbine_types/PCtFile.finalize.html", "_models/turbine_types/PCtFile.initialize.html", "_models/turbine_types/PCtFile.output_farm_vars.html", "_models/turbine_types/PCtFromTwo.html", "_models/turbine_types/PCtFromTwo.__init__.html", "_models/turbine_types/PCtFromTwo.calculate.html", "_models/turbine_types/PCtFromTwo.finalize.html", "_models/turbine_types/PCtFromTwo.initialize.html", "_models/turbine_types/PCtFromTwo.output_farm_vars.html", "_models/turbine_types/WsRho2PCtFromTwo.html", "_models/turbine_types/WsRho2PCtFromTwo.__init__.html", "_models/turbine_types/WsRho2PCtFromTwo.calculate.html", "_models/turbine_types/WsRho2PCtFromTwo.finalize.html", "_models/turbine_types/WsRho2PCtFromTwo.initialize.html", "_models/turbine_types/WsRho2PCtFromTwo.output_farm_vars.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.calculate.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogStableWsProfile.html", "_models/vertical_profiles/ABLLogStableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogStableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogWsProfile.html", "_models/vertical_profiles/ABLLogWsProfile.calculate.html", "_models/vertical_profiles/ABLLogWsProfile.input_vars.html", "_models/vertical_profiles/ShearedProfile.html", "_models/vertical_profiles/ShearedProfile.calculate.html", "_models/vertical_profiles/ShearedProfile.input_vars.html", "_models/vertical_profiles/UniformProfile.html", "_models/vertical_profiles/UniformProfile.__init__.html", "_models/vertical_profiles/UniformProfile.calculate.html", "_models/vertical_profiles/UniformProfile.input_vars.html", "_models/wake_frames/FarmOrder.html", "_models/wake_frames/FarmOrder.__init__.html", "_models/wake_frames/FarmOrder.calc_order.html", "_models/wake_frames/FarmOrder.finalize.html", "_models/wake_frames/FarmOrder.get_centreline_points.html", "_models/wake_frames/FarmOrder.get_wake_coos.html", "_models/wake_frames/FarmOrder.initialize.html", "_models/wake_frames/RotorWD.html", "_models/wake_frames/RotorWD.__init__.html", "_models/wake_frames/RotorWD.calc_order.html", "_models/wake_frames/RotorWD.get_centreline_points.html", "_models/wake_frames/RotorWD.get_wake_coos.html", "_models/wake_frames/Streamlines.html", "_models/wake_frames/Streamlines.__init__.html", "_models/wake_frames/Streamlines.__repr__.html", "_models/wake_frames/Streamlines.calc_order.html", "_models/wake_frames/Streamlines.get_centreline_points.html", "_models/wake_frames/Streamlines.get_wake_coos.html", "_models/wake_frames/Streamlines.initialize.html", "_models/wake_frames/Timelines.html", "_models/wake_frames/Timelines.__init__.html", "_models/wake_frames/Timelines.calc_order.html", "_models/wake_frames/Timelines.get_centreline_points.html", "_models/wake_frames/Timelines.get_wake_coos.html", "_models/wake_frames/Timelines.initialize.html", "_models/wake_frames/YawedWakes.html", "_models/wake_frames/YawedWakes.__init__.html", "_models/wake_frames/YawedWakes.calc_order.html", "_models/wake_frames/YawedWakes.finalize.html", "_models/wake_frames/YawedWakes.get_centreline_points.html", "_models/wake_frames/YawedWakes.get_wake_coos.html", "_models/wake_frames/YawedWakes.initialize.html", "_models/wake_models/AxisymmetricWakeModel.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.html", "_models/wake_models/DistSlicedWakeModel.__init__.html", "_models/wake_models/DistSlicedWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.contribute_to_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.finalize.html", "_models/wake_models/DistSlicedWakeModel.finalize_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.initialize.html", "_models/wake_models/DistSlicedWakeModel.keep.html", "_models/wake_models/GaussianWakeModel.html", "_models/wake_models/GaussianWakeModel.calc_amplitude_sigma_spsel.html", "_models/wake_models/GaussianWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/TopHatWakeModel.html", "_models/wake_models/TopHatWakeModel.__init__.html", "_models/wake_models/TopHatWakeModel.calc_centreline_wake_deltas.html", "_models/wake_models/TopHatWakeModel.calc_wake_radius.html", "_models/wake_models/TopHatWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/ti/CrespoHernandezTIWake.html", "_models/wake_models/ti/CrespoHernandezTIWake.__init__.html", "_models/wake_models/ti/CrespoHernandezTIWake.__repr__.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_wake_radius.html", "_models/wake_models/ti/CrespoHernandezTIWake.init_wake_deltas.html", "_models/wake_models/ti/IECTIWake.html", "_models/wake_models/ti/IECTIWake.__init__.html", "_models/wake_models/ti/IECTIWake.__repr__.html", "_models/wake_models/ti/IECTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/IECTIWake.calc_wake_radius.html", "_models/wake_models/ti/IECTIWake.init_wake_deltas.html", "_models/wake_models/wind/BastankhahWake.html", "_models/wake_models/wind/BastankhahWake.__init__.html", "_models/wake_models/wind/BastankhahWake.__repr__.html", "_models/wake_models/wind/BastankhahWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/BastankhahWake.init_wake_deltas.html", "_models/wake_models/wind/JensenWake.html", "_models/wake_models/wind/JensenWake.__init__.html", "_models/wake_models/wind/JensenWake.__repr__.html", "_models/wake_models/wind/JensenWake.calc_centreline_wake_deltas.html", "_models/wake_models/wind/JensenWake.calc_wake_radius.html", "_models/wake_models/wind/JensenWake.init_wake_deltas.html", "_models/wake_models/wind/PorteAgelModel.html", "_models/wake_models/wind/PorteAgelModel.AMPL_FAR.html", "_models/wake_models/wind/PorteAgelModel.AMPL_NEAR.html", "_models/wake_models/wind/PorteAgelModel.CHECK.html", "_models/wake_models/wind/PorteAgelModel.DELTA_FAR.html", "_models/wake_models/wind/PorteAgelModel.DELTA_NEAR.html", "_models/wake_models/wind/PorteAgelModel.MDATA_KEY.html", "_models/wake_models/wind/PorteAgelModel.NEAR.html", "_models/wake_models/wind/PorteAgelModel.PARS.html", "_models/wake_models/wind/PorteAgelModel.R_PC.html", "_models/wake_models/wind/PorteAgelModel.R_PC_S.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Y_FAR.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Z_FAR.html", "_models/wake_models/wind/PorteAgelModel.SP_SEL.html", "_models/wake_models/wind/PorteAgelModel.X0.html", "_models/wake_models/wind/PorteAgelModel.__init__.html", "_models/wake_models/wind/PorteAgelModel.calc_data.html", "_models/wake_models/wind/PorteAgelModel.clean.html", "_models/wake_models/wind/PorteAgelModel.get_data.html", "_models/wake_models/wind/PorteAgelModel.has_data.html", "_models/wake_models/wind/PorteAgelModel.pars.html", "_models/wake_models/wind/PorteAgelWake.html", "_models/wake_models/wind/PorteAgelWake.__init__.html", "_models/wake_models/wind/PorteAgelWake.__repr__.html", "_models/wake_models/wind/PorteAgelWake.calc_wakes_spsel_x_yz.html", "_models/wake_models/wind/PorteAgelWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWake.html", "_models/wake_models/wind/TurbOParkWake.__init__.html", "_models/wake_models/wind/TurbOParkWake.__repr__.html", "_models/wake_models/wind/TurbOParkWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWakeIX.html", "_models/wake_models/wind/TurbOParkWakeIX.__init__.html", "_models/wake_models/wind/TurbOParkWakeIX.__repr__.html", "_models/wake_models/wind/TurbOParkWakeIX.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWakeIX.finalize.html", "_models/wake_models/wind/TurbOParkWakeIX.init_wake_deltas.html", "_models/wake_superpositions/LinearSuperposition.html", "_models/wake_superpositions/LinearSuperposition.__init__.html", "_models/wake_superpositions/LinearSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/LinearSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/LinearSuperposition.input_farm_vars.html", "_models/wake_superpositions/MaxSuperposition.html", "_models/wake_superpositions/MaxSuperposition.__init__.html", "_models/wake_superpositions/MaxSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/MaxSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/MaxSuperposition.initialize.html", "_models/wake_superpositions/MaxSuperposition.input_farm_vars.html", "_models/wake_superpositions/ProductSuperposition.html", "_models/wake_superpositions/ProductSuperposition.__init__.html", "_models/wake_superpositions/ProductSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/ProductSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.html", "_models/wake_superpositions/QuadraticSuperposition.__init__.html", "_models/wake_superpositions/QuadraticSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/QuadraticSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.initialize.html", "_models/wake_superpositions/QuadraticSuperposition.input_farm_vars.html", "_models/wake_superpositions/TISuperposition.html", "_models/wake_superpositions/TISuperposition.__init__.html", "_models/wake_superpositions/TISuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/TISuperposition.calc_wakes_plus_wake.html", "_output/Animator.html", "_output/Animator.__init__.html", "_output/Animator.add_generator.html", "_output/Animator.animate.html", "_output/Animator.generators.html", "_output/FarmLayoutOutput.html", "_output/FarmLayoutOutput.__init__.html", "_output/FarmLayoutOutput.get_figure.html", "_output/FarmLayoutOutput.get_layout_data.html", "_output/FarmLayoutOutput.get_layout_dict.html", "_output/FarmLayoutOutput.write_csv.html", "_output/FarmLayoutOutput.write_json.html", "_output/FarmLayoutOutput.write_plot.html", "_output/FarmLayoutOutput.write_xyh.html", "_output/FarmResultsEval.html", "_output/FarmResultsEval.__init__.html", "_output/FarmResultsEval.add_capacity.html", "_output/FarmResultsEval.add_efficiency.html", "_output/FarmResultsEval.calc_farm_efficiency.html", "_output/FarmResultsEval.calc_farm_mean.html", "_output/FarmResultsEval.calc_farm_sum.html", "_output/FarmResultsEval.calc_farm_yield.html", "_output/FarmResultsEval.calc_mean_farm_power.html", "_output/FarmResultsEval.calc_states_mean.html", "_output/FarmResultsEval.calc_states_std.html", "_output/FarmResultsEval.calc_states_sum.html", "_output/FarmResultsEval.calc_turbine_mean.html", "_output/FarmResultsEval.calc_turbine_sum.html", "_output/FarmResultsEval.calc_turbine_yield.html", "_output/FarmResultsEval.gen_stdata.html", "_output/FarmResultsEval.reduce_all.html", "_output/FarmResultsEval.reduce_states.html", "_output/FarmResultsEval.reduce_turbines.html", "_output/FarmResultsEval.weinsum.html", "_output/FlowPlots2D.html", "_output/FlowPlots2D.__init__.html", "_output/FlowPlots2D.gen_states_fig_xy.html", "_output/FlowPlots2D.gen_states_fig_xz.html", "_output/FlowPlots2D.gen_states_fig_yz.html", "_output/FlowPlots2D.get_mean_fig_xy.html", "_output/FlowPlots2D.get_mean_fig_xz.html", "_output/FlowPlots2D.get_mean_fig_yz.html", "_output/Output.html", "_output/Output.new.html", "_output/Output.print_models.html", "_output/Output.write.html", "_output/ResultsWriter.html", "_output/ResultsWriter.__init__.html", "_output/ResultsWriter.write_csv.html", "_output/RosePlotOutput.html", "_output/RosePlotOutput.__init__.html", "_output/RosePlotOutput.get_data.html", "_output/RosePlotOutput.get_data_info.html", "_output/RosePlotOutput.get_figure.html", "_output/RosePlotOutput.write_figure.html", "_output/StateTurbineMap.html", "_output/StateTurbineMap.__init__.html", "_output/StateTurbineMap.plot_map.html", "_output/StatesRosePlotOutput.html", "_output/StatesRosePlotOutput.__init__.html", "_output/TurbineTypeCurves.html", "_output/TurbineTypeCurves.__init__.html", "_output/TurbineTypeCurves.plot_curves.html", "_utils/DataBook.html", "_utils/DataBook.__init__.html", "_utils/DataBook.add_data_package.html", "_utils/DataBook.add_data_package_file.html", "_utils/DataBook.add_file.html", "_utils/DataBook.add_files.html", "_utils/DataBook.get_file_path.html", "_utils/DataBook.toc.html", "_utils/PandasFileHelper.html", "_utils/PandasFileHelper.DATA_FILE_FORMATS.html", "_utils/PandasFileHelper.DEFAULT_FORMAT_DICT.html", "_utils/PandasFileHelper.DEFAULT_READING_PARAMETERS.html", "_utils/PandasFileHelper.DEFAULT_WRITING_PARAMETERS.html", "_utils/PandasFileHelper.read_file.html", "_utils/PandasFileHelper.write_file.html", "_utils/abl/neutral/calc_ws.html", "_utils/abl/neutral/logz.html", "_utils/abl/neutral/ustar.html", "_utils/abl/sheared/calc_ws.html", "_utils/abl/stable/calc_ws.html", "_utils/abl/stable/lgz.html", "_utils/abl/stable/logz.html", "_utils/abl/stable/psi.html", "_utils/abl/stable/ustar.html", "_utils/abl/unstable/calc_ws.html", "_utils/abl/unstable/logz.html", "_utils/abl/unstable/psi.html", "_utils/abl/unstable/ustar.html", "_utils/all_subclasses.html", "_utils/cubic_roots.html", "_utils/delta_wd.html", "_utils/geom2d/AreaGeometry.html", "_utils/geom2d/AreaGeometry.add_to_figure.html", "_utils/geom2d/AreaGeometry.inverse.html", "_utils/geom2d/AreaGeometry.p_max.html", "_utils/geom2d/AreaGeometry.p_min.html", "_utils/geom2d/AreaGeometry.points_distance.html", "_utils/geom2d/AreaGeometry.points_inside.html", "_utils/geom2d/AreaIntersection.html", "_utils/geom2d/AreaIntersection.__new__.html", "_utils/geom2d/AreaUnion.html", "_utils/geom2d/AreaUnion.__init__.html", "_utils/geom2d/AreaUnion.add_to_figure.html", "_utils/geom2d/AreaUnion.inverse.html", "_utils/geom2d/AreaUnion.p_max.html", "_utils/geom2d/AreaUnion.p_min.html", "_utils/geom2d/AreaUnion.points_distance.html", "_utils/geom2d/AreaUnion.points_inside.html", "_utils/geom2d/Circle.html", "_utils/geom2d/Circle.__init__.html", "_utils/geom2d/Circle.add_to_figure.html", "_utils/geom2d/Circle.p_max.html", "_utils/geom2d/Circle.p_min.html", "_utils/geom2d/Circle.points_distance.html", "_utils/geom2d/Circle.points_inside.html", "_utils/geom2d/ClosedPolygon.html", "_utils/geom2d/ClosedPolygon.__init__.html", "_utils/geom2d/ClosedPolygon.add_to_figure.html", "_utils/geom2d/ClosedPolygon.p_max.html", "_utils/geom2d/ClosedPolygon.p_min.html", "_utils/geom2d/ClosedPolygon.points_distance.html", "_utils/geom2d/ClosedPolygon.points_inside.html", "_utils/geom2d/HalfPlane.html", "_utils/geom2d/HalfPlane.__init__.html", "_utils/geom2d/HalfPlane.add_to_figure.html", "_utils/geom2d/HalfPlane.inverse.html", "_utils/geom2d/HalfPlane.p_max.html", "_utils/geom2d/HalfPlane.p_min.html", "_utils/geom2d/HalfPlane.points_distance.html", "_utils/geom2d/HalfPlane.points_inside.html", "_utils/geom2d/InvertedAreaGeometry.html", "_utils/geom2d/InvertedAreaGeometry.__init__.html", "_utils/geom2d/InvertedAreaGeometry.add_to_figure.html", "_utils/geom2d/InvertedAreaGeometry.inverse.html", "_utils/geom2d/InvertedAreaGeometry.p_max.html", "_utils/geom2d/InvertedAreaGeometry.p_min.html", "_utils/geom2d/InvertedAreaGeometry.points_distance.html", "_utils/geom2d/InvertedAreaGeometry.points_inside.html", "_utils/opt/constraints/AreaGeometryConstraint.html", "_utils/opt/constraints/AreaGeometryConstraint.__init__.html", "_utils/opt/constraints/AreaGeometryConstraint.__str__.html", "_utils/opt/constraints/AreaGeometryConstraint.ana_deriv.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_population.html", "_utils/opt/constraints/AreaGeometryConstraint.component_names.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_population.html", "_utils/opt/constraints/AreaGeometryConstraint.initialize.html", "_utils/opt/constraints/AreaGeometryConstraint.initialized.html", "_utils/opt/constraints/AreaGeometryConstraint.n_components.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_float.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_int.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_float.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_int.html", "_utils/opt/constraints/FarmBoundaryConstraint.html", "_utils/opt/constraints/FarmBoundaryConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.html", "_utils/opt/constraints/MinDistConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.calc_individual.html", "_utils/opt/constraints/MinDistConstraint.calc_population.html", "_utils/opt/constraints/MinDistConstraint.initialize.html", "_utils/opt/constraints/MinDistConstraint.n_components.html", "_utils/opt/constraints/MinDistConstraint.vardeps_float.html", "_utils/opt/core/FarmConstraint.html", "_utils/opt/core/FarmConstraint.__init__.html", "_utils/opt/core/FarmConstraint.add_to_layout_figure.html", "_utils/opt/core/FarmConstraint.calc_individual.html", "_utils/opt/core/FarmConstraint.calc_population.html", "_utils/opt/core/FarmConstraint.farm.html", "_utils/opt/core/FarmConstraint.n_components.html", "_utils/opt/core/FarmConstraint.n_sel_turbines.html", "_utils/opt/core/FarmConstraint.print_models.html", "_utils/opt/core/FarmConstraint.sel_turbines.html", "_utils/opt/core/FarmConstraint.vardeps_float.html", "_utils/opt/core/FarmObjective.html", "_utils/opt/core/FarmObjective.__init__.html", "_utils/opt/core/FarmObjective.add_to_layout_figure.html", "_utils/opt/core/FarmObjective.farm.html", "_utils/opt/core/FarmObjective.n_sel_turbines.html", "_utils/opt/core/FarmObjective.print_models.html", "_utils/opt/core/FarmObjective.sel_turbines.html", "_utils/opt/core/FarmOptProblem.html", "_utils/opt/core/FarmOptProblem.INT_INF.html", "_utils/opt/core/FarmOptProblem.__init__.html", "_utils/opt/core/FarmOptProblem.add_constraint.html", "_utils/opt/core/FarmOptProblem.add_objective.html", "_utils/opt/core/FarmOptProblem.add_to_layout_figure.html", "_utils/opt/core/FarmOptProblem.all_turbines.html", "_utils/opt/core/FarmOptProblem.apply_individual.html", "_utils/opt/core/FarmOptProblem.apply_population.html", "_utils/opt/core/FarmOptProblem.calc_gradients.html", "_utils/opt/core/FarmOptProblem.check_constraints_individual.html", "_utils/opt/core/FarmOptProblem.check_constraints_population.html", "_utils/opt/core/FarmOptProblem.constraints_tol.html", "_utils/opt/core/FarmOptProblem.counter.html", "_utils/opt/core/FarmOptProblem.evaluate_individual.html", "_utils/opt/core/FarmOptProblem.evaluate_population.html", "_utils/opt/core/FarmOptProblem.farm.html", "_utils/opt/core/FarmOptProblem.finalize_individual.html", "_utils/opt/core/FarmOptProblem.finalize_population.html", "_utils/opt/core/FarmOptProblem.get_gradients.html", "_utils/opt/core/FarmOptProblem.initial_values_float.html", "_utils/opt/core/FarmOptProblem.initial_values_int.html", "_utils/opt/core/FarmOptProblem.initialize.html", "_utils/opt/core/FarmOptProblem.max_values_constraints.html", "_utils/opt/core/FarmOptProblem.max_values_float.html", "_utils/opt/core/FarmOptProblem.max_values_int.html", "_utils/opt/core/FarmOptProblem.maximize_objs.html", "_utils/opt/core/FarmOptProblem.min_values_constraints.html", "_utils/opt/core/FarmOptProblem.min_values_float.html", "_utils/opt/core/FarmOptProblem.min_values_int.html", "_utils/opt/core/FarmOptProblem.n_constraints.html", "_utils/opt/core/FarmOptProblem.n_objectives.html", "_utils/opt/core/FarmOptProblem.n_sel_turbines.html", "_utils/opt/core/FarmOptProblem.n_vars_float.html", "_utils/opt/core/FarmOptProblem.n_vars_int.html", "_utils/opt/core/FarmOptProblem.parse_tvar.html", "_utils/opt/core/FarmOptProblem.sel_turbines.html", "_utils/opt/core/FarmOptProblem.tvar.html", "_utils/opt/core/FarmOptProblem.update_problem_individual.html", "_utils/opt/core/FarmOptProblem.update_problem_population.html", "_utils/opt/core/FarmOptProblem.var_names_float.html", "_utils/opt/core/FarmOptProblem.var_names_int.html", "_utils/opt/core/FarmVarsProblem.html", "_utils/opt/core/FarmVarsProblem.initialize.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_individual.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_population.html", "_utils/opt/core/FarmVarsProblem.update_problem_individual.html", "_utils/opt/core/FarmVarsProblem.update_problem_population.html", "_utils/opt/core/PopStates.html", "_utils/opt/core/PopStates.__init__.html", "_utils/opt/core/PopStates.calculate.html", "_utils/opt/core/PopStates.initialize.html", "_utils/opt/core/PopStates.output_point_vars.html", "_utils/opt/core/PopStates.size.html", "_utils/opt/core/PopStates.weights.html", "_utils/opt/objectives/FarmVarObjective.html", "_utils/opt/objectives/FarmVarObjective.__init__.html", "_utils/opt/objectives/FarmVarObjective.calc_individual.html", "_utils/opt/objectives/FarmVarObjective.calc_population.html", "_utils/opt/objectives/FarmVarObjective.finalize_individual.html", "_utils/opt/objectives/FarmVarObjective.initialize.html", "_utils/opt/objectives/FarmVarObjective.maximize.html", "_utils/opt/objectives/FarmVarObjective.n_components.html", "_utils/opt/objectives/FarmVarObjective.vardeps_float.html", "_utils/opt/objectives/MaxFarmPower.html", "_utils/opt/objectives/MaxFarmPower.__init__.html", "_utils/opt/objectives/MaxNTurbines.html", "_utils/opt/objectives/MaxNTurbines.__init__.html", "_utils/opt/objectives/MaxNTurbines.calc_individual.html", "_utils/opt/objectives/MaxNTurbines.calc_population.html", "_utils/opt/objectives/MaxNTurbines.maximize.html", "_utils/opt/objectives/MaxNTurbines.n_components.html", "_utils/opt/objectives/MinimalMaxTI.html", "_utils/opt/objectives/MinimalMaxTI.__init__.html", "_utils/opt/problems/OptFarmVars.html", "_utils/opt/problems/OptFarmVars.__init__.html", "_utils/opt/problems/OptFarmVars.add_var.html", "_utils/opt/problems/OptFarmVars.initial_values_float.html", "_utils/opt/problems/OptFarmVars.initial_values_int.html", "_utils/opt/problems/OptFarmVars.initialize.html", "_utils/opt/problems/OptFarmVars.max_values_float.html", "_utils/opt/problems/OptFarmVars.max_values_int.html", "_utils/opt/problems/OptFarmVars.min_values_float.html", "_utils/opt/problems/OptFarmVars.min_values_int.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_individual.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_population.html", "_utils/opt/problems/OptFarmVars.var_names_float.html", "_utils/opt/problems/OptFarmVars.var_names_int.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.get_bounds.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintscdist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivescdist.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.var_names_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_int.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_int.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.ANGLE.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.var_names_float.html", "_utils/read_shp.html", "_utils/read_shp_polygons.html", "_utils/runners/DaskRunner.html", "_utils/runners/DaskRunner.__init__.html", "_utils/runners/DaskRunner.finalize.html", "_utils/runners/DaskRunner.initialize.html", "_utils/runners/DaskRunner.is_distributed.html", "_utils/runners/DaskRunner.print.html", "_utils/runners/DaskRunner.run.html", "_utils/runners/DefaultRunner.html", "_utils/runners/DefaultRunner.run.html", "_utils/runners/Runner.html", "_utils/runners/Runner.__init__.html", "_utils/runners/Runner.finalize.html", "_utils/runners/Runner.initialize.html", "_utils/runners/Runner.initialized.html", "_utils/runners/Runner.run.html", "_utils/show_plotly_fig.html", "_utils/shp2csv.html", "_utils/shp2geom2d.html", "_utils/two_circles/area.html", "_utils/two_circles/calc_area.html", "_utils/uv2wd.html", "_utils/wd2uv.html", "_utils/wd2wdvec.html", "_utils/wdvec2wd.html", "api.html", "api_algorithms.html", "api_constants.html", "api_core.html", "api_foxes.html", "api_input.html", "api_models.html", "api_opt.html", "api_opt_problems.html", "api_opt_problems_geom.html", "api_output.html", "api_utils.html", "api_utils_abl.html", "api_variables.html", "api_wake_models.html", "citation.html", "examples.html", "history.html", "index.html", "installation.html", "notebooks/data.html", "notebooks/heterogeneous.html", "notebooks/layout_opt.html", "notebooks/model_book.html", "notebooks/multi_height.html", "notebooks/overview.html", "notebooks/power_mask.html", "notebooks/sector_man.html", "notebooks/single_row.html", "notebooks/timelines.html", "notebooks/timeseries.html", "notebooks/wind_rose.html", "notebooks/yawed_wake.html"]})