Search.setIndex({"titles": ["foxes.core.Algorithm", "foxes.core.Algorithm.__init__", "foxes.core.Algorithm.finalize", "foxes.core.Algorithm.finalize_model", "foxes.core.Algorithm.get_models_data", "foxes.core.Algorithm.idata_mem", "foxes.core.Algorithm.initialize", "foxes.core.Algorithm.new", "foxes.core.Algorithm.new_point_data", "foxes.core.Algorithm.print", "foxes.core.Algorithm.update_idata", "foxes.core.Algorithm.update_n_turbines", "foxes.core.Data", "foxes.core.Data.__init__", "foxes.core.DataCalcModel", "foxes.core.DataCalcModel.calculate", "foxes.core.DataCalcModel.run_calculation", "foxes.core.ExtendedStates", "foxes.core.ExtendedStates.__init__", "foxes.core.ExtendedStates.append", "foxes.core.ExtendedStates.calculate", "foxes.core.ExtendedStates.finalize", "foxes.core.ExtendedStates.index", "foxes.core.ExtendedStates.initialize", "foxes.core.ExtendedStates.output_point_vars", "foxes.core.ExtendedStates.size", "foxes.core.ExtendedStates.weights", "foxes.core.FarmController", "foxes.core.FarmController.__init__", "foxes.core.FarmController.calculate", "foxes.core.FarmController.collect_models", "foxes.core.FarmController.finalize", "foxes.core.FarmController.initialize", "foxes.core.FarmController.output_farm_vars", "foxes.core.FarmController.set_pars", "foxes.core.FarmDataModel", "foxes.core.FarmDataModel.__init__", "foxes.core.FarmDataModel.calculate", "foxes.core.FarmDataModel.output_farm_vars", "foxes.core.FarmDataModel.run_calculation", "foxes.core.FarmDataModelList", "foxes.core.FarmDataModelList.__init__", "foxes.core.FarmDataModelList.append", "foxes.core.FarmDataModelList.calculate", "foxes.core.FarmDataModelList.finalize", "foxes.core.FarmDataModelList.initialize", "foxes.core.FarmDataModelList.output_farm_vars", "foxes.core.FarmModel", "foxes.core.Model", "foxes.core.Model.__init__", "foxes.core.Model.__repr__", "foxes.core.Model.finalize", "foxes.core.Model.get_data", "foxes.core.Model.initialize", "foxes.core.Model.initialized", "foxes.core.Model.model_id", "foxes.core.Model.var", "foxes.core.PartialWakesModel", "foxes.core.PartialWakesModel.__init__", "foxes.core.PartialWakesModel.contribute_to_wake_deltas", "foxes.core.PartialWakesModel.evaluate_results", "foxes.core.PartialWakesModel.initialize", "foxes.core.PartialWakesModel.new", "foxes.core.PartialWakesModel.new_wake_deltas", "foxes.core.PointDataModel", "foxes.core.PointDataModel.calculate", "foxes.core.PointDataModel.output_point_vars", "foxes.core.PointDataModel.run_calculation", "foxes.core.PointDataModelList", "foxes.core.PointDataModelList.__init__", "foxes.core.PointDataModelList.append", "foxes.core.PointDataModelList.calculate", "foxes.core.PointDataModelList.finalize", "foxes.core.PointDataModelList.initialize", "foxes.core.PointDataModelList.output_point_vars", "foxes.core.RotorModel", "foxes.core.RotorModel.__init__", "foxes.core.RotorModel.calculate", "foxes.core.RotorModel.design_points", "foxes.core.RotorModel.eval_rpoint_results", "foxes.core.RotorModel.get_rotor_points", "foxes.core.RotorModel.n_rotor_points", "foxes.core.RotorModel.output_farm_vars", "foxes.core.RotorModel.rotor_point_weights", "foxes.core.States", "foxes.core.States.index", "foxes.core.States.output_point_vars", "foxes.core.States.size", "foxes.core.States.weights", "foxes.core.Turbine", "foxes.core.Turbine.__init__", "foxes.core.Turbine.add_model", "foxes.core.Turbine.insert_model", "foxes.core.TurbineModel", "foxes.core.TurbineModel.calculate", "foxes.core.TurbineType", "foxes.core.TurbineType.__init__", "foxes.core.VerticalProfile", "foxes.core.VerticalProfile.calculate", "foxes.core.VerticalProfile.input_vars", "foxes.core.VerticalProfile.new", "foxes.core.WakeFrame", "foxes.core.WakeFrame.calc_centreline_integral", "foxes.core.WakeFrame.calc_order", "foxes.core.WakeFrame.get_centreline_points", "foxes.core.WakeFrame.get_wake_coos", "foxes.core.WakeModel", "foxes.core.WakeModel.contribute_to_wake_deltas", "foxes.core.WakeModel.finalize_wake_deltas", "foxes.core.WakeModel.init_wake_deltas", "foxes.core.WakeSuperposition", "foxes.core.WakeSuperposition.calc_final_wake_delta", "foxes.core.WakeSuperposition.calc_wakes_plus_wake", "foxes.core.WindFarm", "foxes.core.WindFarm.__init__", "foxes.core.WindFarm.add_turbine", "foxes.core.WindFarm.n_turbines", "foxes.core.WindFarm.turbine_names", "foxes.data.StaticData", "foxes.data.StaticData.__init__", "foxes.data.parse_Pct_file_name", "foxes.data.parse_Pct_two_files", "foxes.input.farm_layout.add_from_csv", "foxes.input.farm_layout.add_from_df", "foxes.input.farm_layout.add_from_file", "foxes.input.farm_layout.add_from_json", "foxes.input.farm_layout.add_grid", "foxes.input.farm_layout.add_row", "foxes.input.states.FieldDataNC", "foxes.input.states.FieldDataNC.__init__", "foxes.input.states.FieldDataNC.calculate", "foxes.input.states.FieldDataNC.index", "foxes.input.states.FieldDataNC.initialize", "foxes.input.states.FieldDataNC.output_point_vars", "foxes.input.states.FieldDataNC.size", "foxes.input.states.FieldDataNC.weights", "foxes.input.states.MultiHeightStates", "foxes.input.states.MultiHeightStates.RDICT", "foxes.input.states.MultiHeightStates.__init__", "foxes.input.states.MultiHeightStates.calculate", "foxes.input.states.MultiHeightStates.finalize", "foxes.input.states.MultiHeightStates.index", "foxes.input.states.MultiHeightStates.initialize", "foxes.input.states.MultiHeightStates.output_point_vars", "foxes.input.states.MultiHeightStates.reset", "foxes.input.states.MultiHeightStates.size", "foxes.input.states.MultiHeightStates.weights", "foxes.input.states.MultiHeightTimeseries", "foxes.input.states.MultiHeightTimeseries.RDICT", "foxes.input.states.ScanWS", "foxes.input.states.ScanWS.__init__", "foxes.input.states.ScanWS.calculate", "foxes.input.states.ScanWS.initialize", "foxes.input.states.ScanWS.output_point_vars", "foxes.input.states.ScanWS.size", "foxes.input.states.ScanWS.weights", "foxes.input.states.SingleStateStates", "foxes.input.states.SingleStateStates.__init__", "foxes.input.states.SingleStateStates.calculate", "foxes.input.states.SingleStateStates.initialize", "foxes.input.states.SingleStateStates.output_point_vars", "foxes.input.states.SingleStateStates.size", "foxes.input.states.SingleStateStates.weights", "foxes.input.states.StatesTable", "foxes.input.states.StatesTable.RDICT", "foxes.input.states.StatesTable.__init__", "foxes.input.states.StatesTable.calculate", "foxes.input.states.StatesTable.finalize", "foxes.input.states.StatesTable.index", "foxes.input.states.StatesTable.initialize", "foxes.input.states.StatesTable.output_point_vars", "foxes.input.states.StatesTable.reset", "foxes.input.states.StatesTable.size", "foxes.input.states.StatesTable.weights", "foxes.input.states.Timeseries", "foxes.input.states.Timeseries.RDICT", "foxes.input.states.create_random_abl_states", "foxes.input.windio.read_case", "foxes.models.farm_controllers.BasicFarmController", "foxes.models.farm_models.Turbine2FarmModel", "foxes.models.farm_models.Turbine2FarmModel.__init__", "foxes.models.farm_models.Turbine2FarmModel.__repr__", "foxes.models.farm_models.Turbine2FarmModel.calculate", "foxes.models.farm_models.Turbine2FarmModel.finalize", "foxes.models.farm_models.Turbine2FarmModel.initialize", "foxes.models.farm_models.Turbine2FarmModel.output_farm_vars", "foxes.models.model_book.Dict", "foxes.models.model_book.Dict.__getitem__", "foxes.models.model_book.Dict.__init__", "foxes.models.model_book.ModelBook", "foxes.models.model_book.ModelBook.__getitem__", "foxes.models.model_book.ModelBook.__init__", "foxes.models.model_book.ModelBook.finalize", "foxes.models.model_book.ModelBook.print_toc", "foxes.models.partial_wakes.Mapped", "foxes.models.partial_wakes.Mapped.__init__", "foxes.models.partial_wakes.Mapped.contribute_to_wake_deltas", "foxes.models.partial_wakes.Mapped.evaluate_results", "foxes.models.partial_wakes.Mapped.finalize", "foxes.models.partial_wakes.Mapped.initialize", "foxes.models.partial_wakes.Mapped.new_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake", "foxes.models.partial_wakes.PartialAxiwake.__init__", "foxes.models.partial_wakes.PartialAxiwake.__repr__", "foxes.models.partial_wakes.PartialAxiwake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake.evaluate_results", "foxes.models.partial_wakes.PartialAxiwake.finalize", "foxes.models.partial_wakes.PartialAxiwake.initialize", "foxes.models.partial_wakes.PartialAxiwake.new_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake", "foxes.models.partial_wakes.PartialDistSlicedWake.__init__", "foxes.models.partial_wakes.PartialDistSlicedWake.__repr__", "foxes.models.partial_wakes.PartialDistSlicedWake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake.evaluate_results", "foxes.models.partial_wakes.PartialDistSlicedWake.finalize", "foxes.models.partial_wakes.PartialDistSlicedWake.initialize", "foxes.models.partial_wakes.PartialDistSlicedWake.new_wake_deltas", "foxes.models.partial_wakes.PartialGrid", "foxes.models.partial_wakes.PartialGrid.__init__", "foxes.models.partial_wakes.PartialGrid.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat", "foxes.models.partial_wakes.PartialTopHat.__init__", "foxes.models.partial_wakes.PartialTopHat.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat.evaluate_results", "foxes.models.partial_wakes.PartialTopHat.finalize", "foxes.models.partial_wakes.PartialTopHat.get_wake_points", "foxes.models.partial_wakes.PartialTopHat.initialize", "foxes.models.partial_wakes.PartialTopHat.new_wake_deltas", "foxes.models.partial_wakes.RotorPoints", "foxes.models.partial_wakes.RotorPoints.__init__", "foxes.models.partial_wakes.RotorPoints.contribute_to_wake_deltas", "foxes.models.partial_wakes.RotorPoints.evaluate_results", "foxes.models.partial_wakes.RotorPoints.get_wake_points", "foxes.models.partial_wakes.RotorPoints.initialize", "foxes.models.partial_wakes.RotorPoints.new_wake_deltas", "foxes.models.point_models.SetUniformData", "foxes.models.point_models.SetUniformData.__init__", "foxes.models.point_models.SetUniformData.calculate", "foxes.models.point_models.SetUniformData.initialize", "foxes.models.point_models.SetUniformData.output_point_vars", "foxes.models.point_models.TKE2TI", "foxes.models.point_models.TKE2TI.calculate", "foxes.models.point_models.TKE2TI.output_point_vars", "foxes.models.point_models.WakeDeltas", "foxes.models.point_models.WakeDeltas.__init__", "foxes.models.point_models.WakeDeltas.calculate", "foxes.models.point_models.WakeDeltas.output_point_vars", "foxes.models.rotor_models.CentreRotor", "foxes.models.rotor_models.CentreRotor.design_points", "foxes.models.rotor_models.CentreRotor.eval_rpoint_results", "foxes.models.rotor_models.CentreRotor.get_rotor_points", "foxes.models.rotor_models.CentreRotor.n_rotor_points", "foxes.models.rotor_models.CentreRotor.rotor_point_weights", "foxes.models.rotor_models.GridRotor", "foxes.models.rotor_models.GridRotor.__init__", "foxes.models.rotor_models.GridRotor.__repr__", "foxes.models.rotor_models.GridRotor.design_points", "foxes.models.rotor_models.GridRotor.initialize", "foxes.models.rotor_models.GridRotor.n_rotor_points", "foxes.models.rotor_models.GridRotor.rotor_point_weights", "foxes.models.turbine_models.Calculator", "foxes.models.turbine_models.Calculator.__init__", "foxes.models.turbine_models.Calculator.calculate", "foxes.models.turbine_models.Calculator.output_farm_vars", "foxes.models.turbine_models.LookupTable", "foxes.models.turbine_models.LookupTable.__init__", "foxes.models.turbine_models.LookupTable.calculate", "foxes.models.turbine_models.LookupTable.initialize", "foxes.models.turbine_models.LookupTable.output_farm_vars", "foxes.models.turbine_models.PowerMask", "foxes.models.turbine_models.PowerMask.__init__", "foxes.models.turbine_models.PowerMask.calculate", "foxes.models.turbine_models.PowerMask.initialize", "foxes.models.turbine_models.PowerMask.output_farm_vars", "foxes.models.turbine_models.PowerMask.update_P_ct", "foxes.models.turbine_models.RotorCentreCalc", "foxes.models.turbine_models.RotorCentreCalc.__init__", "foxes.models.turbine_models.RotorCentreCalc.calculate", "foxes.models.turbine_models.RotorCentreCalc.finalize", "foxes.models.turbine_models.RotorCentreCalc.initialize", "foxes.models.turbine_models.RotorCentreCalc.output_farm_vars", "foxes.models.turbine_models.SectorManagement", "foxes.models.turbine_models.SectorManagement.__init__", "foxes.models.turbine_models.SectorManagement.calculate", "foxes.models.turbine_models.SectorManagement.initialize", "foxes.models.turbine_models.SectorManagement.output_farm_vars", "foxes.models.turbine_models.SetFarmVars", "foxes.models.turbine_models.SetFarmVars.__init__", "foxes.models.turbine_models.SetFarmVars.add_var", "foxes.models.turbine_models.SetFarmVars.calculate", "foxes.models.turbine_models.SetFarmVars.initialize", "foxes.models.turbine_models.SetFarmVars.output_farm_vars", "foxes.models.turbine_models.SetFarmVars.reset", "foxes.models.turbine_models.SetXYHD", "foxes.models.turbine_models.SetXYHD.__init__", "foxes.models.turbine_models.SetXYHD.calculate", "foxes.models.turbine_models.SetXYHD.output_farm_vars", "foxes.models.turbine_models.TableFactors", "foxes.models.turbine_models.TableFactors.__init__", "foxes.models.turbine_models.TableFactors.calculate", "foxes.models.turbine_models.TableFactors.initialize", "foxes.models.turbine_models.TableFactors.output_farm_vars", "foxes.models.turbine_models.Thrust2Ct", "foxes.models.turbine_models.Thrust2Ct.__init__", "foxes.models.turbine_models.Thrust2Ct.calculate", "foxes.models.turbine_models.Thrust2Ct.output_farm_vars", "foxes.models.turbine_models.YAW2YAWM", "foxes.models.turbine_models.YAW2YAWM.calculate", "foxes.models.turbine_models.YAW2YAWM.output_farm_vars", "foxes.models.turbine_models.YAWM2YAW", "foxes.models.turbine_models.YAWM2YAW.calculate", "foxes.models.turbine_models.YAWM2YAW.output_farm_vars", "foxes.models.turbine_models.kTI", "foxes.models.turbine_models.kTI.__init__", "foxes.models.turbine_models.kTI.__repr__", "foxes.models.turbine_models.kTI.calculate", "foxes.models.turbine_models.kTI.output_farm_vars", "foxes.models.turbine_types.CpCtFile", "foxes.models.turbine_types.CpCtFile.__init__", "foxes.models.turbine_types.CpCtFromTwo", "foxes.models.turbine_types.CpCtFromTwo.__init__", "foxes.models.turbine_types.NullType", "foxes.models.turbine_types.NullType.calculate", "foxes.models.turbine_types.NullType.output_farm_vars", "foxes.models.turbine_types.PCtFile", "foxes.models.turbine_types.PCtFile.__init__", "foxes.models.turbine_types.PCtFile.calculate", "foxes.models.turbine_types.PCtFile.finalize", "foxes.models.turbine_types.PCtFile.initialize", "foxes.models.turbine_types.PCtFile.output_farm_vars", "foxes.models.turbine_types.PCtFromTwo", "foxes.models.turbine_types.PCtFromTwo.__init__", "foxes.models.turbine_types.PCtFromTwo.calculate", "foxes.models.turbine_types.PCtFromTwo.finalize", "foxes.models.turbine_types.PCtFromTwo.initialize", "foxes.models.turbine_types.PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsRho2PCtFromTwo", "foxes.models.turbine_types.WsRho2PCtFromTwo.__init__", "foxes.models.turbine_types.WsRho2PCtFromTwo.calculate", "foxes.models.turbine_types.WsRho2PCtFromTwo.finalize", "foxes.models.turbine_types.WsRho2PCtFromTwo.initialize", "foxes.models.turbine_types.WsRho2PCtFromTwo.output_farm_vars", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogStableWsProfile", "foxes.models.vertical_profiles.ABLLogStableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogStableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogWsProfile", "foxes.models.vertical_profiles.ABLLogWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogWsProfile.input_vars", "foxes.models.vertical_profiles.ShearedProfile", "foxes.models.vertical_profiles.ShearedProfile.calculate", "foxes.models.vertical_profiles.ShearedProfile.input_vars", "foxes.models.vertical_profiles.UniformProfile", "foxes.models.vertical_profiles.UniformProfile.__init__", "foxes.models.vertical_profiles.UniformProfile.calculate", "foxes.models.vertical_profiles.UniformProfile.input_vars", "foxes.models.wake_frames.FarmOrder", "foxes.models.wake_frames.FarmOrder.__init__", "foxes.models.wake_frames.FarmOrder.calc_order", "foxes.models.wake_frames.FarmOrder.finalize", "foxes.models.wake_frames.FarmOrder.get_centreline_points", "foxes.models.wake_frames.FarmOrder.get_wake_coos", "foxes.models.wake_frames.FarmOrder.initialize", "foxes.models.wake_frames.RotorWD", "foxes.models.wake_frames.RotorWD.__init__", "foxes.models.wake_frames.RotorWD.calc_order", "foxes.models.wake_frames.RotorWD.get_centreline_points", "foxes.models.wake_frames.RotorWD.get_wake_coos", "foxes.models.wake_frames.Streamlines", "foxes.models.wake_frames.Streamlines.__init__", "foxes.models.wake_frames.Streamlines.__repr__", "foxes.models.wake_frames.Streamlines.calc_order", "foxes.models.wake_frames.Streamlines.get_centreline_points", "foxes.models.wake_frames.Streamlines.get_wake_coos", "foxes.models.wake_frames.Streamlines.initialize", "foxes.models.wake_frames.YawedWakes", "foxes.models.wake_frames.YawedWakes.__init__", "foxes.models.wake_frames.YawedWakes.calc_order", "foxes.models.wake_frames.YawedWakes.finalize", "foxes.models.wake_frames.YawedWakes.get_centreline_points", "foxes.models.wake_frames.YawedWakes.get_wake_coos", "foxes.models.wake_frames.YawedWakes.initialize", "foxes.models.wake_models.AxisymmetricWakeModel", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel", "foxes.models.wake_models.DistSlicedWakeModel.__init__", "foxes.models.wake_models.DistSlicedWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel.contribute_to_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.finalize", "foxes.models.wake_models.DistSlicedWakeModel.finalize_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.initialize", "foxes.models.wake_models.GaussianWakeModel", "foxes.models.wake_models.GaussianWakeModel.calc_amplitude_sigma_spsel", "foxes.models.wake_models.GaussianWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.TopHatWakeModel", "foxes.models.wake_models.TopHatWakeModel.__init__", "foxes.models.wake_models.TopHatWakeModel.calc_centreline_wake_deltas", "foxes.models.wake_models.TopHatWakeModel.calc_wake_radius", "foxes.models.wake_models.TopHatWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.ti.CrespoHernandezTIWake", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__init__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__repr__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_wake_radius", "foxes.models.wake_models.ti.CrespoHernandezTIWake.init_wake_deltas", "foxes.models.wake_models.ti.IECTIWake", "foxes.models.wake_models.ti.IECTIWake.__init__", "foxes.models.wake_models.ti.IECTIWake.__repr__", "foxes.models.wake_models.ti.IECTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.IECTIWake.calc_wake_radius", "foxes.models.wake_models.ti.IECTIWake.init_wake_deltas", "foxes.models.wake_models.wind.BastankhahWake", "foxes.models.wake_models.wind.BastankhahWake.__init__", "foxes.models.wake_models.wind.BastankhahWake.__repr__", "foxes.models.wake_models.wind.BastankhahWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.BastankhahWake.init_wake_deltas", "foxes.models.wake_models.wind.JensenWake", "foxes.models.wake_models.wind.JensenWake.__init__", "foxes.models.wake_models.wind.JensenWake.__repr__", "foxes.models.wake_models.wind.JensenWake.calc_centreline_wake_deltas", "foxes.models.wake_models.wind.JensenWake.calc_wake_radius", "foxes.models.wake_models.wind.JensenWake.init_wake_deltas", "foxes.models.wake_models.wind.PorteAgelModel", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_FAR", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.CHECK", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_FAR", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.MDATA_KEY", "foxes.models.wake_models.wind.PorteAgelModel.NEAR", "foxes.models.wake_models.wind.PorteAgelModel.PARS", "foxes.models.wake_models.wind.PorteAgelModel.R_PC", "foxes.models.wake_models.wind.PorteAgelModel.R_PC_S", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Y_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Z_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SP_SEL", "foxes.models.wake_models.wind.PorteAgelModel.X0", "foxes.models.wake_models.wind.PorteAgelModel.__init__", "foxes.models.wake_models.wind.PorteAgelModel.calc_data", "foxes.models.wake_models.wind.PorteAgelModel.clean", "foxes.models.wake_models.wind.PorteAgelModel.get_data", "foxes.models.wake_models.wind.PorteAgelModel.has_data", "foxes.models.wake_models.wind.PorteAgelModel.pars", "foxes.models.wake_models.wind.PorteAgelWake", "foxes.models.wake_models.wind.PorteAgelWake.__init__", "foxes.models.wake_models.wind.PorteAgelWake.__repr__", "foxes.models.wake_models.wind.PorteAgelWake.calc_wakes_spsel_x_yz", "foxes.models.wake_models.wind.PorteAgelWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWake", "foxes.models.wake_models.wind.TurbOParkWake.__init__", "foxes.models.wake_models.wind.TurbOParkWake.__repr__", "foxes.models.wake_models.wind.TurbOParkWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWakeIX", "foxes.models.wake_models.wind.TurbOParkWakeIX.__init__", "foxes.models.wake_models.wind.TurbOParkWakeIX.__repr__", "foxes.models.wake_models.wind.TurbOParkWakeIX.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWakeIX.init_wake_deltas", "foxes.models.wake_superpositions.LinearSuperposition", "foxes.models.wake_superpositions.LinearSuperposition.__init__", "foxes.models.wake_superpositions.LinearSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.LinearSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.MaxSuperposition", "foxes.models.wake_superpositions.MaxSuperposition.__init__", "foxes.models.wake_superpositions.MaxSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.MaxSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.MaxSuperposition.initialize", "foxes.models.wake_superpositions.ProductSuperposition", "foxes.models.wake_superpositions.ProductSuperposition.__init__", "foxes.models.wake_superpositions.ProductSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.ProductSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition", "foxes.models.wake_superpositions.QuadraticSuperposition.__init__", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition.initialize", "foxes.models.wake_superpositions.TISuperposition", "foxes.models.wake_superpositions.TISuperposition.__init__", "foxes.models.wake_superpositions.TISuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.TISuperposition.calc_wakes_plus_wake", "foxes.output.FarmLayoutOutput", "foxes.output.FarmLayoutOutput.__init__", "foxes.output.FarmLayoutOutput.get_figure", "foxes.output.FarmLayoutOutput.get_layout_data", "foxes.output.FarmLayoutOutput.get_layout_dict", "foxes.output.FarmLayoutOutput.write_csv", "foxes.output.FarmLayoutOutput.write_json", "foxes.output.FarmLayoutOutput.write_plot", "foxes.output.FarmLayoutOutput.write_xyh", "foxes.output.FarmResultsEval", "foxes.output.FarmResultsEval.__init__", "foxes.output.FarmResultsEval.add_capacity", "foxes.output.FarmResultsEval.add_efficiency", "foxes.output.FarmResultsEval.calc_farm_efficiency", "foxes.output.FarmResultsEval.calc_farm_mean", "foxes.output.FarmResultsEval.calc_farm_sum", "foxes.output.FarmResultsEval.calc_farm_yield", "foxes.output.FarmResultsEval.calc_mean_farm_power", "foxes.output.FarmResultsEval.calc_states_mean", "foxes.output.FarmResultsEval.calc_states_std", "foxes.output.FarmResultsEval.calc_states_sum", "foxes.output.FarmResultsEval.calc_turbine_mean", "foxes.output.FarmResultsEval.calc_turbine_sum", "foxes.output.FarmResultsEval.calc_turbine_yield", "foxes.output.FarmResultsEval.reduce_all", "foxes.output.FarmResultsEval.reduce_states", "foxes.output.FarmResultsEval.reduce_turbines", "foxes.output.FarmResultsEval.weinsum", "foxes.output.FlowPlots2D", "foxes.output.FlowPlots2D.__init__", "foxes.output.FlowPlots2D.gen_states_fig_xy", "foxes.output.FlowPlots2D.gen_states_fig_xz", "foxes.output.FlowPlots2D.gen_states_fig_yz", "foxes.output.FlowPlots2D.get_mean_fig_xy", "foxes.output.FlowPlots2D.get_mean_fig_xz", "foxes.output.FlowPlots2D.get_mean_fig_yz", "foxes.output.Output", "foxes.output.Output.new", "foxes.output.Output.print_models", "foxes.output.Output.write", "foxes.output.ResultsWriter", "foxes.output.ResultsWriter.__init__", "foxes.output.ResultsWriter.write_csv", "foxes.output.RosePlotOutput", "foxes.output.RosePlotOutput.__init__", "foxes.output.RosePlotOutput.get_data", "foxes.output.RosePlotOutput.get_data_info", "foxes.output.RosePlotOutput.get_figure", "foxes.output.RosePlotOutput.write_figure", "foxes.output.StateTurbineMap", "foxes.output.StateTurbineMap.__init__", "foxes.output.StateTurbineMap.plot_map", "foxes.output.StatesRosePlotOutput", "foxes.output.StatesRosePlotOutput.__init__", "foxes.output.TurbineTypeCurves", "foxes.output.TurbineTypeCurves.__init__", "foxes.output.TurbineTypeCurves.plot_curves", "foxes.utils.DataBook", "foxes.utils.DataBook.__init__", "foxes.utils.DataBook.add_data_package", "foxes.utils.DataBook.add_data_package_file", "foxes.utils.DataBook.add_file", "foxes.utils.DataBook.add_files", "foxes.utils.DataBook.get_file_path", "foxes.utils.DataBook.toc", "foxes.utils.PandasFileHelper", "foxes.utils.PandasFileHelper.DATA_FILE_FORMATS", "foxes.utils.PandasFileHelper.DEFAULT_FORMAT_DICT", "foxes.utils.PandasFileHelper.DEFAULT_READING_PARAMETERS", "foxes.utils.PandasFileHelper.DEFAULT_WRITING_PARAMETERS", "foxes.utils.PandasFileHelper.read_file", "foxes.utils.PandasFileHelper.write_file", "foxes.utils.abl.neutral.calc_ws", "foxes.utils.abl.neutral.logz", "foxes.utils.abl.neutral.ustar", "foxes.utils.abl.sheared.calc_ws", "foxes.utils.abl.stable.calc_ws", "foxes.utils.abl.stable.lgz", "foxes.utils.abl.stable.logz", "foxes.utils.abl.stable.psi", "foxes.utils.abl.stable.ustar", "foxes.utils.abl.unstable.calc_ws", "foxes.utils.abl.unstable.logz", "foxes.utils.abl.unstable.psi", "foxes.utils.abl.unstable.ustar", "foxes.utils.all_subclasses", "foxes.utils.cubic_roots", "foxes.utils.delta_wd", "foxes.utils.geom2d.AreaGeometry", "foxes.utils.geom2d.AreaGeometry.add_to_figure", "foxes.utils.geom2d.AreaGeometry.inverse", "foxes.utils.geom2d.AreaGeometry.p_max", "foxes.utils.geom2d.AreaGeometry.p_min", "foxes.utils.geom2d.AreaGeometry.points_distance", "foxes.utils.geom2d.AreaGeometry.points_inside", "foxes.utils.geom2d.AreaIntersection", "foxes.utils.geom2d.AreaIntersection.__new__", "foxes.utils.geom2d.AreaUnion", "foxes.utils.geom2d.AreaUnion.__init__", "foxes.utils.geom2d.AreaUnion.add_to_figure", "foxes.utils.geom2d.AreaUnion.inverse", "foxes.utils.geom2d.AreaUnion.p_max", "foxes.utils.geom2d.AreaUnion.p_min", "foxes.utils.geom2d.AreaUnion.points_distance", "foxes.utils.geom2d.AreaUnion.points_inside", "foxes.utils.geom2d.Circle", "foxes.utils.geom2d.Circle.__init__", "foxes.utils.geom2d.Circle.add_to_figure", "foxes.utils.geom2d.Circle.p_max", "foxes.utils.geom2d.Circle.p_min", "foxes.utils.geom2d.Circle.points_distance", "foxes.utils.geom2d.Circle.points_inside", "foxes.utils.geom2d.ClosedPolygon", "foxes.utils.geom2d.ClosedPolygon.__init__", "foxes.utils.geom2d.ClosedPolygon.add_to_figure", "foxes.utils.geom2d.ClosedPolygon.p_max", "foxes.utils.geom2d.ClosedPolygon.p_min", "foxes.utils.geom2d.ClosedPolygon.points_distance", "foxes.utils.geom2d.ClosedPolygon.points_inside", "foxes.utils.geom2d.HalfPlane", "foxes.utils.geom2d.HalfPlane.__init__", "foxes.utils.geom2d.HalfPlane.add_to_figure", "foxes.utils.geom2d.HalfPlane.inverse", "foxes.utils.geom2d.HalfPlane.p_max", "foxes.utils.geom2d.HalfPlane.p_min", "foxes.utils.geom2d.HalfPlane.points_distance", "foxes.utils.geom2d.HalfPlane.points_inside", "foxes.utils.geom2d.InvertedAreaGeometry", "foxes.utils.geom2d.InvertedAreaGeometry.__init__", "foxes.utils.geom2d.InvertedAreaGeometry.add_to_figure", "foxes.utils.geom2d.InvertedAreaGeometry.inverse", "foxes.utils.geom2d.InvertedAreaGeometry.p_max", "foxes.utils.geom2d.InvertedAreaGeometry.p_min", "foxes.utils.geom2d.InvertedAreaGeometry.points_distance", "foxes.utils.geom2d.InvertedAreaGeometry.points_inside", "foxes.opt.constraints.AreaGeometryConstraint", "foxes.opt.constraints.AreaGeometryConstraint.__init__", "foxes.opt.constraints.AreaGeometryConstraint.__str__", "foxes.opt.constraints.AreaGeometryConstraint.ana_deriv", "foxes.opt.constraints.AreaGeometryConstraint.calc_individual", "foxes.opt.constraints.AreaGeometryConstraint.calc_population", "foxes.opt.constraints.AreaGeometryConstraint.component_names", "foxes.opt.constraints.AreaGeometryConstraint.finalize", "foxes.opt.constraints.AreaGeometryConstraint.finalize_individual", "foxes.opt.constraints.AreaGeometryConstraint.finalize_population", "foxes.opt.constraints.AreaGeometryConstraint.initialize", "foxes.opt.constraints.AreaGeometryConstraint.initialized", "foxes.opt.constraints.AreaGeometryConstraint.n_components", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.var_names_float", "foxes.opt.constraints.AreaGeometryConstraint.var_names_int", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_float", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_int", "foxes.opt.constraints.FarmBoundaryConstraint", "foxes.opt.constraints.FarmBoundaryConstraint.__init__", "foxes.opt.constraints.MinDistConstraint", "foxes.opt.constraints.MinDistConstraint.__init__", "foxes.opt.constraints.MinDistConstraint.calc_individual", "foxes.opt.constraints.MinDistConstraint.calc_population", "foxes.opt.constraints.MinDistConstraint.initialize", "foxes.opt.constraints.MinDistConstraint.n_components", "foxes.opt.constraints.MinDistConstraint.vardeps_float", "foxes.opt.core.FarmConstraint", "foxes.opt.core.FarmConstraint.__init__", "foxes.opt.core.FarmConstraint.add_to_layout_figure", "foxes.opt.core.FarmConstraint.calc_individual", "foxes.opt.core.FarmConstraint.calc_population", "foxes.opt.core.FarmConstraint.farm", "foxes.opt.core.FarmConstraint.n_components", "foxes.opt.core.FarmConstraint.n_sel_turbines", "foxes.opt.core.FarmConstraint.print_models", "foxes.opt.core.FarmConstraint.sel_turbines", "foxes.opt.core.FarmConstraint.vardeps_float", "foxes.opt.core.FarmObjective", "foxes.opt.core.FarmObjective.__init__", "foxes.opt.core.FarmObjective.add_to_layout_figure", "foxes.opt.core.FarmObjective.farm", "foxes.opt.core.FarmObjective.n_sel_turbines", "foxes.opt.core.FarmObjective.print_models", "foxes.opt.core.FarmObjective.sel_turbines", "foxes.opt.core.FarmOptProblem", "foxes.opt.core.FarmOptProblem.INT_INF", "foxes.opt.core.FarmOptProblem.__init__", "foxes.opt.core.FarmOptProblem.add_constraint", "foxes.opt.core.FarmOptProblem.add_objective", "foxes.opt.core.FarmOptProblem.add_to_layout_figure", "foxes.opt.core.FarmOptProblem.all_turbines", "foxes.opt.core.FarmOptProblem.apply_individual", "foxes.opt.core.FarmOptProblem.apply_population", "foxes.opt.core.FarmOptProblem.calc_gradients", "foxes.opt.core.FarmOptProblem.check_constraints_individual", "foxes.opt.core.FarmOptProblem.check_constraints_population", "foxes.opt.core.FarmOptProblem.constraints_tol", "foxes.opt.core.FarmOptProblem.counter", "foxes.opt.core.FarmOptProblem.evaluate_individual", "foxes.opt.core.FarmOptProblem.evaluate_population", "foxes.opt.core.FarmOptProblem.farm", "foxes.opt.core.FarmOptProblem.finalize_individual", "foxes.opt.core.FarmOptProblem.finalize_population", "foxes.opt.core.FarmOptProblem.get_gradients", "foxes.opt.core.FarmOptProblem.initial_values_float", "foxes.opt.core.FarmOptProblem.initial_values_int", "foxes.opt.core.FarmOptProblem.initialize", "foxes.opt.core.FarmOptProblem.max_values_constraints", "foxes.opt.core.FarmOptProblem.max_values_float", "foxes.opt.core.FarmOptProblem.max_values_int", "foxes.opt.core.FarmOptProblem.maximize_objs", "foxes.opt.core.FarmOptProblem.min_values_constraints", "foxes.opt.core.FarmOptProblem.min_values_float", "foxes.opt.core.FarmOptProblem.min_values_int", "foxes.opt.core.FarmOptProblem.n_constraints", "foxes.opt.core.FarmOptProblem.n_objectives", "foxes.opt.core.FarmOptProblem.n_sel_turbines", "foxes.opt.core.FarmOptProblem.n_vars_float", "foxes.opt.core.FarmOptProblem.n_vars_int", "foxes.opt.core.FarmOptProblem.parse_tvar", "foxes.opt.core.FarmOptProblem.sel_turbines", "foxes.opt.core.FarmOptProblem.tvar", "foxes.opt.core.FarmOptProblem.update_problem_individual", "foxes.opt.core.FarmOptProblem.update_problem_population", "foxes.opt.core.FarmOptProblem.var_names_float", "foxes.opt.core.FarmOptProblem.var_names_int", "foxes.opt.core.FarmVarsProblem", "foxes.opt.core.FarmVarsProblem.initialize", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_individual", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_population", "foxes.opt.core.FarmVarsProblem.update_problem_individual", "foxes.opt.core.FarmVarsProblem.update_problem_population", "foxes.opt.core.PopStates", "foxes.opt.core.PopStates.__init__", "foxes.opt.core.PopStates.calculate", "foxes.opt.core.PopStates.initialize", "foxes.opt.core.PopStates.output_point_vars", "foxes.opt.core.PopStates.size", "foxes.opt.core.PopStates.weights", "foxes.opt.objectives.FarmVarObjective", "foxes.opt.objectives.FarmVarObjective.__init__", "foxes.opt.objectives.FarmVarObjective.calc_individual", "foxes.opt.objectives.FarmVarObjective.calc_population", "foxes.opt.objectives.FarmVarObjective.finalize_individual", "foxes.opt.objectives.FarmVarObjective.initialize", "foxes.opt.objectives.FarmVarObjective.maximize", "foxes.opt.objectives.FarmVarObjective.n_components", "foxes.opt.objectives.FarmVarObjective.vardeps_float", "foxes.opt.objectives.MaxFarmPower", "foxes.opt.objectives.MaxFarmPower.__init__", "foxes.opt.objectives.MaxNTurbines", "foxes.opt.objectives.MaxNTurbines.__init__", "foxes.opt.objectives.MaxNTurbines.calc_individual", "foxes.opt.objectives.MaxNTurbines.calc_population", "foxes.opt.objectives.MaxNTurbines.maximize", "foxes.opt.objectives.MaxNTurbines.n_components", "foxes.opt.objectives.MinimalMaxTI", "foxes.opt.objectives.MinimalMaxTI.__init__", "foxes.opt.problems.OptFarmVars", "foxes.opt.problems.OptFarmVars.__init__", "foxes.opt.problems.OptFarmVars.add_var", "foxes.opt.problems.OptFarmVars.initial_values_float", "foxes.opt.problems.OptFarmVars.initial_values_int", "foxes.opt.problems.OptFarmVars.initialize", "foxes.opt.problems.OptFarmVars.max_values_float", "foxes.opt.problems.OptFarmVars.max_values_int", "foxes.opt.problems.OptFarmVars.min_values_float", "foxes.opt.problems.OptFarmVars.min_values_int", "foxes.opt.problems.OptFarmVars.opt2farm_vars_individual", "foxes.opt.problems.OptFarmVars.opt2farm_vars_population", "foxes.opt.problems.OptFarmVars.var_names_float", "foxes.opt.problems.OptFarmVars.var_names_int", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_population", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.get_bounds", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Valid", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.cdist", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.Objective", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.cdist", "foxes.opt.problems.layout.geom_layouts.GeomLayout", "foxes.opt.problems.layout.geom_layouts.GeomLayout.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayout.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayout.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.var_names_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_int", "foxes.opt.problems.layout.FarmLayoutOptProblem", "foxes.opt.problems.layout.FarmLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.initialize", "foxes.opt.problems.layout.FarmLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.FarmLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_int", "foxes.opt.problems.layout.RegularLayoutOptProblem", "foxes.opt.problems.layout.RegularLayoutOptProblem.ANGLE", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegularLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegularLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegularLayoutOptProblem.var_names_float", "foxes.utils.read_shp", "foxes.utils.read_shp_polygons", "foxes.utils.runners.DaskRunner", "foxes.utils.runners.DaskRunner.__init__", "foxes.utils.runners.DaskRunner.finalize", "foxes.utils.runners.DaskRunner.initialize", "foxes.utils.runners.DaskRunner.is_distributed", "foxes.utils.runners.DaskRunner.print", "foxes.utils.runners.DaskRunner.run", "foxes.utils.runners.DefaultRunner", "foxes.utils.runners.DefaultRunner.run", "foxes.utils.runners.Runner", "foxes.utils.runners.Runner.__init__", "foxes.utils.runners.Runner.finalize", "foxes.utils.runners.Runner.initialize", "foxes.utils.runners.Runner.initialized", "foxes.utils.runners.Runner.run", "foxes.utils.show_plotly_fig", "foxes.utils.shp2csv", "foxes.utils.shp2geom2d", "foxes.utils.two_circles.area", "foxes.utils.two_circles.calc_area", "foxes.utils.uv2wd", "foxes.utils.wd2uv", "foxes.utils.wd2wdvec", "foxes.utils.wdvec2wd", "API", "foxes.core", "foxes", "foxes.input", "foxes.models", "foxes.opt", "foxes.opt.problems", "foxes.opt.problems.layout.geom_layouts", "foxes.output", "foxes.utils", "foxes.utils.abl.neutral", "foxes.models.wake_models", "Examples", "History", "Welcome to FOXES", "Installation", "Static data", "Heterogeneous flow", "Layout optimization", "The model book", "Multi-height wind data", "Overview - how to setup foxes", "Power mask", "Wind sector management", "Single row of turbines", "Timeseries data", "Wind rose data", "Yawed rotor wakes"], "terms": {"class": [0, 7, 12, 14, 17, 27, 35, 40, 47, 48, 57, 62, 64, 68, 75, 84, 89, 93, 95, 97, 100, 101, 106, 110, 113, 118, 128, 136, 147, 149, 156, 163, 174, 178, 179, 186, 189, 194, 195, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 318, 319, 320, 321, 324, 325, 330, 331, 336, 337, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 486, 495, 514, 522, 523, 526, 529, 535, 538, 540, 543, 551, 571, 574, 581, 583, 591, 598, 605, 613, 621, 642, 644, 651, 662, 669, 678, 688, 711, 712, 717, 724, 733, 735, 741, 743, 748, 757, 758, 762, 763, 767, 768, 772, 773, 778, 783, 788, 789, 794, 795, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 885, 891, 896, 907, 916, 924, 931, 933, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 964, 967, 975], "fox": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 960, 961, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "core": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 126, 127, 128, 130, 132, 133, 135, 136, 139, 140, 142, 143, 146, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 169, 170, 173, 177, 178, 179, 180, 182, 183, 184, 185, 189, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 253, 257, 260, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 289, 290, 291, 293, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 321, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 345, 348, 351, 354, 357, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 402, 403, 404, 408, 409, 410, 414, 415, 416, 420, 421, 425, 426, 427, 428, 444, 446, 447, 452, 453, 457, 458, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 484, 485, 497, 509, 538, 621, 644, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 735, 743, 783, 834, 838, 848, 858, 868, 882, 891, 892, 907, 913, 948, 950, 951, 952, 954, 955, 959, 961], "algorithm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 20, 21, 23, 24, 26, 29, 30, 31, 32, 33, 37, 38, 39, 43, 44, 45, 46, 51, 53, 58, 59, 60, 61, 63, 65, 67, 71, 72, 73, 74, 77, 79, 80, 82, 86, 88, 94, 102, 103, 104, 105, 107, 108, 109, 111, 112, 130, 132, 133, 135, 139, 140, 142, 143, 146, 151, 152, 153, 155, 158, 159, 160, 162, 166, 167, 169, 170, 173, 177, 182, 183, 184, 185, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 237, 238, 239, 241, 242, 245, 246, 249, 250, 257, 262, 263, 266, 267, 268, 271, 272, 273, 277, 278, 279, 280, 283, 284, 285, 289, 290, 291, 295, 296, 299, 300, 301, 304, 305, 307, 308, 310, 311, 315, 316, 322, 323, 326, 327, 328, 329, 332, 333, 334, 335, 338, 339, 340, 341, 361, 363, 364, 365, 366, 367, 370, 371, 372, 376, 377, 378, 379, 382, 383, 384, 385, 386, 388, 389, 392, 393, 394, 395, 396, 398, 399, 402, 403, 404, 408, 409, 410, 414, 415, 416, 420, 421, 425, 426, 427, 452, 453, 457, 458, 462, 463, 466, 467, 470, 471, 472, 475, 476, 479, 480, 481, 484, 485, 497, 509, 514, 515, 516, 517, 518, 519, 520, 521, 669, 671, 719, 720, 721, 723, 892, 913, 949, 952, 961, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975], "model": [0, 1, 3, 4, 5, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 128, 130, 132, 133, 136, 139, 140, 142, 143, 147, 149, 151, 152, 153, 156, 158, 159, 160, 163, 166, 167, 169, 170, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 495, 514, 522, 523, 524, 526, 529, 535, 538, 540, 541, 542, 621, 642, 644, 651, 659, 662, 667, 691, 711, 712, 717, 719, 720, 721, 724, 733, 735, 741, 745, 948, 949, 950, 953, 957, 960, 961, 962, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975], "sourc": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 633, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 659, 662, 663, 664, 667, 669, 671, 674, 676, 677, 691, 704, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 963, 975], "abstract": [0, 14, 15, 35, 37, 38, 47, 57, 59, 60, 63, 64, 65, 66, 75, 78, 81, 83, 84, 87, 88, 93, 94, 95, 97, 98, 99, 101, 103, 105, 106, 107, 109, 110, 111, 112, 387, 388, 390, 392, 397, 398, 400, 402, 403, 574, 577, 578, 579, 580, 581, 651, 657, 662, 669, 711, 713, 714, 783, 834, 836, 933, 938, 948, 949, 953, 957, 959, 961], "base": [0, 9, 14, 15, 17, 18, 20, 27, 29, 30, 35, 37, 40, 43, 47, 48, 55, 57, 64, 65, 68, 71, 75, 84, 93, 94, 95, 97, 101, 103, 106, 110, 122, 126, 127, 128, 130, 136, 139, 147, 149, 151, 156, 158, 163, 166, 174, 178, 179, 182, 194, 201, 209, 217, 220, 228, 235, 237, 240, 241, 243, 245, 247, 253, 260, 262, 264, 266, 269, 271, 275, 277, 281, 283, 286, 289, 293, 295, 297, 299, 302, 304, 306, 307, 309, 310, 312, 315, 317, 319, 321, 322, 324, 326, 330, 332, 336, 338, 342, 345, 348, 351, 354, 357, 361, 363, 368, 370, 373, 376, 380, 382, 387, 390, 397, 400, 405, 411, 412, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 522, 543, 560, 566, 570, 571, 574, 613, 651, 662, 669, 678, 711, 717, 719, 724, 758, 763, 768, 773, 783, 789, 795, 834, 933, 948, 949, 952, 953, 956, 957, 958, 959, 961, 968, 969, 971, 973, 974, 975], "collect": [0, 482, 516, 517, 518, 519, 520, 521, 799, 837, 952, 969, 972], "requir": [0, 16, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 194, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720, 962, 964, 965, 966, 967, 969, 973, 975], "object": [0, 4, 8, 10, 14, 17, 23, 27, 32, 35, 40, 45, 47, 48, 52, 53, 55, 57, 59, 60, 61, 64, 68, 73, 75, 84, 93, 95, 97, 101, 106, 110, 128, 132, 136, 142, 147, 149, 152, 156, 159, 163, 169, 174, 177, 178, 179, 184, 194, 196, 197, 199, 201, 204, 205, 207, 209, 212, 213, 215, 217, 219, 220, 222, 223, 226, 228, 230, 231, 233, 235, 238, 240, 243, 247, 253, 257, 260, 264, 267, 269, 272, 275, 279, 281, 284, 286, 290, 293, 297, 300, 302, 306, 309, 312, 317, 319, 321, 324, 328, 330, 334, 336, 340, 342, 345, 348, 351, 354, 357, 361, 367, 368, 373, 379, 380, 386, 387, 390, 396, 397, 400, 405, 411, 417, 422, 449, 454, 459, 464, 468, 472, 473, 477, 481, 482, 488, 516, 517, 518, 519, 520, 521, 529, 533, 538, 575, 585, 593, 600, 607, 615, 621, 628, 631, 642, 644, 651, 662, 663, 669, 672, 673, 678, 683, 684, 686, 687, 688, 691, 695, 700, 711, 712, 717, 720, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 748, 757, 762, 767, 772, 776, 778, 783, 788, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 844, 848, 854, 858, 864, 868, 875, 882, 883, 885, 891, 893, 896, 907, 914, 916, 941, 950, 952, 954, 964, 965, 966, 967, 970, 971, 972, 973, 974, 975], "run": [0, 1, 7, 14, 29, 35, 36, 57, 62, 93, 97, 98, 100, 178, 194, 201, 209, 217, 220, 228, 287, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 359, 486, 495, 514, 522, 523, 526, 529, 535, 538, 540, 669, 671, 707, 708, 715, 716, 892, 903, 904, 924, 925, 930, 931, 932, 933, 938, 949, 952, 953, 961, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974], "calcul": [0, 12, 13, 14, 15, 16, 17, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, 51, 53, 59, 60, 61, 63, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 84, 86, 88, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 128, 130, 132, 133, 135, 136, 139, 140, 142, 143, 146, 147, 149, 151, 152, 153, 155, 156, 158, 159, 160, 162, 163, 166, 167, 169, 170, 173, 174, 178, 179, 182, 183, 184, 185, 192, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 253, 254, 257, 260, 261, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 289, 290, 291, 293, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 421, 422, 425, 426, 427, 428, 444, 449, 452, 453, 454, 457, 458, 459, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 514, 515, 529, 530, 539, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 572, 573, 574, 579, 581, 583, 589, 591, 596, 598, 603, 605, 611, 613, 619, 621, 624, 625, 626, 642, 644, 646, 647, 651, 654, 655, 662, 669, 678, 688, 707, 708, 711, 715, 716, 717, 719, 720, 721, 723, 724, 726, 727, 733, 735, 737, 738, 741, 743, 757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 788, 790, 791, 794, 796, 797, 799, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 837, 838, 848, 858, 868, 882, 891, 903, 904, 907, 942, 943, 944, 945, 946, 947, 949, 952, 953, 956, 957, 958, 959, 961, 962, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975], "contain": [0, 8, 12, 13, 189, 543, 545, 546, 688, 923, 949, 950, 951, 952, 953, 957, 965, 966, 967, 969, 970, 972, 973], "function": [0, 9, 14, 15, 16, 20, 29, 37, 39, 40, 43, 59, 60, 65, 67, 68, 71, 79, 94, 103, 130, 136, 138, 139, 144, 151, 158, 163, 165, 166, 171, 182, 196, 197, 204, 205, 212, 213, 219, 222, 223, 230, 231, 237, 241, 245, 249, 260, 261, 262, 266, 271, 277, 283, 289, 295, 299, 304, 307, 310, 312, 315, 322, 326, 332, 338, 363, 370, 376, 382, 516, 517, 518, 519, 520, 521, 522, 525, 562, 565, 567, 569, 572, 621, 633, 640, 641, 642, 644, 649, 650, 651, 657, 661, 662, 663, 669, 678, 683, 684, 686, 687, 688, 699, 700, 707, 708, 711, 715, 716, 719, 724, 725, 731, 732, 733, 734, 735, 736, 740, 741, 742, 743, 757, 761, 762, 766, 767, 771, 772, 777, 778, 782, 783, 788, 793, 794, 798, 799, 800, 806, 807, 812, 813, 818, 819, 824, 825, 830, 831, 834, 837, 838, 848, 858, 868, 882, 883, 891, 893, 903, 904, 907, 914, 924, 930, 931, 932, 933, 938, 942, 948, 949, 950, 951, 952, 953, 956, 957, 958, 961, 964, 966, 967, 974], "which": [0, 17, 24, 27, 33, 35, 38, 40, 46, 47, 60, 64, 66, 68, 74, 75, 82, 84, 86, 93, 95, 101, 107, 108, 109, 111, 112, 128, 133, 136, 138, 143, 147, 149, 153, 156, 160, 163, 170, 174, 178, 179, 185, 197, 205, 213, 223, 231, 235, 239, 240, 242, 243, 246, 247, 253, 260, 263, 264, 268, 269, 273, 275, 280, 281, 282, 285, 286, 291, 293, 296, 297, 298, 301, 302, 305, 306, 308, 309, 311, 312, 316, 317, 319, 321, 323, 324, 325, 329, 330, 331, 335, 336, 341, 361, 362, 380, 381, 388, 389, 390, 392, 393, 395, 398, 399, 402, 404, 408, 410, 414, 416, 420, 421, 425, 427, 452, 453, 457, 458, 462, 463, 466, 467, 470, 471, 475, 476, 479, 480, 484, 485, 488, 491, 492, 493, 494, 519, 520, 521, 538, 678, 688, 717, 721, 724, 725, 734, 742, 745, 799, 837, 944, 947, 949, 952, 959, 962, 965, 966, 969, 972, 973, 974, 975], "ar": [0, 14, 17, 24, 27, 33, 35, 38, 40, 46, 47, 64, 66, 68, 74, 75, 76, 78, 79, 82, 84, 86, 93, 95, 101, 107, 108, 109, 110, 122, 128, 129, 133, 136, 143, 147, 149, 153, 156, 160, 163, 170, 174, 178, 179, 185, 194, 195, 201, 202, 209, 210, 218, 221, 229, 235, 239, 240, 242, 243, 246, 247, 248, 249, 253, 254, 256, 260, 261, 263, 264, 268, 269, 273, 275, 276, 280, 281, 282, 285, 286, 291, 293, 296, 297, 298, 301, 302, 305, 306, 308, 309, 311, 312, 316, 317, 319, 321, 323, 324, 329, 330, 335, 336, 341, 393, 395, 410, 416, 421, 427, 453, 458, 463, 493, 510, 511, 512, 525, 528, 574, 580, 581, 583, 590, 591, 597, 598, 604, 605, 612, 613, 620, 621, 642, 644, 651, 669, 675, 678, 679, 680, 688, 711, 717, 721, 743, 745, 757, 762, 767, 772, 778, 783, 785, 786, 787, 788, 794, 799, 837, 838, 848, 858, 868, 882, 891, 907, 942, 951, 952, 954, 955, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975], "meant": 0, "call": [0, 3, 14, 16, 27, 39, 40, 67, 68, 269, 669, 678, 707, 708, 711, 715, 716, 743, 799, 837, 838, 848, 858, 868, 882, 891, 903, 904, 907, 949, 952, 961, 963, 969, 970, 972, 975], "from": [0, 4, 17, 18, 23, 32, 45, 53, 57, 58, 59, 61, 73, 75, 77, 80, 118, 119, 120, 121, 124, 125, 128, 129, 132, 136, 138, 142, 152, 159, 163, 165, 169, 176, 184, 194, 195, 196, 199, 201, 202, 204, 207, 209, 210, 212, 215, 217, 218, 219, 220, 221, 222, 226, 228, 229, 230, 233, 235, 236, 238, 240, 243, 247, 250, 253, 257, 264, 265, 267, 272, 279, 282, 284, 290, 293, 297, 300, 302, 306, 309, 317, 319, 324, 328, 330, 334, 340, 361, 362, 367, 379, 380, 381, 386, 390, 396, 405, 406, 411, 454, 455, 472, 481, 486, 487, 519, 520, 521, 525, 531, 533, 534, 538, 542, 543, 544, 545, 546, 571, 669, 672, 673, 691, 704, 711, 720, 743, 799, 837, 882, 891, 907, 923, 944, 945, 946, 947, 950, 951, 952, 956, 957, 959, 961, 963, 965, 966, 968, 969, 970, 971, 972, 973, 975], "top": [0, 220, 400, 948, 950, 952, 959, 975], "level": [0, 1, 3, 10, 21, 23, 31, 32, 44, 45, 47, 51, 53, 61, 72, 73, 122, 124, 125, 126, 127, 129, 132, 140, 142, 144, 152, 159, 167, 169, 171, 183, 184, 192, 198, 199, 206, 207, 214, 215, 224, 226, 233, 238, 257, 267, 272, 278, 279, 284, 290, 300, 327, 328, 333, 334, 339, 340, 364, 367, 379, 383, 386, 394, 396, 472, 481, 495, 497, 498, 502, 516, 517, 518, 519, 520, 521, 528, 628, 629, 630, 631, 648, 672, 673, 678, 679, 680, 686, 687, 688, 691, 712, 720, 728, 729, 743, 745, 748, 776, 785, 786, 792, 804, 844, 854, 864, 875, 883, 885, 893, 896, 914, 916, 924, 925, 940, 948, 949, 950, 961], "code": [0, 428, 959, 961, 962, 963], "mbook": [0, 1, 177, 538, 539, 540, 541, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "modelbook": [0, 1, 177, 189, 190, 191, 192, 193, 538, 540, 541, 950, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "The": [0, 1, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 425, 426, 427, 428, 443, 444, 446, 447, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 832, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 930, 932, 938, 940, 941, 942, 943, 944, 945, 946, 947, 950, 952, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975], "book": [0, 1, 89, 90, 119, 124, 177, 390, 391, 401, 406, 412, 418, 423, 450, 455, 460, 538, 540, 541, 542, 543, 544, 960, 962, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974], "farm": [0, 1, 11, 20, 27, 29, 30, 35, 37, 40, 43, 47, 52, 57, 59, 60, 63, 65, 71, 75, 77, 79, 80, 89, 90, 94, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 116, 122, 123, 124, 125, 126, 127, 130, 139, 151, 158, 166, 177, 178, 179, 182, 189, 194, 196, 197, 200, 201, 204, 205, 208, 209, 212, 213, 216, 217, 219, 220, 222, 223, 225, 227, 228, 230, 231, 232, 234, 237, 241, 245, 249, 250, 260, 261, 262, 266, 271, 277, 283, 286, 289, 293, 295, 299, 304, 307, 310, 313, 315, 322, 326, 332, 338, 361, 363, 365, 366, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 388, 389, 392, 393, 395, 398, 399, 402, 403, 404, 405, 406, 408, 409, 410, 414, 415, 416, 417, 418, 420, 421, 422, 423, 425, 426, 427, 444, 449, 450, 452, 453, 457, 458, 462, 463, 466, 467, 470, 471, 475, 476, 479, 480, 484, 485, 486, 487, 488, 489, 490, 495, 496, 497, 498, 499, 502, 503, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 529, 530, 531, 533, 534, 535, 536, 539, 621, 642, 644, 651, 656, 662, 665, 669, 685, 707, 708, 711, 712, 713, 714, 715, 716, 719, 724, 733, 735, 741, 743, 745, 753, 754, 838, 848, 858, 868, 882, 888, 889, 891, 901, 902, 903, 904, 907, 919, 920, 948, 949, 950, 951, 952, 953, 954, 956, 961, 962, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975], "windfarm": [0, 1, 113, 114, 115, 116, 117, 122, 123, 124, 125, 126, 127, 177, 486, 487, 621, 644, 656, 665, 685, 950, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "wind": [0, 1, 27, 30, 84, 89, 90, 113, 114, 115, 116, 122, 123, 124, 125, 126, 127, 136, 149, 150, 156, 157, 177, 178, 269, 270, 302, 303, 318, 320, 324, 325, 330, 331, 336, 337, 342, 345, 348, 351, 354, 361, 368, 369, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 473, 486, 487, 489, 490, 503, 516, 517, 518, 519, 520, 521, 529, 531, 533, 534, 538, 542, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 573, 621, 642, 644, 651, 656, 662, 665, 669, 685, 711, 724, 733, 735, 741, 743, 838, 848, 858, 868, 882, 891, 907, 944, 945, 946, 947, 948, 950, 951, 952, 953, 954, 957, 958, 960, 961, 962, 965, 966, 967, 969, 970, 972, 973, 975], "chunk": [0, 1, 12, 14, 15, 20, 23, 29, 32, 37, 43, 45, 53, 61, 65, 71, 73, 94, 103, 130, 132, 139, 142, 151, 152, 158, 159, 166, 169, 182, 184, 199, 207, 215, 226, 233, 237, 238, 241, 245, 257, 262, 266, 267, 271, 272, 277, 279, 283, 284, 289, 290, 295, 299, 300, 304, 307, 310, 315, 322, 326, 328, 332, 334, 338, 340, 363, 367, 370, 376, 379, 382, 386, 396, 472, 481, 719, 720, 965, 968, 970, 971, 973, 974, 975], "dict": [0, 1, 4, 5, 7, 10, 12, 13, 15, 16, 20, 23, 27, 28, 29, 32, 34, 37, 39, 43, 45, 52, 53, 61, 63, 65, 67, 71, 73, 77, 79, 94, 98, 102, 107, 108, 109, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 138, 139, 142, 151, 152, 156, 157, 158, 159, 163, 165, 166, 169, 176, 177, 182, 184, 186, 187, 188, 189, 194, 195, 199, 200, 207, 208, 210, 215, 216, 218, 226, 227, 233, 234, 235, 236, 237, 238, 241, 245, 249, 257, 261, 262, 264, 265, 266, 267, 271, 272, 275, 276, 277, 279, 282, 283, 284, 289, 290, 295, 298, 299, 300, 304, 307, 310, 315, 318, 320, 322, 324, 325, 326, 328, 330, 331, 332, 334, 336, 337, 338, 340, 343, 346, 349, 352, 355, 359, 367, 373, 374, 379, 386, 388, 389, 390, 391, 392, 393, 395, 396, 399, 401, 402, 404, 406, 408, 410, 412, 414, 416, 418, 421, 423, 425, 427, 448, 450, 452, 453, 455, 458, 459, 460, 463, 464, 465, 468, 469, 472, 473, 474, 477, 478, 481, 488, 490, 500, 501, 502, 510, 511, 512, 516, 517, 518, 519, 520, 521, 525, 528, 533, 534, 537, 542, 543, 551, 556, 557, 575, 585, 593, 600, 607, 615, 622, 636, 637, 643, 645, 652, 663, 669, 671, 672, 673, 712, 713, 714, 719, 720, 724, 725, 733, 734, 736, 741, 742, 744, 748, 753, 754, 758, 763, 768, 773, 789, 795, 799, 837, 842, 852, 862, 872, 885, 888, 889, 892, 896, 901, 902, 913, 916, 919, 920, 922, 923, 924, 925, 930, 932, 938, 940, 941, 949, 957, 965, 966, 971], "choic": [0, 1, 89, 96, 482, 483, 488, 510, 511, 512, 745, 924, 925, 969, 972, 973, 974, 975], "parallel": [0, 1, 14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 128, 136, 147, 149, 156, 163, 174, 178, 179, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 717, 799, 837, 925, 961, 962, 966, 969, 973, 974], "dask": [0, 1, 14, 924, 925, 957, 961, 962, 973], "e": [0, 1, 14, 176, 235, 236, 269, 270, 306, 309, 525, 557, 669, 699, 700, 711, 743, 799, 837, 838, 848, 858, 868, 882, 891, 907, 923, 941, 950, 952, 961, 962, 963, 965, 966, 967, 968, 969, 975], "g": [0, 1, 269, 270, 525, 557, 799, 837, 923, 941, 950, 952, 961, 962, 965, 968, 972, 975], "state": [0, 1, 8, 17, 18, 22, 25, 26, 29, 52, 59, 60, 75, 77, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 102, 104, 105, 107, 112, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 196, 197, 204, 205, 212, 213, 219, 222, 223, 230, 231, 235, 236, 247, 249, 260, 261, 262, 266, 271, 277, 283, 289, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 365, 366, 371, 372, 377, 378, 384, 385, 388, 389, 392, 393, 398, 399, 402, 403, 404, 408, 409, 414, 415, 420, 425, 426, 444, 447, 452, 457, 462, 467, 471, 476, 480, 485, 486, 487, 488, 495, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 535, 538, 539, 669, 691, 714, 717, 718, 722, 723, 725, 734, 742, 745, 754, 889, 902, 920, 949, 952, 953, 956, 961, 962, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975], "1000": [0, 1, 269, 270, 509, 965, 966, 968, 970, 971, 973, 974, 975], "verbos": [0, 1, 3, 9, 10, 14, 17, 21, 23, 27, 31, 32, 35, 40, 44, 45, 47, 48, 51, 53, 57, 61, 64, 68, 72, 73, 75, 84, 93, 95, 97, 101, 106, 110, 113, 115, 122, 124, 125, 126, 127, 128, 129, 132, 136, 140, 142, 144, 147, 149, 152, 156, 159, 163, 167, 169, 171, 174, 178, 179, 183, 184, 189, 192, 194, 198, 199, 201, 206, 207, 209, 214, 215, 217, 220, 224, 226, 228, 233, 235, 238, 240, 243, 247, 253, 257, 260, 264, 267, 269, 272, 275, 278, 279, 281, 284, 286, 290, 293, 297, 300, 302, 306, 309, 312, 317, 319, 321, 324, 327, 328, 330, 333, 334, 336, 339, 340, 342, 345, 348, 351, 354, 357, 361, 364, 367, 368, 373, 379, 380, 383, 386, 387, 390, 394, 396, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 472, 473, 477, 481, 482, 495, 497, 498, 516, 517, 518, 519, 520, 521, 528, 621, 628, 629, 630, 631, 642, 644, 648, 651, 662, 669, 672, 673, 678, 679, 680, 686, 687, 688, 691, 711, 712, 717, 720, 724, 728, 729, 733, 735, 741, 743, 748, 757, 762, 767, 772, 776, 778, 783, 785, 786, 788, 792, 794, 800, 804, 807, 813, 819, 825, 831, 834, 838, 844, 848, 854, 858, 864, 868, 875, 882, 883, 885, 891, 893, 896, 907, 914, 916, 924, 925, 929, 940, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "int": [0, 1, 3, 10, 21, 23, 25, 31, 32, 44, 45, 51, 53, 55, 59, 60, 61, 72, 73, 77, 79, 81, 87, 89, 90, 92, 109, 115, 116, 122, 124, 125, 126, 127, 129, 132, 134, 136, 138, 140, 142, 144, 145, 152, 154, 159, 161, 163, 165, 167, 169, 171, 172, 183, 184, 192, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 210, 212, 213, 214, 215, 218, 219, 222, 223, 224, 226, 230, 231, 233, 238, 249, 251, 253, 254, 257, 258, 267, 272, 278, 279, 284, 290, 300, 327, 328, 333, 334, 339, 340, 364, 367, 373, 374, 379, 383, 386, 394, 396, 410, 416, 421, 427, 453, 458, 463, 472, 481, 486, 487, 488, 493, 497, 498, 509, 516, 517, 518, 519, 520, 521, 528, 531, 533, 534, 621, 622, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 641, 642, 644, 645, 646, 647, 648, 649, 651, 652, 654, 655, 657, 658, 660, 662, 663, 666, 668, 669, 671, 672, 673, 678, 679, 680, 682, 686, 687, 688, 690, 691, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 711, 712, 714, 717, 718, 720, 722, 724, 726, 727, 728, 729, 731, 733, 735, 737, 738, 740, 741, 743, 745, 747, 748, 750, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 800, 802, 803, 804, 806, 807, 809, 810, 812, 813, 815, 816, 818, 819, 820, 821, 822, 824, 825, 827, 828, 830, 831, 834, 838, 839, 844, 848, 849, 853, 854, 855, 856, 857, 858, 859, 864, 868, 869, 874, 875, 877, 879, 881, 882, 883, 885, 889, 891, 892, 893, 895, 896, 898, 900, 902, 906, 907, 914, 916, 920, 923, 924, 925, 940, 944, 945, 946, 947, 964], "0": [0, 1, 3, 10, 14, 17, 21, 23, 27, 31, 32, 35, 40, 44, 45, 47, 48, 51, 53, 57, 61, 64, 68, 72, 73, 75, 78, 84, 93, 95, 97, 101, 106, 110, 115, 122, 124, 125, 126, 127, 128, 132, 136, 137, 140, 142, 144, 147, 148, 149, 152, 156, 159, 163, 164, 167, 169, 171, 174, 175, 176, 178, 179, 183, 184, 189, 192, 194, 198, 199, 201, 206, 207, 209, 214, 215, 217, 220, 224, 226, 228, 233, 235, 238, 240, 243, 247, 248, 253, 256, 257, 260, 264, 267, 269, 270, 272, 275, 278, 279, 281, 282, 284, 286, 290, 293, 297, 300, 302, 306, 309, 312, 317, 319, 321, 324, 325, 327, 328, 330, 331, 333, 334, 336, 337, 339, 340, 342, 345, 348, 351, 354, 357, 361, 364, 367, 368, 373, 374, 379, 380, 381, 383, 386, 387, 390, 394, 396, 397, 400, 401, 405, 406, 411, 412, 417, 418, 422, 423, 428, 443, 449, 450, 454, 455, 459, 460, 464, 468, 472, 473, 477, 481, 482, 488, 497, 498, 514, 516, 517, 518, 519, 520, 521, 528, 542, 558, 560, 562, 566, 567, 570, 572, 621, 628, 629, 630, 631, 642, 644, 648, 651, 662, 669, 672, 673, 678, 679, 680, 686, 687, 688, 691, 711, 712, 717, 720, 724, 725, 728, 729, 733, 735, 741, 743, 748, 757, 762, 767, 772, 776, 778, 783, 785, 786, 788, 792, 794, 799, 800, 804, 807, 813, 814, 819, 825, 831, 834, 837, 838, 844, 848, 854, 858, 864, 868, 875, 882, 883, 885, 891, 893, 896, 907, 914, 916, 924, 925, 940, 945, 946, 957, 958, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "mean": [0, 1, 31, 44, 72, 110, 488, 495, 500, 503, 504, 507, 510, 511, 512, 519, 531, 533, 534, 724, 725, 733, 734, 742, 799, 813, 814, 837, 953, 955, 961, 966, 968, 973, 974], "silent": [0, 1, 3, 10, 23, 31, 32, 44, 45, 51, 53, 61, 72, 73, 115, 122, 124, 125, 126, 127, 132, 142, 144, 152, 159, 169, 171, 184, 192, 199, 207, 215, 226, 233, 238, 257, 267, 272, 278, 279, 284, 290, 300, 328, 334, 340, 364, 367, 379, 383, 386, 394, 396, 472, 481, 497, 498, 528, 628, 629, 630, 631, 648, 672, 673, 678, 679, 680, 686, 687, 688, 691, 712, 720, 728, 729, 748, 776, 785, 786, 792, 804, 844, 854, 864, 875, 883, 885, 893, 896, 914, 916, 924, 925, 940], "dbook": [0, 1, 124, 964], "databook": [0, 1, 118, 119, 124, 543, 544, 545, 546, 547, 548, 549, 550, 950, 957], "data": [0, 1, 4, 8, 12, 13, 14, 15, 16, 17, 20, 23, 27, 29, 32, 35, 37, 39, 40, 43, 45, 47, 48, 52, 53, 57, 59, 60, 61, 63, 64, 65, 67, 68, 71, 73, 75, 77, 79, 80, 84, 89, 93, 94, 95, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 132, 136, 138, 139, 142, 147, 149, 151, 152, 156, 157, 158, 159, 163, 165, 166, 169, 174, 176, 178, 179, 182, 184, 194, 196, 197, 199, 200, 201, 204, 205, 207, 208, 209, 212, 213, 215, 216, 217, 219, 220, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 245, 247, 249, 250, 253, 257, 260, 262, 264, 265, 266, 267, 269, 271, 272, 274, 275, 277, 279, 281, 282, 283, 284, 286, 288, 289, 290, 293, 294, 295, 297, 298, 299, 300, 302, 304, 306, 307, 309, 310, 312, 313, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 330, 331, 332, 334, 336, 337, 338, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 359, 361, 363, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 392, 393, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 414, 415, 416, 417, 418, 420, 421, 422, 423, 425, 426, 427, 428, 444, 445, 446, 447, 449, 450, 452, 453, 454, 457, 458, 459, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 495, 500, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 522, 525, 526, 527, 528, 529, 531, 533, 534, 535, 538, 540, 543, 544, 550, 551, 556, 557, 560, 566, 570, 621, 629, 630, 642, 644, 651, 662, 669, 686, 687, 707, 708, 711, 715, 716, 717, 719, 720, 724, 728, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 883, 891, 893, 903, 904, 907, 914, 922, 949, 950, 951, 952, 956, 957, 958, 960, 961, 962, 965, 966, 969, 970, 971, 972, 975], "none": [0, 1, 3, 4, 8, 10, 14, 17, 22, 27, 29, 35, 40, 47, 48, 52, 57, 58, 64, 68, 71, 75, 77, 79, 84, 85, 89, 90, 91, 92, 93, 95, 96, 97, 101, 106, 110, 113, 114, 122, 124, 126, 127, 128, 129, 131, 136, 138, 141, 144, 147, 149, 150, 156, 157, 163, 165, 168, 171, 174, 178, 179, 186, 188, 189, 191, 193, 194, 195, 201, 202, 209, 210, 217, 218, 220, 221, 228, 229, 235, 240, 243, 247, 249, 253, 260, 264, 269, 275, 281, 282, 286, 293, 297, 302, 306, 309, 312, 313, 317, 319, 321, 324, 325, 330, 331, 336, 337, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 381, 387, 390, 397, 400, 405, 406, 411, 417, 418, 422, 423, 449, 450, 454, 459, 464, 465, 468, 473, 474, 477, 482, 486, 487, 488, 491, 492, 493, 494, 495, 497, 502, 509, 514, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 531, 533, 534, 535, 537, 538, 539, 540, 542, 543, 544, 549, 572, 591, 593, 598, 600, 605, 607, 621, 622, 624, 625, 626, 642, 644, 645, 646, 647, 651, 652, 654, 655, 662, 663, 669, 671, 672, 673, 678, 688, 691, 711, 717, 724, 725, 726, 727, 733, 734, 735, 737, 738, 741, 742, 743, 745, 757, 758, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 788, 789, 790, 791, 794, 796, 797, 799, 800, 801, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 835, 837, 838, 839, 842, 848, 849, 852, 858, 859, 862, 868, 869, 872, 882, 891, 892, 907, 923, 924, 925, 957, 965, 967, 968, 972, 975], "default": [0, 1, 4, 22, 85, 124, 131, 136, 141, 163, 168, 191, 195, 201, 202, 209, 210, 218, 220, 221, 229, 265, 313, 381, 428, 443, 450, 491, 492, 493, 494, 497, 509, 529, 532, 538, 551, 688, 691, 799, 837, 923, 931, 957, 961, 964, 965, 966, 967, 968, 970, 972, 973, 975], "keep_model": [0, 1, 2, 3, 691], "list": [0, 1, 3, 10, 12, 13, 16, 17, 18, 19, 22, 24, 27, 33, 38, 39, 40, 41, 42, 43, 46, 57, 58, 66, 67, 68, 69, 70, 71, 74, 75, 76, 82, 84, 85, 86, 89, 90, 91, 92, 99, 102, 113, 115, 117, 118, 122, 126, 127, 128, 129, 131, 133, 136, 138, 141, 143, 144, 147, 149, 153, 156, 160, 163, 165, 168, 170, 171, 174, 185, 193, 195, 202, 210, 218, 221, 229, 235, 236, 239, 242, 243, 244, 246, 254, 260, 261, 263, 264, 265, 268, 273, 280, 282, 285, 286, 291, 296, 297, 298, 301, 305, 308, 311, 316, 323, 329, 335, 341, 344, 347, 350, 353, 356, 360, 497, 500, 501, 504, 506, 507, 508, 528, 531, 533, 534, 542, 543, 545, 548, 550, 551, 571, 582, 583, 584, 621, 622, 624, 625, 626, 627, 638, 639, 642, 644, 645, 646, 647, 651, 652, 654, 655, 660, 662, 663, 668, 671, 678, 688, 691, 705, 709, 710, 712, 717, 721, 724, 725, 726, 727, 733, 734, 735, 737, 738, 741, 742, 745, 755, 756, 759, 760, 764, 765, 769, 770, 774, 775, 780, 781, 790, 791, 796, 797, 799, 802, 803, 809, 810, 815, 816, 821, 822, 827, 828, 837, 847, 857, 867, 880, 881, 890, 905, 906, 921, 923, 949, 950, 951, 961, 964, 967, 970], "str": [0, 1, 7, 12, 13, 15, 16, 20, 24, 27, 29, 33, 34, 37, 38, 39, 43, 46, 48, 52, 56, 62, 63, 65, 66, 67, 71, 74, 75, 76, 77, 79, 82, 86, 89, 90, 94, 95, 96, 99, 100, 102, 107, 108, 109, 111, 112, 113, 114, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 136, 138, 139, 143, 151, 153, 156, 157, 158, 160, 163, 165, 166, 170, 176, 177, 182, 185, 186, 188, 189, 191, 193, 194, 195, 200, 208, 216, 227, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 249, 254, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 277, 280, 281, 282, 283, 285, 286, 288, 289, 291, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 310, 311, 312, 313, 315, 316, 318, 320, 322, 323, 324, 325, 326, 329, 330, 331, 332, 335, 336, 337, 338, 341, 344, 347, 350, 353, 356, 360, 368, 369, 380, 381, 388, 389, 390, 391, 392, 393, 395, 399, 401, 402, 404, 405, 406, 408, 410, 411, 412, 414, 416, 417, 418, 421, 422, 423, 425, 427, 446, 449, 450, 452, 453, 455, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 488, 491, 492, 493, 494, 500, 501, 504, 506, 507, 508, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 528, 531, 532, 533, 534, 537, 542, 543, 545, 546, 547, 548, 549, 550, 551, 556, 557, 575, 585, 593, 600, 607, 615, 622, 623, 627, 636, 637, 638, 639, 643, 644, 645, 652, 663, 671, 672, 673, 688, 691, 704, 706, 709, 710, 712, 719, 721, 724, 725, 733, 734, 736, 741, 742, 745, 755, 756, 758, 763, 768, 773, 789, 795, 799, 801, 808, 814, 820, 826, 832, 837, 842, 847, 852, 857, 862, 867, 872, 880, 881, 890, 892, 905, 906, 913, 921, 922, 923, 924, 925, 940, 941, 961, 967], "keep": [0, 1, 644, 953, 963], "memori": [0, 1, 2, 5, 10, 23, 32, 45, 53, 61, 73, 128, 129, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720, 799, 837, 961, 973], "do": [0, 1, 52, 799, 837, 952, 966, 968, 973, 974], "final": [0, 1, 2, 3, 14, 17, 21, 27, 31, 34, 35, 40, 44, 47, 48, 51, 57, 64, 68, 72, 75, 84, 93, 95, 97, 101, 106, 108, 110, 111, 128, 136, 140, 147, 149, 156, 163, 167, 174, 178, 179, 183, 189, 192, 194, 198, 201, 206, 209, 214, 217, 220, 224, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 278, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 327, 330, 333, 336, 339, 342, 345, 348, 351, 354, 357, 361, 364, 368, 373, 380, 383, 387, 390, 394, 395, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 465, 466, 468, 470, 473, 474, 475, 477, 479, 482, 484, 621, 628, 629, 630, 642, 644, 651, 662, 669, 686, 687, 711, 717, 724, 728, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 883, 891, 893, 907, 914, 924, 926, 931, 933, 935, 966, 971, 974], "them": [0, 1, 572, 799, 837, 965, 974], "constructor": [0, 1, 7, 12, 13, 14, 17, 18, 27, 28, 35, 36, 40, 41, 47, 48, 49, 57, 58, 64, 68, 69, 75, 76, 84, 89, 90, 93, 95, 96, 97, 101, 106, 110, 113, 114, 118, 119, 128, 129, 136, 138, 147, 149, 150, 156, 157, 163, 165, 174, 178, 179, 180, 186, 188, 189, 191, 194, 195, 201, 202, 209, 210, 217, 218, 220, 221, 228, 229, 235, 236, 240, 243, 244, 247, 253, 254, 260, 261, 264, 265, 269, 270, 275, 276, 281, 282, 286, 287, 293, 294, 297, 298, 302, 303, 306, 309, 312, 313, 317, 318, 319, 320, 321, 324, 325, 330, 331, 336, 337, 342, 345, 348, 351, 354, 357, 358, 361, 362, 368, 369, 373, 374, 380, 381, 387, 390, 391, 397, 400, 401, 405, 406, 411, 412, 417, 418, 422, 423, 428, 443, 449, 450, 454, 455, 459, 460, 464, 465, 468, 469, 473, 474, 477, 478, 482, 483, 486, 487, 495, 496, 514, 515, 526, 527, 529, 530, 535, 536, 538, 539, 540, 541, 543, 544, 581, 582, 583, 584, 598, 599, 605, 606, 613, 614, 621, 622, 642, 643, 644, 645, 651, 652, 669, 671, 711, 717, 718, 724, 725, 733, 734, 735, 736, 741, 742, 743, 744, 757, 758, 762, 763, 767, 768, 772, 773, 788, 789, 794, 795, 800, 801, 807, 808, 813, 814, 819, 820, 825, 826, 831, 832, 838, 839, 848, 849, 858, 859, 868, 869, 882, 907, 913, 924, 925, 967, 973], "print": [0, 9, 189, 193, 486, 488, 495, 514, 522, 524, 526, 529, 535, 538, 540, 621, 642, 644, 651, 659, 662, 667, 724, 733, 735, 741, 924, 929, 964, 965, 966, 967, 968, 970, 972, 973, 974, 975], "arg": [0, 7, 9, 123, 124, 186, 188, 505, 743, 744, 783, 784, 924, 929, 930, 931, 932, 933, 938, 941, 951, 957, 974], "kwarg": [0, 7, 9, 57, 62, 97, 100, 123, 124, 186, 188, 194, 201, 209, 210, 217, 218, 220, 228, 260, 261, 265, 342, 345, 348, 351, 354, 357, 486, 488, 493, 495, 502, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 535, 537, 538, 540, 542, 551, 556, 557, 621, 622, 642, 643, 644, 645, 651, 652, 653, 662, 663, 664, 669, 671, 674, 711, 712, 724, 725, 733, 734, 735, 736, 741, 742, 743, 744, 748, 758, 762, 763, 767, 768, 773, 778, 779, 783, 784, 789, 794, 795, 799, 837, 882, 885, 891, 892, 896, 907, 913, 916, 922, 923, 924, 929, 930, 931, 932, 933, 938, 941, 957, 974], "initi": [0, 6, 10, 13, 14, 17, 23, 27, 32, 34, 35, 40, 45, 47, 48, 53, 54, 57, 61, 63, 64, 68, 73, 75, 84, 93, 95, 97, 101, 106, 109, 110, 128, 129, 132, 136, 142, 147, 149, 152, 156, 159, 163, 169, 174, 178, 179, 184, 194, 199, 200, 201, 207, 208, 209, 215, 216, 217, 220, 226, 227, 228, 233, 234, 235, 238, 240, 243, 247, 253, 257, 260, 264, 267, 269, 272, 275, 279, 281, 284, 286, 290, 293, 297, 300, 302, 306, 309, 312, 317, 319, 321, 324, 328, 330, 334, 336, 340, 342, 345, 348, 351, 354, 357, 361, 367, 368, 373, 379, 380, 386, 387, 390, 396, 397, 400, 405, 410, 411, 416, 417, 421, 422, 427, 428, 449, 453, 454, 458, 459, 463, 464, 468, 472, 473, 477, 481, 482, 621, 631, 632, 642, 644, 648, 651, 662, 669, 689, 690, 691, 711, 712, 717, 720, 724, 729, 733, 735, 741, 743, 745, 746, 747, 748, 757, 762, 767, 772, 776, 778, 779, 783, 784, 788, 792, 794, 800, 804, 807, 813, 819, 825, 831, 834, 835, 838, 843, 844, 848, 853, 854, 858, 863, 864, 868, 873, 874, 875, 882, 884, 885, 891, 894, 895, 896, 907, 915, 916, 924, 927, 931, 933, 934, 936, 937, 961, 966, 968], "update_idata": [0, 10], "idata": [0, 2, 4, 5, 10, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720], "add": [0, 10, 17, 19, 40, 42, 68, 70, 83, 89, 91, 109, 110, 112, 113, 115, 118, 122, 123, 124, 125, 126, 127, 252, 259, 286, 288, 410, 416, 421, 427, 453, 458, 463, 464, 467, 468, 471, 473, 476, 477, 480, 482, 485, 488, 495, 497, 498, 516, 517, 518, 519, 520, 521, 543, 545, 546, 547, 548, 574, 575, 581, 583, 585, 591, 593, 598, 600, 605, 607, 613, 615, 621, 642, 644, 651, 653, 662, 664, 669, 672, 673, 674, 711, 724, 733, 735, 741, 743, 745, 838, 848, 858, 868, 882, 891, 907, 951, 966, 967, 970, 971, 972, 973], "option": [0, 1, 3, 4, 7, 8, 10, 15, 16, 18, 29, 39, 43, 52, 57, 58, 67, 71, 77, 79, 89, 90, 91, 92, 96, 102, 113, 119, 122, 123, 124, 125, 126, 127, 129, 136, 138, 144, 147, 150, 157, 163, 165, 171, 174, 176, 182, 188, 191, 193, 195, 202, 210, 218, 221, 229, 249, 254, 261, 265, 282, 298, 313, 318, 320, 324, 325, 330, 331, 336, 337, 381, 406, 417, 418, 422, 423, 460, 464, 465, 468, 474, 477, 487, 488, 497, 502, 509, 516, 517, 518, 519, 520, 521, 527, 528, 531, 533, 534, 537, 538, 540, 542, 543, 544, 556, 557, 575, 579, 585, 589, 593, 596, 600, 603, 607, 611, 615, 619, 622, 625, 626, 643, 645, 646, 647, 652, 654, 655, 663, 671, 672, 673, 678, 688, 691, 712, 725, 726, 727, 733, 734, 736, 737, 738, 741, 742, 744, 745, 748, 758, 759, 760, 763, 764, 765, 768, 769, 770, 773, 774, 775, 780, 781, 789, 790, 791, 795, 796, 797, 799, 801, 802, 803, 809, 810, 815, 816, 821, 822, 827, 828, 837, 839, 842, 849, 852, 859, 862, 869, 872, 885, 892, 896, 913, 916, 922, 923, 924, 925, 941, 952, 956, 961, 966, 968, 969, 971, 973, 974], "updat": [0, 10, 57, 60, 112, 194, 197, 201, 205, 209, 213, 217, 220, 223, 228, 231, 269, 467, 471, 476, 480, 485, 669, 707, 708, 711, 715, 716, 743, 882, 891, 903, 904, 907, 966, 975], "return": [0, 10, 14, 17, 27, 35, 40, 47, 48, 50, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 181, 194, 201, 203, 209, 211, 217, 220, 228, 235, 240, 243, 247, 253, 255, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 314, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 375, 380, 387, 390, 397, 400, 405, 407, 411, 413, 417, 419, 422, 424, 428, 449, 451, 454, 456, 459, 461, 464, 468, 473, 477, 482, 486, 505, 516, 517, 518, 519, 520, 521, 529, 538, 574, 581, 583, 591, 598, 605, 613, 621, 642, 644, 651, 662, 717, 724, 733, 735, 741, 757, 762, 767, 772, 778, 783, 785, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 972], "properti": [0, 5, 14, 17, 27, 35, 40, 47, 48, 54, 55, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 113, 116, 117, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 448, 449, 454, 459, 464, 468, 473, 477, 482, 621, 627, 632, 634, 635, 638, 639, 642, 644, 651, 656, 658, 660, 662, 665, 666, 668, 669, 675, 681, 682, 685, 692, 695, 696, 699, 700, 701, 702, 703, 705, 711, 717, 724, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 891, 907, 924, 931, 933, 937], "idata_mem": [0, 5], "current": [0, 5, 669, 682, 711, 743, 882, 891, 907, 952, 969, 971], "update_n_turbin": [0, 11], "reset": [0, 11, 136, 144, 147, 163, 171, 174, 286, 292, 968, 970], "number": [0, 11, 17, 25, 75, 81, 84, 87, 109, 113, 116, 127, 128, 129, 134, 136, 145, 147, 149, 154, 156, 161, 163, 172, 174, 201, 202, 247, 251, 253, 254, 258, 297, 381, 401, 406, 410, 412, 416, 417, 418, 421, 423, 427, 428, 443, 450, 453, 454, 455, 458, 459, 460, 463, 464, 465, 468, 469, 477, 478, 488, 493, 516, 517, 518, 519, 520, 521, 531, 533, 534, 621, 633, 634, 635, 642, 644, 649, 651, 657, 662, 669, 699, 700, 702, 703, 711, 714, 717, 722, 724, 731, 733, 735, 740, 741, 743, 754, 757, 758, 761, 762, 763, 766, 767, 768, 771, 772, 777, 778, 782, 783, 788, 789, 793, 794, 798, 799, 800, 806, 807, 812, 813, 818, 819, 820, 824, 825, 830, 831, 834, 837, 838, 839, 848, 849, 858, 859, 868, 869, 882, 889, 891, 892, 902, 907, 920, 925, 953, 955, 966, 967, 969], "turbin": [0, 11, 27, 28, 29, 30, 34, 47, 52, 57, 59, 60, 77, 79, 89, 90, 91, 92, 93, 94, 95, 101, 102, 103, 104, 105, 107, 112, 113, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 178, 179, 180, 182, 189, 191, 194, 196, 197, 201, 204, 205, 209, 212, 213, 217, 219, 220, 222, 223, 228, 230, 231, 249, 260, 261, 262, 266, 269, 271, 277, 282, 283, 289, 293, 295, 299, 304, 307, 310, 315, 321, 322, 326, 332, 338, 361, 363, 365, 366, 368, 370, 371, 372, 373, 376, 377, 378, 380, 382, 384, 385, 388, 389, 392, 393, 398, 399, 402, 403, 404, 408, 409, 414, 415, 420, 425, 426, 444, 447, 452, 457, 462, 465, 467, 469, 471, 476, 478, 480, 485, 488, 493, 495, 497, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 519, 520, 521, 528, 529, 531, 533, 534, 535, 538, 540, 542, 621, 622, 642, 644, 645, 651, 652, 658, 660, 662, 663, 666, 668, 669, 671, 675, 701, 704, 705, 706, 711, 724, 725, 733, 734, 735, 741, 742, 743, 745, 758, 762, 763, 767, 768, 772, 773, 778, 789, 800, 819, 820, 825, 831, 838, 839, 848, 849, 858, 859, 882, 891, 907, 913, 949, 950, 951, 952, 953, 954, 955, 956, 960, 961, 962, 964, 965, 966, 968, 969, 970, 971, 973, 974, 975], "accord": [0, 11, 57, 60, 124, 194, 197, 201, 205, 209, 213, 217, 220, 223, 228, 231, 351, 551, 556, 557, 967, 971], "self": [0, 11, 14, 17, 23, 27, 32, 35, 40, 45, 47, 48, 50, 53, 57, 61, 64, 68, 73, 75, 84, 93, 95, 97, 101, 106, 110, 128, 132, 136, 142, 147, 149, 152, 156, 159, 163, 169, 174, 178, 179, 181, 184, 194, 199, 201, 203, 207, 209, 211, 215, 217, 220, 226, 228, 233, 235, 238, 240, 243, 247, 253, 254, 255, 257, 260, 264, 267, 269, 272, 275, 279, 281, 284, 286, 290, 293, 297, 300, 302, 306, 309, 312, 314, 317, 319, 321, 324, 328, 330, 334, 336, 340, 342, 345, 348, 351, 354, 357, 361, 367, 368, 373, 375, 379, 380, 386, 387, 390, 396, 397, 400, 405, 407, 411, 413, 417, 419, 422, 424, 428, 449, 451, 454, 456, 459, 461, 464, 468, 472, 473, 477, 481, 482, 493, 694, 698, 717, 720, 750, 752, 778, 779, 783, 784, 834, 835, 842, 852, 862, 872, 877, 879, 898, 900, 931, 933, 934], "get_models_data": [0, 4], "creat": [0, 4, 8, 14, 17, 27, 35, 40, 47, 48, 56, 57, 59, 60, 63, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 176, 178, 179, 194, 196, 197, 200, 201, 204, 205, 208, 209, 212, 213, 216, 217, 219, 220, 222, 223, 227, 228, 230, 231, 234, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 486, 488, 529, 533, 535, 538, 540, 717, 745, 951, 956, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975], "xarrai": [0, 4, 8, 12, 13, 14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 128, 129, 136, 147, 149, 156, 163, 174, 178, 179, 235, 240, 243, 247, 253, 260, 264, 265, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 486, 487, 495, 496, 514, 515, 527, 530, 535, 536, 539, 717, 949, 961, 966, 972], "input": [0, 4, 15, 16, 39, 67, 97, 98, 99, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 260, 261, 264, 265, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 799, 837, 940, 948, 952, 961, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975], "new_point_data": [0, 8], "point": [0, 8, 17, 18, 20, 52, 64, 65, 68, 71, 75, 77, 78, 79, 80, 81, 83, 101, 104, 105, 107, 109, 112, 126, 127, 130, 139, 151, 158, 166, 189, 201, 202, 220, 225, 228, 232, 237, 241, 243, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 361, 365, 366, 368, 371, 372, 373, 374, 377, 378, 380, 384, 385, 388, 389, 392, 393, 398, 399, 402, 404, 408, 410, 414, 416, 420, 421, 425, 427, 452, 453, 457, 458, 462, 463, 467, 471, 476, 480, 485, 514, 515, 516, 517, 518, 529, 530, 531, 533, 534, 538, 539, 574, 577, 578, 579, 580, 581, 583, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 617, 618, 619, 620, 669, 671, 719, 799, 837, 838, 839, 842, 848, 849, 852, 858, 859, 862, 868, 869, 872, 892, 923, 942, 943, 949, 952, 955, 957, 961, 964, 965, 966, 968, 969, 971, 972, 973, 974], "states_indic": [0, 8], "onli": [0, 8, 10, 122, 201, 361, 397, 398, 400, 403, 405, 409, 411, 415, 417, 420, 422, 426, 454, 457, 459, 462, 531, 533, 534, 572, 678, 799, 837, 961, 963, 964, 967, 972, 973, 975], "finalize_model": [0, 3], "routin": [0, 3], "kept": [0, 3], "clear_mem": [0, 2], "fals": [0, 2, 35, 36, 47, 52, 60, 77, 79, 93, 122, 205, 213, 223, 231, 243, 244, 249, 286, 287, 306, 309, 405, 406, 486, 487, 488, 495, 497, 503, 509, 516, 517, 518, 519, 520, 521, 526, 528, 574, 575, 579, 581, 583, 585, 589, 591, 596, 598, 603, 605, 611, 613, 615, 619, 622, 678, 688, 745, 923, 941, 957, 961, 965], "classmethod": [0, 7, 57, 62, 97, 100, 194, 201, 209, 217, 220, 228, 269, 274, 342, 345, 348, 351, 354, 357, 486, 495, 514, 522, 523, 524, 525, 526, 529, 532, 535, 538, 540, 551, 556, 557, 621, 642, 644, 651, 659, 662, 667, 669, 704, 706, 711, 724, 733, 735, 741, 743, 882, 891, 907, 924, 928], "new": [0, 7, 57, 62, 63, 97, 100, 112, 194, 200, 201, 208, 209, 216, 217, 220, 227, 228, 234, 342, 345, 348, 351, 354, 357, 467, 471, 476, 480, 485, 486, 495, 514, 522, 523, 526, 529, 535, 538, 540, 636, 637, 669, 676, 677, 711, 743, 838, 840, 841, 848, 850, 851, 858, 860, 861, 868, 870, 871, 882, 891, 907, 961, 963, 966, 967], "algo_typ": [0, 7], "time": [0, 7, 57, 62, 97, 100, 129, 194, 201, 209, 217, 220, 228, 342, 345, 348, 351, 354, 357, 486, 495, 509, 514, 522, 523, 526, 529, 535, 538, 540, 717, 799, 837, 953, 961, 963, 964, 965, 968, 969, 970, 973, 974], "factori": [0, 7, 57, 62, 97, 100, 194, 201, 209, 217, 220, 228, 342, 345, 348, 351, 354, 357, 486, 495, 514, 522, 523, 526, 529, 535, 538, 540], "__repr__": [0, 14, 17, 27, 35, 40, 47, 48, 50, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 181, 194, 201, 203, 209, 211, 217, 220, 228, 235, 240, 243, 247, 253, 255, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 314, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 375, 380, 387, 390, 397, 400, 405, 407, 411, 413, 417, 419, 422, 424, 428, 449, 451, 454, 456, 459, 461, 464, 468, 473, 477, 482, 717], "repr": [0, 14, 17, 27, 35, 40, 47, 48, 50, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 181, 194, 201, 203, 209, 211, 217, 220, 228, 235, 240, 243, 247, 253, 255, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 314, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 375, 380, 387, 390, 397, 400, 405, 407, 411, 413, 417, 419, 422, 424, 428, 449, 451, 454, 456, 459, 461, 464, 468, 473, 477, 482, 717], "model_id": [0, 14, 17, 27, 35, 40, 47, 48, 55, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 717], "uniqu": [0, 14, 17, 27, 35, 40, 47, 48, 55, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 717], "id": [0, 14, 17, 27, 35, 40, 47, 48, 55, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 122, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 717], "type": [0, 14, 17, 23, 27, 32, 35, 40, 45, 47, 48, 53, 55, 57, 61, 64, 68, 73, 75, 84, 89, 90, 93, 95, 97, 101, 106, 110, 128, 132, 136, 142, 147, 149, 152, 156, 159, 163, 169, 174, 178, 179, 184, 189, 191, 193, 194, 199, 201, 207, 209, 215, 217, 220, 226, 228, 233, 235, 238, 240, 243, 247, 253, 257, 260, 264, 267, 269, 272, 275, 279, 281, 284, 286, 290, 293, 297, 300, 302, 306, 309, 312, 317, 319, 321, 324, 328, 330, 334, 336, 340, 342, 345, 348, 351, 354, 357, 361, 367, 368, 373, 379, 380, 386, 387, 390, 396, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 472, 473, 477, 481, 482, 540, 542, 717, 720, 745, 778, 779, 783, 784, 799, 834, 835, 837, 931, 933, 934, 949, 952, 956, 961, 964, 965, 966, 967, 969, 970, 972, 973, 975], "var": [0, 14, 16, 17, 27, 35, 40, 47, 48, 56, 57, 64, 68, 75, 84, 93, 95, 97, 99, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 244, 247, 253, 260, 264, 269, 275, 276, 281, 286, 288, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 360, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 465, 468, 469, 473, 477, 478, 482, 495, 500, 501, 504, 505, 506, 507, 508, 513, 514, 516, 517, 518, 519, 520, 521, 529, 531, 533, 534, 538, 621, 624, 642, 644, 651, 662, 669, 688, 704, 706, 711, 712, 713, 714, 717, 724, 733, 735, 741, 743, 753, 754, 757, 762, 767, 772, 778, 783, 788, 794, 799, 800, 807, 813, 819, 825, 831, 834, 837, 882, 888, 889, 891, 901, 902, 907, 919, 920], "v": [0, 14, 17, 27, 35, 40, 47, 48, 56, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 717, 799, 837, 944, 945], "specif": [0, 14, 17, 27, 35, 40, 47, 48, 56, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 717, 957, 973], "variabl": [0, 14, 15, 16, 17, 20, 24, 27, 29, 33, 35, 37, 38, 39, 40, 43, 46, 47, 48, 52, 56, 57, 63, 64, 65, 66, 67, 68, 71, 74, 75, 76, 77, 79, 82, 84, 86, 93, 94, 95, 97, 99, 101, 102, 106, 107, 108, 109, 110, 111, 112, 128, 129, 130, 133, 136, 138, 139, 143, 147, 149, 151, 153, 156, 157, 158, 160, 163, 165, 166, 170, 174, 176, 178, 179, 182, 185, 194, 200, 201, 208, 209, 216, 217, 220, 227, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 275, 276, 277, 280, 281, 282, 283, 285, 286, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 335, 336, 337, 338, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 358, 360, 361, 368, 369, 373, 380, 381, 387, 388, 389, 390, 391, 392, 393, 395, 397, 399, 400, 401, 402, 404, 405, 406, 408, 410, 411, 412, 414, 416, 417, 418, 421, 422, 423, 425, 427, 428, 449, 450, 452, 453, 454, 455, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 485, 488, 500, 501, 504, 506, 507, 508, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 525, 526, 528, 529, 531, 532, 533, 534, 535, 537, 538, 540, 542, 621, 624, 625, 626, 629, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 650, 651, 654, 655, 661, 662, 669, 672, 673, 676, 677, 678, 683, 684, 686, 687, 688, 689, 690, 691, 693, 694, 697, 698, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 788, 790, 791, 794, 796, 797, 799, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 837, 838, 840, 841, 843, 845, 846, 847, 848, 850, 851, 853, 855, 856, 857, 858, 860, 861, 863, 865, 866, 867, 868, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 914, 915, 917, 918, 919, 920, 921, 951, 952, 953, 954, 961, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "name": [0, 5, 7, 12, 13, 14, 17, 24, 27, 28, 33, 34, 35, 38, 40, 46, 47, 48, 56, 57, 62, 63, 64, 66, 68, 74, 75, 77, 82, 84, 86, 89, 90, 93, 95, 96, 97, 99, 100, 101, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 120, 121, 122, 125, 126, 127, 128, 129, 133, 136, 138, 143, 147, 149, 153, 156, 157, 160, 163, 165, 170, 174, 176, 178, 179, 185, 186, 188, 189, 193, 194, 195, 200, 201, 208, 209, 216, 217, 220, 227, 228, 234, 235, 236, 239, 240, 242, 243, 246, 247, 253, 254, 260, 263, 264, 265, 268, 269, 273, 275, 276, 280, 281, 282, 285, 286, 288, 291, 293, 296, 297, 301, 302, 303, 305, 306, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 329, 330, 331, 335, 336, 337, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 360, 361, 368, 373, 380, 381, 387, 388, 389, 390, 391, 392, 393, 395, 397, 399, 400, 401, 402, 404, 405, 406, 408, 410, 411, 412, 414, 416, 417, 418, 421, 422, 423, 425, 427, 428, 449, 450, 452, 453, 454, 455, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 488, 495, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 538, 540, 542, 543, 546, 549, 621, 622, 627, 636, 637, 638, 639, 642, 643, 644, 645, 651, 652, 659, 662, 663, 667, 669, 671, 691, 704, 706, 709, 710, 711, 712, 713, 714, 717, 721, 724, 725, 733, 734, 735, 736, 741, 742, 743, 745, 753, 754, 755, 756, 757, 758, 762, 763, 767, 768, 772, 773, 778, 779, 783, 788, 789, 794, 795, 800, 801, 807, 808, 813, 814, 819, 820, 825, 826, 831, 832, 834, 835, 838, 847, 848, 857, 858, 867, 868, 880, 881, 882, 888, 889, 890, 891, 892, 901, 902, 905, 906, 907, 913, 919, 920, 921, 923, 950, 957, 961, 963, 964, 965, 966, 967, 968, 970, 971, 973], "flag": [0, 14, 17, 27, 29, 35, 36, 40, 47, 48, 54, 57, 60, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 125, 128, 129, 136, 147, 149, 156, 163, 174, 178, 179, 194, 197, 201, 205, 209, 213, 217, 220, 223, 228, 231, 235, 240, 243, 247, 253, 254, 260, 264, 269, 275, 281, 286, 287, 293, 294, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 406, 411, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 486, 487, 488, 497, 503, 509, 516, 517, 518, 519, 520, 521, 549, 579, 589, 596, 603, 611, 619, 621, 632, 642, 644, 651, 662, 669, 675, 678, 683, 688, 695, 711, 717, 724, 730, 733, 735, 739, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 805, 807, 811, 813, 817, 819, 823, 825, 829, 831, 833, 834, 836, 838, 848, 858, 868, 882, 891, 907, 924, 925, 931, 933, 937, 963, 966], "get_data": [0, 14, 17, 27, 35, 40, 47, 48, 52, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 446, 449, 454, 459, 464, 468, 473, 477, 482, 529, 531, 538, 717], "st_sel": [0, 14, 17, 27, 29, 35, 40, 47, 48, 52, 57, 64, 68, 75, 84, 93, 94, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 261, 262, 264, 266, 269, 271, 275, 277, 281, 283, 286, 289, 293, 295, 297, 299, 302, 304, 306, 307, 309, 310, 312, 315, 317, 319, 321, 322, 324, 326, 330, 332, 336, 338, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 449, 454, 459, 464, 468, 473, 477, 482, 717], "upcast": [0, 14, 17, 27, 35, 40, 47, 48, 52, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 449, 454, 459, 464, 468, 473, 477, 482, 717], "getter": [0, 14, 17, 27, 35, 40, 47, 48, 52, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 449, 454, 459, 464, 468, 473, 477, 482, 717], "entri": [0, 2, 4, 14, 17, 23, 27, 32, 35, 40, 45, 47, 48, 52, 53, 57, 61, 64, 68, 73, 75, 84, 89, 93, 95, 97, 101, 106, 110, 128, 132, 136, 142, 147, 149, 152, 156, 159, 163, 169, 174, 178, 179, 184, 194, 199, 201, 207, 209, 215, 217, 220, 226, 228, 233, 235, 238, 240, 243, 247, 253, 257, 260, 264, 267, 269, 272, 275, 279, 281, 284, 286, 290, 293, 297, 300, 302, 306, 309, 312, 317, 319, 321, 324, 328, 330, 334, 336, 340, 342, 345, 348, 351, 354, 357, 361, 367, 368, 373, 379, 380, 386, 387, 390, 396, 397, 400, 405, 411, 417, 422, 428, 446, 449, 454, 459, 464, 468, 472, 473, 477, 481, 482, 525, 557, 717, 720, 799, 837, 951, 961, 964, 971], "either": [0, 14, 17, 27, 35, 40, 47, 48, 52, 57, 64, 68, 75, 79, 84, 93, 95, 97, 101, 106, 110, 128, 136, 138, 147, 149, 156, 163, 165, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 236, 240, 243, 247, 249, 253, 260, 264, 269, 275, 281, 286, 293, 297, 298, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 449, 454, 459, 464, 468, 473, 477, 482, 543, 644, 645, 717, 745, 957, 971], "given": [0, 14, 17, 27, 35, 40, 47, 48, 52, 57, 64, 68, 75, 84, 89, 90, 93, 95, 97, 101, 104, 106, 110, 128, 136, 147, 149, 156, 163, 174, 178, 179, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 313, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 365, 368, 371, 373, 377, 380, 381, 384, 387, 390, 397, 400, 405, 406, 411, 417, 418, 422, 423, 449, 450, 454, 459, 464, 468, 473, 477, 482, 495, 497, 502, 509, 513, 543, 549, 558, 561, 562, 567, 621, 629, 630, 642, 644, 651, 662, 669, 679, 680, 686, 687, 711, 717, 724, 728, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 785, 786, 788, 794, 799, 800, 807, 813, 819, 825, 831, 834, 837, 838, 848, 858, 868, 882, 883, 891, 893, 907, 914, 924, 930, 931, 932, 933, 938, 951, 952, 953, 957, 958, 961, 971], "bool": [2, 27, 29, 35, 36, 52, 54, 60, 77, 79, 91, 92, 94, 112, 122, 125, 128, 129, 176, 197, 205, 213, 223, 231, 243, 244, 249, 253, 254, 262, 266, 271, 277, 283, 287, 289, 293, 294, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 388, 389, 392, 398, 399, 402, 404, 405, 406, 408, 414, 420, 425, 447, 452, 457, 462, 467, 471, 476, 480, 485, 486, 487, 488, 497, 503, 509, 516, 517, 518, 519, 520, 521, 528, 549, 575, 579, 585, 589, 593, 596, 600, 603, 607, 611, 615, 619, 621, 622, 632, 640, 641, 650, 661, 675, 678, 683, 688, 724, 725, 730, 732, 734, 735, 736, 739, 742, 745, 805, 811, 817, 823, 829, 833, 836, 838, 839, 842, 852, 862, 872, 923, 924, 925, 937, 941], "clear": [2, 969], "includ": [2, 17, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 540, 545, 720, 956, 961, 963, 964, 966, 974, 975], "ha": [4, 23, 32, 45, 53, 54, 61, 73, 132, 142, 152, 159, 169, 184, 193, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 632, 720, 891, 945, 946, 961, 962, 965, 968, 970, 971, 973], "exactli": [4, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720], "two": [4, 23, 32, 45, 53, 61, 73, 126, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 297, 300, 319, 328, 334, 336, 340, 367, 379, 386, 396, 472, 481, 572, 720, 799, 837, 942, 943, 952, 957, 961, 965, 966, 969, 970, 971, 973, 975], "data_var": [4, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720], "name_str": [4, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720], "dim_tupl": [4, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720], "data_ndarrai": [4, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720], "coord": [4, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720, 799, 837], "dim_name_str": [4, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720], "dim_arrai": [4, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720], "take": [4, 58, 519, 520, 521], "": [4, 12, 13, 14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 128, 129, 136, 147, 149, 156, 163, 174, 178, 179, 209, 210, 218, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 513, 516, 517, 518, 519, 520, 521, 572, 671, 678, 688, 717, 892, 913, 961, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "dataset": [4, 8, 14, 16, 39, 67, 128, 129, 486, 487, 495, 496, 514, 515, 527, 530, 535, 536, 539, 949, 961, 966, 972], "kei": [5, 12, 13, 15, 20, 29, 37, 43, 52, 63, 65, 71, 77, 79, 94, 107, 108, 109, 130, 139, 151, 156, 157, 158, 163, 165, 166, 176, 182, 186, 187, 189, 190, 194, 195, 200, 208, 216, 227, 234, 237, 241, 245, 249, 262, 266, 271, 275, 276, 277, 283, 289, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 388, 389, 390, 391, 392, 393, 395, 399, 401, 402, 404, 406, 408, 410, 412, 414, 416, 418, 421, 423, 425, 427, 428, 446, 450, 452, 453, 455, 458, 460, 463, 464, 465, 469, 473, 474, 478, 510, 511, 512, 525, 528, 543, 550, 551, 555, 636, 637, 672, 673, 712, 713, 714, 719, 724, 745, 753, 754, 888, 889, 901, 902, 919, 920, 923, 967], "valu": [5, 15, 20, 29, 37, 43, 63, 65, 71, 77, 79, 94, 101, 104, 107, 108, 109, 128, 129, 130, 136, 138, 139, 149, 150, 151, 156, 157, 158, 163, 165, 166, 176, 182, 189, 194, 195, 200, 208, 216, 227, 234, 237, 241, 243, 244, 245, 249, 262, 265, 266, 269, 271, 275, 276, 277, 283, 289, 295, 299, 304, 307, 310, 313, 315, 322, 326, 332, 336, 338, 351, 357, 358, 361, 365, 368, 371, 373, 377, 380, 381, 384, 387, 388, 389, 390, 391, 392, 393, 395, 398, 399, 401, 402, 403, 404, 406, 408, 409, 410, 412, 414, 415, 416, 417, 418, 420, 421, 423, 425, 426, 427, 428, 443, 444, 447, 450, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 465, 469, 473, 474, 478, 497, 502, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 528, 531, 533, 534, 542, 543, 562, 565, 567, 569, 621, 624, 625, 626, 629, 630, 636, 637, 642, 644, 646, 647, 651, 654, 655, 662, 669, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 693, 694, 696, 697, 698, 707, 708, 711, 712, 713, 714, 715, 716, 719, 724, 726, 727, 728, 733, 735, 737, 738, 741, 743, 745, 746, 747, 749, 750, 751, 752, 753, 754, 757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 785, 786, 788, 790, 791, 794, 796, 797, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 838, 840, 841, 843, 845, 846, 848, 850, 851, 853, 855, 856, 858, 860, 861, 863, 865, 866, 868, 870, 871, 873, 874, 876, 877, 878, 879, 882, 883, 884, 886, 887, 888, 889, 891, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 907, 914, 915, 917, 918, 919, 920, 923, 930, 932, 938, 952, 961, 965, 970, 971, 975], "select": [7, 27, 29, 57, 58, 62, 89, 90, 91, 92, 93, 94, 100, 112, 128, 129, 136, 138, 144, 147, 163, 165, 171, 174, 179, 193, 260, 261, 262, 266, 271, 277, 283, 289, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 388, 389, 392, 398, 399, 402, 404, 408, 414, 420, 425, 452, 457, 462, 467, 471, 476, 480, 485, 523, 535, 537, 621, 622, 624, 625, 626, 642, 644, 645, 646, 647, 651, 652, 654, 655, 658, 660, 662, 663, 666, 668, 669, 671, 678, 688, 701, 705, 711, 724, 726, 727, 733, 735, 737, 738, 741, 743, 745, 759, 760, 764, 765, 769, 770, 774, 775, 780, 781, 790, 791, 796, 797, 802, 803, 809, 810, 815, 816, 821, 822, 827, 828, 882, 891, 907, 948, 949, 950, 952, 954, 961, 965, 966, 967, 968, 969, 972, 973], "deriv": [7, 62, 100, 523, 571, 621, 624, 642, 644, 651, 662, 678, 688, 724, 733, 735, 741, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 957], "tupl": [7, 12, 13, 15, 16, 39, 67, 123, 124, 176, 188, 194, 195, 398, 420, 457, 462, 488, 513, 516, 517, 518, 519, 520, 521, 537, 542, 744, 930, 932, 938, 941], "addit": [7, 16, 39, 67, 102, 122, 123, 156, 157, 177, 210, 218, 261, 265, 318, 320, 325, 331, 337, 459, 460, 528, 537, 542, 622, 643, 645, 652, 663, 669, 671, 712, 725, 733, 734, 736, 741, 742, 748, 885, 892, 896, 913, 916, 922, 923, 940, 961, 971, 973, 974], "numpi": [8, 12, 15, 20, 26, 27, 29, 37, 43, 52, 59, 60, 65, 71, 77, 78, 79, 80, 83, 88, 89, 90, 91, 92, 94, 98, 102, 103, 104, 105, 107, 108, 109, 111, 112, 126, 127, 130, 135, 139, 146, 151, 155, 158, 162, 166, 173, 182, 196, 197, 204, 205, 212, 213, 219, 222, 223, 225, 230, 231, 232, 237, 241, 245, 248, 249, 250, 252, 256, 259, 260, 261, 262, 266, 271, 277, 283, 288, 289, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 343, 346, 349, 352, 355, 359, 363, 365, 366, 370, 371, 372, 376, 377, 378, 382, 384, 385, 388, 389, 392, 393, 395, 398, 399, 402, 403, 404, 408, 409, 410, 414, 415, 416, 420, 421, 425, 426, 427, 444, 446, 447, 452, 453, 457, 458, 462, 463, 466, 467, 470, 471, 475, 476, 479, 480, 484, 485, 489, 538, 572, 573, 577, 578, 579, 580, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 617, 618, 619, 620, 624, 640, 641, 650, 661, 669, 671, 678, 681, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 713, 714, 719, 723, 732, 745, 746, 747, 749, 750, 751, 752, 753, 754, 799, 837, 842, 843, 845, 846, 852, 853, 855, 856, 862, 863, 865, 866, 872, 873, 874, 876, 877, 878, 879, 884, 886, 887, 888, 889, 894, 895, 897, 898, 899, 900, 901, 902, 915, 917, 918, 919, 920, 942, 943, 944, 945, 946, 947, 965, 966, 970, 972, 975], "ndarrai": [8, 15, 20, 26, 27, 29, 37, 43, 52, 59, 60, 65, 71, 77, 78, 79, 80, 83, 88, 89, 90, 91, 92, 94, 98, 102, 103, 104, 105, 107, 108, 109, 111, 112, 126, 127, 130, 135, 139, 146, 151, 155, 158, 162, 166, 173, 182, 196, 197, 204, 205, 212, 213, 219, 222, 223, 225, 230, 231, 232, 237, 241, 245, 248, 249, 250, 252, 256, 259, 260, 261, 262, 266, 271, 277, 283, 288, 289, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 343, 346, 349, 352, 355, 359, 363, 365, 366, 370, 371, 372, 376, 377, 378, 382, 384, 385, 388, 389, 392, 393, 395, 398, 399, 402, 403, 404, 408, 409, 410, 414, 415, 416, 420, 421, 425, 426, 427, 444, 446, 447, 452, 453, 457, 458, 462, 463, 466, 467, 470, 471, 475, 476, 479, 480, 484, 485, 489, 513, 538, 572, 573, 577, 578, 579, 580, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 617, 618, 619, 620, 624, 640, 641, 650, 661, 669, 671, 678, 681, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 713, 714, 719, 723, 732, 745, 746, 747, 749, 750, 751, 752, 753, 754, 799, 837, 842, 843, 845, 846, 852, 853, 855, 856, 862, 863, 865, 866, 872, 873, 874, 876, 877, 878, 879, 884, 886, 887, 888, 889, 894, 895, 897, 898, 899, 900, 901, 902, 915, 917, 918, 919, 920, 923, 942, 943, 944, 945, 946, 947, 975], "shape": [8, 20, 26, 27, 29, 37, 43, 59, 60, 65, 71, 77, 78, 79, 80, 83, 88, 89, 90, 91, 92, 94, 98, 102, 103, 104, 105, 107, 108, 109, 111, 112, 126, 127, 130, 135, 139, 146, 151, 155, 158, 162, 166, 173, 182, 196, 197, 204, 205, 212, 213, 219, 222, 223, 225, 230, 231, 232, 237, 241, 245, 248, 249, 250, 252, 256, 259, 260, 261, 262, 266, 271, 277, 283, 288, 289, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 343, 346, 349, 352, 355, 359, 363, 365, 366, 370, 371, 372, 376, 377, 378, 382, 384, 385, 388, 389, 392, 393, 395, 398, 399, 402, 403, 404, 408, 409, 410, 414, 415, 416, 420, 421, 425, 426, 427, 444, 447, 452, 453, 457, 458, 462, 463, 466, 467, 470, 471, 475, 476, 479, 480, 484, 485, 489, 538, 572, 573, 577, 578, 579, 580, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 599, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 617, 618, 619, 620, 624, 625, 626, 629, 630, 640, 641, 646, 647, 650, 654, 655, 661, 669, 671, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 707, 708, 713, 714, 715, 716, 719, 723, 726, 727, 728, 730, 732, 737, 738, 739, 746, 747, 749, 750, 751, 752, 753, 754, 759, 760, 764, 765, 769, 770, 774, 775, 780, 781, 785, 786, 787, 790, 791, 796, 797, 802, 803, 805, 809, 810, 811, 815, 816, 817, 821, 822, 823, 827, 828, 829, 833, 836, 840, 841, 842, 843, 845, 846, 850, 851, 852, 853, 855, 856, 860, 861, 862, 863, 865, 866, 870, 871, 872, 873, 874, 876, 877, 878, 879, 883, 884, 886, 887, 888, 889, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 914, 915, 917, 918, 919, 920, 922, 923, 940, 943, 944, 945, 946, 947, 957, 961, 972, 975], "n_state": [8, 20, 26, 27, 29, 37, 43, 52, 59, 60, 65, 71, 77, 79, 80, 88, 89, 90, 91, 92, 94, 102, 103, 104, 105, 107, 108, 109, 111, 112, 130, 135, 139, 146, 151, 155, 158, 162, 166, 173, 176, 182, 196, 197, 204, 205, 212, 213, 219, 222, 223, 225, 230, 231, 232, 237, 241, 245, 249, 250, 260, 261, 262, 266, 271, 277, 283, 288, 289, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 363, 365, 366, 370, 371, 372, 376, 377, 378, 382, 384, 385, 388, 389, 392, 393, 395, 398, 399, 402, 403, 404, 408, 409, 410, 414, 415, 416, 420, 421, 425, 426, 427, 444, 447, 452, 453, 457, 458, 462, 463, 466, 467, 470, 471, 475, 476, 479, 480, 484, 485, 669, 671, 711, 713, 714, 717, 719, 723, 743, 753, 754, 882, 888, 889, 891, 901, 902, 907, 919, 920, 951, 953, 972], "n_point": [8, 20, 52, 65, 71, 78, 102, 104, 105, 106, 107, 108, 109, 111, 112, 130, 139, 151, 158, 166, 225, 232, 237, 241, 245, 248, 256, 365, 366, 371, 372, 377, 378, 384, 385, 387, 388, 389, 390, 392, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 408, 409, 410, 411, 414, 415, 416, 417, 420, 421, 422, 425, 426, 427, 444, 447, 449, 452, 453, 454, 457, 458, 459, 462, 463, 466, 467, 470, 471, 475, 476, 479, 480, 484, 485, 579, 580, 589, 590, 596, 597, 599, 603, 604, 611, 612, 619, 620, 669, 671, 719, 842, 852, 862, 872, 923, 972], "3": [8, 77, 78, 80, 104, 105, 107, 225, 232, 240, 248, 250, 256, 365, 366, 371, 372, 377, 378, 384, 385, 393, 489, 538, 572, 669, 671, 799, 837, 952, 957, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "array_lik": [8, 12, 13, 16, 22, 85, 89, 90, 126, 131, 141, 150, 168, 176, 799, 837], "indic": [8, 22, 77, 79, 85, 126, 127, 131, 141, 168, 249, 488, 528, 678, 705], "dimens": [8, 12, 13, 16, 52, 79, 249, 495, 510, 511, 512, 946, 952, 964, 966, 972, 975], "A": [8, 40, 43, 47, 68, 71, 118, 119, 149, 156, 186, 321, 354, 357, 454, 455, 459, 460, 482, 509, 543, 544, 799, 837, 838, 848, 858, 868, 949, 950, 951, 952, 955, 957, 964, 965, 967], "dictionari": [10, 23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 186, 188, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 428, 448, 472, 481, 525, 557, 720, 957], "els": [10, 79, 249, 531, 533, 534], "model_book": [12, 186, 187, 188, 189, 190, 191, 192, 193, 949, 950, 957], "meta": [12, 949], "us": [12, 16, 40, 68, 110, 122, 194, 209, 240, 269, 361, 381, 387, 390, 405, 406, 417, 428, 443, 450, 488, 528, 621, 622, 624, 669, 693, 694, 697, 698, 707, 708, 711, 715, 716, 743, 749, 750, 751, 752, 799, 837, 845, 846, 865, 866, 876, 877, 878, 879, 882, 886, 887, 891, 897, 898, 899, 900, 903, 904, 907, 917, 918, 951, 952, 953, 961, 963, 966, 967, 968, 969, 970, 972, 973, 974, 975], "dure": [12, 13, 16, 23, 32, 45, 53, 61, 73, 128, 129, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720, 961, 966, 967, 973], "singl": [12, 15, 20, 29, 37, 43, 65, 71, 94, 103, 127, 130, 139, 151, 156, 158, 166, 182, 237, 241, 245, 247, 262, 266, 271, 277, 283, 289, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 363, 370, 376, 382, 531, 533, 534, 621, 625, 642, 644, 646, 651, 654, 662, 669, 683, 711, 719, 724, 726, 733, 735, 737, 741, 743, 757, 759, 762, 764, 767, 769, 772, 774, 778, 780, 783, 788, 790, 794, 796, 800, 802, 807, 809, 813, 815, 819, 821, 825, 827, 831, 834, 838, 848, 858, 868, 882, 891, 907, 951, 960, 961, 962, 964, 968, 969], "usual": [12, 969], "dim": [12, 13], "same": [12, 13, 98, 343, 346, 349, 352, 355, 359, 502, 573, 745, 799, 837, 943, 973, 975], "subset": [12, 13, 47, 52, 128, 129, 136, 138, 144, 163, 165, 171, 189, 193, 949, 952, 961, 967], "loop_dim": [12, 13, 14, 16], "loop": [12, 13, 16, 572], "apply_ufunc": [12, 13, 14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 128, 136, 147, 149, 156, 163, 174, 178, 179, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 717], "size": [12, 17, 25, 79, 84, 87, 102, 128, 134, 136, 145, 147, 149, 154, 156, 161, 163, 172, 174, 249, 373, 374, 459, 460, 488, 493, 542, 717, 718, 722, 965, 966, 973], "__getitem__": [12, 186, 187, 189, 190], "x": [12, 78, 101, 102, 104, 122, 126, 128, 129, 186, 187, 201, 248, 253, 256, 293, 294, 361, 365, 368, 371, 373, 377, 380, 384, 387, 388, 389, 390, 392, 397, 398, 399, 400, 402, 403, 404, 405, 408, 409, 411, 414, 415, 417, 420, 422, 425, 426, 428, 444, 447, 452, 454, 457, 459, 462, 488, 489, 516, 517, 518, 519, 520, 521, 542, 572, 574, 575, 577, 578, 581, 583, 585, 587, 588, 591, 593, 594, 595, 598, 600, 601, 602, 605, 607, 609, 610, 613, 615, 617, 618, 799, 837, 946, 947, 952, 959, 962, 964, 965, 966, 968, 972, 973, 974, 975], "y": [12, 78, 122, 126, 128, 129, 186, 187, 248, 256, 293, 294, 488, 489, 516, 517, 518, 519, 520, 521, 542, 574, 575, 577, 578, 581, 583, 585, 587, 588, 591, 593, 594, 595, 598, 600, 601, 602, 605, 607, 609, 610, 613, 615, 617, 618, 799, 837, 946, 947, 964, 965, 966, 972, 973], "store": [13, 23, 27, 28, 32, 45, 53, 61, 73, 77, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 428, 444, 472, 481, 720, 799, 837, 967], "datacalcmodel": [14, 15, 16, 35, 64, 949, 961], "via": [14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 122, 123, 128, 129, 136, 138, 144, 147, 149, 156, 163, 165, 171, 174, 178, 179, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 486, 495, 514, 522, 525, 526, 529, 535, 538, 540, 551, 678, 688, 717, 924, 950, 951, 953, 957, 961, 962, 966, 969, 970, 973, 975], "i": [14, 15, 16, 20, 29, 37, 39, 43, 52, 65, 67, 71, 78, 79, 89, 94, 103, 110, 122, 124, 130, 136, 139, 151, 158, 166, 176, 182, 194, 195, 201, 202, 209, 210, 218, 220, 221, 229, 235, 236, 237, 241, 245, 248, 249, 253, 254, 256, 260, 261, 262, 266, 269, 271, 277, 283, 289, 295, 299, 304, 306, 307, 309, 310, 315, 322, 324, 325, 326, 330, 331, 332, 336, 338, 361, 363, 370, 376, 382, 387, 388, 389, 390, 392, 398, 399, 402, 404, 408, 411, 412, 414, 417, 420, 425, 452, 457, 462, 473, 502, 522, 527, 537, 542, 579, 580, 589, 590, 596, 597, 603, 604, 611, 612, 619, 620, 669, 688, 691, 699, 700, 707, 708, 711, 715, 716, 719, 724, 743, 799, 837, 838, 848, 858, 868, 882, 891, 903, 904, 907, 924, 929, 952, 953, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975], "thei": [14, 77, 89, 90, 101, 109, 410, 416, 421, 427, 453, 458, 463, 952, 959, 961, 964, 965, 966, 967, 969, 973], "depend": [14, 79, 194, 201, 235, 236, 249, 325, 331, 336, 337, 387, 390, 397, 398, 400, 403, 405, 409, 411, 415, 417, 420, 422, 426, 454, 457, 459, 462, 621, 640, 641, 642, 644, 650, 651, 661, 662, 724, 725, 732, 733, 734, 735, 741, 742, 745, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 952, 959, 961, 963, 965, 968, 969, 973, 975], "set": [14, 27, 34, 89, 90, 95, 176, 178, 235, 286, 293, 488, 952, 961, 964, 970, 971, 973, 974, 975], "For": [14, 59, 60, 89, 90, 102, 104, 105, 107, 112, 176, 196, 197, 204, 205, 212, 213, 219, 222, 223, 230, 231, 269, 365, 366, 371, 372, 377, 378, 384, 385, 388, 389, 392, 393, 398, 399, 402, 403, 404, 405, 408, 409, 414, 415, 420, 425, 426, 444, 447, 452, 457, 462, 467, 471, 476, 480, 485, 542, 799, 837, 963, 964, 966, 968, 969, 970, 972, 973, 975], "each": [14, 27, 43, 59, 60, 71, 89, 90, 102, 104, 105, 107, 112, 176, 196, 197, 204, 205, 212, 213, 219, 222, 223, 230, 231, 336, 365, 366, 368, 371, 372, 377, 378, 384, 385, 388, 389, 392, 393, 398, 399, 402, 403, 404, 408, 409, 414, 415, 420, 425, 426, 444, 447, 452, 457, 462, 467, 471, 476, 480, 485, 497, 516, 542, 662, 724, 730, 733, 735, 739, 741, 799, 800, 805, 807, 811, 813, 817, 819, 823, 825, 829, 831, 833, 834, 836, 837, 952, 964, 966, 969, 970, 972, 973, 974, 975], "individu": [14, 89, 95, 336, 621, 625, 626, 642, 644, 646, 647, 651, 654, 655, 662, 669, 679, 683, 684, 711, 724, 726, 727, 733, 735, 737, 738, 741, 743, 757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 785, 788, 790, 791, 794, 796, 797, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 838, 848, 858, 868, 882, 891, 907, 950, 952, 966, 969], "algo": [14, 15, 16, 17, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 51, 53, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 79, 80, 82, 84, 86, 88, 93, 94, 95, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 128, 130, 132, 133, 135, 136, 139, 140, 142, 143, 144, 146, 147, 149, 151, 152, 153, 155, 156, 158, 159, 160, 162, 163, 166, 167, 169, 170, 171, 173, 174, 177, 178, 179, 182, 183, 184, 185, 189, 192, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 253, 257, 260, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 289, 290, 291, 293, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 345, 348, 351, 354, 357, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 408, 409, 410, 411, 414, 415, 416, 417, 420, 421, 422, 425, 426, 427, 428, 449, 452, 453, 454, 457, 458, 459, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 484, 485, 495, 497, 509, 514, 515, 669, 671, 691, 707, 708, 711, 715, 716, 717, 719, 720, 721, 723, 743, 882, 891, 892, 903, 904, 907, 913, 965, 966, 968, 970, 971, 972, 973, 974, 975], "paramet": [14, 27, 40, 68, 136, 163, 176, 178, 179, 194, 312, 324, 330, 336, 373, 380, 405, 411, 417, 422, 428, 448, 449, 454, 459, 551, 669, 891, 907, 952, 954, 966, 969, 972, 973, 974], "main": [14, 15, 17, 20, 27, 29, 35, 37, 40, 43, 47, 64, 65, 68, 71, 84, 93, 94, 95, 128, 130, 136, 139, 147, 149, 151, 156, 158, 163, 166, 174, 178, 179, 182, 235, 237, 240, 241, 243, 245, 260, 262, 264, 266, 269, 271, 275, 277, 281, 283, 286, 289, 293, 295, 297, 299, 302, 304, 306, 307, 309, 310, 312, 315, 317, 319, 321, 322, 324, 326, 330, 332, 336, 338, 717, 719, 963, 964], "run_calcul": [14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 128, 136, 147, 149, 156, 163, 174, 178, 179, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 717], "out_var": [14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 128, 136, 147, 149, 156, 163, 174, 178, 179, 235, 240, 243, 247, 253, 260, 261, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 717], "out_core_var": [14, 16], "start": [14, 16, 17, 18, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 119, 122, 128, 136, 147, 149, 156, 163, 174, 178, 179, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 361, 362, 380, 381, 543, 544, 717, 961, 964, 970, 972, 975], "thi": [15, 16, 20, 23, 29, 32, 35, 36, 37, 39, 43, 45, 53, 60, 61, 65, 67, 71, 73, 77, 79, 94, 103, 106, 107, 118, 130, 132, 139, 142, 151, 152, 158, 159, 166, 169, 182, 184, 194, 197, 199, 205, 207, 213, 215, 223, 226, 231, 233, 237, 238, 241, 243, 245, 249, 257, 262, 266, 267, 269, 271, 272, 277, 279, 283, 284, 287, 289, 290, 295, 299, 300, 304, 307, 310, 315, 322, 326, 328, 332, 334, 338, 340, 351, 361, 363, 367, 370, 376, 379, 381, 382, 386, 387, 390, 393, 396, 397, 400, 401, 405, 406, 411, 412, 417, 418, 422, 423, 428, 443, 449, 450, 454, 455, 459, 460, 472, 473, 481, 495, 516, 517, 518, 519, 520, 521, 522, 551, 572, 591, 598, 605, 621, 622, 688, 707, 708, 715, 716, 719, 720, 745, 799, 837, 838, 848, 858, 868, 891, 903, 904, 950, 951, 952, 953, 957, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975], "execut": [15, 18, 20, 29, 37, 43, 65, 71, 94, 103, 130, 139, 151, 158, 166, 182, 237, 241, 245, 262, 266, 271, 277, 283, 289, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 363, 370, 376, 382, 719, 924, 931, 952, 957, 963], "all": [15, 17, 20, 23, 26, 27, 29, 32, 37, 43, 45, 48, 53, 58, 61, 65, 71, 73, 79, 84, 88, 94, 103, 110, 111, 113, 117, 128, 129, 130, 132, 135, 136, 139, 142, 146, 147, 149, 151, 152, 155, 156, 158, 159, 162, 163, 166, 169, 173, 174, 178, 179, 182, 184, 189, 199, 207, 215, 225, 226, 232, 233, 237, 238, 241, 245, 249, 257, 260, 261, 262, 266, 267, 271, 272, 277, 279, 283, 284, 286, 289, 290, 292, 295, 299, 300, 304, 307, 310, 315, 322, 326, 328, 332, 334, 338, 340, 363, 367, 370, 376, 379, 382, 386, 396, 428, 445, 464, 466, 468, 470, 472, 473, 475, 477, 479, 481, 482, 484, 486, 488, 495, 513, 514, 522, 524, 526, 528, 529, 531, 533, 534, 535, 538, 540, 571, 621, 624, 625, 626, 640, 641, 642, 644, 646, 647, 650, 651, 654, 655, 659, 661, 662, 667, 669, 671, 675, 678, 684, 688, 699, 700, 711, 717, 719, 720, 723, 724, 725, 726, 727, 732, 733, 734, 735, 737, 738, 741, 742, 743, 757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 787, 788, 790, 791, 794, 796, 797, 799, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 837, 838, 848, 858, 868, 882, 891, 907, 923, 943, 948, 949, 950, 951, 952, 957, 961, 963, 964, 965, 966, 967, 968, 969, 972, 974], "comput": [15, 20, 29, 37, 43, 57, 65, 71, 94, 103, 110, 130, 139, 151, 158, 166, 182, 237, 241, 245, 262, 266, 271, 277, 283, 289, 295, 299, 304, 307, 310, 315, 321, 322, 326, 332, 338, 363, 370, 376, 380, 382, 449, 538, 719, 799, 837, 952, 961, 969, 975], "should": [15, 20, 23, 29, 32, 37, 43, 45, 53, 61, 65, 71, 73, 94, 103, 128, 129, 130, 132, 139, 142, 151, 152, 158, 159, 166, 169, 182, 184, 194, 199, 207, 215, 226, 233, 237, 238, 241, 245, 257, 262, 266, 267, 271, 272, 277, 279, 283, 284, 289, 290, 295, 299, 300, 304, 307, 310, 315, 322, 326, 328, 332, 334, 338, 340, 363, 367, 370, 376, 379, 382, 386, 396, 472, 473, 481, 719, 720, 799, 837, 943, 963, 965, 966, 970, 971, 973, 974, 975], "arrai": [15, 20, 23, 29, 32, 37, 43, 45, 53, 61, 65, 71, 73, 89, 90, 94, 103, 130, 132, 139, 142, 151, 152, 158, 159, 166, 169, 182, 184, 199, 207, 215, 226, 233, 237, 238, 241, 245, 257, 260, 261, 262, 266, 267, 271, 272, 277, 279, 283, 284, 289, 290, 295, 299, 300, 304, 307, 310, 315, 322, 326, 328, 332, 334, 338, 340, 363, 367, 370, 376, 379, 382, 386, 396, 472, 481, 513, 572, 573, 624, 625, 626, 629, 630, 646, 647, 654, 655, 676, 677, 678, 679, 680, 683, 684, 686, 687, 688, 707, 708, 715, 716, 719, 720, 726, 727, 728, 730, 737, 738, 739, 759, 760, 764, 765, 769, 770, 774, 775, 780, 781, 785, 786, 787, 790, 791, 796, 797, 799, 802, 803, 805, 809, 810, 811, 815, 816, 817, 821, 822, 823, 827, 828, 829, 833, 836, 837, 840, 841, 842, 850, 851, 852, 860, 861, 862, 870, 871, 872, 883, 893, 903, 904, 914, 923, 944, 945, 946, 947, 965, 966, 975], "result": [15, 16, 20, 29, 37, 39, 43, 60, 65, 67, 71, 75, 77, 79, 94, 98, 102, 108, 110, 111, 130, 139, 151, 158, 166, 182, 197, 201, 205, 213, 223, 231, 237, 241, 243, 244, 245, 247, 249, 253, 262, 266, 271, 277, 283, 289, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 343, 346, 349, 352, 355, 359, 361, 395, 400, 402, 405, 408, 411, 414, 422, 425, 464, 466, 468, 470, 475, 477, 479, 484, 486, 487, 488, 495, 496, 497, 498, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 526, 527, 529, 530, 531, 533, 534, 535, 536, 539, 625, 626, 629, 630, 646, 647, 654, 655, 676, 677, 679, 680, 683, 686, 687, 719, 726, 727, 728, 737, 738, 759, 760, 764, 765, 769, 770, 774, 775, 780, 781, 785, 786, 790, 791, 796, 797, 799, 802, 803, 809, 810, 815, 816, 821, 822, 827, 828, 837, 840, 841, 850, 851, 860, 861, 870, 871, 883, 893, 914, 930, 932, 938, 952, 956, 961, 966, 968, 969, 970, 972, 973, 974, 975], "output": [15, 16, 20, 24, 29, 33, 37, 38, 39, 43, 46, 65, 66, 67, 71, 74, 82, 86, 94, 115, 128, 129, 130, 133, 136, 138, 139, 143, 151, 153, 156, 157, 158, 160, 163, 165, 166, 170, 182, 185, 237, 239, 241, 242, 245, 246, 260, 261, 262, 263, 264, 265, 266, 268, 271, 273, 277, 280, 283, 285, 289, 291, 295, 296, 299, 301, 304, 305, 307, 308, 310, 311, 315, 316, 322, 323, 326, 329, 332, 335, 338, 341, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 719, 721, 799, 837, 940, 948, 961, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975], "calc_par": [16, 17, 27, 34, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 128, 136, 147, 149, 156, 163, 174, 178, 179, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 717], "typic": [16, 39, 67, 84, 688], "fc": [16, 735, 736, 965, 968, 970, 971, 973, 974, 975], "argument": [16, 39, 67, 177, 188, 261, 488, 495, 513, 537, 542, 744, 799, 837, 842, 852, 862, 872, 924, 925, 930, 932, 938, 941, 964, 970, 973, 974], "extendedst": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 949, 961], "extend": [17, 949, 962], "pmodel": 17, "pointdatamodellist": [17, 68, 69, 70, 71, 72, 73, 74, 949], "first": [17, 52, 121, 336, 368, 952, 963, 966, 968, 973, 974, 975], "point_model": [17, 18, 189, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 967], "append": [17, 19, 40, 42, 68, 70], "total": [17, 25, 84, 87, 110, 116, 128, 134, 136, 145, 147, 149, 154, 156, 161, 163, 172, 174, 495, 503, 669, 699, 700, 711, 717, 722, 743, 838, 848, 858, 868, 882, 891, 907, 961, 966], "index": [17, 22, 59, 60, 84, 85, 89, 90, 92, 102, 104, 105, 107, 112, 122, 128, 131, 136, 138, 141, 144, 147, 149, 156, 163, 165, 168, 171, 174, 196, 197, 204, 205, 212, 213, 219, 222, 223, 230, 231, 282, 365, 366, 371, 372, 377, 378, 384, 385, 388, 389, 392, 393, 398, 399, 402, 403, 404, 408, 409, 414, 415, 420, 425, 426, 444, 447, 452, 457, 462, 467, 471, 476, 480, 485, 486, 487, 488, 516, 517, 518, 519, 520, 521, 624, 669, 704, 706, 711, 717, 743, 882, 891, 907, 942, 961, 964, 970, 971, 973, 975], "weight": [17, 26, 75, 77, 79, 83, 84, 88, 128, 129, 135, 136, 146, 147, 149, 155, 156, 162, 163, 173, 174, 176, 201, 220, 247, 249, 252, 253, 254, 259, 495, 513, 519, 520, 521, 717, 723, 799, 814, 837, 952, 964, 966, 971, 972, 974], "statist": [17, 26, 84, 88, 128, 135, 136, 146, 147, 149, 155, 156, 162, 163, 173, 174, 717, 723, 964, 974], "output_point_var": [17, 24, 64, 66, 68, 74, 84, 86, 128, 133, 136, 143, 147, 149, 153, 156, 160, 163, 170, 174, 235, 239, 240, 242, 243, 246, 717, 721], "being": [17, 24, 27, 33, 35, 38, 40, 46, 47, 64, 66, 68, 74, 75, 82, 84, 86, 93, 95, 107, 108, 128, 133, 136, 143, 147, 149, 153, 156, 160, 163, 170, 174, 178, 179, 185, 235, 239, 240, 242, 243, 246, 247, 253, 260, 263, 264, 268, 269, 273, 275, 280, 281, 285, 286, 291, 293, 296, 297, 301, 302, 305, 306, 308, 309, 311, 312, 316, 317, 319, 321, 323, 324, 329, 330, 335, 336, 341, 393, 395, 688, 717, 721, 799, 837], "modifi": [17, 24, 27, 33, 35, 38, 40, 46, 47, 57, 59, 60, 64, 66, 68, 74, 75, 79, 82, 84, 86, 93, 95, 107, 108, 128, 133, 136, 143, 147, 149, 153, 156, 160, 163, 170, 174, 178, 179, 185, 194, 196, 197, 201, 204, 205, 209, 212, 213, 217, 219, 220, 222, 223, 228, 230, 231, 235, 239, 240, 242, 243, 246, 247, 249, 253, 260, 263, 264, 268, 269, 273, 275, 280, 281, 285, 286, 291, 293, 296, 297, 301, 302, 305, 306, 308, 309, 311, 312, 316, 317, 319, 321, 323, 324, 329, 330, 335, 336, 341, 393, 395, 717, 721, 949], "mdata": [17, 20, 23, 27, 29, 32, 35, 37, 40, 43, 45, 47, 53, 57, 59, 60, 61, 63, 64, 65, 68, 71, 73, 75, 77, 79, 80, 84, 93, 94, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 128, 130, 132, 136, 139, 142, 147, 149, 151, 152, 156, 158, 159, 163, 166, 169, 174, 178, 179, 182, 184, 194, 196, 197, 199, 200, 201, 204, 205, 207, 208, 209, 212, 213, 215, 216, 217, 219, 220, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 243, 245, 247, 249, 250, 253, 257, 260, 262, 264, 266, 267, 269, 271, 272, 275, 277, 279, 281, 283, 284, 286, 289, 290, 293, 295, 297, 299, 300, 302, 304, 306, 307, 309, 310, 312, 315, 317, 319, 321, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 361, 363, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 392, 393, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 408, 409, 410, 411, 414, 415, 416, 417, 420, 421, 422, 425, 426, 427, 428, 444, 445, 446, 447, 449, 452, 453, 454, 457, 458, 459, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 484, 485, 717, 719, 720], "fdata": [17, 20, 27, 29, 35, 37, 40, 43, 47, 57, 59, 60, 63, 64, 65, 68, 71, 75, 77, 79, 80, 84, 93, 94, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 128, 130, 136, 139, 147, 149, 151, 156, 158, 163, 166, 174, 178, 179, 182, 194, 196, 197, 200, 201, 204, 205, 208, 209, 212, 213, 216, 217, 219, 220, 222, 223, 225, 227, 228, 230, 231, 232, 234, 235, 237, 240, 241, 243, 245, 247, 249, 250, 253, 260, 262, 264, 266, 269, 271, 275, 277, 281, 283, 286, 289, 293, 295, 297, 299, 302, 304, 306, 307, 309, 310, 312, 315, 317, 319, 321, 322, 324, 326, 330, 332, 336, 338, 361, 363, 365, 366, 368, 370, 371, 372, 373, 376, 377, 378, 380, 382, 384, 385, 387, 388, 389, 390, 392, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 408, 409, 410, 411, 414, 415, 416, 417, 420, 421, 422, 425, 426, 427, 428, 444, 449, 452, 453, 454, 457, 458, 459, 462, 463, 464, 466, 467, 468, 470, 471, 473, 475, 476, 477, 479, 480, 482, 484, 485, 717, 719], "pdata": [17, 20, 64, 65, 68, 71, 84, 128, 130, 136, 139, 147, 149, 151, 156, 158, 163, 166, 174, 235, 237, 240, 241, 243, 245, 717, 719], "pointdatamodel": [18, 19, 64, 65, 66, 67, 68, 69, 70, 84, 189, 235, 240, 243, 949, 952], "after": [18, 79, 110, 111, 122, 249, 269, 464, 466, 468, 470, 473, 475, 477, 479, 482, 484, 516, 517, 519, 520, 521, 966, 970], "label": [22, 85, 89, 90, 131, 141, 168, 516, 517, 518, 519, 520, 521, 542, 964, 971, 973], "integ": [22, 85, 131, 141, 168, 621, 624, 625, 626, 629, 630, 637, 639, 642, 644, 646, 647, 651, 654, 655, 662, 669, 676, 677, 678, 683, 684, 686, 687, 688, 690, 694, 698, 707, 708, 710, 711, 713, 714, 715, 716, 724, 726, 727, 728, 733, 735, 737, 738, 741, 743, 750, 752, 753, 754, 757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 788, 790, 791, 794, 796, 797, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 838, 840, 841, 850, 851, 858, 860, 861, 868, 870, 871, 877, 879, 882, 883, 888, 889, 891, 893, 898, 900, 901, 902, 903, 904, 907, 914, 919, 920], "load": [23, 32, 45, 53, 61, 73, 128, 129, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720, 961, 965], "file": [23, 32, 45, 53, 61, 73, 118, 120, 121, 122, 123, 124, 125, 128, 129, 132, 136, 138, 142, 152, 159, 163, 165, 169, 177, 184, 191, 199, 207, 215, 226, 233, 235, 236, 238, 257, 265, 267, 272, 279, 281, 282, 284, 290, 297, 298, 300, 317, 318, 319, 320, 324, 325, 328, 330, 331, 334, 336, 337, 340, 367, 379, 386, 396, 411, 472, 481, 486, 491, 492, 493, 494, 495, 514, 522, 525, 526, 528, 529, 534, 535, 538, 540, 543, 545, 546, 547, 548, 549, 551, 556, 557, 720, 922, 923, 940, 950, 951, 952, 956, 957, 961, 962, 963, 965, 966, 968, 971, 972, 973, 974], "part": [23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 193, 199, 201, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720, 964, 966, 968, 969, 971], "under": [23, 27, 28, 32, 40, 45, 53, 61, 68, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720, 959, 961, 962, 964, 965, 967, 970, 975], "reason": [23, 32, 45, 53, 61, 73, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 720], "provid": [23, 32, 45, 53, 61, 73, 75, 132, 142, 152, 159, 169, 184, 199, 207, 215, 226, 233, 238, 257, 267, 272, 279, 284, 290, 300, 328, 334, 340, 367, 379, 386, 396, 472, 481, 522, 537, 542, 720, 950, 952, 961, 964, 965, 966, 967, 968, 969, 972, 973], "output_var": [24, 33, 38, 46, 66, 74, 82, 86, 128, 129, 133, 136, 138, 143, 147, 153, 160, 163, 165, 170, 174, 185, 235, 236, 239, 242, 246, 263, 264, 265, 268, 273, 280, 285, 291, 296, 297, 298, 301, 305, 308, 311, 316, 323, 329, 335, 341, 721, 964, 965, 966, 968, 970, 971, 973, 974, 975], "n_turbin": [26, 27, 29, 37, 43, 52, 77, 79, 80, 88, 94, 103, 113, 116, 127, 135, 146, 155, 162, 173, 182, 249, 250, 260, 261, 262, 266, 271, 277, 283, 288, 289, 295, 299, 304, 307, 310, 315, 322, 326, 332, 338, 363, 370, 376, 382, 489, 723, 757, 758, 788, 789, 838, 839, 848, 849, 858, 859, 966, 968, 970, 971, 972], "farmcontrol": [27, 28, 29, 30, 31, 32, 33, 34, 178, 189, 949, 952], "farmdatamodel": [27, 35, 36, 37, 38, 39, 40, 41, 42, 47, 75, 93, 949], "analys": [27, 949], "handl": [27, 949, 961], "turbine_typ": [27, 189, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 540, 542, 964, 967, 971, 972, 973], "turbinetyp": [27, 95, 96, 189, 321, 324, 325, 330, 331, 336, 337, 949, 952], "turbine_model_nam": 27, "found": [27, 549, 951, 953, 967, 972, 973], "turbine_model_sel": 27, "n_model": 27, "pre_rotor_model": 27, "farmdatamodellist": [27, 40, 41, 42, 43, 44, 45, 46, 949], "pre": [27, 29, 963, 970], "rotor": [27, 29, 35, 36, 57, 75, 77, 78, 79, 80, 81, 83, 89, 90, 95, 96, 122, 189, 201, 202, 209, 210, 217, 218, 220, 221, 225, 228, 232, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 275, 276, 287, 293, 294, 368, 473, 486, 487, 488, 621, 622, 745, 758, 949, 952, 960, 961, 962, 966, 969, 973], "post_rotor_model": 27, "without": [27, 178, 513, 952, 966, 970, 972], "par": [27, 28, 178, 428, 436, 448], "respecitv": 27, "set_par": [27, 34, 178], "model_nam": [27, 34, 178], "init_par": [27, 34, 178], "final_par": [27, 34, 178], "collect_model": [27, 30, 178], "analyz": [27, 30, 178], "gather": [27, 30, 178], "output_farm_var": [27, 33, 35, 38, 40, 46, 47, 75, 82, 93, 95, 178, 179, 185, 247, 253, 260, 263, 264, 268, 269, 273, 275, 280, 281, 285, 286, 291, 293, 296, 297, 301, 302, 305, 306, 308, 309, 311, 312, 316, 317, 319, 321, 323, 324, 329, 330, 335, 336, 341], "pre_rotor": [27, 29, 35, 36, 47, 93, 178, 286, 287, 306, 309, 712, 745], "respect": [28, 52, 126, 799, 837, 964, 973, 974, 975], "post": [29, 962, 969], "befor": [35, 36, 108, 122, 287, 395, 516, 517, 519, 520, 521, 707, 708, 715, 716, 735, 736, 745, 903, 904, 966], "By": [40, 68, 688, 975], "togeth": [40, 68, 975], "one": [40, 43, 59, 60, 68, 71, 77, 79, 83, 102, 104, 105, 107, 112, 194, 195, 196, 197, 201, 202, 204, 205, 209, 210, 212, 213, 217, 218, 219, 220, 221, 222, 223, 229, 230, 231, 249, 252, 253, 254, 259, 365, 366, 371, 372, 377, 378, 384, 385, 388, 389, 392, 393, 398, 399, 402, 403, 404, 408, 409, 414, 415, 420, 425, 426, 444, 447, 452, 457, 462, 467, 471, 476, 480, 485, 535, 542, 572, 799, 837, 943, 952, 956, 961, 964, 968, 974, 975], "common": [40, 68, 380, 428, 444, 449, 799, 837, 959], "farmmodel": [47, 179, 189, 949, 952], "oper": [47, 111, 466, 470, 475, 479, 484, 495, 510, 511, 512, 949, 970], "contrast": [47, 572, 949], "turbinemodel": [47, 91, 92, 93, 94, 95, 179, 180, 189, 260, 261, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 949, 952], "allow": [47, 176, 949, 961, 966], "applic": [47, 625, 626, 629, 630, 646, 647, 654, 655, 669, 676, 677, 682, 686, 687, 711, 726, 727, 728, 737, 738, 743, 759, 760, 764, 765, 769, 770, 774, 775, 780, 781, 790, 791, 796, 797, 802, 803, 809, 810, 815, 816, 821, 822, 827, 828, 840, 841, 850, 851, 860, 861, 870, 871, 882, 883, 891, 893, 907, 914, 949, 962, 966], "data_prio": 52, "accept_non": 52, "serv": [52, 964], "If": [52, 79, 249, 313, 380, 381, 405, 406, 417, 418, 422, 423, 449, 450, 465, 469, 478, 528, 531, 533, 534, 572, 712, 799, 837, 923, 970, 973], "get": [52, 101, 104, 118, 220, 225, 228, 232, 361, 365, 368, 371, 373, 377, 380, 384, 529, 531, 538, 543, 549, 550, 574, 576, 581, 583, 586, 591, 598, 605, 608, 613, 616, 621, 623, 640, 641, 642, 644, 650, 651, 661, 662, 669, 681, 692, 696, 706, 711, 724, 732, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 891, 907, 961, 964], "specifi": [52, 57, 59, 194, 196, 201, 204, 209, 212, 217, 219, 220, 222, 228, 230, 282, 952, 961, 966, 973], "broadcast": [52, 943, 945, 946], "potenti": 52, "scalar": [52, 235, 236, 799, 837], "search": [52, 128, 129, 136, 138, 189, 193, 313, 380, 381, 405, 406, 417, 418, 422, 423, 449, 450, 571, 957, 961, 967, 968, 972, 973], "throw": 52, "an": [52, 89, 253, 254, 361, 411, 572, 669, 673, 711, 743, 799, 837, 838, 848, 858, 868, 882, 891, 907, 950, 951, 965, 971, 973, 975], "error": [52, 118, 128, 129, 411, 543, 549, 973], "np": [52, 509, 513, 572, 624, 625, 626, 629, 630, 646, 647, 654, 655, 676, 677, 678, 679, 680, 683, 684, 686, 687, 688, 707, 708, 715, 716, 726, 727, 728, 730, 737, 738, 739, 759, 760, 764, 765, 769, 770, 774, 775, 780, 781, 785, 786, 787, 790, 791, 796, 797, 799, 802, 803, 805, 809, 810, 811, 815, 816, 817, 821, 822, 823, 827, 828, 829, 833, 836, 837, 840, 841, 850, 851, 860, 861, 870, 871, 883, 893, 903, 904, 914, 923, 965, 966, 970, 972, 975], "nan": [52, 176, 513, 572, 624, 961, 970], "true": [54, 79, 118, 125, 129, 176, 197, 249, 253, 254, 293, 294, 447, 516, 517, 518, 519, 520, 521, 543, 549, 579, 580, 589, 590, 591, 593, 596, 597, 598, 600, 603, 604, 605, 607, 611, 612, 619, 620, 632, 675, 735, 736, 842, 852, 862, 872, 923, 925, 965, 966, 968, 970, 973, 974], "been": [54, 632, 961, 962], "partialwakesmodel": [57, 58, 59, 60, 61, 62, 63, 194, 201, 209, 220, 228, 949, 952], "partial": [57, 62, 189, 194, 195, 201, 209, 217, 220, 228, 387, 390, 949, 952, 959, 969], "wake": [57, 58, 59, 60, 62, 63, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 189, 194, 195, 196, 197, 200, 201, 202, 204, 205, 208, 209, 210, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 234, 243, 312, 361, 362, 365, 366, 368, 371, 372, 373, 377, 378, 380, 381, 384, 385, 387, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 425, 426, 427, 428, 443, 444, 447, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 838, 848, 949, 952, 954, 955, 959, 960, 961, 962, 965, 969, 970, 972, 973, 974], "effect": [57, 75, 77, 220, 247, 253, 952, 954, 955, 969, 970, 971, 974, 975], "quantiti": [57, 75, 969], "wake_model": [57, 58, 189, 194, 195, 201, 202, 209, 210, 217, 218, 220, 221, 228, 229, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "wakemodel": [57, 58, 106, 107, 108, 109, 189, 195, 202, 210, 218, 221, 229, 390, 949, 959], "wake_fram": [57, 58, 189, 195, 201, 202, 210, 217, 218, 220, 221, 228, 229, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 965, 966, 967, 968, 970, 971, 973, 974, 975], "wakefram": [57, 58, 101, 102, 103, 104, 105, 189, 195, 202, 210, 218, 221, 229, 361, 362, 368, 373, 380, 381, 949, 952], "frame": [57, 58, 78, 101, 102, 104, 105, 107, 136, 189, 195, 202, 210, 218, 221, 229, 235, 236, 248, 256, 361, 362, 365, 371, 377, 380, 381, 384, 393, 428, 922, 949, 952, 959, 961, 965, 969, 975], "new_wake_delta": [57, 59, 60, 63, 194, 196, 197, 200, 201, 204, 205, 208, 209, 212, 213, 216, 217, 219, 220, 222, 223, 227, 228, 230, 231, 234], "delta": [57, 59, 60, 63, 106, 107, 108, 109, 110, 111, 112, 194, 196, 197, 200, 201, 204, 205, 208, 209, 212, 213, 216, 217, 219, 220, 222, 223, 227, 228, 230, 231, 234, 243, 244, 306, 309, 387, 388, 389, 390, 392, 393, 395, 397, 399, 400, 402, 404, 405, 408, 410, 411, 414, 416, 417, 421, 422, 425, 427, 449, 452, 453, 454, 458, 459, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 509, 573, 773, 801, 952, 961, 969], "fill": [57, 60, 63, 118, 128, 129, 194, 197, 200, 201, 205, 208, 209, 213, 216, 217, 220, 223, 227, 228, 231, 234, 575, 585, 593, 600, 607, 615, 950], "zero": [57, 63, 194, 200, 201, 208, 209, 216, 217, 220, 227, 228, 234, 313, 388, 389, 392, 398, 399, 402, 404, 408, 414, 420, 425, 452, 457, 462, 799, 837, 924, 929, 972], "contribute_to_wake_delta": [57, 59, 60, 106, 107, 194, 196, 197, 201, 204, 205, 209, 212, 213, 217, 219, 220, 222, 223, 228, 230, 231, 387, 390, 393, 397, 400, 405, 411, 417, 422, 449, 454, 459], "contribut": [57, 59, 106, 107, 110, 111, 194, 196, 201, 204, 209, 212, 217, 219, 220, 222, 228, 230, 387, 390, 393, 397, 400, 405, 411, 417, 422, 449, 454, 459, 464, 466, 468, 470, 473, 475, 477, 479, 482, 484], "evaluate_result": [57, 60, 194, 197, 201, 205, 209, 213, 217, 220, 223, 228, 231], "wake_delta": [57, 59, 60, 63, 106, 107, 108, 109, 111, 112, 194, 196, 197, 200, 201, 204, 205, 208, 209, 212, 213, 216, 217, 219, 220, 222, 223, 227, 228, 230, 231, 234, 387, 390, 393, 395, 397, 400, 405, 410, 411, 416, 417, 421, 422, 427, 449, 453, 454, 458, 459, 463, 466, 467, 470, 471, 475, 476, 479, 480, 484, 485], "pwake_typ": [57, 62, 194, 201, 209, 217, 220, 228], "states_source_turbin": [59, 101, 102, 104, 105, 107, 112, 196, 204, 212, 219, 222, 230, 361, 365, 366, 368, 371, 372, 373, 377, 378, 380, 384, 385, 388, 389, 392, 393, 397, 398, 399, 400, 402, 403, 404, 405, 408, 409, 411, 414, 415, 417, 420, 422, 425, 426, 428, 444, 447, 452, 454, 457, 459, 462, 464, 467, 468, 471, 473, 476, 477, 480, 482, 485], "correspond": [59, 196, 204, 212, 219, 222, 230, 269, 944, 947, 963, 967, 968, 971], "caus": [59, 102, 104, 105, 107, 112, 196, 204, 212, 219, 222, 230, 365, 366, 371, 372, 377, 378, 384, 385, 388, 389, 392, 393, 398, 399, 402, 403, 404, 408, 409, 414, 415, 420, 425, 426, 444, 447, 452, 457, 462, 467, 471, 476, 480, 485, 961], "ani": [59, 60, 63, 196, 197, 200, 204, 205, 208, 212, 213, 216, 219, 222, 223, 227, 230, 231, 234, 321, 573, 625, 626, 629, 630, 646, 647, 654, 655, 676, 677, 686, 687, 726, 727, 728, 737, 738, 759, 760, 764, 765, 769, 770, 774, 775, 780, 781, 790, 791, 796, 797, 802, 803, 809, 810, 815, 816, 821, 822, 827, 828, 840, 841, 850, 851, 860, 861, 870, 871, 883, 893, 914, 930, 932, 938, 944, 945, 946, 947, 952, 963, 965, 969, 973, 975], "states_turbin": [60, 77, 79, 197, 205, 213, 223, 231, 249], "update_amb_r": [60, 197, 205, 213, 223, 231], "place": [60, 197, 205, 213, 223, 231, 516, 517, 518, 745, 891, 907, 954, 965, 966, 970], "evalu": [60, 75, 79, 98, 101, 103, 105, 107, 108, 109, 197, 201, 202, 205, 209, 213, 223, 231, 247, 249, 253, 343, 346, 349, 352, 355, 359, 361, 363, 366, 368, 370, 372, 373, 376, 378, 380, 382, 385, 387, 393, 395, 410, 416, 421, 427, 453, 458, 463, 495, 538, 558, 559, 561, 562, 563, 564, 567, 568, 669, 683, 684, 711, 743, 838, 839, 848, 858, 868, 882, 891, 907, 952, 954, 955, 956, 961, 962, 969, 971, 972, 973], "ambient": [60, 75, 76, 77, 79, 84, 108, 111, 128, 197, 205, 213, 223, 231, 243, 244, 247, 249, 253, 254, 395, 405, 406, 465, 466, 469, 470, 475, 478, 479, 482, 483, 484, 495, 497, 503, 509, 951, 952, 961, 962, 968, 969, 970, 972, 973, 974], "rotormodel": [75, 76, 77, 78, 79, 80, 81, 82, 83, 189, 201, 202, 209, 210, 218, 220, 221, 247, 253, 949, 952], "calc_var": [75, 76, 247, 253, 254, 275, 276], "Their": [75, 76, 254], "ad": [75, 76, 109, 110, 111, 254, 265, 410, 416, 421, 427, 453, 458, 463, 464, 466, 468, 470, 473, 475, 477, 479, 482, 484, 495, 513, 688, 745, 951, 961, 963, 966, 967, 971, 972, 973, 974, 975], "automat": [75, 76, 77, 254, 488, 509, 516, 517, 518, 519, 520, 521, 799, 837, 961, 973], "n_rotor_point": [75, 81, 247, 251, 253, 258], "rotor_point_weight": [75, 83, 247, 252, 253, 259], "design_point": [75, 78, 247, 248, 253, 256], "design": [75, 78, 80, 247, 248, 250, 253, 256], "get_rotor_point": [75, 80, 247, 250, 253], "eval_rpoint_result": [75, 79, 247, 249, 253], "rpoint_result": [75, 79, 247, 249, 253], "rpoint": [75, 77, 225, 232, 247, 253], "store_rpoint": 77, "store_rweight": 77, "store_amb_r": 77, "n_rpoint": [77, 79, 80, 81, 83, 249, 250, 251, 252, 258, 259], "switch": [77, 724, 725, 734, 742, 961, 971], "reult": 77, "come": [77, 964, 971, 973], "per": [77, 79, 136, 249, 253, 254, 387, 495, 504, 506, 507, 508, 509, 511, 512, 891, 925, 951, 971], "formul": [78, 248, 256, 971], "plane": [78, 248, 256, 514, 516, 517, 518, 519, 520, 521, 605, 957], "z": [78, 248, 256, 516, 517, 518, 519, 520, 521], "coordin": [78, 101, 102, 104, 105, 107, 128, 129, 248, 256, 361, 365, 366, 368, 371, 372, 373, 377, 378, 380, 384, 385, 393, 486, 487, 516, 517, 518, 519, 520, 521, 724, 799, 837, 842, 852, 862, 872, 923, 964, 965, 966, 969, 972], "centr": [78, 247, 248, 256, 275, 373, 374, 400, 402, 405, 408, 411, 414, 422, 425, 591, 592, 605, 606, 942, 943, 952, 957, 961, 964, 966, 967, 970, 971, 972, 973, 974, 975], "1": [78, 79, 113, 115, 122, 124, 125, 126, 127, 129, 176, 248, 249, 256, 317, 318, 320, 325, 331, 336, 337, 405, 411, 455, 486, 488, 495, 497, 498, 518, 521, 528, 542, 572, 629, 630, 669, 686, 691, 711, 712, 725, 728, 743, 748, 772, 773, 799, 800, 801, 813, 814, 837, 838, 844, 848, 854, 858, 864, 868, 875, 882, 883, 885, 891, 892, 893, 896, 907, 914, 916, 925, 940, 942, 943, 944, 945, 946, 947, 957, 959, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "radiu": [78, 248, 256, 400, 403, 405, 409, 411, 415, 417, 422, 426, 591, 592, 621, 622, 942, 943], "n_rotor_axi": [78, 248, 256], "n_rotor_sid": [78, 248, 256], "n_rotor_up": [78, 248, 256], "dpoint": [78, 248, 256], "copy_to_ambi": [79, 249], "In": [79, 249, 417, 572, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "latter": [79, 201, 249, 923, 961, 966, 970, 971, 973, 975], "case": [79, 128, 129, 177, 249, 509, 531, 533, 534, 537, 542, 549, 951, 961, 966, 970, 971, 972, 973, 975], "expect": [79, 120, 121, 249, 282, 297, 965, 968], "have": [79, 249, 260, 261, 799, 837, 943, 952, 961, 966, 968, 969, 970, 971, 972, 974], "copi": [79, 249], "describ": [84, 951, 964, 965, 972], "meteorolog": [84, 969], "speed": [84, 136, 149, 150, 156, 157, 269, 270, 302, 303, 318, 320, 324, 325, 330, 331, 336, 337, 342, 345, 348, 351, 473, 542, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 945, 946, 951, 952, 958, 964, 965, 966, 968, 969, 971, 972, 973, 974, 975], "direct": [84, 149, 150, 156, 157, 253, 254, 368, 369, 516, 517, 518, 519, 520, 521, 531, 533, 534, 573, 605, 606, 944, 945, 946, 947, 950, 952, 957, 961, 964, 965, 968, 969, 971, 972, 973, 974, 975], "turbul": [84, 454, 455, 959, 961, 965, 968, 969, 973, 974, 975], "intens": [84, 959, 961, 965, 969, 973, 974, 975], "air": [84, 149, 150, 156, 157, 318, 320, 324, 325, 330, 331, 336, 542, 952, 961, 965, 968], "densiti": [84, 149, 150, 156, 157, 318, 320, 336, 542, 772, 773, 800, 952, 955, 961, 965, 968], "mere": 89, "defin": [89, 361, 799, 837, 838, 848, 952, 955, 966, 969, 970, 971, 975], "basic": [89, 120, 121, 178, 201, 293, 950, 952, 966, 968], "xy": [89, 90, 514, 516, 519, 838, 842, 848, 852, 858, 862, 868, 872, 961, 965, 975], "ground": [89, 90], "posit": [89, 90, 92, 621, 642, 882, 953, 954, 961, 970], "2": [89, 90, 126, 127, 176, 194, 195, 240, 388, 389, 392, 403, 404, 409, 415, 417, 426, 452, 454, 459, 488, 572, 577, 578, 579, 580, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 599, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 617, 618, 619, 620, 799, 837, 842, 852, 862, 872, 923, 942, 943, 952, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "appear": [89, 90, 411, 966, 968, 970, 973, 975], "mstates_sel": 89, "boolean": [89, 90, 260, 261, 679, 680, 695, 785, 786, 799, 837, 842, 852, 862, 872], "d": [89, 90, 95, 96, 120, 121, 321, 405, 406, 486, 487, 621, 622, 644, 645, 757, 758, 799, 837, 838, 839, 842, 848, 849, 852, 858, 859, 862, 868, 869, 872, 942, 943, 957, 966, 972], "float": [89, 90, 95, 96, 102, 136, 138, 149, 150, 156, 157, 269, 270, 313, 318, 320, 324, 325, 330, 331, 337, 357, 358, 373, 374, 380, 381, 401, 405, 406, 411, 412, 417, 418, 422, 423, 428, 443, 449, 450, 454, 455, 459, 460, 464, 465, 473, 474, 486, 487, 497, 499, 502, 503, 509, 516, 517, 518, 519, 520, 521, 531, 533, 534, 542, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 591, 592, 621, 622, 624, 625, 626, 629, 630, 634, 636, 638, 640, 642, 644, 645, 646, 647, 650, 651, 654, 655, 661, 662, 669, 676, 677, 678, 683, 684, 686, 687, 688, 689, 693, 697, 702, 707, 708, 709, 711, 713, 714, 715, 716, 724, 725, 726, 727, 728, 732, 733, 734, 735, 737, 738, 741, 742, 743, 745, 746, 749, 751, 753, 754, 755, 757, 758, 759, 760, 762, 764, 765, 767, 769, 770, 772, 773, 774, 775, 778, 780, 781, 783, 788, 789, 790, 791, 794, 796, 797, 799, 800, 801, 802, 803, 807, 809, 810, 813, 814, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 858, 859, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 876, 878, 880, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 899, 901, 902, 903, 904, 905, 907, 913, 914, 915, 917, 918, 919, 920, 921, 942, 945, 946, 964, 966], "diamet": [89, 90, 95, 96, 122, 293, 294, 405, 486, 487, 488, 758, 838, 839, 842, 848, 849, 852, 858, 859, 862, 868, 869, 872, 952, 961, 966, 969], "overwrit": [89, 90], "h": [89, 90, 95, 96, 120, 121, 129, 321, 489, 964, 965, 966, 968, 972], "hub": [89, 90, 95, 96, 122, 952, 961, 968, 969, 972], "height": [89, 90, 95, 96, 97, 98, 122, 128, 129, 136, 138, 147, 293, 294, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 359, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 951, 952, 958, 960, 961, 962, 964, 965, 969, 972], "turbine_model": [89, 90, 122, 179, 180, 189, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "add_model": [89, 91], "states_sel": [89, 91, 92, 136, 138, 144, 147, 163, 165, 171, 174], "insert_model": [89, 92], "insert": [89, 92, 945, 946], "models_state_sel": 90, "can": [95, 209, 235, 390, 428, 678, 745, 799, 837, 950, 951, 952, 953, 959, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975], "overwritten": 95, "p_nomin": [95, 96, 321, 509, 961], "nomin": [95, 96, 497, 970], "power": [95, 96, 191, 269, 270, 317, 319, 324, 325, 330, 331, 336, 337, 495, 497, 502, 503, 509, 540, 542, 733, 952, 953, 956, 960, 961, 962, 966, 968, 969, 971, 973, 974, 975], "kw": [95, 96, 269, 270, 321, 509], "p_unit": [95, 96, 321, 961], "unit": [95, 96, 269, 270, 405, 406, 502, 509, 644, 645, 799, 837, 964], "w": [96, 136, 156, 157, 240, 317, 318, 320, 324, 325, 330, 331, 336, 551, 553, 555, 558, 561, 562, 567, 799, 837, 945, 946, 952, 957, 961, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "mw": [96, 120, 121, 964, 968, 970, 973, 974], "gw": [96, 962], "verticalprofil": [97, 98, 99, 100, 156, 157, 163, 165, 342, 345, 348, 351, 354, 357, 949, 952], "vertic": [97, 514, 517, 520, 521, 949, 952, 956, 961, 968, 975], "profil": [97, 98, 99, 100, 156, 157, 165, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 559, 563, 564, 568, 949, 952, 958, 961, 964, 968], "input_var": [97, 99, 264, 265, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 360], "need": [97, 99, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 360, 966, 968, 970, 971, 974], "profile_typ": [97, 100, 342, 345, 348, 351, 354, 357], "translat": [101, 711, 713, 714, 743, 753, 754, 882, 888, 889, 891, 901, 902, 907, 919, 920, 969, 975], "global": [101, 964], "also": [101, 488, 961, 962, 964, 966, 969, 970, 971, 973, 975], "respons": [101, 952, 969, 971], "order": [101, 103, 178, 189, 336, 361, 363, 368, 370, 373, 376, 380, 382, 678, 688, 952, 966, 970, 971, 972], "calc_ord": [101, 103, 361, 363, 368, 370, 373, 376, 380, 382], "get_wake_coo": [101, 105, 361, 366, 368, 372, 373, 378, 380, 385], "get_centreline_point": [101, 104, 361, 365, 368, 371, 373, 377, 380, 384], "along": [101, 102, 104, 253, 254, 361, 365, 368, 371, 373, 377, 380, 384, 952, 961, 969, 972, 975], "centrelin": [101, 102, 104, 361, 365, 368, 371, 373, 377, 380, 384, 459, 460, 961, 969], "calc_centreline_integr": [101, 102, 361, 368, 373, 380], "integr": [101, 102, 253, 254, 361, 368, 373, 380, 459, 460, 959, 961], "dx": [102, 459, 460, 967], "ipar": [102, 138, 298, 459, 460], "upper": [102, 787], "bound": [102, 128, 129, 621, 642, 644, 651, 757, 762, 767, 772, 778, 783, 787, 788, 794], "step": [102, 126, 127, 253, 254, 373, 374, 459, 460, 509, 542, 961, 965, 967, 968, 969, 974], "interpol": [102, 138, 264, 265, 298, 317, 319, 324, 330, 336, 337, 373, 374, 952, 961], "n_var": [102, 688], "wake_coo": [105, 107, 366, 372, 378, 385, 393], "init_wake_delta": [106, 109, 387, 390, 397, 400, 405, 410, 411, 416, 417, 421, 422, 427, 449, 453, 454, 458, 459, 463], "storag": [106, 109, 373, 374, 387, 390, 397, 400, 405, 410, 411, 416, 417, 421, 422, 427, 449, 453, 454, 458, 459, 463], "finalize_wake_delta": [106, 108, 387, 390, 395, 397, 400, 405, 411, 417, 422, 449, 454, 459], "amb_result": [106, 108, 111, 387, 390, 395, 397, 400, 405, 411, 417, 422, 449, 454, 459, 466, 470, 475, 479, 484], "fly": [107, 108, 109, 393, 395, 410, 416, 421, 427, 453, 458, 463], "ob": [107, 108, 393, 395], "appli": [107, 108, 109, 111, 112, 393, 395, 410, 416, 421, 427, 453, 458, 463, 466, 467, 470, 471, 475, 476, 479, 480, 484, 485, 502, 669, 676, 677, 711, 743, 745, 799, 837, 838, 840, 841, 848, 850, 851, 858, 860, 861, 868, 870, 871, 882, 891, 907, 952, 966, 975], "afterward": [108, 395], "wakesuperposit": [110, 111, 112, 189, 390, 464, 468, 473, 477, 482, 949, 952], "superposit": [110, 189, 387, 390, 391, 397, 400, 401, 405, 406, 411, 412, 417, 418, 422, 423, 449, 450, 454, 455, 459, 460, 473, 482, 949, 952, 961, 967, 969, 974], "note": [110, 525, 891, 952, 964, 965, 966, 968, 971, 972, 974, 975], "matter": [110, 970], "other": [110, 149, 535, 669, 707, 708, 711, 715, 716, 743, 882, 891, 903, 904, 907, 951, 956, 961, 963, 965, 967, 969, 970, 971, 975], "calc_wakes_plus_wak": [110, 112, 464, 467, 468, 471, 473, 476, 477, 480, 482, 485], "previou": [110, 112, 464, 467, 468, 471, 473, 476, 477, 480, 482, 485], "calc_final_wake_delta": [110, 111, 464, 466, 468, 470, 473, 475, 477, 479, 482, 484], "final_wake_delta": [111, 466, 470, 475, 479, 484], "simpl": [111, 466, 470, 475, 479, 484, 961, 965, 970, 972, 975], "plu": [111, 466, 470, 475, 479, 484, 923, 941], "sel_sp": [112, 467, 471, 476, 480, 485], "wake_model_result": [112, 467, 471, 476, 480, 485], "origin": [112, 467, 471, 476, 480, 485, 614, 691, 714, 717, 718, 754, 799, 837, 889, 902, 920, 962], "n_sel_sp": [112, 467, 471, 476, 480, 485], "wdelta": [112, 388, 389, 392, 399, 404, 452, 467, 471, 476, 480, 485], "boundari": [113, 114, 488, 574, 575, 579, 581, 583, 585, 589, 591, 593, 596, 598, 600, 603, 605, 607, 611, 613, 615, 619, 621, 622, 642, 643, 757, 758, 759, 760, 761, 838, 839, 842, 848, 849, 852, 858, 859, 862, 868, 869, 872, 953, 955, 964, 966], "util": [113, 118, 189, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 838, 839, 848, 849, 858, 859, 868, 869, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 961, 966, 973, 974], "geom2d": [113, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 838, 839, 848, 849, 858, 859, 868, 869, 941, 966], "areageometri": [113, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 598, 605, 613, 614, 621, 622, 838, 839, 848, 849, 858, 859, 868, 869, 941, 957], "wind_farm": [113, 114], "add_turbin": [113, 115, 122, 975], "turbine_nam": [113, 117, 526, 528], "staticdata": [118, 119, 950, 964], "static": [118, 318, 320, 324, 325, 330, 331, 336, 337, 543, 545, 546, 581, 582, 950, 957, 961, 962, 965, 966, 968, 971, 972, 973, 974], "directori": [118, 950], "add_data_packag": [118, 543, 545], "context": [118, 543, 545, 546, 547, 548, 549, 550, 966], "packag": [118, 543, 545, 546, 948, 950, 951, 952, 953, 957, 959, 961, 962, 963, 964, 966, 967, 969, 972, 975], "file_sfx": [118, 543, 545], "locat": [118, 247, 543, 545, 546, 945, 946, 963, 964, 971, 975], "add_data_package_fil": [118, 543, 546], "file_nam": [118, 120, 529, 534, 538, 543, 546, 549, 950], "add_fil": [118, 543, 547, 548], "file_path": [118, 124, 125, 486, 491, 492, 493, 494, 495, 514, 522, 525, 526, 528, 529, 535, 538, 540, 543, 547, 548, 551, 556, 557, 951], "path": [118, 120, 121, 124, 125, 136, 138, 163, 165, 177, 191, 281, 282, 297, 298, 318, 320, 324, 325, 330, 331, 336, 337, 525, 528, 534, 543, 547, 548, 549, 556, 557, 598, 922, 923, 940, 957, 962, 973], "get_file_path": [118, 543, 549, 964], "check_raw": [118, 543, 549], "toc": [118, 543, 550, 964], "content": [118, 189, 193, 543, 550, 973], "data_book": [119, 543, 544], "parse_pct_file_nam": [120, 950], "pars": [120, 121, 128, 129, 669, 704, 711, 743, 882, 891, 907, 950], "format": [120, 121, 128, 129, 136, 490, 525, 551, 557, 951, 964, 965], "csv": [120, 121, 122, 123, 136, 486, 491, 526, 528, 551, 552, 554, 555, 940, 951, 957, 961, 966, 968, 971, 972, 973, 974], "pathlib": [120, 121, 543, 549, 964], "parsed_data": [120, 121], "parse_pct_two_fil": [121, 950], "file_name_a": [121, 950], "file_name_b": [121, 950], "second": 121, "farm_layout": [122, 123, 124, 125, 126, 127, 964, 965, 966, 968, 970, 971, 972, 973, 974], "add_from_csv": [122, 123, 951], "data_sourc": [122, 123, 128, 129, 136, 138, 147, 163, 165, 174, 235, 236, 264, 265, 281, 282, 297, 298, 317, 318, 324, 325, 951, 964, 965, 966, 968, 970, 971, 973, 974, 975], "col_index": 122, "col_nam": 122, "col_x": 122, "col_i": 122, "col_h": 122, "col_d": 122, "col_id": 122, "cols_models_pr": 122, "cols_models_post": 122, "turbine_base_nam": 122, "t": [122, 302, 303, 513, 551, 553, 799, 837], "turbine_id": 122, "turbine_base_name_count_shift": 122, "turbine_paramet": [122, 125, 126, 127], "panda": [122, 123, 136, 138, 144, 163, 165, 171, 176, 235, 236, 264, 265, 281, 282, 297, 298, 317, 318, 319, 320, 324, 325, 330, 331, 336, 337, 486, 495, 502, 504, 506, 507, 508, 509, 511, 512, 514, 522, 525, 526, 527, 529, 531, 535, 538, 540, 551, 556, 557, 951, 952, 957, 961, 970, 971, 972, 973, 975], "datafram": [122, 123, 136, 138, 163, 165, 176, 235, 236, 264, 265, 281, 282, 297, 298, 317, 318, 319, 320, 324, 325, 330, 331, 336, 337, 502, 504, 506, 507, 508, 509, 511, 512, 525, 526, 527, 529, 531, 538, 556, 557, 951, 952, 961, 970, 971, 972, 973, 975], "column": [122, 136, 138, 163, 165, 176, 235, 236, 264, 265, 282, 297, 298, 318, 320, 324, 325, 330, 331, 336, 525, 528, 551, 557, 572, 799, 837, 923, 964, 968, 970, 971, 973], "enter": 122, "instead": [122, 128, 129, 136, 138, 163, 165, 405, 406, 417, 528, 669, 678, 711, 743, 799, 837, 838, 848, 858, 868, 882, 891, 907, 961, 963, 968, 974, 975], "forward": [122, 124, 125, 126, 127, 182, 488, 493, 516, 517, 518, 519, 520, 521, 525, 556, 557], "add_from_df": [123, 951, 961], "add_from_fil": [124, 951, 964, 973], "method": [124, 265, 482, 483, 556, 557], "infer": [124, 125, 972], "suffix": [124, 128, 129], "add_from_json": [125, 951], "set_farm_nam": 125, "turbim": [125, 951], "json": [125, 490, 951], "add_grid": [126, 951, 965, 974], "xy_bas": [126, 127, 951, 965, 966, 968, 970, 971, 972, 974], "step_vector": [126, 951, 965, 974], "regular": [126, 128, 253, 858, 868, 891, 907, 951, 952, 954, 955, 961, 974], "grid": [126, 128, 209, 217, 253, 773, 801, 807, 848, 849, 858, 868, 869, 891, 892, 907, 951, 952, 954, 955, 961, 965, 974], "vector": [126, 127, 516, 517, 518, 605, 606, 678, 688, 717, 799, 837, 944, 945, 946, 947, 953, 957, 962, 966, 973, 974], "length": [126, 176, 194, 195, 373, 374, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 717, 953, 961, 964], "add_row": [127, 951, 966, 968, 970, 971, 972], "xy_step": [127, 951, 966, 968, 970, 971, 972], "row": [127, 297, 298, 799, 837, 868, 869, 891, 892, 951, 960, 962, 968, 970, 973], "fielddatanc": [128, 129, 130, 131, 132, 133, 134, 135, 951, 961, 965], "heterogen": [128, 951, 960, 962, 968], "horizont": [128, 514, 516, 519, 951, 956, 961, 964, 965, 968, 972], "netcdf": [128, 951, 965], "pattern": [128, 129, 961, 970], "end": [128, 129, 513, 545, 551, 556, 557], "nc": [128, 129, 551, 552, 554, 555, 961, 965], "One": [128, 129, 965], "mani": [128, 129, 961, 962], "ovar": [128, 136, 163, 235, 297], "var2ncvar": [128, 129, 965], "map": [128, 129, 136, 138, 163, 165, 176, 194, 195, 196, 197, 198, 199, 200, 235, 236, 264, 265, 282, 525, 535, 537, 636, 637, 672, 673, 952, 956, 961, 967, 968, 971], "fixed_var": [128, 129, 136, 138, 163, 165, 174, 964, 965, 966, 968, 970, 971, 973, 974, 975], "uniform": [128, 129, 136, 138, 156, 163, 165, 235, 236, 313, 357, 743, 745, 951, 952, 961, 964, 972, 973, 975], "read": [128, 129, 136, 138, 163, 165, 177, 236, 265, 282, 298, 318, 320, 324, 325, 330, 331, 336, 337, 551, 556, 922, 923, 940, 941, 951, 957, 961, 965, 973], "states_coord": [128, 129, 965], "x_coord": [128, 129, 965], "y_coord": [128, 129, 965], "h_coord": [128, 129, 965], "pre_load": [128, 129, 965], "weight_ncvar": [128, 129], "bounds_error": [128, 129, 965], "rais": [128, 129, 549], "exceed": [128, 129, 176], "fill_valu": [128, 129], "time_format": [128, 129, 965], "datetim": [128, 129], "string": [128, 129, 193, 523, 525, 531, 533, 534, 621, 623, 642, 644, 651, 662, 669, 711, 724, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 799, 800, 807, 813, 819, 825, 831, 834, 837, 838, 848, 858, 868, 882, 891, 907], "sel": [128, 129, 743, 745], "xr": [128, 129], "utmx": [129, 965], "utmi": [129, 965], "m": [129, 136, 336, 373, 374, 516, 517, 518, 519, 520, 521, 644, 645, 799, 837, 963, 964, 965, 968, 972, 973, 974], "d_": 129, "multiheightst": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 951, 961], "multipl": [136, 387, 951, 952, 961, 962, 971], "taken": [136, 972], "follow": [136, 373, 411, 799, 837, 952, 960, 961, 964, 965, 966, 968, 969, 970, 971, 973, 974, 975], "exampl": [136, 542, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975], "50": [136, 176, 964, 966, 967, 968, 971, 974], "60": [136, 966], "100": [136, 274, 373, 374, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "var2col": [136, 138, 163, 165, 174, 176, 235, 236, 964, 966, 968, 971, 973, 974], "fix": [136, 138, 149, 163, 165, 762, 819, 848, 951, 955, 961], "pd_read_par": [136, 138, 165, 236], "slice": [136, 138, 144, 163, 165, 171, 209, 952, 972], "rang": [136, 138, 144, 163, 165, 171, 281, 282, 952, 961, 970, 971, 975], "states_loc": [136, 138, 144, 147, 163, 165, 171, 174, 968], "loc": [136, 138, 144, 163, 165, 171, 970, 971], "rdict": [136, 137, 147, 148, 163, 164, 174, 175], "index_col": [136, 137, 147, 148, 163, 164, 174, 175], "scipi": [138, 298, 336, 337, 799, 837], "interp1d": 138, "multiheighttimeseri": [147, 148, 951, 961, 964, 968], "multi": [147, 390, 951, 960, 961, 962], "timeseri": [147, 174, 175, 509, 951, 960, 962, 968], "parse_d": [147, 148, 174, 175], "scanw": [149, 150, 151, 152, 153, 154, 155, 951], "wd": [149, 150, 156, 157, 282, 368, 369, 551, 553, 944, 945, 946, 947, 957, 961, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "ti": [149, 150, 156, 157, 240, 312, 313, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 459, 460, 482, 542, 551, 553, 741, 952, 953, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975], "rho": [149, 150, 156, 157, 317, 318, 320, 324, 325, 330, 331, 542, 551, 553, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "ws_list": [149, 150], "singlestatest": [156, 157, 158, 159, 160, 161, 162, 951, 961, 972], "profdict": [156, 163], "profdata": [156, 157], "statest": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 951, 964, 966, 970, 971, 974, 975], "readabl": [163, 951, 971, 973], "rpar": [163, 324], "create_random_abl_st": [176, 951], "cols_minmax": 176, "mol_abs_rang": 176, "5000": [176, 966, 970, 973], "normal": [176, 243, 244, 368, 488, 799, 837, 952, 964, 970, 974], "random": [176, 951, 964], "abl": [176, 342, 345, 348, 351, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 951, 952, 961], "min": [176, 282, 488, 510, 511, 512, 516, 517, 518, 519, 520, 521, 724, 725, 734, 742, 743, 745, 787, 813, 814, 955, 961, 971], "max": [176, 282, 482, 483, 488, 510, 511, 512, 516, 517, 518, 519, 520, 521, 724, 725, 734, 742, 743, 745, 787, 813, 814, 955, 961, 967, 971], "mol": [176, 351, 565, 566, 569, 570, 958, 964], "neutral": [176, 342, 351, 558, 559, 560, 952, 957], "stratif": 176, "windio": [177, 961], "read_cas": [177, 951], "case_yaml": [177, 951], "site_par": [177, 951], "farm_par": 177, "ana_par": 177, "yaml": [177, 951, 961], "read_sit": 177, "read_farm": 177, "read_analys": 177, "farm_control": [178, 189, 967], "basicfarmcontrol": [178, 952, 967], "control": [178, 189, 952], "condit": [178, 281, 621, 622, 942, 952, 961, 966, 969, 971, 972, 975], "farm_model": [179, 180, 181, 182, 183, 184, 185, 189, 967], "turbine2farmmodel": [179, 180, 181, 182, 183, 184, 185, 952, 967], "wrapper": [179, 952], "promot": [179, 952], "simpli": [179, 243, 952, 963, 964, 967, 971, 974], "init": [182, 545, 546, 712, 743, 745, 748, 885, 896, 916], "slightli": [186, 957, 971], "enhanc": [186, 957], "pass": [188, 799, 837, 974], "kind": [189, 950, 965, 975], "rotor_model": [189, 201, 202, 209, 210, 218, 220, 221, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 965, 966, 967, 968, 970, 971, 973, 974, 975], "turbine_ord": 189, "turbineord": 189, "partial_wak": [189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 967], "partialwakemodel": 189, "wake_superposit": [189, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 967], "pct_file": [189, 191], "print_toc": [189, 193, 967], "ct": [191, 269, 302, 303, 317, 319, 320, 324, 325, 330, 331, 336, 337, 381, 401, 402, 403, 405, 406, 408, 409, 411, 412, 414, 415, 417, 418, 422, 423, 425, 426, 428, 443, 450, 454, 455, 459, 460, 540, 542, 551, 553, 952, 956, 961, 964, 970, 972, 975], "curv": [191, 317, 318, 320, 324, 330, 331, 336, 337, 540, 542, 952, 956, 961, 962, 970], "creation": [191, 529, 538, 948, 956, 974], "more": [194, 799, 837, 961, 971, 973], "than": [194, 473, 973], "differ": [194, 209, 217, 952, 959, 961, 964, 965, 971], "invok": [194, 269, 361, 952, 961, 962, 963, 966, 973, 974, 975], "wname2pwak": [194, 195], "wtype2pwak": [194, 195], "ones": [195, 202, 210, 218, 221, 229, 572], "partialaxiwak": [201, 202, 203, 204, 205, 206, 207, 208, 387, 952, 967], "axial": [201, 952], "idea": [201, 473, 970], "onc": [201, 965, 966, 972, 975], "radial": [201, 202, 388, 399, 403, 404, 409, 415, 426], "n": [201, 202, 209, 210, 217, 218, 253, 254, 516, 517, 518, 605, 606, 634, 635, 702, 703, 762, 763, 767, 768, 778, 779, 799, 819, 820, 837, 952, 964, 967, 972, 973, 975], "radii": [201, 402, 403, 408, 409, 414, 415, 425, 426, 942, 957], "cover": 201, "target": [201, 971], "disc": [201, 220, 621, 622, 969], "overlap": [201, 220, 253, 254], "circl": [201, 220, 591, 592, 593, 594, 595, 596, 597, 838, 839, 842, 848, 849, 852, 858, 859, 862, 868, 869, 872, 942, 943, 957, 966], "area": [201, 253, 254, 575, 581, 583, 585, 591, 593, 600, 607, 615, 621, 622, 923, 942, 943, 953, 957, 961, 966], "partialdistslicedwak": [209, 210, 211, 212, 213, 214, 215, 216, 217, 390, 952, 967], "distanc": [209, 405, 406, 574, 575, 579, 581, 583, 585, 589, 591, 593, 596, 598, 600, 603, 605, 607, 611, 613, 615, 619, 644, 645, 788, 789, 799, 801, 813, 814, 837, 838, 839, 848, 849, 858, 859, 868, 869, 892, 942, 943, 952, 953, 955, 957, 966, 975], "make": [209, 939, 942, 952, 953, 963, 966, 973], "structur": [209, 336, 952, 961, 968, 973], "optin": [209, 923], "done": [209, 632], "grotor": 209, "gridrotor": [209, 210, 218, 253, 254, 255, 256, 257, 258, 259, 952, 967], "partialgrid": [217, 218, 219, 952, 967], "mai": [217, 269, 952, 965, 975], "partialtophat": [220, 221, 222, 223, 224, 225, 226, 227, 952, 967], "hat": [220, 400, 952, 959, 975], "get_wake_point": [220, 225, 228, 232], "rotorpoint": [228, 229, 230, 231, 232, 233, 234, 952, 967], "directli": [228, 538, 543, 669, 678, 711, 743, 838, 848, 858, 868, 882, 891, 907, 950, 952, 956, 957, 959, 971], "setuniformdata": [235, 236, 237, 238, 239, 952, 961], "both": [235, 236, 397, 398, 417, 420, 454, 457, 459, 462, 891, 970, 973, 974], "assum": [235, 236, 942], "Or": [235, 236], "independ": [235, 236, 968], "written": [235, 236, 528, 962], "tke2ti": [240, 241, 242, 952, 961, 967], "tke": [240, 952, 961, 964, 968, 969], "sqrt": [240, 799, 837, 952], "wakedelta": [243, 244, 245, 246, 952], "subtract": [243, 952, 966], "divid": [243, 244, 516, 517, 518, 519, 520, 521], "centrerotor": [247, 248, 249, 250, 251, 252, 952, 967], "compos": [253, 952], "maxim": [253, 254, 269, 373, 374, 381, 401, 406, 412, 417, 418, 423, 428, 443, 450, 454, 455, 459, 460, 542, 574, 577, 581, 583, 587, 591, 594, 598, 601, 605, 609, 613, 617, 662, 669, 692, 693, 694, 695, 711, 724, 725, 730, 733, 734, 735, 739, 741, 742, 743, 749, 750, 767, 768, 800, 805, 807, 811, 813, 817, 819, 823, 825, 829, 831, 833, 834, 836, 838, 845, 848, 855, 858, 859, 865, 868, 869, 876, 877, 882, 886, 891, 892, 897, 898, 907, 917, 952, 953, 955, 961, 966, 970], "possibli": [253, 952], "kick": [253, 952], "out": [253, 799, 837, 952, 971, 975], "outsid": [253, 952, 965], "reduc": [253, 254, 495, 510, 511, 512, 961], "reduct": [253, 254], "actual": [253, 254, 669, 678, 711, 743, 838, 848, 858, 868, 882, 891, 907, 961, 963, 968, 970, 972], "repres": [253, 254, 297, 336, 489, 591, 598, 605, 952, 957, 964, 974, 975], "circ": [253, 254], "recalcul": [253, 254], "accordingli": [253, 254], "nint": [253, 254], "element": [253, 254, 799, 837], "200": [253, 254, 964, 966, 968, 970, 975], "in_var": [260, 261], "vairabl": [260, 261], "func": [260, 261, 669, 678, 688, 711, 743, 838, 848, 858, 868, 882, 891, 907, 924, 930, 931, 932, 933, 938], "f": [260, 261, 572, 799, 837, 968, 970, 973, 974, 975], "in0": [260, 261], "in1": [260, 261], "stsel": [260, 261], "out0": [260, 261], "ou1": [260, 261], "where": [260, 261, 489, 799, 837, 945, 946, 966, 968, 969, 971, 975], "inx": [260, 261], "outi": [260, 261], "lookupt": [264, 265, 266, 267, 268, 952, 961], "lookup": [264, 265, 269, 270, 302, 303, 324, 325, 330, 331, 336, 337, 509, 952, 961], "tabl": [264, 265, 297, 952, 961, 970, 971], "varmap": [264, 265, 621, 636, 637, 642, 644, 651, 662, 724, 733, 735, 741, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834], "pd_file_read_par": [265, 282, 298, 318, 325], "xr_interp_arg": 265, "powermask": [269, 270, 271, 272, 273, 274, 952, 961, 967, 970], "derat": [269, 540, 956, 961, 970, 971], "below": [269, 517, 518, 520, 521, 961, 963], "rate": 269, "higher": [269, 464, 465, 473, 474, 961], "boost": [269, 540, 956, 961, 970, 971], "introduc": [269, 959, 961], "p": [269, 324, 325, 331, 337, 525, 542, 551, 553, 799, 837, 961, 962, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "so": [269, 572, 961, 969, 970, 972], "wise": [269, 297, 298, 799, 837], "var_ws_p": [269, 270, 325, 331, 337], "factor_p": [269, 270, 274], "factor": [269, 270, 297, 298, 405, 406, 417, 418, 454, 455, 459, 460, 559, 563, 564, 568, 724, 725, 734, 742, 773, 801, 952, 958, 961, 975], "rews3": [269, 270, 274, 325, 331, 337, 551, 553], "update_p_ct": [269, 274], "max_p": [269, 274, 970, 971], "rated_p": [269, 274], "var_w": 274, "p_lim": 274, "rotorcentrecalc": [275, 276, 277, 278, 279, 280, 952, 961, 967], "sectormanag": [281, 282, 283, 284, 285, 952, 961, 971], "chang": [281, 282, 952, 961, 962, 963, 964, 968], "range_var": [281, 282, 971], "target_var": [281, 282, 971], "col_tind": 282, "col_tnam": [282, 971], "colmap": [282, 971], "var_period": 282, "amb_wd": [282, 529, 531, 533, 534, 538, 551, 553, 972], "360": 282, "within": [282, 543, 838, 839, 848, 849, 858, 859, 868, 869, 942, 953, 955, 957, 963, 966, 969], "exist": [282, 428, 447, 549, 787, 969, 972, 975], "period": 282, "setfarmvar": [286, 287, 288, 289, 290, 291, 292, 952, 961, 970, 975], "add_var": [286, 288, 743, 745, 970, 975], "remov": [286, 292, 963, 970], "setxyhd": [293, 294, 295, 296, 952], "set_xi": [293, 294], "set_h": [293, 294], "set_d": [293, 294], "tablefactor": [297, 298, 299, 300, 301, 952, 961], "multipli": [297, 298, 405, 406, 417, 418, 454, 455, 459, 460, 952, 961], "dimension": [297, 799, 837, 952, 961], "col_var": [297, 298], "row_var": [297, 298], "onto": [297, 298], "interpn": [298, 336, 337], "thrust2ct": [302, 303, 304, 305, 952, 961, 967], "thrust": [302, 303, 952, 961, 962, 969, 970, 975], "forc": [302, 952, 963], "thrust_var": [302, 303], "wsct": [302, 324, 330, 336], "var_ws_ct": [302, 303, 325, 331, 337], "rews2": [302, 303, 325, 331, 337, 551, 553], "yaw2yawm": [306, 307, 308, 952, 961, 967, 975], "yaw": [306, 309, 325, 331, 337, 380, 449, 952, 960, 961, 962, 967], "yawm": [306, 309, 380, 444, 449, 952, 975], "absolut": [306, 309, 952, 961, 975], "yawm2yaw": [309, 310, 311, 952, 961, 967, 975], "kti": [312, 313, 314, 315, 316, 952, 961, 967, 973], "k": [312, 313, 380, 381, 405, 406, 411, 412, 417, 418, 422, 423, 428, 444, 449, 450, 952, 961, 967, 973, 974], "linear": [312, 464, 482, 483, 952, 967, 974], "ti_var": [312, 313, 459, 460], "k_var": [312, 313, 380, 381, 405, 406, 411, 412, 417, 418, 422, 423, 449, 450], "kb": [312, 313, 961], "ti_val": [312, 313], "cpctfile": [317, 318, 952, 961], "pctfile": [317, 318, 320, 324, 325, 326, 327, 328, 329, 952, 964, 967, 971, 972, 973], "cp": [317, 318, 319, 320, 952, 961], "col_w": [317, 318, 324, 325, 330], "col_cp": [317, 318, 320], "225": [317, 318, 320, 336, 542, 964, 965, 966, 970, 971, 972, 973, 974, 975], "paramer": 318, "cpctfromtwo": [319, 320, 952, 961], "pctfromtwo": [319, 330, 331, 332, 333, 334, 335, 952], "data_source_cp": [319, 320], "data_source_ct": [319, 320, 330, 331, 336, 337], "col_ws_cp_fil": 320, "pd_file_read_pars_cp": 320, "pd_file_read_pars_ct": [320, 331, 337], "nulltyp": [321, 322, 323, 952, 961, 967], "doe": [321, 838, 848, 858, 868, 952, 968, 970], "col_p": [324, 325, 330, 331], "col_ct": [324, 325, 330, 331], "densitii": [324, 325, 330, 331], "valid": [324, 325, 330, 331, 417, 735, 736, 794, 795, 796, 797, 798, 838, 839, 842, 848, 852, 858, 862, 868, 872, 955, 962, 973], "correct": [324, 325, 330, 331, 361, 405, 406, 411, 473, 952, 961, 969, 970, 972], "wsp": [324, 330, 336], "p_ct": [325, 331, 336, 337], "p_p": [325, 331, 337, 975], "88": [325, 331, 337, 964, 966, 973, 975], "expon": [325, 331, 337, 354, 561, 952, 961, 975], "source_p": [330, 336], "source_ct": [330, 336], "rpars_p": [330, 336], "rpars_ct": [330, 336], "data_source_p": [330, 331, 336, 337], "col_ws_p_fil": [330, 331], "col_ws_ct_fil": 331, "pd_file_read_pars_p": [331, 337], "wsrho2pctfromtwo": [336, 337, 338, 339, 340, 341, 952], "950": [336, 966], "975": 336, "275": 336, "subsequ": [336, 969], "neccessarili": [336, 952, 973], "ipars_p": 336, "ipars_ct": 336, "interpn_pars_p": 337, "interpn_pars_ct": 337, "vertical_profil": [342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360], "abllogneutralwsprofil": [342, 343, 344, 952], "log": [342, 345, 348, 351, 559, 563, 564, 568, 952, 958], "abllogstablewsprofil": [345, 346, 347, 952], "stabl": [345, 351, 562, 563, 564, 565, 566, 952, 957, 963], "abllogunstablewsprofil": [348, 349, 350, 952], "unstabl": [348, 351, 567, 568, 569, 570, 952, 957], "abllogwsprofil": [351, 352, 353, 952, 964], "pick": 351, "shearedprofil": [354, 355, 356, 952, 961], "shear": [354, 561, 952, 957, 961], "uniformprofil": [357, 358, 359, 360, 952], "farmord": [361, 362, 363, 364, 365, 366, 367, 952, 967], "warn": 361, "test": [361, 574, 580, 581, 583, 590, 591, 597, 598, 604, 605, 612, 613, 620, 961, 964], "purpos": [361, 964, 966, 972], "gener": [361, 459, 514, 516, 517, 518, 519, 520, 521, 630, 687, 954, 959, 961, 964, 966], "give": [361, 973], "when": [361, 961, 964, 965, 966, 970, 973], "iter": [361, 961], "base_fram": [361, 362, 380, 381], "rotorwd1": [361, 362], "rotorwd": [361, 362, 368, 369, 370, 371, 372, 381, 952, 967], "align": [368, 952], "axi": [368, 488, 516, 517, 518, 519, 520, 521, 532, 535, 537, 542, 575, 585, 593, 600, 607, 615, 653, 664, 674, 799, 837, 838, 842, 848, 852, 858, 862, 868, 872, 944, 945, 946, 947, 952, 956, 957, 972, 975], "local": [368, 405, 406, 952, 962, 963, 964, 966, 969, 973], "var_wd": [368, 369], "streamlin": [373, 374, 375, 376, 377, 378, 379, 459, 952, 959, 961, 965, 967, 969], "n_delstor": [373, 374], "increas": [373, 374, 959], "max_length": [373, 374], "cl_ipar": [373, 374], "line": [373, 374, 400, 402, 405, 408, 411, 414, 422, 425, 575, 585, 593, 600, 607, 615, 961, 963, 972], "100000": [373, 374, 970], "yawedwak": [380, 381, 382, 383, 384, 385, 386, 952, 961, 967], "bend": [380, 952, 961, 975], "bastankhah": [380, 417, 428, 449, 959, 961, 975], "port": [380, 428, 449, 975], "agel": [380, 428, 449, 975], "2016": [380, 428, 449, 961], "http": [380, 405, 411, 417, 428, 449, 454, 459, 473, 572, 939, 942, 961, 962, 963, 973], "doi": [380, 405, 417, 428, 449], "org": [380, 405, 417, 428, 449, 454, 459, 473], "10": [380, 405, 417, 428, 449, 454, 459, 961, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "1017": [380, 428, 449], "jfm": [380, 428, 449], "595": [380, 428, 449], "porteagelmodel": [380, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 959], "growth": [380, 381, 405, 406, 411, 412, 417, 418, 422, 423, 449, 450, 454, 455, 459, 460, 961, 974], "here": [380, 381, 405, 406, 417, 418, 422, 423, 449, 450, 950, 951, 953, 961, 962, 964, 966, 968, 970, 971, 972, 973, 974, 975], "misalign": [380, 449, 975], "ct_max": [380, 381, 400, 401, 406, 411, 412, 417, 418, 422, 423, 428, 443, 449, 450, 454, 455, 459, 460], "9999": [380, 381, 400, 401, 406, 411, 412, 418, 422, 423, 428, 443, 449, 450, 455, 460], "alpha": [380, 381, 428, 443, 449, 450, 966], "58": [380, 381, 428, 443, 449, 450, 964, 966], "beta": [380, 381, 428, 443, 450], "07": [380, 381, 428, 443, 450, 965, 967, 974], "beyond": [381, 401, 406, 412, 417, 418, 423, 428, 443, 450, 454, 455, 459, 460], "limit": [381, 401, 406, 412, 417, 418, 423, 428, 443, 450, 454, 455, 459, 460, 464, 465, 473, 474, 961], "determin": [381, 428, 443, 450, 509, 961, 969], "onset": [381, 428, 443, 450], "far": [381, 428, 443, 450, 961], "region": [381, 428, 443, 450], "axisymmetricwakemodel": [387, 388, 389, 397, 400, 959], "distslicedwakemodel": [387, 390, 391, 392, 393, 394, 395, 396, 449, 959], "r": [387, 388, 397, 398, 399, 400, 403, 404, 405, 409, 411, 415, 417, 420, 422, 426, 454, 457, 459, 462, 959], "separ": [387, 390, 959, 961, 969], "abil": [387, 390], "calc_wakes_spsel_x_r": [387, 388, 397, 399, 400, 404, 405, 411, 417, 422, 454, 459], "calc_wakes_spsel_x_yz": [387, 389, 390, 392, 397, 400, 405, 411, 417, 422, 449, 452, 454, 459], "n_r_per_x": [388, 399, 403, 404, 409, 415, 426], "n_sp_sel": [388, 389, 392, 398, 399, 402, 404, 408, 414, 420, 425, 452, 457, 462], "sp_sel": [388, 389, 392, 398, 399, 402, 404, 408, 414, 420, 425, 428, 441, 452, 457, 462], "non": [388, 389, 392, 398, 399, 402, 404, 408, 414, 420, 425, 452, 457, 462, 714, 754, 787, 799, 837, 889, 902, 920, 962, 963], "yz": [389, 390, 392, 452, 514, 521, 959, 961], "n_yz_per_x": [389, 392, 452], "denpend": [390, 959], "look": [390, 391, 401, 406, 412, 418, 423, 450, 455, 460, 509, 964, 966, 969, 971, 974], "up": [390, 391, 401, 406, 412, 418, 423, 450, 455, 460, 509], "superp": 390, "gaussianwakemodel": [397, 398, 399, 417, 454, 459, 959], "gaussian": [397, 959], "calc_amplitude_sigma_spsel": [397, 398, 417, 420, 454, 457, 459, 462], "amplitud": [397, 398, 417, 420, 454, 457, 459, 462], "sigma": [397, 398, 417, 420, 454, 457, 459, 462, 961], "amsi": [398, 420, 457, 462], "tophatwakemodel": [400, 401, 402, 403, 404, 405, 411, 422, 959], "calc_wake_radiu": [400, 403, 405, 409, 411, 415, 422, 426], "calc_centreline_wake_delta": [400, 402, 405, 408, 411, 414, 422, 425], "wake_r": [402, 403, 408, 409, 414, 415, 425, 426], "cl_del": [402, 408, 414, 425], "varlu": [402, 408, 414, 425], "crespohernandeztiwak": [405, 406, 407, 408, 409, 410, 959, 961, 967], "crespo": [405, 959], "hernandez": [405, 959], "empir": [405, 959], "correl": [405, 799, 837, 959], "1016": [405, 417], "0167": 405, "6105": 405, "95": [405, 964, 966, 974], "00033": 405, "we": [405, 799, 837, 961, 962, 963, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "eqn": 405, "17": [405, 964, 966, 970, 974], "15": [405, 964, 965, 966, 968, 970, 971, 973, 974], "4": [405, 799, 837, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "5": [405, 455, 799, 837, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "1088": [405, 454, 459], "1742": [405, 454, 459], "6596": [405, 454, 459], "625": 405, "012039": 405, "a_near": [405, 406], "a_far": [405, 406], "e1": [405, 406], "e2": [405, 406], "e3": [405, 406], "use_ambti": [405, 406], "sbeta_factor": [405, 406, 417, 418, 454, 455, 459, 460], "sbeta": [405, 406, 417, 418, 454, 455, 459, 460], "near_wake_d": [405, 406], "25": [406, 417, 418, 454, 455, 459, 460, 964, 966, 968, 970, 972, 973], "362": 406, "73": [406, 966], "83": [406, 799, 837, 966], "0325": 406, "32": [406, 966], "iectiwak": [411, 412, 413, 414, 415, 416, 959, 967], "iec": [411, 959], "64100": [411, 959], "2005": [411, 959], "8": [411, 455, 473, 486, 488, 493, 959, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "orbit": 411, "dtu": 411, "dk": 411, "3750291": 411, "2009_31": 411, "pdf": [411, 454, 459, 473], "v2": 411, "volluk": 411, "implement": [411, 966, 969], "document": [411, 799, 837, 953, 961], "frandsen": [411, 454, 455, 961], "2019": [411, 412], "opening_angl": [411, 412], "open": [411, 412, 961], "angl": [411, 412, 444, 907, 908, 965, 975], "21": [411, 412, 964, 966, 970], "6": [411, 412, 799, 837, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "iec_typ": 412, "bastankhahwak": [417, 418, 419, 420, 421, 959, 967], "j": [417, 799, 837], "renen": 417, "2014": 417, "01": [417, 964, 966, 967, 968, 973, 974], "002": 417, "modif": 417, "constant": [417, 558, 560, 562, 566, 567, 570, 961, 965, 968, 970, 971, 973, 974, 975], "fit": 417, "better": 417, "jensenwak": [422, 423, 424, 425, 426, 427, 959, 967], "jensen": [422, 799, 837, 959, 967], "repetit": [428, 959], "avoid": [428, 799, 837, 959, 975], "mdata_kei": [428, 434], "check": [428, 431, 447, 549, 621, 642, 644, 651, 669, 679, 680, 711, 735, 736, 743, 757, 762, 767, 772, 778, 783, 785, 786, 788, 794, 838, 848, 858, 868, 882, 891, 907, 942, 966, 973], "x0": [428, 442], "NEAR": [428, 435], "r_pc": [428, 437], "r_pc_": [428, 438], "ampl_near": [428, 430], "delta_near": [428, 433], "ampl_far": [428, 429], "sigma_y_far": [428, 439], "sigma_z_far": [428, 440], "delta_far": [428, 432], "calc_data": [428, 444], "gamma": [428, 444, 975], "has_data": [428, 447], "clean": [428, 445], "radiant": [444, 975], "porteagelwak": [449, 450, 451, 452, 453, 959, 967], "porteagel": [449, 959, 961], "turboparkwak": [454, 455, 456, 457, 458, 959, 961, 967], "turbopark": [454, 459, 959, 961], "iopscienc": [454, 459], "iop": [454, 459], "articl": [454, 459], "2265": [454, 459], "022063": [454, 459], "c1": [454, 455, 813, 814], "c2": [454, 455, 813, 814], "turboparkwakeix": [459, 460, 461, 462, 463, 959, 967], "over": [459, 495, 500, 501, 531, 533, 534, 572, 799, 837, 959, 961, 966, 974], "linearsuperposit": [464, 465, 466, 467, 952, 961, 967], "supersposit": [464, 468, 477, 952], "rescal": [464, 468, 473, 477, 952], "scale": [464, 465, 468, 469, 477, 478, 724, 725, 734, 742, 813, 814, 965], "rule": [464, 465, 468, 469, 477, 478, 724, 725, 734, 742, 961, 971, 975], "lim_low": [464, 465, 473, 474], "lower": [464, 465, 473, 474, 787, 961], "lim_high": [464, 465, 473, 474], "source_turbin": [465, 469, 478], "source_turbine_amb": [465, 469, 478], "source_turbine_": [465, 469, 478], "maxsuperposit": [468, 469, 470, 471, 472, 952, 967], "maximum": [468, 516, 517, 518, 519, 520, 521, 799, 837, 952, 961, 974], "productsuperposit": [473, 474, 475, 476, 952, 961, 967], "product": [473, 799, 837, 952, 967], "dimensionless": 473, "deficit": [473, 959, 969, 973, 974, 975], "field": [473, 495, 513, 965, 969, 972, 974, 975], "rather": 473, "equival": [473, 969, 973, 975], "arxiv": 473, "2010": 473, "03873": 473, "equat": [473, 961], "quadraticsuperposit": [477, 478, 479, 480, 481, 952, 967], "quadrat": [477, 482, 483, 952, 967], "tisuperposit": [482, 483, 484, 485, 952, 967], "ti_superp": [482, 483], "superp_to_amb": [482, 483], "combin": [482, 483, 975], "farmlayoutoutput": [486, 487, 488, 489, 490, 491, 492, 493, 494, 956, 961, 964, 966, 968, 971, 973, 974], "plot": [486, 488, 491, 492, 493, 494, 514, 516, 517, 518, 519, 520, 521, 529, 533, 534, 535, 537, 538, 540, 542, 575, 585, 593, 600, 607, 615, 842, 852, 862, 872, 939, 956, 961, 965, 966, 970, 971, 972, 973, 974, 975], "layout": [486, 488, 489, 490, 491, 492, 493, 494, 533, 534, 621, 642, 644, 651, 653, 662, 664, 669, 674, 711, 724, 733, 735, 741, 743, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 953, 956, 960, 961, 962, 973], "fre": 486, "from_r": [486, 487], "results_st": [486, 487], "farm_result": [486, 487, 495, 496, 514, 515, 526, 527, 535, 536, 965, 968, 970, 971, 972, 973, 974, 975], "from_result": [486, 487], "get_layout_data": [486, 489], "get_layout_dict": [486, 490], "get_figur": [486, 488, 493, 529, 533, 538, 964, 966, 968, 971, 973, 974], "color_bi": [486, 488, 968, 973, 974], "fontsiz": [486, 488, 493], "figsiz": [486, 488, 516, 517, 518, 519, 520, 521, 535, 537, 542, 964, 965, 966, 968, 970, 971, 972, 973, 974], "annot": [486, 488, 968, 973, 974], "figur": [486, 488, 514, 516, 517, 518, 519, 520, 521, 529, 533, 534, 538, 574, 575, 581, 583, 585, 591, 593, 598, 600, 605, 607, 613, 615, 621, 642, 644, 651, 653, 662, 664, 669, 674, 711, 724, 733, 735, 741, 743, 838, 842, 848, 852, 858, 862, 868, 872, 882, 891, 907, 939, 957, 961, 966, 968, 972, 973], "write_plot": [486, 493], "write": [486, 491, 492, 493, 494, 495, 514, 522, 525, 526, 528, 529, 534, 535, 538, 540, 551, 557, 940, 956, 957, 961], "write_xyh": [486, 494], "xyh": [486, 492, 494], "write_csv": [486, 491, 526, 528], "write_json": [486, 492], "format_col2var": [486, 495, 514, 522, 525, 526, 529, 535, 538, 540], "print_model": [486, 495, 514, 522, 524, 526, 529, 535, 538, 540, 621, 642, 644, 651, 659, 662, 667, 724, 733, 735, 741], "model_typ": [486, 495, 514, 522, 523, 526, 529, 535, 538, 540], "titl": [488, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 537, 540, 542, 838, 842, 848, 852, 858, 862, 868, 872, 964, 968, 970, 971, 973, 974], "fig": [488, 516, 517, 518, 519, 520, 521, 939, 957, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "ax": [488, 516, 517, 518, 519, 520, 521, 535, 537, 542, 574, 575, 581, 583, 585, 591, 593, 598, 600, 605, 607, 613, 615, 621, 642, 644, 651, 653, 662, 664, 669, 674, 711, 724, 733, 735, 741, 743, 838, 842, 848, 852, 858, 862, 868, 872, 882, 891, 907, 964, 966, 968, 970, 971, 972, 973, 974], "normalize_d": 488, "ret_im": [488, 516, 517, 518, 519, 520, 521], "barg": [488, 842, 852, 862, 872], "scatter": [488, 961], "color": [488, 516, 517, 518, 519, 520, 521, 575, 585, 593, 600, 607, 615, 961, 973], "mean_rew": [488, 968, 973, 974], "etc": [488, 966, 968], "sum": [488, 495, 501, 506, 508, 510, 511, 512, 513, 669, 699, 700, 711, 724, 725, 734, 742, 743, 799, 837, 838, 848, 858, 868, 882, 891, 907, 961, 973], "wrt": [488, 495, 504, 505, 506, 507, 508, 574, 579, 581, 583, 589, 591, 596, 598, 603, 605, 611, 613, 619, 678, 688], "plt": [488, 516, 517, 518, 519, 520, 521, 537, 542, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "No": 488, "matplotlib": [488, 516, 517, 518, 519, 520, 521, 575, 585, 593, 598, 600, 607, 615, 653, 664, 674, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "pyplot": [488, 537, 542, 575, 585, 593, 600, 607, 615, 653, 664, 674, 842, 852, 862, 872, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "imag": [488, 516, 517, 518, 519, 520, 521, 574, 575, 581, 583, 585, 591, 593, 598, 600, 605, 607, 613, 615], "im": [488, 516, 517, 518, 519, 520, 521], "pathcollect": 488, "farmresultsev": [495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 956, 961, 968, 970, 973, 974], "farm_calc": 495, "weinsum": [495, 513], "rh": [495, 513], "einstein": [495, 513, 961], "last": [495, 513, 572, 963], "reduce_st": [495, 511, 973], "vars_op": [495, 511, 512], "some": [495, 510, 511, 512, 571, 799, 837, 950, 957, 966, 969, 970, 975], "reduce_turbin": [495, 512], "reduce_al": [495, 510], "states_op": [495, 510], "turbines_op": [495, 510], "calc_states_mean": [495, 504], "calc_states_sum": [495, 506], "calc_states_std": [495, 505], "standard": [495, 505, 799, 837, 972], "deviat": [495, 505], "calc_turbine_mean": [495, 507], "calc_turbine_sum": [495, 508], "calc_farm_mean": [495, 500], "calc_farm_sum": [495, 501], "calc_mean_farm_pow": [495, 503, 968, 970, 973, 974], "calc_turbine_yield": [495, 502, 509, 973], "annual": [495, 509, 968, 973, 974], "yield": [495, 502, 509, 961, 962, 968, 969, 973, 974], "add_capac": [495, 497, 973], "p_nom": [495, 497], "capac": [495, 497, 961, 973], "calc_farm_yield": [495, 502, 968, 974], "turbine_yield": [495, 502], "power_uncert": [495, 502], "p75": [495, 502, 961], "p90": [495, 502, 961], "add_effici": [495, 498, 973, 974], "effici": [495, 498, 499, 799, 837, 961, 968, 970, 973, 974], "calc_farm_effici": [495, 499, 968, 973, 974], "eff": [499, 551, 553, 973], "fulli": [500, 501, 510, 838, 839, 848, 849, 858, 859, 868, 869, 962], "contract": [500, 501, 510, 724, 725, 734, 742], "uncertainti": 502, "trigger": 502, "farm_yield": 502, "_type_": 505, "_description_": 505, "hour": 509, "delta_t": 509, "p_unit_w": 509, "retur": 509, "durat": 509, "datetime64": 509, "seri": [509, 961, 969, 973], "watt": 509, "gwh": [509, 968, 973, 974], "It": [513, 962, 965, 968, 970, 971], "about": [513, 691, 966, 970], "treat": 513, "right": [513, 518], "hand": 513, "side": 513, "einsum": 513, "express": [513, 787], "convent": [513, 572, 799, 837], "mention": [513, 964, 968], "obligatori": 513, "flowplots2d": [514, 515, 516, 517, 518, 519, 520, 521, 956, 961, 965, 966, 968, 972, 974, 975], "2d": [514, 516, 517, 518, 519, 520, 521, 574, 598, 605, 956, 957, 974], "flow": [514, 516, 517, 518, 519, 520, 521, 956, 960, 961, 962, 968, 969, 972], "get_mean_fig_xi": [514, 519, 966, 974], "resolut": [514, 516, 517, 518, 519, 520, 521, 965, 966, 968, 972, 974, 975], "xmin": [514, 516, 517, 519, 520, 966, 968, 975], "ymin": [514, 516, 518, 519, 521, 966, 975], "get_mean_fig_xz": [514, 520], "x_direct": [514, 517, 518, 520, 521, 968], "270": [514, 517, 518, 520, 521, 964, 968, 970, 972, 975], "xz": [514, 517, 520, 961], "get_mean_fig_yz": [514, 521], "gen_states_fig_xi": [514, 516, 965, 972, 975], "gen_states_fig_xz": [514, 517, 968], "gen_states_fig_yz": [514, 518, 975], "xmax": [516, 517, 519, 520, 966, 968, 975], "ymax": [516, 518, 519, 521, 966, 975], "xlabel": [516, 517, 519, 520], "ylabel": [516, 518, 519, 521], "xspace": [516, 517, 519, 520, 965], "500": [516, 517, 518, 519, 520, 521, 813, 814, 964, 965, 966, 967, 968, 971, 974], "yspace": [516, 518, 519, 521, 965], "var_min": [516, 517, 518, 519, 520, 521], "var_max": [516, 517, 518, 519, 520, 521], "normalize_xi": [516, 519], "normalize_var": [516, 517, 518, 519, 520, 521], "vlabel": [516, 517, 518, 519, 520, 521], "add_bar": [516, 517, 518, 519, 520, 521], "cmap": [516, 517, 518, 519, 520, 521, 533, 534, 970], "quiver_n": [516, 517, 518, 965], "quiver_par": [516, 517, 518, 965], "ret_stat": [516, 517, 518, 519, 520, 521], "extra": [516, 517, 518, 519, 520, 521, 799, 837], "space": [516, 517, 518, 519, 520, 521, 773, 799, 801, 807, 837, 848, 849, 891, 907, 913, 955, 961], "contourf": [516, 517, 518, 519, 520, 521], "pure": [516, 517, 518, 519, 520, 521, 757, 762, 767, 772, 778, 788, 794, 800, 807, 813, 819, 825, 831, 838, 848, 954, 955, 961], "minimum": [516, 517, 518, 519, 520, 521], "bar": [516, 517, 518, 519, 520, 521, 799, 837, 842, 852, 862, 872, 924, 925, 974], "colormap": [516, 517, 518, 519, 520, 521], "th": [516, 517, 518, 799, 837], "quiver": [516, 517, 518], "calc_point": [516, 517, 518, 519, 520, 521, 972], "si": [516, 517, 518, 519, 520, 521], "quadmesh": [516, 517, 518, 519, 520, 521], "quadcontourset": [516, 517, 518, 519, 520, 521], "zmin": [517, 518, 520, 521, 968, 975], "zmax": [517, 518, 520, 521, 968, 975], "zlabel": [517, 518, 520, 521], "zspace": [517, 518, 520, 521], "normalize_x": [517, 520], "normalize_z": [517, 518, 520, 521], "north": [517, 518, 520, 521, 971], "abov": [517, 518, 520, 521, 962, 966, 970, 971, 973, 975], "ech": [517, 518], "normalize_i": [518, 521], "left": 518, "weight_turbin": [519, 520, 521], "job": 522, "handi": 522, "helper": [522, 551, 556, 557, 717, 948, 953, 957], "format_dict": [525, 551, 557], "underli": [525, 621, 622, 625, 642, 643, 644, 645, 646, 651, 652, 654, 662, 663, 724, 725, 726, 733, 734, 735, 736, 737, 741, 742, 757, 758, 759, 762, 763, 764, 767, 768, 769, 772, 773, 774, 778, 780, 783, 788, 789, 790, 794, 795, 796, 800, 801, 802, 807, 808, 809, 813, 814, 815, 819, 820, 821, 825, 826, 827, 831, 832, 834], "flappi": [525, 551, 555, 961, 962], "fv": [525, 542, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "4f": [525, 551, 553, 557], "resultswrit": [526, 527, 528, 956, 961], "roseplotoutput": [529, 530, 531, 532, 533, 534, 538, 956, 971], "rose": [529, 531, 533, 534, 538, 956, 960, 961, 962, 964, 966, 971, 973], "get_data_info": [529, 532, 538], "dname": [529, 532, 538], "descript": [529, 532, 538, 948, 951, 952, 953, 959], "sector": [529, 531, 533, 534, 538, 960, 961, 962, 969, 973], "var_bin": [529, 531, 533, 534, 538], "wd_var": [529, 531, 533, 534, 538], "px": [529, 533, 534, 538], "write_figur": [529, 534, 538], "legend": [531, 532, 533, 534], "bin": [531, 533, 534, 963, 964, 973, 974], "seper": [531, 533, 534], "relev": [531, 533, 534, 952, 959], "pd": [531, 970, 971, 975], "long": [532, 961], "text": 532, "turbo": [533, 534], "layout_dict": [533, 534], "title_dict": [533, 534], "stateturbinemap": [535, 536, 537, 956, 961, 970], "heat": [535, 537, 956, 961], "plot_map": [535, 537, 970], "subplot": [537, 542, 964, 966, 970, 972, 973, 974], "pcolormesh": 537, "statesroseplotoutput": [538, 539, 956, 961, 964, 966, 968, 971, 973, 974], "ws_var": [538, 539], "amb_rew": [538, 539, 551, 553, 965, 970, 972, 973], "turbinetypecurv": [540, 541, 542, 956, 961, 964, 970], "plot_curv": [540, 542, 964, 970], "p_max": [540, 542, 574, 577, 581, 583, 587, 591, 594, 598, 601, 605, 609, 613, 617, 966, 970], "x_label": 542, "y_label": 542, "ws_min": [542, 971], "ws_max": [542, 971], "30": [542, 964, 966, 973, 974, 975], "ws_step": 542, "05": [542, 783, 784, 964, 966, 968, 970, 971, 974, 975], "pmax_arg": 542, "mask": [542, 960, 961, 962, 971], "interest": [542, 952, 969, 972], "labl": 542, "minim": [542, 574, 578, 581, 583, 588, 591, 595, 598, 602, 605, 610, 613, 618, 644, 645, 669, 696, 697, 698, 711, 724, 725, 734, 741, 742, 743, 751, 752, 772, 773, 778, 788, 789, 801, 831, 838, 839, 846, 848, 849, 856, 858, 859, 866, 868, 869, 878, 879, 882, 887, 891, 892, 899, 900, 907, 913, 918, 953, 955, 966], "dbase": 543, "must": [545, 546, 644, 953, 965], "py": 546, "file_man": 546, "keyerror": 549, "otherwis": [549, 968], "pandasfilehelp": [551, 552, 553, 554, 555, 556, 557, 957], "help": [551, 778, 779, 783, 784, 834, 835, 931, 933, 934, 957], "default_reading_paramet": [551, 554], "support": [551, 799, 837, 961, 962, 963, 969], "default_writing_paramet": [551, 555], "data_file_format": [551, 552], "export": 551, "default_format_dict": [551, 553], "bz2": [551, 552, 554, 555], "gz": [551, 552, 554, 555, 968, 973, 974], "zip": [551, 552, 554, 555], "h5": [551, 552, 554, 555], "mode": [551, 555], "amb_cap": [551, 553, 973], "5f": [551, 553], "amb_ct": [551, 553, 966, 972], "6f": [551, 553], "amb_p": [551, 553, 965, 966, 970, 972, 973], "3f": [551, 553], "amb_rews2": [551, 553], "amb_rews3": [551, 553], "amb_rho": [551, 553, 966, 972], "amb_t": [551, 553], "amb_ti": [551, 553, 966, 967, 972], "amb_w": [551, 553, 964, 966, 968, 971, 972, 973, 974], "amb_yld": [551, 553, 973], "cap": [551, 553, 973], "rew": [551, 553, 965, 968, 970, 971, 972, 973, 974, 975], "yld": [551, 553, 973], "read_fil": [551, 556, 922, 940], "write_fil": [551, 557], "calc_w": [558, 561, 562, 567, 958], "z0": [558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 958, 964], "ustar": [558, 560, 562, 566, 567, 570, 958], "kappa": [558, 560, 562, 566, 567, 570, 958], "41": [558, 560, 562, 566, 567, 570, 958, 966], "rough": [558, 559, 560, 562, 563, 564, 566, 567, 568, 570], "friction": [558, 560, 562, 566, 567, 570, 958], "veloc": [558, 560, 562, 566, 567, 570, 958], "van": [558, 560, 562, 566, 567, 570], "karman": [558, 560, 562, 566, 567, 570], "logz": [559, 564, 568, 958], "lz": [559, 563, 564, 568], "ws_ref": [560, 566, 570, 958], "h_ref": [560, 566, 570, 958], "refer": [560, 561, 566, 570, 799, 837, 939, 958, 964, 975], "height0": [561, 958], "ws0": [561, 958], "psi": [562, 565, 567, 569, 958], "lgz": [563, 958], "monin": [565, 566, 569, 570, 964], "obukhov": [565, 566, 569, 570, 964], "all_subclass": [571, 957], "cl": [571, 581, 582, 957], "cubic_root": [572, 957, 961], "a0": [572, 957], "a1": [572, 957], "a2": [572, 957], "a3": [572, 957], "real": [572, 957], "root": [572, 957], "polynomi": [572, 957], "degre": [572, 945, 946, 957, 975], "work": [572, 961, 963, 965, 974], "fast": [572, 962], "you": [572, 799, 837, 963, 967, 968, 969, 972, 973, 975], "spare": 572, "yourself": [572, 964], "github": [572, 960, 961, 962, 963], "com": [572, 939, 942, 961, 962, 963], "opencv": 572, "blob": 572, "master": 572, "modul": 572, "calib3d": 572, "src": 572, "polynom_solv": 572, "cpp": 572, "coeffici": [572, 969, 970], "n_a0": 572, "delta_wd": [573, 957], "wd_a": [573, 957], "wd_b": [573, 957], "close": [574, 598, 957, 965], "geometri": [574, 576, 580, 581, 582, 583, 584, 586, 590, 591, 597, 598, 604, 605, 608, 612, 613, 614, 616, 620, 621, 622, 838, 839, 848, 849, 858, 859, 868, 869, 923, 941, 953, 955, 957, 966], "p_min": [574, 577, 578, 581, 583, 587, 588, 591, 594, 595, 598, 601, 602, 605, 609, 610, 613, 617, 618, 966], "points_dist": [574, 579, 581, 583, 589, 591, 596, 598, 603, 605, 611, 613, 619], "return_nearest": [574, 579, 581, 583, 589, 591, 596, 598, 603, 605, 611, 613, 619], "points_insid": [574, 580, 581, 583, 590, 591, 597, 598, 604, 605, 612, 613, 620], "insid": [574, 580, 581, 583, 590, 591, 597, 598, 604, 605, 606, 612, 613, 620, 621, 622, 642, 953, 965], "add_to_figur": [574, 575, 581, 583, 585, 591, 593, 598, 600, 605, 607, 613, 615, 966], "show_boundari": [574, 575, 581, 583, 585, 591, 593, 598, 600, 605, 607, 613, 615], "invers": [574, 576, 581, 583, 586, 591, 598, 605, 608, 613, 616, 799, 837, 975], "invert": [574, 576, 581, 583, 586, 591, 598, 605, 608, 613, 616, 957], "fill_mod": [575, 585, 591, 593, 598, 600, 605, 607, 615, 966], "inside_slategrai": [575, 585, 615], "pars_boundari": [575, 585, 593, 600, 607, 615], "pars_dist": [575, 585, 593, 600, 607, 615, 966], "dist": [575, 579, 585, 589, 593, 596, 600, 603, 607, 611, 615, 619, 645, 799, 837], "dist_insid": [575, 585, 593, 600, 607, 615, 966], "dist_outsid": [575, 585, 593, 600, 607, 615, 966], "inside_": [575, 585, 593, 600, 607, 615], "outside_": [575, 585, 593, 600, 607, 615], "command": [575, 585, 593, 600, 607, 615, 963], "invertedareageometri": [576, 586, 608, 613, 614, 615, 616, 617, 618, 619, 620, 957], "probe": [579, 580, 589, 590, 596, 597, 603, 604, 611, 612, 619, 620, 669, 671], "nearest": [579, 589, 596, 603, 611, 619], "bundari": [579, 589, 596, 603, 611, 619], "smallest": [579, 589, 596, 603, 611, 619], "p_nearest": [579, 589, 596, 603, 611, 619], "areaintersect": [581, 582, 957], "intersect": [581, 942, 943, 957], "areaunion": [583, 584, 585, 586, 587, 588, 589, 590, 957], "union": [583, 957], "cobnstructor": [591, 592], "closedpolygon": [598, 599, 600, 601, 602, 603, 604, 957, 966], "polygon": [598, 599, 923, 957, 966], "poli": 598, "halfplan": [605, 606, 607, 608, 609, 610, 611, 612, 957], "half": [605, 957], "orthogon": 605, "opt": [621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 948, 961, 966], "constraint": [621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 662, 663, 669, 672, 678, 679, 680, 681, 683, 684, 686, 687, 688, 692, 696, 699, 711, 743, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 808, 814, 820, 826, 832, 838, 848, 858, 868, 882, 883, 891, 892, 893, 907, 914, 954, 966], "areageometryconstraint": [621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 953], "farmconstraint": [621, 644, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 953], "constrain": [621, 642, 953], "sel_turbin": [621, 622, 642, 644, 645, 651, 652, 660, 662, 663, 668, 669, 671, 705, 711, 724, 733, 735, 741, 743, 882, 891, 907], "disc_insid": [621, 622], "ensur": [621, 622], "full": [621, 622, 961, 964, 968], "problem": [621, 622, 625, 626, 629, 630, 642, 643, 644, 645, 646, 647, 651, 652, 654, 655, 662, 663, 669, 671, 672, 673, 676, 677, 678, 683, 686, 687, 688, 691, 711, 724, 725, 726, 727, 728, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 961, 966, 973], "n_compon": [621, 629, 630, 633, 640, 641, 642, 644, 649, 650, 651, 657, 661, 662, 678, 679, 680, 687, 688, 724, 728, 730, 731, 732, 733, 735, 739, 740, 741, 757, 761, 762, 766, 767, 771, 772, 777, 778, 782, 783, 785, 786, 787, 788, 793, 794, 798, 800, 805, 806, 807, 811, 812, 813, 817, 818, 819, 823, 824, 825, 829, 830, 831, 833, 834, 836], "compon": [621, 624, 625, 626, 627, 629, 630, 633, 640, 641, 642, 644, 646, 647, 649, 650, 651, 654, 655, 657, 661, 662, 669, 678, 688, 699, 700, 711, 724, 726, 727, 728, 730, 731, 732, 733, 735, 737, 738, 739, 740, 741, 743, 757, 759, 760, 761, 762, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 777, 778, 780, 781, 782, 783, 787, 788, 790, 791, 793, 794, 796, 797, 798, 799, 800, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 836, 837, 838, 848, 858, 868, 882, 891, 907, 944, 945, 947, 966], "vardeps_float": [621, 640, 642, 644, 650, 651, 661, 662, 724, 732, 733, 735, 741, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834], "calc_individu": [621, 625, 642, 644, 646, 651, 654, 662, 724, 726, 733, 735, 737, 741, 757, 759, 762, 764, 767, 769, 772, 774, 778, 780, 783, 788, 790, 794, 796, 800, 802, 807, 809, 813, 815, 819, 821, 825, 827, 831, 834], "vars_int": [621, 624, 625, 626, 629, 630, 642, 644, 646, 647, 651, 654, 655, 662, 669, 676, 677, 678, 683, 684, 686, 687, 688, 707, 708, 711, 713, 714, 715, 716, 724, 726, 727, 728, 733, 735, 737, 738, 741, 743, 753, 754, 757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 788, 790, 791, 794, 796, 797, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 838, 840, 841, 848, 850, 851, 858, 860, 861, 868, 870, 871, 882, 883, 888, 889, 891, 893, 901, 902, 903, 904, 907, 914, 919, 920], "vars_float": [621, 624, 625, 626, 629, 630, 642, 644, 646, 647, 651, 654, 655, 662, 669, 676, 677, 678, 683, 684, 686, 687, 688, 707, 708, 711, 713, 714, 715, 716, 724, 726, 727, 728, 733, 735, 737, 738, 741, 743, 753, 754, 757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 788, 790, 791, 794, 796, 797, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 838, 840, 841, 848, 850, 851, 858, 860, 861, 868, 870, 871, 882, 883, 888, 889, 891, 893, 901, 902, 903, 904, 907, 914, 919, 920], "problem_result": [621, 625, 626, 629, 630, 642, 644, 646, 647, 651, 654, 655, 662, 676, 677, 686, 687, 724, 726, 727, 728, 733, 735, 737, 738, 741, 757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 788, 790, 791, 794, 796, 797, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 840, 841, 850, 851, 860, 861, 870, 871, 883, 893, 914, 966], "calc_popul": [621, 626, 642, 644, 647, 651, 655, 662, 724, 727, 733, 735, 738, 741, 757, 760, 762, 765, 767, 770, 772, 775, 778, 781, 783, 788, 791, 794, 797, 800, 803, 807, 810, 813, 816, 819, 822, 825, 828, 831, 834], "popul": [621, 626, 630, 642, 644, 647, 651, 655, 662, 669, 677, 678, 680, 684, 687, 688, 711, 717, 718, 724, 727, 733, 735, 738, 741, 743, 757, 760, 762, 765, 767, 770, 772, 775, 778, 781, 783, 786, 788, 791, 794, 797, 800, 803, 807, 810, 813, 816, 819, 822, 825, 828, 831, 834, 838, 841, 848, 851, 858, 861, 868, 871, 882, 891, 907, 953, 964, 966], "n_sel_turbin": [621, 642, 644, 651, 658, 662, 666, 669, 701, 711, 713, 714, 724, 733, 735, 741, 743, 753, 754, 882, 888, 889, 891, 901, 902, 907, 919, 920], "numer": [621, 642, 644, 651, 658, 662, 666, 669, 701, 711, 724, 733, 735, 741, 743, 882, 891, 907], "add_to_layout_figur": [621, 642, 644, 651, 653, 662, 664, 669, 674, 711, 724, 733, 735, 741, 743, 882, 891, 907], "get_bound": [621, 642, 644, 651, 757, 762, 767, 772, 778, 783, 787, 788, 794], "check_individu": [621, 642, 644, 651, 757, 762, 767, 772, 778, 783, 785, 788, 794], "constraint_valu": [621, 642, 644, 651, 669, 679, 680, 711, 743, 757, 762, 767, 772, 778, 783, 785, 786, 788, 794, 838, 848, 858, 868, 882, 891, 907], "fullfil": [621, 642, 644, 651, 669, 679, 680, 711, 743, 757, 762, 767, 772, 778, 783, 785, 786, 788, 794, 838, 848, 858, 868, 882, 891, 907], "check_popul": [621, 642, 644, 651, 757, 762, 767, 772, 778, 783, 786, 788, 794], "component_nam": [621, 627, 642, 644, 651, 662, 724, 733, 735, 741, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834], "var_names_int": [621, 639, 642, 644, 651, 662, 669, 710, 711, 724, 733, 735, 741, 743, 756, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 857, 858, 868, 881, 882, 891, 906, 907], "n_vars_int": [621, 624, 625, 626, 629, 630, 635, 641, 642, 644, 646, 647, 651, 654, 655, 662, 669, 676, 677, 678, 683, 684, 686, 687, 688, 690, 694, 698, 703, 707, 708, 711, 713, 714, 715, 716, 724, 726, 727, 728, 733, 735, 737, 738, 741, 743, 747, 750, 752, 753, 754, 757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 788, 790, 791, 794, 796, 797, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 835, 838, 840, 841, 848, 850, 851, 853, 855, 856, 858, 860, 861, 868, 870, 871, 874, 877, 879, 882, 883, 888, 889, 891, 893, 895, 898, 900, 901, 902, 903, 904, 907, 914, 919, 920, 966], "var_names_float": [621, 638, 642, 644, 651, 662, 669, 709, 711, 724, 733, 735, 741, 743, 755, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 847, 848, 858, 867, 868, 880, 882, 890, 891, 905, 907, 921], "n_vars_float": [621, 624, 625, 626, 629, 630, 634, 640, 642, 644, 646, 647, 650, 651, 654, 655, 661, 662, 669, 676, 677, 678, 683, 684, 686, 687, 688, 689, 693, 697, 702, 707, 708, 711, 713, 714, 715, 716, 724, 726, 727, 728, 732, 733, 735, 737, 738, 741, 743, 746, 749, 751, 753, 754, 757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 783, 788, 790, 791, 794, 796, 797, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831, 834, 835, 838, 840, 841, 843, 845, 846, 848, 850, 851, 858, 860, 861, 863, 865, 866, 868, 870, 871, 873, 876, 878, 882, 883, 884, 886, 887, 888, 889, 891, 893, 894, 897, 899, 901, 902, 903, 904, 907, 914, 915, 917, 918, 919, 920, 966], "vardeps_int": [621, 641, 642, 644, 651, 662, 724, 733, 735, 741, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834], "rename_vars_int": [621, 637, 642, 644, 651, 662, 724, 733, 735, 741, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834], "renam": [621, 636, 637, 642, 644, 651, 662, 724, 733, 735, 741, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 961], "rename_vars_float": [621, 636, 642, 644, 651, 662, 724, 733, 735, 741, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834], "finalize_individu": [621, 629, 642, 644, 651, 662, 669, 686, 711, 724, 728, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 883, 891, 893, 907, 914], "champion": [621, 629, 642, 644, 651, 662, 669, 686, 711, 724, 728, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 883, 891, 893, 907, 914], "finalize_popul": [621, 630, 642, 644, 651, 662, 669, 687, 711, 724, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 891, 907], "ana_deriv": [621, 624, 642, 644, 651, 662, 724, 733, 735, 741, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834], "analyt": [621, 624, 642, 644, 651, 662, 678, 724, 733, 735, 741, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834], "possibl": [621, 624, 642, 644, 651, 662, 724, 733, 735, 741, 757, 762, 767, 772, 778, 783, 788, 794, 799, 800, 807, 813, 819, 825, 831, 834, 837, 971], "__str__": [621, 623, 642, 644, 651, 662, 669, 711, 724, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 891, 907], "info": [621, 623, 642, 644, 651, 662, 669, 711, 724, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 891, 907], "finish": [621, 632, 642, 644, 651, 662, 669, 711, 724, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 891, 907, 966], "farmoptproblem": [622, 643, 645, 652, 663, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 725, 733, 734, 736, 741, 742, 758, 763, 768, 773, 789, 795, 801, 808, 814, 820, 826, 832, 953, 961], "optim": [622, 629, 643, 645, 651, 652, 663, 669, 671, 675, 686, 707, 708, 711, 713, 714, 715, 716, 725, 728, 733, 734, 736, 741, 742, 743, 753, 754, 758, 763, 768, 773, 783, 789, 795, 799, 801, 808, 814, 820, 826, 832, 837, 838, 848, 858, 868, 882, 883, 888, 889, 891, 893, 901, 902, 903, 904, 907, 914, 919, 920, 948, 953, 954, 955, 960, 961, 962], "iwopi": [622, 645, 652, 663, 669, 671, 672, 673, 678, 688, 783, 834, 838, 848, 858, 868, 953, 955, 962, 966], "cannot": 624, "differenti": [624, 678, 688], "n_sel_compon": [624, 625, 626, 646, 647, 654, 655, 726, 727, 737, 738, 759, 760, 764, 765, 769, 770, 774, 775, 780, 781, 790, 791, 796, 797, 802, 803, 809, 810, 815, 816, 821, 822, 827, 828], "n_pop": [626, 630, 647, 655, 677, 680, 684, 687, 708, 714, 716, 717, 718, 727, 738, 754, 760, 765, 770, 775, 781, 786, 791, 797, 803, 810, 816, 822, 828, 841, 851, 861, 871, 889, 902, 904, 920, 953], "old": [636, 637], "dep": [640, 641, 650, 661, 724, 725, 732, 734, 742], "farmboundaryconstraint": [642, 643, 953, 966], "mindistconstraint": [644, 645, 646, 647, 648, 649, 650, 953, 966], "least": [644, 799, 837, 953], "spatial": [644, 799, 837, 953, 961, 964], "min_dist": [644, 645, 788, 789, 800, 801, 838, 839, 848, 849, 858, 859, 868, 869, 891, 892, 966], "min_dist_unit": [644, 645, 966], "constaint": [644, 648, 788, 792], "geom_layout": [651, 662, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 953], "farmobject": [662, 663, 664, 665, 666, 667, 668, 724, 725, 734, 735, 736, 742, 953], "runner": [669, 671, 711, 882, 892, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 961, 966, 973, 974], "calc_farm_arg": [669, 671], "calc_farm": [669, 671, 965, 968, 970, 971, 972, 973, 974, 975], "all_turbin": [669, 675, 711, 743, 882, 891, 907], "counter": [669, 682, 711, 743, 882, 891, 907], "tvar": [669, 706, 711, 743, 882, 891, 907], "turbine_i": [669, 704, 706, 711, 743, 882, 891, 907], "parse_tvar": [669, 704, 711, 743, 882, 891, 907], "tvr": [669, 704, 711, 743, 882, 891, 907], "drop_var": [669, 691], "exclud": [669, 691], "update_problem_individu": [669, 707, 711, 715, 743, 882, 891, 903, 907], "latest": [669, 707, 708, 711, 715, 716, 743, 882, 891, 903, 904, 907, 963], "update_problem_popul": [669, 708, 711, 716, 743, 882, 891, 904, 907], "apply_individu": [669, 676, 711, 743, 838, 840, 848, 850, 858, 860, 868, 870, 882, 891, 907], "apply_popul": [669, 677, 711, 743, 838, 841, 848, 851, 858, 861, 868, 871, 882, 891, 907], "whole": [669, 677, 711, 743, 838, 841, 848, 851, 858, 861, 868, 871, 882, 891, 907, 961], "int_inf": [669, 670, 694, 698, 711, 743, 750, 752, 838, 848, 858, 868, 877, 879, 882, 891, 898, 900, 907], "999999": [669, 670, 711, 743, 838, 848, 858, 868, 882, 891, 907], "initial_values_int": [669, 690, 711, 743, 747, 838, 848, 853, 858, 868, 874, 882, 891, 895, 907], "min_values_int": [669, 698, 711, 743, 752, 838, 848, 856, 858, 868, 879, 882, 891, 900, 907], "max_values_int": [669, 694, 711, 743, 750, 838, 848, 855, 858, 868, 877, 882, 891, 898, 907], "initial_values_float": [669, 689, 711, 743, 746, 838, 843, 848, 858, 863, 868, 873, 882, 884, 891, 894, 907, 915], "min_values_float": [669, 697, 711, 743, 751, 838, 846, 848, 858, 866, 868, 878, 882, 887, 891, 899, 907, 918], "max_values_float": [669, 693, 711, 743, 749, 838, 845, 848, 858, 865, 868, 876, 882, 886, 891, 897, 907, 917], "add_object": [669, 673, 711, 743, 838, 848, 858, 868, 882, 891, 907, 966], "varmap_int": [669, 672, 673, 711, 743, 838, 848, 858, 868, 882, 891, 907], "varmap_float": [669, 672, 673, 711, 743, 838, 848, 858, 868, 882, 891, 907], "add_constraint": [669, 672, 711, 743, 838, 848, 858, 868, 882, 891, 907, 966], "min_values_constraint": [669, 696, 711, 743, 838, 848, 858, 868, 882, 891, 907], "max_values_constraint": [669, 692, 711, 743, 838, 848, 858, 868, 882, 891, 907], "constraints_tol": [669, 681, 711, 743, 838, 848, 858, 868, 882, 891, 907], "toler": [669, 681, 711, 743, 783, 838, 848, 858, 868, 882, 891, 907], "n_object": [669, 683, 684, 686, 695, 700, 711, 743, 838, 848, 858, 868, 882, 883, 891, 893, 907, 914, 966], "n_constraint": [669, 681, 683, 684, 686, 687, 692, 696, 699, 711, 743, 838, 848, 858, 868, 882, 883, 891, 893, 907, 914, 966], "calc_gradi": [669, 678, 711, 743, 838, 848, 858, 868, 882, 891, 907], "ivar": [669, 678, 711, 743, 838, 848, 858, 868, 882, 891, 907], "gradient": [669, 678, 688, 711, 743, 838, 848, 858, 868, 882, 891, 907], "get_gradi": [669, 678, 688, 711, 743, 838, 848, 858, 868, 882, 891, 907], "obtain": [669, 688, 711, 743, 838, 848, 858, 868, 882, 891, 907, 964, 968, 974], "link": [669, 688, 711, 743, 838, 848, 858, 868, 882, 891, 907, 962, 966, 973], "maximize_obj": [669, 695, 711, 743, 838, 848, 858, 868, 882, 891, 907], "evaluate_individu": [669, 683, 711, 743, 838, 848, 858, 868, 882, 891, 907], "evaluate_popul": [669, 684, 711, 743, 838, 848, 858, 868, 882, 891, 907], "check_constraints_individu": [669, 679, 711, 743, 838, 848, 858, 868, 882, 891, 907], "check_constraints_popul": [669, 680, 711, 743, 838, 848, 858, 868, 882, 891, 907], "subject": 675, "fvar": 678, "vr": 678, "pop": [678, 688, 714, 754, 889, 902, 920], "overload": 678, "consid": [678, 688, 973], "optfunctionlist": [678, 688], "n_vr": 678, "ctol": 681, "ret_prob_r": 683, "addition": 683, "obj": [683, 684, 686, 687, 883, 893, 914], "con": [683, 684, 686, 687, 883, 893, 914], "were": [688, 961, 969, 974, 975], "previous": 688, "cf": [688, 971], "problemdefaultfunc": 688, "decid": [691, 963], "drop": 691, "cma": 692, "inf": [693, 697, 749, 751, 787, 845, 846, 865, 866, 876, 878, 886, 887, 897, 899, 917, 918], "unbound": [693, 694, 697, 698, 749, 750, 751, 752, 845, 846, 865, 866, 876, 877, 878, 879, 886, 887, 897, 898, 899, 900, 917, 918], "cmi": 696, "n_con": 699, "n_obj": 700, "farmvarsproblem": [711, 712, 713, 714, 715, 716, 743, 744, 882, 891, 892, 907, 913, 953, 954, 961], "pre_rotor_var": [711, 712], "post_rotor_var": [711, 712], "opt2farm_vars_individu": [711, 713, 743, 753, 882, 888, 891, 901, 907, 919], "opt2farm_vars_popul": [711, 714, 743, 754, 882, 889, 891, 902, 907, 920], "sub": [712, 745, 953, 961, 966], "post_rotor": 712, "super": [712, 748, 885, 896, 916], "farm_var": [713, 714, 753, 754, 888, 889, 901, 902, 919, 920], "popstat": [717, 718, 719, 720, 721, 722, 723, 953], "artifici": [717, 953], "farmvarobject": [724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 741, 953], "contract_st": [724, 725, 734, 742], "contract_turbin": [725, 734, 742], "maxfarmpow": [733, 734, 953, 966], "maximize_pow": [733, 734, 966], "maxnturbin": [735, 736, 737, 738, 739, 740, 953], "turrbin": [735, 953], "check_valid": [735, 736], "count": [735, 736, 961], "max_n_turbin": [735, 736], "minimalmaxti": [741, 742, 953], "minimize_ti": [741, 742], "optfarmvar": [743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 954], "typ": [743, 745], "keyword": [744, 930, 932, 938, 941], "model_kei": 745, "repeat": 745, "geometr": [757, 758, 762, 763, 767, 768, 772, 773, 778, 788, 789, 794, 795, 800, 801, 807, 808, 813, 814, 819, 820, 825, 826, 831, 832, 838, 848, 954, 955, 961], "cmpnt": [757, 759, 760, 762, 764, 765, 767, 769, 770, 772, 774, 775, 778, 780, 781, 788, 790, 791, 794, 796, 797, 800, 802, 803, 807, 809, 810, 813, 815, 816, 819, 821, 822, 825, 827, 828, 831], "additio": [758, 763, 768, 773, 789, 795], "cfixn": [762, 763, 764, 765, 766, 955], "cmaxn": [767, 768, 769, 770, 771, 955], "cmindens": [772, 773, 774, 775, 776, 777, 955], "min_valu": [772, 773], "dfactor": [772, 773, 800, 801], "min_dens": [772, 773], "cminn": [778, 779, 780, 781, 782, 955], "see": [778, 779, 783, 784, 799, 834, 835, 837, 931, 933, 934, 961, 966, 968, 969, 974], "accur": [778, 779, 783, 784, 834, 835, 931, 933, 934], "signatur": [778, 779, 783, 784, 834, 835, 931, 933, 934], "optfunct": [783, 834], "tol": [783, 784], "violat": 783, "1e": [783, 784, 966], "mindist": [788, 789, 790, 791, 792, 793, 955], "between": [789, 799, 837, 838, 839, 848, 849, 858, 859, 868, 869, 892, 942, 943, 965, 966, 968], "cdist": [799, 837], "xa": [799, 837], "xb": [799, 837], "metric": [799, 837], "euclidean": [799, 837], "pair": [799, 837], "m_a": [799, 837], "observ": [799, 837], "convert": [799, 837, 923, 972], "m_b": [799, 837], "callabl": [799, 837], "braycurti": [799, 837], "canberra": [799, 837], "chebyshev": [799, 837], "cityblock": [799, 837], "cosin": [799, 837], "dice": [799, 837], "ham": [799, 837], "jaccard": [799, 837], "jensenshannon": [799, 837], "kulczynski1": [799, 837], "mahalanobi": [799, 837], "match": [799, 837], "minkowski": [799, 837], "rogerstanimoto": [799, 837], "russellrao": [799, 837], "seuclidean": [799, 837], "sokalmichen": [799, 837], "sokalsneath": [799, 837], "sqeuclidean": [799, 837], "yule": [799, 837], "norm": [799, 837], "unweight": [799, 837], "varianc": [799, 837], "vstack": [799, 837], "ddof": [799, 837], "vi": [799, 837], "covari": [799, 837], "matrix": [799, 837], "inv": [799, 837], "cov": [799, 837], "u": [799, 837, 944, 945, 966], "ij": [799, 837], "valueerror": [799, 837], "except": [799, 837], "thrown": [799, 837], "arrang": [799, 837], "_p": [799, 837], "quasi": [799, 837], "citi": [799, 837], "block": [799, 837, 966], "manhattan": [799, 837], "u_i": [799, 837], "v_i": [799, 837], "x_i": [799, 837], "squar": [799, 837], "_2": [799, 837], "frac": [799, 837], "cdot": [799, 837], "its": [799, 837, 907, 954, 962, 969, 972], "dot": [799, 837], "proport": [799, 837], "those": [799, 837, 969], "disagre": [799, 837], "To": [799, 837], "save": [799, 837, 973], "shannon": [799, 837], "probabl": [799, 837], "q": [799, 837], "pointwis": [799, 837], "kullback": [799, 837], "leibler": [799, 837], "diverg": [799, 837], "precis": [799, 837], "max_i": [799, 837], "sum_i": [799, 837], "brai": [799, 837], "curti": [799, 837], "synonym": [799, 837], "kulczynski": [799, 837], "roger": [799, 837], "tanimoto": [799, 837], "russel": [799, 837], "rao": [799, 837], "sokal": [799, 837], "michen": [799, 837], "sneath": [799, 837], "user": [799, 837, 948, 951, 961, 969], "suppli": [799, 837], "ariti": [799, 837], "could": [799, 837, 961, 969, 971, 972, 974], "dm": [799, 837], "lambda": [799, 837], "librari": [799, 837, 966, 972], "would": [799, 837], "python": [799, 837, 961, 962, 969], "choos": [799, 837, 963, 968, 970, 974], "ineffici": [799, 837], "c": [799, 837, 963, 975], "version": [799, 837, 961, 963], "syntax": [799, 837], "find": [799, 837, 961], "four": [799, 837, 965], "import": [799, 837, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "35": [799, 837, 964, 966], "0456": [799, 837], "85": [799, 837, 966], "2672": [799, 837], "1174": [799, 837], "89": [799, 837, 966, 970], "9711": [799, 837], "9728": [799, 837], "9422": [799, 837], "36": [799, 837, 964, 966], "1667": [799, 837], "86": [799, 837, 966, 968, 973], "7833": [799, 837], "7044": [799, 837], "6172": [799, 837], "8856": [799, 837], "0893": [799, 837], "3561": [799, 837], "8477": [799, 837], "corner": [799, 837, 965], "cube": [799, 837], "b": [799, 837, 962], "7": [799, 837, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975], "9": [799, 837, 961, 963, 964, 966, 967, 970, 971, 972, 973, 975], "maxdens": [800, 801, 802, 803, 804, 805, 806, 955], "max_dens": [800, 801], "maxgridspac": [807, 808, 809, 810, 811, 812, 955], "max_dxdi": [807, 808], "memimadist": [813, 814, 815, 816, 817, 818, 955], "c3": [813, 814], "mimamean": [813, 814], "diff": 814, "ofixn": [819, 820, 821, 822, 823, 824, 955], "omaxn": [825, 826, 827, 828, 829, 830, 831, 955], "maxn": [825, 826], "ominn": [831, 832, 833, 955], "vnames_int": 835, "vnames_float": 835, "cname": 835, "geomlayout": [838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 955, 961], "involv": [838, 848, 858, 868, 961], "calc_valid": [838, 839], "get_fig": [838, 842, 848, 852, 858, 862, 868, 872], "plotli": [838, 842, 848, 852, 858, 862, 868, 872, 939, 957, 961], "true_circl": [842, 852, 862, 872], "ndarari": [842, 852, 862, 872], "draw": [842, 852, 862, 872], "geomlayoutgrid": [848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 955, 961], "background": [848, 849, 955, 961, 965, 966, 969], "grid_spac": [848, 849], "geomreggrid": [858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 955, 961], "max_dist": [858, 859, 868, 869, 892], "n_grid": [868, 869, 891, 892], "n_max": [868, 869], "n_row_max": [868, 869, 892], "farmlayoutoptproblem": [882, 883, 884, 885, 886, 887, 888, 889, 890, 954, 966], "reggridslayoutoptproblem": [891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 954], "sever": [891, 954, 961], "mix": 891, "min_spac": [891, 907, 913], "max_n_row": 891, "regularlayoutoptproblem": [907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 954, 961], "spacing_x": [907, 911], "spacing_i": [907, 912], "offset_x": [907, 909], "offset_i": [907, 910], "read_shp": [922, 923, 957, 961], "fname": [922, 923, 957], "shp": [922, 923, 940, 957], "geopanda": [922, 923, 940], "geodatafram": 922, "wsg84": 922, "read_shp_polygon": [923, 941, 957, 961], "name_col": 923, "geom_col": 923, "to_utm": 923, "ret_utm_zon": [923, 941, 957], "extract": 923, "utm": [923, 941], "zone": [923, 941], "letter": [923, 941], "32u": [923, 941], "point_dict_exterior": 923, "point_dict_interior": 923, "utm_zone_str": [923, 941], "utem": [923, 941], "daskrunn": [924, 925, 926, 927, 928, 929, 930, 957, 961, 965, 966, 973, 974], "schedul": [924, 925, 961, 966, 973], "progress_bar": [924, 925, 961], "show": [924, 925, 961, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "progress": [924, 925, 973, 974], "cluster_arg": [924, 925], "explicit": [924, 925, 961, 965], "cluster": [924, 925, 961, 962, 966, 973, 974], "setup": [924, 925, 960, 961, 962, 966, 968, 970, 971, 972, 974, 975], "client_arg": [924, 925], "client": [924, 925], "n_worker": [924, 925], "is_distribut": [924, 928], "threads_per_work": 925, "process": [925, 969], "worker": [925, 973], "thread": [925, 973], "defaultrunn": [931, 932, 957, 961], "show_plotly_fig": [939, 957, 961], "displai": [939, 957, 973, 974], "window": [939, 957, 961], "stackoverflow": 939, "question": [939, 966], "53570384": 939, "how": [939, 960, 961, 962, 970, 973, 974], "standalon": 939, "shp2csv": [940, 957, 961], "ifil": [940, 957], "ofil": [940, 957], "in_kwarg": [940, 957], "out_kwarg": [940, 957], "inam": 940, "onam": 940, "to_csv": 940, "shp2geom2d": [941, 957], "shapefil": [941, 957], "geom": 941, "tool": [941, 973], "two_circl": [942, 943], "r1": [942, 943, 957], "r2": [942, 943, 957], "sure": [942, 963, 966, 973], "These": [942, 952, 965, 966, 968, 975], "diego": 942, "assencio": 942, "8d6ca3d82151bad815f78addf9b5c1c6": 942, "calc_area": [943, 957], "anoth": [943, 974, 975], "uv2wd": [944, 957], "uv": [944, 945, 957], "wd2uv": [945, 957], "against": [945, 946], "wd2wdvec": [946, 957], "wdvec": [946, 947, 957], "wdvec2wd": [947, 957], "shortcut": 948, "concret": [948, 952, 959], "access": 950, "reach": [950, 961], "atmospher": [951, 952, 964], "interfac": [951, 961, 966], "propag": [952, 969], "due": [952, 971], "ie": 952, "avail": [952, 959, 960, 963, 964, 973], "machin": 952, "net": 952, "intern": [953, 962], "extern": 953, "whose": [953, 964], "classif": 959, "overview": [960, 961, 962, 972], "manag": [960, 961, 962, 969], "releas": [961, 963], "readi": [961, 967, 972, 975], "transfer": [961, 975], "fraunhof": [961, 962, 966], "iw": [961, 962, 964, 966], "hous": 961, "predecessor": [961, 962], "yet": 961, "just": [961, 970], "enjoi": 961, "await": 961, "comment": 961, "issu": [961, 962], "thank": 961, "changelog": 961, "fraunhoferiw": [961, 962, 963], "commit": [961, 962], "style": 961, "black": 961, "small": [961, 964], "discov": 961, "flake8": 961, "now": [961, 965, 966, 967, 968, 970, 971, 972, 974, 975], "pytest": 961, "unittest": 961, "workflow": 961, "docu": 961, "io": 961, "doc": [961, 973], "html": 961, "miss": 961, "wind_rot": [961, 965], "manifest": 961, "orst": 961, "pctsinglefil": 961, "iecti2019": 961, "iecti2005": 961, "concept": 961, "instal": [961, 962], "pip": [961, 962], "capabl": [961, 962], "As": [961, 963, 975], "pcttwofil": 961, "windroseoutput": 961, "histogram": 961, "ambientwindroseoutput": 961, "improv": 961, "downwind": [961, 965, 966, 968, 970, 971, 972, 973, 974, 975], "browser": 961, "featur": [961, 971], "folder": [960, 961], "wind_ros": 961, "layout_single_st": 961, "layout_wind_ros": 961, "notebook": [960, 961, 969], "layout_opt": [961, 966], "ipynb": 961, "demonstr": [961, 964, 966, 970, 972, 974, 975], "wrf": [961, 968, 969], "ambientroseplotoutput": 961, "multi_height": 961, "usag": 961, "bug": 961, "veer": 961, "power_mask": 961, "solv": [961, 966], "cubic": 961, "forgotten": 961, "api": [961, 962, 973], "hotfix": 961, "wsrho2pcttwofil": 961, "sector_manag": 961, "sector_man": 961, "col_model": 961, "offset": 961, "compare_wak": 961, "compar": [961, 970, 971], "yawed_wak": 961, "width": 961, "doubl": 961, "simplifi": 961, "until": 961, "converg": 961, "accept": 961, "replac": [961, 963], "intuit": 961, "turboparkix": 961, "summar": 961, "bracket": 961, "eq": 961, "wrong": 961, "layout_regular_grid": 961, "geom_reggrid": 961, "affect": [961, 970], "geopandas_help": 961, "interior": 961, "11": [961, 963, 964, 966, 970, 973, 975], "cleaner": 961, "treatment": 961, "slimmer": 961, "distribut": [961, 964, 966, 973], "move": [961, 966], "identifi": 961, "irrespect": 961, "restart": 961, "complet": [961, 964, 967, 968, 971, 973, 974], "incomplet": 961, "slurm": 961, "queue": 961, "system": [961, 963, 964, 969, 972, 973], "timeseries_slurm": 961, "hpc": 961, "apigen": 961, "softwar": [962, 964], "modular": 962, "steer": 962, "construct": 962, "analysi": 962, "studi": 962, "comparison": 962, "simul": [962, 964, 969], "complex": [962, 973], "chain": 962, "perform": 962, "ow": 962, "remot": 962, "enabl": 962, "well": [962, 964, 966, 975], "repositori": [960, 962], "tracker": 962, "pleas": 962, "report": 962, "mit": 962, "conda": 962, "histori": 962, "fork": [962, 963], "branch": [962, 963], "git": [962, 963, 965], "checkout": 962, "new_branch": 962, "your": [962, 963, 972], "am": 962, "awesom": 962, "messag": 962, "push": 962, "pull": 962, "request": 962, "develop": 962, "flapfoam": 962, "public": [962, 975], "through": 962, "publicli": 962, "fund": 962, "research": 962, "project": 962, "particular": [962, 973], "feder": 962, "ministri": 962, "econom": 962, "affair": 962, "climat": 962, "action": [962, 969], "bmwk": 962, "roject": 962, "smart": 962, "grant": 962, "0325851b": 962, "0325397b": 962, "03ee3008a": 962, "educ": 962, "bmbf": 962, "framework": 962, "h2digit": 962, "03sf0635": 962, "venv": 963, "conveni": [963, 972], "prefer": 963, "python3": 963, "Then": 963, "activ": 963, "everi": 963, "leav": 963, "deactiv": 963, "altern": 963, "dev": 963, "egg": 963, "clone": 963, "cd": 963, "whenev": 963, "concern": 963, "recommend": [963, 965], "forg": 963, "channel": 963, "while": 963, "again": [963, 966, 970], "build": 963, "Such": 964, "often": [964, 969], "terminologi": [964, 969, 972], "three": [964, 975], "67": [964, 966, 973], "randomli": 964, "t0": [964, 966, 970, 971, 972, 973, 975], "101872": [964, 973], "70": [964, 965, 966, 971, 973], "1004753": [964, 973], "57": [964, 966, 973], "t1": [964, 966, 970, 971, 972, 973, 975], "103659": [964, 973], "97": [964, 966, 973], "1002993": [964, 973], "29": [964, 966, 973], "t2": [964, 966, 970, 972, 973], "100780": [964, 973], "09": [964, 973], "1000779": [964, 973], "t3": [964, 966, 970, 972, 973], "100290": [964, 973], "42": [964, 966, 973], "1004330": [964, 973], "t4": [964, 966, 970, 972], "103005": 964, "1003540": 964, "t5": [964, 966], "100102": 964, "92": [964, 966], "1004849": 964, "55": [964, 966], "t6": [964, 966], "104162": 964, "1001061": 964, "like": [964, 969, 971], "mesoscal": 964, "75": [964, 965, 966, 968, 973], "2009": [964, 968], "00": [964, 966, 968, 973], "37214": [964, 968], "42685": [964, 968], "28838": [964, 968], "31": [964, 965, 966, 968, 973], "23": [964, 966, 968, 973], "27767": [964, 968], "36368": [964, 968], "30095": [964, 968], "At": 964, "90": [964, 966, 968, 972], "150": [964, 966, 968, 973, 974], "250": [964, 966, 968, 971, 975], "o": [964, 965, 966, 968, 970, 971, 972, 973, 974, 975], "16": [964, 966, 968, 970, 971, 973, 974], "20": [964, 965, 966, 967, 968, 970, 971, 973, 974], "binnd": 964, "layer": 964, "64": [964, 966, 973], "253": 964, "032": 964, "542331196166035e": 964, "65": [964, 966, 973, 974], "207": 964, "145": 964, "0001230528308906": 964, "49": [964, 965, 966], "46": [964, 966], "116": 964, "0001563449299843": 964, "72": [964, 965, 966, 970], "314": 964, "048": 964, "618827331554488e": 964, "18": [964, 966, 970], "302": 964, "027": 964, "694": 964, "98695302482496e": 964, "3000": [964, 966, 970, 975], "2018": 964, "24": [964, 966, 970, 973], "172": 964, "27": [964, 966], "22": [964, 966, 970, 973], "51": [964, 966], "184": 964, "13": [964, 966, 968, 970], "52": [964, 966], "198": 964, "04": [964, 966, 967], "34": [964, 966], "209": [964, 966], "93": [964, 966], "19": [964, 966, 970, 973], "78": [964, 966, 974], "217": 964, "223": 964, "26": [964, 965, 966, 973], "68": [964, 966], "227": 964, "02": [964, 966, 967, 974], "8000": [964, 972, 973], "2017": [964, 973], "62": [964, 966, 973], "244": [964, 973], "06": [964, 966, 968, 973], "0504": [964, 973], "99": [964, 966, 971, 973, 974], "243": [964, 973], "03": [964, 966, 972, 973], "0514": [964, 973], "0522": [964, 973], "33": [964, 966, 973], "241": [964, 973], "0523": [964, 973], "0518": 964, "242": 964, "0513": 964, "coars": [964, 966, 974], "216": [964, 966, 974], "site": [964, 966], "bremen": [964, 966, 971], "germani": [964, 966], "consist": [964, 970, 971, 972, 974], "00158": [964, 966, 974], "00244": [964, 966, 974], "00319": [964, 966, 974], "12": [964, 966, 970, 972, 974, 975], "00367": 964, "00042": [964, 966, 974], "veri": [964, 965, 966, 973], "inhomogen": 964, "long_nam": 964, "deg": 964, "attribut": 964, "rotat": 964, "subtitl": 964, "author": 964, "date": 964, "2021": 964, "300": [964, 966, 970, 975], "2500": [964, 965, 966], "180": 964, "220": 964, "120": 964, "dtu10": 964, "dtu10mw": [964, 967], "iea15": 964, "iea15mw": [964, 967], "iwt7": [964, 967], "nrel5": [964, 970, 972, 973], "nrel5mw": [964, 965, 966, 967, 968, 970, 972, 973, 974, 975], "nstate": 964, "ncurv": 964, "pctcurv": 964, "39": [964, 965, 966, 972, 973], "categori": 964, "14": [964, 966, 970, 973], "relative_to": 964, "parent": 964, "lt": [964, 966, 972], "posixpath": 964, "gt": [964, 966, 972], "shown": 964, "printout": [964, 972], "feel": 964, "invit": 964, "best": [965, 966, 971], "wai": 965, "similar": 965, "claim": 965, "ident": [965, 975], "associ": 965, "home": 965, "jona": 965, "netcfd": 965, "back": 965, "our": [965, 966, 967, 968, 970, 971, 974, 975], "let": [965, 966, 968, 970, 971, 973, 974, 975], "domain": 965, "rectangl": 965, "realiz": [965, 975], "instanc": 965, "streamlines_100": [965, 967], "grid16": [965, 967], "jensen_linear_k007": [965, 967, 972], "partial_wakes_model": [965, 966, 968, 970, 971, 973, 974, 975], "auto": [965, 966, 967, 968, 970, 971, 973, 974, 975], "4000": [965, 966, 971, 974], "implicit": [965, 966, 973, 975], "fr": [965, 968, 970, 972, 973], "to_datafram": [965, 968, 970, 972, 973, 975], "scale_unit": 965, "201": 965, "158092": 965, "491089": 965, "1474": 965, "211367": 965, "208": [965, 966], "044994": 965, "673386": 965, "1580": 965, "523022": 965, "214": [965, 966], "523994": 965, "960601": 965, "1748": 965, "171047": 965, "218": 965, "242345": 965, "867297": 965, "1127": 965, "597810": 965, "222": 965, "297880": 965, "283373": 965, "1352": 965, "715530": 965, "899315": 965, "731909": 965, "808657": 965, "1614": 965, "607085": 965, "1101": 965, "211997": 965, "236": 965, "751304": 965, "932726": 965, "1156": 965, "958672": 965, "237": 965, "139685": 965, "375640": 965, "142662": 965, "1406": 965, "547918": 965, "801": 965, "751505": 965, "484049": 965, "818854": 965, "381124": 965, "1665": 965, "347000": 965, "908": 965, "970303": 965, "311353": 965, "703701": 965, "149847": 965, "1054": 965, "871543": 965, "454": 965, "760942": 965, "259090": 965, "995899": 965, "857833": 965, "1185": 965, "898485": 965, "690": 965, "639688": 965, "676969": 965, "357075": 965, "1396": 965, "122949": 965, "44": [965, 966], "537113": 965, "352448": 965, "263710": 965, "521": 965, "748653": 965, "492": 965, "140844": 965, "47": [965, 966], "447853": 965, "960030": 965, "917024": 965, "724": 965, "421405": 965, "710": 965, "071241": 965, "815208": 965, "580130": 965, "998": 965, "581195": 965, "462887": 965, "352662": 965, "621921": 965, "552147": 965, "960214": 965, "363478": 965, "184792": 965, "580285": 965, "552663": 965, "task": 966, "detail": [966, 969, 973], "pymoo": 966, "nice": 966, "genet": 966, "optimizer_pymoo": 966, "gm": 966, "tackl": 966, "wind_rose_bremen": [966, 971, 974], "0036700002": [966, 974], "next": [966, 968, 970, 972, 973, 974], "1200": 966, "800": [966, 972], "900": [966, 974], "dtype": 966, "float64": [966, 972], "1500": 966, "700": 966, "later": [966, 970, 973], "wish": [966, 973, 974, 975], "t7": 966, "t8": 966, "t9": 966, "notic": [966, 970, 971, 973, 975], "shortli": 966, "begin": 966, "bastankhah_linear_k002": [966, 967, 968, 970, 971], "rotor_wd": [966, 967, 968, 970, 971, 973, 974], "n_obj_cmptn": 966, "n_con_cmptn": 966, "impli": 966, "ga": 966, "form": [966, 973], "n_max_gen": 966, "pop_siz": 966, "solver": 966, "problem_par": 966, "algo_par": 966, "seed": 966, "setup_par": 966, "term_par": 966, "ftol": 966, "xtol": 966, "print_info": 966, "sampl": 966, "float_random": 966, "floatrandomsampl": 966, "termin": 966, "defaultsingleobjectivetermin": 966, "001": 966, "n_gen": 966, "n_eval": 966, "cv_min": 966, "cv_avg": 966, "f_avg": 966, "f_min": 966, "257950e": 966, "094916e": 966, "180418e": 966, "141625e": 966, "279782e": 966, "157184e": 966, "404513e": 966, "577682e": 966, "579169e": 966, "703733e": 966, "350": 966, "531147e": 966, "050876e": 966, "400": 966, "000000e": 966, "605222e": 966, "588240e": 966, "450": 966, "103920e": 966, "527620e": 966, "582192e": 966, "550": 966, "732673e": 966, "600": [966, 968, 970, 971], "832754e": 966, "586968e": 966, "591846e": 966, "650": 966, "055741e": 966, "588486e": 966, "604179e": 966, "8416979966": 966, "586179e": 966, "750": [966, 975], "0056020975": 966, "586244e": 966, "592827e": 966, "609887e": 966, "850": 966, "597835e": 966, "616432e": 966, "601994e": 966, "619099e": 966, "608318e": 966, "637494e": 966, "615190e": 966, "645683e": 966, "1050": 966, "622881e": 966, "646187e": 966, "1100": 966, "631506e": 966, "653047e": 966, "1150": 966, "640921e": 966, "655091e": 966, "648388e": 966, "657861e": 966, "1250": 966, "651988e": 966, "663615e": 966, "1300": 966, "655195e": 966, "1350": 966, "658165e": 966, "667660e": 966, "28": 966, "1400": 966, "660791e": 966, "671652e": 966, "1450": 966, "663724e": 966, "676832e": 966, "667884e": 966, "679974e": 966, "1550": 966, "672357e": 966, "685551e": 966, "1600": 966, "676653e": 966, "688468e": 966, "1650": 966, "681032e": 966, "688999e": 966, "1700": 966, "684254e": 966, "692540e": 966, "1750": 966, "686841e": 966, "1800": 966, "689011e": 966, "693343e": 966, "37": 966, "1850": 966, "690736e": 966, "700848e": 966, "38": 966, "1900": 966, "692806e": 966, "701437e": 966, "1950": 966, "695244e": 966, "702613e": 966, "40": 966, "2000": [966, 971], "698077e": 966, "714461e": 966, "2050": 966, "701772e": 966, "2100": 966, "705495e": 966, "716273e": 966, "43": 966, "2150": 966, "709527e": 966, "720787e": 966, "2200": 966, "712644e": 966, "721430e": 966, "45": 966, "2250": 966, "715937e": 966, "722818e": 966, "2300": 966, "719261e": 966, "726242e": 966, "2350": 966, "721874e": 966, "728699e": 966, "48": 966, "2400": 966, "724323e": 966, "729085e": 966, "2450": 966, "726669e": 966, "731540e": 966, "729169e": 966, "736498e": 966, "2550": 966, "731473e": 966, "2600": 966, "733755e": 966, "739439e": 966, "53": 966, "2650": 966, "736553e": 966, "741091e": 966, "54": [966, 973], "2700": 966, "737859e": 966, "2750": 966, "739620e": 966, "746115e": 966, "56": 966, "2800": 966, "741132e": 966, "2850": 966, "742407e": 966, "2900": 966, "743667e": 966, "59": 966, "2950": 966, "744499e": 966, "747450e": 966, "745637e": 966, "749378e": 966, "61": 966, "3050": 966, "746819e": 966, "750740e": 966, "3100": 966, "748079e": 966, "751545e": 966, "63": [966, 973], "3150": 966, "749500e": 966, "752455e": 966, "3200": 966, "750617e": 966, "3250": 966, "751276e": 966, "752688e": 966, "66": [966, 973], "3300": 966, "751675e": 966, "753603e": 966, "3350": 966, "752037e": 966, "753628e": 966, "3400": 966, "752668e": 966, "754781e": 966, "69": 966, "3450": 966, "753223e": 966, "755507e": 966, "3500": 966, "753940e": 966, "755627e": 966, "71": [966, 970, 973], "3550": 966, "754475e": 966, "756641e": 966, "3600": 966, "754917e": 966, "756729e": 966, "3650": 966, "755482e": 966, "756732e": 966, "74": 966, "3700": 966, "755880e": 966, "756858e": 966, "3750": 966, "756292e": 966, "757238e": 966, "76": 966, "3800": 966, "756666e": 966, "757649e": 966, "77": 966, "3850": 966, "756985e": 966, "757750e": 966, "3900": 966, "757224e": 966, "757984e": 966, "79": [966, 972], "3950": 966, "757503e": 966, "758511e": 966, "80": [966, 974], "757798e": 966, "759081e": 966, "81": [966, 974], "4050": 966, "758090e": 966, "82": [966, 973], "4100": 966, "758474e": 966, "759855e": 966, "4150": 966, "758746e": 966, "759968e": 966, "84": [966, 968], "4200": 966, "758965e": 966, "4250": 966, "759223e": 966, "4300": 966, "759449e": 966, "87": [966, 973], "4350": 966, "759646e": 966, "759971e": 966, "4400": 966, "759774e": 966, "760032e": 966, "4450": 966, "759883e": 966, "760064e": 966, "4500": 966, "759951e": 966, "760100e": 966, "91": [966, 974], "4550": 966, "760006e": 966, "760142e": 966, "4600": 966, "760062e": 966, "760593e": 966, "4650": 966, "760121e": 966, "760978e": 966, "94": 966, "4700": 966, "760182e": 966, "4750": 966, "760257e": 966, "96": 966, "4800": 966, "760395e": 966, "760997e": 966, "4850": 966, "760607e": 966, "761020e": 966, "98": [966, 968], "4900": 966, "760797e": 966, "761706e": 966, "4950": 966, "760918e": 966, "761763e": 966, "761054e": 966, "success": 966, "28808": 966, "815290012986": 966, "x_0000": 966, "484848e": 966, "y_0000": 966, "387982e": 966, "x_0001": 966, "999400e": 966, "y_0001": 966, "193226e": 966, "x_0002": 966, "743332e": 966, "y_0002": 966, "853013e": 966, "x_0003": 966, "161273e": 966, "y_0003": 966, "356752e": 966, "x_0004": 966, "010384e": 966, "y_0004": 966, "495968e": 966, "x_0005": 966, "992900e": 966, "y_0005": 966, "499577e": 966, "x_0006": 966, "970308e": 966, "y_0006": 966, "893921e": 966, "x_0007": 966, "136647e": 966, "y_0007": 966, "198557e": 966, "x_0008": 966, "942851e": 966, "y_0008": 966, "147376e": 966, "x_0009": 966, "992843e": 966, "y_0009": 966, "559152e": 966, "880882e": 966, "boundary_0000": 966, "409687e": 966, "boundary_0001": 966, "001485e": 966, "boundary_0002": 966, "boundary_0003": 966, "212439e": 966, "boundary_0004": 966, "038416e": 966, "boundary_0005": 966, "227091e": 966, "boundary_0006": 966, "boundary_0007": 966, "boundary_0008": 966, "714927e": 966, "boundary_0009": 966, "156536e": 966, "dist_0_1": 966, "053034e": 966, "dist_0_2": 966, "133692e": 966, "dist_0_3": 966, "512186e": 966, "dist_0_4": 966, "063629e": 966, "dist_0_5": 966, "032833e": 966, "dist_0_6": 966, "912219e": 966, "dist_0_7": 966, "174197e": 966, "dist_0_8": 966, "235491e": 966, "dist_0_9": 966, "389174e": 966, "dist_1_2": 966, "810253e": 966, "dist_1_3": 966, "227849e": 966, "dist_1_4": 966, "346207e": 966, "dist_1_5": 966, "282549e": 966, "dist_1_6": 966, "644388e": 966, "dist_1_7": 966, "015225e": 966, "dist_1_8": 966, "760754e": 966, "dist_1_9": 966, "459327e": 966, "dist_2_3": 966, "734121e": 966, "dist_2_4": 966, "000907e": 966, "dist_2_5": 966, "035690e": 966, "dist_2_6": 966, "547630e": 966, "dist_2_7": 966, "612574e": 966, "dist_2_8": 966, "428297e": 966, "dist_2_9": 966, "480372e": 966, "dist_3_4": 966, "383697e": 966, "dist_3_5": 966, "427543e": 966, "dist_3_6": 966, "533256e": 966, "dist_3_7": 966, "217365e": 966, "dist_3_8": 966, "085619e": 966, "dist_3_9": 966, "184343e": 966, "dist_4_5": 966, "462646e": 966, "dist_4_6": 966, "321302e": 966, "dist_4_7": 966, "301324e": 966, "dist_4_8": 966, "519941e": 966, "dist_4_9": 966, "401477e": 966, "dist_5_6": 966, "244685e": 966, "dist_5_7": 966, "910567e": 966, "dist_5_8": 966, "002368e": 966, "dist_5_9": 966, "916621e": 966, "dist_6_7": 966, "304425e": 966, "dist_6_8": 966, "924854e": 966, "dist_6_9": 966, "010247e": 966, "dist_7_8": 966, "429886e": 966, "dist_7_9": 966, "403714e": 966, "dist_8_9": 966, "394927e": 966, "int64": [966, 972], "210": 966, "211": 966, "212": 966, "213": 966, "215": 966, "00013": 966, "448": 966, "999": 966, "743": 966, "6137": 966, "994": 966, "338": 966, "419": 966, "685": 966, "147e": 966, "755": 966, "126": [966, 972], "5e": 966, "109": 966, "995": 966, "081": 966, "tname": [966, 971, 972], "u2": [966, 972], "visual": [966, 968, 970, 971, 972, 973], "dpar": 966, "zorder": 966, "outside_whit": 966, "anyth": 966, "organ": 967, "basic_ctrl": 967, "farm_pmask": 967, "pmask": [967, 970, 971], "farm_hubh_data": 967, "hubh_data": 967, "farm_kti": 967, "farm_kti_02": 967, "kti_02": [967, 973], "farm_kti_04": 967, "kti_04": 967, "farm_kti_05": 967, "kti_05": [967, 974, 975], "farm_kti_amb": 967, "kti_amb": 967, "farm_kti_amb_02": 967, "kti_amb_02": 967, "farm_kti_amb_04": 967, "kti_amb_04": 967, "farm_kti_amb_05": 967, "kti_amb_05": 967, "farm_thrust2ct": 967, "farm_yaw2yawm": 967, "farm_yawm2yaw": 967, "axiwake10": 967, "axiwake2": 967, "axiwake20": 967, "axiwake3": 967, "axiwake4": 967, "axiwake5": 967, "axiwake6": 967, "axiwake7": 967, "axiwake8": 967, "axiwake9": 967, "distslic": 967, "distsliced100": 967, "distsliced16": 967, "distsliced25": 967, "distsliced36": 967, "distsliced4": 967, "distsliced400": 967, "distsliced49": 967, "distsliced64": 967, "distsliced81": 967, "distsliced9": 967, "grid100": 967, "grid25": 967, "grid36": 967, "grid4": 967, "grid400": 967, "grid49": 967, "grid64": 967, "grid81": 967, "grid9": [967, 968], "rotor_point": 967, "top_hat": 967, "5mw": [967, 971, 972, 973], "null_typ": 967, "rotor_wd_farmo": 967, "streamlines_1": 967, "streamlines_10": 967, "streamlines_100_farmo": 967, "streamlines_100_yaw": 967, "streamlines_10_farmo": 967, "streamlines_10_yaw": 967, "streamlines_1_farmo": 967, "streamlines_1_yaw": 967, "streamlines_5": 967, "streamlines_50": 967, "streamlines_500": 967, "streamlines_500_farmo": 967, "streamlines_500_yaw": 967, "streamlines_50_farmo": 967, "streamlines_50_yaw": 967, "streamlines_5_farmo": 967, "streamlines_5_yaw": 967, "bastankhah_linear": [967, 974], "sp": 967, "bastankhah_linear_amb": 967, "linear_amb": 967, "bastankhah_linear_amb_k002": 967, "bastankhah_linear_amb_k004": 967, "bastankhah_linear_k004": 967, "bastankhah_linear_lim": 967, "linear_lim": 967, "bastankhah_linear_lim_k002": 967, "bastankhah_linear_lim_k004": 967, "bastankhah_max": 967, "bastankhah_max_amb": 967, "max_amb": 967, "bastankhah_max_amb_k002": 967, "bastankhah_max_amb_k004": 967, "bastankhah_max_k002": 967, "bastankhah_max_k004": 967, "bastankhah_product": 967, "bastankhah_product_k002": 967, "bastankhah_product_k004": 967, "bastankhah_product_lim": 967, "product_lim": 967, "bastankhah_product_lim_k002": 967, "bastankhah_product_lim_k004": 967, "bastankhah_quadrat": [967, 973], "bastankhah_quadratic_amb": 967, "quadratic_amb": 967, "bastankhah_quadratic_amb_k002": 967, "bastankhah_quadratic_amb_k004": 967, "bastankhah_quadratic_k002": 967, "bastankhah_quadratic_k004": 967, "crespohernandez_ambti_linear": 967, "ti_linear": 967, "crespohernandez_ambti_max": 967, "ti_max": 967, "crespohernandez_ambti_quadrat": 967, "ti_quadrat": 967, "crespohernandez_linear": 967, "crespohernandez_linear_k002": 967, "crespohernandez_max": [967, 973, 974, 975], "crespohernandez_max_k002": 967, "crespohernandez_quadrat": 967, "crespohernandez_quadratic_k002": 967, "iecti2005_linear": 967, "19076020221856677": 967, "iecti2005_max": 967, "iecti2005_quadrat": 967, "iecti2019_linear": 967, "iecti2019_max": 967, "iecti2019_quadrat": 967, "jensen_linear": 967, "jensen_linear_amb": 967, "jensen_linear_amb_k002": 967, "jensen_linear_amb_k004": 967, "jensen_linear_amb_k007": 967, "jensen_linear_amb_k0075": 967, "075": 967, "jensen_linear_k002": 967, "jensen_linear_k004": 967, "jensen_linear_k0075": 967, "jensen_linear_lim": 967, "jensen_linear_lim_k002": 967, "jensen_linear_lim_k004": 967, "jensen_linear_lim_k007": 967, "jensen_linear_lim_k0075": 967, "jensen_max": 967, "jensen_max_amb": 967, "jensen_max_amb_k002": 967, "jensen_max_amb_k004": 967, "jensen_max_amb_k007": 967, "jensen_max_amb_k0075": 967, "jensen_max_k002": 967, "jensen_max_k004": 967, "jensen_max_k007": 967, "jensen_max_k0075": 967, "jensen_product": 967, "jensen_product_k002": 967, "jensen_product_k004": 967, "jensen_product_k007": 967, "jensen_product_k0075": 967, "jensen_product_lim": 967, "jensen_product_lim_k002": 967, "jensen_product_lim_k004": 967, "jensen_product_lim_k007": 967, "jensen_product_lim_k0075": 967, "jensen_quadrat": 967, "jensen_quadratic_amb": 967, "jensen_quadratic_amb_k002": 967, "jensen_quadratic_amb_k004": 967, "jensen_quadratic_amb_k007": 967, "jensen_quadratic_amb_k0075": 967, "jensen_quadratic_k002": 967, "jensen_quadratic_k004": 967, "jensen_quadratic_k007": 967, "jensen_quadratic_k0075": 967, "porteagel_linear": [967, 975], "porteagel_linear_amb": 967, "porteagel_linear_amb_k002": 967, "porteagel_linear_amb_k004": 967, "porteagel_linear_k002": 967, "porteagel_linear_k004": 967, "porteagel_linear_lim": 967, "porteagel_linear_lim_k002": 967, "porteagel_linear_lim_k004": 967, "porteagel_max": 967, "porteagel_max_amb": 967, "porteagel_max_amb_k002": 967, "porteagel_max_amb_k004": 967, "porteagel_max_k002": 967, "porteagel_max_k004": 967, "porteagel_product": 967, "porteagel_product_k002": 967, "porteagel_product_k004": 967, "porteagel_product_lim": 967, "porteagel_product_lim_k002": 967, "porteagel_product_lim_k004": 967, "porteagel_quadrat": 967, "porteagel_quadratic_amb": 967, "porteagel_quadratic_amb_k002": 967, "porteagel_quadratic_amb_k004": 967, "porteagel_quadratic_k002": 967, "porteagel_quadratic_k004": 967, "turboparkix_linear_a002_dx001": 967, "turboparkix_linear_a002_dx1": 967, "turboparkix_linear_a002_dx10": 967, "turboparkix_linear_a002_dx100": 967, "turboparkix_linear_a002_dx5": 967, "turboparkix_linear_a002_dx50": 967, "turboparkix_linear_a004_dx001": 967, "turboparkix_linear_a004_dx1": 967, "turboparkix_linear_a004_dx10": 967, "turboparkix_linear_a004_dx100": 967, "turboparkix_linear_a004_dx5": 967, "turboparkix_linear_a004_dx50": 967, "turboparkix_linear_amb_a002_dx001": 967, "turboparkix_linear_amb_a002_dx1": 967, "turboparkix_linear_amb_a002_dx10": 967, "turboparkix_linear_amb_a002_dx100": 967, "turboparkix_linear_amb_a002_dx5": 967, "turboparkix_linear_amb_a002_dx50": 967, "turboparkix_linear_amb_a004_dx001": 967, "turboparkix_linear_amb_a004_dx1": 967, "turboparkix_linear_amb_a004_dx10": 967, "turboparkix_linear_amb_a004_dx100": 967, "turboparkix_linear_amb_a004_dx5": 967, "turboparkix_linear_amb_a004_dx50": 967, "turboparkix_linear_lim_a002_dx001": 967, "turboparkix_linear_lim_a002_dx1": 967, "turboparkix_linear_lim_a002_dx10": 967, "turboparkix_linear_lim_a002_dx100": 967, "turboparkix_linear_lim_a002_dx5": 967, "turboparkix_linear_lim_a002_dx50": 967, "turboparkix_linear_lim_a004_dx001": 967, "turboparkix_linear_lim_a004_dx1": 967, "turboparkix_linear_lim_a004_dx10": 967, "turboparkix_linear_lim_a004_dx100": 967, "turboparkix_linear_lim_a004_dx5": 967, "turboparkix_linear_lim_a004_dx50": 967, "turboparkix_max_a002_dx001": 967, "turboparkix_max_a002_dx1": 967, "turboparkix_max_a002_dx10": 967, "turboparkix_max_a002_dx100": 967, "turboparkix_max_a002_dx5": 967, "turboparkix_max_a002_dx50": 967, "turboparkix_max_a004_dx001": 967, "turboparkix_max_a004_dx1": 967, "turboparkix_max_a004_dx10": 967, "turboparkix_max_a004_dx100": 967, "turboparkix_max_a004_dx5": 967, "turboparkix_max_a004_dx50": 967, "turboparkix_max_amb_a002_dx001": 967, "turboparkix_max_amb_a002_dx1": 967, "turboparkix_max_amb_a002_dx10": 967, "turboparkix_max_amb_a002_dx100": 967, "turboparkix_max_amb_a002_dx5": 967, "turboparkix_max_amb_a002_dx50": 967, "turboparkix_max_amb_a004_dx001": 967, "turboparkix_max_amb_a004_dx1": 967, "turboparkix_max_amb_a004_dx10": 967, "turboparkix_max_amb_a004_dx100": 967, "turboparkix_max_amb_a004_dx5": 967, "turboparkix_max_amb_a004_dx50": 967, "turboparkix_product_a002_dx001": 967, "turboparkix_product_a002_dx1": 967, "turboparkix_product_a002_dx10": 967, "turboparkix_product_a002_dx100": 967, "turboparkix_product_a002_dx5": 967, "turboparkix_product_a002_dx50": 967, "turboparkix_product_a004_dx001": 967, "turboparkix_product_a004_dx1": 967, "turboparkix_product_a004_dx10": 967, "turboparkix_product_a004_dx100": 967, "turboparkix_product_a004_dx5": 967, "turboparkix_product_a004_dx50": 967, "turboparkix_product_lim_a002_dx001": 967, "turboparkix_product_lim_a002_dx1": 967, "turboparkix_product_lim_a002_dx10": 967, "turboparkix_product_lim_a002_dx100": 967, "turboparkix_product_lim_a002_dx5": 967, "turboparkix_product_lim_a002_dx50": 967, "turboparkix_product_lim_a004_dx001": 967, "turboparkix_product_lim_a004_dx1": 967, "turboparkix_product_lim_a004_dx10": 967, "turboparkix_product_lim_a004_dx100": 967, "turboparkix_product_lim_a004_dx5": 967, "turboparkix_product_lim_a004_dx50": 967, "turboparkix_quadratic_a002_dx001": 967, "turboparkix_quadratic_a002_dx1": 967, "turboparkix_quadratic_a002_dx10": 967, "turboparkix_quadratic_a002_dx100": 967, "turboparkix_quadratic_a002_dx5": 967, "turboparkix_quadratic_a002_dx50": 967, "turboparkix_quadratic_a004_dx001": 967, "turboparkix_quadratic_a004_dx1": 967, "turboparkix_quadratic_a004_dx10": 967, "turboparkix_quadratic_a004_dx100": 967, "turboparkix_quadratic_a004_dx5": 967, "turboparkix_quadratic_a004_dx50": 967, "turboparkix_quadratic_amb_a002_dx001": 967, "turboparkix_quadratic_amb_a002_dx1": 967, "turboparkix_quadratic_amb_a002_dx10": 967, "turboparkix_quadratic_amb_a002_dx100": 967, "turboparkix_quadratic_amb_a002_dx5": 967, "turboparkix_quadratic_amb_a002_dx50": 967, "turboparkix_quadratic_amb_a004_dx001": 967, "turboparkix_quadratic_amb_a004_dx1": 967, "turboparkix_quadratic_amb_a004_dx10": 967, "turboparkix_quadratic_amb_a004_dx100": 967, "turboparkix_quadratic_amb_a004_dx5": 967, "turboparkix_quadratic_amb_a004_dx50": 967, "turbopark_linear_a002": 967, "turbopark_linear_a004": 967, "turbopark_linear_amb_a002": 967, "turbopark_linear_amb_a004": 967, "turbopark_linear_lim_a002": 967, "turbopark_linear_lim_a004": 967, "turbopark_max_a002": 967, "turbopark_max_a004": 967, "turbopark_max_amb_a002": 967, "turbopark_max_amb_a004": 967, "turbopark_product_a002": 967, "turbopark_product_a004": 967, "turbopark_product_lim_a002": 967, "turbopark_product_lim_a004": 967, "turbopark_quadratic_a002": 967, "turbopark_quadratic_a004": 967, "turbopark_quadratic_amb_a002": 967, "turbopark_quadratic_amb_a004": 967, "my_jensen": 967, "042": 967, "jensenwake45": 967, "freshli": 967, "similarli": [967, 970, 975], "section": [967, 969, 972, 973, 975], "explor": 968, "download": 968, "newa": 968, "websit": 968, "4464": 968, "stamp": 968, "mark": 968, "month": 968, "minut": 968, "kinet": [968, 969], "energi": [968, 969], "vari": 968, "assumpt": 968, "variat": 968, "neglect": 968, "inflow": [968, 973], "manual": 968, "alreadi": [968, 972], "howev": [968, 975], "neither": [968, 970], "goal": 968, "certain": 968, "approxim": 968, "west": [968, 971, 975], "undo": 968, "earlier": 968, "p0": [968, 970, 973, 974], "nfarm": [968, 970, 972, 973, 974, 975], "1f": [968, 970, 973, 974], "2f": [968, 970, 973, 974], "340": [968, 971], "14377": 968, "593022": 968, "1533": 968, "584614": 968, "83636": 968, "192504": 968, "1299": 968, "635898": 968, "299802": 968, "1362": 968, "286874": 968, "538688": 968, "1501": 968, "771092": 968, "226181": 968, "1940": 968, "207249": 968, "532676": 968, "4041": 968, "896723": 968, "22320": 968, "131": 968, "reflect": [969, 975], "script": 969, "inform": [969, 972, 973], "arbitrari": 969, "becom": 969, "reli": 969, "averag": 969, "stem": 969, "henc": [969, 970, 971, 973], "approach": 969, "might": 969, "sdata": [970, 975], "exce": 970, "nor": 970, "pmax_": 970, "s_": 970, "pmax_4": 970, "6000": [970, 971], "pmax_2": 970, "pmax_0": 970, "pmax_1": 970, "pmax_3": 970, "set_pmax": 970, "thought": 970, "sinc": 970, "od": 970, "furthermor": 970, "somewher": 970, "present": 970, "influenc": 970, "vars_to_amb": 970, "o1": 970, "maxp": [970, 971], "000000": [970, 972, 973, 975], "100622": 970, "403": 970, "460668": 970, "230759": 970, "160101": 970, "836726": 970, "448432": 970, "102": [970, 974], "024826": 970, "1771": 970, "969501": 970, "727": 970, "422438": 970, "109672": 970, "440": 970, "497551": 970, "664896": 970, "328": 970, "099527": 970, "346418": 970, "256": 970, "059846": 970, "4562": 970, "500000": 970, "218395": 970, "1934": 970, "349917": 970, "026105": 970, "1202": 970, "442515": 970, "419438": 970, "926": 970, "179190": 970, "069268": 970, "768": 970, "743105": 970, "740422": 970, "265493": 970, "610241": 970, "4829": 970, "480538": 970, "737726": 970, "305147": 970, "704317": 970, "538785": 970, "001123": 970, "463783": 970, "027022": 970, "922952": 970, "572237": 970, "549852": 970, "200276": 970, "124457": 970, "856675": 970, "753726": 970, "552823": 970, "501976": 970, "340518": 970, "re": 970, "o0": 970, "edgecolor": 970, "white": 970, "ylorrd": 970, "vmin": 970, "vmax": 970, "nanmax": 970, "ylgn": 970, "produc": [970, 973], "off": 971, "persu": 971, "east": 971, "wd_min": 971, "wd_max": 971, "170": 971, "191": 971, "290": 971, "110": 971, "correspons": 971, "fulfil": 971, "ttype": 971, "nrel": [971, 972, 973], "d126": [971, 972, 973], "h90": [971, 972, 973], "sector_rul": 971, "rews_min": 971, "rews_max": 971, "orient": 971, "wa": 971, "5001": 971, "7000": 971, "high": 971, "westerli": 971, "south": 971, "summari": 972, "skip": 972, "own": 972, "ask": 972, "6e": 972, "4e": 972, "2e": 972, "519e": 972, "557e": 972, "107e": 972, "easili": 972, "2518": 972, "600000": 972, "790000": 972, "633459": 972, "1557": 972, "076947": 972, "803665": 972, "176627": 972, "1290": 972, "332498": 972, "808234": 972, "955794": 972, "1167": 972, "325199": 972, "812210": 972, "821354": 972, "1106": 972, "880886": 972, "818932": 972, "linspac": 972, "15000": 972, "point_result": 972, "npoint": 972, "set_xlabel": 972, "set_ylabel": 972, "916": 972, "desir": [973, 975], "timeseries_8000": 973, "test_farm_67": 973, "further": 973, "alwai": 973, "101": [973, 974], "08": [], "598951": 973, "307949": 973, "067607": 973, "522240": 973, "728003": 973, "299": 973, "208883": 973, "4868": 973, "2712": 973, "819583": 973, "435150": 973, "4752": 973, "878044": 973, "700000": 973, "750000": 973, "607321": 973, "4828": 973, "202797": 973, "769528": 973, "3234": 973, "107125": 973, "536000": 973, "turbine_result": 973, "nresult": 973, "3067": 973, "723397": 973, "2778": 973, "987770": 973, "613545": 973, "555798": 973, "825445": 973, "873257": 973, "2531": 973, "065918": 973, "506213": 973, "713413": 973, "2702": 973, "820210": 973, "540564": 973, "780747": 973, "2739": 973, "058250": 973, "547812": 973, "805992": 973, "2593": 973, "172270": 973, "518634": 973, "737070": 973, "2625": 973, "796799": 973, "525159": 973, "748704": 973, "2591": 973, "950988": 973, "518390": 973, "731988": 973, "2864": 973, "102273": 973, "572820": 973, "860799": 973, "2571": 973, "260829": 973, "514252": 973, "726062": 973, "2633": 973, "819847": 973, "526764": 973, "755245": 973, "343933": 973, "172137": 973, "676705": 973, "994150": 973, "716189": 973, "001980": 973, "705491": 973, "089536": 973, "524245": 973, "072262": 973, "177": 973, "205": 973, "1558": 973, "seen": 973, "mean_eff": [973, 974], "fun": 973, "faster": 973, "overhead": 973, "But": 973, "extrem": 973, "realli": 973, "dai": 973, "nmean": 973, "launch": 973, "localclust": 973, "516ec816": [], "tcp": 973, "127": 973, "36771": [], "gib": 973, "dashboard": 973, "8787": 973, "statu": 973, "shut": 973, "down": 973, "runtim": 973, "localhost": 973, "address": 973, "plenti": 973, "relat": 974, "206": [], "686": 974, "perfectli": 974, "fine": 974, "aim": 975, "set_yawm": 975, "want": 975, "sensit": 975, "continu": 975, "cross": 975, "downstream": 975, "clearli": 975, "frontal": 975, "hit": 975, "farm_df": 975, "146549": 975, "042770": 975, "240": 975, "co": 975, "corect": 975, "fact": 975, "p_": 975, "crespohernandez": 975, "even": 975, "though": 975, "most": 975, "jupyt": 960, "f1810d0d": [], "35735": [], "204": [], "39a3386f": 973, "44259": 973, "203": 974, "103": 974}, "objects": {"foxes.core": [[0, 0, 1, "", "Algorithm", "Abstract base class for algorithms."], [12, 0, 1, "", "Data", "Container for data and meta data."], [14, 0, 1, "", "DataCalcModel", "Abstract base class for models with that run calculation on xarray Dataset data."], [17, 0, 1, "", "ExtendedStates", "States extended by point data models."], [27, 0, 1, "", "FarmController", "Analyses selected turbine models and handles their call."], [35, 0, 1, "", "FarmDataModel", "Abstract base class for models that modify farm data."], [40, 0, 1, "", "FarmDataModelList", "A list of farm data models."], [47, 0, 1, "", "FarmModel", "A FarmDataModel that operates on the farm level (in contrast to a TurbineModel, which allows application to a subset of turbines)."], [48, 0, 1, "", "Model", "Base class for all models."], [57, 0, 1, "", "PartialWakesModel", "Abstract base class for partial wakes models."], [64, 0, 1, "", "PointDataModel", "Abstract base class for models that modify point based data."], [68, 0, 1, "", "PointDataModelList", "A list of point data models."], [75, 0, 1, "", "RotorModel", "Abstract base class of rotor models."], [84, 0, 1, "", "States", "Abstract base class for states."], [89, 0, 1, "", "Turbine", "An individual wind turbine."], [93, 0, 1, "", "TurbineModel", "Abstract base class for turbine models."], [95, 0, 1, "", "TurbineType", "Abstract base class for turbine type models."], [97, 0, 1, "", "VerticalProfile", "Abstract base class for vertical profiles."], [101, 0, 1, "", "WakeFrame", "Abstract base class for wake frames."], [106, 0, 1, "", "WakeModel", "Abstract base class for wake models."], [110, 0, 1, "", "WakeSuperposition", "Abstract base class for wake superposition models."], [113, 0, 1, "", "WindFarm", "The wind farm."]], "foxes.core.Algorithm": [[1, 1, 1, "", "__init__", "Constructor."], [2, 1, 1, "", "finalize", "Finalizes the algorithm."], [3, 1, 1, "", "finalize_model", "Call the finalization routine of the model, if not to be kept."], [4, 1, 1, "", "get_models_data", "Creates xarray from model input data."], [5, 2, 1, "", "idata_mem", "The current idata memory"], [6, 1, 1, "", "initialize", "Initializes the algorithm."], [7, 1, 1, "", "new", "Run-time algorithm factory."], [8, 1, 1, "", "new_point_data", "Creates a point data xarray object, containing only points."], [9, 1, 1, "", "print", "Print function, based on verbosity."], [10, 1, 1, "", "update_idata", "Add to idata memory, optionally update and return idata object."], [11, 1, 1, "", "update_n_turbines", "Reset the number of turbines, according to self.farm"]], "foxes.core.Data": [[13, 1, 1, "", "__init__", "Constructor."]], "foxes.core.DataCalcModel": [[15, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [16, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.ExtendedStates": [[18, 1, 1, "", "__init__", "Constructor."], [19, 1, 1, "", "append", "Add a model to the list"], [20, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [21, 1, 1, "", "finalize", "Finalizes the model."], [22, 1, 1, "", "index", "The index list"], [23, 1, 1, "", "initialize", "Initializes the model."], [24, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [25, 1, 1, "", "size", "The total number of states."], [26, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.FarmController": [[28, 1, 1, "", "__init__", "Constructor."], [29, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [30, 1, 1, "", "collect_models", "Analyze and gather turbine models, based on the turbines of the wind farm."], [31, 1, 1, "", "finalize", "Finalizes the model."], [32, 1, 1, "", "initialize", "Initializes the model."], [33, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [34, 1, 1, "", "set_pars", "Set parameters for a turbine model"]], "foxes.core.FarmDataModel": [[36, 1, 1, "", "__init__", "Constructor."], [37, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [38, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [39, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.FarmDataModelList": [[41, 1, 1, "", "__init__", "Constructor."], [42, 1, 1, "", "append", "Add a model to the list"], [43, 1, 1, "", "calculate", "The main model calculation."], [44, 1, 1, "", "finalize", "Finalizes the model."], [45, 1, 1, "", "initialize", "Initializes the model."], [46, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.core.Model": [[49, 1, 1, "", "__init__", "Constructor."], [50, 1, 1, "", "__repr__", "Return repr(self)."], [51, 1, 1, "", "finalize", "Finalizes the model."], [52, 1, 1, "", "get_data", "Getter for a data entry in either the given data source, or the model object."], [53, 1, 1, "", "initialize", "Initializes the model."], [54, 2, 1, "", "initialized", "Initialization flag."], [55, 2, 1, "", "model_id", "Unique id based on the model type."], [56, 1, 1, "", "var", "Creates a model specific variable name."]], "foxes.core.PartialWakesModel": [[58, 1, 1, "", "__init__", "Constructor."], [59, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [60, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [61, 1, 1, "", "initialize", "Initializes the model."], [62, 1, 1, "", "new", "Run-time partial wakes factory."], [63, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.core.PointDataModel": [[65, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [66, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [67, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.PointDataModelList": [[69, 1, 1, "", "__init__", "Constructor."], [70, 1, 1, "", "append", "Add a model to the list"], [71, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [72, 1, 1, "", "finalize", "Finalizes the model."], [73, 1, 1, "", "initialize", "Initializes the model."], [74, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.core.RotorModel": [[76, 1, 1, "", "__init__", "Constructor."], [77, 1, 1, "", "calculate", "Calculate ambient rotor effective results."], [78, 1, 1, "", "design_points", "The rotor model design points."], [79, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [80, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [81, 1, 1, "", "n_rotor_points", "The number of rotor points"], [82, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [83, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.core.States": [[85, 1, 1, "", "index", "The index list"], [86, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [87, 1, 1, "", "size", "The total number of states."], [88, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.Turbine": [[90, 1, 1, "", "__init__", "Constructor."], [91, 1, 1, "", "add_model", "Add a turbine model to the list."], [92, 1, 1, "", "insert_model", "Insert a turbine model into the list of models."]], "foxes.core.TurbineModel": [[94, 1, 1, "", "calculate", "The main model calculation."]], "foxes.core.TurbineType": [[96, 1, 1, "", "__init__", "Constructor."]], "foxes.core.VerticalProfile": [[98, 1, 1, "", "calculate", "Run the profile calculation."], [99, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."], [100, 1, 1, "", "new", "Run-time profile factory."]], "foxes.core.WakeFrame": [[102, 1, 1, "", "calc_centreline_integral", "Integrates variables along the centreline."], [103, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [104, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [105, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.core.WakeModel": [[107, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [108, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [109, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.core.WakeSuperposition": [[111, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [112, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.core.WindFarm": [[114, 1, 1, "", "__init__", "Constructor."], [115, 1, 1, "", "add_turbine", "Add a wind turbine to the list."], [116, 2, 1, "", "n_turbines", "The number of turbines in the wind farm"], [117, 2, 1, "", "turbine_names", "The list of names of all turbines"]], "foxes.data": [[118, 0, 1, "", "StaticData", "A DataBook filled with static data from this directory."], [120, 3, 1, "", "parse_Pct_file_name", "Parse basic turbine data from file name"], [121, 3, 1, "", "parse_Pct_two_files", "Parse basic turbine data from file names"]], "foxes.data.StaticData": [[119, 1, 1, "", "__init__", "Constructor."]], "foxes.input.farm_layout": [[122, 3, 1, "", "add_from_csv", "Add turbines to wind farm via csv input file."], [123, 3, 1, "", "add_from_df", "Add turbines to wind farm via pandas DataFrame."], [124, 3, 1, "", "add_from_file", "Add turbines from file."], [125, 3, 1, "", "add_from_json", "Add turbimes from a json file."], [126, 3, 1, "", "add_grid", "Add a regular grid of turbines."], [127, 3, 1, "", "add_row", "Add a single row of turbines."]], "foxes.input.states": [[128, 0, 1, "", "FieldDataNC", "Heterogeneous ambient states on a regular horizontal grid in NetCDF format."], [136, 0, 1, "", "MultiHeightStates", "States with multiple heights data per entry."], [147, 0, 1, "", "MultiHeightTimeseries", "Multi-height timeseries states data."], [149, 0, 1, "", "ScanWS", "A given list of wind speeds, all other variables are fixed."], [156, 0, 1, "", "SingleStateStates", "A single uniform state."], [163, 0, 1, "", "StatesTable", "States from a pandas.DataFrame or a pandas readable file."], [174, 0, 1, "", "Timeseries", "Timeseries states data."], [176, 3, 1, "", "create_random_abl_states", "Create random abl states."]], "foxes.input.states.FieldDataNC": [[129, 1, 1, "", "__init__", "Constructor."], [130, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [131, 1, 1, "", "index", "The index list"], [132, 1, 1, "", "initialize", "Initializes the model."], [133, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [134, 1, 1, "", "size", "The total number of states."], [135, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightStates": [[137, 4, 1, "", "RDICT", ""], [138, 1, 1, "", "__init__", "Constructor."], [139, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [140, 1, 1, "", "finalize", "Finalizes the model."], [141, 1, 1, "", "index", "The index list"], [142, 1, 1, "", "initialize", "Initializes the model."], [143, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [144, 1, 1, "", "reset", "Reset the states, optionally select states"], [145, 1, 1, "", "size", "The total number of states."], [146, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightTimeseries": [[148, 4, 1, "", "RDICT", ""]], "foxes.input.states.ScanWS": [[150, 1, 1, "", "__init__", "Constructor."], [151, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [152, 1, 1, "", "initialize", "Initializes the model."], [153, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [154, 1, 1, "", "size", "The total number of states."], [155, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.SingleStateStates": [[157, 1, 1, "", "__init__", "Constructor."], [158, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [159, 1, 1, "", "initialize", "Initializes the model."], [160, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [161, 1, 1, "", "size", "The total number of states."], [162, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.StatesTable": [[164, 4, 1, "", "RDICT", ""], [165, 1, 1, "", "__init__", "Constructor."], [166, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [167, 1, 1, "", "finalize", "Finalizes the model."], [168, 1, 1, "", "index", "The index list"], [169, 1, 1, "", "initialize", "Initializes the model."], [170, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [171, 1, 1, "", "reset", "Reset the states, optionally select states"], [172, 1, 1, "", "size", "The total number of states."], [173, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.Timeseries": [[175, 4, 1, "", "RDICT", ""]], "foxes.input.windio": [[177, 3, 1, "", "read_case", "Reads a WindIO case"]], "foxes.models.farm_controllers": [[178, 0, 1, "", "BasicFarmController", "The basic farm controller, running all turbine models in their order, without conditions."]], "foxes.models.farm_models": [[179, 0, 1, "", "Turbine2FarmModel", "Wrapper that promotes turbine models into farm models, simply by selecting all turbines."]], "foxes.models.farm_models.Turbine2FarmModel": [[180, 1, 1, "", "__init__", "Constructor."], [181, 1, 1, "", "__repr__", "Return repr(self)."], [182, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [183, 1, 1, "", "finalize", "Finalizes the model."], [184, 1, 1, "", "initialize", "Initializes the model."], [185, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.model_book": [[186, 0, 1, "", "Dict", "A slightly enhanced dictionary."], [189, 0, 1, "", "ModelBook", "Container for all kinds of models."]], "foxes.models.model_book.Dict": [[187, 1, 1, "", "__getitem__", "x.__getitem__(y) <==> x[y]"], [188, 1, 1, "", "__init__", "Constructor."]], "foxes.models.model_book.ModelBook": [[190, 1, 1, "", "__getitem__", ""], [191, 1, 1, "", "__init__", "Constructor."], [192, 1, 1, "", "finalize", "Finalizes the model."], [193, 1, 1, "", "print_toc", "Print the contents."]], "foxes.models.partial_wakes": [[194, 0, 1, "", "Mapped", "Partial wake models depending on the wake model (type)."], [201, 0, 1, "", "PartialAxiwake", "Partial wake calculation for axial wake models."], [209, 0, 1, "", "PartialDistSlicedWake", "Partial wakes for distance sliced wake models, making use of their structure."], [217, 0, 1, "", "PartialGrid", "Partial wakes on a grid rotor that may differ from the one in the algorithm."], [220, 0, 1, "", "PartialTopHat", "Partial wakes for top-hat models."], [228, 0, 1, "", "RotorPoints", "Partial wakes calculation directly by the rotor model."]], "foxes.models.partial_wakes.Mapped": [[195, 1, 1, "", "__init__", "Constructor."], [196, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [197, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [198, 1, 1, "", "finalize", "Finalizes the model."], [199, 1, 1, "", "initialize", "Initializes the model."], [200, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialAxiwake": [[202, 1, 1, "", "__init__", "Constructor."], [203, 1, 1, "", "__repr__", "Return repr(self)."], [204, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [205, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [206, 1, 1, "", "finalize", "Finalizes the model."], [207, 1, 1, "", "initialize", "Initializes the model."], [208, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialDistSlicedWake": [[210, 1, 1, "", "__init__", "Constructor."], [211, 1, 1, "", "__repr__", "Return repr(self)."], [212, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [213, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [214, 1, 1, "", "finalize", "Finalizes the model."], [215, 1, 1, "", "initialize", "Initializes the model."], [216, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialGrid": [[218, 1, 1, "", "__init__", "Constructor."], [219, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes.PartialTopHat": [[221, 1, 1, "", "__init__", "Constructor."], [222, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [223, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [224, 1, 1, "", "finalize", "Finalizes the model."], [225, 1, 1, "", "get_wake_points", "Get the wake calculation points."], [226, 1, 1, "", "initialize", "Initializes the model."], [227, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.RotorPoints": [[229, 1, 1, "", "__init__", "Constructor."], [230, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [231, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [232, 1, 1, "", "get_wake_points", "Get the wake calculation points."], [233, 1, 1, "", "initialize", "Initializes the model."], [234, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.point_models": [[235, 0, 1, "", "SetUniformData", "Set uniform data (can be state dependent)"], [240, 0, 1, "", "TKE2TI", "Calculates TI from TKE, using TI = sqrt( 3/2 * TKE) / WS"], [243, 0, 1, "", "WakeDeltas", "This point model simply subtracts ambient results from waked results."]], "foxes.models.point_models.SetUniformData": [[236, 1, 1, "", "__init__", "Constructor."], [237, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [238, 1, 1, "", "initialize", "Initializes the model."], [239, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.TKE2TI": [[241, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [242, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.WakeDeltas": [[244, 1, 1, "", "__init__", "Constructor."], [245, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [246, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.rotor_models": [[247, 0, 1, "", "CentreRotor", "The centre rotor model."], [253, 0, 1, "", "GridRotor", "The weighted regular grid rotor model, composed maximally of n x n points, possibly kicking out the outside points."]], "foxes.models.rotor_models.CentreRotor": [[248, 1, 1, "", "design_points", "The rotor model design points."], [249, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [250, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [251, 1, 1, "", "n_rotor_points", "The number of rotor points"], [252, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.GridRotor": [[254, 1, 1, "", "__init__", "Constructor."], [255, 1, 1, "", "__repr__", "Return repr(self)."], [256, 1, 1, "", "design_points", "The rotor model design points."], [257, 1, 1, "", "initialize", "Initializes the model."], [258, 1, 1, "", "n_rotor_points", "The number of rotor points"], [259, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.turbine_models": [[260, 0, 1, "", "Calculator", "Calculates variables based on given functions."], [264, 0, 1, "", "LookupTable", "Calculates the data by interpolation of lookup-table data"], [269, 0, 1, "", "PowerMask", "Invokes a maximal power value."], [275, 0, 1, "", "RotorCentreCalc", "Calculates data at the rotor centre"], [281, 0, 1, "", "SectorManagement", "Changes variables based on variable range conditions."], [286, 0, 1, "", "SetFarmVars", "Set farm data variables to given data."], [293, 0, 1, "", "SetXYHD", "Sets basic turbine data, from turbine object to farm data."], [297, 0, 1, "", "TableFactors", "Multiplies variables by factors from a two dimensional table."], [302, 0, 1, "", "Thrust2Ct", "Calculates ct from thrust force data."], [306, 0, 1, "", "YAW2YAWM", "Calculates delta yaw (i.e. YAWM) from absolute yaw (i.e. YAW)"], [309, 0, 1, "", "YAWM2YAW", "Calculates absolute yaw (i.e. YAWM) from delta yaw (i.e. YAWM)"], [312, 0, 1, "", "kTI", "Calculates the wake model parameter k as a linear function of TI."]], "foxes.models.turbine_models.Calculator": [[261, 1, 1, "", "__init__", "Constructor."], [262, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [263, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.LookupTable": [[265, 1, 1, "", "__init__", "Constructor."], [266, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [267, 1, 1, "", "initialize", "Initializes the model."], [268, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.PowerMask": [[270, 1, 1, "", "__init__", "Constructor."], [271, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [272, 1, 1, "", "initialize", "Initializes the model."], [273, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [274, 1, 1, "", "update_P_ct", ""]], "foxes.models.turbine_models.RotorCentreCalc": [[276, 1, 1, "", "__init__", "Constructor."], [277, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [278, 1, 1, "", "finalize", "Finalizes the model."], [279, 1, 1, "", "initialize", "Initializes the model."], [280, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SectorManagement": [[282, 1, 1, "", "__init__", "Constructor."], [283, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [284, 1, 1, "", "initialize", "Initializes the model."], [285, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SetFarmVars": [[287, 1, 1, "", "__init__", "Constructor."], [288, 1, 1, "", "add_var", "Add data for a variable."], [289, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [290, 1, 1, "", "initialize", "Initializes the model."], [291, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [292, 1, 1, "", "reset", "Remove all variables."]], "foxes.models.turbine_models.SetXYHD": [[294, 1, 1, "", "__init__", "Constructor."], [295, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [296, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.TableFactors": [[298, 1, 1, "", "__init__", "Constructor."], [299, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [300, 1, 1, "", "initialize", "Initializes the model."], [301, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.Thrust2Ct": [[303, 1, 1, "", "__init__", "Constructor."], [304, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [305, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAW2YAWM": [[307, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [308, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAWM2YAW": [[310, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [311, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.kTI": [[313, 1, 1, "", "__init__", "Constructor."], [314, 1, 1, "", "__repr__", "Return repr(self)."], [315, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [316, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types": [[317, 0, 1, "", "CpCtFile", "Calculate power and ct by interpolating from cp-ct-curve data file (or pandas DataFrame)."], [319, 0, 1, "", "CpCtFromTwo", "Calculate power and ct by interpolating cp and ct from two files (or two pandas DataFrames)."], [321, 0, 1, "", "NullType", "A turbine type that does not compute any data."], [324, 0, 1, "", "PCtFile", "Calculate power and ct by interpolating from power-ct-curve data file (or pandas DataFrame)."], [330, 0, 1, "", "PCtFromTwo", "Calculate power and ct by interpolating from power curve and ct curve data files."], [336, 0, 1, "", "WsRho2PCtFromTwo", "Calculate air density dependent power and ct values, as given by two individual files."]], "foxes.models.turbine_types.CpCtFile": [[318, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.CpCtFromTwo": [[320, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.NullType": [[322, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [323, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFile": [[325, 1, 1, "", "__init__", "Constructor."], [326, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [327, 1, 1, "", "finalize", "Finalizes the model."], [328, 1, 1, "", "initialize", "Initializes the model."], [329, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFromTwo": [[331, 1, 1, "", "__init__", "Constructor."], [332, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [333, 1, 1, "", "finalize", "Finalizes the model."], [334, 1, 1, "", "initialize", "Initializes the model."], [335, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsRho2PCtFromTwo": [[337, 1, 1, "", "__init__", "Constructor."], [338, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [339, 1, 1, "", "finalize", "Finalizes the model."], [340, 1, 1, "", "initialize", "Initializes the model."], [341, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.vertical_profiles": [[342, 0, 1, "", "ABLLogNeutralWsProfile", "The neutral ABL wind speed log profile."], [345, 0, 1, "", "ABLLogStableWsProfile", "The stable ABL wind speed log profile."], [348, 0, 1, "", "ABLLogUnstableWsProfile", "The unstable ABL wind speed log profile."], [351, 0, 1, "", "ABLLogWsProfile", "The neutral/stable/unstable ABL wind speed log profile."], [354, 0, 1, "", "ShearedProfile", "A wind shear profile, based on a shear exponent."], [357, 0, 1, "", "UniformProfile", "A profile with uniform values."]], "foxes.models.vertical_profiles.ABLLogNeutralWsProfile": [[343, 1, 1, "", "calculate", "Run the profile calculation."], [344, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogStableWsProfile": [[346, 1, 1, "", "calculate", "Run the profile calculation."], [347, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogUnstableWsProfile": [[349, 1, 1, "", "calculate", "Run the profile calculation."], [350, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogWsProfile": [[352, 1, 1, "", "calculate", "Run the profile calculation."], [353, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ShearedProfile": [[355, 1, 1, "", "calculate", "Run the profile calculation."], [356, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.UniformProfile": [[358, 1, 1, "", "__init__", "Constructor"], [359, 1, 1, "", "calculate", "Run the profile calculation."], [360, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.wake_frames": [[361, 0, 1, "", "FarmOrder", "Invokes turbine ordering as defined by the wind farm."], [368, 0, 1, "", "RotorWD", "Align the first axis for each rotor with the local normalized wind direction."], [373, 0, 1, "", "Streamlines", "Streamline following wakes"], [380, 0, 1, "", "YawedWakes", "Bend the wakes for yawed turbines."]], "foxes.models.wake_frames.FarmOrder": [[362, 1, 1, "", "__init__", "Constructor."], [363, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [364, 1, 1, "", "finalize", "Finalizes the model."], [365, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [366, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [367, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.RotorWD": [[369, 1, 1, "", "__init__", "Constructor."], [370, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [371, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [372, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.models.wake_frames.Streamlines": [[374, 1, 1, "", "__init__", "Constructor."], [375, 1, 1, "", "__repr__", "Return repr(self)."], [376, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [377, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [378, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [379, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.YawedWakes": [[381, 1, 1, "", "__init__", "Constructor."], [382, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [383, 1, 1, "", "finalize", "Finalizes the model."], [384, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [385, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [386, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_models": [[387, 0, 1, "", "AxisymmetricWakeModel", "Abstract base class for wake models that depend on (x, r) separately."], [390, 0, 1, "", "DistSlicedWakeModel", "Abstract base class for wake models for which the x-denpendency can be separated from the yz-dependency."], [397, 0, 1, "", "GaussianWakeModel", "Abstract base class for Gaussian wake models."], [400, 0, 1, "", "TopHatWakeModel", "Abstract base class for top-hat wake models."]], "foxes.models.wake_models.AxisymmetricWakeModel": [[388, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."], [389, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."]], "foxes.models.wake_models.DistSlicedWakeModel": [[391, 1, 1, "", "__init__", "Constructor."], [392, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [393, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [394, 1, 1, "", "finalize", "Finalizes the model."], [395, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [396, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_models.GaussianWakeModel": [[398, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [399, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.TopHatWakeModel": [[401, 1, 1, "", "__init__", "Constructor."], [402, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [403, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [404, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.ti": [[405, 0, 1, "", "CrespoHernandezTIWake", "The Crespo and Hernandez TI empirical correlation"], [411, 0, 1, "", "IECTIWake", "The TI wake model from IEC-64100-1-2005-8 (2005):"]], "foxes.models.wake_models.ti.CrespoHernandezTIWake": [[406, 1, 1, "", "__init__", "Constructor."], [407, 1, 1, "", "__repr__", "Return repr(self)."], [408, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [409, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [410, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.ti.IECTIWake": [[412, 1, 1, "", "__init__", "Constructor."], [413, 1, 1, "", "__repr__", "Return repr(self)."], [414, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [415, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [416, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind": [[417, 0, 1, "", "BastankhahWake", "The Bastankhah wake model"], [422, 0, 1, "", "JensenWake", "The Jensen wake model."], [428, 0, 1, "", "PorteAgelModel", "Common calculations for the wake model and the wake frame, such that code repetitions can be avoided."], [449, 0, 1, "", "PorteAgelWake", "The Bastankhah PorteAgel wake model"], [454, 0, 1, "", "TurbOParkWake", "The TurbOPark wake model"], [459, 0, 1, "", "TurbOParkWakeIX", "The generalized TurbOPark wake model, integrating TI over the streamline."]], "foxes.models.wake_models.wind.BastankhahWake": [[418, 1, 1, "", "__init__", "Constructor."], [419, 1, 1, "", "__repr__", "Return repr(self)."], [420, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [421, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.JensenWake": [[423, 1, 1, "", "__init__", "Constructor."], [424, 1, 1, "", "__repr__", "Return repr(self)."], [425, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [426, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [427, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.PorteAgelModel": [[429, 4, 1, "", "AMPL_FAR", ""], [430, 4, 1, "", "AMPL_NEAR", ""], [431, 4, 1, "", "CHECK", ""], [432, 4, 1, "", "DELTA_FAR", ""], [433, 4, 1, "", "DELTA_NEAR", ""], [434, 4, 1, "", "MDATA_KEY", ""], [435, 4, 1, "", "NEAR", ""], [436, 4, 1, "", "PARS", ""], [437, 4, 1, "", "R_PC", ""], [438, 4, 1, "", "R_PC_S", ""], [439, 4, 1, "", "SIGMA_Y_FAR", ""], [440, 4, 1, "", "SIGMA_Z_FAR", ""], [441, 4, 1, "", "SP_SEL", ""], [442, 4, 1, "", "X0", ""], [443, 1, 1, "", "__init__", "Constructor."], [444, 1, 1, "", "calc_data", "Calculate common model data, store it in mdata."], [445, 1, 1, "", "clean", "Clean all data"], [446, 1, 1, "", "get_data", "Return data entry"], [447, 1, 1, "", "has_data", "Check if data exists"], [448, 2, 1, "", "pars", "Dictionary of the model parameters"]], "foxes.models.wake_models.wind.PorteAgelWake": [[450, 1, 1, "", "__init__", "Constructor."], [451, 1, 1, "", "__repr__", "Return repr(self)."], [452, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [453, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWake": [[455, 1, 1, "", "__init__", "Constructor."], [456, 1, 1, "", "__repr__", "Return repr(self)."], [457, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [458, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWakeIX": [[460, 1, 1, "", "__init__", "Constructor."], [461, 1, 1, "", "__repr__", "Return repr(self)."], [462, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [463, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_superpositions": [[464, 0, 1, "", "LinearSuperposition", "Linear supersposition of wake model results, optionally rescaled."], [468, 0, 1, "", "MaxSuperposition", "Maximum supersposition of wake model results, optionally rescaled."], [473, 0, 1, "", "ProductSuperposition", "Product wind wake superposition."], [477, 0, 1, "", "QuadraticSuperposition", "Quadratic supersposition of wake model results, optionally rescaled."], [482, 0, 1, "", "TISuperposition", "A collection of superpositions for TI."]], "foxes.models.wake_superpositions.LinearSuperposition": [[465, 1, 1, "", "__init__", "Constructor."], [466, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [467, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.MaxSuperposition": [[469, 1, 1, "", "__init__", "Constructor."], [470, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [471, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [472, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_superpositions.ProductSuperposition": [[474, 1, 1, "", "__init__", "Constructor."], [475, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [476, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.QuadraticSuperposition": [[478, 1, 1, "", "__init__", "Constructor."], [479, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [480, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [481, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_superpositions.TISuperposition": [[483, 1, 1, "", "__init__", "Constructor."], [484, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [485, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.opt.constraints": [[621, 0, 1, "", "AreaGeometryConstraint", "Constrains turbine positions to the inside of a given area geometry."], [642, 0, 1, "", "FarmBoundaryConstraint", "Constrains turbine positions to the inside of the wind farm boundary"], [644, 0, 1, "", "MinDistConstraint", "Turbines must keep at least a minimal spatial distance."]], "foxes.opt.constraints.AreaGeometryConstraint": [[622, 1, 1, "", "__init__", "Constructor."], [623, 1, 1, "", "__str__", "Get info string"], [624, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [625, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [626, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [627, 2, 1, "", "component_names", "The names of the components"], [628, 1, 1, "", "finalize", "Finalize the object."], [629, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [630, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [631, 1, 1, "", "initialize", "Initialize the object."], [632, 2, 1, "", "initialized", "Flag for finished initialization"], [633, 1, 1, "", "n_components", "Returns the number of components of the function."], [634, 2, 1, "", "n_vars_float", "The number of float variables"], [635, 2, 1, "", "n_vars_int", "The number of int variables"], [636, 1, 1, "", "rename_vars_float", "Rename float variables."], [637, 1, 1, "", "rename_vars_int", "Rename integer variables."], [638, 2, 1, "", "var_names_float", "The names of the float variables"], [639, 2, 1, "", "var_names_int", "The names of the integer variables"], [640, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [641, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "foxes.opt.constraints.FarmBoundaryConstraint": [[643, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.constraints.MinDistConstraint": [[645, 1, 1, "", "__init__", "Constructor."], [646, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [647, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [648, 1, 1, "", "initialize", "Initialize the constaint."], [649, 1, 1, "", "n_components", "Returns the number of components of the function."], [650, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core": [[651, 0, 1, "", "FarmConstraint", "Abstract base class for foxes wind farm optimization constraints."], [662, 0, 1, "", "FarmObjective", "Abstract base class for foxes wind farm objective functions."], [669, 0, 1, "", "FarmOptProblem", "Abstract base class of wind farm optimization problems."], [711, 0, 1, "", "FarmVarsProblem", "Abstract base class for models that optimize farm variables."], [717, 0, 1, "", "PopStates", "Helper class for vectorized opt population calculation, via artificial states of length n_pop times n_states."]], "foxes.opt.core.FarmConstraint": [[652, 1, 1, "", "__init__", "Constructor."], [653, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [654, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [655, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [656, 2, 1, "", "farm", "The wind farm"], [657, 1, 1, "", "n_components", "Returns the number of components of the function."], [658, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [659, 1, 1, "", "print_models", "Prints all model names."], [660, 2, 1, "", "sel_turbines", "The list of selected turbines"], [661, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core.FarmObjective": [[663, 1, 1, "", "__init__", "Constraints."], [664, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [665, 2, 1, "", "farm", "The wind farm"], [666, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [667, 1, 1, "", "print_models", "Prints all model names."], [668, 2, 1, "", "sel_turbines", "The list of selected turbines"]], "foxes.opt.core.FarmOptProblem": [[670, 4, 1, "", "INT_INF", ""], [671, 1, 1, "", "__init__", "Constructor."], [672, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [673, 1, 1, "", "add_objective", "Add an objective to the problem."], [674, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [675, 2, 1, "", "all_turbines", "Flag for all turbines optimization"], [676, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [677, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [678, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [679, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [680, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [681, 2, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [682, 2, 1, "", "counter", "The current value of the application counter"], [683, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [684, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [685, 2, 1, "", "farm", "The wind farm"], [686, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [687, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [688, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [689, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [690, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [691, 1, 1, "", "initialize", "Initialize the object."], [692, 2, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [693, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [694, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [695, 2, 1, "", "maximize_objs", "Flags for objective maximization"], [696, 2, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [697, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [698, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [699, 2, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [700, 2, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [701, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [702, 2, 1, "", "n_vars_float", "The number of float variables"], [703, 2, 1, "", "n_vars_int", "The number of int variables"], [704, 1, 1, "", "parse_tvar", "Parse foxes variable name and turbine index from turbine variable"], [705, 2, 1, "", "sel_turbines", "The selected turbines"], [706, 1, 1, "", "tvar", "Gets turbine variable name"], [707, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [708, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [709, 1, 1, "", "var_names_float", "The names of float variables."], [710, 1, 1, "", "var_names_int", "The names of integer variables."]], "foxes.opt.core.FarmVarsProblem": [[712, 1, 1, "", "initialize", "Initialize the object."], [713, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [714, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [715, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [716, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."]], "foxes.opt.core.PopStates": [[718, 1, 1, "", "__init__", "Constructor."], [719, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [720, 1, 1, "", "initialize", "Initializes the model."], [721, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [722, 1, 1, "", "size", "The total number of states."], [723, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.opt.objectives": [[724, 0, 1, "", "FarmVarObjective", "Objectives based on farm variables."], [733, 0, 1, "", "MaxFarmPower", "Maximize the mean wind farm power"], [735, 0, 1, "", "MaxNTurbines", "Maximizes the number of turrbines."], [741, 0, 1, "", "MinimalMaxTI", "Minimize the maximal turbine TI"]], "foxes.opt.objectives.FarmVarObjective": [[725, 1, 1, "", "__init__", "Constructor."], [726, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [727, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [728, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [729, 1, 1, "", "initialize", "Initialize the object."], [730, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [731, 1, 1, "", "n_components", "Returns the number of components of the function."], [732, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.objectives.MaxFarmPower": [[734, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.objectives.MaxNTurbines": [[736, 1, 1, "", "__init__", "Constructor."], [737, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [738, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [739, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [740, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.objectives.MinimalMaxTI": [[742, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.problems": [[743, 0, 1, "", "OptFarmVars", "Optimize a selection of farm variables."]], "foxes.opt.problems.OptFarmVars": [[744, 1, 1, "", "__init__", "Constructor."], [745, 1, 1, "", "add_var", "Add a variable."], [746, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [747, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [748, 1, 1, "", "initialize", "Initialize the object."], [749, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [750, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [751, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [752, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [753, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [754, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [755, 1, 1, "", "var_names_float", "The names of float variables."], [756, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout": [[882, 0, 1, "", "FarmLayoutOptProblem", "The turbine positioning optimization problem"], [891, 0, 1, "", "RegGridsLayoutOptProblem", "Places turbines on several regular grids and optimizes their parameters."], [907, 0, 1, "", "RegularLayoutOptProblem", "Places turbines on a regular grid and optimizes its parameters."]], "foxes.opt.problems.layout.FarmLayoutOptProblem": [[883, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [884, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [885, 1, 1, "", "initialize", "Initialize the object."], [886, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [887, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [888, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [889, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [890, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.RegGridsLayoutOptProblem": [[892, 1, 1, "", "__init__", "Constraints."], [893, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [894, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [895, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [896, 1, 1, "", "initialize", "Initialize the object."], [897, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [898, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [899, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [900, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [901, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [902, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [903, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [904, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [905, 1, 1, "", "var_names_float", "The names of float variables."], [906, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.RegularLayoutOptProblem": [[908, 4, 1, "", "ANGLE", ""], [909, 4, 1, "", "OFFSET_X", ""], [910, 4, 1, "", "OFFSET_Y", ""], [911, 4, 1, "", "SPACING_X", ""], [912, 4, 1, "", "SPACING_Y", ""], [913, 1, 1, "", "__init__", "Constructor."], [914, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [915, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [916, 1, 1, "", "initialize", "Initialize the object."], [917, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [918, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [919, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [920, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [921, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts": [[838, 0, 1, "", "GeomLayout", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes)."], [848, 0, 1, "", "GeomLayoutGridded", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes), on a fixes background point grid."], [858, 0, 1, "", "GeomRegGrid", "A regular grid within a boundary geometry."], [868, 0, 1, "", "GeomRegGrids", "A regular grid within a boundary geometry."]], "foxes.opt.problems.layout.geom_layouts.GeomLayout": [[839, 1, 1, "", "__init__", "Constructor."], [840, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [841, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [842, 1, 1, "", "get_fig", "Return plotly figure axis."], [843, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [844, 1, 1, "", "initialize", "Initialize the object."], [845, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [846, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [847, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded": [[849, 1, 1, "", "__init__", "Constructor."], [850, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [851, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [852, 1, 1, "", "get_fig", "Return plotly figure axis."], [853, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [854, 1, 1, "", "initialize", "Initialize the object."], [855, 1, 1, "", "max_values_int", "The maximal values of the int variables."], [856, 1, 1, "", "min_values_int", "The minimal values of the int variables."], [857, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrid": [[859, 1, 1, "", "__init__", "Constructor."], [860, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [861, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [862, 1, 1, "", "get_fig", "Return plotly figure axis."], [863, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [864, 1, 1, "", "initialize", "Initialize the object."], [865, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [866, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [867, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrids": [[869, 1, 1, "", "__init__", "Constructor."], [870, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [871, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [872, 1, 1, "", "get_fig", "Return plotly figure axis."], [873, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [874, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [875, 1, 1, "", "initialize", "Initialize the object."], [876, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [877, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [878, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [879, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [880, 1, 1, "", "var_names_float", "The names of float variables."], [881, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.constraints": [[757, 0, 1, "", "Boundary", "Boundary constraint for purely geometrical layouts problems."], [762, 0, 1, "", "CFixN", "Fixed number of turbines constraint for purely geometrical layouts problems."], [767, 0, 1, "", "CMaxN", "Maximal number of turbines constraint for purely geometrical layouts problems."], [772, 0, 1, "", "CMinDensity", "Minimal turbine density constraint for purely geometrical layouts problems."], [778, 0, 1, "", "CMinN", "Minimal number of turbines constraint for purely geometrical layouts problems."], [783, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [788, 0, 1, "", "MinDist", "Minimal distance constraint for purely geometrical layouts problems."], [794, 0, 1, "", "Valid", "Validity constraint for purely geometrical layouts problems."], [799, 3, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.constraints.Boundary": [[758, 1, 1, "", "__init__", "Constructor."], [759, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [760, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [761, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CFixN": [[763, 1, 1, "", "__init__", "Constructor."], [764, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [765, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [766, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN": [[768, 1, 1, "", "__init__", "Constructor."], [769, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [770, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [771, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity": [[773, 1, 1, "", "__init__", "Constructor."], [774, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [775, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [776, 1, 1, "", "initialize", "Initialize the object."], [777, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinN": [[779, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [780, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [781, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [782, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Constraint": [[784, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [785, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [786, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [787, 1, 1, "", "get_bounds", "Returns the bounds for all components."]], "foxes.opt.problems.layout.geom_layouts.constraints.MinDist": [[789, 1, 1, "", "__init__", "Constructor."], [790, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [791, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [792, 1, 1, "", "initialize", "Initialize the constaint."], [793, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Valid": [[795, 1, 1, "", "__init__", "Constructor."], [796, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [797, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [798, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives": [[800, 0, 1, "", "MaxDensity", "Maximal turbine density objective for purely geometrical layouts problems."], [807, 0, 1, "", "MaxGridSpacing", "Maximal grid spacing objective for purely geometrical layouts problems."], [813, 0, 1, "", "MeMiMaDist", "Mean-min-max distance objective for purely geometrical layouts problems."], [819, 0, 1, "", "OFixN", "Fixed number of turbines objective for purely geometrical layouts problems."], [825, 0, 1, "", "OMaxN", "Maximal number of turbines objective for purely geometrical layouts problems."], [831, 0, 1, "", "OMinN", "Minimal number of turbines objective for purely geometrical layouts problems."], [834, 0, 1, "", "Objective", "Abstract base class for objective functions."], [837, 3, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity": [[801, 1, 1, "", "__init__", "Constructor."], [802, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [803, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [804, 1, 1, "", "initialize", "Initialize the object."], [805, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [806, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing": [[808, 1, 1, "", "__init__", "Constructor."], [809, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [810, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [811, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [812, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist": [[814, 1, 1, "", "__init__", "Constructor."], [815, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [816, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [817, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [818, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OFixN": [[820, 1, 1, "", "__init__", "Constructor."], [821, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [822, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [823, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [824, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN": [[826, 1, 1, "", "__init__", "Constructor."], [827, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [828, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [829, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [830, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMinN": [[832, 1, 1, "", "__init__", "Constructor."], [833, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.opt.problems.layout.geom_layouts.objectives.Objective": [[835, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [836, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.output": [[486, 0, 1, "", "FarmLayoutOutput", "Plot the farm layout"], [495, 0, 1, "", "FarmResultsEval", "Evaluates farm results data."], [514, 0, 1, "", "FlowPlots2D", "Class for horizontal or vertical 2D flow plots"], [522, 0, 1, "", "Output", "Base class for foxes output."], [526, 0, 1, "", "ResultsWriter", "Writes results farm data to file."], [529, 0, 1, "", "RosePlotOutput", "Class for rose plot creation"], [535, 0, 1, "", "StateTurbineMap", "Creates heat maps with turbines on the one and states on the other axis."], [538, 0, 1, "", "StatesRosePlotOutput", "Class for rose plot creation directly from states"], [540, 0, 1, "", "TurbineTypeCurves", "Creates power and ct curves for turbine types, optionally including derating/boost."]], "foxes.output.FarmLayoutOutput": [[487, 1, 1, "", "__init__", "Constructor."], [488, 1, 1, "", "get_figure", "Creates farm layout figure."], [489, 1, 1, "", "get_layout_data", "Returns wind farm layout."], [490, 1, 1, "", "get_layout_dict", "Returns wind farm layout."], [491, 1, 1, "", "write_csv", "Writes csv layout file."], [492, 1, 1, "", "write_json", "Writes xyh layout file."], [493, 1, 1, "", "write_plot", "Writes the layout plot to file."], [494, 1, 1, "", "write_xyh", "Writes xyh layout file."]], "foxes.output.FarmResultsEval": [[496, 1, 1, "", "__init__", "Constructor."], [497, 1, 1, "", "add_capacity", "Adds capacity to the farm results"], [498, 1, 1, "", "add_efficiency", "Adds efficiency to the farm results"], [499, 1, 1, "", "calc_farm_efficiency", "Calculates farm efficiency"], [500, 1, 1, "", "calc_farm_mean", "Calculates the mean over states and turbines."], [501, 1, 1, "", "calc_farm_sum", "Calculates the sum over states and turbines."], [502, 1, 1, "", "calc_farm_yield", "Calculates yield, P75 and P90 at the farm level"], [503, 1, 1, "", "calc_mean_farm_power", "Calculates the mean total farm power."], [504, 1, 1, "", "calc_states_mean", "Calculates the mean wrt states."], [505, 1, 1, "", "calc_states_std", "Calculates the standard deviation wrt states."], [506, 1, 1, "", "calc_states_sum", "Calculates the sum wrt states."], [507, 1, 1, "", "calc_turbine_mean", "Calculates the mean wrt turbines."], [508, 1, 1, "", "calc_turbine_sum", "Calculates the sum wrt turbines."], [509, 1, 1, "", "calc_turbine_yield", "Calculates the yield per turbine"], [510, 1, 1, "", "reduce_all", "Reduces states and turbine dimension by some operation"], [511, 1, 1, "", "reduce_states", "Reduces the states dimension by some operation"], [512, 1, 1, "", "reduce_turbines", "Reduces the turbine dimension by some operation"], [513, 1, 1, "", "weinsum", "Calculates Einstein sum, adding weights as last argument to the given fields."]], "foxes.output.FlowPlots2D": [[515, 1, 1, "", "__init__", "Constructor."], [516, 1, 1, "", "gen_states_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [517, 1, 1, "", "gen_states_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [518, 1, 1, "", "gen_states_fig_yz", "Generates 2D farm flow figure in a plane."], [519, 1, 1, "", "get_mean_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [520, 1, 1, "", "get_mean_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [521, 1, 1, "", "get_mean_fig_yz", "Generates 2D farm flow figure in a vertical yz-plane."]], "foxes.output.Output": [[523, 1, 1, "", "new", "Run-time output model factory."], [524, 1, 1, "", "print_models", "Prints all model names."], [525, 1, 1, "", "write", "Writes data to file via pandas."]], "foxes.output.ResultsWriter": [[527, 1, 1, "", "__init__", "Constructor."], [528, 1, 1, "", "write_csv", "Writes a csv file"]], "foxes.output.RosePlotOutput": [[530, 1, 1, "", "__init__", "Constructor."], [531, 1, 1, "", "get_data", "Get pandas DataFrame with wind rose data."], [532, 1, 1, "", "get_data_info", "Returns default description for a variable."], [533, 1, 1, "", "get_figure", "Creates px figure object"], [534, 1, 1, "", "write_figure", "Write rose plot to file"]], "foxes.output.StateTurbineMap": [[536, 1, 1, "", "__init__", "Constructor."], [537, 1, 1, "", "plot_map", "Plot the heat map for the selected variable."]], "foxes.output.StatesRosePlotOutput": [[539, 1, 1, "", "__init__", "Constructor."]], "foxes.output.TurbineTypeCurves": [[541, 1, 1, "", "__init__", "Constructor."], [542, 1, 1, "", "plot_curves", "Plot the power or ct curve."]], "foxes.utils": [[543, 0, 1, "", "DataBook", "Container class for file paths, either directly given or as static data within a package."], [551, 0, 1, "", "PandasFileHelper", "This class helps reading and writing data to files via pandas."], [571, 3, 1, "", "all_subclasses", "Searches all classes derived from some base class."], [572, 3, 1, "", "cubic_roots", "Calculate real roots of polynomials of degree 3."], [573, 3, 1, "", "delta_wd", "Calculates wd_b - wd_a."], [922, 3, 1, "", "read_shp", "Read a shape file"], [923, 3, 1, "", "read_shp_polygons", "Reads the polygon points from a shp file."], [939, 3, 1, "", "show_plotly_fig", "Displays a plotly figure in a window"], [940, 3, 1, "", "shp2csv", "Read shape file, write csv file"], [941, 3, 1, "", "shp2geom2d", "Read shapefile into geom2d geometry"], [944, 3, 1, "", "uv2wd", "Calculate wind direction from wind vectors."], [945, 3, 1, "", "wd2uv", "Calculate wind vectors from wind directions in degrees."], [946, 3, 1, "", "wd2wdvec", "Calculate wind direction vectors from wind directions in degrees."], [947, 3, 1, "", "wdvec2wd", "Calculate wind direction from wind direction vectors."]], "foxes.utils.DataBook": [[544, 1, 1, "", "__init__", "Constructor."], [545, 1, 1, "", "add_data_package", "Add static files from a package location."], [546, 1, 1, "", "add_data_package_file", "Add a static file from a package location."], [547, 1, 1, "", "add_file", "Add a file path"], [548, 1, 1, "", "add_files", "Add file paths"], [549, 1, 1, "", "get_file_path", "Get path of a file"], [550, 1, 1, "", "toc", "Get list of contents"]], "foxes.utils.PandasFileHelper": [[552, 4, 1, "", "DATA_FILE_FORMATS", ""], [553, 4, 1, "", "DEFAULT_FORMAT_DICT", ""], [554, 4, 1, "", "DEFAULT_READING_PARAMETERS", ""], [555, 4, 1, "", "DEFAULT_WRITING_PARAMETERS", ""], [556, 1, 1, "", "read_file", "Helper for reading data according to file ending."], [557, 1, 1, "", "write_file", "Helper for writing data according to file ending."]], "foxes.utils.abl.neutral": [[558, 3, 1, "", "calc_ws", "Calculate wind speeds at given height"], [559, 3, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [560, 3, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.sheared": [[561, 3, 1, "", "calc_ws", "Calculate wind speeds at given height"]], "foxes.utils.abl.stable": [[562, 3, 1, "", "calc_ws", "Calculate wind speeds at given height"], [563, 3, 1, "", "lgz", "Calculates the log factor for wind speed profiles."], [564, 3, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [565, 3, 1, "", "psi", "The Psi function"], [566, 3, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.unstable": [[567, 3, 1, "", "calc_ws", "Calculate wind speeds at given height"], [568, 3, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [569, 3, 1, "", "psi", "The Psi function"], [570, 3, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.geom2d": [[574, 0, 1, "", "AreaGeometry", "Abstract base class for closed 2D geometries."], [581, 0, 1, "", "AreaIntersection", "The intersection of area geometries."], [583, 0, 1, "", "AreaUnion", "The union of area geometries."], [591, 0, 1, "", "Circle", "This class represents the area of a circle."], [598, 0, 1, "", "ClosedPolygon", "This class represents a closed 2D polygon."], [605, 0, 1, "", "HalfPlane", "This class represents a half plane in 2d."], [613, 0, 1, "", "InvertedAreaGeometry", "Base class for inverted geometries."]], "foxes.utils.geom2d.AreaGeometry": [[575, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [576, 1, 1, "", "inverse", "Get the inverted geometry"], [577, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [578, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [579, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [580, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.AreaIntersection": [[582, 1, 1, "", "__new__", "Constructor."]], "foxes.utils.geom2d.AreaUnion": [[584, 1, 1, "", "__init__", "Constructor."], [585, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [586, 1, 1, "", "inverse", "Get the inverted geometry"], [587, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [588, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [589, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [590, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.Circle": [[592, 1, 1, "", "__init__", "Cobnstructor."], [593, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [594, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [595, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [596, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [597, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.ClosedPolygon": [[599, 1, 1, "", "__init__", "Constructor."], [600, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [601, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [602, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [603, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [604, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.HalfPlane": [[606, 1, 1, "", "__init__", "Constructor."], [607, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [608, 1, 1, "", "inverse", "Get the inverted geometry"], [609, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [610, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [611, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [612, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.InvertedAreaGeometry": [[614, 1, 1, "", "__init__", "Constructor."], [615, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [616, 1, 1, "", "inverse", "Get the inverted geometry"], [617, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [618, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [619, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [620, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.runners": [[924, 0, 1, "", "DaskRunner", "Class for function execution via dask"], [931, 0, 1, "", "DefaultRunner", "Class for default function execution."], [933, 0, 1, "", "Runner", "Abstract base class for runners."]], "foxes.utils.runners.DaskRunner": [[925, 1, 1, "", "__init__", "Constructor."], [926, 1, 1, "", "finalize", "Finallize the runner"], [927, 1, 1, "", "initialize", "Initialize the runner"], [928, 1, 1, "", "is_distributed", ""], [929, 1, 1, "", "print", "Prints if verbosity is not zero"], [930, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.DefaultRunner": [[932, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.Runner": [[934, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [935, 1, 1, "", "finalize", "Finalize the runner"], [936, 1, 1, "", "initialize", "Initialize the runner"], [937, 2, 1, "", "initialized", "Initialization flag"], [938, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.two_circles": [[942, 3, 1, "", "area", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."], [943, 3, 1, "", "calc_area", "Calculates the intersection of two circles."]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"attribut": [0, 12, 17, 27, 35, 40, 48, 57, 68, 75, 89, 95, 113, 128, 136, 156, 163, 179, 186, 189, 194, 201, 209, 220, 235, 243, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 312, 324, 330, 336, 357, 361, 368, 373, 380, 390, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 486, 495, 514, 526, 529, 535, 540, 543, 551, 583, 591, 598, 605, 621, 644, 669, 717, 724, 735, 783, 838, 848, 858, 868, 891, 907, 924], "public": [0, 12, 14, 17, 27, 35, 40, 47, 48, 57, 64, 68, 75, 84, 89, 93, 95, 97, 101, 106, 110, 113, 118, 128, 136, 147, 149, 156, 163, 174, 178, 179, 186, 189, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 486, 495, 514, 522, 526, 529, 535, 538, 540, 543, 551, 574, 581, 583, 591, 598, 605, 613, 621, 642, 644, 651, 662, 669, 711, 717, 724, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 891, 907, 924, 931, 933], "member": [0, 12, 14, 17, 27, 35, 40, 47, 48, 57, 64, 68, 75, 84, 89, 93, 95, 97, 101, 106, 110, 113, 118, 128, 136, 147, 149, 156, 163, 174, 178, 179, 186, 189, 194, 201, 209, 217, 220, 228, 235, 240, 243, 247, 253, 260, 264, 269, 275, 281, 286, 293, 297, 302, 306, 309, 312, 317, 319, 321, 324, 330, 336, 342, 345, 348, 351, 354, 357, 361, 368, 373, 380, 387, 390, 397, 400, 405, 411, 417, 422, 428, 449, 454, 459, 464, 468, 473, 477, 482, 486, 495, 514, 522, 526, 529, 535, 538, 540, 543, 551, 574, 581, 583, 591, 598, 605, 613, 621, 642, 644, 651, 662, 669, 711, 717, 724, 733, 735, 741, 743, 757, 762, 767, 772, 778, 783, 788, 794, 800, 807, 813, 819, 825, 831, 834, 838, 848, 858, 868, 882, 891, 907, 924, 931, 933], "paramet": [1, 2, 3, 4, 7, 8, 10, 13, 15, 16, 18, 19, 20, 21, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 51, 52, 53, 56, 58, 59, 60, 61, 62, 63, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 86, 88, 90, 91, 92, 94, 96, 98, 100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 133, 135, 138, 139, 140, 142, 143, 144, 146, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 162, 165, 166, 167, 169, 170, 171, 173, 177, 180, 182, 183, 184, 185, 188, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 241, 242, 244, 245, 246, 249, 250, 254, 257, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 276, 277, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 295, 296, 298, 299, 300, 301, 303, 304, 305, 307, 308, 310, 311, 313, 315, 316, 318, 320, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 346, 349, 352, 355, 358, 359, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 398, 399, 401, 402, 403, 404, 406, 408, 409, 410, 412, 414, 415, 416, 418, 420, 421, 423, 425, 426, 427, 443, 444, 446, 447, 450, 452, 453, 455, 457, 458, 460, 462, 463, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 483, 484, 485, 487, 488, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 525, 527, 528, 530, 531, 532, 533, 534, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 579, 580, 582, 584, 585, 589, 590, 592, 593, 596, 597, 599, 600, 603, 604, 606, 607, 611, 612, 614, 615, 619, 620, 622, 624, 625, 626, 628, 629, 630, 631, 636, 637, 643, 645, 646, 647, 648, 652, 653, 654, 655, 663, 664, 671, 672, 673, 674, 676, 677, 678, 679, 680, 683, 684, 686, 687, 688, 691, 704, 706, 707, 708, 712, 713, 714, 715, 716, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 733, 734, 736, 737, 738, 741, 742, 744, 745, 748, 753, 754, 758, 759, 760, 763, 764, 765, 768, 769, 770, 773, 774, 775, 776, 780, 781, 783, 785, 786, 789, 790, 791, 792, 795, 796, 797, 799, 801, 802, 803, 804, 808, 809, 810, 814, 815, 816, 820, 821, 822, 826, 827, 828, 832, 837, 839, 840, 841, 842, 844, 849, 850, 851, 852, 854, 859, 860, 861, 862, 864, 869, 870, 871, 872, 875, 883, 885, 888, 889, 892, 893, 896, 901, 902, 903, 904, 913, 914, 916, 919, 920, 922, 923, 925, 930, 932, 938, 940, 941, 942, 943, 944, 945, 946, 947], "return": [4, 5, 8, 15, 16, 20, 22, 23, 24, 25, 26, 29, 32, 33, 37, 38, 39, 43, 45, 46, 53, 54, 55, 56, 61, 63, 65, 66, 67, 71, 73, 74, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 94, 98, 99, 102, 103, 104, 105, 111, 112, 116, 117, 120, 121, 130, 131, 132, 133, 134, 135, 139, 141, 142, 143, 145, 146, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 166, 168, 169, 170, 172, 173, 176, 177, 182, 184, 185, 199, 200, 207, 208, 215, 216, 225, 226, 227, 232, 233, 234, 237, 238, 239, 241, 242, 245, 246, 248, 250, 251, 252, 256, 257, 258, 259, 262, 263, 266, 267, 268, 271, 272, 273, 277, 279, 280, 283, 284, 285, 289, 290, 291, 295, 296, 299, 300, 301, 304, 305, 307, 308, 310, 311, 315, 316, 322, 323, 326, 328, 329, 332, 334, 335, 338, 340, 341, 343, 344, 346, 347, 349, 350, 352, 353, 355, 356, 359, 360, 363, 365, 366, 367, 370, 371, 372, 376, 377, 378, 379, 382, 384, 385, 386, 388, 389, 392, 396, 398, 399, 402, 403, 404, 408, 409, 414, 415, 420, 425, 426, 446, 447, 448, 452, 457, 462, 466, 467, 470, 471, 472, 475, 476, 479, 480, 481, 484, 485, 488, 489, 490, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 531, 532, 533, 537, 542, 549, 550, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 580, 586, 587, 588, 589, 590, 594, 595, 596, 597, 601, 602, 603, 604, 608, 609, 610, 611, 612, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 646, 647, 649, 650, 654, 655, 656, 657, 658, 660, 661, 665, 666, 668, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 713, 714, 719, 720, 721, 722, 723, 726, 727, 728, 730, 731, 732, 737, 738, 739, 740, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 764, 765, 766, 769, 770, 771, 774, 775, 777, 780, 781, 782, 786, 787, 790, 791, 793, 796, 797, 798, 799, 802, 803, 805, 806, 809, 810, 811, 812, 815, 816, 817, 818, 821, 822, 823, 824, 827, 828, 829, 830, 833, 836, 837, 840, 841, 842, 843, 845, 846, 847, 850, 851, 852, 853, 855, 856, 857, 860, 861, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 890, 893, 894, 895, 897, 898, 899, 900, 901, 902, 905, 906, 914, 915, 917, 918, 919, 920, 921, 922, 923, 930, 932, 937, 938, 941, 942, 943, 944, 945, 946, 947], "yield": [516, 517, 518, 519, 520, 521], "rais": [799, 837], "note": [799, 837], "exampl": [799, 837, 960], "api": 948, "fox": [949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 969], "core": [949, 953], "input": 951, "farm_layout": 951, "state": [951, 964], "windio": 951, "model": [952, 959, 967], "farm_control": 952, "farm_model": 952, "partial_wak": 952, "point_model": 952, "rotor_model": 952, "turbine_model": 952, "turbine_typ": 952, "vertical_profil": 952, "wake_fram": 952, "wake_model": [952, 959], "wake_superposit": 952, "opt": [953, 954, 955], "problem": [953, 954, 955], "object": [953, 955], "constraint": [953, 955], "layout": [954, 955, 964, 966], "geom_layout": [954, 955], "output": 956, "util": [957, 958], "abl": [957, 958], "geom2d": 957, "runner": 957, "two_circl": 957, "neutral": 958, "stabl": 958, "unstabl": 958, "shear": 958, "wind": [959, 964, 968, 971, 974], "ti": 959, "histori": 961, "v0": 961, "1": 961, "0": 961, "alpha": 961, "2": 961, "3": 961, "4": 961, "5": 961, "6": 961, "welcom": 962, "licens": 962, "content": 962, "contribut": 962, "acknowledg": 962, "instal": 963, "requir": 963, "via": 963, "pip": 963, "virtual": 963, "python": 963, "environ": 963, "standard": 963, "user": 963, "develop": 963, "conda": 963, "static": 964, "data": [964, 968, 973, 974], "farm": 964, "test_farm_67": 964, "csv": 964, "ambient": 964, "wrf": 964, "timeseri": [964, 973], "4464": 964, "gz": 964, "abl_states_6000": 964, "timeseries_3000": 964, "timeseries_8000": 964, "wind_rose_bremen": 964, "wind_rot": 964, "nc": 964, "power": [964, 970], "thrust": 964, "curv": 964, "dtu": 964, "10mw": 964, "d178d3": 964, "h119": 964, "iea": 964, "15mw": 964, "d240": 964, "h150": 964, "iwt": 964, "7d5mw": 964, "d164": 964, "h100": 964, "nrel": 964, "5mw": 964, "d126": 964, "h90": 964, "file": 964, "path": 964, "heterogen": 965, "flow": 965, "optim": 966, "The": 967, "book": 967, "multi": 968, "height": 968, "overview": 969, "how": 969, "setup": 969, "mask": 970, "sector": 971, "manag": 971, "singl": 972, "row": 972, "turbin": 972, "rose": 974, "yaw": 975, "rotor": 975, "wake": 975}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Attributes": [[0, "attributes"], [12, "attributes"], [17, "attributes"], [27, "attributes"], [35, "attributes"], [40, "attributes"], [48, "attributes"], [57, "attributes"], [68, "attributes"], [75, "attributes"], [89, "attributes"], [95, "attributes"], [113, "attributes"], [128, "attributes"], [136, "attributes"], [156, "attributes"], [163, "attributes"], [179, "attributes"], [186, "attributes"], [189, "attributes"], [194, "attributes"], [201, "attributes"], [209, "attributes"], [220, "attributes"], [235, "attributes"], [243, "attributes"], [253, "attributes"], [260, "attributes"], [264, "attributes"], [269, "attributes"], [275, "attributes"], [281, "attributes"], [286, "attributes"], [293, "attributes"], [297, "attributes"], [302, "attributes"], [312, "attributes"], [324, "attributes"], [330, "attributes"], [336, "attributes"], [357, "attributes"], [361, "attributes"], [368, "attributes"], [373, "attributes"], [380, "attributes"], [390, "attributes"], [405, "attributes"], [411, "attributes"], [417, "attributes"], [422, "attributes"], [428, "attributes"], [449, "attributes"], [454, "attributes"], [459, "attributes"], [464, "attributes"], [468, "attributes"], [473, "attributes"], [477, "attributes"], [482, "attributes"], [486, "attributes"], [495, "attributes"], [514, "attributes"], [526, "attributes"], [529, "attributes"], [535, "attributes"], [540, "attributes"], [543, "attributes"], [551, "attributes"], [583, "attributes"], [591, "attributes"], [598, "attributes"], [605, "attributes"], [621, "attributes"], [644, "attributes"], [669, "attributes"], [717, "attributes"], [724, "attributes"], [735, "attributes"], [783, "attributes"], [838, "attributes"], [848, "attributes"], [858, "attributes"], [868, "attributes"], [891, "attributes"], [907, "attributes"], [924, "attributes"]], "Public members": [[0, "public-members"], [12, "public-members"], [14, "public-members"], [17, "public-members"], [27, "public-members"], [35, "public-members"], [40, "public-members"], [47, "public-members"], [48, "public-members"], [57, "public-members"], [64, "public-members"], [68, "public-members"], [75, "public-members"], [84, "public-members"], [89, "public-members"], [93, "public-members"], [95, "public-members"], [97, "public-members"], [101, "public-members"], [106, "public-members"], [110, "public-members"], [113, "public-members"], [118, "public-members"], [128, "public-members"], [136, "public-members"], [147, "public-members"], [149, "public-members"], [156, "public-members"], [163, "public-members"], [174, "public-members"], [178, "public-members"], [179, "public-members"], [186, "public-members"], [189, "public-members"], [194, "public-members"], [201, "public-members"], [209, "public-members"], [217, "public-members"], [220, "public-members"], [228, "public-members"], [235, "public-members"], [240, "public-members"], [243, "public-members"], [247, "public-members"], [253, "public-members"], [260, "public-members"], [264, "public-members"], [269, "public-members"], [275, "public-members"], [281, "public-members"], [286, "public-members"], [293, "public-members"], [297, "public-members"], [302, "public-members"], [306, "public-members"], [309, "public-members"], [312, "public-members"], [317, "public-members"], [319, "public-members"], [321, "public-members"], [324, "public-members"], [330, "public-members"], [336, "public-members"], [342, "public-members"], [345, "public-members"], [348, "public-members"], [351, "public-members"], [354, "public-members"], [357, "public-members"], [361, "public-members"], [368, "public-members"], [373, "public-members"], [380, "public-members"], [387, "public-members"], [390, "public-members"], [397, "public-members"], [400, "public-members"], [405, "public-members"], [411, "public-members"], [417, "public-members"], [422, "public-members"], [428, "public-members"], [449, "public-members"], [454, "public-members"], [459, "public-members"], [464, "public-members"], [468, "public-members"], [473, "public-members"], [477, "public-members"], [482, "public-members"], [486, "public-members"], [495, "public-members"], [514, "public-members"], [522, "public-members"], [526, "public-members"], [529, "public-members"], [535, "public-members"], [538, "public-members"], [540, "public-members"], [543, "public-members"], [551, "public-members"], [574, "public-members"], [581, "public-members"], [583, "public-members"], [591, "public-members"], [598, "public-members"], [605, "public-members"], [613, "public-members"], [621, "public-members"], [642, "public-members"], [644, "public-members"], [651, "public-members"], [662, "public-members"], [669, "public-members"], [711, "public-members"], [717, "public-members"], [724, "public-members"], [733, "public-members"], [735, "public-members"], [741, "public-members"], [743, "public-members"], [757, "public-members"], [762, "public-members"], [767, "public-members"], [772, "public-members"], [778, "public-members"], [783, "public-members"], [788, "public-members"], [794, "public-members"], [800, "public-members"], [807, "public-members"], [813, "public-members"], [819, "public-members"], [825, "public-members"], [831, "public-members"], [834, "public-members"], [838, "public-members"], [848, "public-members"], [858, "public-members"], [868, "public-members"], [882, "public-members"], [891, "public-members"], [907, "public-members"], [924, "public-members"], [931, "public-members"], [933, "public-members"]], "Parameters": [[1, "parameters"], [2, "parameters"], [3, "parameters"], [4, "parameters"], [7, "parameters"], [8, "parameters"], [10, "parameters"], [13, "parameters"], [15, "parameters"], [16, "parameters"], [18, "parameters"], [19, "parameters"], [20, "parameters"], [21, "parameters"], [23, "parameters"], [24, "parameters"], [26, "parameters"], [28, "parameters"], [29, "parameters"], [30, "parameters"], [31, "parameters"], [32, "parameters"], [33, "parameters"], [34, "parameters"], [36, "parameters"], [37, "parameters"], [38, "parameters"], [39, "parameters"], [41, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [45, "parameters"], [46, "parameters"], [51, "parameters"], [52, "parameters"], [53, "parameters"], [56, "parameters"], [58, "parameters"], [59, "parameters"], [60, "parameters"], [61, "parameters"], [62, "parameters"], [63, "parameters"], [65, "parameters"], [67, "parameters"], [69, "parameters"], [70, "parameters"], [71, "parameters"], [72, "parameters"], [73, "parameters"], [74, "parameters"], [76, "parameters"], [77, "parameters"], [79, "parameters"], [80, "parameters"], [82, "parameters"], [86, "parameters"], [88, "parameters"], [90, "parameters"], [91, "parameters"], [92, "parameters"], [94, "parameters"], [96, "parameters"], [98, "parameters"], [100, "parameters"], [102, "parameters"], [103, "parameters"], [104, "parameters"], [105, "parameters"], [107, "parameters"], [108, "parameters"], [109, "parameters"], [111, "parameters"], [112, "parameters"], [114, "parameters"], [115, "parameters"], [119, "parameters"], [120, "parameters"], [121, "parameters"], [122, "parameters"], [123, "parameters"], [124, "parameters"], [125, "parameters"], [126, "parameters"], [127, "parameters"], [129, "parameters"], [130, "parameters"], [132, "parameters"], [133, "parameters"], [135, "parameters"], [138, "parameters"], [139, "parameters"], [140, "parameters"], [142, "parameters"], [143, "parameters"], [144, "parameters"], [146, "parameters"], [149, "parameters"], [150, "parameters"], [151, "parameters"], [152, "parameters"], [153, "parameters"], [155, "parameters"], [157, "parameters"], [158, "parameters"], [159, "parameters"], [160, "parameters"], [162, "parameters"], [165, "parameters"], [166, "parameters"], [167, "parameters"], [169, "parameters"], [170, "parameters"], [171, "parameters"], [173, "parameters"], [177, "parameters"], [180, "parameters"], [182, "parameters"], [183, "parameters"], [184, "parameters"], [185, "parameters"], [188, "parameters"], [191, "parameters"], [192, "parameters"], [193, "parameters"], [195, "parameters"], [196, "parameters"], [197, "parameters"], [198, "parameters"], [199, "parameters"], [200, "parameters"], [202, "parameters"], [204, "parameters"], [205, "parameters"], [206, "parameters"], [207, "parameters"], [208, "parameters"], [210, "parameters"], [212, "parameters"], [213, "parameters"], [214, "parameters"], [215, "parameters"], [216, "parameters"], [218, "parameters"], [219, "parameters"], [221, "parameters"], [222, "parameters"], [223, "parameters"], [224, "parameters"], [225, "parameters"], [226, "parameters"], [227, "parameters"], [229, "parameters"], [230, "parameters"], [231, "parameters"], [232, "parameters"], [233, "parameters"], [234, "parameters"], [236, "parameters"], [237, "parameters"], [238, "parameters"], [239, "parameters"], [241, "parameters"], [242, "parameters"], [244, "parameters"], [245, "parameters"], [246, "parameters"], [249, "parameters"], [250, "parameters"], [254, "parameters"], [257, "parameters"], [261, "parameters"], [262, "parameters"], [263, "parameters"], [265, "parameters"], [266, "parameters"], [267, "parameters"], [268, "parameters"], [270, "parameters"], [271, "parameters"], [272, "parameters"], [273, "parameters"], [276, "parameters"], [277, "parameters"], [278, "parameters"], [279, "parameters"], [280, "parameters"], [282, "parameters"], [283, "parameters"], [284, "parameters"], [285, "parameters"], [287, "parameters"], [288, "parameters"], [289, "parameters"], [290, "parameters"], [291, "parameters"], [294, "parameters"], [295, "parameters"], [296, "parameters"], [298, "parameters"], [299, "parameters"], [300, "parameters"], [301, "parameters"], [303, "parameters"], [304, "parameters"], [305, "parameters"], [307, "parameters"], [308, "parameters"], [310, "parameters"], [311, "parameters"], [313, "parameters"], [315, "parameters"], [316, "parameters"], [318, "parameters"], [320, "parameters"], [322, "parameters"], [323, "parameters"], [325, "parameters"], [326, "parameters"], [327, "parameters"], [328, "parameters"], [329, "parameters"], [331, "parameters"], [332, "parameters"], [333, "parameters"], [334, "parameters"], [335, "parameters"], [337, "parameters"], [338, "parameters"], [339, "parameters"], [340, "parameters"], [341, "parameters"], [343, "parameters"], [346, "parameters"], [349, "parameters"], [352, "parameters"], [355, "parameters"], [358, "parameters"], [359, "parameters"], [362, "parameters"], [363, "parameters"], [364, "parameters"], [365, "parameters"], [366, "parameters"], [367, "parameters"], [369, "parameters"], [370, "parameters"], [371, "parameters"], [372, "parameters"], [374, "parameters"], [376, "parameters"], [377, "parameters"], [378, "parameters"], [379, "parameters"], [381, "parameters"], [382, "parameters"], [383, "parameters"], [384, "parameters"], [385, "parameters"], [386, "parameters"], [388, "parameters"], [389, "parameters"], [391, "parameters"], [392, "parameters"], [393, "parameters"], [394, "parameters"], [395, "parameters"], [396, "parameters"], [398, "parameters"], [399, "parameters"], [401, "parameters"], [402, "parameters"], [403, "parameters"], [404, "parameters"], [406, "parameters"], [408, "parameters"], [409, "parameters"], [410, "parameters"], [412, "parameters"], [414, "parameters"], [415, "parameters"], [416, "parameters"], [418, "parameters"], [420, "parameters"], [421, "parameters"], [423, "parameters"], [425, "parameters"], [426, "parameters"], [427, "parameters"], [443, "parameters"], [444, "parameters"], [446, "parameters"], [447, "parameters"], [450, "parameters"], [452, "parameters"], [453, "parameters"], [455, "parameters"], [457, "parameters"], [458, "parameters"], [460, "parameters"], [462, "parameters"], [463, "parameters"], [465, "parameters"], [466, "parameters"], [467, "parameters"], [469, "parameters"], [470, "parameters"], [471, "parameters"], [472, "parameters"], [474, "parameters"], [475, "parameters"], [476, "parameters"], [478, "parameters"], [479, "parameters"], [480, "parameters"], [481, "parameters"], [483, "parameters"], [484, "parameters"], [485, "parameters"], [487, "parameters"], [488, "parameters"], [491, "parameters"], [492, "parameters"], [493, "parameters"], [494, "parameters"], [496, "parameters"], [497, "parameters"], [498, "parameters"], [500, "parameters"], [501, "parameters"], [502, "parameters"], [503, "parameters"], [504, "parameters"], [506, "parameters"], [507, "parameters"], [508, "parameters"], [509, "parameters"], [510, "parameters"], [511, "parameters"], [512, "parameters"], [513, "parameters"], [515, "parameters"], [516, "parameters"], [517, "parameters"], [518, "parameters"], [519, "parameters"], [520, "parameters"], [521, "parameters"], [523, "parameters"], [525, "parameters"], [527, "parameters"], [528, "parameters"], [530, "parameters"], [531, "parameters"], [532, "parameters"], [533, "parameters"], [534, "parameters"], [536, "parameters"], [537, "parameters"], [538, "parameters"], [539, "parameters"], [541, "parameters"], [542, "parameters"], [543, "parameters"], [544, "parameters"], [545, "parameters"], [546, "parameters"], [547, "parameters"], [548, "parameters"], [549, "parameters"], [550, "parameters"], [556, "parameters"], [557, "parameters"], [558, "parameters"], [559, "parameters"], [560, "parameters"], [561, "parameters"], [562, "parameters"], [563, "parameters"], [564, "parameters"], [565, "parameters"], [566, "parameters"], [567, "parameters"], [568, "parameters"], [569, "parameters"], [570, "parameters"], [571, "parameters"], [572, "parameters"], [573, "parameters"], [575, "parameters"], [579, "parameters"], [580, "parameters"], [582, "parameters"], [584, "parameters"], [585, "parameters"], [589, "parameters"], [590, "parameters"], [592, "parameters"], [593, "parameters"], [596, "parameters"], [597, "parameters"], [599, "parameters"], [600, "parameters"], [603, "parameters"], [604, "parameters"], [606, "parameters"], [607, "parameters"], [611, "parameters"], [612, "parameters"], [614, "parameters"], [615, "parameters"], [619, "parameters"], [620, "parameters"], [622, "parameters"], [624, "parameters"], [625, "parameters"], [626, "parameters"], [628, "parameters"], [629, "parameters"], [630, "parameters"], [631, "parameters"], [636, "parameters"], [637, "parameters"], [643, "parameters"], [645, "parameters"], [646, "parameters"], [647, "parameters"], [648, "parameters"], [652, "parameters"], [653, "parameters"], [654, "parameters"], [655, "parameters"], [663, "parameters"], [664, "parameters"], [671, "parameters"], [672, "parameters"], [673, "parameters"], [674, "parameters"], [676, "parameters"], [677, "parameters"], [678, "parameters"], [679, "parameters"], [680, "parameters"], [683, "parameters"], [684, "parameters"], [686, "parameters"], [687, "parameters"], [688, "parameters"], [691, "parameters"], [704, "parameters"], [706, "parameters"], [707, "parameters"], [708, "parameters"], [712, "parameters"], [713, "parameters"], [714, "parameters"], [715, "parameters"], [716, "parameters"], [718, "parameters"], [719, "parameters"], [720, "parameters"], [721, "parameters"], [723, "parameters"], [725, "parameters"], [726, "parameters"], [727, "parameters"], [728, "parameters"], [729, "parameters"], [733, "parameters"], [734, "parameters"], [736, "parameters"], [737, "parameters"], [738, "parameters"], [741, "parameters"], [742, "parameters"], [744, "parameters"], [745, "parameters"], [748, "parameters"], [753, "parameters"], [754, "parameters"], [758, "parameters"], [759, "parameters"], [760, "parameters"], [763, "parameters"], [764, "parameters"], [765, "parameters"], [768, "parameters"], [769, "parameters"], [770, "parameters"], [773, "parameters"], [774, "parameters"], [775, "parameters"], [776, "parameters"], [780, "parameters"], [781, "parameters"], [783, "parameters"], [785, "parameters"], [786, "parameters"], [789, "parameters"], [790, "parameters"], [791, "parameters"], [792, "parameters"], [795, "parameters"], [796, "parameters"], [797, "parameters"], [799, "parameters"], [801, "parameters"], [802, "parameters"], [803, "parameters"], [804, "parameters"], [808, "parameters"], [809, "parameters"], [810, "parameters"], [814, "parameters"], [815, "parameters"], [816, "parameters"], [820, "parameters"], [821, "parameters"], [822, "parameters"], [826, "parameters"], [827, "parameters"], [828, "parameters"], [832, "parameters"], [837, "parameters"], [839, "parameters"], [840, "parameters"], [841, "parameters"], [842, "parameters"], [844, "parameters"], [849, "parameters"], [850, "parameters"], [851, "parameters"], [852, "parameters"], [854, "parameters"], [859, "parameters"], [860, "parameters"], [861, "parameters"], [862, "parameters"], [864, "parameters"], [869, "parameters"], [870, "parameters"], [871, "parameters"], [872, "parameters"], [875, "parameters"], [883, "parameters"], [885, "parameters"], [888, "parameters"], [889, "parameters"], [892, "parameters"], [893, "parameters"], [896, "parameters"], [901, "parameters"], [902, "parameters"], [903, "parameters"], [904, "parameters"], [913, "parameters"], [914, "parameters"], [916, "parameters"], [919, "parameters"], [920, "parameters"], [922, "parameters"], [923, "parameters"], [925, "parameters"], [930, "parameters"], [932, "parameters"], [938, "parameters"], [940, "parameters"], [941, "parameters"], [942, "parameters"], [943, "parameters"], [944, "parameters"], [945, "parameters"], [946, "parameters"], [947, "parameters"]], "Returns": [[4, "returns"], [5, "returns"], [8, "returns"], [15, "returns"], [16, "returns"], [20, "returns"], [22, "returns"], [23, "returns"], [24, "returns"], [25, "returns"], [26, "returns"], [29, "returns"], [32, "returns"], [33, "returns"], [37, "returns"], [38, "returns"], [39, "returns"], [43, "returns"], [45, "returns"], [46, "returns"], [53, "returns"], [54, "returns"], [55, "returns"], [56, "returns"], [61, "returns"], [63, "returns"], [65, "returns"], [66, "returns"], [67, "returns"], [71, "returns"], [73, "returns"], [74, "returns"], [77, "returns"], [78, "returns"], [80, "returns"], [81, "returns"], [82, "returns"], [83, "returns"], [85, "returns"], [86, "returns"], [87, "returns"], [88, "returns"], [94, "returns"], [98, "returns"], [99, "returns"], [102, "returns"], [103, "returns"], [104, "returns"], [105, "returns"], [111, "returns"], [112, "returns"], [116, "returns"], [117, "returns"], [120, "returns"], [121, "returns"], [130, "returns"], [131, "returns"], [132, "returns"], [133, "returns"], [134, "returns"], [135, "returns"], [139, "returns"], [141, "returns"], [142, "returns"], [143, "returns"], [145, "returns"], [146, "returns"], [151, "returns"], [152, "returns"], [153, "returns"], [154, "returns"], [155, "returns"], [158, "returns"], [159, "returns"], [160, "returns"], [161, "returns"], [162, "returns"], [166, "returns"], [168, "returns"], [169, "returns"], [170, "returns"], [172, "returns"], [173, "returns"], [176, "returns"], [177, "returns"], [182, "returns"], [184, "returns"], [185, "returns"], [199, "returns"], [200, "returns"], [207, "returns"], [208, "returns"], [215, "returns"], [216, "returns"], [225, "returns"], [226, "returns"], [227, "returns"], [232, "returns"], [233, "returns"], [234, "returns"], [237, "returns"], [238, "returns"], [239, "returns"], [241, "returns"], [242, "returns"], [245, "returns"], [246, "returns"], [248, "returns"], [250, "returns"], [251, "returns"], [252, "returns"], [256, "returns"], [257, "returns"], [258, "returns"], [259, "returns"], [262, "returns"], [263, "returns"], [266, "returns"], [267, "returns"], [268, "returns"], [271, "returns"], [272, "returns"], [273, "returns"], [277, "returns"], [279, "returns"], [280, "returns"], [283, "returns"], [284, "returns"], [285, "returns"], [289, "returns"], [290, "returns"], [291, "returns"], [295, "returns"], [296, "returns"], [299, "returns"], [300, "returns"], [301, "returns"], [304, "returns"], [305, "returns"], [307, "returns"], [308, "returns"], [310, "returns"], [311, "returns"], [315, "returns"], [316, "returns"], [322, "returns"], [323, "returns"], [326, "returns"], [328, "returns"], [329, "returns"], [332, "returns"], [334, "returns"], [335, "returns"], [338, "returns"], [340, "returns"], [341, "returns"], [343, "returns"], [344, "returns"], [346, "returns"], [347, "returns"], [349, "returns"], [350, "returns"], [352, "returns"], [353, "returns"], [355, "returns"], [356, "returns"], [359, "returns"], [360, "returns"], [363, "returns"], [365, "returns"], [366, "returns"], [367, "returns"], [370, "returns"], [371, "returns"], [372, "returns"], [376, "returns"], [377, "returns"], [378, "returns"], [379, "returns"], [382, "returns"], [384, "returns"], [385, "returns"], [386, "returns"], [388, "returns"], [389, "returns"], [392, "returns"], [396, "returns"], [398, "returns"], [399, "returns"], [402, "returns"], [403, "returns"], [404, "returns"], [408, "returns"], [409, "returns"], [414, "returns"], [415, "returns"], [420, "returns"], [425, "returns"], [426, "returns"], [446, "returns"], [447, "returns"], [448, "returns"], [452, "returns"], [457, "returns"], [462, "returns"], [466, "returns"], [467, "returns"], [470, "returns"], [471, "returns"], [472, "returns"], [475, "returns"], [476, "returns"], [479, "returns"], [480, "returns"], [481, "returns"], [484, "returns"], [485, "returns"], [488, "returns"], [489, "returns"], [490, "returns"], [499, "returns"], [500, "returns"], [501, "returns"], [502, "returns"], [503, "returns"], [504, "returns"], [506, "returns"], [507, "returns"], [508, "returns"], [509, "returns"], [510, "returns"], [511, "returns"], [512, "returns"], [513, "returns"], [531, "returns"], [532, "returns"], [533, "returns"], [537, "returns"], [542, "returns"], [549, "returns"], [550, "returns"], [556, "returns"], [558, "returns"], [559, "returns"], [560, "returns"], [561, "returns"], [562, "returns"], [563, "returns"], [564, "returns"], [565, "returns"], [566, "returns"], [567, "returns"], [568, "returns"], [569, "returns"], [570, "returns"], [571, "returns"], [572, "returns"], [573, "returns"], [576, "returns"], [577, "returns"], [578, "returns"], [579, "returns"], [580, "returns"], [586, "returns"], [587, "returns"], [588, "returns"], [589, "returns"], [590, "returns"], [594, "returns"], [595, "returns"], [596, "returns"], [597, "returns"], [601, "returns"], [602, "returns"], [603, "returns"], [604, "returns"], [608, "returns"], [609, "returns"], [610, "returns"], [611, "returns"], [612, "returns"], [616, "returns"], [617, "returns"], [618, "returns"], [619, "returns"], [620, "returns"], [623, "returns"], [624, "returns"], [625, "returns"], [626, "returns"], [627, "returns"], [629, "returns"], [630, "returns"], [632, "returns"], [633, "returns"], [634, "returns"], [635, "returns"], [638, "returns"], [639, "returns"], [640, "returns"], [641, "returns"], [646, "returns"], [647, "returns"], [649, "returns"], [650, "returns"], [654, "returns"], [655, "returns"], [656, "returns"], [657, "returns"], [658, "returns"], [660, "returns"], [661, "returns"], [665, "returns"], [666, "returns"], [668, "returns"], [675, "returns"], [676, "returns"], [677, "returns"], [678, "returns"], [679, "returns"], [680, "returns"], [681, "returns"], [682, "returns"], [683, "returns"], [684, "returns"], [685, "returns"], [686, "returns"], [687, "returns"], [688, "returns"], [689, "returns"], [690, "returns"], [692, "returns"], [693, "returns"], [694, "returns"], [695, "returns"], [696, "returns"], [697, "returns"], [698, "returns"], [699, "returns"], [700, "returns"], [701, "returns"], [702, "returns"], [703, "returns"], [704, "returns"], [705, "returns"], [706, "returns"], [709, "returns"], [710, "returns"], [713, "returns"], [714, "returns"], [719, "returns"], [720, "returns"], [721, "returns"], [722, "returns"], [723, "returns"], [726, "returns"], [727, "returns"], [728, "returns"], [730, "returns"], [731, "returns"], [732, "returns"], [737, "returns"], [738, "returns"], [739, "returns"], [740, "returns"], [746, "returns"], [747, "returns"], [749, "returns"], [750, "returns"], [751, "returns"], [752, "returns"], [753, "returns"], [754, "returns"], [755, "returns"], [756, "returns"], [759, "returns"], [760, "returns"], [761, "returns"], [764, "returns"], [765, "returns"], [766, "returns"], [769, "returns"], [770, "returns"], [771, "returns"], [774, "returns"], [775, "returns"], [777, "returns"], [780, "returns"], [781, "returns"], [782, "returns"], [786, "returns"], [787, "returns"], [790, "returns"], [791, "returns"], [793, "returns"], [796, "returns"], [797, "returns"], [798, "returns"], [799, "returns"], [802, "returns"], [803, "returns"], [805, "returns"], [806, "returns"], [809, "returns"], [810, "returns"], [811, "returns"], [812, "returns"], [815, "returns"], [816, "returns"], [817, "returns"], [818, "returns"], [821, "returns"], [822, "returns"], [823, "returns"], [824, "returns"], [827, "returns"], [828, "returns"], [829, "returns"], [830, "returns"], [833, "returns"], [836, "returns"], [837, "returns"], [840, "returns"], [841, "returns"], [842, "returns"], [843, "returns"], [845, "returns"], [846, "returns"], [847, "returns"], [850, "returns"], [851, "returns"], [852, "returns"], [853, "returns"], [855, "returns"], [856, "returns"], [857, "returns"], [860, "returns"], [861, "returns"], [862, "returns"], [863, "returns"], [865, "returns"], [866, "returns"], [867, "returns"], [870, "returns"], [871, "returns"], [872, "returns"], [873, "returns"], [874, "returns"], [876, "returns"], [877, "returns"], [878, "returns"], [879, "returns"], [880, "returns"], [881, "returns"], [883, "returns"], [884, "returns"], [886, "returns"], [887, "returns"], [888, "returns"], [889, "returns"], [890, "returns"], [893, "returns"], [894, "returns"], [895, "returns"], [897, "returns"], [898, "returns"], [899, "returns"], [900, "returns"], [901, "returns"], [902, "returns"], [905, "returns"], [906, "returns"], [914, "returns"], [915, "returns"], [917, "returns"], [918, "returns"], [919, "returns"], [920, "returns"], [921, "returns"], [922, "returns"], [923, "returns"], [930, "returns"], [932, "returns"], [937, "returns"], [938, "returns"], [941, "returns"], [942, "returns"], [943, "returns"], [944, "returns"], [945, "returns"], [946, "returns"], [947, "returns"]], "Yields": [[516, "yields"], [517, "yields"], [518, "yields"], [519, "yields"], [520, "yields"], [521, "yields"]], "Raises": [[799, "raises"], [837, "raises"]], "Notes": [[799, "notes"], [837, "notes"]], "Examples": [[799, "examples"], [837, "examples"], [960, "examples"]], "API": [[948, "api"]], "foxes.core": [[949, "foxes-core"]], "foxes": [[950, "foxes"]], "foxes.input": [[951, "foxes-input"]], "foxes.input.farm_layout": [[951, "foxes-input-farm-layout"]], "foxes.input.states": [[951, "foxes-input-states"]], "foxes.input.windio": [[951, "foxes-input-windio"]], "foxes.models": [[952, "foxes-models"]], "foxes.models.farm_controllers": [[952, "foxes-models-farm-controllers"]], "foxes.models.farm_models": [[952, "foxes-models-farm-models"]], "foxes.models.partial_wakes": [[952, "foxes-models-partial-wakes"]], "foxes.models.point_models": [[952, "foxes-models-point-models"]], "foxes.models.rotor_models": [[952, "foxes-models-rotor-models"]], "foxes.models.turbine_models": [[952, "foxes-models-turbine-models"]], "foxes.models.turbine_types": [[952, "foxes-models-turbine-types"]], "foxes.models.vertical_profiles": [[952, "foxes-models-vertical-profiles"]], "foxes.models.wake_frames": [[952, "foxes-models-wake-frames"]], "foxes.models.wake_models": [[952, "foxes-models-wake-models"], [959, "foxes-models-wake-models"]], "foxes.models.wake_superpositions": [[952, "foxes-models-wake-superpositions"]], "foxes.opt": [[953, "foxes-opt"]], "foxes.opt.core": [[953, "foxes-opt-core"]], "foxes.opt.problems": [[953, "foxes-opt-problems"], [954, "foxes-opt-problems"]], "foxes.opt.objectives": [[953, "foxes-opt-objectives"]], "foxes.opt.constraints": [[953, "foxes-opt-constraints"]], "foxes.opt.problems.layout": [[954, "foxes-opt-problems-layout"]], "foxes.opt.problems.layout.geom_layouts": [[954, "foxes-opt-problems-layout-geom-layouts"], [955, "foxes-opt-problems-layout-geom-layouts"]], "foxes.opt.problems.layout.geom_layouts.objectives": [[955, "foxes-opt-problems-layout-geom-layouts-objectives"]], "foxes.opt.problems.layout.geom_layouts.constraints": [[955, "foxes-opt-problems-layout-geom-layouts-constraints"]], "foxes.output": [[956, "foxes-output"]], "foxes.utils": [[957, "foxes-utils"]], "foxes.utils.abl": [[957, "foxes-utils-abl"]], "foxes.utils.geom2d": [[957, "foxes-utils-geom2d"]], "foxes.utils.runners": [[957, "foxes-utils-runners"]], "foxes.utils.two_circles": [[957, "foxes-utils-two-circles"]], "foxes.utils.abl.neutral": [[958, "foxes-utils-abl-neutral"]], "foxes.utils.abl.stable": [[958, "foxes-utils-abl-stable"]], "foxes.utils.abl.unstable": [[958, "foxes-utils-abl-unstable"]], "foxes.utils.abl.sheared": [[958, "foxes-utils-abl-sheared"]], "foxes.models.wake_models.wind": [[959, "foxes-models-wake-models-wind"]], "foxes.models.wake_models.ti": [[959, "foxes-models-wake-models-ti"]], "History": [[961, "history"]], "v0.1.0-alpha": [[961, "v0-1-0-alpha"]], "v0.1.1-alpha": [[961, "v0-1-1-alpha"]], "v0.1.2-alpha": [[961, "v0-1-2-alpha"]], "v0.1.3-alpha": [[961, "v0-1-3-alpha"]], "v0.1.4-alpha": [[961, "v0-1-4-alpha"]], "v0.2.0-alpha": [[961, "v0-2-0-alpha"]], "v0.2.1-alpha": [[961, "v0-2-1-alpha"]], "v0.2.2-alpha": [[961, "v0-2-2-alpha"]], "v0.2.3-alpha": [[961, "v0-2-3-alpha"]], "v0.2.4-alpha": [[961, "v0-2-4-alpha"]], "v0.2.5-alpha": [[961, "v0-2-5-alpha"]], "v0.2.6-alpha": [[961, "v0-2-6-alpha"]], "v0.3.0-alpha": [[961, "v0-3-0-alpha"]], "v0.3.1-alpha": [[961, "v0-3-1-alpha"]], "v0.3.2-alpha": [[961, "v0-3-2-alpha"]], "v0.3.3-alpha": [[961, "v0-3-3-alpha"]], "v0.3.4-alpha": [[961, "v0-3-4-alpha"]], "v0.3.5-alpha": [[961, "v0-3-5-alpha"]], "v0.4.0": [[961, "v0-4-0"]], "Welcome to FOXES": [[962, "welcome-to-foxes"]], "License": [[962, "license"]], "Contents": [[962, "contents"]], "Contributing": [[962, "contributing"]], "Acknowledgements": [[962, "acknowledgements"]], "Installation": [[963, "installation"]], "Requirements": [[963, "requirements"]], "Installation via pip": [[963, "installation-via-pip"]], "Virtual Python environment": [[963, "virtual-python-environment"], [963, "id1"]], "Standard users": [[963, "standard-users"], [963, "id2"]], "Developers": [[963, "developers"], [963, "id3"]], "Installation via conda": [[963, "installation-via-conda"]], "Static data": [[964, "Static-data"]], "Wind farm layout data": [[964, "Wind-farm-layout-data"]], "test_farm_67.csv": [[964, "test_farm_67.csv"]], "Ambient states data": [[964, "Ambient-states-data"]], "WRF-Timeseries-4464.csv.gz": [[964, "WRF-Timeseries-4464.csv.gz"]], "abl_states_6000.csv.gz": [[964, "abl_states_6000.csv.gz"]], "timeseries_3000.csv.gz": [[964, "timeseries_3000.csv.gz"]], "timeseries_8000.csv.gz": [[964, "timeseries_8000.csv.gz"]], "wind_rose_bremen.csv": [[964, "wind_rose_bremen.csv"]], "wind_rotation.nc": [[964, "wind_rotation.nc"]], "Power and thrust curves": [[964, "Power-and-thrust-curves"]], "DTU-10MW-D178d3-H119.csv": [[964, "DTU-10MW-D178d3-H119.csv"]], "IEA-15MW-D240-H150.csv": [[964, "IEA-15MW-D240-H150.csv"]], "IWT-7d5MW-D164-H100.csv": [[964, "IWT-7d5MW-D164-H100.csv"]], "NREL-5MW-D126-H90.csv": [[964, "NREL-5MW-D126-H90.csv"]], "File paths": [[964, "File-paths"]], "Heterogeneous flow": [[965, "Heterogeneous-flow"]], "Layout optimization": [[966, "Layout-optimization"]], "The model book": [[967, "The-model-book"]], "Multi-height wind data": [[968, "Multi-height-wind-data"]], "Overview - how to setup foxes": [[969, "Overview---how-to-setup-foxes"]], "Power mask": [[970, "Power-mask"]], "Wind sector management": [[971, "Wind-sector-management"]], "Single row of turbines": [[972, "Single-row-of-turbines"]], "Timeseries data": [[973, "Timeseries-data"]], "Wind rose data": [[974, "Wind-rose-data"]], "Yawed rotor wakes": [[975, "Yawed-rotor-wakes"]]}, "indexentries": {}, "docurls": ["_core/Algorithm.html", "_core/Algorithm.__init__.html", "_core/Algorithm.finalize.html", "_core/Algorithm.finalize_model.html", "_core/Algorithm.get_models_data.html", "_core/Algorithm.idata_mem.html", "_core/Algorithm.initialize.html", "_core/Algorithm.new.html", "_core/Algorithm.new_point_data.html", "_core/Algorithm.print.html", "_core/Algorithm.update_idata.html", "_core/Algorithm.update_n_turbines.html", "_core/Data.html", "_core/Data.__init__.html", "_core/DataCalcModel.html", "_core/DataCalcModel.calculate.html", "_core/DataCalcModel.run_calculation.html", "_core/ExtendedStates.html", "_core/ExtendedStates.__init__.html", "_core/ExtendedStates.append.html", "_core/ExtendedStates.calculate.html", "_core/ExtendedStates.finalize.html", "_core/ExtendedStates.index.html", "_core/ExtendedStates.initialize.html", "_core/ExtendedStates.output_point_vars.html", "_core/ExtendedStates.size.html", "_core/ExtendedStates.weights.html", "_core/FarmController.html", "_core/FarmController.__init__.html", "_core/FarmController.calculate.html", "_core/FarmController.collect_models.html", "_core/FarmController.finalize.html", "_core/FarmController.initialize.html", "_core/FarmController.output_farm_vars.html", "_core/FarmController.set_pars.html", "_core/FarmDataModel.html", "_core/FarmDataModel.__init__.html", "_core/FarmDataModel.calculate.html", "_core/FarmDataModel.output_farm_vars.html", "_core/FarmDataModel.run_calculation.html", "_core/FarmDataModelList.html", "_core/FarmDataModelList.__init__.html", "_core/FarmDataModelList.append.html", "_core/FarmDataModelList.calculate.html", "_core/FarmDataModelList.finalize.html", "_core/FarmDataModelList.initialize.html", "_core/FarmDataModelList.output_farm_vars.html", "_core/FarmModel.html", "_core/Model.html", "_core/Model.__init__.html", "_core/Model.__repr__.html", "_core/Model.finalize.html", "_core/Model.get_data.html", "_core/Model.initialize.html", "_core/Model.initialized.html", "_core/Model.model_id.html", "_core/Model.var.html", "_core/PartialWakesModel.html", "_core/PartialWakesModel.__init__.html", "_core/PartialWakesModel.contribute_to_wake_deltas.html", "_core/PartialWakesModel.evaluate_results.html", "_core/PartialWakesModel.initialize.html", "_core/PartialWakesModel.new.html", "_core/PartialWakesModel.new_wake_deltas.html", "_core/PointDataModel.html", "_core/PointDataModel.calculate.html", "_core/PointDataModel.output_point_vars.html", "_core/PointDataModel.run_calculation.html", "_core/PointDataModelList.html", "_core/PointDataModelList.__init__.html", "_core/PointDataModelList.append.html", "_core/PointDataModelList.calculate.html", "_core/PointDataModelList.finalize.html", "_core/PointDataModelList.initialize.html", "_core/PointDataModelList.output_point_vars.html", "_core/RotorModel.html", "_core/RotorModel.__init__.html", "_core/RotorModel.calculate.html", "_core/RotorModel.design_points.html", "_core/RotorModel.eval_rpoint_results.html", "_core/RotorModel.get_rotor_points.html", "_core/RotorModel.n_rotor_points.html", "_core/RotorModel.output_farm_vars.html", "_core/RotorModel.rotor_point_weights.html", "_core/States.html", "_core/States.index.html", "_core/States.output_point_vars.html", "_core/States.size.html", "_core/States.weights.html", "_core/Turbine.html", "_core/Turbine.__init__.html", "_core/Turbine.add_model.html", "_core/Turbine.insert_model.html", "_core/TurbineModel.html", "_core/TurbineModel.calculate.html", "_core/TurbineType.html", "_core/TurbineType.__init__.html", "_core/VerticalProfile.html", "_core/VerticalProfile.calculate.html", "_core/VerticalProfile.input_vars.html", "_core/VerticalProfile.new.html", "_core/WakeFrame.html", "_core/WakeFrame.calc_centreline_integral.html", "_core/WakeFrame.calc_order.html", "_core/WakeFrame.get_centreline_points.html", "_core/WakeFrame.get_wake_coos.html", "_core/WakeModel.html", "_core/WakeModel.contribute_to_wake_deltas.html", "_core/WakeModel.finalize_wake_deltas.html", "_core/WakeModel.init_wake_deltas.html", "_core/WakeSuperposition.html", "_core/WakeSuperposition.calc_final_wake_delta.html", "_core/WakeSuperposition.calc_wakes_plus_wake.html", "_core/WindFarm.html", "_core/WindFarm.__init__.html", "_core/WindFarm.add_turbine.html", "_core/WindFarm.n_turbines.html", "_core/WindFarm.turbine_names.html", "_data/StaticData.html", "_data/StaticData.__init__.html", "_data/parse_Pct_file_name.html", "_data/parse_Pct_two_files.html", "_input/farm_layout/add_from_csv.html", "_input/farm_layout/add_from_df.html", "_input/farm_layout/add_from_file.html", "_input/farm_layout/add_from_json.html", "_input/farm_layout/add_grid.html", "_input/farm_layout/add_row.html", "_input/states/FieldDataNC.html", "_input/states/FieldDataNC.__init__.html", "_input/states/FieldDataNC.calculate.html", "_input/states/FieldDataNC.index.html", "_input/states/FieldDataNC.initialize.html", "_input/states/FieldDataNC.output_point_vars.html", "_input/states/FieldDataNC.size.html", "_input/states/FieldDataNC.weights.html", "_input/states/MultiHeightStates.html", "_input/states/MultiHeightStates.RDICT.html", "_input/states/MultiHeightStates.__init__.html", "_input/states/MultiHeightStates.calculate.html", "_input/states/MultiHeightStates.finalize.html", "_input/states/MultiHeightStates.index.html", "_input/states/MultiHeightStates.initialize.html", "_input/states/MultiHeightStates.output_point_vars.html", "_input/states/MultiHeightStates.reset.html", "_input/states/MultiHeightStates.size.html", "_input/states/MultiHeightStates.weights.html", "_input/states/MultiHeightTimeseries.html", "_input/states/MultiHeightTimeseries.RDICT.html", "_input/states/ScanWS.html", "_input/states/ScanWS.__init__.html", "_input/states/ScanWS.calculate.html", "_input/states/ScanWS.initialize.html", "_input/states/ScanWS.output_point_vars.html", "_input/states/ScanWS.size.html", "_input/states/ScanWS.weights.html", "_input/states/SingleStateStates.html", "_input/states/SingleStateStates.__init__.html", "_input/states/SingleStateStates.calculate.html", "_input/states/SingleStateStates.initialize.html", "_input/states/SingleStateStates.output_point_vars.html", "_input/states/SingleStateStates.size.html", "_input/states/SingleStateStates.weights.html", "_input/states/StatesTable.html", "_input/states/StatesTable.RDICT.html", "_input/states/StatesTable.__init__.html", "_input/states/StatesTable.calculate.html", "_input/states/StatesTable.finalize.html", "_input/states/StatesTable.index.html", "_input/states/StatesTable.initialize.html", "_input/states/StatesTable.output_point_vars.html", "_input/states/StatesTable.reset.html", "_input/states/StatesTable.size.html", "_input/states/StatesTable.weights.html", "_input/states/Timeseries.html", "_input/states/Timeseries.RDICT.html", "_input/states/create_random_abl_states.html", "_input/windio/read_case.html", "_models/farm_controllers/BasicFarmController.html", "_models/farm_models/Turbine2FarmModel.html", "_models/farm_models/Turbine2FarmModel.__init__.html", "_models/farm_models/Turbine2FarmModel.__repr__.html", "_models/farm_models/Turbine2FarmModel.calculate.html", "_models/farm_models/Turbine2FarmModel.finalize.html", "_models/farm_models/Turbine2FarmModel.initialize.html", "_models/farm_models/Turbine2FarmModel.output_farm_vars.html", "_models/model_book/Dict.html", "_models/model_book/Dict.__getitem__.html", "_models/model_book/Dict.__init__.html", "_models/model_book/ModelBook.html", "_models/model_book/ModelBook.__getitem__.html", "_models/model_book/ModelBook.__init__.html", "_models/model_book/ModelBook.finalize.html", "_models/model_book/ModelBook.print_toc.html", "_models/partial_wakes/Mapped.html", "_models/partial_wakes/Mapped.__init__.html", "_models/partial_wakes/Mapped.contribute_to_wake_deltas.html", "_models/partial_wakes/Mapped.evaluate_results.html", "_models/partial_wakes/Mapped.finalize.html", "_models/partial_wakes/Mapped.initialize.html", "_models/partial_wakes/Mapped.new_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.html", "_models/partial_wakes/PartialAxiwake.__init__.html", "_models/partial_wakes/PartialAxiwake.__repr__.html", "_models/partial_wakes/PartialAxiwake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.evaluate_results.html", "_models/partial_wakes/PartialAxiwake.finalize.html", "_models/partial_wakes/PartialAxiwake.initialize.html", "_models/partial_wakes/PartialAxiwake.new_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.html", "_models/partial_wakes/PartialDistSlicedWake.__init__.html", "_models/partial_wakes/PartialDistSlicedWake.__repr__.html", "_models/partial_wakes/PartialDistSlicedWake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.evaluate_results.html", "_models/partial_wakes/PartialDistSlicedWake.finalize.html", "_models/partial_wakes/PartialDistSlicedWake.initialize.html", "_models/partial_wakes/PartialDistSlicedWake.new_wake_deltas.html", "_models/partial_wakes/PartialGrid.html", "_models/partial_wakes/PartialGrid.__init__.html", "_models/partial_wakes/PartialGrid.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.html", "_models/partial_wakes/PartialTopHat.__init__.html", "_models/partial_wakes/PartialTopHat.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.evaluate_results.html", "_models/partial_wakes/PartialTopHat.finalize.html", "_models/partial_wakes/PartialTopHat.get_wake_points.html", "_models/partial_wakes/PartialTopHat.initialize.html", "_models/partial_wakes/PartialTopHat.new_wake_deltas.html", "_models/partial_wakes/RotorPoints.html", "_models/partial_wakes/RotorPoints.__init__.html", "_models/partial_wakes/RotorPoints.contribute_to_wake_deltas.html", "_models/partial_wakes/RotorPoints.evaluate_results.html", "_models/partial_wakes/RotorPoints.get_wake_points.html", "_models/partial_wakes/RotorPoints.initialize.html", "_models/partial_wakes/RotorPoints.new_wake_deltas.html", "_models/point_models/SetUniformData.html", "_models/point_models/SetUniformData.__init__.html", "_models/point_models/SetUniformData.calculate.html", "_models/point_models/SetUniformData.initialize.html", "_models/point_models/SetUniformData.output_point_vars.html", "_models/point_models/TKE2TI.html", "_models/point_models/TKE2TI.calculate.html", "_models/point_models/TKE2TI.output_point_vars.html", "_models/point_models/WakeDeltas.html", "_models/point_models/WakeDeltas.__init__.html", "_models/point_models/WakeDeltas.calculate.html", "_models/point_models/WakeDeltas.output_point_vars.html", "_models/rotor_models/CentreRotor.html", "_models/rotor_models/CentreRotor.design_points.html", "_models/rotor_models/CentreRotor.eval_rpoint_results.html", "_models/rotor_models/CentreRotor.get_rotor_points.html", "_models/rotor_models/CentreRotor.n_rotor_points.html", "_models/rotor_models/CentreRotor.rotor_point_weights.html", "_models/rotor_models/GridRotor.html", "_models/rotor_models/GridRotor.__init__.html", "_models/rotor_models/GridRotor.__repr__.html", "_models/rotor_models/GridRotor.design_points.html", "_models/rotor_models/GridRotor.initialize.html", "_models/rotor_models/GridRotor.n_rotor_points.html", "_models/rotor_models/GridRotor.rotor_point_weights.html", "_models/turbine_models/Calculator.html", "_models/turbine_models/Calculator.__init__.html", "_models/turbine_models/Calculator.calculate.html", "_models/turbine_models/Calculator.output_farm_vars.html", "_models/turbine_models/LookupTable.html", "_models/turbine_models/LookupTable.__init__.html", "_models/turbine_models/LookupTable.calculate.html", "_models/turbine_models/LookupTable.initialize.html", "_models/turbine_models/LookupTable.output_farm_vars.html", "_models/turbine_models/PowerMask.html", "_models/turbine_models/PowerMask.__init__.html", "_models/turbine_models/PowerMask.calculate.html", "_models/turbine_models/PowerMask.initialize.html", "_models/turbine_models/PowerMask.output_farm_vars.html", "_models/turbine_models/PowerMask.update_P_ct.html", "_models/turbine_models/RotorCentreCalc.html", "_models/turbine_models/RotorCentreCalc.__init__.html", "_models/turbine_models/RotorCentreCalc.calculate.html", "_models/turbine_models/RotorCentreCalc.finalize.html", "_models/turbine_models/RotorCentreCalc.initialize.html", "_models/turbine_models/RotorCentreCalc.output_farm_vars.html", "_models/turbine_models/SectorManagement.html", "_models/turbine_models/SectorManagement.__init__.html", "_models/turbine_models/SectorManagement.calculate.html", "_models/turbine_models/SectorManagement.initialize.html", "_models/turbine_models/SectorManagement.output_farm_vars.html", "_models/turbine_models/SetFarmVars.html", "_models/turbine_models/SetFarmVars.__init__.html", "_models/turbine_models/SetFarmVars.add_var.html", "_models/turbine_models/SetFarmVars.calculate.html", "_models/turbine_models/SetFarmVars.initialize.html", "_models/turbine_models/SetFarmVars.output_farm_vars.html", "_models/turbine_models/SetFarmVars.reset.html", "_models/turbine_models/SetXYHD.html", "_models/turbine_models/SetXYHD.__init__.html", "_models/turbine_models/SetXYHD.calculate.html", "_models/turbine_models/SetXYHD.output_farm_vars.html", "_models/turbine_models/TableFactors.html", "_models/turbine_models/TableFactors.__init__.html", "_models/turbine_models/TableFactors.calculate.html", "_models/turbine_models/TableFactors.initialize.html", "_models/turbine_models/TableFactors.output_farm_vars.html", "_models/turbine_models/Thrust2Ct.html", "_models/turbine_models/Thrust2Ct.__init__.html", "_models/turbine_models/Thrust2Ct.calculate.html", "_models/turbine_models/Thrust2Ct.output_farm_vars.html", "_models/turbine_models/YAW2YAWM.html", "_models/turbine_models/YAW2YAWM.calculate.html", "_models/turbine_models/YAW2YAWM.output_farm_vars.html", "_models/turbine_models/YAWM2YAW.html", "_models/turbine_models/YAWM2YAW.calculate.html", "_models/turbine_models/YAWM2YAW.output_farm_vars.html", "_models/turbine_models/kTI.html", "_models/turbine_models/kTI.__init__.html", "_models/turbine_models/kTI.__repr__.html", "_models/turbine_models/kTI.calculate.html", "_models/turbine_models/kTI.output_farm_vars.html", "_models/turbine_types/CpCtFile.html", "_models/turbine_types/CpCtFile.__init__.html", "_models/turbine_types/CpCtFromTwo.html", "_models/turbine_types/CpCtFromTwo.__init__.html", "_models/turbine_types/NullType.html", "_models/turbine_types/NullType.calculate.html", "_models/turbine_types/NullType.output_farm_vars.html", "_models/turbine_types/PCtFile.html", "_models/turbine_types/PCtFile.__init__.html", "_models/turbine_types/PCtFile.calculate.html", "_models/turbine_types/PCtFile.finalize.html", "_models/turbine_types/PCtFile.initialize.html", "_models/turbine_types/PCtFile.output_farm_vars.html", "_models/turbine_types/PCtFromTwo.html", "_models/turbine_types/PCtFromTwo.__init__.html", "_models/turbine_types/PCtFromTwo.calculate.html", "_models/turbine_types/PCtFromTwo.finalize.html", "_models/turbine_types/PCtFromTwo.initialize.html", "_models/turbine_types/PCtFromTwo.output_farm_vars.html", "_models/turbine_types/WsRho2PCtFromTwo.html", "_models/turbine_types/WsRho2PCtFromTwo.__init__.html", "_models/turbine_types/WsRho2PCtFromTwo.calculate.html", "_models/turbine_types/WsRho2PCtFromTwo.finalize.html", "_models/turbine_types/WsRho2PCtFromTwo.initialize.html", "_models/turbine_types/WsRho2PCtFromTwo.output_farm_vars.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.calculate.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogStableWsProfile.html", "_models/vertical_profiles/ABLLogStableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogStableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogWsProfile.html", "_models/vertical_profiles/ABLLogWsProfile.calculate.html", "_models/vertical_profiles/ABLLogWsProfile.input_vars.html", "_models/vertical_profiles/ShearedProfile.html", "_models/vertical_profiles/ShearedProfile.calculate.html", "_models/vertical_profiles/ShearedProfile.input_vars.html", "_models/vertical_profiles/UniformProfile.html", "_models/vertical_profiles/UniformProfile.__init__.html", "_models/vertical_profiles/UniformProfile.calculate.html", "_models/vertical_profiles/UniformProfile.input_vars.html", "_models/wake_frames/FarmOrder.html", "_models/wake_frames/FarmOrder.__init__.html", "_models/wake_frames/FarmOrder.calc_order.html", "_models/wake_frames/FarmOrder.finalize.html", "_models/wake_frames/FarmOrder.get_centreline_points.html", "_models/wake_frames/FarmOrder.get_wake_coos.html", "_models/wake_frames/FarmOrder.initialize.html", "_models/wake_frames/RotorWD.html", "_models/wake_frames/RotorWD.__init__.html", "_models/wake_frames/RotorWD.calc_order.html", "_models/wake_frames/RotorWD.get_centreline_points.html", "_models/wake_frames/RotorWD.get_wake_coos.html", "_models/wake_frames/Streamlines.html", "_models/wake_frames/Streamlines.__init__.html", "_models/wake_frames/Streamlines.__repr__.html", "_models/wake_frames/Streamlines.calc_order.html", "_models/wake_frames/Streamlines.get_centreline_points.html", "_models/wake_frames/Streamlines.get_wake_coos.html", "_models/wake_frames/Streamlines.initialize.html", "_models/wake_frames/YawedWakes.html", "_models/wake_frames/YawedWakes.__init__.html", "_models/wake_frames/YawedWakes.calc_order.html", "_models/wake_frames/YawedWakes.finalize.html", "_models/wake_frames/YawedWakes.get_centreline_points.html", "_models/wake_frames/YawedWakes.get_wake_coos.html", "_models/wake_frames/YawedWakes.initialize.html", "_models/wake_models/AxisymmetricWakeModel.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.html", "_models/wake_models/DistSlicedWakeModel.__init__.html", "_models/wake_models/DistSlicedWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.contribute_to_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.finalize.html", "_models/wake_models/DistSlicedWakeModel.finalize_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.initialize.html", "_models/wake_models/GaussianWakeModel.html", "_models/wake_models/GaussianWakeModel.calc_amplitude_sigma_spsel.html", "_models/wake_models/GaussianWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/TopHatWakeModel.html", "_models/wake_models/TopHatWakeModel.__init__.html", "_models/wake_models/TopHatWakeModel.calc_centreline_wake_deltas.html", "_models/wake_models/TopHatWakeModel.calc_wake_radius.html", "_models/wake_models/TopHatWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/ti/CrespoHernandezTIWake.html", "_models/wake_models/ti/CrespoHernandezTIWake.__init__.html", "_models/wake_models/ti/CrespoHernandezTIWake.__repr__.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_wake_radius.html", "_models/wake_models/ti/CrespoHernandezTIWake.init_wake_deltas.html", "_models/wake_models/ti/IECTIWake.html", "_models/wake_models/ti/IECTIWake.__init__.html", "_models/wake_models/ti/IECTIWake.__repr__.html", "_models/wake_models/ti/IECTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/IECTIWake.calc_wake_radius.html", "_models/wake_models/ti/IECTIWake.init_wake_deltas.html", "_models/wake_models/wind/BastankhahWake.html", "_models/wake_models/wind/BastankhahWake.__init__.html", "_models/wake_models/wind/BastankhahWake.__repr__.html", "_models/wake_models/wind/BastankhahWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/BastankhahWake.init_wake_deltas.html", "_models/wake_models/wind/JensenWake.html", "_models/wake_models/wind/JensenWake.__init__.html", "_models/wake_models/wind/JensenWake.__repr__.html", "_models/wake_models/wind/JensenWake.calc_centreline_wake_deltas.html", "_models/wake_models/wind/JensenWake.calc_wake_radius.html", "_models/wake_models/wind/JensenWake.init_wake_deltas.html", "_models/wake_models/wind/PorteAgelModel.html", "_models/wake_models/wind/PorteAgelModel.AMPL_FAR.html", "_models/wake_models/wind/PorteAgelModel.AMPL_NEAR.html", "_models/wake_models/wind/PorteAgelModel.CHECK.html", "_models/wake_models/wind/PorteAgelModel.DELTA_FAR.html", "_models/wake_models/wind/PorteAgelModel.DELTA_NEAR.html", "_models/wake_models/wind/PorteAgelModel.MDATA_KEY.html", "_models/wake_models/wind/PorteAgelModel.NEAR.html", "_models/wake_models/wind/PorteAgelModel.PARS.html", "_models/wake_models/wind/PorteAgelModel.R_PC.html", "_models/wake_models/wind/PorteAgelModel.R_PC_S.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Y_FAR.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Z_FAR.html", "_models/wake_models/wind/PorteAgelModel.SP_SEL.html", "_models/wake_models/wind/PorteAgelModel.X0.html", "_models/wake_models/wind/PorteAgelModel.__init__.html", "_models/wake_models/wind/PorteAgelModel.calc_data.html", "_models/wake_models/wind/PorteAgelModel.clean.html", "_models/wake_models/wind/PorteAgelModel.get_data.html", "_models/wake_models/wind/PorteAgelModel.has_data.html", "_models/wake_models/wind/PorteAgelModel.pars.html", "_models/wake_models/wind/PorteAgelWake.html", "_models/wake_models/wind/PorteAgelWake.__init__.html", "_models/wake_models/wind/PorteAgelWake.__repr__.html", "_models/wake_models/wind/PorteAgelWake.calc_wakes_spsel_x_yz.html", "_models/wake_models/wind/PorteAgelWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWake.html", "_models/wake_models/wind/TurbOParkWake.__init__.html", "_models/wake_models/wind/TurbOParkWake.__repr__.html", "_models/wake_models/wind/TurbOParkWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWakeIX.html", "_models/wake_models/wind/TurbOParkWakeIX.__init__.html", "_models/wake_models/wind/TurbOParkWakeIX.__repr__.html", "_models/wake_models/wind/TurbOParkWakeIX.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWakeIX.init_wake_deltas.html", "_models/wake_superpositions/LinearSuperposition.html", "_models/wake_superpositions/LinearSuperposition.__init__.html", "_models/wake_superpositions/LinearSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/LinearSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/MaxSuperposition.html", "_models/wake_superpositions/MaxSuperposition.__init__.html", "_models/wake_superpositions/MaxSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/MaxSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/MaxSuperposition.initialize.html", "_models/wake_superpositions/ProductSuperposition.html", "_models/wake_superpositions/ProductSuperposition.__init__.html", "_models/wake_superpositions/ProductSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/ProductSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.html", "_models/wake_superpositions/QuadraticSuperposition.__init__.html", "_models/wake_superpositions/QuadraticSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/QuadraticSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.initialize.html", "_models/wake_superpositions/TISuperposition.html", "_models/wake_superpositions/TISuperposition.__init__.html", "_models/wake_superpositions/TISuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/TISuperposition.calc_wakes_plus_wake.html", "_output/FarmLayoutOutput.html", "_output/FarmLayoutOutput.__init__.html", "_output/FarmLayoutOutput.get_figure.html", "_output/FarmLayoutOutput.get_layout_data.html", "_output/FarmLayoutOutput.get_layout_dict.html", "_output/FarmLayoutOutput.write_csv.html", "_output/FarmLayoutOutput.write_json.html", "_output/FarmLayoutOutput.write_plot.html", "_output/FarmLayoutOutput.write_xyh.html", "_output/FarmResultsEval.html", "_output/FarmResultsEval.__init__.html", "_output/FarmResultsEval.add_capacity.html", "_output/FarmResultsEval.add_efficiency.html", "_output/FarmResultsEval.calc_farm_efficiency.html", "_output/FarmResultsEval.calc_farm_mean.html", "_output/FarmResultsEval.calc_farm_sum.html", "_output/FarmResultsEval.calc_farm_yield.html", "_output/FarmResultsEval.calc_mean_farm_power.html", "_output/FarmResultsEval.calc_states_mean.html", "_output/FarmResultsEval.calc_states_std.html", "_output/FarmResultsEval.calc_states_sum.html", "_output/FarmResultsEval.calc_turbine_mean.html", "_output/FarmResultsEval.calc_turbine_sum.html", "_output/FarmResultsEval.calc_turbine_yield.html", "_output/FarmResultsEval.reduce_all.html", "_output/FarmResultsEval.reduce_states.html", "_output/FarmResultsEval.reduce_turbines.html", "_output/FarmResultsEval.weinsum.html", "_output/FlowPlots2D.html", "_output/FlowPlots2D.__init__.html", "_output/FlowPlots2D.gen_states_fig_xy.html", "_output/FlowPlots2D.gen_states_fig_xz.html", "_output/FlowPlots2D.gen_states_fig_yz.html", "_output/FlowPlots2D.get_mean_fig_xy.html", "_output/FlowPlots2D.get_mean_fig_xz.html", "_output/FlowPlots2D.get_mean_fig_yz.html", "_output/Output.html", "_output/Output.new.html", "_output/Output.print_models.html", "_output/Output.write.html", "_output/ResultsWriter.html", "_output/ResultsWriter.__init__.html", "_output/ResultsWriter.write_csv.html", "_output/RosePlotOutput.html", "_output/RosePlotOutput.__init__.html", "_output/RosePlotOutput.get_data.html", "_output/RosePlotOutput.get_data_info.html", "_output/RosePlotOutput.get_figure.html", "_output/RosePlotOutput.write_figure.html", "_output/StateTurbineMap.html", "_output/StateTurbineMap.__init__.html", "_output/StateTurbineMap.plot_map.html", "_output/StatesRosePlotOutput.html", "_output/StatesRosePlotOutput.__init__.html", "_output/TurbineTypeCurves.html", "_output/TurbineTypeCurves.__init__.html", "_output/TurbineTypeCurves.plot_curves.html", "_utils/DataBook.html", "_utils/DataBook.__init__.html", "_utils/DataBook.add_data_package.html", "_utils/DataBook.add_data_package_file.html", "_utils/DataBook.add_file.html", "_utils/DataBook.add_files.html", "_utils/DataBook.get_file_path.html", "_utils/DataBook.toc.html", "_utils/PandasFileHelper.html", "_utils/PandasFileHelper.DATA_FILE_FORMATS.html", "_utils/PandasFileHelper.DEFAULT_FORMAT_DICT.html", "_utils/PandasFileHelper.DEFAULT_READING_PARAMETERS.html", "_utils/PandasFileHelper.DEFAULT_WRITING_PARAMETERS.html", "_utils/PandasFileHelper.read_file.html", "_utils/PandasFileHelper.write_file.html", "_utils/abl/neutral/calc_ws.html", "_utils/abl/neutral/logz.html", "_utils/abl/neutral/ustar.html", "_utils/abl/sheared/calc_ws.html", "_utils/abl/stable/calc_ws.html", "_utils/abl/stable/lgz.html", "_utils/abl/stable/logz.html", "_utils/abl/stable/psi.html", "_utils/abl/stable/ustar.html", "_utils/abl/unstable/calc_ws.html", "_utils/abl/unstable/logz.html", "_utils/abl/unstable/psi.html", "_utils/abl/unstable/ustar.html", "_utils/all_subclasses.html", "_utils/cubic_roots.html", "_utils/delta_wd.html", "_utils/geom2d/AreaGeometry.html", "_utils/geom2d/AreaGeometry.add_to_figure.html", "_utils/geom2d/AreaGeometry.inverse.html", "_utils/geom2d/AreaGeometry.p_max.html", "_utils/geom2d/AreaGeometry.p_min.html", "_utils/geom2d/AreaGeometry.points_distance.html", "_utils/geom2d/AreaGeometry.points_inside.html", "_utils/geom2d/AreaIntersection.html", "_utils/geom2d/AreaIntersection.__new__.html", "_utils/geom2d/AreaUnion.html", "_utils/geom2d/AreaUnion.__init__.html", "_utils/geom2d/AreaUnion.add_to_figure.html", "_utils/geom2d/AreaUnion.inverse.html", "_utils/geom2d/AreaUnion.p_max.html", "_utils/geom2d/AreaUnion.p_min.html", "_utils/geom2d/AreaUnion.points_distance.html", "_utils/geom2d/AreaUnion.points_inside.html", "_utils/geom2d/Circle.html", "_utils/geom2d/Circle.__init__.html", "_utils/geom2d/Circle.add_to_figure.html", "_utils/geom2d/Circle.p_max.html", "_utils/geom2d/Circle.p_min.html", "_utils/geom2d/Circle.points_distance.html", "_utils/geom2d/Circle.points_inside.html", "_utils/geom2d/ClosedPolygon.html", "_utils/geom2d/ClosedPolygon.__init__.html", "_utils/geom2d/ClosedPolygon.add_to_figure.html", "_utils/geom2d/ClosedPolygon.p_max.html", "_utils/geom2d/ClosedPolygon.p_min.html", "_utils/geom2d/ClosedPolygon.points_distance.html", "_utils/geom2d/ClosedPolygon.points_inside.html", "_utils/geom2d/HalfPlane.html", "_utils/geom2d/HalfPlane.__init__.html", "_utils/geom2d/HalfPlane.add_to_figure.html", "_utils/geom2d/HalfPlane.inverse.html", "_utils/geom2d/HalfPlane.p_max.html", "_utils/geom2d/HalfPlane.p_min.html", "_utils/geom2d/HalfPlane.points_distance.html", "_utils/geom2d/HalfPlane.points_inside.html", "_utils/geom2d/InvertedAreaGeometry.html", "_utils/geom2d/InvertedAreaGeometry.__init__.html", "_utils/geom2d/InvertedAreaGeometry.add_to_figure.html", "_utils/geom2d/InvertedAreaGeometry.inverse.html", "_utils/geom2d/InvertedAreaGeometry.p_max.html", "_utils/geom2d/InvertedAreaGeometry.p_min.html", "_utils/geom2d/InvertedAreaGeometry.points_distance.html", "_utils/geom2d/InvertedAreaGeometry.points_inside.html", "_utils/opt/constraints/AreaGeometryConstraint.html", "_utils/opt/constraints/AreaGeometryConstraint.__init__.html", "_utils/opt/constraints/AreaGeometryConstraint.__str__.html", "_utils/opt/constraints/AreaGeometryConstraint.ana_deriv.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_population.html", "_utils/opt/constraints/AreaGeometryConstraint.component_names.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_population.html", "_utils/opt/constraints/AreaGeometryConstraint.initialize.html", "_utils/opt/constraints/AreaGeometryConstraint.initialized.html", "_utils/opt/constraints/AreaGeometryConstraint.n_components.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_float.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_int.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_float.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_int.html", "_utils/opt/constraints/FarmBoundaryConstraint.html", "_utils/opt/constraints/FarmBoundaryConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.html", "_utils/opt/constraints/MinDistConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.calc_individual.html", "_utils/opt/constraints/MinDistConstraint.calc_population.html", "_utils/opt/constraints/MinDistConstraint.initialize.html", "_utils/opt/constraints/MinDistConstraint.n_components.html", "_utils/opt/constraints/MinDistConstraint.vardeps_float.html", "_utils/opt/core/FarmConstraint.html", "_utils/opt/core/FarmConstraint.__init__.html", "_utils/opt/core/FarmConstraint.add_to_layout_figure.html", "_utils/opt/core/FarmConstraint.calc_individual.html", "_utils/opt/core/FarmConstraint.calc_population.html", "_utils/opt/core/FarmConstraint.farm.html", "_utils/opt/core/FarmConstraint.n_components.html", "_utils/opt/core/FarmConstraint.n_sel_turbines.html", "_utils/opt/core/FarmConstraint.print_models.html", "_utils/opt/core/FarmConstraint.sel_turbines.html", "_utils/opt/core/FarmConstraint.vardeps_float.html", "_utils/opt/core/FarmObjective.html", "_utils/opt/core/FarmObjective.__init__.html", "_utils/opt/core/FarmObjective.add_to_layout_figure.html", "_utils/opt/core/FarmObjective.farm.html", "_utils/opt/core/FarmObjective.n_sel_turbines.html", "_utils/opt/core/FarmObjective.print_models.html", "_utils/opt/core/FarmObjective.sel_turbines.html", "_utils/opt/core/FarmOptProblem.html", "_utils/opt/core/FarmOptProblem.INT_INF.html", "_utils/opt/core/FarmOptProblem.__init__.html", "_utils/opt/core/FarmOptProblem.add_constraint.html", "_utils/opt/core/FarmOptProblem.add_objective.html", "_utils/opt/core/FarmOptProblem.add_to_layout_figure.html", "_utils/opt/core/FarmOptProblem.all_turbines.html", "_utils/opt/core/FarmOptProblem.apply_individual.html", "_utils/opt/core/FarmOptProblem.apply_population.html", "_utils/opt/core/FarmOptProblem.calc_gradients.html", "_utils/opt/core/FarmOptProblem.check_constraints_individual.html", "_utils/opt/core/FarmOptProblem.check_constraints_population.html", "_utils/opt/core/FarmOptProblem.constraints_tol.html", "_utils/opt/core/FarmOptProblem.counter.html", "_utils/opt/core/FarmOptProblem.evaluate_individual.html", "_utils/opt/core/FarmOptProblem.evaluate_population.html", "_utils/opt/core/FarmOptProblem.farm.html", "_utils/opt/core/FarmOptProblem.finalize_individual.html", "_utils/opt/core/FarmOptProblem.finalize_population.html", "_utils/opt/core/FarmOptProblem.get_gradients.html", "_utils/opt/core/FarmOptProblem.initial_values_float.html", "_utils/opt/core/FarmOptProblem.initial_values_int.html", "_utils/opt/core/FarmOptProblem.initialize.html", "_utils/opt/core/FarmOptProblem.max_values_constraints.html", "_utils/opt/core/FarmOptProblem.max_values_float.html", "_utils/opt/core/FarmOptProblem.max_values_int.html", "_utils/opt/core/FarmOptProblem.maximize_objs.html", "_utils/opt/core/FarmOptProblem.min_values_constraints.html", "_utils/opt/core/FarmOptProblem.min_values_float.html", "_utils/opt/core/FarmOptProblem.min_values_int.html", "_utils/opt/core/FarmOptProblem.n_constraints.html", "_utils/opt/core/FarmOptProblem.n_objectives.html", "_utils/opt/core/FarmOptProblem.n_sel_turbines.html", "_utils/opt/core/FarmOptProblem.n_vars_float.html", "_utils/opt/core/FarmOptProblem.n_vars_int.html", "_utils/opt/core/FarmOptProblem.parse_tvar.html", "_utils/opt/core/FarmOptProblem.sel_turbines.html", "_utils/opt/core/FarmOptProblem.tvar.html", "_utils/opt/core/FarmOptProblem.update_problem_individual.html", "_utils/opt/core/FarmOptProblem.update_problem_population.html", "_utils/opt/core/FarmOptProblem.var_names_float.html", "_utils/opt/core/FarmOptProblem.var_names_int.html", "_utils/opt/core/FarmVarsProblem.html", "_utils/opt/core/FarmVarsProblem.initialize.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_individual.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_population.html", "_utils/opt/core/FarmVarsProblem.update_problem_individual.html", "_utils/opt/core/FarmVarsProblem.update_problem_population.html", "_utils/opt/core/PopStates.html", "_utils/opt/core/PopStates.__init__.html", "_utils/opt/core/PopStates.calculate.html", "_utils/opt/core/PopStates.initialize.html", "_utils/opt/core/PopStates.output_point_vars.html", "_utils/opt/core/PopStates.size.html", "_utils/opt/core/PopStates.weights.html", "_utils/opt/objectives/FarmVarObjective.html", "_utils/opt/objectives/FarmVarObjective.__init__.html", "_utils/opt/objectives/FarmVarObjective.calc_individual.html", "_utils/opt/objectives/FarmVarObjective.calc_population.html", "_utils/opt/objectives/FarmVarObjective.finalize_individual.html", "_utils/opt/objectives/FarmVarObjective.initialize.html", "_utils/opt/objectives/FarmVarObjective.maximize.html", "_utils/opt/objectives/FarmVarObjective.n_components.html", "_utils/opt/objectives/FarmVarObjective.vardeps_float.html", "_utils/opt/objectives/MaxFarmPower.html", "_utils/opt/objectives/MaxFarmPower.__init__.html", "_utils/opt/objectives/MaxNTurbines.html", "_utils/opt/objectives/MaxNTurbines.__init__.html", "_utils/opt/objectives/MaxNTurbines.calc_individual.html", "_utils/opt/objectives/MaxNTurbines.calc_population.html", "_utils/opt/objectives/MaxNTurbines.maximize.html", "_utils/opt/objectives/MaxNTurbines.n_components.html", "_utils/opt/objectives/MinimalMaxTI.html", "_utils/opt/objectives/MinimalMaxTI.__init__.html", "_utils/opt/problems/OptFarmVars.html", "_utils/opt/problems/OptFarmVars.__init__.html", "_utils/opt/problems/OptFarmVars.add_var.html", "_utils/opt/problems/OptFarmVars.initial_values_float.html", "_utils/opt/problems/OptFarmVars.initial_values_int.html", "_utils/opt/problems/OptFarmVars.initialize.html", "_utils/opt/problems/OptFarmVars.max_values_float.html", "_utils/opt/problems/OptFarmVars.max_values_int.html", "_utils/opt/problems/OptFarmVars.min_values_float.html", "_utils/opt/problems/OptFarmVars.min_values_int.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_individual.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_population.html", "_utils/opt/problems/OptFarmVars.var_names_float.html", "_utils/opt/problems/OptFarmVars.var_names_int.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.get_bounds.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintscdist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivescdist.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.var_names_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_int.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_int.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.ANGLE.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.var_names_float.html", "_utils/read_shp.html", "_utils/read_shp_polygons.html", "_utils/runners/DaskRunner.html", "_utils/runners/DaskRunner.__init__.html", "_utils/runners/DaskRunner.finalize.html", "_utils/runners/DaskRunner.initialize.html", "_utils/runners/DaskRunner.is_distributed.html", "_utils/runners/DaskRunner.print.html", "_utils/runners/DaskRunner.run.html", "_utils/runners/DefaultRunner.html", "_utils/runners/DefaultRunner.run.html", "_utils/runners/Runner.html", "_utils/runners/Runner.__init__.html", "_utils/runners/Runner.finalize.html", "_utils/runners/Runner.initialize.html", "_utils/runners/Runner.initialized.html", "_utils/runners/Runner.run.html", "_utils/show_plotly_fig.html", "_utils/shp2csv.html", "_utils/shp2geom2d.html", "_utils/two_circles/area.html", "_utils/two_circles/calc_area.html", "_utils/uv2wd.html", "_utils/wd2uv.html", "_utils/wd2wdvec.html", "_utils/wdvec2wd.html", "api.html", "api_core.html", "api_foxes.html", "api_input.html", "api_models.html", "api_opt.html", "api_opt_problems.html", "api_opt_problems_geom.html", "api_output.html", "api_utils.html", "api_utils_abl.html", "api_wake_models.html", "examples.html", "history.html", "index.html", "installation.html", "notebooks/data.html", "notebooks/heterogeneous.html", "notebooks/layout_opt.html", "notebooks/model_book.html", "notebooks/multi_height.html", "notebooks/overview.html", "notebooks/power_mask.html", "notebooks/sector_man.html", "notebooks/single_row.html", "notebooks/timeseries.html", "notebooks/wind_rose.html", "notebooks/yawed_wake.html"]})