Search.setIndex({"titles": ["foxes.algorithms.Downwind", "foxes.algorithms.Downwind.__init__", "foxes.algorithms.Downwind.calc_farm", "foxes.algorithms.Downwind.calc_points", "foxes.algorithms.Downwind.finalize", "foxes.algorithms.Downwind.get_model", "foxes.algorithms.Downwind.init_states", "foxes.algorithms.Downwind.initialize", "foxes.algorithms.Iterative", "foxes.algorithms.Iterative.__init__", "foxes.algorithms.Iterative.calc_farm", "foxes.algorithms.Iterative.get_model", "foxes.algorithms.Iterative.iterations", "foxes.algorithms.downwind.models.CalcOrder", "foxes.algorithms.downwind.models.CalcOrder.calculate", "foxes.algorithms.downwind.models.CalcOrder.initialize", "foxes.algorithms.downwind.models.CalcOrder.output_farm_vars", "foxes.algorithms.downwind.models.FarmWakesCalculation", "foxes.algorithms.downwind.models.FarmWakesCalculation.__init__", "foxes.algorithms.downwind.models.FarmWakesCalculation.calculate", "foxes.algorithms.downwind.models.FarmWakesCalculation.initialize", "foxes.algorithms.downwind.models.FarmWakesCalculation.output_farm_vars", "foxes.algorithms.downwind.models.PointWakesCalculation", "foxes.algorithms.downwind.models.PointWakesCalculation.__init__", "foxes.algorithms.downwind.models.PointWakesCalculation.calculate", "foxes.algorithms.downwind.models.PointWakesCalculation.contribute_to_wake_deltas", "foxes.algorithms.downwind.models.PointWakesCalculation.initialize", "foxes.algorithms.downwind.models.PointWakesCalculation.output_point_vars", "foxes.algorithms.downwind.models.SetAmbFarmResults", "foxes.algorithms.downwind.models.SetAmbFarmResults.__init__", "foxes.algorithms.downwind.models.SetAmbFarmResults.calculate", "foxes.algorithms.downwind.models.SetAmbFarmResults.output_farm_vars", "foxes.algorithms.downwind.models.SetAmbPointResults", "foxes.algorithms.downwind.models.SetAmbPointResults.__init__", "foxes.algorithms.downwind.models.SetAmbPointResults.calculate", "foxes.algorithms.downwind.models.SetAmbPointResults.initialize", "foxes.algorithms.downwind.models.SetAmbPointResults.output_point_vars", "foxes.algorithms.iterative.ConvCrit", "foxes.algorithms.iterative.ConvCrit.__init__", "foxes.algorithms.iterative.ConvCrit.check_converged", "foxes.algorithms.iterative.ConvCrit.get_deltas", "foxes.algorithms.iterative.ConvCritList", "foxes.algorithms.iterative.ConvCritList.__init__", "foxes.algorithms.iterative.ConvCritList.add_crit", "foxes.algorithms.iterative.ConvCritList.check_converged", "foxes.algorithms.iterative.ConvCritList.get_deltas", "foxes.algorithms.iterative.ConvVarDelta", "foxes.algorithms.iterative.ConvVarDelta.__init__", "foxes.algorithms.iterative.ConvVarDelta.check_converged", "foxes.algorithms.iterative.ConvVarDelta.get_deltas", "foxes.algorithms.iterative.DefaultConv", "foxes.algorithms.iterative.DefaultConv.__init__", "foxes.algorithms.iterative.models.FarmWakesCalculation", "foxes.algorithms.iterative.models.FarmWakesCalculation.calculate", "foxes.algorithms.iterative.models.FarmWakesCalculation.initialize", "foxes.algorithms.iterative.models.FarmWakesCalculation.output_farm_vars", "foxes.core.Algorithm", "foxes.core.Algorithm.__init__", "foxes.core.Algorithm.chunked", "foxes.core.Algorithm.cleanup", "foxes.core.Algorithm.finalize", "foxes.core.Algorithm.finalize_model", "foxes.core.Algorithm.get_models_data", "foxes.core.Algorithm.idata_mem", "foxes.core.Algorithm.initialize", "foxes.core.Algorithm.new", "foxes.core.Algorithm.new_point_data", "foxes.core.Algorithm.print", "foxes.core.Algorithm.update_idata", "foxes.core.Algorithm.update_n_turbines", "foxes.core.Data", "foxes.core.Data.__init__", "foxes.core.Data.add", "foxes.core.Data.from_points", "foxes.core.Data.n_points", "foxes.core.Data.n_states", "foxes.core.Data.n_turbines", "foxes.core.Data.states_i0", "foxes.core.DataCalcModel", "foxes.core.DataCalcModel.calculate", "foxes.core.DataCalcModel.run_calculation", "foxes.core.ExtendedStates", "foxes.core.ExtendedStates.__init__", "foxes.core.ExtendedStates.append", "foxes.core.ExtendedStates.calculate", "foxes.core.ExtendedStates.finalize", "foxes.core.ExtendedStates.index", "foxes.core.ExtendedStates.initialize", "foxes.core.ExtendedStates.output_point_vars", "foxes.core.ExtendedStates.size", "foxes.core.ExtendedStates.weights", "foxes.core.FarmController", "foxes.core.FarmController.__init__", "foxes.core.FarmController.calculate", "foxes.core.FarmController.collect_models", "foxes.core.FarmController.finalize", "foxes.core.FarmController.initialize", "foxes.core.FarmController.keep", "foxes.core.FarmController.output_farm_vars", "foxes.core.FarmController.set_pars", "foxes.core.FarmDataModel", "foxes.core.FarmDataModel.__init__", "foxes.core.FarmDataModel.calculate", "foxes.core.FarmDataModel.output_farm_vars", "foxes.core.FarmDataModel.run_calculation", "foxes.core.FarmDataModelList", "foxes.core.FarmDataModelList.__init__", "foxes.core.FarmDataModelList.append", "foxes.core.FarmDataModelList.calculate", "foxes.core.FarmDataModelList.finalize", "foxes.core.FarmDataModelList.initialize", "foxes.core.FarmDataModelList.keep", "foxes.core.FarmDataModelList.output_farm_vars", "foxes.core.FarmModel", "foxes.core.Model", "foxes.core.Model.__init__", "foxes.core.Model.__repr__", "foxes.core.Model.data_to_store", "foxes.core.Model.finalize", "foxes.core.Model.from_data_or_store", "foxes.core.Model.get_data", "foxes.core.Model.initialize", "foxes.core.Model.initialized", "foxes.core.Model.keep", "foxes.core.Model.model_id", "foxes.core.Model.reduce_states", "foxes.core.Model.var", "foxes.core.PartialWakesModel", "foxes.core.PartialWakesModel.__init__", "foxes.core.PartialWakesModel.contribute_to_wake_deltas", "foxes.core.PartialWakesModel.evaluate_results", "foxes.core.PartialWakesModel.initialize", "foxes.core.PartialWakesModel.keep", "foxes.core.PartialWakesModel.new", "foxes.core.PartialWakesModel.new_wake_deltas", "foxes.core.PointDataModel", "foxes.core.PointDataModel.calculate", "foxes.core.PointDataModel.output_point_vars", "foxes.core.PointDataModel.run_calculation", "foxes.core.PointDataModelList", "foxes.core.PointDataModelList.__init__", "foxes.core.PointDataModelList.append", "foxes.core.PointDataModelList.calculate", "foxes.core.PointDataModelList.finalize", "foxes.core.PointDataModelList.initialize", "foxes.core.PointDataModelList.keep", "foxes.core.PointDataModelList.output_point_vars", "foxes.core.RotorModel", "foxes.core.RotorModel.__init__", "foxes.core.RotorModel.calculate", "foxes.core.RotorModel.design_points", "foxes.core.RotorModel.eval_rpoint_results", "foxes.core.RotorModel.get_rotor_points", "foxes.core.RotorModel.n_rotor_points", "foxes.core.RotorModel.output_farm_vars", "foxes.core.RotorModel.rotor_point_weights", "foxes.core.States", "foxes.core.States.index", "foxes.core.States.output_point_vars", "foxes.core.States.size", "foxes.core.States.weights", "foxes.core.Turbine", "foxes.core.Turbine.__init__", "foxes.core.Turbine.add_model", "foxes.core.Turbine.insert_model", "foxes.core.TurbineModel", "foxes.core.TurbineModel.calculate", "foxes.core.TurbineType", "foxes.core.TurbineType.__init__", "foxes.core.VerticalProfile", "foxes.core.VerticalProfile.calculate", "foxes.core.VerticalProfile.input_vars", "foxes.core.VerticalProfile.new", "foxes.core.WakeFrame", "foxes.core.WakeFrame.calc_centreline_integral", "foxes.core.WakeFrame.calc_order", "foxes.core.WakeFrame.get_centreline_points", "foxes.core.WakeFrame.get_wake_coos", "foxes.core.WakeModel", "foxes.core.WakeModel.contribute_to_wake_deltas", "foxes.core.WakeModel.finalize_wake_deltas", "foxes.core.WakeModel.init_wake_deltas", "foxes.core.WakeSuperposition", "foxes.core.WakeSuperposition.calc_final_wake_delta", "foxes.core.WakeSuperposition.calc_wakes_plus_wake", "foxes.core.WindFarm", "foxes.core.WindFarm.__init__", "foxes.core.WindFarm.add_turbine", "foxes.core.WindFarm.n_turbines", "foxes.core.WindFarm.turbine_names", "foxes.data.StaticData", "foxes.data.StaticData.__init__", "foxes.data.parse_Pct_file_name", "foxes.data.parse_Pct_two_files", "foxes.constants.AMB_RPOINT_RESULTS", "foxes.constants.DTYPE", "foxes.constants.DTYPE.T", "foxes.constants.DTYPE.__abs__", "foxes.constants.DTYPE.__add__", "foxes.constants.DTYPE.__and__", "foxes.constants.DTYPE.__array__", "foxes.constants.DTYPE.__array_interface__", "foxes.constants.DTYPE.__array_priority__", "foxes.constants.DTYPE.__array_struct__", "foxes.constants.DTYPE.__array_wrap__", "foxes.constants.DTYPE.__bool__", "foxes.constants.DTYPE.__class_getitem__", "foxes.constants.DTYPE.__divmod__", "foxes.constants.DTYPE.__eq__", "foxes.constants.DTYPE.__float__", "foxes.constants.DTYPE.__floordiv__", "foxes.constants.DTYPE.__format__", "foxes.constants.DTYPE.__ge__", "foxes.constants.DTYPE.__getitem__", "foxes.constants.DTYPE.__gt__", "foxes.constants.DTYPE.__hash__", "foxes.constants.DTYPE.__int__", "foxes.constants.DTYPE.__invert__", "foxes.constants.DTYPE.__le__", "foxes.constants.DTYPE.__lshift__", "foxes.constants.DTYPE.__lt__", "foxes.constants.DTYPE.__mod__", "foxes.constants.DTYPE.__mul__", "foxes.constants.DTYPE.__ne__", "foxes.constants.DTYPE.__neg__", "foxes.constants.DTYPE.__new__", "foxes.constants.DTYPE.__or__", "foxes.constants.DTYPE.__pos__", "foxes.constants.DTYPE.__pow__", "foxes.constants.DTYPE.__radd__", "foxes.constants.DTYPE.__rand__", "foxes.constants.DTYPE.__rdivmod__", "foxes.constants.DTYPE.__reduce__", "foxes.constants.DTYPE.__repr__", "foxes.constants.DTYPE.__rfloordiv__", "foxes.constants.DTYPE.__rlshift__", "foxes.constants.DTYPE.__rmod__", "foxes.constants.DTYPE.__rmul__", "foxes.constants.DTYPE.__ror__", "foxes.constants.DTYPE.__rpow__", "foxes.constants.DTYPE.__rrshift__", "foxes.constants.DTYPE.__rshift__", "foxes.constants.DTYPE.__rsub__", "foxes.constants.DTYPE.__rtruediv__", "foxes.constants.DTYPE.__rxor__", "foxes.constants.DTYPE.__sizeof__", "foxes.constants.DTYPE.__str__", "foxes.constants.DTYPE.__sub__", "foxes.constants.DTYPE.__truediv__", "foxes.constants.DTYPE.__xor__", "foxes.constants.DTYPE.all", "foxes.constants.DTYPE.any", "foxes.constants.DTYPE.argmax", "foxes.constants.DTYPE.argmin", "foxes.constants.DTYPE.argsort", "foxes.constants.DTYPE.as_integer_ratio", "foxes.constants.DTYPE.astype", "foxes.constants.DTYPE.base", "foxes.constants.DTYPE.byteswap", "foxes.constants.DTYPE.choose", "foxes.constants.DTYPE.clip", "foxes.constants.DTYPE.compress", "foxes.constants.DTYPE.conj", "foxes.constants.DTYPE.conjugate", "foxes.constants.DTYPE.copy", "foxes.constants.DTYPE.cumprod", "foxes.constants.DTYPE.cumsum", "foxes.constants.DTYPE.data", "foxes.constants.DTYPE.diagonal", "foxes.constants.DTYPE.dtype", "foxes.constants.DTYPE.dump", "foxes.constants.DTYPE.dumps", "foxes.constants.DTYPE.fill", "foxes.constants.DTYPE.flags", "foxes.constants.DTYPE.flat", "foxes.constants.DTYPE.flatten", "foxes.constants.DTYPE.getfield", "foxes.constants.DTYPE.imag", "foxes.constants.DTYPE.is_integer", "foxes.constants.DTYPE.item", "foxes.constants.DTYPE.itemset", "foxes.constants.DTYPE.itemsize", "foxes.constants.DTYPE.max", "foxes.constants.DTYPE.mean", "foxes.constants.DTYPE.min", "foxes.constants.DTYPE.nbytes", "foxes.constants.DTYPE.ndim", "foxes.constants.DTYPE.newbyteorder", "foxes.constants.DTYPE.nonzero", "foxes.constants.DTYPE.prod", "foxes.constants.DTYPE.ptp", "foxes.constants.DTYPE.put", "foxes.constants.DTYPE.ravel", "foxes.constants.DTYPE.real", "foxes.constants.DTYPE.repeat", "foxes.constants.DTYPE.reshape", "foxes.constants.DTYPE.resize", "foxes.constants.DTYPE.round", "foxes.constants.DTYPE.searchsorted", "foxes.constants.DTYPE.setfield", "foxes.constants.DTYPE.setflags", "foxes.constants.DTYPE.shape", "foxes.constants.DTYPE.size", "foxes.constants.DTYPE.sort", "foxes.constants.DTYPE.squeeze", "foxes.constants.DTYPE.std", "foxes.constants.DTYPE.strides", "foxes.constants.DTYPE.sum", "foxes.constants.DTYPE.swapaxes", "foxes.constants.DTYPE.take", "foxes.constants.DTYPE.tobytes", "foxes.constants.DTYPE.tofile", "foxes.constants.DTYPE.tolist", "foxes.constants.DTYPE.tostring", "foxes.constants.DTYPE.trace", "foxes.constants.DTYPE.transpose", "foxes.constants.DTYPE.var", "foxes.constants.DTYPE.view", "foxes.constants.FARM", "foxes.constants.GW", "foxes.constants.ITYPE", "foxes.constants.ITYPE.__abs__", "foxes.constants.ITYPE.__add__", "foxes.constants.ITYPE.__and__", "foxes.constants.ITYPE.__bool__", "foxes.constants.ITYPE.__class_getitem__", "foxes.constants.ITYPE.__divmod__", "foxes.constants.ITYPE.__eq__", "foxes.constants.ITYPE.__float__", "foxes.constants.ITYPE.__floordiv__", "foxes.constants.ITYPE.__ge__", "foxes.constants.ITYPE.__gt__", "foxes.constants.ITYPE.__hash__", "foxes.constants.ITYPE.__index__", "foxes.constants.ITYPE.__int__", "foxes.constants.ITYPE.__invert__", "foxes.constants.ITYPE.__le__", "foxes.constants.ITYPE.__lshift__", "foxes.constants.ITYPE.__lt__", "foxes.constants.ITYPE.__mod__", "foxes.constants.ITYPE.__mul__", "foxes.constants.ITYPE.__ne__", "foxes.constants.ITYPE.__neg__", "foxes.constants.ITYPE.__new__", "foxes.constants.ITYPE.__or__", "foxes.constants.ITYPE.__pos__", "foxes.constants.ITYPE.__pow__", "foxes.constants.ITYPE.__radd__", "foxes.constants.ITYPE.__rand__", "foxes.constants.ITYPE.__rdivmod__", "foxes.constants.ITYPE.__repr__", "foxes.constants.ITYPE.__rfloordiv__", "foxes.constants.ITYPE.__rlshift__", "foxes.constants.ITYPE.__rmod__", "foxes.constants.ITYPE.__rmul__", "foxes.constants.ITYPE.__ror__", "foxes.constants.ITYPE.__rpow__", "foxes.constants.ITYPE.__rrshift__", "foxes.constants.ITYPE.__rshift__", "foxes.constants.ITYPE.__rsub__", "foxes.constants.ITYPE.__rtruediv__", "foxes.constants.ITYPE.__rxor__", "foxes.constants.ITYPE.__str__", "foxes.constants.ITYPE.__sub__", "foxes.constants.ITYPE.__truediv__", "foxes.constants.ITYPE.__xor__", "foxes.constants.ITYPE.bit_count", "foxes.constants.ITYPE.denominator", "foxes.constants.ITYPE.is_integer", "foxes.constants.ITYPE.numerator", "foxes.constants.KAPPA", "foxes.constants.MW", "foxes.constants.POINT", "foxes.constants.POINTS", "foxes.constants.POP", "foxes.constants.P_UNITS", "foxes.constants.RPOINT", "foxes.constants.RPOINTS", "foxes.constants.RWEIGHTS", "foxes.constants.STATE", "foxes.constants.STATES_SEL", "foxes.constants.STATE_POINT", "foxes.constants.STATE_SOURCE_TURBINE", "foxes.constants.STATE_TURBINE", "foxes.constants.TMODELS", "foxes.constants.TMODEL_SELS", "foxes.constants.TNAME", "foxes.constants.TURBINE", "foxes.constants.TW", "foxes.constants.VALID", "foxes.constants.VARS", "foxes.constants.W", "foxes.constants.XYH", "foxes.constants.kW", "foxes.variables.AMB_CAP", "foxes.variables.AMB_CT", "foxes.variables.AMB_P", "foxes.variables.AMB_REWS", "foxes.variables.AMB_REWS2", "foxes.variables.AMB_REWS3", "foxes.variables.AMB_RHO", "foxes.variables.AMB_T", "foxes.variables.AMB_TI", "foxes.variables.AMB_WD", "foxes.variables.AMB_WS", "foxes.variables.AMB_YAW", "foxes.variables.AMB_YAWM", "foxes.variables.AMB_YLD", "foxes.variables.CAP", "foxes.variables.CT", "foxes.variables.D", "foxes.variables.EFF", "foxes.variables.H", "foxes.variables.K", "foxes.variables.KB", "foxes.variables.KTI", "foxes.variables.MAX_P", "foxes.variables.MOL", "foxes.variables.ORDER", "foxes.variables.P", "foxes.variables.PA_ALPHA", "foxes.variables.PA_BETA", "foxes.variables.REWS", "foxes.variables.REWS2", "foxes.variables.REWS3", "foxes.variables.RHO", "foxes.variables.SHEAR", "foxes.variables.T", "foxes.variables.TI", "foxes.variables.TXYH", "foxes.variables.WD", "foxes.variables.WEIGHT", "foxes.variables.WS", "foxes.variables.X", "foxes.variables.Y", "foxes.variables.YAW", "foxes.variables.YAWM", "foxes.variables.YLD", "foxes.variables.Z0", "foxes.variables.amb2var", "foxes.variables.var2amb", "foxes.input.farm_layout.add_from_csv", "foxes.input.farm_layout.add_from_df", "foxes.input.farm_layout.add_from_file", "foxes.input.farm_layout.add_from_json", "foxes.input.farm_layout.add_grid", "foxes.input.farm_layout.add_row", "foxes.input.states.FieldDataNC", "foxes.input.states.FieldDataNC.__init__", "foxes.input.states.FieldDataNC.calculate", "foxes.input.states.FieldDataNC.index", "foxes.input.states.FieldDataNC.initialize", "foxes.input.states.FieldDataNC.output_point_vars", "foxes.input.states.FieldDataNC.size", "foxes.input.states.FieldDataNC.weights", "foxes.input.states.MultiHeightStates", "foxes.input.states.MultiHeightStates.RDICT", "foxes.input.states.MultiHeightStates.__init__", "foxes.input.states.MultiHeightStates.calculate", "foxes.input.states.MultiHeightStates.finalize", "foxes.input.states.MultiHeightStates.index", "foxes.input.states.MultiHeightStates.initialize", "foxes.input.states.MultiHeightStates.output_point_vars", "foxes.input.states.MultiHeightStates.reset", "foxes.input.states.MultiHeightStates.size", "foxes.input.states.MultiHeightStates.weights", "foxes.input.states.MultiHeightTimeseries", "foxes.input.states.MultiHeightTimeseries.RDICT", "foxes.input.states.ScanWS", "foxes.input.states.ScanWS.__init__", "foxes.input.states.ScanWS.calculate", "foxes.input.states.ScanWS.initialize", "foxes.input.states.ScanWS.output_point_vars", "foxes.input.states.ScanWS.size", "foxes.input.states.ScanWS.weights", "foxes.input.states.SingleStateStates", "foxes.input.states.SingleStateStates.__init__", "foxes.input.states.SingleStateStates.calculate", "foxes.input.states.SingleStateStates.initialize", "foxes.input.states.SingleStateStates.output_point_vars", "foxes.input.states.SingleStateStates.size", "foxes.input.states.SingleStateStates.weights", "foxes.input.states.StatesTable", "foxes.input.states.StatesTable.RDICT", "foxes.input.states.StatesTable.__init__", "foxes.input.states.StatesTable.calculate", "foxes.input.states.StatesTable.finalize", "foxes.input.states.StatesTable.index", "foxes.input.states.StatesTable.initialize", "foxes.input.states.StatesTable.output_point_vars", "foxes.input.states.StatesTable.reset", "foxes.input.states.StatesTable.size", "foxes.input.states.StatesTable.weights", "foxes.input.states.Timeseries", "foxes.input.states.Timeseries.RDICT", "foxes.input.states.create_random_abl_states", "foxes.input.windio.read_case", "foxes.models.farm_controllers.BasicFarmController", "foxes.models.farm_models.Turbine2FarmModel", "foxes.models.farm_models.Turbine2FarmModel.__init__", "foxes.models.farm_models.Turbine2FarmModel.__repr__", "foxes.models.farm_models.Turbine2FarmModel.calculate", "foxes.models.farm_models.Turbine2FarmModel.finalize", "foxes.models.farm_models.Turbine2FarmModel.initialize", "foxes.models.farm_models.Turbine2FarmModel.output_farm_vars", "foxes.models.model_book.Dict", "foxes.models.model_book.Dict.__getitem__", "foxes.models.model_book.Dict.__init__", "foxes.models.model_book.ModelBook", "foxes.models.model_book.ModelBook.__getitem__", "foxes.models.model_book.ModelBook.__init__", "foxes.models.model_book.ModelBook.finalize", "foxes.models.model_book.ModelBook.print_toc", "foxes.models.partial_wakes.Mapped", "foxes.models.partial_wakes.Mapped.__init__", "foxes.models.partial_wakes.Mapped.contribute_to_wake_deltas", "foxes.models.partial_wakes.Mapped.evaluate_results", "foxes.models.partial_wakes.Mapped.finalize", "foxes.models.partial_wakes.Mapped.initialize", "foxes.models.partial_wakes.Mapped.keep", "foxes.models.partial_wakes.Mapped.new_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake", "foxes.models.partial_wakes.PartialAxiwake.__init__", "foxes.models.partial_wakes.PartialAxiwake.__repr__", "foxes.models.partial_wakes.PartialAxiwake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake.evaluate_results", "foxes.models.partial_wakes.PartialAxiwake.finalize", "foxes.models.partial_wakes.PartialAxiwake.initialize", "foxes.models.partial_wakes.PartialAxiwake.keep", "foxes.models.partial_wakes.PartialAxiwake.new_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake", "foxes.models.partial_wakes.PartialDistSlicedWake.__init__", "foxes.models.partial_wakes.PartialDistSlicedWake.__repr__", "foxes.models.partial_wakes.PartialDistSlicedWake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake.evaluate_results", "foxes.models.partial_wakes.PartialDistSlicedWake.finalize", "foxes.models.partial_wakes.PartialDistSlicedWake.initialize", "foxes.models.partial_wakes.PartialDistSlicedWake.keep", "foxes.models.partial_wakes.PartialDistSlicedWake.new_wake_deltas", "foxes.models.partial_wakes.PartialGrid", "foxes.models.partial_wakes.PartialGrid.__init__", "foxes.models.partial_wakes.PartialGrid.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat", "foxes.models.partial_wakes.PartialTopHat.__init__", "foxes.models.partial_wakes.PartialTopHat.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat.evaluate_results", "foxes.models.partial_wakes.PartialTopHat.finalize", "foxes.models.partial_wakes.PartialTopHat.initialize", "foxes.models.partial_wakes.PartialTopHat.keep", "foxes.models.partial_wakes.PartialTopHat.new_wake_deltas", "foxes.models.partial_wakes.RotorPoints", "foxes.models.partial_wakes.RotorPoints.__init__", "foxes.models.partial_wakes.RotorPoints.contribute_to_wake_deltas", "foxes.models.partial_wakes.RotorPoints.evaluate_results", "foxes.models.partial_wakes.RotorPoints.get_wake_points", "foxes.models.partial_wakes.RotorPoints.new_wake_deltas", "foxes.models.point_models.SetUniformData", "foxes.models.point_models.SetUniformData.__init__", "foxes.models.point_models.SetUniformData.calculate", "foxes.models.point_models.SetUniformData.initialize", "foxes.models.point_models.SetUniformData.output_point_vars", "foxes.models.point_models.TKE2TI", "foxes.models.point_models.TKE2TI.calculate", "foxes.models.point_models.TKE2TI.output_point_vars", "foxes.models.point_models.WakeDeltas", "foxes.models.point_models.WakeDeltas.__init__", "foxes.models.point_models.WakeDeltas.calculate", "foxes.models.point_models.WakeDeltas.output_point_vars", "foxes.models.rotor_models.CentreRotor", "foxes.models.rotor_models.CentreRotor.design_points", "foxes.models.rotor_models.CentreRotor.eval_rpoint_results", "foxes.models.rotor_models.CentreRotor.get_rotor_points", "foxes.models.rotor_models.CentreRotor.n_rotor_points", "foxes.models.rotor_models.CentreRotor.rotor_point_weights", "foxes.models.rotor_models.GridRotor", "foxes.models.rotor_models.GridRotor.__init__", "foxes.models.rotor_models.GridRotor.__repr__", "foxes.models.rotor_models.GridRotor.design_points", "foxes.models.rotor_models.GridRotor.initialize", "foxes.models.rotor_models.GridRotor.n_rotor_points", "foxes.models.rotor_models.GridRotor.rotor_point_weights", "foxes.models.rotor_models.LevelRotor", "foxes.models.rotor_models.LevelRotor.__init__", "foxes.models.rotor_models.LevelRotor.__repr__", "foxes.models.rotor_models.LevelRotor.design_points", "foxes.models.rotor_models.LevelRotor.initialize", "foxes.models.rotor_models.LevelRotor.n_rotor_points", "foxes.models.rotor_models.LevelRotor.rotor_point_weights", "foxes.models.turbine_models.Calculator", "foxes.models.turbine_models.Calculator.__init__", "foxes.models.turbine_models.Calculator.calculate", "foxes.models.turbine_models.Calculator.output_farm_vars", "foxes.models.turbine_models.LookupTable", "foxes.models.turbine_models.LookupTable.__init__", "foxes.models.turbine_models.LookupTable.calculate", "foxes.models.turbine_models.LookupTable.initialize", "foxes.models.turbine_models.LookupTable.output_farm_vars", "foxes.models.turbine_models.PowerMask", "foxes.models.turbine_models.PowerMask.__init__", "foxes.models.turbine_models.PowerMask.calculate", "foxes.models.turbine_models.PowerMask.initialize", "foxes.models.turbine_models.PowerMask.output_farm_vars", "foxes.models.turbine_models.PowerMask.update_P_ct", "foxes.models.turbine_models.RotorCentreCalc", "foxes.models.turbine_models.RotorCentreCalc.__init__", "foxes.models.turbine_models.RotorCentreCalc.calculate", "foxes.models.turbine_models.RotorCentreCalc.finalize", "foxes.models.turbine_models.RotorCentreCalc.initialize", "foxes.models.turbine_models.RotorCentreCalc.output_farm_vars", "foxes.models.turbine_models.SectorManagement", "foxes.models.turbine_models.SectorManagement.__init__", "foxes.models.turbine_models.SectorManagement.calculate", "foxes.models.turbine_models.SectorManagement.initialize", "foxes.models.turbine_models.SectorManagement.output_farm_vars", "foxes.models.turbine_models.SetFarmVars", "foxes.models.turbine_models.SetFarmVars.__init__", "foxes.models.turbine_models.SetFarmVars.add_var", "foxes.models.turbine_models.SetFarmVars.calculate", "foxes.models.turbine_models.SetFarmVars.initialize", "foxes.models.turbine_models.SetFarmVars.output_farm_vars", "foxes.models.turbine_models.SetFarmVars.reset", "foxes.models.turbine_models.SetXYHD", "foxes.models.turbine_models.SetXYHD.__init__", "foxes.models.turbine_models.SetXYHD.calculate", "foxes.models.turbine_models.SetXYHD.output_farm_vars", "foxes.models.turbine_models.TableFactors", "foxes.models.turbine_models.TableFactors.__init__", "foxes.models.turbine_models.TableFactors.calculate", "foxes.models.turbine_models.TableFactors.initialize", "foxes.models.turbine_models.TableFactors.output_farm_vars", "foxes.models.turbine_models.Thrust2Ct", "foxes.models.turbine_models.Thrust2Ct.__init__", "foxes.models.turbine_models.Thrust2Ct.calculate", "foxes.models.turbine_models.Thrust2Ct.output_farm_vars", "foxes.models.turbine_models.YAW2YAWM", "foxes.models.turbine_models.YAW2YAWM.calculate", "foxes.models.turbine_models.YAW2YAWM.output_farm_vars", "foxes.models.turbine_models.YAWM2YAW", "foxes.models.turbine_models.YAWM2YAW.calculate", "foxes.models.turbine_models.YAWM2YAW.output_farm_vars", "foxes.models.turbine_models.kTI", "foxes.models.turbine_models.kTI.__init__", "foxes.models.turbine_models.kTI.__repr__", "foxes.models.turbine_models.kTI.calculate", "foxes.models.turbine_models.kTI.output_farm_vars", "foxes.models.turbine_types.CpCtFile", "foxes.models.turbine_types.CpCtFile.__init__", "foxes.models.turbine_types.CpCtFromTwo", "foxes.models.turbine_types.CpCtFromTwo.__init__", "foxes.models.turbine_types.NullType", "foxes.models.turbine_types.NullType.calculate", "foxes.models.turbine_types.NullType.output_farm_vars", "foxes.models.turbine_types.PCtFile", "foxes.models.turbine_types.PCtFile.__init__", "foxes.models.turbine_types.PCtFile.calculate", "foxes.models.turbine_types.PCtFile.finalize", "foxes.models.turbine_types.PCtFile.initialize", "foxes.models.turbine_types.PCtFile.output_farm_vars", "foxes.models.turbine_types.PCtFromTwo", "foxes.models.turbine_types.PCtFromTwo.__init__", "foxes.models.turbine_types.PCtFromTwo.calculate", "foxes.models.turbine_types.PCtFromTwo.finalize", "foxes.models.turbine_types.PCtFromTwo.initialize", "foxes.models.turbine_types.PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsRho2PCtFromTwo", "foxes.models.turbine_types.WsRho2PCtFromTwo.__init__", "foxes.models.turbine_types.WsRho2PCtFromTwo.calculate", "foxes.models.turbine_types.WsRho2PCtFromTwo.finalize", "foxes.models.turbine_types.WsRho2PCtFromTwo.initialize", "foxes.models.turbine_types.WsRho2PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsTI2PCtFromTwo", "foxes.models.turbine_types.WsTI2PCtFromTwo.__init__", "foxes.models.turbine_types.WsTI2PCtFromTwo.calculate", "foxes.models.turbine_types.WsTI2PCtFromTwo.finalize", "foxes.models.turbine_types.WsTI2PCtFromTwo.initialize", "foxes.models.turbine_types.WsTI2PCtFromTwo.output_farm_vars", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogStableWsProfile", "foxes.models.vertical_profiles.ABLLogStableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogStableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogWsProfile", "foxes.models.vertical_profiles.ABLLogWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogWsProfile.input_vars", "foxes.models.vertical_profiles.DataProfile", "foxes.models.vertical_profiles.DataProfile.__init__", "foxes.models.vertical_profiles.DataProfile.calculate", "foxes.models.vertical_profiles.DataProfile.input_vars", "foxes.models.vertical_profiles.ShearedProfile", "foxes.models.vertical_profiles.ShearedProfile.calculate", "foxes.models.vertical_profiles.ShearedProfile.input_vars", "foxes.models.vertical_profiles.UniformProfile", "foxes.models.vertical_profiles.UniformProfile.__init__", "foxes.models.vertical_profiles.UniformProfile.calculate", "foxes.models.vertical_profiles.UniformProfile.input_vars", "foxes.models.wake_frames.FarmOrder", "foxes.models.wake_frames.FarmOrder.__init__", "foxes.models.wake_frames.FarmOrder.calc_order", "foxes.models.wake_frames.FarmOrder.finalize", "foxes.models.wake_frames.FarmOrder.get_centreline_points", "foxes.models.wake_frames.FarmOrder.get_wake_coos", "foxes.models.wake_frames.FarmOrder.initialize", "foxes.models.wake_frames.RotorWD", "foxes.models.wake_frames.RotorWD.__init__", "foxes.models.wake_frames.RotorWD.calc_order", "foxes.models.wake_frames.RotorWD.get_centreline_points", "foxes.models.wake_frames.RotorWD.get_wake_coos", "foxes.models.wake_frames.Streamlines", "foxes.models.wake_frames.Streamlines.__init__", "foxes.models.wake_frames.Streamlines.__repr__", "foxes.models.wake_frames.Streamlines.calc_order", "foxes.models.wake_frames.Streamlines.get_centreline_points", "foxes.models.wake_frames.Streamlines.get_wake_coos", "foxes.models.wake_frames.Streamlines.initialize", "foxes.models.wake_frames.Timelines", "foxes.models.wake_frames.Timelines.__init__", "foxes.models.wake_frames.Timelines.calc_order", "foxes.models.wake_frames.Timelines.get_centreline_points", "foxes.models.wake_frames.Timelines.get_wake_coos", "foxes.models.wake_frames.Timelines.initialize", "foxes.models.wake_frames.YawedWakes", "foxes.models.wake_frames.YawedWakes.__init__", "foxes.models.wake_frames.YawedWakes.calc_order", "foxes.models.wake_frames.YawedWakes.finalize", "foxes.models.wake_frames.YawedWakes.get_centreline_points", "foxes.models.wake_frames.YawedWakes.get_wake_coos", "foxes.models.wake_frames.YawedWakes.initialize", "foxes.models.wake_models.AxisymmetricWakeModel", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel", "foxes.models.wake_models.DistSlicedWakeModel.__init__", "foxes.models.wake_models.DistSlicedWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel.contribute_to_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.finalize", "foxes.models.wake_models.DistSlicedWakeModel.finalize_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.initialize", "foxes.models.wake_models.DistSlicedWakeModel.keep", "foxes.models.wake_models.GaussianWakeModel", "foxes.models.wake_models.GaussianWakeModel.calc_amplitude_sigma_spsel", "foxes.models.wake_models.GaussianWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.TopHatWakeModel", "foxes.models.wake_models.TopHatWakeModel.__init__", "foxes.models.wake_models.TopHatWakeModel.calc_centreline_wake_deltas", "foxes.models.wake_models.TopHatWakeModel.calc_wake_radius", "foxes.models.wake_models.TopHatWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.ti.CrespoHernandezTIWake", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__init__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__repr__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_wake_radius", "foxes.models.wake_models.ti.CrespoHernandezTIWake.init_wake_deltas", "foxes.models.wake_models.ti.IECTIWake", "foxes.models.wake_models.ti.IECTIWake.__init__", "foxes.models.wake_models.ti.IECTIWake.__repr__", "foxes.models.wake_models.ti.IECTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.IECTIWake.calc_wake_radius", "foxes.models.wake_models.ti.IECTIWake.init_wake_deltas", "foxes.models.wake_models.wind.BastankhahWake", "foxes.models.wake_models.wind.BastankhahWake.__init__", "foxes.models.wake_models.wind.BastankhahWake.__repr__", "foxes.models.wake_models.wind.BastankhahWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.BastankhahWake.init_wake_deltas", "foxes.models.wake_models.wind.JensenWake", "foxes.models.wake_models.wind.JensenWake.__init__", "foxes.models.wake_models.wind.JensenWake.__repr__", "foxes.models.wake_models.wind.JensenWake.calc_centreline_wake_deltas", "foxes.models.wake_models.wind.JensenWake.calc_wake_radius", "foxes.models.wake_models.wind.JensenWake.init_wake_deltas", "foxes.models.wake_models.wind.PorteAgelModel", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_FAR", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.CHECK", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_FAR", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.MDATA_KEY", "foxes.models.wake_models.wind.PorteAgelModel.NEAR", "foxes.models.wake_models.wind.PorteAgelModel.PARS", "foxes.models.wake_models.wind.PorteAgelModel.R_PC", "foxes.models.wake_models.wind.PorteAgelModel.R_PC_S", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Y_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Z_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SP_SEL", "foxes.models.wake_models.wind.PorteAgelModel.X0", "foxes.models.wake_models.wind.PorteAgelModel.__init__", "foxes.models.wake_models.wind.PorteAgelModel.calc_data", "foxes.models.wake_models.wind.PorteAgelModel.clean", "foxes.models.wake_models.wind.PorteAgelModel.get_data", "foxes.models.wake_models.wind.PorteAgelModel.has_data", "foxes.models.wake_models.wind.PorteAgelModel.pars", "foxes.models.wake_models.wind.PorteAgelWake", "foxes.models.wake_models.wind.PorteAgelWake.__init__", "foxes.models.wake_models.wind.PorteAgelWake.__repr__", "foxes.models.wake_models.wind.PorteAgelWake.calc_wakes_spsel_x_yz", "foxes.models.wake_models.wind.PorteAgelWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWake", "foxes.models.wake_models.wind.TurbOParkWake.__init__", "foxes.models.wake_models.wind.TurbOParkWake.__repr__", "foxes.models.wake_models.wind.TurbOParkWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWakeIX", "foxes.models.wake_models.wind.TurbOParkWakeIX.__init__", "foxes.models.wake_models.wind.TurbOParkWakeIX.__repr__", "foxes.models.wake_models.wind.TurbOParkWakeIX.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWakeIX.finalize", "foxes.models.wake_models.wind.TurbOParkWakeIX.init_wake_deltas", "foxes.models.wake_superpositions.LinearSuperposition", "foxes.models.wake_superpositions.LinearSuperposition.__init__", "foxes.models.wake_superpositions.LinearSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.LinearSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.LinearSuperposition.input_farm_vars", "foxes.models.wake_superpositions.MaxSuperposition", "foxes.models.wake_superpositions.MaxSuperposition.__init__", "foxes.models.wake_superpositions.MaxSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.MaxSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.MaxSuperposition.initialize", "foxes.models.wake_superpositions.MaxSuperposition.input_farm_vars", "foxes.models.wake_superpositions.ProductSuperposition", "foxes.models.wake_superpositions.ProductSuperposition.__init__", "foxes.models.wake_superpositions.ProductSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.ProductSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition", "foxes.models.wake_superpositions.QuadraticSuperposition.__init__", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition.initialize", "foxes.models.wake_superpositions.QuadraticSuperposition.input_farm_vars", "foxes.models.wake_superpositions.TISuperposition", "foxes.models.wake_superpositions.TISuperposition.__init__", "foxes.models.wake_superpositions.TISuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.TISuperposition.calc_wakes_plus_wake", "foxes.output.Animator", "foxes.output.Animator.__init__", "foxes.output.Animator.add_generator", "foxes.output.Animator.animate", "foxes.output.Animator.generators", "foxes.output.FarmLayoutOutput", "foxes.output.FarmLayoutOutput.__init__", "foxes.output.FarmLayoutOutput.get_figure", "foxes.output.FarmLayoutOutput.get_layout_data", "foxes.output.FarmLayoutOutput.get_layout_dict", "foxes.output.FarmLayoutOutput.write_csv", "foxes.output.FarmLayoutOutput.write_json", "foxes.output.FarmLayoutOutput.write_plot", "foxes.output.FarmLayoutOutput.write_xyh", "foxes.output.FarmResultsEval", "foxes.output.FarmResultsEval.__init__", "foxes.output.FarmResultsEval.add_capacity", "foxes.output.FarmResultsEval.add_efficiency", "foxes.output.FarmResultsEval.calc_farm_efficiency", "foxes.output.FarmResultsEval.calc_farm_mean", "foxes.output.FarmResultsEval.calc_farm_sum", "foxes.output.FarmResultsEval.calc_farm_yield", "foxes.output.FarmResultsEval.calc_mean_farm_power", "foxes.output.FarmResultsEval.calc_states_mean", "foxes.output.FarmResultsEval.calc_states_std", "foxes.output.FarmResultsEval.calc_states_sum", "foxes.output.FarmResultsEval.calc_turbine_mean", "foxes.output.FarmResultsEval.calc_turbine_sum", "foxes.output.FarmResultsEval.calc_turbine_yield", "foxes.output.FarmResultsEval.gen_stdata", "foxes.output.FarmResultsEval.reduce_all", "foxes.output.FarmResultsEval.reduce_states", "foxes.output.FarmResultsEval.reduce_turbines", "foxes.output.FarmResultsEval.weinsum", "foxes.output.FlowPlots2D", "foxes.output.FlowPlots2D.__init__", "foxes.output.FlowPlots2D.gen_states_fig_xy", "foxes.output.FlowPlots2D.gen_states_fig_xz", "foxes.output.FlowPlots2D.gen_states_fig_yz", "foxes.output.FlowPlots2D.get_mean_fig_xy", "foxes.output.FlowPlots2D.get_mean_fig_xz", "foxes.output.FlowPlots2D.get_mean_fig_yz", "foxes.output.Output", "foxes.output.Output.new", "foxes.output.Output.print_models", "foxes.output.Output.write", "foxes.output.ResultsWriter", "foxes.output.ResultsWriter.__init__", "foxes.output.ResultsWriter.write_csv", "foxes.output.RosePlotOutput", "foxes.output.RosePlotOutput.__init__", "foxes.output.RosePlotOutput.get_data", "foxes.output.RosePlotOutput.get_data_info", "foxes.output.RosePlotOutput.get_figure", "foxes.output.RosePlotOutput.write_figure", "foxes.output.StateTurbineMap", "foxes.output.StateTurbineMap.__init__", "foxes.output.StateTurbineMap.plot_map", "foxes.output.StatesRosePlotOutput", "foxes.output.StatesRosePlotOutput.__init__", "foxes.output.TurbineTypeCurves", "foxes.output.TurbineTypeCurves.__init__", "foxes.output.TurbineTypeCurves.plot_curves", "foxes.utils.DataBook", "foxes.utils.DataBook.__init__", "foxes.utils.DataBook.add_data_package", "foxes.utils.DataBook.add_data_package_file", "foxes.utils.DataBook.add_file", "foxes.utils.DataBook.add_files", "foxes.utils.DataBook.get_file_path", "foxes.utils.DataBook.toc", "foxes.utils.PandasFileHelper", "foxes.utils.PandasFileHelper.DATA_FILE_FORMATS", "foxes.utils.PandasFileHelper.DEFAULT_FORMAT_DICT", "foxes.utils.PandasFileHelper.DEFAULT_READING_PARAMETERS", "foxes.utils.PandasFileHelper.DEFAULT_WRITING_PARAMETERS", "foxes.utils.PandasFileHelper.read_file", "foxes.utils.PandasFileHelper.write_file", "foxes.utils.abl.neutral.calc_ws", "foxes.utils.abl.neutral.logz", "foxes.utils.abl.neutral.ustar", "foxes.utils.abl.sheared.calc_ws", "foxes.utils.abl.stable.calc_ws", "foxes.utils.abl.stable.lgz", "foxes.utils.abl.stable.logz", "foxes.utils.abl.stable.psi", "foxes.utils.abl.stable.ustar", "foxes.utils.abl.unstable.calc_ws", "foxes.utils.abl.unstable.logz", "foxes.utils.abl.unstable.psi", "foxes.utils.abl.unstable.ustar", "foxes.utils.all_subclasses", "foxes.utils.cubic_roots", "foxes.utils.delta_wd", "foxes.utils.geom2d.AreaGeometry", "foxes.utils.geom2d.AreaGeometry.add_to_figure", "foxes.utils.geom2d.AreaGeometry.inverse", "foxes.utils.geom2d.AreaGeometry.p_max", "foxes.utils.geom2d.AreaGeometry.p_min", "foxes.utils.geom2d.AreaGeometry.points_distance", "foxes.utils.geom2d.AreaGeometry.points_inside", "foxes.utils.geom2d.AreaIntersection", "foxes.utils.geom2d.AreaIntersection.__new__", "foxes.utils.geom2d.AreaUnion", "foxes.utils.geom2d.AreaUnion.__init__", "foxes.utils.geom2d.AreaUnion.add_to_figure", "foxes.utils.geom2d.AreaUnion.inverse", "foxes.utils.geom2d.AreaUnion.p_max", "foxes.utils.geom2d.AreaUnion.p_min", "foxes.utils.geom2d.AreaUnion.points_distance", "foxes.utils.geom2d.AreaUnion.points_inside", "foxes.utils.geom2d.Circle", "foxes.utils.geom2d.Circle.__init__", "foxes.utils.geom2d.Circle.add_to_figure", "foxes.utils.geom2d.Circle.p_max", "foxes.utils.geom2d.Circle.p_min", "foxes.utils.geom2d.Circle.points_distance", "foxes.utils.geom2d.Circle.points_inside", "foxes.utils.geom2d.ClosedPolygon", "foxes.utils.geom2d.ClosedPolygon.__init__", "foxes.utils.geom2d.ClosedPolygon.add_to_figure", "foxes.utils.geom2d.ClosedPolygon.p_max", "foxes.utils.geom2d.ClosedPolygon.p_min", "foxes.utils.geom2d.ClosedPolygon.points_distance", "foxes.utils.geom2d.ClosedPolygon.points_inside", "foxes.utils.geom2d.HalfPlane", "foxes.utils.geom2d.HalfPlane.__init__", "foxes.utils.geom2d.HalfPlane.add_to_figure", "foxes.utils.geom2d.HalfPlane.inverse", "foxes.utils.geom2d.HalfPlane.p_max", "foxes.utils.geom2d.HalfPlane.p_min", "foxes.utils.geom2d.HalfPlane.points_distance", "foxes.utils.geom2d.HalfPlane.points_inside", "foxes.utils.geom2d.InvertedAreaGeometry", "foxes.utils.geom2d.InvertedAreaGeometry.__init__", "foxes.utils.geom2d.InvertedAreaGeometry.add_to_figure", "foxes.utils.geom2d.InvertedAreaGeometry.inverse", "foxes.utils.geom2d.InvertedAreaGeometry.p_max", "foxes.utils.geom2d.InvertedAreaGeometry.p_min", "foxes.utils.geom2d.InvertedAreaGeometry.points_distance", "foxes.utils.geom2d.InvertedAreaGeometry.points_inside", "foxes.opt.constraints.AreaGeometryConstraint", "foxes.opt.constraints.AreaGeometryConstraint.__init__", "foxes.opt.constraints.AreaGeometryConstraint.__str__", "foxes.opt.constraints.AreaGeometryConstraint.ana_deriv", "foxes.opt.constraints.AreaGeometryConstraint.calc_individual", "foxes.opt.constraints.AreaGeometryConstraint.calc_population", "foxes.opt.constraints.AreaGeometryConstraint.component_names", "foxes.opt.constraints.AreaGeometryConstraint.finalize", "foxes.opt.constraints.AreaGeometryConstraint.finalize_individual", "foxes.opt.constraints.AreaGeometryConstraint.finalize_population", "foxes.opt.constraints.AreaGeometryConstraint.initialize", "foxes.opt.constraints.AreaGeometryConstraint.initialized", "foxes.opt.constraints.AreaGeometryConstraint.n_components", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.var_names_float", "foxes.opt.constraints.AreaGeometryConstraint.var_names_int", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_float", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_int", "foxes.opt.constraints.FarmBoundaryConstraint", "foxes.opt.constraints.FarmBoundaryConstraint.__init__", "foxes.opt.constraints.MinDistConstraint", "foxes.opt.constraints.MinDistConstraint.__init__", "foxes.opt.constraints.MinDistConstraint.calc_individual", "foxes.opt.constraints.MinDistConstraint.calc_population", "foxes.opt.constraints.MinDistConstraint.initialize", "foxes.opt.constraints.MinDistConstraint.n_components", "foxes.opt.constraints.MinDistConstraint.vardeps_float", "foxes.opt.core.FarmConstraint", "foxes.opt.core.FarmConstraint.__init__", "foxes.opt.core.FarmConstraint.add_to_layout_figure", "foxes.opt.core.FarmConstraint.calc_individual", "foxes.opt.core.FarmConstraint.calc_population", "foxes.opt.core.FarmConstraint.farm", "foxes.opt.core.FarmConstraint.n_components", "foxes.opt.core.FarmConstraint.n_sel_turbines", "foxes.opt.core.FarmConstraint.print_models", "foxes.opt.core.FarmConstraint.sel_turbines", "foxes.opt.core.FarmConstraint.vardeps_float", "foxes.opt.core.FarmObjective", "foxes.opt.core.FarmObjective.__init__", "foxes.opt.core.FarmObjective.add_to_layout_figure", "foxes.opt.core.FarmObjective.farm", "foxes.opt.core.FarmObjective.n_sel_turbines", "foxes.opt.core.FarmObjective.print_models", "foxes.opt.core.FarmObjective.sel_turbines", "foxes.opt.core.FarmOptProblem", "foxes.opt.core.FarmOptProblem.INT_INF", "foxes.opt.core.FarmOptProblem.__init__", "foxes.opt.core.FarmOptProblem.add_constraint", "foxes.opt.core.FarmOptProblem.add_objective", "foxes.opt.core.FarmOptProblem.add_to_layout_figure", "foxes.opt.core.FarmOptProblem.all_turbines", "foxes.opt.core.FarmOptProblem.apply_individual", "foxes.opt.core.FarmOptProblem.apply_population", "foxes.opt.core.FarmOptProblem.calc_gradients", "foxes.opt.core.FarmOptProblem.check_constraints_individual", "foxes.opt.core.FarmOptProblem.check_constraints_population", "foxes.opt.core.FarmOptProblem.constraints_tol", "foxes.opt.core.FarmOptProblem.counter", "foxes.opt.core.FarmOptProblem.evaluate_individual", "foxes.opt.core.FarmOptProblem.evaluate_population", "foxes.opt.core.FarmOptProblem.farm", "foxes.opt.core.FarmOptProblem.finalize_individual", "foxes.opt.core.FarmOptProblem.finalize_population", "foxes.opt.core.FarmOptProblem.get_gradients", "foxes.opt.core.FarmOptProblem.initial_values_float", "foxes.opt.core.FarmOptProblem.initial_values_int", "foxes.opt.core.FarmOptProblem.initialize", "foxes.opt.core.FarmOptProblem.max_values_constraints", "foxes.opt.core.FarmOptProblem.max_values_float", "foxes.opt.core.FarmOptProblem.max_values_int", "foxes.opt.core.FarmOptProblem.maximize_objs", "foxes.opt.core.FarmOptProblem.min_values_constraints", "foxes.opt.core.FarmOptProblem.min_values_float", "foxes.opt.core.FarmOptProblem.min_values_int", "foxes.opt.core.FarmOptProblem.n_constraints", "foxes.opt.core.FarmOptProblem.n_objectives", "foxes.opt.core.FarmOptProblem.n_sel_turbines", "foxes.opt.core.FarmOptProblem.n_vars_float", "foxes.opt.core.FarmOptProblem.n_vars_int", "foxes.opt.core.FarmOptProblem.parse_tvar", "foxes.opt.core.FarmOptProblem.prob_res_einsum_individual", "foxes.opt.core.FarmOptProblem.prob_res_einsum_population", "foxes.opt.core.FarmOptProblem.sel_turbines", "foxes.opt.core.FarmOptProblem.tvar", "foxes.opt.core.FarmOptProblem.update_problem_individual", "foxes.opt.core.FarmOptProblem.update_problem_population", "foxes.opt.core.FarmOptProblem.var_names_float", "foxes.opt.core.FarmOptProblem.var_names_int", "foxes.opt.core.FarmVarsProblem", "foxes.opt.core.FarmVarsProblem.initialize", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_individual", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_population", "foxes.opt.core.FarmVarsProblem.update_problem_individual", "foxes.opt.core.FarmVarsProblem.update_problem_population", "foxes.opt.core.PopStates", "foxes.opt.core.PopStates.__init__", "foxes.opt.core.PopStates.calculate", "foxes.opt.core.PopStates.initialize", "foxes.opt.core.PopStates.output_point_vars", "foxes.opt.core.PopStates.size", "foxes.opt.core.PopStates.weights", "foxes.opt.objectives.FarmVarObjective", "foxes.opt.objectives.FarmVarObjective.__init__", "foxes.opt.objectives.FarmVarObjective.calc_individual", "foxes.opt.objectives.FarmVarObjective.calc_population", "foxes.opt.objectives.FarmVarObjective.finalize_individual", "foxes.opt.objectives.FarmVarObjective.initialize", "foxes.opt.objectives.FarmVarObjective.maximize", "foxes.opt.objectives.FarmVarObjective.n_components", "foxes.opt.objectives.FarmVarObjective.vardeps_float", "foxes.opt.objectives.MaxFarmPower", "foxes.opt.objectives.MaxFarmPower.__init__", "foxes.opt.objectives.MaxNTurbines", "foxes.opt.objectives.MaxNTurbines.__init__", "foxes.opt.objectives.MaxNTurbines.calc_individual", "foxes.opt.objectives.MaxNTurbines.calc_population", "foxes.opt.objectives.MaxNTurbines.maximize", "foxes.opt.objectives.MaxNTurbines.n_components", "foxes.opt.objectives.MinimalMaxTI", "foxes.opt.objectives.MinimalMaxTI.__init__", "foxes.opt.problems.OptFarmVars", "foxes.opt.problems.OptFarmVars.__init__", "foxes.opt.problems.OptFarmVars.add_var", "foxes.opt.problems.OptFarmVars.initial_values_float", "foxes.opt.problems.OptFarmVars.initial_values_int", "foxes.opt.problems.OptFarmVars.initialize", "foxes.opt.problems.OptFarmVars.max_values_float", "foxes.opt.problems.OptFarmVars.max_values_int", "foxes.opt.problems.OptFarmVars.min_values_float", "foxes.opt.problems.OptFarmVars.min_values_int", "foxes.opt.problems.OptFarmVars.opt2farm_vars_individual", "foxes.opt.problems.OptFarmVars.opt2farm_vars_population", "foxes.opt.problems.OptFarmVars.var_names_float", "foxes.opt.problems.OptFarmVars.var_names_int", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_population", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.get_bounds", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Valid", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.cdist", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.Objective", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.cdist", "foxes.opt.problems.layout.geom_layouts.GeomLayout", "foxes.opt.problems.layout.geom_layouts.GeomLayout.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayout.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayout.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.var_names_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_int", "foxes.opt.problems.layout.FarmLayoutOptProblem", "foxes.opt.problems.layout.FarmLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.initialize", "foxes.opt.problems.layout.FarmLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.FarmLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_int", "foxes.opt.problems.layout.RegularLayoutOptProblem", "foxes.opt.problems.layout.RegularLayoutOptProblem.ANGLE", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegularLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegularLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegularLayoutOptProblem.var_names_float", "foxes.utils.read_shp", "foxes.utils.read_shp_polygons", "foxes.utils.runners.DaskRunner", "foxes.utils.runners.DaskRunner.__init__", "foxes.utils.runners.DaskRunner.finalize", "foxes.utils.runners.DaskRunner.initialize", "foxes.utils.runners.DaskRunner.is_distributed", "foxes.utils.runners.DaskRunner.print", "foxes.utils.runners.DaskRunner.run", "foxes.utils.runners.DefaultRunner", "foxes.utils.runners.DefaultRunner.run", "foxes.utils.runners.Runner", "foxes.utils.runners.Runner.__init__", "foxes.utils.runners.Runner.finalize", "foxes.utils.runners.Runner.initialize", "foxes.utils.runners.Runner.initialized", "foxes.utils.runners.Runner.run", "foxes.utils.show_plotly_fig", "foxes.utils.shp2csv", "foxes.utils.shp2geom2d", "foxes.utils.two_circles.area", "foxes.utils.two_circles.calc_area", "foxes.utils.uv2wd", "foxes.utils.wd2uv", "foxes.utils.wd2wdvec", "foxes.utils.wdvec2wd", "API", "foxes.algorithms", "Downwind algorithm", "Iterative algorithm", "foxes.constants", "foxes.core", "foxes", "foxes.input", "foxes.models", "foxes.opt", "foxes.opt.problems", "foxes.opt.problems.layout.geom_layouts", "foxes.output", "foxes.utils", "foxes.utils.abl.neutral", "foxes.variables", "foxes.models.wake_models", "Citation", "Examples", "History", "Welcome to FOXES", "Installation", "Static data", "Heterogeneous flow", "Layout optimization", "The model book", "Multi-height wind data", "Overview - how to setup foxes", "Power mask", "Wind sector management", "Single row of turbines", "Dynamic wakes", "Timeseries data", "Wind rose data", "Yawed rotor wakes"], "terms": {"class": [0, 8, 10, 13, 17, 22, 28, 32, 37, 41, 46, 50, 52, 56, 65, 70, 78, 81, 91, 100, 105, 113, 114, 127, 133, 135, 139, 147, 156, 161, 165, 167, 169, 172, 173, 178, 182, 185, 190, 447, 455, 466, 468, 475, 482, 493, 497, 498, 505, 508, 513, 514, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 646, 647, 648, 649, 652, 653, 658, 659, 664, 665, 670, 671, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 835, 840, 849, 869, 877, 878, 881, 884, 890, 893, 895, 898, 906, 926, 929, 936, 938, 946, 953, 960, 968, 976, 997, 999, 1006, 1017, 1024, 1033, 1043, 1068, 1069, 1074, 1081, 1090, 1092, 1098, 1100, 1105, 1114, 1115, 1119, 1120, 1124, 1125, 1129, 1130, 1135, 1140, 1145, 1146, 1151, 1152, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1242, 1248, 1253, 1264, 1273, 1281, 1288, 1290, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1321, 1327, 1330, 1336, 1339], "fox": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1322, 1323, 1324, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "algorithm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 77, 79, 80, 84, 85, 87, 88, 90, 93, 94, 95, 96, 97, 98, 102, 103, 104, 108, 109, 110, 111, 112, 117, 118, 119, 120, 121, 123, 128, 129, 130, 131, 132, 134, 136, 138, 142, 143, 144, 145, 146, 149, 151, 152, 154, 158, 160, 166, 174, 175, 176, 177, 179, 180, 181, 183, 184, 449, 451, 452, 454, 458, 459, 461, 462, 465, 470, 471, 472, 474, 477, 478, 479, 481, 485, 486, 488, 489, 492, 496, 501, 502, 503, 504, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 558, 559, 560, 562, 563, 566, 567, 570, 571, 578, 585, 590, 591, 594, 595, 596, 599, 600, 601, 605, 606, 607, 608, 611, 612, 613, 617, 618, 619, 623, 624, 627, 628, 629, 632, 633, 635, 636, 638, 639, 643, 644, 650, 651, 654, 655, 656, 657, 660, 661, 662, 663, 666, 667, 668, 669, 672, 673, 674, 675, 699, 701, 702, 703, 704, 705, 708, 709, 710, 714, 715, 716, 717, 720, 721, 722, 723, 726, 727, 728, 729, 730, 732, 733, 736, 737, 738, 739, 740, 741, 743, 744, 747, 748, 749, 753, 754, 755, 759, 760, 761, 765, 766, 770, 771, 772, 789, 797, 798, 802, 803, 807, 808, 809, 812, 813, 814, 817, 818, 819, 820, 823, 824, 827, 828, 829, 830, 833, 834, 851, 863, 869, 870, 871, 872, 873, 874, 875, 876, 1024, 1026, 1076, 1077, 1078, 1080, 1249, 1270, 1305, 1310, 1313, 1324, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "downwind": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 1306, 1308, 1324, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "core": [0, 1, 3, 5, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 39, 44, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 444, 445, 446, 447, 449, 451, 452, 454, 455, 458, 459, 461, 462, 465, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 488, 489, 492, 496, 497, 498, 499, 501, 502, 503, 504, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 571, 574, 578, 581, 585, 588, 590, 591, 592, 594, 595, 596, 597, 599, 600, 601, 603, 605, 606, 607, 608, 609, 611, 612, 613, 614, 617, 618, 619, 621, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 649, 650, 651, 652, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 679, 682, 685, 688, 692, 695, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 736, 737, 738, 739, 740, 741, 743, 744, 747, 748, 749, 753, 754, 755, 759, 760, 761, 765, 766, 770, 771, 772, 773, 789, 791, 792, 797, 798, 802, 803, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 821, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 851, 863, 893, 976, 999, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1092, 1100, 1140, 1191, 1195, 1205, 1215, 1225, 1239, 1248, 1249, 1264, 1270, 1305, 1307, 1308, 1311, 1312, 1313, 1315, 1316, 1321, 1324], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 382, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 988, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1014, 1017, 1018, 1019, 1022, 1024, 1026, 1029, 1031, 1032, 1046, 1059, 1063, 1064, 1065, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1321, 1322, 1324, 1325, 1326, 1339], "The": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 195, 273, 277, 281, 285, 286, 287, 293, 302, 319, 320, 370, 371, 388, 391, 392, 393, 395, 396, 400, 401, 402, 403, 404, 405, 406, 409, 410, 412, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 772, 773, 788, 789, 791, 792, 794, 795, 797, 798, 799, 800, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1172, 1173, 1175, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1187, 1188, 1189, 1191, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1287, 1289, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1309, 1311, 1313, 1315, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "turbin": [0, 1, 2, 3, 8, 10, 13, 22, 24, 25, 56, 69, 70, 76, 91, 92, 93, 94, 99, 113, 120, 127, 129, 130, 149, 151, 161, 162, 163, 164, 165, 166, 167, 173, 174, 175, 176, 177, 179, 184, 185, 187, 188, 189, 192, 193, 382, 383, 384, 385, 386, 387, 405, 406, 418, 429, 435, 436, 441, 442, 443, 444, 445, 446, 497, 498, 499, 501, 508, 510, 513, 515, 516, 521, 524, 525, 530, 533, 534, 539, 541, 542, 544, 545, 550, 552, 553, 570, 588, 589, 590, 594, 597, 599, 605, 610, 611, 617, 621, 623, 627, 632, 635, 638, 643, 649, 650, 654, 660, 666, 672, 699, 701, 703, 704, 706, 708, 709, 710, 711, 714, 715, 716, 718, 720, 721, 722, 724, 726, 728, 729, 732, 733, 736, 737, 743, 744, 747, 748, 749, 753, 754, 759, 760, 765, 770, 771, 789, 792, 797, 802, 807, 811, 813, 816, 818, 824, 826, 828, 834, 842, 847, 849, 851, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 874, 875, 876, 883, 884, 886, 888, 889, 890, 893, 895, 897, 976, 977, 997, 999, 1000, 1006, 1007, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1030, 1056, 1059, 1062, 1063, 1068, 1081, 1082, 1090, 1091, 1092, 1098, 1099, 1100, 1102, 1115, 1119, 1120, 1124, 1125, 1129, 1130, 1135, 1146, 1157, 1176, 1177, 1182, 1188, 1195, 1196, 1205, 1206, 1215, 1216, 1239, 1248, 1264, 1270, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1320, 1323, 1324, 1325, 1327, 1328, 1329, 1331, 1332, 1333, 1334, 1336, 1337, 1338, 1339], "ar": [0, 13, 16, 17, 21, 22, 25, 27, 28, 31, 32, 36, 52, 55, 56, 78, 81, 88, 91, 98, 100, 103, 105, 112, 113, 135, 137, 139, 146, 147, 148, 150, 151, 154, 156, 158, 165, 167, 173, 179, 180, 181, 182, 287, 441, 447, 452, 455, 462, 466, 468, 472, 475, 479, 482, 489, 493, 497, 498, 504, 513, 514, 521, 522, 530, 531, 540, 543, 551, 556, 560, 561, 563, 564, 567, 568, 569, 570, 574, 575, 577, 581, 582, 584, 588, 589, 591, 592, 596, 597, 601, 603, 604, 608, 609, 610, 613, 614, 619, 621, 624, 625, 626, 629, 630, 633, 634, 636, 637, 639, 640, 644, 645, 647, 649, 651, 652, 657, 658, 663, 664, 669, 670, 675, 737, 739, 755, 761, 766, 772, 798, 803, 809, 810, 814, 815, 820, 825, 830, 847, 865, 866, 867, 880, 883, 929, 935, 936, 938, 945, 946, 952, 953, 959, 960, 967, 968, 975, 976, 997, 999, 1006, 1024, 1030, 1033, 1034, 1035, 1043, 1068, 1074, 1078, 1100, 1102, 1114, 1119, 1124, 1129, 1135, 1140, 1142, 1143, 1144, 1145, 1151, 1156, 1194, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1299, 1312, 1313, 1315, 1316, 1318, 1321, 1323, 1324, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "evalu": [0, 13, 22, 23, 37, 40, 41, 45, 46, 49, 50, 120, 129, 130, 134, 147, 151, 170, 173, 175, 177, 179, 180, 181, 183, 184, 515, 516, 520, 521, 522, 524, 525, 529, 530, 533, 534, 538, 541, 544, 545, 549, 552, 553, 555, 568, 570, 574, 581, 677, 680, 683, 686, 690, 693, 697, 699, 701, 704, 706, 708, 710, 711, 714, 716, 718, 720, 722, 724, 726, 729, 731, 732, 733, 736, 737, 739, 743, 744, 747, 748, 749, 753, 754, 755, 759, 760, 761, 765, 766, 770, 771, 772, 789, 797, 798, 802, 803, 807, 809, 812, 813, 817, 818, 823, 824, 827, 828, 833, 834, 849, 893, 913, 914, 916, 917, 918, 919, 922, 923, 1024, 1038, 1039, 1068, 1100, 1195, 1196, 1205, 1215, 1225, 1239, 1248, 1264, 1307, 1308, 1313, 1315, 1316, 1317, 1322, 1324, 1325, 1332, 1334, 1335, 1336, 1337], "onc": [0, 521, 1326, 1328, 1329, 1335, 1336, 1339], "order": [0, 13, 120, 173, 175, 195, 287, 320, 418, 497, 508, 664, 670, 699, 701, 706, 708, 711, 714, 718, 720, 724, 726, 1033, 1043, 1306, 1307, 1313, 1320, 1329, 1333, 1334, 1335], "i": [0, 14, 19, 24, 30, 34, 53, 78, 79, 80, 84, 93, 102, 104, 108, 120, 136, 138, 142, 150, 151, 161, 166, 175, 182, 195, 255, 278, 287, 320, 333, 368, 441, 443, 449, 455, 458, 470, 477, 485, 495, 501, 513, 514, 521, 522, 530, 531, 540, 542, 543, 551, 556, 557, 558, 562, 566, 569, 570, 574, 575, 577, 584, 588, 589, 590, 594, 597, 599, 605, 611, 617, 623, 627, 632, 634, 635, 637, 638, 643, 650, 652, 653, 654, 658, 659, 660, 664, 666, 670, 671, 672, 699, 701, 708, 714, 720, 726, 731, 732, 733, 734, 736, 743, 744, 747, 749, 753, 756, 757, 759, 762, 765, 770, 797, 802, 807, 821, 856, 877, 882, 892, 897, 934, 935, 944, 945, 951, 952, 958, 959, 966, 967, 974, 975, 1024, 1043, 1046, 1054, 1055, 1064, 1065, 1068, 1072, 1073, 1076, 1081, 1100, 1156, 1194, 1195, 1205, 1215, 1225, 1239, 1248, 1260, 1261, 1264, 1281, 1286, 1313, 1314, 1320, 1321, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "calcul": [0, 2, 3, 8, 10, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 39, 44, 48, 52, 53, 54, 55, 56, 59, 70, 71, 78, 79, 80, 81, 84, 85, 87, 88, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 118, 121, 129, 130, 131, 134, 135, 136, 138, 139, 142, 143, 144, 146, 147, 148, 149, 151, 152, 154, 156, 158, 160, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 398, 399, 423, 424, 447, 449, 451, 452, 454, 455, 458, 459, 461, 462, 465, 466, 468, 470, 471, 472, 474, 475, 477, 478, 479, 481, 482, 485, 486, 488, 489, 492, 493, 497, 498, 501, 502, 503, 504, 511, 515, 516, 517, 518, 520, 521, 524, 525, 526, 527, 529, 533, 534, 535, 536, 538, 541, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 571, 574, 575, 578, 581, 582, 585, 588, 589, 590, 591, 592, 594, 595, 596, 597, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 617, 618, 619, 621, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 759, 760, 761, 762, 765, 766, 767, 770, 771, 772, 773, 789, 794, 797, 798, 799, 802, 803, 804, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 821, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 840, 841, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 868, 869, 870, 884, 885, 894, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 925, 927, 928, 929, 934, 936, 938, 944, 946, 951, 953, 958, 960, 966, 968, 974, 976, 979, 980, 981, 997, 999, 1001, 1002, 1006, 1009, 1010, 1017, 1024, 1033, 1043, 1060, 1061, 1064, 1065, 1068, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1083, 1084, 1090, 1092, 1094, 1095, 1098, 1100, 1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1145, 1147, 1148, 1151, 1153, 1154, 1156, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1194, 1195, 1205, 1215, 1225, 1239, 1248, 1260, 1261, 1264, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1313, 1314, 1317, 1318, 1319, 1320, 1321, 1324, 1325, 1328, 1329, 1330, 1331, 1332, 1333, 1335, 1336, 1337, 1338, 1339], "provid": [0, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 78, 81, 87, 91, 96, 100, 105, 110, 113, 114, 120, 121, 127, 131, 135, 139, 144, 147, 156, 165, 167, 169, 173, 178, 182, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 503, 513, 518, 521, 527, 530, 536, 539, 542, 547, 550, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 592, 595, 597, 600, 603, 607, 609, 612, 614, 618, 621, 625, 628, 630, 634, 637, 640, 645, 647, 649, 652, 656, 658, 662, 664, 668, 670, 674, 676, 679, 682, 685, 688, 692, 695, 699, 705, 706, 711, 717, 718, 723, 724, 730, 731, 734, 740, 742, 745, 750, 756, 762, 767, 794, 799, 804, 810, 815, 819, 821, 825, 829, 831, 877, 892, 897, 1074, 1077, 1311, 1313, 1324, 1327, 1328, 1329, 1330, 1331, 1332, 1335, 1337], "turbineord": [0, 508], "object": [0, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 62, 66, 68, 73, 78, 81, 87, 91, 96, 100, 105, 110, 113, 114, 117, 119, 120, 121, 124, 125, 127, 129, 130, 131, 135, 139, 144, 147, 156, 165, 167, 169, 173, 178, 182, 195, 225, 245, 287, 320, 343, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 496, 497, 498, 503, 513, 515, 516, 518, 521, 524, 525, 527, 530, 533, 534, 536, 539, 541, 542, 544, 545, 547, 550, 552, 553, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 592, 595, 597, 600, 603, 607, 609, 612, 614, 618, 621, 625, 628, 630, 634, 637, 640, 645, 647, 649, 652, 656, 658, 662, 664, 668, 670, 674, 676, 679, 682, 685, 688, 692, 695, 699, 705, 706, 711, 717, 718, 723, 724, 730, 731, 734, 740, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 819, 821, 825, 829, 831, 835, 836, 842, 864, 871, 872, 873, 874, 875, 876, 884, 888, 893, 930, 940, 948, 955, 962, 970, 976, 983, 986, 997, 999, 1006, 1017, 1018, 1024, 1027, 1028, 1033, 1038, 1039, 1041, 1042, 1043, 1046, 1050, 1055, 1060, 1061, 1068, 1069, 1074, 1077, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1105, 1114, 1119, 1124, 1129, 1133, 1135, 1140, 1145, 1151, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1201, 1205, 1211, 1215, 1221, 1225, 1232, 1239, 1240, 1242, 1248, 1250, 1253, 1264, 1271, 1273, 1298, 1311, 1313, 1315, 1327, 1328, 1329, 1330, 1333, 1334, 1335, 1337, 1338, 1339], "state": [0, 1, 2, 3, 6, 8, 10, 13, 17, 22, 24, 25, 28, 32, 52, 56, 57, 66, 70, 75, 77, 78, 81, 82, 86, 89, 90, 91, 93, 100, 105, 113, 114, 120, 125, 127, 129, 130, 135, 139, 147, 149, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 173, 174, 176, 177, 178, 179, 182, 184, 379, 380, 381, 382, 383, 431, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 513, 515, 516, 521, 524, 525, 530, 533, 534, 539, 541, 542, 544, 545, 550, 552, 553, 556, 557, 561, 564, 568, 570, 574, 581, 588, 589, 590, 592, 594, 597, 599, 603, 605, 609, 611, 614, 617, 621, 623, 625, 627, 630, 632, 634, 635, 637, 638, 640, 643, 645, 647, 649, 650, 652, 654, 658, 660, 664, 666, 670, 672, 676, 679, 682, 685, 688, 692, 695, 699, 703, 704, 706, 709, 710, 711, 715, 716, 718, 721, 722, 724, 728, 729, 731, 732, 733, 734, 736, 737, 742, 743, 744, 745, 747, 748, 749, 750, 753, 754, 756, 759, 760, 762, 765, 767, 770, 771, 773, 789, 792, 794, 797, 799, 802, 804, 807, 810, 813, 815, 818, 821, 824, 825, 828, 831, 834, 840, 841, 842, 849, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 890, 893, 894, 1024, 1046, 1071, 1074, 1075, 1079, 1080, 1082, 1091, 1099, 1102, 1111, 1246, 1259, 1277, 1309, 1310, 1313, 1314, 1317, 1320, 1324, 1325, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "ambient": [0, 1, 2, 3, 28, 32, 130, 147, 148, 149, 151, 156, 180, 183, 194, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 439, 440, 447, 516, 525, 534, 545, 553, 564, 565, 568, 570, 574, 575, 581, 582, 739, 750, 751, 811, 812, 816, 817, 823, 826, 827, 831, 832, 833, 849, 851, 857, 863, 1307, 1309, 1312, 1313, 1320, 1324, 1325, 1331, 1332, 1333, 1335, 1337, 1338], "wake_model": [0, 1, 22, 23, 127, 128, 174, 508, 513, 514, 521, 522, 530, 531, 539, 540, 542, 543, 550, 551, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "list": [0, 1, 3, 8, 13, 16, 17, 21, 22, 23, 25, 27, 28, 31, 32, 33, 36, 41, 42, 46, 47, 52, 55, 56, 61, 68, 70, 71, 78, 80, 81, 82, 83, 86, 88, 91, 97, 98, 100, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 123, 125, 127, 128, 132, 135, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 154, 156, 157, 158, 161, 162, 163, 164, 165, 167, 169, 171, 173, 174, 178, 182, 185, 187, 189, 190, 320, 333, 441, 445, 446, 447, 448, 450, 452, 455, 457, 460, 462, 463, 466, 468, 472, 475, 479, 482, 484, 487, 489, 490, 493, 497, 498, 504, 512, 513, 514, 519, 521, 522, 528, 530, 531, 537, 539, 540, 542, 543, 548, 550, 551, 556, 557, 560, 561, 563, 564, 565, 567, 568, 574, 575, 581, 582, 588, 589, 591, 592, 593, 596, 597, 601, 603, 608, 609, 610, 613, 614, 619, 621, 624, 625, 626, 629, 630, 633, 634, 636, 637, 639, 640, 644, 645, 647, 649, 651, 652, 657, 658, 663, 664, 669, 670, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 691, 692, 694, 695, 698, 699, 706, 711, 718, 724, 731, 734, 741, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 811, 814, 815, 816, 820, 821, 825, 826, 830, 831, 835, 837, 839, 851, 854, 855, 858, 860, 861, 862, 864, 883, 886, 888, 889, 897, 898, 900, 903, 905, 906, 926, 937, 938, 939, 976, 977, 979, 980, 981, 982, 993, 994, 997, 999, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1015, 1017, 1018, 1023, 1026, 1033, 1043, 1046, 1060, 1061, 1062, 1066, 1067, 1069, 1074, 1078, 1081, 1082, 1083, 1084, 1090, 1091, 1092, 1094, 1095, 1098, 1099, 1102, 1112, 1113, 1116, 1117, 1121, 1122, 1126, 1127, 1131, 1132, 1137, 1138, 1147, 1148, 1153, 1154, 1156, 1159, 1160, 1166, 1167, 1172, 1173, 1178, 1179, 1184, 1185, 1194, 1204, 1214, 1224, 1237, 1238, 1247, 1262, 1263, 1278, 1280, 1305, 1308, 1310, 1311, 1312, 1317, 1324, 1327, 1330, 1333], "wakemodel": [0, 22, 23, 25, 127, 128, 174, 178, 179, 180, 181, 508, 514, 522, 531, 540, 543, 551, 734, 1310, 1321], "wake": [0, 1, 2, 3, 13, 17, 22, 23, 24, 25, 52, 120, 127, 128, 129, 130, 133, 134, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 413, 420, 421, 439, 508, 513, 514, 515, 516, 520, 521, 522, 524, 525, 529, 530, 531, 533, 534, 538, 539, 540, 541, 542, 543, 544, 545, 549, 550, 551, 552, 553, 554, 555, 564, 640, 699, 700, 703, 704, 706, 709, 710, 711, 715, 716, 718, 719, 721, 722, 724, 725, 728, 729, 731, 732, 733, 734, 735, 736, 737, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 772, 773, 788, 789, 792, 794, 795, 797, 798, 799, 800, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 815, 817, 818, 821, 822, 823, 824, 825, 827, 828, 831, 832, 833, 834, 1195, 1205, 1307, 1308, 1310, 1313, 1315, 1316, 1320, 1321, 1323, 1324, 1325, 1327, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1337, 1338], "model": [0, 1, 2, 3, 5, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 61, 62, 63, 68, 70, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 384, 385, 420, 421, 441, 447, 449, 451, 452, 455, 458, 459, 461, 462, 466, 468, 470, 471, 472, 475, 477, 478, 479, 482, 485, 486, 488, 489, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 840, 849, 869, 877, 878, 879, 881, 884, 890, 893, 895, 896, 897, 976, 997, 999, 1006, 1014, 1017, 1022, 1046, 1068, 1069, 1074, 1076, 1077, 1078, 1081, 1090, 1092, 1098, 1102, 1305, 1309, 1310, 1311, 1314, 1318, 1320, 1323, 1324, 1325, 1327, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "appli": [0, 1, 25, 179, 180, 181, 183, 184, 737, 739, 755, 761, 766, 772, 798, 803, 809, 812, 813, 817, 818, 823, 824, 827, 828, 833, 834, 856, 1024, 1031, 1032, 1068, 1100, 1102, 1156, 1194, 1195, 1197, 1198, 1205, 1207, 1208, 1215, 1217, 1218, 1225, 1227, 1228, 1239, 1248, 1264, 1307, 1313, 1329, 1339], "all": [0, 1, 2, 3, 8, 13, 14, 15, 17, 19, 20, 22, 24, 26, 28, 30, 32, 34, 35, 52, 53, 54, 56, 78, 79, 81, 84, 87, 90, 91, 93, 96, 97, 100, 102, 105, 108, 110, 111, 113, 114, 121, 123, 127, 128, 131, 132, 135, 136, 139, 142, 144, 145, 147, 151, 156, 160, 165, 166, 167, 169, 173, 175, 178, 182, 183, 185, 189, 195, 250, 287, 320, 447, 448, 449, 451, 454, 455, 458, 461, 465, 466, 468, 470, 471, 474, 475, 477, 478, 481, 482, 485, 488, 492, 493, 497, 498, 501, 503, 508, 513, 518, 519, 521, 527, 528, 530, 536, 537, 539, 542, 547, 548, 550, 554, 556, 558, 559, 561, 562, 564, 566, 568, 570, 574, 578, 581, 585, 588, 589, 590, 592, 594, 595, 597, 599, 600, 603, 605, 607, 609, 611, 612, 614, 617, 618, 620, 621, 623, 625, 627, 628, 630, 632, 634, 635, 637, 638, 640, 643, 645, 647, 649, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 679, 682, 685, 688, 692, 695, 699, 701, 705, 706, 708, 711, 714, 717, 718, 720, 723, 724, 726, 730, 731, 734, 740, 741, 742, 745, 750, 756, 762, 767, 773, 790, 794, 799, 804, 810, 812, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 840, 842, 849, 868, 869, 877, 879, 881, 883, 884, 886, 888, 889, 890, 893, 895, 926, 976, 979, 980, 981, 995, 996, 997, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1014, 1016, 1017, 1022, 1024, 1026, 1030, 1033, 1039, 1043, 1054, 1055, 1068, 1074, 1076, 1077, 1080, 1081, 1082, 1083, 1084, 1089, 1090, 1091, 1092, 1094, 1095, 1098, 1099, 1100, 1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1144, 1145, 1147, 1148, 1151, 1153, 1154, 1156, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1194, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1280, 1300, 1305, 1310, 1311, 1312, 1313, 1318, 1324, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1335, 1336, 1338], "rotor_model": [0, 1, 508, 521, 522, 530, 531, 540, 542, 543, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 1328, 1329, 1330, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "rotormodel": [0, 147, 148, 149, 150, 151, 152, 153, 154, 155, 508, 521, 522, 530, 531, 540, 542, 543, 568, 574, 581, 1310, 1313], "rotor": [0, 1, 91, 93, 100, 101, 127, 147, 149, 150, 151, 152, 153, 155, 161, 162, 167, 168, 194, 376, 377, 378, 397, 398, 399, 410, 422, 423, 424, 429, 441, 508, 521, 522, 530, 531, 539, 540, 542, 543, 550, 554, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 586, 587, 603, 604, 615, 621, 622, 706, 821, 840, 841, 842, 976, 977, 1102, 1115, 1309, 1310, 1313, 1320, 1323, 1324, 1325, 1329, 1332, 1336, 1337], "wake_fram": [0, 1, 127, 128, 508, 514, 521, 522, 531, 539, 540, 542, 543, 550, 551, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 1328, 1329, 1330, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "wakefram": [0, 127, 128, 173, 174, 175, 176, 177, 508, 514, 522, 531, 540, 543, 551, 699, 700, 706, 711, 718, 724, 725, 1310, 1313], "frame": [0, 1, 13, 127, 128, 150, 173, 174, 176, 177, 179, 455, 508, 514, 522, 531, 540, 543, 551, 556, 557, 569, 577, 584, 699, 700, 703, 704, 709, 710, 715, 716, 721, 722, 724, 725, 728, 729, 737, 773, 1279, 1307, 1310, 1313, 1321, 1324, 1328, 1332, 1336, 1339], "partial_wakes_model": [0, 1, 1328, 1329, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "partialwakesmodel": [0, 127, 128, 129, 130, 131, 132, 133, 134, 513, 521, 530, 542, 550, 1310, 1313], "partial": [0, 1, 127, 133, 508, 513, 514, 521, 530, 539, 542, 550, 731, 734, 1310, 1313, 1321, 1332], "farm_control": [0, 1, 497, 508, 1330], "farmcontrol": [0, 91, 92, 93, 94, 95, 96, 97, 98, 99, 497, 508, 1310, 1313], "farm": [0, 1, 2, 3, 8, 10, 14, 17, 19, 24, 25, 28, 30, 34, 39, 44, 48, 52, 53, 56, 57, 69, 84, 91, 93, 94, 100, 102, 105, 108, 113, 120, 127, 129, 130, 134, 136, 142, 147, 149, 151, 152, 161, 162, 166, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 188, 318, 441, 442, 443, 444, 445, 446, 449, 458, 470, 477, 485, 496, 497, 498, 501, 508, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 554, 555, 558, 562, 566, 570, 571, 588, 589, 590, 594, 599, 605, 611, 614, 617, 621, 623, 627, 632, 635, 638, 641, 643, 650, 654, 660, 666, 672, 699, 701, 703, 704, 708, 709, 710, 714, 715, 716, 720, 721, 722, 724, 725, 726, 728, 729, 732, 733, 736, 737, 739, 743, 744, 747, 748, 749, 750, 751, 753, 754, 755, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 772, 789, 794, 795, 797, 798, 802, 803, 807, 809, 812, 813, 817, 818, 823, 824, 827, 828, 833, 834, 840, 841, 842, 843, 844, 849, 850, 851, 852, 853, 856, 857, 869, 870, 871, 872, 873, 874, 875, 876, 881, 882, 884, 885, 886, 888, 889, 890, 891, 894, 976, 997, 999, 1006, 1011, 1017, 1020, 1024, 1040, 1064, 1065, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1081, 1090, 1092, 1098, 1100, 1102, 1110, 1111, 1195, 1205, 1215, 1225, 1239, 1245, 1246, 1248, 1258, 1259, 1260, 1261, 1264, 1276, 1277, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1322, 1324, 1325, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "control": [0, 1, 497, 508, 1313], "n_state": [0, 3, 14, 19, 24, 25, 30, 34, 53, 66, 70, 73, 75, 84, 90, 91, 93, 102, 108, 120, 129, 130, 136, 142, 149, 151, 152, 160, 161, 162, 163, 164, 166, 174, 175, 176, 177, 179, 180, 181, 183, 184, 449, 454, 458, 465, 470, 474, 477, 481, 485, 492, 495, 501, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 554, 558, 562, 566, 570, 571, 588, 589, 590, 594, 599, 605, 611, 616, 617, 623, 627, 632, 635, 638, 643, 650, 654, 660, 666, 672, 701, 703, 704, 708, 709, 710, 714, 715, 716, 720, 721, 722, 726, 728, 729, 732, 733, 736, 737, 739, 743, 744, 747, 748, 749, 753, 754, 755, 759, 760, 761, 765, 766, 770, 771, 772, 789, 792, 797, 798, 802, 803, 807, 809, 812, 813, 817, 818, 823, 824, 827, 828, 833, 834, 1024, 1026, 1068, 1070, 1071, 1074, 1076, 1080, 1100, 1110, 1111, 1239, 1245, 1246, 1248, 1258, 1259, 1264, 1276, 1277, 1312, 1314, 1335], "int": [0, 1, 8, 9, 12, 15, 20, 26, 35, 39, 44, 48, 54, 56, 57, 61, 67, 68, 74, 75, 76, 77, 85, 87, 89, 95, 96, 109, 110, 118, 121, 124, 125, 129, 130, 131, 143, 144, 149, 151, 153, 159, 161, 162, 164, 187, 188, 195, 216, 320, 334, 366, 441, 443, 444, 445, 446, 448, 451, 453, 455, 457, 459, 461, 463, 464, 471, 473, 478, 480, 482, 484, 486, 488, 490, 491, 502, 503, 511, 515, 516, 517, 518, 521, 522, 524, 525, 526, 527, 531, 533, 534, 535, 536, 540, 541, 544, 545, 546, 547, 552, 553, 559, 570, 572, 574, 575, 578, 579, 581, 582, 585, 586, 595, 600, 606, 607, 612, 618, 628, 655, 656, 661, 662, 667, 668, 673, 674, 689, 702, 705, 711, 712, 717, 723, 727, 730, 738, 740, 808, 819, 829, 838, 840, 841, 842, 847, 851, 852, 863, 864, 871, 872, 873, 874, 875, 876, 883, 886, 888, 889, 976, 977, 979, 980, 981, 983, 984, 985, 986, 988, 989, 990, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1027, 1028, 1033, 1034, 1035, 1037, 1041, 1042, 1043, 1045, 1046, 1049, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1068, 1069, 1071, 1074, 1075, 1077, 1079, 1081, 1083, 1084, 1085, 1086, 1088, 1090, 1092, 1094, 1095, 1097, 1098, 1100, 1102, 1104, 1105, 1107, 1109, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1137, 1138, 1139, 1140, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1157, 1159, 1160, 1161, 1163, 1164, 1166, 1167, 1169, 1170, 1172, 1173, 1175, 1176, 1177, 1178, 1179, 1181, 1182, 1184, 1185, 1187, 1188, 1191, 1195, 1196, 1201, 1205, 1206, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1221, 1225, 1226, 1231, 1232, 1234, 1236, 1238, 1239, 1240, 1242, 1246, 1248, 1249, 1250, 1252, 1253, 1255, 1257, 1259, 1263, 1264, 1271, 1273, 1277, 1280, 1281, 1282, 1297, 1301, 1302, 1303, 1304, 1309, 1327], "number": [0, 8, 9, 12, 56, 69, 70, 74, 75, 76, 81, 89, 147, 153, 156, 159, 185, 188, 195, 206, 255, 278, 286, 302, 320, 325, 366, 368, 446, 447, 453, 455, 464, 466, 468, 473, 475, 480, 482, 491, 493, 521, 522, 568, 572, 574, 575, 579, 581, 582, 586, 625, 725, 746, 751, 757, 762, 763, 768, 773, 788, 795, 799, 800, 804, 805, 810, 811, 815, 816, 825, 826, 842, 847, 871, 872, 873, 874, 875, 876, 886, 888, 889, 976, 988, 989, 990, 997, 999, 1004, 1006, 1012, 1017, 1024, 1054, 1055, 1057, 1058, 1068, 1071, 1074, 1079, 1081, 1088, 1090, 1092, 1097, 1098, 1100, 1111, 1114, 1115, 1118, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1134, 1135, 1139, 1140, 1145, 1146, 1150, 1151, 1155, 1156, 1157, 1163, 1164, 1169, 1170, 1175, 1176, 1177, 1181, 1182, 1187, 1188, 1191, 1194, 1195, 1196, 1205, 1206, 1215, 1216, 1225, 1226, 1239, 1246, 1248, 1249, 1259, 1264, 1277, 1282, 1314, 1316, 1322, 1329, 1330, 1332], "classmethod": [0, 5, 8, 11, 13, 17, 22, 28, 32, 52, 56, 65, 70, 73, 78, 81, 91, 100, 105, 113, 114, 125, 127, 133, 135, 139, 147, 156, 165, 167, 169, 172, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 602, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 840, 849, 869, 877, 878, 879, 880, 881, 884, 887, 890, 893, 895, 906, 911, 912, 976, 997, 999, 1006, 1014, 1017, 1022, 1024, 1059, 1063, 1068, 1074, 1081, 1090, 1092, 1098, 1100, 1239, 1248, 1264, 1281, 1285], "get_model": [0, 5, 8, 11], "name": [0, 2, 3, 5, 8, 11, 13, 16, 17, 21, 22, 25, 27, 28, 31, 32, 36, 37, 38, 41, 42, 46, 47, 52, 55, 56, 63, 65, 70, 71, 72, 73, 78, 81, 88, 91, 92, 98, 99, 100, 103, 105, 112, 113, 114, 117, 119, 126, 127, 133, 134, 135, 137, 139, 146, 147, 149, 154, 156, 158, 161, 162, 165, 167, 168, 169, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 192, 193, 386, 441, 444, 445, 446, 447, 448, 452, 455, 457, 462, 466, 468, 472, 475, 476, 479, 482, 484, 489, 493, 495, 497, 498, 504, 505, 507, 508, 512, 513, 514, 520, 521, 529, 530, 538, 539, 542, 549, 550, 555, 556, 557, 560, 561, 563, 564, 567, 568, 574, 575, 581, 582, 588, 591, 592, 593, 596, 597, 601, 603, 604, 608, 609, 610, 613, 614, 616, 619, 621, 624, 625, 629, 630, 631, 633, 634, 636, 637, 639, 640, 641, 644, 645, 646, 647, 648, 649, 651, 652, 653, 657, 658, 659, 663, 664, 665, 669, 670, 671, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 691, 692, 694, 695, 698, 699, 706, 711, 718, 724, 725, 731, 732, 733, 734, 735, 736, 737, 739, 742, 744, 745, 746, 747, 749, 750, 751, 753, 755, 756, 757, 759, 761, 762, 763, 766, 767, 768, 770, 772, 773, 794, 795, 797, 798, 799, 800, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 840, 842, 849, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 890, 893, 895, 897, 898, 901, 904, 976, 977, 982, 991, 992, 993, 994, 997, 998, 999, 1000, 1006, 1007, 1014, 1017, 1018, 1022, 1024, 1026, 1046, 1059, 1063, 1066, 1067, 1068, 1069, 1070, 1071, 1074, 1078, 1081, 1082, 1090, 1091, 1092, 1093, 1098, 1099, 1100, 1102, 1110, 1111, 1112, 1113, 1114, 1115, 1119, 1120, 1124, 1125, 1129, 1130, 1135, 1136, 1140, 1145, 1146, 1151, 1152, 1157, 1158, 1164, 1165, 1170, 1171, 1176, 1177, 1182, 1183, 1188, 1189, 1191, 1192, 1195, 1204, 1205, 1214, 1215, 1224, 1225, 1237, 1238, 1239, 1245, 1246, 1247, 1248, 1249, 1258, 1259, 1262, 1263, 1264, 1270, 1276, 1277, 1278, 1280, 1309, 1311, 1318, 1324, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1337], "get": [0, 5, 8, 11, 13, 17, 22, 28, 32, 37, 40, 41, 45, 46, 49, 50, 52, 56, 70, 77, 78, 81, 91, 100, 105, 113, 114, 119, 127, 135, 139, 147, 156, 165, 167, 169, 173, 176, 178, 182, 190, 195, 269, 320, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 554, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 703, 706, 709, 711, 715, 718, 721, 724, 728, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 884, 886, 893, 898, 904, 905, 929, 931, 936, 938, 941, 946, 953, 960, 963, 968, 971, 976, 978, 995, 996, 997, 999, 1005, 1006, 1016, 1017, 1024, 1036, 1047, 1051, 1063, 1068, 1074, 1081, 1089, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1324, 1327], "specif": [0, 5, 8, 11, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 126, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 287, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074, 1307, 1308, 1318, 1337], "mbook": [0, 1, 56, 57, 496, 893, 894, 895, 896, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "constructor": [0, 1, 8, 9, 13, 17, 18, 22, 23, 28, 29, 32, 33, 37, 38, 41, 42, 46, 47, 50, 51, 52, 56, 57, 65, 70, 71, 78, 81, 82, 91, 92, 100, 101, 105, 106, 113, 114, 115, 127, 128, 135, 139, 140, 147, 148, 156, 161, 162, 165, 167, 168, 169, 173, 178, 182, 185, 186, 190, 191, 447, 448, 455, 457, 466, 468, 469, 475, 476, 482, 484, 493, 497, 498, 499, 505, 507, 508, 510, 513, 514, 521, 522, 530, 531, 539, 540, 542, 543, 550, 551, 556, 557, 561, 564, 565, 568, 574, 575, 581, 582, 588, 589, 592, 593, 597, 598, 603, 604, 609, 610, 614, 615, 621, 622, 625, 626, 630, 631, 634, 637, 640, 641, 645, 646, 647, 648, 649, 652, 653, 658, 659, 664, 665, 670, 671, 676, 679, 682, 685, 688, 689, 692, 695, 696, 699, 700, 706, 707, 711, 712, 718, 719, 724, 725, 731, 734, 735, 742, 745, 746, 750, 751, 756, 757, 762, 763, 767, 768, 773, 788, 794, 795, 799, 800, 804, 805, 810, 811, 815, 816, 821, 822, 825, 826, 831, 832, 835, 836, 840, 841, 849, 850, 869, 870, 881, 882, 884, 885, 890, 891, 893, 894, 895, 896, 898, 899, 936, 937, 938, 939, 953, 954, 960, 961, 968, 969, 976, 977, 997, 998, 999, 1000, 1006, 1007, 1024, 1026, 1068, 1074, 1075, 1081, 1082, 1090, 1091, 1092, 1093, 1098, 1099, 1100, 1101, 1114, 1115, 1119, 1120, 1124, 1125, 1129, 1130, 1145, 1146, 1151, 1152, 1157, 1158, 1164, 1165, 1170, 1171, 1176, 1177, 1182, 1183, 1188, 1189, 1195, 1196, 1205, 1206, 1215, 1216, 1225, 1226, 1239, 1264, 1270, 1281, 1282, 1330, 1337], "init_st": [0, 6, 8], "initi": [0, 6, 7, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 64, 68, 71, 73, 78, 80, 81, 87, 91, 96, 99, 100, 105, 110, 113, 114, 121, 122, 127, 131, 134, 135, 139, 144, 147, 156, 165, 167, 169, 173, 178, 181, 182, 447, 448, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 503, 513, 518, 520, 521, 527, 529, 530, 536, 538, 539, 542, 547, 549, 550, 555, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 592, 595, 597, 600, 603, 607, 609, 612, 614, 618, 621, 625, 628, 630, 634, 637, 640, 645, 647, 649, 652, 656, 658, 662, 664, 668, 670, 674, 676, 679, 682, 685, 688, 692, 695, 699, 705, 706, 711, 717, 718, 723, 724, 730, 731, 734, 740, 742, 745, 750, 755, 756, 761, 762, 766, 767, 772, 773, 794, 798, 799, 803, 804, 809, 810, 815, 819, 821, 825, 829, 831, 976, 986, 987, 997, 999, 1003, 1006, 1017, 1024, 1044, 1045, 1046, 1068, 1069, 1074, 1077, 1081, 1086, 1090, 1092, 1098, 1100, 1102, 1103, 1104, 1105, 1114, 1119, 1124, 1129, 1133, 1135, 1136, 1140, 1141, 1145, 1149, 1151, 1157, 1161, 1164, 1170, 1176, 1182, 1188, 1191, 1192, 1195, 1200, 1201, 1205, 1210, 1211, 1215, 1220, 1221, 1225, 1230, 1231, 1232, 1239, 1241, 1242, 1248, 1251, 1252, 1253, 1264, 1272, 1273, 1281, 1284, 1288, 1290, 1291, 1293, 1294, 1324, 1329, 1331], "need": [0, 6, 8, 120, 169, 171, 676, 678, 679, 681, 682, 684, 685, 687, 688, 691, 692, 694, 695, 698, 810, 814, 815, 820, 825, 830, 1329, 1331, 1333, 1334, 1338], "calc_farm": [0, 2, 8, 10, 1024, 1026, 1328, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "calc_paramet": [0, 2, 3], "persist": [0, 2], "true": [0, 2, 3, 8, 10, 39, 44, 48, 122, 151, 174, 190, 195, 205, 278, 320, 324, 368, 444, 448, 495, 570, 574, 575, 581, 582, 621, 622, 792, 805, 864, 871, 872, 873, 874, 875, 876, 898, 904, 934, 935, 944, 945, 946, 948, 951, 952, 953, 955, 958, 959, 960, 962, 966, 967, 974, 975, 987, 1030, 1092, 1093, 1199, 1209, 1219, 1229, 1280, 1282, 1327, 1328, 1329, 1331, 1333, 1334, 1336, 1337, 1338], "final": [0, 1, 2, 3, 4, 8, 10, 13, 17, 22, 28, 32, 52, 56, 57, 60, 61, 78, 81, 85, 91, 95, 99, 100, 105, 109, 113, 114, 118, 127, 135, 139, 143, 147, 156, 165, 167, 169, 173, 178, 180, 182, 183, 447, 455, 459, 466, 468, 475, 482, 486, 493, 497, 498, 502, 508, 511, 513, 517, 521, 526, 530, 535, 539, 542, 546, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 606, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 655, 658, 661, 664, 667, 670, 673, 676, 679, 682, 685, 688, 692, 695, 699, 702, 706, 711, 718, 724, 727, 731, 734, 738, 739, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 808, 810, 811, 812, 815, 817, 821, 822, 823, 825, 827, 831, 833, 976, 983, 984, 985, 997, 999, 1006, 1017, 1024, 1041, 1042, 1068, 1074, 1081, 1085, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1240, 1248, 1250, 1264, 1271, 1281, 1283, 1288, 1290, 1292, 1329, 1334, 1336, 1338], "data": [0, 1, 2, 3, 8, 10, 13, 14, 15, 17, 19, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 52, 53, 54, 56, 57, 62, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 87, 91, 93, 96, 100, 102, 104, 105, 108, 110, 113, 114, 117, 119, 120, 121, 125, 127, 129, 130, 131, 134, 135, 136, 138, 139, 142, 144, 147, 149, 151, 152, 156, 161, 165, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 191, 192, 193, 195, 267, 269, 287, 320, 441, 442, 443, 444, 447, 448, 449, 451, 455, 457, 458, 461, 466, 468, 470, 471, 475, 476, 477, 478, 482, 484, 485, 488, 493, 495, 497, 498, 501, 503, 513, 515, 516, 518, 520, 521, 524, 525, 527, 529, 530, 533, 534, 536, 538, 539, 541, 542, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 566, 568, 570, 571, 574, 578, 581, 585, 588, 590, 592, 593, 594, 595, 597, 599, 600, 602, 603, 605, 607, 609, 610, 611, 612, 614, 616, 617, 618, 621, 622, 623, 625, 626, 627, 628, 630, 632, 634, 635, 637, 638, 640, 641, 643, 645, 646, 647, 648, 649, 650, 652, 653, 654, 656, 658, 659, 660, 662, 664, 665, 666, 668, 670, 671, 672, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 690, 692, 693, 695, 697, 699, 701, 703, 704, 705, 706, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 736, 737, 739, 740, 742, 743, 744, 745, 747, 748, 749, 750, 751, 753, 754, 755, 756, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 772, 773, 789, 790, 791, 792, 794, 795, 797, 798, 799, 802, 803, 804, 807, 809, 810, 812, 813, 815, 817, 818, 819, 821, 823, 824, 825, 827, 828, 829, 831, 833, 834, 840, 841, 849, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 869, 877, 880, 881, 882, 883, 884, 886, 888, 889, 890, 893, 895, 898, 899, 905, 906, 911, 912, 915, 921, 925, 976, 984, 985, 997, 999, 1006, 1017, 1024, 1041, 1042, 1064, 1065, 1068, 1072, 1073, 1074, 1076, 1077, 1081, 1085, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1240, 1248, 1250, 1260, 1261, 1264, 1271, 1279, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1317, 1318, 1319, 1320, 1323, 1324, 1325, 1328, 1329, 1332, 1333, 1334, 1335, 1336, 1339], "calc_point": [0, 3, 8, 871, 872, 873, 874, 875, 876, 1335], "farm_result": [0, 2, 3, 8, 10, 840, 841, 849, 850, 869, 870, 881, 882, 890, 891, 1328, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "point": [0, 3, 8, 22, 24, 25, 32, 33, 34, 56, 66, 70, 73, 74, 81, 82, 84, 120, 129, 130, 134, 135, 136, 139, 142, 147, 149, 150, 151, 152, 153, 155, 173, 176, 177, 179, 180, 181, 183, 184, 194, 195, 255, 278, 372, 373, 376, 377, 378, 381, 445, 446, 449, 458, 470, 477, 485, 508, 515, 516, 520, 521, 522, 524, 525, 529, 533, 534, 538, 541, 544, 545, 549, 550, 552, 553, 554, 555, 558, 562, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 581, 582, 584, 586, 587, 699, 703, 704, 706, 709, 710, 711, 712, 715, 716, 718, 719, 721, 722, 724, 728, 729, 732, 733, 736, 737, 739, 743, 744, 747, 748, 749, 753, 754, 755, 759, 760, 761, 765, 766, 770, 771, 772, 789, 797, 798, 802, 803, 807, 809, 812, 813, 817, 818, 823, 824, 827, 828, 833, 834, 869, 870, 871, 872, 873, 884, 885, 886, 888, 889, 893, 894, 929, 932, 933, 934, 935, 936, 938, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 968, 972, 973, 974, 975, 1024, 1026, 1076, 1156, 1194, 1195, 1196, 1199, 1205, 1206, 1209, 1215, 1216, 1219, 1225, 1226, 1229, 1249, 1280, 1299, 1300, 1306, 1307, 1309, 1310, 1313, 1316, 1318, 1324, 1327, 1328, 1329, 1331, 1332, 1334, 1335, 1336, 1337, 1338], "var": [0, 3, 8, 13, 17, 22, 28, 32, 52, 56, 78, 80, 81, 91, 100, 105, 113, 114, 126, 127, 130, 135, 139, 147, 156, 165, 167, 169, 171, 173, 178, 182, 195, 316, 320, 390, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 516, 521, 525, 530, 534, 539, 542, 545, 550, 553, 556, 561, 564, 565, 568, 574, 581, 588, 592, 597, 603, 604, 609, 614, 616, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 678, 679, 681, 682, 684, 685, 687, 688, 691, 692, 694, 695, 698, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 811, 815, 816, 821, 825, 826, 831, 849, 854, 855, 858, 859, 860, 861, 862, 868, 869, 871, 872, 873, 874, 875, 876, 884, 886, 888, 889, 893, 976, 979, 997, 999, 1006, 1017, 1024, 1043, 1059, 1063, 1068, 1069, 1070, 1071, 1074, 1081, 1090, 1092, 1098, 1100, 1110, 1111, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1156, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1194, 1239, 1245, 1246, 1248, 1258, 1259, 1264, 1276, 1277, 1309], "none": [0, 1, 3, 8, 9, 13, 17, 22, 23, 24, 28, 32, 33, 37, 38, 39, 41, 42, 44, 46, 47, 48, 52, 56, 57, 61, 62, 66, 68, 70, 77, 78, 80, 81, 86, 91, 93, 100, 105, 113, 114, 119, 120, 127, 128, 130, 135, 139, 142, 147, 149, 151, 156, 157, 161, 162, 163, 164, 165, 167, 168, 169, 173, 174, 178, 182, 185, 186, 195, 228, 239, 320, 346, 356, 441, 443, 445, 446, 447, 448, 450, 455, 457, 460, 463, 466, 468, 469, 475, 476, 482, 484, 487, 490, 493, 497, 498, 505, 507, 508, 510, 512, 513, 514, 516, 521, 522, 525, 530, 531, 534, 539, 540, 542, 543, 545, 550, 551, 553, 556, 561, 564, 568, 570, 574, 581, 588, 592, 597, 603, 609, 610, 614, 621, 625, 630, 634, 637, 640, 641, 645, 647, 649, 652, 653, 658, 659, 664, 665, 670, 671, 676, 679, 682, 685, 688, 689, 692, 695, 699, 706, 711, 718, 719, 724, 725, 731, 734, 742, 745, 750, 751, 756, 762, 763, 767, 768, 794, 795, 799, 804, 810, 811, 815, 816, 821, 822, 825, 826, 831, 835, 836, 840, 841, 842, 845, 846, 847, 848, 849, 851, 856, 863, 864, 869, 870, 871, 872, 873, 874, 875, 876, 881, 882, 883, 884, 886, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 904, 927, 946, 948, 953, 955, 960, 962, 976, 977, 979, 980, 981, 997, 999, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1017, 1018, 1024, 1026, 1027, 1028, 1033, 1043, 1046, 1068, 1074, 1081, 1082, 1083, 1084, 1090, 1091, 1092, 1094, 1095, 1098, 1099, 1100, 1102, 1114, 1115, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1145, 1146, 1147, 1148, 1151, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1192, 1194, 1195, 1196, 1199, 1205, 1206, 1209, 1215, 1216, 1219, 1225, 1226, 1229, 1239, 1248, 1249, 1264, 1280, 1281, 1282, 1318, 1328, 1330, 1331, 1335, 1336, 1339], "vars_to_amb": [0, 3, 8, 32, 33], "given": [0, 3, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 125, 127, 135, 139, 147, 156, 161, 162, 165, 167, 169, 173, 176, 178, 182, 287, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 641, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 703, 706, 709, 711, 715, 718, 721, 724, 725, 728, 731, 734, 742, 745, 750, 751, 756, 762, 763, 767, 768, 773, 794, 795, 799, 804, 810, 815, 821, 825, 831, 849, 851, 856, 863, 868, 898, 904, 913, 916, 917, 922, 976, 984, 985, 997, 999, 1006, 1017, 1024, 1034, 1035, 1041, 1042, 1068, 1074, 1081, 1085, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1142, 1143, 1145, 1151, 1156, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1194, 1195, 1205, 1215, 1225, 1239, 1240, 1248, 1250, 1264, 1271, 1281, 1287, 1288, 1289, 1290, 1295, 1312, 1313, 1314, 1318, 1319, 1324, 1334], "set": [0, 1, 3, 8, 56, 57, 78, 91, 99, 161, 162, 167, 495, 497, 556, 614, 621, 842, 1313, 1324, 1326, 1327, 1333, 1334, 1337, 1338, 1339], "clear_mem": [0, 4, 8, 56, 60, 1336], "fals": [0, 2, 3, 4, 8, 13, 17, 22, 28, 32, 52, 56, 60, 70, 77, 78, 81, 91, 100, 101, 105, 113, 114, 119, 120, 127, 135, 139, 147, 149, 151, 156, 165, 167, 169, 173, 178, 182, 195, 205, 278, 320, 324, 441, 447, 448, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 565, 568, 570, 574, 581, 588, 592, 597, 603, 609, 614, 615, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 751, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 840, 841, 842, 849, 851, 857, 863, 871, 872, 873, 874, 875, 876, 881, 883, 886, 888, 889, 929, 930, 934, 936, 938, 940, 944, 946, 951, 953, 958, 960, 966, 968, 970, 974, 977, 1024, 1033, 1038, 1039, 1043, 1068, 1074, 1100, 1102, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1280, 1298, 1318, 1324, 1327, 1328, 1329, 1331, 1334, 1337, 1338], "print": [0, 8, 56, 67, 508, 512, 840, 842, 849, 869, 877, 879, 881, 884, 890, 893, 895, 976, 997, 999, 1006, 1014, 1017, 1022, 1081, 1090, 1092, 1098, 1281, 1286, 1327, 1328, 1329, 1330, 1331, 1333, 1335, 1336, 1337, 1338, 1339], "arg": [0, 8, 9, 56, 65, 67, 442, 443, 505, 507, 859, 1100, 1101, 1140, 1141, 1281, 1286, 1287, 1288, 1289, 1290, 1295, 1298, 1312, 1318], "vlim": [0, 8, 56, 67], "1": [0, 1, 8, 56, 67, 150, 151, 185, 187, 195, 206, 255, 274, 278, 320, 325, 366, 367, 368, 375, 441, 443, 444, 445, 446, 448, 495, 569, 570, 577, 584, 645, 646, 648, 653, 659, 664, 665, 671, 750, 756, 800, 835, 838, 840, 842, 849, 851, 852, 873, 876, 883, 897, 927, 984, 985, 1024, 1041, 1046, 1068, 1069, 1082, 1085, 1100, 1105, 1129, 1130, 1156, 1157, 1158, 1170, 1171, 1194, 1195, 1201, 1205, 1211, 1215, 1221, 1225, 1232, 1239, 1240, 1242, 1248, 1249, 1250, 1253, 1264, 1271, 1273, 1282, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1309, 1318, 1321, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "kwarg": [0, 8, 9, 10, 56, 65, 67, 127, 133, 169, 172, 195, 225, 320, 343, 442, 443, 505, 507, 513, 521, 530, 531, 539, 540, 542, 550, 588, 589, 593, 676, 679, 682, 685, 688, 692, 695, 835, 838, 840, 842, 847, 849, 856, 869, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 883, 884, 890, 892, 893, 895, 897, 906, 911, 912, 976, 977, 997, 998, 999, 1000, 1006, 1007, 1008, 1017, 1018, 1019, 1024, 1026, 1029, 1068, 1069, 1081, 1082, 1090, 1091, 1092, 1093, 1098, 1099, 1100, 1101, 1105, 1115, 1119, 1120, 1124, 1125, 1130, 1135, 1136, 1140, 1141, 1146, 1151, 1152, 1156, 1194, 1239, 1242, 1248, 1249, 1253, 1264, 1270, 1273, 1279, 1280, 1281, 1286, 1287, 1288, 1289, 1290, 1295, 1298, 1318], "function": [0, 8, 14, 19, 24, 30, 34, 53, 56, 67, 78, 79, 80, 84, 93, 102, 104, 105, 108, 129, 130, 136, 138, 139, 142, 151, 166, 175, 449, 455, 457, 458, 463, 470, 477, 482, 484, 485, 490, 501, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 558, 562, 566, 570, 588, 589, 590, 594, 599, 605, 611, 617, 623, 627, 632, 635, 638, 640, 643, 650, 654, 660, 666, 672, 701, 708, 714, 720, 726, 871, 872, 873, 874, 875, 876, 877, 880, 917, 920, 922, 924, 927, 976, 988, 995, 996, 997, 999, 1004, 1005, 1006, 1012, 1016, 1017, 1018, 1024, 1033, 1038, 1039, 1041, 1042, 1043, 1054, 1055, 1064, 1065, 1068, 1072, 1073, 1076, 1081, 1082, 1088, 1089, 1090, 1091, 1092, 1093, 1097, 1098, 1099, 1100, 1114, 1118, 1119, 1123, 1124, 1128, 1129, 1134, 1135, 1139, 1140, 1145, 1150, 1151, 1155, 1156, 1157, 1163, 1164, 1169, 1170, 1175, 1176, 1181, 1182, 1187, 1188, 1191, 1194, 1195, 1205, 1215, 1225, 1239, 1240, 1248, 1250, 1260, 1261, 1264, 1271, 1281, 1287, 1288, 1289, 1290, 1295, 1299, 1305, 1310, 1311, 1312, 1313, 1314, 1317, 1318, 1319, 1324, 1327, 1329, 1330, 1338], "base": [0, 8, 10, 13, 14, 17, 19, 22, 24, 28, 30, 32, 34, 37, 52, 53, 56, 67, 78, 79, 81, 82, 84, 91, 93, 94, 100, 102, 105, 108, 113, 114, 124, 127, 135, 136, 139, 142, 147, 156, 165, 166, 167, 169, 173, 175, 178, 182, 195, 257, 320, 441, 445, 446, 447, 449, 455, 458, 466, 468, 470, 475, 477, 482, 485, 493, 497, 498, 501, 513, 521, 530, 539, 542, 550, 556, 558, 561, 562, 564, 566, 568, 574, 581, 588, 590, 592, 594, 597, 599, 603, 605, 609, 611, 614, 617, 621, 623, 625, 627, 630, 632, 634, 635, 637, 638, 640, 643, 645, 647, 649, 650, 652, 654, 658, 660, 664, 666, 670, 672, 676, 679, 682, 685, 688, 692, 695, 699, 701, 706, 708, 711, 714, 718, 720, 724, 726, 731, 734, 742, 745, 750, 756, 757, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 877, 898, 915, 921, 925, 926, 929, 968, 1006, 1017, 1024, 1033, 1068, 1074, 1076, 1081, 1115, 1120, 1125, 1130, 1140, 1146, 1152, 1191, 1290, 1305, 1308, 1310, 1313, 1314, 1317, 1318, 1319, 1321, 1324, 1326, 1331, 1332, 1334, 1336, 1337, 1338, 1339], "verbos": [0, 1, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 37, 39, 41, 44, 46, 48, 50, 52, 54, 56, 57, 61, 67, 68, 78, 81, 85, 87, 91, 95, 96, 100, 105, 109, 110, 113, 114, 118, 121, 127, 131, 135, 139, 143, 144, 147, 156, 165, 167, 169, 173, 178, 182, 185, 187, 441, 443, 444, 445, 446, 447, 448, 451, 455, 459, 461, 463, 466, 468, 471, 475, 478, 482, 486, 488, 490, 493, 497, 498, 502, 503, 508, 511, 513, 517, 518, 521, 526, 527, 530, 535, 536, 539, 542, 546, 547, 550, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 592, 595, 597, 600, 603, 606, 607, 609, 612, 614, 618, 621, 625, 628, 630, 634, 637, 640, 645, 647, 649, 652, 655, 656, 658, 661, 662, 664, 667, 668, 670, 673, 674, 676, 679, 682, 685, 688, 692, 695, 699, 702, 705, 706, 711, 717, 718, 723, 724, 727, 730, 731, 734, 738, 740, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 808, 810, 815, 819, 821, 825, 829, 831, 835, 838, 849, 851, 852, 871, 872, 873, 874, 875, 876, 883, 976, 983, 984, 985, 986, 997, 999, 1003, 1006, 1017, 1024, 1027, 1028, 1033, 1034, 1035, 1041, 1042, 1043, 1046, 1068, 1069, 1074, 1077, 1081, 1085, 1086, 1090, 1092, 1098, 1100, 1105, 1114, 1119, 1124, 1129, 1133, 1135, 1140, 1142, 1143, 1145, 1149, 1151, 1157, 1161, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1201, 1205, 1211, 1215, 1221, 1225, 1232, 1239, 1240, 1242, 1248, 1250, 1253, 1264, 1271, 1273, 1281, 1282, 1286, 1297, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "chunk": [0, 1, 2, 3, 8, 14, 15, 19, 20, 24, 26, 30, 34, 35, 53, 54, 56, 57, 58, 70, 77, 78, 79, 84, 87, 93, 96, 102, 108, 110, 121, 131, 136, 142, 144, 166, 175, 449, 451, 458, 461, 470, 471, 477, 478, 485, 488, 501, 503, 518, 527, 536, 547, 558, 559, 562, 566, 578, 585, 590, 594, 595, 599, 600, 605, 607, 611, 612, 617, 618, 623, 627, 628, 632, 635, 638, 643, 650, 654, 656, 660, 662, 666, 668, 672, 674, 701, 705, 708, 714, 717, 720, 723, 726, 730, 740, 819, 829, 1076, 1077, 1324, 1328, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "d": [0, 8, 56, 58, 161, 162, 167, 168, 192, 193, 195, 274, 320, 410, 649, 750, 751, 840, 841, 976, 977, 999, 1000, 1114, 1115, 1156, 1194, 1195, 1196, 1199, 1205, 1206, 1209, 1215, 1216, 1219, 1225, 1226, 1229, 1299, 1300, 1318, 1320, 1329], "update_idata": [0, 8, 56, 68], "idata": [0, 4, 8, 15, 20, 26, 35, 54, 56, 60, 62, 63, 68, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077], "add": [0, 8, 13, 17, 22, 28, 32, 41, 43, 52, 56, 68, 70, 72, 78, 81, 83, 91, 97, 100, 105, 107, 111, 113, 114, 117, 123, 127, 132, 135, 139, 141, 145, 147, 155, 156, 161, 163, 165, 167, 169, 173, 178, 181, 182, 184, 185, 187, 190, 441, 442, 443, 444, 445, 446, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 519, 521, 528, 530, 537, 539, 542, 548, 550, 556, 561, 564, 568, 573, 574, 580, 581, 587, 588, 592, 597, 603, 609, 614, 616, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 741, 742, 745, 750, 755, 756, 761, 762, 766, 767, 772, 773, 794, 798, 799, 803, 804, 809, 810, 813, 815, 818, 821, 824, 825, 828, 831, 834, 835, 837, 842, 849, 851, 852, 871, 872, 873, 874, 875, 876, 898, 900, 901, 902, 903, 929, 930, 936, 938, 940, 946, 948, 953, 955, 960, 962, 968, 970, 976, 997, 999, 1006, 1008, 1017, 1019, 1024, 1027, 1028, 1029, 1068, 1074, 1081, 1090, 1092, 1098, 1100, 1102, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1312, 1329, 1330, 1333, 1334, 1335, 1336, 1337], "memori": [0, 1, 2, 3, 4, 8, 15, 20, 26, 35, 54, 56, 57, 60, 63, 68, 87, 96, 110, 121, 131, 144, 195, 245, 320, 447, 448, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077, 1156, 1194, 1324, 1337], "option": [0, 1, 3, 8, 9, 10, 23, 24, 33, 37, 38, 42, 47, 56, 57, 61, 62, 65, 66, 67, 68, 77, 79, 80, 82, 93, 104, 108, 119, 120, 127, 128, 130, 138, 142, 149, 151, 161, 162, 163, 164, 168, 174, 185, 191, 287, 441, 442, 443, 444, 445, 446, 447, 448, 455, 457, 463, 466, 469, 476, 482, 484, 490, 493, 495, 501, 507, 510, 512, 514, 516, 522, 525, 531, 534, 540, 543, 545, 551, 553, 570, 575, 582, 589, 593, 610, 626, 641, 646, 648, 652, 653, 658, 659, 664, 665, 670, 671, 689, 718, 719, 725, 751, 762, 763, 767, 768, 805, 810, 811, 815, 816, 822, 825, 826, 836, 838, 841, 842, 851, 856, 863, 864, 869, 870, 871, 872, 873, 874, 875, 876, 882, 883, 886, 888, 889, 892, 893, 895, 897, 898, 899, 911, 912, 930, 934, 940, 944, 948, 951, 955, 958, 962, 966, 970, 974, 977, 980, 981, 998, 1000, 1001, 1002, 1007, 1009, 1010, 1018, 1026, 1027, 1028, 1033, 1038, 1039, 1043, 1046, 1069, 1082, 1083, 1084, 1090, 1091, 1093, 1094, 1095, 1098, 1099, 1101, 1102, 1105, 1115, 1116, 1117, 1120, 1121, 1122, 1125, 1126, 1127, 1130, 1131, 1132, 1137, 1138, 1146, 1147, 1148, 1152, 1153, 1154, 1156, 1158, 1159, 1160, 1166, 1167, 1172, 1173, 1178, 1179, 1184, 1185, 1194, 1196, 1199, 1206, 1209, 1216, 1219, 1226, 1229, 1242, 1249, 1253, 1270, 1273, 1279, 1280, 1281, 1282, 1298, 1313, 1317, 1324, 1326, 1329, 1331, 1332, 1334, 1337, 1338], "updat": [0, 8, 56, 68, 127, 130, 184, 513, 516, 521, 525, 530, 534, 539, 542, 545, 550, 553, 597, 813, 818, 824, 828, 834, 1024, 1064, 1065, 1068, 1072, 1073, 1100, 1239, 1248, 1260, 1261, 1264, 1324, 1329, 1339], "return": [0, 8, 13, 17, 22, 28, 32, 52, 56, 68, 78, 81, 91, 100, 105, 113, 114, 116, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 195, 198, 199, 200, 204, 207, 208, 210, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 255, 278, 320, 322, 323, 326, 327, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 447, 455, 466, 468, 475, 482, 493, 497, 498, 500, 513, 521, 523, 530, 532, 539, 542, 550, 556, 561, 564, 568, 574, 576, 581, 583, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 642, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 713, 718, 724, 731, 734, 742, 745, 750, 752, 756, 758, 762, 764, 767, 769, 773, 794, 796, 799, 801, 804, 806, 810, 815, 821, 825, 831, 840, 859, 864, 871, 872, 873, 874, 875, 876, 884, 893, 929, 936, 938, 946, 953, 960, 968, 976, 997, 999, 1006, 1017, 1074, 1081, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1142, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1324, 1335], "cleanup": [0, 8, 56, 59], "after": [0, 2, 3, 8, 10, 56, 59, 82, 151, 182, 183, 441, 570, 597, 810, 812, 815, 817, 821, 823, 825, 827, 831, 833, 871, 872, 874, 875, 876, 1329, 1333], "properti": [0, 8, 12, 13, 17, 22, 28, 32, 52, 56, 63, 70, 74, 75, 76, 78, 81, 91, 100, 105, 113, 114, 122, 124, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 185, 188, 189, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 793, 794, 799, 804, 810, 815, 821, 825, 831, 835, 839, 976, 982, 987, 989, 990, 993, 994, 997, 999, 1006, 1011, 1013, 1015, 1017, 1020, 1021, 1023, 1024, 1030, 1036, 1037, 1040, 1047, 1050, 1051, 1054, 1055, 1056, 1057, 1058, 1062, 1068, 1074, 1081, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1281, 1288, 1290, 1294], "idata_mem": [0, 8, 56, 63], "current": [0, 8, 12, 39, 44, 48, 56, 63, 287, 1024, 1037, 1068, 1100, 1239, 1248, 1264, 1313, 1327, 1329, 1331, 1332, 1334, 1337, 1338], "update_n_turbin": [0, 8, 56, 69], "reset": [0, 8, 56, 69, 455, 463, 466, 482, 490, 493, 614, 620, 1331, 1333], "accord": [0, 8, 56, 69, 127, 130, 443, 513, 516, 521, 525, 530, 534, 539, 542, 545, 550, 553, 581, 582, 685, 906, 911, 912, 1330, 1334], "self": [0, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 69, 78, 81, 87, 91, 96, 100, 105, 110, 113, 114, 116, 120, 121, 127, 131, 135, 139, 144, 147, 156, 165, 167, 169, 173, 178, 182, 195, 197, 198, 199, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 500, 503, 513, 518, 521, 523, 527, 530, 532, 536, 539, 542, 547, 550, 556, 559, 561, 564, 568, 574, 575, 576, 578, 581, 583, 585, 588, 592, 595, 597, 600, 603, 607, 609, 612, 614, 618, 621, 625, 628, 630, 634, 637, 640, 642, 645, 647, 649, 652, 656, 658, 662, 664, 668, 670, 674, 676, 679, 682, 685, 688, 692, 695, 699, 705, 706, 711, 713, 717, 718, 723, 724, 730, 731, 734, 740, 742, 745, 750, 752, 756, 758, 762, 764, 767, 769, 773, 794, 796, 799, 801, 804, 806, 810, 815, 819, 821, 825, 829, 831, 847, 1049, 1053, 1074, 1077, 1107, 1109, 1135, 1136, 1140, 1141, 1191, 1192, 1199, 1209, 1219, 1229, 1234, 1236, 1255, 1257, 1288, 1290, 1291], "get_models_data": [0, 8, 56, 62], "creat": [0, 8, 13, 17, 22, 28, 32, 52, 56, 62, 66, 70, 73, 78, 81, 91, 100, 105, 113, 114, 126, 127, 129, 130, 134, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 195, 225, 320, 343, 447, 455, 466, 468, 475, 482, 493, 495, 497, 498, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 555, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 835, 838, 840, 842, 884, 888, 890, 893, 895, 1074, 1102, 1312, 1317, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "xarrai": [0, 2, 3, 8, 10, 13, 17, 22, 28, 32, 39, 44, 48, 52, 56, 62, 66, 70, 71, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 448, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 588, 592, 593, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 840, 841, 849, 850, 869, 870, 882, 885, 890, 891, 894, 1074, 1310, 1324, 1329, 1335], "from": [0, 8, 13, 15, 17, 20, 22, 23, 25, 26, 28, 32, 35, 52, 54, 56, 62, 70, 73, 78, 81, 82, 87, 91, 96, 100, 105, 110, 113, 114, 117, 119, 120, 121, 127, 128, 129, 131, 135, 139, 144, 147, 149, 152, 156, 165, 167, 169, 173, 174, 178, 182, 190, 191, 192, 193, 195, 200, 204, 206, 287, 320, 325, 398, 399, 423, 424, 439, 440, 443, 444, 447, 448, 451, 455, 457, 461, 466, 468, 471, 475, 478, 482, 484, 488, 493, 495, 497, 498, 503, 513, 514, 515, 518, 521, 522, 524, 527, 530, 531, 533, 536, 539, 540, 541, 542, 543, 544, 547, 550, 551, 552, 556, 557, 559, 561, 564, 568, 571, 574, 578, 581, 585, 588, 592, 593, 595, 597, 600, 603, 607, 609, 610, 612, 614, 618, 621, 625, 628, 630, 634, 637, 640, 645, 647, 649, 652, 656, 658, 662, 664, 668, 670, 674, 676, 679, 682, 685, 688, 692, 695, 699, 700, 705, 706, 711, 717, 718, 719, 723, 724, 725, 730, 731, 734, 740, 742, 745, 750, 751, 756, 762, 767, 773, 794, 799, 800, 804, 810, 815, 819, 821, 825, 829, 831, 835, 840, 841, 874, 875, 876, 880, 886, 888, 889, 893, 897, 898, 899, 900, 901, 926, 1024, 1027, 1028, 1046, 1059, 1068, 1074, 1077, 1100, 1156, 1194, 1239, 1248, 1264, 1280, 1301, 1302, 1303, 1304, 1311, 1312, 1313, 1317, 1318, 1320, 1321, 1324, 1326, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1339], "input": [0, 8, 56, 62, 79, 80, 104, 138, 169, 170, 171, 320, 366, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 588, 589, 592, 593, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 814, 820, 830, 1156, 1194, 1297, 1305, 1313, 1320, 1324, 1327, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "new_point_data": [0, 8, 56, 66], "states_indic": [0, 8, 56, 66], "contain": [0, 8, 56, 66, 70, 71, 73, 508, 898, 900, 901, 1043, 1280, 1310, 1311, 1312, 1313, 1314, 1318, 1328, 1329, 1330, 1332, 1333, 1335, 1337], "onli": [0, 8, 56, 66, 68, 174, 441, 521, 699, 742, 743, 745, 748, 750, 754, 756, 760, 762, 765, 767, 771, 799, 802, 804, 805, 807, 886, 888, 889, 927, 1033, 1156, 1194, 1324, 1326, 1327, 1330, 1335, 1336, 1337, 1339], "finalize_model": [0, 8, 56, 61], "call": [0, 8, 56, 61, 78, 80, 91, 104, 105, 138, 139, 597, 1024, 1033, 1064, 1065, 1068, 1072, 1073, 1100, 1156, 1194, 1195, 1205, 1215, 1225, 1239, 1248, 1260, 1261, 1264, 1310, 1313, 1324, 1326, 1332, 1333, 1335, 1336, 1339], "routin": [0, 8, 56, 61], "kept": [0, 3, 8, 56, 61], "new": [0, 8, 56, 65, 127, 133, 134, 169, 172, 184, 195, 206, 225, 278, 287, 320, 325, 343, 368, 513, 520, 521, 529, 530, 538, 539, 542, 549, 550, 555, 676, 679, 682, 685, 688, 692, 695, 813, 818, 824, 828, 834, 840, 849, 869, 877, 878, 881, 884, 890, 893, 895, 991, 992, 1024, 1031, 1032, 1068, 1100, 1195, 1197, 1198, 1205, 1207, 1208, 1215, 1217, 1218, 1225, 1227, 1228, 1239, 1248, 1264, 1324, 1326, 1329, 1330], "algo_typ": [0, 8, 56, 65], "run": [0, 1, 8, 13, 17, 22, 28, 32, 52, 56, 57, 65, 78, 81, 91, 93, 100, 101, 105, 113, 114, 117, 127, 133, 135, 139, 147, 156, 165, 167, 169, 170, 172, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 615, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 677, 679, 680, 682, 683, 685, 686, 688, 690, 692, 693, 695, 697, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 814, 815, 820, 821, 825, 830, 831, 840, 849, 869, 877, 878, 881, 884, 890, 893, 895, 1024, 1026, 1064, 1065, 1072, 1073, 1074, 1249, 1260, 1261, 1281, 1282, 1287, 1288, 1289, 1290, 1295, 1310, 1313, 1314, 1324, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338], "time": [0, 8, 56, 65, 127, 133, 169, 172, 448, 513, 521, 530, 539, 542, 550, 676, 679, 682, 685, 688, 692, 695, 840, 849, 863, 869, 877, 878, 881, 884, 890, 893, 895, 1074, 1156, 1194, 1314, 1324, 1326, 1327, 1328, 1331, 1332, 1333, 1336, 1337, 1338], "factori": [0, 8, 56, 65, 127, 133, 169, 172, 513, 521, 530, 539, 542, 550, 676, 679, 682, 685, 688, 692, 695, 840, 849, 869, 877, 878, 881, 884, 890, 893, 895], "__repr__": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 116, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 195, 233, 320, 350, 447, 455, 466, 468, 475, 482, 493, 497, 498, 500, 513, 521, 523, 530, 532, 539, 542, 550, 556, 561, 564, 568, 574, 576, 581, 583, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 642, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 713, 718, 724, 731, 734, 742, 745, 750, 752, 756, 758, 762, 764, 767, 769, 773, 794, 796, 799, 801, 804, 806, 810, 815, 821, 825, 831, 1074], "repr": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 116, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 195, 233, 320, 350, 447, 455, 466, 468, 475, 482, 493, 497, 498, 500, 513, 521, 523, 530, 532, 539, 542, 550, 556, 561, 564, 568, 574, 576, 581, 583, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 642, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 713, 718, 724, 731, 734, 742, 745, 750, 752, 756, 758, 762, 764, 767, 769, 773, 794, 796, 799, 801, 804, 806, 810, 815, 821, 825, 831, 1074], "data_to_stor": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 117, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074], "algo": [0, 8, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 39, 41, 44, 46, 48, 50, 52, 53, 54, 55, 56, 70, 77, 78, 79, 80, 81, 84, 85, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 123, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 151, 152, 154, 156, 158, 160, 165, 166, 167, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 447, 449, 451, 452, 454, 455, 458, 459, 461, 462, 463, 465, 466, 468, 470, 471, 472, 474, 475, 477, 478, 479, 481, 482, 485, 486, 488, 489, 490, 492, 493, 496, 497, 498, 501, 502, 503, 504, 508, 511, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 571, 574, 578, 581, 585, 588, 590, 591, 592, 594, 595, 596, 597, 599, 600, 601, 603, 605, 606, 607, 608, 609, 611, 612, 613, 614, 617, 618, 619, 621, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 679, 682, 685, 688, 692, 695, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 753, 754, 755, 756, 759, 760, 761, 762, 765, 766, 767, 770, 771, 772, 773, 789, 794, 797, 798, 799, 802, 803, 804, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 821, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 849, 851, 863, 869, 870, 1024, 1026, 1046, 1064, 1065, 1068, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1100, 1239, 1248, 1249, 1260, 1261, 1264, 1270, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "mdata": [0, 8, 13, 14, 15, 17, 19, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 52, 53, 54, 56, 78, 81, 84, 87, 91, 93, 96, 100, 102, 105, 108, 110, 113, 114, 117, 119, 120, 121, 125, 127, 129, 130, 131, 134, 135, 136, 139, 142, 144, 147, 149, 151, 152, 156, 165, 166, 167, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 447, 449, 451, 455, 458, 461, 466, 468, 470, 471, 475, 477, 478, 482, 485, 488, 493, 497, 498, 501, 503, 513, 515, 516, 518, 520, 521, 524, 525, 527, 529, 530, 533, 534, 536, 538, 539, 541, 542, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 561, 562, 564, 566, 568, 570, 571, 574, 578, 581, 585, 588, 590, 592, 594, 595, 597, 599, 600, 603, 605, 607, 609, 611, 612, 614, 617, 618, 621, 623, 625, 627, 628, 630, 632, 634, 635, 637, 638, 640, 643, 645, 647, 649, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 679, 682, 685, 688, 692, 695, 699, 701, 703, 704, 705, 706, 708, 709, 710, 711, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 728, 729, 730, 731, 732, 733, 734, 736, 737, 739, 740, 742, 743, 744, 745, 747, 748, 749, 750, 753, 754, 755, 756, 759, 760, 761, 762, 765, 766, 767, 770, 771, 772, 773, 789, 790, 791, 792, 794, 797, 798, 799, 802, 803, 804, 807, 809, 810, 812, 813, 815, 817, 818, 819, 821, 823, 824, 825, 827, 828, 829, 831, 833, 834, 1074, 1076, 1077], "local": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 117, 119, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 751, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074, 1313, 1325, 1326, 1327, 1329, 1332, 1337], "store": [0, 3, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 71, 73, 78, 81, 87, 91, 92, 96, 100, 105, 110, 113, 114, 117, 119, 121, 127, 131, 135, 139, 144, 147, 149, 156, 165, 167, 169, 173, 178, 182, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 503, 513, 518, 521, 527, 530, 536, 539, 542, 547, 550, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 592, 595, 597, 600, 603, 607, 609, 612, 614, 618, 621, 625, 628, 630, 634, 637, 640, 645, 647, 649, 652, 656, 658, 662, 664, 668, 670, 674, 676, 679, 682, 685, 688, 692, 695, 699, 705, 706, 711, 717, 718, 723, 724, 730, 731, 734, 740, 742, 745, 750, 756, 762, 767, 773, 789, 794, 799, 804, 810, 815, 819, 821, 825, 829, 831, 1074, 1077, 1156, 1194, 1330], "intend": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 117, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 849, 864, 1074], "iter": [0, 8, 9, 10, 11, 12, 13, 17, 22, 28, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 78, 81, 91, 100, 105, 113, 114, 117, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074, 1306, 1324, 1336], "from_data_or_stor": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 119, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074], "ret_dim": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 119, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074], "safe": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 119, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074], "keep": [0, 1, 8, 13, 17, 22, 28, 32, 52, 56, 57, 78, 81, 91, 97, 100, 105, 111, 113, 114, 123, 127, 132, 135, 139, 145, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 519, 521, 528, 530, 537, 539, 542, 548, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 741, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 999, 1074, 1314, 1326], "sub": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 97, 100, 105, 111, 113, 114, 123, 127, 132, 135, 139, 145, 147, 156, 165, 167, 169, 173, 178, 182, 287, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 519, 521, 528, 530, 537, 539, 542, 548, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 741, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1069, 1074, 1102, 1314, 1324, 1329], "keep_model": [0, 1, 4, 8, 13, 17, 22, 28, 32, 52, 56, 57, 60, 61, 78, 81, 91, 97, 100, 105, 111, 113, 114, 123, 127, 132, 135, 139, 145, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 519, 521, 528, 530, 537, 539, 542, 548, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 741, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1046, 1074], "model_id": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 124, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074], "uniqu": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 124, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074], "id": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 124, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 441, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074], "type": [0, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 46, 47, 52, 54, 56, 78, 81, 87, 91, 96, 100, 105, 110, 113, 114, 121, 124, 127, 131, 135, 139, 144, 147, 156, 161, 162, 165, 167, 169, 173, 178, 182, 195, 206, 225, 287, 320, 325, 343, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 503, 508, 510, 512, 513, 518, 521, 527, 530, 536, 539, 542, 547, 550, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 592, 595, 597, 600, 603, 607, 609, 612, 614, 618, 621, 625, 628, 630, 634, 637, 640, 645, 647, 649, 652, 656, 658, 662, 664, 668, 670, 674, 676, 679, 682, 685, 688, 692, 695, 699, 705, 706, 711, 717, 718, 723, 724, 730, 731, 734, 740, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 819, 821, 825, 829, 831, 895, 897, 1074, 1077, 1102, 1135, 1136, 1140, 1141, 1156, 1191, 1192, 1194, 1288, 1290, 1291, 1309, 1310, 1313, 1317, 1324, 1327, 1328, 1329, 1330, 1332, 1333, 1335, 1337, 1339], "v": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 126, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074, 1156, 1194, 1301, 1302], "variabl": [0, 2, 3, 8, 10, 13, 14, 16, 17, 19, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 36, 46, 47, 52, 53, 55, 56, 78, 79, 80, 81, 84, 88, 91, 93, 98, 100, 102, 103, 104, 105, 108, 112, 113, 114, 120, 126, 127, 134, 135, 136, 137, 138, 139, 142, 146, 147, 148, 149, 151, 154, 156, 158, 165, 166, 167, 169, 171, 173, 174, 178, 179, 180, 181, 182, 183, 184, 390, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 447, 448, 449, 452, 455, 457, 458, 462, 466, 468, 470, 472, 475, 476, 477, 479, 482, 484, 485, 489, 493, 495, 497, 498, 501, 504, 513, 520, 521, 529, 530, 538, 539, 542, 549, 550, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 574, 575, 581, 582, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 603, 604, 605, 608, 609, 610, 611, 613, 614, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 663, 664, 665, 666, 669, 670, 671, 672, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 689, 691, 692, 694, 695, 696, 698, 699, 706, 707, 711, 718, 724, 725, 731, 732, 733, 734, 735, 736, 737, 739, 742, 744, 745, 746, 747, 749, 750, 751, 753, 755, 756, 757, 759, 761, 762, 763, 766, 767, 768, 770, 772, 773, 794, 795, 797, 798, 799, 800, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 842, 849, 854, 855, 858, 860, 861, 862, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 880, 881, 883, 884, 886, 887, 888, 889, 890, 892, 893, 895, 897, 976, 979, 980, 981, 984, 985, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1016, 1017, 1024, 1027, 1028, 1031, 1032, 1033, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053, 1057, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1078, 1081, 1082, 1083, 1084, 1085, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1098, 1099, 1100, 1102, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1145, 1147, 1148, 1151, 1153, 1154, 1156, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1194, 1195, 1197, 1198, 1200, 1202, 1203, 1204, 1205, 1207, 1208, 1210, 1212, 1213, 1214, 1215, 1217, 1218, 1220, 1222, 1223, 1224, 1225, 1227, 1228, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1305, 1308, 1309, 1312, 1313, 1314, 1315, 1324, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "flag": [0, 2, 3, 8, 10, 13, 17, 22, 28, 32, 39, 44, 48, 52, 56, 78, 81, 91, 93, 100, 101, 105, 113, 114, 122, 127, 135, 139, 147, 156, 165, 167, 169, 173, 174, 178, 182, 195, 273, 320, 444, 447, 448, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 575, 581, 582, 588, 592, 597, 603, 609, 614, 615, 621, 622, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 751, 756, 762, 767, 773, 794, 799, 804, 805, 810, 815, 821, 825, 831, 840, 841, 842, 851, 857, 863, 864, 871, 872, 873, 874, 875, 876, 886, 888, 889, 904, 934, 944, 951, 958, 966, 974, 976, 987, 997, 999, 1006, 1017, 1024, 1030, 1033, 1038, 1039, 1043, 1050, 1068, 1074, 1081, 1087, 1090, 1092, 1096, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1162, 1164, 1168, 1170, 1174, 1176, 1180, 1182, 1186, 1188, 1190, 1191, 1193, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1281, 1282, 1288, 1290, 1294, 1326, 1329], "get_data": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 791, 794, 799, 804, 810, 815, 821, 825, 831, 884, 886, 893, 1074], "target": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 794, 799, 804, 810, 815, 821, 825, 831, 1074, 1334], "lookup": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 593, 597, 598, 603, 609, 614, 621, 625, 630, 631, 634, 637, 640, 645, 647, 649, 652, 653, 658, 659, 664, 665, 670, 671, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 794, 799, 804, 810, 815, 821, 825, 831, 863, 1074, 1313, 1324], "smfp": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 794, 799, 804, 810, 815, 821, 825, 831, 1074], "getter": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 120, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 794, 799, 804, 810, 815, 821, 825, 831, 1074], "entri": [0, 4, 8, 13, 15, 17, 20, 22, 26, 28, 32, 35, 52, 54, 56, 60, 62, 70, 72, 78, 81, 87, 91, 96, 100, 105, 110, 113, 114, 120, 121, 127, 131, 135, 139, 144, 147, 156, 161, 165, 167, 169, 173, 178, 182, 447, 451, 455, 461, 466, 468, 471, 475, 478, 482, 488, 493, 497, 498, 503, 513, 518, 521, 527, 530, 536, 539, 542, 547, 550, 556, 559, 561, 564, 568, 574, 578, 581, 585, 588, 592, 595, 597, 600, 603, 607, 609, 612, 614, 618, 621, 625, 628, 630, 634, 637, 640, 645, 647, 649, 652, 656, 658, 662, 664, 668, 670, 674, 676, 679, 682, 685, 688, 692, 695, 699, 705, 706, 711, 717, 718, 723, 724, 730, 731, 734, 740, 742, 745, 750, 756, 762, 767, 773, 791, 794, 799, 804, 810, 815, 819, 821, 825, 829, 831, 880, 912, 1074, 1077, 1156, 1194, 1312, 1324, 1327, 1334], "reduce_st": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 125, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 849, 866, 1074, 1337], "sel_stat": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 125, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074], "obj": [0, 8, 13, 17, 22, 28, 32, 52, 56, 78, 81, 91, 100, 105, 113, 114, 125, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 195, 204, 320, 447, 455, 466, 468, 475, 482, 493, 497, 498, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1038, 1039, 1041, 1042, 1074, 1240, 1250, 1271], "modifi": [0, 8, 13, 16, 17, 21, 22, 25, 27, 28, 31, 32, 36, 52, 55, 56, 78, 81, 88, 91, 98, 100, 103, 105, 112, 113, 114, 125, 127, 129, 130, 135, 137, 139, 146, 147, 151, 154, 156, 158, 165, 167, 169, 173, 178, 179, 180, 182, 447, 452, 455, 462, 466, 468, 472, 475, 479, 482, 489, 493, 497, 498, 504, 513, 515, 516, 521, 524, 525, 530, 533, 534, 539, 541, 542, 544, 545, 550, 552, 553, 556, 560, 561, 563, 564, 567, 568, 570, 574, 581, 588, 591, 592, 596, 597, 601, 603, 608, 609, 613, 614, 619, 621, 624, 625, 629, 630, 633, 634, 636, 637, 639, 640, 644, 645, 647, 649, 651, 652, 657, 658, 663, 664, 669, 670, 675, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 737, 739, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074, 1078, 1310], "select": [0, 8, 13, 17, 22, 28, 32, 46, 52, 56, 65, 78, 81, 91, 93, 100, 105, 113, 114, 125, 127, 128, 133, 135, 139, 147, 156, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 178, 182, 184, 380, 385, 447, 448, 455, 457, 463, 466, 468, 475, 482, 484, 490, 493, 497, 498, 512, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 589, 590, 592, 594, 597, 599, 603, 605, 609, 611, 614, 617, 621, 623, 625, 627, 630, 632, 634, 635, 637, 638, 640, 643, 645, 647, 649, 650, 652, 654, 658, 660, 664, 666, 670, 672, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 732, 733, 734, 736, 742, 743, 744, 745, 747, 749, 750, 753, 756, 759, 762, 765, 767, 770, 773, 794, 797, 799, 802, 804, 807, 810, 813, 815, 818, 821, 824, 825, 828, 831, 834, 878, 890, 892, 976, 977, 979, 980, 981, 997, 999, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1033, 1043, 1056, 1062, 1068, 1074, 1081, 1083, 1084, 1090, 1092, 1094, 1095, 1098, 1100, 1102, 1116, 1117, 1121, 1122, 1126, 1127, 1131, 1132, 1137, 1138, 1147, 1148, 1153, 1154, 1159, 1160, 1166, 1167, 1172, 1173, 1178, 1179, 1184, 1185, 1239, 1248, 1264, 1305, 1308, 1309, 1310, 1311, 1313, 1315, 1324, 1328, 1329, 1330, 1331, 1332, 1335, 1337], "subset": [0, 8, 13, 17, 22, 28, 32, 52, 56, 70, 71, 73, 78, 81, 91, 100, 105, 113, 114, 125, 127, 135, 139, 147, 156, 165, 167, 169, 173, 178, 182, 447, 448, 455, 457, 463, 466, 468, 475, 482, 484, 490, 493, 497, 498, 508, 512, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 1074, 1310, 1313, 1324, 1330], "centr": [1, 150, 429, 568, 569, 577, 584, 603, 711, 712, 718, 719, 745, 747, 750, 753, 756, 759, 767, 770, 946, 947, 960, 961, 1299, 1300, 1313, 1318, 1320, 1324, 1327, 1329, 1330, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "rotor_wd": [1, 1329, 1330, 1331, 1333, 1334, 1337, 1338], "auto": [1, 1328, 1329, 1330, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "basic_ctrl": [1, 1330], "1000": [1, 56, 57, 375, 597, 598, 863, 1309, 1328, 1329, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "dbook": [1, 56, 57, 443, 1327], "modelbook": [1, 56, 57, 496, 508, 509, 510, 511, 512, 893, 895, 896, 1311, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "book": [1, 56, 57, 161, 162, 191, 443, 496, 734, 735, 746, 751, 757, 763, 768, 795, 800, 805, 893, 895, 896, 897, 898, 899, 1323, 1325, 1327, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338], "windfarm": [1, 56, 57, 185, 186, 187, 188, 189, 441, 442, 443, 444, 445, 446, 496, 840, 841, 976, 999, 1011, 1020, 1040, 1311, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "wind": [1, 46, 47, 56, 57, 91, 94, 156, 161, 162, 185, 186, 187, 188, 318, 386, 387, 397, 398, 399, 403, 404, 422, 423, 424, 430, 432, 441, 442, 443, 444, 445, 446, 455, 468, 469, 475, 476, 496, 497, 597, 598, 630, 631, 646, 648, 652, 653, 658, 659, 664, 665, 670, 671, 676, 679, 682, 685, 692, 699, 706, 707, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 821, 840, 841, 843, 844, 857, 871, 872, 873, 874, 875, 876, 884, 886, 888, 889, 893, 897, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 925, 928, 976, 997, 999, 1006, 1011, 1017, 1020, 1024, 1040, 1068, 1081, 1090, 1092, 1098, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1301, 1302, 1303, 1304, 1305, 1309, 1311, 1312, 1313, 1314, 1315, 1318, 1319, 1320, 1323, 1324, 1325, 1328, 1329, 1330, 1332, 1333, 1335, 1336, 1337, 1339], "str": [1, 2, 3, 5, 11, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 42, 46, 47, 53, 55, 56, 57, 65, 70, 71, 72, 73, 79, 80, 84, 88, 91, 93, 98, 99, 102, 103, 104, 108, 112, 114, 117, 119, 120, 126, 130, 133, 134, 136, 137, 138, 142, 146, 147, 148, 149, 151, 154, 158, 161, 162, 166, 167, 168, 171, 172, 174, 179, 180, 181, 183, 184, 185, 186, 189, 192, 193, 195, 246, 287, 320, 362, 375, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 455, 457, 458, 462, 470, 472, 475, 476, 477, 479, 482, 484, 485, 489, 495, 496, 501, 504, 505, 507, 508, 510, 512, 513, 514, 516, 520, 525, 529, 534, 538, 545, 549, 553, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 570, 575, 582, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 605, 608, 609, 610, 611, 613, 614, 616, 617, 619, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 638, 639, 640, 641, 643, 644, 646, 648, 650, 651, 652, 653, 654, 657, 658, 659, 660, 663, 664, 665, 666, 669, 670, 671, 672, 675, 678, 681, 684, 687, 689, 691, 694, 698, 706, 707, 724, 725, 732, 733, 734, 735, 736, 737, 739, 744, 746, 747, 749, 750, 751, 753, 755, 756, 757, 759, 761, 762, 763, 766, 767, 768, 770, 772, 791, 794, 795, 797, 798, 800, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 842, 845, 846, 847, 848, 854, 855, 858, 860, 861, 862, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 883, 886, 887, 888, 889, 892, 897, 898, 900, 901, 902, 903, 904, 905, 906, 911, 912, 930, 940, 948, 955, 962, 970, 977, 978, 982, 991, 992, 993, 994, 998, 999, 1000, 1007, 1018, 1026, 1027, 1028, 1043, 1046, 1059, 1063, 1066, 1067, 1069, 1076, 1078, 1081, 1082, 1090, 1091, 1093, 1098, 1099, 1102, 1112, 1113, 1115, 1120, 1125, 1130, 1146, 1152, 1156, 1158, 1165, 1171, 1177, 1183, 1189, 1194, 1199, 1204, 1209, 1214, 1219, 1224, 1229, 1237, 1238, 1247, 1249, 1262, 1263, 1270, 1278, 1279, 1280, 1281, 1282, 1297, 1298, 1309, 1324, 1330], "Will": 1, "look": [1, 734, 735, 746, 751, 757, 763, 768, 795, 800, 805, 863, 1327, 1329, 1332, 1334, 1338], "up": [1, 734, 735, 746, 751, 757, 763, 768, 795, 800, 805, 863], "dict": [1, 2, 3, 9, 10, 14, 15, 19, 20, 22, 23, 24, 25, 26, 30, 34, 35, 40, 45, 46, 47, 49, 53, 54, 56, 57, 62, 63, 65, 67, 68, 70, 71, 73, 79, 80, 84, 87, 91, 92, 93, 96, 99, 102, 104, 108, 110, 121, 130, 131, 134, 136, 138, 142, 144, 149, 151, 166, 170, 174, 179, 180, 181, 192, 193, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 455, 457, 458, 461, 470, 471, 475, 476, 477, 478, 482, 484, 485, 488, 495, 496, 501, 503, 505, 506, 507, 508, 513, 514, 516, 518, 520, 525, 527, 529, 531, 534, 536, 538, 540, 545, 547, 549, 553, 555, 556, 557, 558, 559, 562, 566, 570, 578, 585, 589, 590, 592, 593, 594, 595, 599, 600, 603, 604, 605, 607, 610, 611, 612, 617, 618, 623, 626, 627, 628, 632, 635, 638, 643, 646, 648, 650, 652, 653, 654, 656, 658, 659, 660, 662, 664, 665, 666, 668, 670, 671, 672, 674, 677, 680, 683, 686, 688, 689, 690, 693, 697, 705, 711, 712, 717, 718, 719, 723, 730, 732, 733, 734, 735, 736, 737, 739, 740, 744, 746, 747, 749, 751, 753, 755, 757, 759, 761, 763, 766, 768, 770, 772, 793, 795, 797, 798, 800, 803, 804, 805, 809, 810, 811, 815, 816, 819, 821, 822, 825, 826, 829, 838, 842, 844, 854, 855, 856, 865, 866, 867, 871, 872, 873, 874, 875, 876, 880, 883, 888, 889, 892, 897, 898, 906, 911, 912, 930, 940, 948, 955, 962, 970, 977, 991, 992, 998, 1000, 1007, 1018, 1024, 1026, 1027, 1028, 1069, 1070, 1071, 1076, 1077, 1081, 1082, 1090, 1091, 1093, 1098, 1099, 1101, 1105, 1110, 1111, 1115, 1120, 1125, 1130, 1146, 1152, 1156, 1194, 1199, 1209, 1219, 1229, 1242, 1245, 1246, 1249, 1253, 1258, 1259, 1270, 1273, 1276, 1277, 1279, 1280, 1281, 1282, 1287, 1289, 1295, 1297, 1298, 1310, 1318, 1328, 1329, 1334, 1336], "choic": [1, 56, 57, 161, 168, 396, 419, 831, 832, 842, 865, 866, 867, 1102, 1281, 1282, 1320, 1332, 1335, 1336, 1337, 1338, 1339], "parallel": [1, 13, 17, 22, 28, 32, 52, 56, 57, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 1074, 1156, 1194, 1282, 1324, 1325, 1329, 1332, 1337, 1338], "dask": [1, 2, 3, 56, 57, 78, 1281, 1282, 1318, 1324, 1325, 1337], "e": [1, 56, 57, 78, 120, 125, 495, 556, 557, 597, 598, 634, 637, 880, 912, 1024, 1054, 1055, 1068, 1100, 1156, 1194, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1280, 1298, 1311, 1313, 1324, 1325, 1326, 1328, 1329, 1330, 1331, 1332, 1339], "g": [1, 56, 57, 120, 125, 597, 598, 880, 912, 1156, 1194, 1280, 1298, 1311, 1313, 1324, 1325, 1328, 1331, 1335, 1339], "databook": [1, 56, 57, 190, 191, 443, 898, 899, 900, 901, 902, 903, 904, 905, 1311, 1318], "default": [1, 22, 23, 24, 50, 56, 57, 62, 86, 157, 174, 195, 287, 320, 443, 450, 455, 460, 482, 487, 510, 514, 521, 522, 530, 531, 540, 542, 543, 551, 593, 641, 725, 773, 788, 795, 845, 846, 847, 848, 851, 863, 884, 887, 893, 906, 1043, 1046, 1156, 1194, 1280, 1288, 1308, 1309, 1318, 1324, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "do": [1, 56, 57, 120, 1156, 1194, 1313, 1329, 1331, 1336, 1337, 1338], "them": [1, 56, 57, 927, 1156, 1194, 1328, 1338], "level": [1, 15, 20, 26, 35, 39, 44, 48, 54, 56, 57, 61, 68, 85, 87, 95, 96, 109, 110, 113, 118, 121, 131, 143, 144, 441, 443, 444, 445, 446, 448, 451, 459, 461, 463, 471, 478, 486, 488, 490, 502, 503, 511, 517, 518, 526, 527, 535, 536, 546, 547, 559, 578, 581, 582, 585, 595, 600, 606, 607, 612, 618, 628, 655, 656, 661, 662, 667, 668, 673, 674, 702, 705, 717, 723, 727, 730, 738, 740, 808, 819, 829, 838, 849, 851, 852, 856, 871, 872, 873, 874, 875, 876, 883, 983, 984, 985, 986, 1003, 1027, 1028, 1033, 1034, 1035, 1041, 1042, 1043, 1046, 1069, 1077, 1085, 1086, 1100, 1102, 1105, 1133, 1142, 1143, 1149, 1161, 1201, 1211, 1221, 1232, 1240, 1242, 1250, 1253, 1271, 1273, 1281, 1282, 1297, 1305, 1310, 1311, 1313, 1324], "0": [1, 13, 15, 17, 20, 22, 26, 28, 32, 35, 37, 39, 41, 44, 46, 48, 50, 52, 54, 56, 57, 61, 68, 78, 81, 85, 87, 91, 95, 96, 100, 105, 109, 110, 113, 114, 118, 121, 127, 131, 135, 139, 143, 144, 147, 150, 156, 165, 167, 169, 173, 178, 182, 187, 195, 200, 255, 278, 320, 370, 375, 441, 443, 444, 445, 446, 447, 451, 455, 456, 459, 461, 463, 466, 467, 468, 471, 475, 478, 482, 483, 486, 488, 490, 493, 494, 495, 497, 498, 502, 503, 508, 511, 513, 517, 518, 521, 526, 527, 530, 535, 536, 539, 542, 546, 547, 550, 556, 559, 561, 564, 568, 569, 574, 577, 578, 581, 584, 585, 588, 592, 595, 597, 598, 600, 603, 606, 607, 609, 610, 612, 614, 618, 621, 625, 628, 630, 634, 637, 640, 645, 647, 649, 652, 653, 655, 656, 658, 659, 661, 662, 664, 665, 667, 668, 670, 671, 673, 674, 676, 679, 682, 685, 688, 692, 695, 699, 702, 705, 706, 711, 712, 717, 718, 719, 723, 724, 725, 727, 730, 731, 734, 738, 740, 742, 745, 746, 750, 751, 756, 757, 762, 763, 767, 768, 773, 788, 794, 795, 799, 800, 804, 805, 808, 810, 815, 819, 821, 825, 829, 831, 838, 842, 851, 852, 869, 871, 872, 873, 874, 875, 876, 883, 897, 913, 915, 917, 921, 922, 925, 927, 976, 983, 984, 985, 986, 997, 999, 1003, 1006, 1017, 1024, 1027, 1028, 1033, 1034, 1035, 1041, 1042, 1043, 1046, 1068, 1069, 1074, 1077, 1081, 1082, 1085, 1086, 1090, 1092, 1098, 1100, 1105, 1114, 1119, 1124, 1129, 1133, 1135, 1140, 1142, 1143, 1145, 1149, 1151, 1156, 1157, 1161, 1164, 1170, 1171, 1176, 1182, 1188, 1191, 1194, 1195, 1201, 1205, 1211, 1215, 1221, 1225, 1232, 1239, 1240, 1242, 1248, 1250, 1253, 1264, 1271, 1273, 1281, 1282, 1297, 1302, 1303, 1309, 1318, 1319, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "mean": [1, 3, 56, 57, 95, 109, 143, 182, 195, 283, 320, 842, 849, 854, 857, 858, 861, 865, 866, 867, 874, 886, 888, 889, 1081, 1082, 1090, 1091, 1099, 1156, 1170, 1171, 1194, 1314, 1316, 1324, 1329, 1331, 1337, 1338], "silent": [1, 15, 20, 26, 35, 39, 44, 48, 54, 56, 57, 61, 68, 87, 95, 96, 109, 110, 118, 121, 131, 143, 144, 187, 441, 443, 444, 445, 446, 451, 461, 463, 471, 478, 488, 490, 503, 511, 518, 527, 536, 547, 559, 578, 585, 595, 600, 606, 607, 612, 618, 628, 656, 662, 668, 674, 702, 705, 717, 723, 727, 730, 738, 740, 808, 819, 829, 838, 851, 852, 883, 983, 984, 985, 986, 1003, 1027, 1028, 1033, 1034, 1035, 1041, 1042, 1043, 1046, 1069, 1077, 1085, 1086, 1105, 1133, 1142, 1143, 1149, 1161, 1201, 1211, 1221, 1232, 1240, 1242, 1250, 1253, 1271, 1273, 1281, 1282, 1297], "chunked_result": [2, 3], "kei": [2, 3, 14, 19, 24, 25, 30, 34, 46, 47, 53, 63, 70, 71, 73, 79, 84, 93, 102, 108, 120, 130, 134, 136, 142, 149, 151, 166, 179, 180, 181, 195, 213, 320, 375, 449, 458, 470, 475, 476, 477, 482, 484, 485, 495, 501, 505, 506, 508, 509, 513, 514, 516, 520, 525, 529, 534, 538, 545, 549, 553, 555, 558, 562, 566, 570, 590, 594, 599, 603, 604, 605, 611, 617, 623, 627, 632, 635, 638, 643, 650, 654, 660, 666, 672, 732, 733, 734, 735, 736, 737, 739, 744, 746, 747, 749, 751, 753, 755, 757, 759, 761, 763, 766, 768, 770, 772, 773, 791, 795, 797, 798, 800, 803, 805, 809, 810, 811, 816, 821, 822, 826, 865, 866, 867, 880, 883, 898, 905, 906, 910, 991, 992, 1027, 1028, 1069, 1070, 1071, 1076, 1081, 1102, 1110, 1111, 1245, 1246, 1258, 1259, 1276, 1277, 1280, 1309, 1330], "valu": [2, 3, 14, 19, 24, 25, 30, 34, 46, 47, 53, 63, 79, 84, 93, 102, 108, 130, 134, 136, 142, 149, 151, 166, 173, 176, 179, 180, 181, 195, 198, 199, 207, 208, 210, 212, 214, 218, 219, 220, 221, 222, 223, 226, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 273, 278, 287, 320, 322, 323, 326, 327, 329, 330, 331, 336, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 375, 414, 447, 448, 449, 455, 457, 458, 468, 469, 470, 475, 476, 477, 482, 484, 485, 495, 501, 508, 513, 514, 516, 520, 525, 529, 534, 538, 545, 549, 553, 555, 558, 562, 564, 565, 566, 570, 590, 593, 594, 597, 599, 603, 604, 605, 611, 617, 623, 627, 632, 635, 638, 641, 643, 650, 654, 660, 664, 666, 670, 672, 685, 688, 689, 695, 696, 699, 703, 706, 709, 711, 715, 718, 719, 721, 724, 725, 728, 731, 732, 733, 734, 735, 736, 737, 739, 743, 744, 746, 747, 748, 749, 751, 753, 754, 755, 757, 759, 760, 761, 762, 763, 765, 766, 768, 770, 771, 772, 773, 788, 789, 792, 795, 797, 798, 799, 800, 802, 803, 804, 805, 807, 809, 810, 811, 816, 821, 822, 826, 851, 856, 863, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 883, 886, 888, 889, 897, 898, 917, 920, 922, 924, 976, 979, 980, 981, 984, 985, 991, 992, 997, 999, 1001, 1002, 1006, 1009, 1010, 1017, 1024, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1064, 1065, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1081, 1083, 1084, 1085, 1090, 1092, 1094, 1095, 1098, 1100, 1102, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1142, 1143, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1195, 1197, 1198, 1200, 1202, 1203, 1205, 1207, 1208, 1210, 1212, 1213, 1215, 1217, 1218, 1220, 1222, 1223, 1225, 1227, 1228, 1230, 1231, 1233, 1234, 1235, 1236, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1248, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1264, 1271, 1272, 1274, 1275, 1276, 1277, 1280, 1287, 1289, 1295, 1309, 1313, 1320, 1324, 1328, 1333, 1334, 1339], "bool": [2, 3, 4, 10, 39, 44, 48, 60, 77, 91, 93, 100, 101, 119, 120, 122, 149, 151, 163, 164, 166, 174, 184, 195, 278, 320, 368, 441, 444, 447, 448, 495, 564, 565, 570, 574, 575, 581, 582, 590, 594, 599, 605, 611, 615, 617, 621, 622, 623, 627, 632, 635, 638, 643, 650, 654, 660, 666, 672, 732, 733, 736, 743, 744, 747, 749, 750, 751, 753, 759, 765, 770, 792, 797, 802, 804, 805, 807, 813, 818, 824, 828, 834, 840, 841, 842, 851, 857, 863, 864, 871, 872, 873, 874, 875, 876, 883, 886, 888, 889, 904, 930, 934, 940, 944, 948, 951, 955, 958, 962, 966, 970, 974, 976, 977, 987, 995, 996, 1005, 1016, 1030, 1033, 1038, 1039, 1043, 1081, 1082, 1087, 1089, 1091, 1092, 1093, 1096, 1099, 1102, 1162, 1168, 1174, 1180, 1186, 1190, 1193, 1195, 1196, 1199, 1209, 1219, 1229, 1280, 1281, 1282, 1294, 1298], "switch": [2, 3, 149, 871, 872, 873, 874, 875, 876, 1081, 1082, 1091, 1099, 1324, 1334], "forc": [2, 3, 287, 630, 1313, 1326], "load": [2, 3, 15, 20, 26, 35, 54, 87, 96, 110, 121, 131, 144, 447, 448, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077, 1324, 1328], "instead": [2, 3, 77, 119, 441, 447, 448, 455, 457, 482, 484, 750, 751, 762, 883, 886, 888, 889, 1024, 1033, 1068, 1100, 1156, 1194, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1324, 1326, 1331, 1336, 1338, 1339], "result": [2, 3, 10, 14, 19, 24, 28, 30, 32, 34, 37, 39, 41, 44, 46, 48, 50, 53, 79, 80, 84, 93, 102, 104, 108, 130, 136, 138, 142, 147, 149, 151, 166, 170, 174, 180, 182, 183, 194, 287, 449, 458, 470, 477, 485, 501, 516, 521, 525, 534, 545, 553, 558, 562, 564, 565, 566, 568, 570, 574, 581, 590, 594, 599, 605, 611, 617, 623, 627, 632, 635, 638, 643, 650, 654, 660, 666, 672, 677, 680, 683, 686, 690, 693, 697, 699, 739, 745, 747, 750, 753, 756, 759, 767, 770, 810, 812, 815, 817, 823, 825, 827, 833, 840, 841, 842, 849, 850, 851, 852, 854, 855, 856, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 881, 882, 884, 885, 886, 888, 889, 890, 891, 894, 980, 981, 984, 985, 1001, 1002, 1009, 1010, 1024, 1031, 1032, 1034, 1035, 1038, 1039, 1041, 1042, 1060, 1061, 1068, 1076, 1083, 1084, 1085, 1094, 1095, 1100, 1116, 1117, 1121, 1122, 1126, 1127, 1131, 1132, 1137, 1138, 1142, 1143, 1147, 1148, 1153, 1154, 1156, 1159, 1160, 1166, 1167, 1172, 1173, 1178, 1179, 1184, 1185, 1194, 1195, 1197, 1198, 1205, 1207, 1208, 1215, 1217, 1218, 1225, 1227, 1228, 1239, 1240, 1248, 1250, 1264, 1271, 1287, 1289, 1295, 1306, 1307, 1309, 1313, 1317, 1320, 1324, 1329, 1331, 1332, 1333, 1335, 1336, 1337, 1338, 1339], "dataset": [2, 3, 10, 39, 44, 48, 62, 66, 78, 80, 104, 138, 447, 448, 840, 841, 849, 850, 869, 870, 882, 885, 890, 891, 894, 1310, 1324, 1329, 1335], "have": [2, 3, 10, 151, 570, 588, 589, 1156, 1194, 1300, 1313, 1324, 1326, 1329, 1331, 1332, 1333, 1334, 1335, 1338], "dimens": [2, 3, 10, 66, 70, 71, 72, 73, 80, 119, 120, 125, 151, 195, 286, 301, 306, 320, 381, 383, 570, 849, 865, 866, 867, 1303, 1309, 1313, 1327, 1329, 1335, 1339], "point_model": [3, 81, 82, 508, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 1330], "persist_mdata": 3, "persist_pdata": 3, "numpi": [3, 14, 19, 24, 25, 30, 34, 53, 66, 70, 79, 84, 90, 91, 93, 102, 108, 119, 120, 129, 130, 136, 142, 149, 150, 151, 152, 155, 160, 161, 162, 163, 164, 166, 170, 174, 175, 176, 177, 179, 180, 181, 183, 184, 195, 206, 211, 320, 325, 445, 446, 449, 454, 458, 465, 470, 474, 477, 481, 485, 492, 501, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 554, 558, 562, 566, 569, 570, 571, 573, 577, 580, 584, 587, 588, 589, 590, 594, 599, 605, 611, 616, 617, 623, 627, 632, 635, 638, 643, 650, 654, 660, 666, 672, 677, 680, 683, 686, 688, 689, 690, 693, 697, 701, 703, 704, 708, 709, 710, 714, 715, 716, 720, 721, 722, 726, 728, 729, 732, 733, 736, 737, 739, 743, 744, 747, 748, 749, 753, 754, 755, 759, 760, 761, 765, 766, 770, 771, 772, 789, 791, 792, 797, 798, 802, 803, 807, 809, 812, 813, 817, 818, 823, 824, 827, 828, 833, 834, 843, 893, 927, 928, 932, 933, 934, 935, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 972, 973, 974, 975, 979, 995, 996, 1005, 1016, 1024, 1026, 1033, 1036, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1060, 1061, 1070, 1071, 1076, 1080, 1089, 1102, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1156, 1194, 1199, 1200, 1202, 1203, 1209, 1210, 1212, 1213, 1219, 1220, 1222, 1223, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1241, 1243, 1244, 1245, 1246, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1272, 1274, 1275, 1276, 1277, 1299, 1300, 1301, 1302, 1303, 1304, 1309, 1328, 1329, 1333, 1335, 1336, 1339], "ndarrai": [3, 14, 19, 24, 25, 30, 34, 53, 66, 72, 73, 79, 84, 90, 91, 93, 102, 108, 119, 120, 129, 130, 136, 142, 149, 150, 151, 152, 155, 160, 161, 162, 163, 164, 166, 170, 174, 175, 176, 177, 179, 180, 181, 183, 184, 196, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 445, 446, 449, 454, 458, 465, 470, 474, 477, 481, 485, 492, 501, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 554, 558, 562, 566, 569, 570, 571, 573, 577, 580, 584, 587, 588, 589, 590, 594, 599, 605, 611, 616, 617, 623, 627, 632, 635, 638, 643, 650, 654, 660, 666, 672, 677, 680, 683, 686, 688, 689, 690, 693, 697, 701, 703, 704, 708, 709, 710, 714, 715, 716, 720, 721, 722, 726, 728, 729, 732, 733, 736, 737, 739, 743, 744, 747, 748, 749, 753, 754, 755, 759, 760, 761, 765, 766, 770, 771, 772, 789, 791, 792, 797, 798, 802, 803, 807, 809, 812, 813, 817, 818, 823, 824, 827, 828, 833, 834, 843, 868, 893, 927, 928, 932, 933, 934, 935, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 972, 973, 974, 975, 979, 995, 996, 1005, 1016, 1024, 1026, 1033, 1036, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1060, 1061, 1070, 1071, 1076, 1080, 1089, 1102, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1156, 1194, 1199, 1200, 1202, 1203, 1209, 1210, 1212, 1213, 1219, 1220, 1222, 1223, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1241, 1243, 1244, 1245, 1246, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1272, 1274, 1275, 1276, 1277, 1280, 1299, 1300, 1301, 1302, 1303, 1304, 1339], "interest": [3, 22, 23, 897, 1307, 1313, 1332, 1335, 1336], "shape": [3, 14, 19, 24, 25, 30, 34, 53, 66, 73, 84, 90, 91, 93, 102, 108, 120, 129, 130, 136, 142, 149, 150, 151, 152, 155, 160, 161, 162, 163, 164, 166, 170, 174, 175, 176, 177, 179, 180, 181, 183, 184, 195, 301, 320, 445, 446, 449, 454, 458, 465, 470, 474, 477, 481, 485, 492, 501, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 554, 558, 562, 566, 569, 570, 571, 573, 577, 580, 584, 587, 588, 589, 590, 594, 599, 605, 611, 616, 617, 623, 627, 632, 635, 638, 643, 650, 654, 660, 666, 672, 677, 680, 683, 686, 688, 690, 693, 697, 701, 703, 704, 708, 709, 710, 714, 715, 716, 720, 721, 722, 726, 728, 729, 732, 733, 736, 737, 739, 743, 744, 747, 748, 749, 753, 754, 755, 759, 760, 761, 765, 766, 770, 771, 772, 789, 792, 797, 798, 802, 803, 807, 809, 812, 813, 817, 818, 823, 824, 827, 828, 833, 834, 843, 893, 927, 928, 932, 933, 934, 935, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 954, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 972, 973, 974, 975, 979, 980, 981, 984, 985, 995, 996, 1001, 1002, 1005, 1009, 1010, 1016, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1064, 1065, 1070, 1071, 1072, 1073, 1076, 1080, 1083, 1084, 1085, 1087, 1089, 1094, 1095, 1096, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1116, 1117, 1121, 1122, 1126, 1127, 1131, 1132, 1137, 1138, 1142, 1143, 1144, 1147, 1148, 1153, 1154, 1159, 1160, 1162, 1166, 1167, 1168, 1172, 1173, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1190, 1193, 1197, 1198, 1199, 1200, 1202, 1203, 1207, 1208, 1209, 1210, 1212, 1213, 1217, 1218, 1219, 1220, 1222, 1223, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1240, 1241, 1243, 1244, 1245, 1246, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1271, 1272, 1274, 1275, 1276, 1277, 1279, 1280, 1297, 1300, 1301, 1302, 1303, 1304, 1318, 1324, 1335, 1339], "n_point": [3, 24, 25, 34, 66, 70, 73, 74, 84, 130, 136, 142, 150, 174, 176, 177, 179, 180, 181, 183, 184, 449, 458, 470, 477, 485, 516, 525, 534, 545, 553, 554, 558, 562, 566, 569, 577, 584, 703, 704, 709, 710, 715, 716, 721, 722, 728, 729, 732, 733, 736, 737, 739, 743, 744, 747, 748, 749, 753, 754, 755, 759, 760, 761, 765, 766, 770, 771, 772, 789, 792, 797, 798, 802, 803, 807, 809, 812, 813, 817, 818, 823, 824, 827, 828, 833, 834, 934, 935, 944, 945, 951, 952, 954, 958, 959, 966, 967, 974, 975, 1024, 1026, 1076, 1199, 1209, 1219, 1229, 1280, 1335], "3": [3, 66, 73, 149, 150, 152, 176, 177, 179, 278, 554, 561, 569, 571, 577, 584, 703, 704, 709, 710, 715, 716, 721, 722, 728, 729, 737, 843, 893, 927, 1024, 1026, 1156, 1194, 1313, 1318, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "should": [3, 14, 15, 19, 20, 24, 26, 30, 34, 35, 53, 54, 79, 84, 87, 93, 96, 102, 108, 110, 121, 131, 136, 142, 144, 166, 175, 447, 448, 449, 451, 458, 461, 470, 471, 477, 478, 485, 488, 501, 503, 513, 518, 527, 536, 547, 558, 559, 562, 566, 578, 585, 590, 594, 595, 599, 600, 605, 607, 611, 612, 617, 618, 623, 627, 628, 632, 635, 638, 643, 650, 654, 656, 660, 662, 666, 668, 672, 674, 701, 705, 708, 714, 717, 720, 723, 726, 730, 740, 819, 821, 829, 1076, 1077, 1156, 1194, 1300, 1326, 1328, 1329, 1333, 1334, 1337, 1338, 1339], "output": [3, 14, 16, 19, 21, 24, 27, 30, 31, 32, 33, 34, 36, 53, 55, 79, 80, 84, 88, 93, 98, 102, 103, 104, 108, 112, 120, 136, 137, 138, 142, 146, 154, 158, 166, 187, 447, 448, 449, 452, 455, 457, 458, 462, 470, 472, 475, 476, 477, 479, 482, 484, 485, 489, 501, 504, 558, 560, 562, 563, 566, 567, 588, 589, 590, 591, 592, 593, 594, 596, 599, 601, 605, 608, 611, 613, 617, 619, 623, 624, 627, 629, 632, 633, 635, 636, 638, 639, 643, 644, 650, 651, 654, 657, 660, 663, 666, 669, 672, 675, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 1076, 1078, 1156, 1194, 1297, 1305, 1324, 1327, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "which": [3, 13, 16, 17, 21, 22, 25, 27, 28, 31, 32, 36, 52, 55, 56, 81, 88, 91, 98, 100, 103, 105, 112, 113, 130, 135, 137, 139, 146, 147, 154, 156, 158, 165, 167, 173, 179, 180, 181, 183, 184, 447, 452, 455, 457, 462, 466, 468, 472, 475, 479, 482, 489, 493, 497, 498, 504, 516, 525, 534, 545, 553, 556, 560, 561, 563, 564, 567, 568, 574, 581, 588, 591, 592, 596, 597, 601, 603, 608, 609, 610, 613, 614, 619, 621, 624, 625, 626, 629, 630, 633, 634, 636, 637, 639, 640, 644, 645, 647, 649, 651, 652, 653, 657, 658, 659, 663, 664, 669, 670, 671, 675, 699, 700, 724, 725, 732, 733, 734, 736, 737, 739, 743, 744, 747, 749, 753, 755, 759, 761, 765, 766, 770, 772, 797, 798, 802, 803, 807, 809, 810, 812, 813, 814, 815, 817, 818, 820, 823, 824, 825, 827, 828, 830, 833, 834, 842, 845, 846, 847, 848, 864, 874, 875, 876, 893, 1033, 1043, 1074, 1078, 1081, 1082, 1091, 1099, 1102, 1156, 1194, 1301, 1304, 1310, 1313, 1321, 1325, 1328, 1329, 1332, 1335, 1336, 1337, 1338, 1339], "pointdatamodel": [3, 22, 32, 82, 83, 135, 136, 137, 138, 139, 140, 141, 156, 508, 556, 561, 564, 1307, 1310, 1313], "addit": [3, 65, 80, 104, 138, 174, 441, 442, 447, 448, 475, 476, 496, 531, 540, 589, 593, 646, 648, 653, 659, 665, 671, 688, 689, 804, 805, 883, 892, 897, 977, 998, 1000, 1007, 1018, 1024, 1026, 1069, 1082, 1090, 1091, 1093, 1098, 1099, 1105, 1242, 1249, 1253, 1270, 1273, 1279, 1280, 1297, 1324, 1334, 1337, 1338], "execut": [3, 14, 19, 24, 30, 34, 53, 79, 82, 84, 93, 102, 108, 136, 142, 166, 175, 449, 458, 470, 477, 485, 501, 558, 562, 566, 590, 594, 599, 605, 611, 617, 623, 627, 632, 635, 638, 643, 650, 654, 660, 666, 672, 701, 708, 714, 720, 726, 1076, 1281, 1288, 1313, 1318, 1326], "persist_fdata": 3, "point_result": [3, 1335], "clear": [4, 60, 1332], "includ": [4, 15, 20, 24, 26, 35, 54, 60, 81, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 895, 900, 1077, 1317, 1324, 1326, 1327, 1329, 1338, 1339], "max_it": [8, 9], "maxim": [8, 9, 416, 574, 575, 597, 711, 712, 718, 719, 725, 746, 751, 757, 762, 763, 768, 773, 788, 795, 799, 800, 804, 805, 897, 929, 932, 936, 938, 942, 946, 949, 953, 956, 960, 964, 968, 972, 1017, 1024, 1047, 1048, 1049, 1050, 1068, 1081, 1082, 1087, 1090, 1091, 1092, 1096, 1098, 1099, 1100, 1106, 1107, 1124, 1125, 1157, 1162, 1164, 1168, 1170, 1174, 1176, 1180, 1182, 1186, 1188, 1190, 1191, 1193, 1195, 1202, 1205, 1212, 1215, 1216, 1222, 1225, 1226, 1233, 1234, 1239, 1243, 1248, 1249, 1254, 1255, 1264, 1274, 1313, 1314, 1316, 1320, 1324, 1329, 1333], "conv_crit": [8, 9], "convcrit": [8, 9, 37, 38, 39, 40, 41, 42, 43, 46, 1308], "converg": [8, 9, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 50, 1306, 1308, 1324, 1336], "criteria": [8, 9, 37, 38, 39, 41, 42, 44, 46, 47, 48, 50, 1308], "tupl": [9, 65, 67, 70, 71, 72, 73, 79, 80, 104, 119, 138, 195, 301, 306, 320, 442, 443, 495, 507, 513, 514, 743, 765, 802, 807, 842, 864, 868, 871, 872, 873, 874, 875, 876, 892, 897, 1101, 1287, 1289, 1295, 1298], "argument": [9, 10, 67, 80, 104, 138, 496, 507, 589, 838, 842, 849, 868, 892, 897, 1101, 1156, 1194, 1199, 1209, 1219, 1229, 1281, 1282, 1287, 1289, 1295, 1298, 1324, 1327, 1333, 1337, 1338], "keyword": [9, 67, 1101, 1287, 1289, 1295, 1298], "calcord": [13, 14, 15, 16, 1307], "farmdatamodel": [13, 17, 28, 52, 91, 100, 101, 102, 103, 104, 105, 106, 107, 113, 147, 165, 1307, 1308, 1310], "thi": [13, 14, 15, 17, 19, 20, 22, 24, 26, 28, 30, 32, 34, 35, 52, 53, 54, 79, 80, 84, 87, 93, 96, 100, 101, 102, 104, 108, 110, 121, 130, 131, 136, 138, 142, 144, 149, 151, 166, 175, 178, 179, 190, 449, 451, 458, 461, 470, 471, 477, 478, 485, 488, 501, 503, 513, 516, 518, 525, 527, 534, 536, 545, 547, 553, 558, 559, 562, 564, 566, 570, 578, 585, 590, 594, 595, 597, 599, 600, 605, 607, 611, 612, 615, 617, 618, 623, 627, 628, 632, 635, 638, 643, 650, 654, 656, 660, 662, 666, 668, 672, 674, 685, 699, 701, 705, 708, 714, 717, 720, 723, 725, 726, 730, 731, 734, 737, 740, 742, 745, 746, 750, 751, 756, 757, 762, 763, 767, 768, 773, 788, 794, 795, 799, 800, 804, 805, 819, 821, 829, 849, 871, 872, 873, 874, 875, 876, 877, 906, 927, 946, 953, 960, 976, 977, 1043, 1064, 1065, 1072, 1073, 1076, 1077, 1102, 1156, 1194, 1195, 1205, 1215, 1225, 1248, 1260, 1261, 1307, 1308, 1311, 1312, 1313, 1314, 1318, 1324, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "via": [13, 17, 22, 28, 32, 52, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 441, 442, 447, 448, 455, 457, 463, 466, 468, 475, 482, 484, 490, 493, 497, 498, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 840, 849, 869, 877, 880, 881, 884, 890, 893, 895, 906, 1033, 1043, 1074, 1281, 1307, 1311, 1312, 1314, 1318, 1324, 1325, 1329, 1332, 1333, 1337, 1339], "output_farm_var": [13, 16, 17, 21, 28, 31, 52, 55, 91, 98, 100, 103, 105, 112, 113, 147, 154, 165, 167, 497, 498, 504, 568, 574, 581, 588, 591, 592, 596, 597, 601, 603, 608, 609, 613, 614, 619, 621, 624, 625, 629, 630, 633, 634, 636, 637, 639, 640, 644, 645, 647, 649, 651, 652, 657, 658, 663, 664, 669, 670, 675], "being": [13, 16, 17, 21, 22, 25, 27, 28, 31, 32, 36, 52, 55, 81, 88, 91, 98, 100, 103, 105, 112, 113, 135, 137, 139, 146, 147, 154, 156, 158, 165, 167, 179, 180, 447, 452, 455, 462, 466, 468, 472, 475, 479, 482, 489, 493, 497, 498, 504, 556, 560, 561, 563, 564, 567, 568, 574, 581, 588, 591, 592, 596, 597, 601, 603, 608, 609, 613, 614, 619, 621, 624, 625, 629, 630, 633, 634, 636, 637, 639, 640, 644, 645, 647, 649, 651, 652, 657, 658, 663, 664, 669, 670, 675, 737, 739, 1043, 1074, 1078, 1156, 1194], "fdata": [13, 14, 17, 19, 22, 24, 25, 28, 30, 32, 34, 52, 53, 81, 84, 91, 93, 100, 102, 105, 108, 113, 117, 119, 120, 125, 127, 129, 130, 134, 135, 136, 139, 142, 147, 149, 151, 152, 156, 165, 166, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 447, 449, 455, 458, 466, 468, 470, 475, 477, 482, 485, 493, 497, 498, 501, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 554, 555, 556, 558, 561, 562, 564, 566, 568, 570, 571, 574, 581, 588, 590, 592, 594, 597, 599, 603, 605, 609, 611, 614, 617, 621, 623, 625, 627, 630, 632, 634, 635, 637, 638, 640, 643, 645, 647, 649, 650, 652, 654, 658, 660, 664, 666, 670, 672, 699, 701, 703, 704, 706, 708, 709, 710, 711, 714, 715, 716, 718, 720, 721, 722, 724, 726, 728, 729, 731, 732, 733, 734, 736, 737, 739, 742, 743, 744, 745, 747, 748, 749, 750, 753, 754, 755, 756, 759, 760, 761, 762, 765, 766, 767, 770, 771, 772, 773, 789, 794, 797, 798, 799, 802, 803, 804, 807, 809, 810, 812, 813, 815, 817, 818, 821, 823, 824, 825, 827, 828, 831, 833, 834, 1074, 1076], "main": [13, 14, 17, 19, 22, 24, 28, 30, 32, 34, 52, 53, 78, 79, 81, 84, 91, 93, 100, 102, 105, 108, 113, 135, 136, 139, 142, 156, 165, 166, 167, 447, 449, 455, 458, 466, 468, 470, 475, 477, 482, 485, 493, 497, 498, 501, 556, 558, 561, 562, 564, 566, 588, 590, 592, 594, 597, 599, 603, 605, 609, 611, 614, 617, 621, 623, 625, 627, 630, 632, 634, 635, 637, 638, 640, 643, 645, 647, 649, 650, 652, 654, 658, 660, 664, 666, 670, 672, 1074, 1076, 1326, 1327], "pre_rotor": [13, 52, 91, 93, 100, 101, 113, 165, 497, 614, 615, 634, 637, 1069, 1102], "run_calcul": [13, 17, 22, 28, 32, 52, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 1074], "out_var": [13, 17, 22, 28, 32, 52, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 588, 589, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 1074], "calc_par": [13, 17, 22, 28, 32, 52, 80, 81, 91, 99, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 1074], "start": [13, 17, 22, 28, 32, 52, 78, 80, 81, 82, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 191, 195, 267, 320, 441, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 699, 700, 724, 725, 886, 888, 889, 898, 899, 1074, 1324, 1327, 1333, 1335, 1339], "": [13, 17, 22, 28, 32, 52, 62, 70, 71, 78, 80, 81, 91, 100, 104, 105, 113, 120, 135, 138, 139, 147, 156, 165, 167, 195, 287, 320, 397, 398, 399, 404, 422, 423, 424, 432, 447, 448, 455, 466, 468, 475, 482, 493, 497, 498, 530, 531, 540, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 868, 871, 872, 873, 874, 875, 876, 927, 1026, 1033, 1043, 1074, 1249, 1270, 1320, 1324, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "apply_ufunc": [13, 17, 22, 28, 32, 52, 70, 71, 78, 80, 81, 91, 100, 104, 105, 113, 135, 138, 139, 147, 156, 165, 167, 447, 455, 466, 468, 475, 482, 493, 497, 498, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 1074], "singl": [14, 19, 24, 30, 34, 53, 70, 79, 84, 93, 102, 108, 136, 142, 166, 175, 446, 449, 458, 470, 475, 477, 485, 501, 558, 562, 566, 568, 590, 594, 599, 605, 611, 617, 623, 627, 632, 635, 638, 643, 650, 654, 660, 666, 672, 701, 708, 714, 720, 726, 886, 888, 889, 976, 980, 997, 999, 1001, 1006, 1009, 1017, 1024, 1038, 1068, 1076, 1081, 1083, 1090, 1092, 1094, 1098, 1100, 1114, 1116, 1119, 1121, 1124, 1126, 1129, 1131, 1135, 1137, 1140, 1145, 1147, 1151, 1153, 1157, 1159, 1164, 1166, 1170, 1172, 1176, 1178, 1182, 1184, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1306, 1307, 1312, 1323, 1324, 1325, 1327, 1331, 1332, 1336], "comput": [14, 19, 24, 30, 34, 53, 79, 84, 93, 102, 108, 127, 136, 142, 166, 175, 182, 320, 366, 449, 458, 470, 477, 485, 501, 558, 562, 566, 590, 594, 599, 605, 611, 617, 623, 627, 632, 635, 638, 643, 649, 650, 654, 660, 666, 672, 701, 708, 714, 720, 724, 726, 794, 893, 1076, 1156, 1194, 1313, 1324, 1332, 1336, 1339], "arrai": [14, 15, 19, 20, 24, 26, 30, 34, 35, 53, 54, 79, 84, 87, 93, 96, 102, 108, 110, 120, 121, 131, 136, 142, 144, 161, 162, 166, 175, 195, 196, 200, 201, 202, 203, 204, 211, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 449, 451, 458, 461, 470, 471, 477, 478, 485, 488, 501, 503, 518, 527, 536, 547, 558, 559, 562, 566, 578, 585, 588, 589, 590, 594, 595, 599, 600, 605, 607, 611, 612, 617, 618, 623, 627, 628, 632, 635, 638, 643, 650, 654, 656, 660, 662, 666, 668, 672, 674, 701, 705, 708, 714, 717, 720, 723, 726, 730, 740, 819, 829, 868, 927, 928, 979, 980, 981, 984, 985, 1001, 1002, 1009, 1010, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1041, 1042, 1043, 1064, 1065, 1072, 1073, 1076, 1077, 1083, 1084, 1085, 1087, 1094, 1095, 1096, 1116, 1117, 1121, 1122, 1126, 1127, 1131, 1132, 1137, 1138, 1142, 1143, 1144, 1147, 1148, 1153, 1154, 1156, 1159, 1160, 1162, 1166, 1167, 1168, 1172, 1173, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1190, 1193, 1194, 1197, 1198, 1199, 1207, 1208, 1209, 1217, 1218, 1219, 1227, 1228, 1229, 1240, 1250, 1260, 1261, 1271, 1280, 1301, 1302, 1303, 1304, 1328, 1329, 1336, 1339], "n_turbin": [14, 19, 30, 53, 70, 76, 90, 91, 93, 102, 108, 149, 151, 152, 160, 166, 175, 185, 188, 446, 454, 465, 474, 481, 492, 501, 570, 571, 588, 589, 590, 594, 599, 605, 611, 616, 617, 623, 627, 632, 635, 638, 643, 650, 654, 660, 666, 672, 701, 708, 714, 720, 726, 843, 1080, 1114, 1115, 1145, 1146, 1195, 1196, 1205, 1206, 1215, 1216, 1329, 1331, 1333, 1334, 1335], "requir": [15, 20, 26, 35, 46, 54, 56, 77, 80, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 513, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077, 1308, 1325, 1327, 1328, 1329, 1330, 1332, 1337, 1339], "file": [15, 20, 26, 35, 54, 87, 96, 110, 121, 131, 144, 190, 192, 193, 441, 442, 443, 444, 447, 448, 451, 455, 457, 461, 471, 478, 482, 484, 488, 496, 503, 510, 518, 527, 536, 547, 556, 557, 559, 578, 585, 593, 595, 600, 607, 609, 610, 612, 618, 625, 626, 628, 645, 646, 647, 648, 652, 653, 656, 658, 659, 662, 664, 665, 668, 670, 671, 674, 705, 717, 723, 730, 740, 756, 819, 829, 840, 845, 846, 847, 848, 849, 869, 877, 880, 881, 883, 884, 889, 890, 893, 895, 898, 900, 901, 902, 903, 904, 906, 911, 912, 1077, 1279, 1280, 1297, 1311, 1312, 1313, 1317, 1318, 1324, 1325, 1326, 1328, 1329, 1331, 1334, 1335, 1337, 1338], "part": [15, 20, 26, 35, 54, 87, 96, 110, 121, 131, 144, 195, 277, 293, 320, 451, 461, 471, 478, 488, 503, 512, 518, 521, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077, 1327, 1329, 1331, 1332, 1334], "dictionari": [15, 20, 26, 35, 54, 68, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 505, 507, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 773, 793, 819, 829, 880, 912, 1077, 1318], "under": [15, 20, 26, 35, 54, 87, 91, 92, 96, 105, 110, 121, 131, 139, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077, 1321, 1324, 1325, 1327, 1328, 1330, 1333, 1339], "reason": [15, 20, 26, 35, 54, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077], "dure": [15, 20, 26, 35, 54, 70, 71, 80, 87, 96, 110, 121, 131, 144, 447, 448, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077, 1324, 1329, 1330, 1336, 1337], "ha": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 122, 131, 144, 451, 461, 471, 478, 488, 503, 512, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 987, 1077, 1248, 1302, 1303, 1306, 1308, 1324, 1325, 1328, 1331, 1333, 1334, 1336, 1337], "exactli": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 195, 255, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077], "two": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 445, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 625, 628, 647, 656, 662, 664, 668, 670, 674, 705, 717, 723, 730, 740, 819, 829, 927, 1077, 1156, 1194, 1299, 1300, 1313, 1318, 1324, 1328, 1329, 1332, 1333, 1334, 1337, 1339], "data_var": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077], "name_str": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077], "dim_tupl": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077], "data_ndarrai": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077], "coord": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077, 1156, 1194], "dim_name_str": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077], "dim_arrai": [15, 20, 26, 35, 54, 62, 87, 96, 110, 121, 131, 144, 451, 461, 471, 478, 488, 503, 518, 527, 536, 547, 559, 578, 585, 595, 600, 607, 612, 618, 628, 656, 662, 668, 674, 705, 717, 723, 730, 740, 819, 829, 1077], "output_var": [16, 21, 27, 31, 36, 55, 88, 98, 103, 112, 137, 146, 154, 158, 447, 448, 452, 455, 457, 462, 466, 472, 479, 482, 484, 489, 493, 504, 556, 557, 560, 563, 567, 591, 592, 593, 596, 601, 608, 613, 619, 624, 625, 626, 629, 633, 636, 639, 644, 651, 657, 663, 669, 675, 1078, 1327, 1328, 1329, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "farmwakescalcul": [17, 18, 19, 20, 21, 52, 53, 54, 55, 1307, 1308], "effect": [17, 22, 52, 127, 147, 149, 397, 398, 399, 422, 423, 424, 542, 568, 574, 581, 1307, 1308, 1313, 1315, 1316, 1320, 1332, 1333, 1334, 1338, 1339], "pointwakescalcul": [22, 23, 24, 25, 26, 27, 1307], "point_var": [22, 23, 32, 33], "emodel": [22, 23], "pointdatamodellist": [22, 23, 81, 139, 140, 141, 142, 143, 144, 145, 146, 1310], "extra": [22, 23, 871, 872, 873, 874, 875, 876, 1156, 1194], "emodels_cpar": [22, 23], "paramet": [22, 78, 91, 105, 139, 413, 420, 421, 447, 455, 482, 495, 497, 498, 513, 640, 652, 658, 664, 670, 688, 711, 718, 724, 750, 756, 762, 767, 773, 793, 794, 799, 804, 906, 1024, 1248, 1264, 1313, 1315, 1320, 1329, 1332, 1335, 1337, 1338], "output_point_var": [22, 27, 32, 36, 81, 88, 135, 137, 139, 146, 156, 158, 447, 452, 455, 462, 466, 468, 472, 475, 479, 482, 489, 493, 556, 560, 561, 563, 564, 567, 1074, 1078], "contribute_to_wake_delta": [22, 25, 127, 129, 130, 178, 179, 513, 515, 516, 521, 524, 525, 530, 533, 534, 539, 541, 542, 544, 545, 550, 552, 553, 731, 734, 737, 742, 745, 750, 756, 762, 767, 794, 799, 804], "pdata": [22, 24, 25, 32, 34, 70, 73, 81, 84, 117, 119, 120, 125, 127, 129, 130, 134, 135, 136, 139, 142, 156, 173, 177, 178, 179, 180, 181, 182, 183, 184, 447, 449, 455, 458, 466, 468, 470, 475, 477, 482, 485, 493, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 555, 556, 558, 561, 562, 564, 566, 699, 704, 706, 710, 711, 716, 718, 722, 724, 729, 731, 732, 733, 734, 736, 737, 739, 742, 743, 744, 745, 747, 748, 749, 750, 753, 754, 755, 756, 759, 760, 761, 762, 765, 766, 767, 770, 771, 772, 773, 789, 794, 797, 798, 799, 802, 803, 804, 807, 809, 810, 812, 813, 815, 817, 818, 821, 823, 824, 825, 827, 828, 831, 833, 834, 1074, 1076], "contribut": [22, 25, 127, 129, 178, 179, 182, 183, 513, 515, 521, 524, 530, 533, 539, 541, 542, 544, 550, 552, 731, 734, 737, 742, 745, 750, 756, 762, 767, 794, 799, 804, 810, 812, 815, 817, 821, 823, 825, 827, 831, 833], "delta": [22, 25, 37, 40, 41, 45, 46, 49, 50, 127, 129, 130, 134, 178, 179, 180, 181, 182, 183, 184, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 555, 564, 565, 634, 637, 718, 719, 731, 732, 733, 734, 736, 737, 739, 742, 744, 745, 747, 749, 750, 753, 755, 756, 759, 761, 762, 766, 767, 770, 772, 794, 797, 798, 799, 803, 804, 809, 810, 811, 812, 813, 815, 817, 818, 821, 822, 823, 824, 825, 827, 828, 831, 832, 833, 834, 842, 863, 928, 1130, 1158, 1313, 1324, 1332, 1336], "states_source_turbin": [22, 24, 25, 120, 129, 173, 174, 176, 177, 179, 184, 515, 524, 533, 541, 544, 552, 699, 703, 704, 706, 709, 710, 711, 715, 716, 718, 721, 722, 724, 728, 729, 732, 733, 736, 737, 743, 744, 747, 748, 749, 753, 754, 759, 760, 765, 770, 771, 773, 789, 792, 797, 802, 807, 813, 818, 824, 828, 834], "For": [24, 25, 78, 120, 129, 130, 161, 162, 174, 176, 177, 179, 184, 495, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 597, 703, 704, 709, 710, 715, 716, 721, 722, 728, 729, 732, 733, 736, 737, 743, 744, 747, 748, 749, 750, 753, 754, 759, 760, 765, 770, 771, 789, 792, 797, 802, 807, 813, 818, 824, 828, 834, 897, 1156, 1194, 1326, 1327, 1329, 1331, 1332, 1333, 1335, 1336, 1337, 1339], "each": [24, 25, 78, 91, 108, 120, 129, 130, 142, 161, 162, 174, 176, 177, 179, 184, 195, 306, 320, 495, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 664, 670, 703, 704, 706, 709, 710, 715, 716, 721, 722, 728, 729, 732, 733, 736, 737, 743, 744, 747, 748, 749, 753, 754, 759, 760, 765, 770, 771, 789, 792, 797, 802, 807, 813, 818, 824, 828, 834, 851, 871, 897, 1017, 1081, 1087, 1090, 1092, 1096, 1098, 1156, 1157, 1162, 1164, 1168, 1170, 1174, 1176, 1180, 1182, 1186, 1188, 1190, 1191, 1193, 1194, 1313, 1327, 1329, 1332, 1333, 1335, 1336, 1337, 1338, 1339], "one": [24, 25, 105, 108, 120, 129, 130, 139, 142, 149, 151, 155, 174, 176, 177, 179, 184, 195, 281, 320, 513, 514, 515, 516, 521, 522, 524, 525, 530, 531, 533, 534, 539, 540, 541, 542, 543, 544, 545, 551, 552, 553, 570, 573, 574, 575, 580, 587, 703, 704, 709, 710, 715, 716, 721, 722, 728, 729, 732, 733, 736, 737, 743, 744, 747, 748, 749, 753, 754, 759, 760, 765, 770, 771, 789, 792, 797, 802, 807, 813, 818, 824, 828, 834, 890, 897, 927, 1156, 1194, 1300, 1313, 1317, 1324, 1327, 1331, 1338, 1339], "index": [24, 25, 77, 81, 86, 120, 129, 130, 156, 157, 161, 162, 164, 174, 176, 177, 179, 184, 320, 333, 441, 447, 450, 455, 457, 460, 463, 466, 468, 475, 482, 484, 487, 490, 493, 515, 516, 524, 525, 533, 534, 541, 544, 545, 552, 553, 610, 703, 704, 709, 710, 715, 716, 721, 722, 728, 729, 732, 733, 736, 737, 743, 744, 747, 748, 749, 753, 754, 759, 760, 765, 770, 771, 789, 792, 797, 802, 807, 813, 818, 824, 828, 834, 840, 841, 842, 871, 872, 873, 874, 875, 876, 979, 1024, 1059, 1063, 1068, 1074, 1100, 1239, 1248, 1264, 1299, 1324, 1327, 1333, 1334, 1337, 1339], "caus": [24, 25, 120, 129, 174, 176, 177, 179, 184, 515, 524, 533, 541, 544, 552, 703, 704, 709, 710, 715, 716, 721, 722, 728, 729, 732, 733, 736, 737, 743, 744, 747, 748, 749, 753, 754, 759, 760, 765, 770, 771, 789, 792, 797, 802, 807, 813, 818, 824, 828, 834, 1324], "wmodel": 25, "wdelta": [25, 184, 732, 733, 736, 744, 749, 797, 813, 818, 824, 828, 834], "ob": [25, 179, 180, 737, 739], "fly": [25, 179, 180, 181, 737, 739, 755, 761, 766, 772, 798, 803, 809], "setambfarmresult": [28, 29, 30, 31, 1307], "copi": [28, 32, 33, 151, 195, 264, 320, 570, 1307], "setambpointresult": [32, 33, 34, 35, 36, 1307], "pvar": 32, "treat": [32, 33, 868], "abstract": [37, 39, 40, 56, 78, 79, 100, 102, 103, 113, 127, 129, 130, 134, 135, 136, 137, 147, 150, 153, 155, 156, 159, 160, 165, 166, 167, 169, 170, 171, 173, 175, 177, 178, 179, 181, 182, 183, 184, 731, 732, 734, 736, 742, 743, 745, 747, 748, 929, 932, 933, 934, 935, 936, 1006, 1012, 1017, 1024, 1068, 1070, 1071, 1140, 1191, 1193, 1290, 1295, 1305, 1308, 1310, 1314, 1318, 1321, 1324], "check_converg": [37, 39, 41, 44, 46, 48, 50], "prev_result": [37, 39, 41, 44, 46, 48, 50], "check": [37, 39, 41, 44, 46, 48, 50, 773, 776, 792, 904, 976, 997, 999, 1006, 1024, 1034, 1035, 1068, 1092, 1093, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1142, 1143, 1145, 1151, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1299, 1324, 1329, 1336, 1337], "get_delta": [37, 40, 41, 45, 46, 49, 50], "most": [37, 40, 41, 45, 46, 49, 50, 1339], "recent": [37, 40, 41, 45, 46, 49, 50], "previou": [39, 44, 48, 120, 182, 184, 810, 813, 815, 818, 821, 824, 825, 828, 831, 834, 1336], "first": [39, 44, 48, 70, 77, 81, 120, 193, 664, 670, 706, 886, 888, 889, 1313, 1326, 1329, 1331, 1337, 1338, 1339], "convcritlist": [41, 42, 43, 44, 45, 1308], "A": [41, 66, 105, 108, 113, 139, 142, 190, 191, 195, 206, 274, 320, 325, 468, 475, 505, 649, 688, 692, 695, 799, 800, 804, 805, 831, 837, 863, 898, 899, 1156, 1194, 1195, 1205, 1215, 1225, 1308, 1310, 1311, 1312, 1313, 1316, 1318, 1327, 1328, 1330], "crit": [41, 42, 43], "add_crit": [41, 43], "criterion": [41, 43], "convvardelta": [46, 47, 48, 49, 50, 1308], "limit": [46, 47, 67, 725, 746, 751, 757, 762, 763, 768, 773, 788, 795, 799, 800, 804, 805, 810, 811, 821, 822, 1324], "float": [46, 47, 161, 162, 167, 168, 174, 195, 209, 255, 278, 320, 328, 455, 457, 468, 469, 475, 476, 597, 598, 641, 646, 648, 652, 653, 658, 659, 665, 670, 671, 688, 689, 695, 696, 711, 712, 718, 719, 724, 725, 746, 750, 751, 756, 757, 762, 763, 767, 768, 773, 788, 794, 795, 799, 800, 804, 805, 810, 811, 821, 822, 840, 841, 842, 851, 853, 856, 857, 863, 871, 872, 873, 874, 875, 876, 886, 888, 889, 897, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 946, 947, 976, 977, 979, 980, 981, 984, 985, 989, 991, 993, 995, 997, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1010, 1016, 1017, 1024, 1031, 1032, 1033, 1038, 1039, 1041, 1042, 1043, 1044, 1048, 1052, 1057, 1064, 1065, 1066, 1068, 1070, 1071, 1072, 1073, 1081, 1082, 1083, 1084, 1085, 1089, 1090, 1091, 1092, 1094, 1095, 1098, 1099, 1100, 1102, 1103, 1106, 1108, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1130, 1131, 1132, 1135, 1137, 1138, 1140, 1145, 1146, 1147, 1148, 1151, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1164, 1166, 1167, 1170, 1171, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1194, 1195, 1196, 1197, 1198, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1215, 1216, 1217, 1218, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1233, 1235, 1237, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1254, 1256, 1258, 1259, 1260, 1261, 1262, 1264, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1299, 1302, 1303, 1309, 1327, 1329], "wd_var": [46, 47, 884, 886, 888, 889, 893, 1327, 1329, 1331, 1334, 1337, 1338], "direct": [46, 47, 156, 403, 430, 468, 469, 475, 476, 574, 575, 581, 582, 706, 707, 871, 872, 873, 874, 875, 876, 886, 888, 889, 928, 960, 961, 1301, 1302, 1303, 1304, 1306, 1307, 1311, 1313, 1318, 1320, 1324, 1327, 1328, 1331, 1332, 1334, 1335, 1337, 1338, 1339], "unit": [46, 47, 167, 168, 319, 371, 375, 388, 391, 393, 396, 419, 597, 598, 750, 751, 856, 863, 999, 1000, 1156, 1194, 1309, 1320, 1327], "deg": [46, 47, 1327], "defaultconv": [50, 51, 1308, 1336], "collect": [56, 206, 325, 831, 864, 871, 872, 873, 874, 875, 876, 1156, 1194, 1313, 1332, 1335], "meant": 56, "top": [56, 542, 745, 1305, 1311, 1313, 1321, 1339], "code": [56, 287, 773, 1321, 1324, 1325, 1326], "take": [62, 128, 195, 309, 320, 874, 875, 876], "deriv": [65, 133, 172, 878, 926, 976, 979, 997, 999, 1006, 1017, 1033, 1043, 1081, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1318], "array_lik": [66, 70, 71, 80, 86, 157, 161, 162, 445, 450, 460, 469, 487, 495, 1156, 1194], "indic": [66, 86, 149, 151, 157, 445, 446, 450, 460, 487, 570, 842, 883, 1033, 1062], "els": [68, 151, 195, 205, 320, 324, 570, 886, 888, 889], "model_book": [70, 505, 506, 507, 508, 509, 510, 511, 512, 1310, 1311, 1318], "meta": [70, 1310], "us": [70, 80, 105, 139, 182, 320, 333, 441, 513, 530, 561, 597, 699, 725, 731, 734, 750, 751, 762, 773, 788, 795, 842, 849, 864, 883, 976, 977, 979, 1024, 1048, 1049, 1052, 1053, 1064, 1065, 1068, 1072, 1073, 1100, 1106, 1107, 1108, 1109, 1156, 1194, 1202, 1203, 1222, 1223, 1233, 1234, 1235, 1236, 1239, 1243, 1244, 1248, 1254, 1255, 1256, 1257, 1260, 1261, 1264, 1274, 1275, 1312, 1313, 1314, 1324, 1326, 1329, 1330, 1331, 1332, 1333, 1335, 1336, 1337, 1338, 1339], "usual": [70, 1332], "dim": [70, 71, 72, 73, 119, 120, 195, 200, 320], "same": [70, 71, 73, 170, 677, 680, 683, 686, 690, 693, 697, 856, 928, 1102, 1156, 1194, 1300, 1324, 1337, 1339], "loop_dim": [70, 71, 78, 80], "loop": [70, 71, 80, 927, 1324, 1336], "size": [70, 81, 89, 151, 156, 159, 174, 195, 245, 302, 320, 447, 453, 455, 464, 466, 468, 473, 475, 480, 482, 491, 493, 570, 711, 712, 804, 805, 842, 847, 897, 1074, 1075, 1079, 1328, 1329, 1337], "states_i0": [70, 77], "counter": [70, 77, 1024, 1037, 1068, 1100, 1239, 1248, 1264], "from_point": [70, 73], "__getitem__": [70, 195, 213, 320, 505, 506, 508, 509], "x": [70, 150, 173, 174, 176, 392, 429, 433, 441, 445, 447, 448, 505, 506, 521, 569, 574, 577, 584, 621, 622, 699, 703, 706, 709, 711, 715, 718, 721, 724, 728, 731, 732, 733, 734, 736, 742, 743, 744, 745, 747, 748, 749, 750, 753, 754, 756, 759, 760, 762, 765, 767, 770, 771, 773, 789, 792, 797, 799, 802, 804, 807, 842, 843, 871, 872, 873, 874, 875, 876, 897, 927, 929, 930, 932, 933, 936, 938, 940, 942, 943, 946, 948, 949, 950, 953, 955, 956, 957, 960, 962, 964, 965, 968, 970, 972, 973, 1156, 1194, 1303, 1304, 1313, 1320, 1321, 1325, 1327, 1328, 1329, 1331, 1335, 1336, 1337, 1338, 1339], "y": [70, 150, 392, 429, 434, 441, 445, 447, 448, 505, 506, 569, 577, 584, 621, 622, 842, 843, 871, 872, 873, 874, 875, 876, 897, 929, 930, 932, 933, 936, 938, 940, 942, 943, 946, 948, 949, 950, 953, 955, 956, 957, 960, 962, 964, 965, 968, 970, 972, 973, 1156, 1194, 1303, 1304, 1320, 1327, 1328, 1329, 1335, 1337], "np": [72, 73, 120, 206, 255, 278, 325, 366, 368, 863, 868, 927, 979, 980, 981, 984, 985, 1001, 1002, 1009, 1010, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1041, 1042, 1043, 1064, 1065, 1072, 1073, 1083, 1084, 1085, 1087, 1094, 1095, 1096, 1116, 1117, 1121, 1122, 1126, 1127, 1131, 1132, 1137, 1138, 1142, 1143, 1144, 1147, 1148, 1153, 1154, 1156, 1159, 1160, 1162, 1166, 1167, 1168, 1172, 1173, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1190, 1193, 1194, 1197, 1198, 1207, 1208, 1217, 1218, 1227, 1228, 1240, 1250, 1260, 1261, 1271, 1280, 1328, 1329, 1333, 1335, 1336, 1339], "correspond": [77, 129, 195, 196, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 439, 440, 515, 524, 533, 541, 544, 552, 597, 1301, 1304, 1320, 1326, 1330, 1331, 1334], "datacalcmodel": [78, 79, 80, 100, 135, 1310, 1324], "thei": [78, 149, 161, 162, 173, 181, 755, 761, 766, 772, 798, 803, 809, 1313, 1321, 1324, 1327, 1328, 1329, 1330, 1332, 1337], "depend": [78, 151, 396, 419, 513, 521, 556, 557, 570, 581, 653, 659, 664, 665, 670, 671, 731, 734, 742, 743, 745, 748, 750, 754, 756, 760, 762, 765, 767, 771, 799, 802, 804, 807, 976, 995, 996, 997, 999, 1005, 1006, 1016, 1017, 1081, 1082, 1089, 1090, 1091, 1092, 1098, 1099, 1102, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1313, 1320, 1321, 1324, 1326, 1328, 1331, 1332, 1337, 1339], "individu": [78, 161, 167, 664, 670, 976, 980, 981, 997, 999, 1001, 1002, 1006, 1009, 1010, 1017, 1024, 1034, 1038, 1039, 1068, 1081, 1083, 1084, 1090, 1092, 1094, 1095, 1098, 1100, 1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1142, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1311, 1313, 1329, 1332], "out_core_var": 80, "initial_result": 80, "typic": [80, 104, 138, 156, 1043], "fc": [80, 120, 1092, 1093, 1328, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "extendedst": [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 1310, 1324], "extend": [81, 1308, 1310, 1322, 1325], "pmodel": 81, "append": [81, 83, 105, 107, 139, 141], "total": [81, 89, 156, 159, 182, 188, 447, 453, 455, 464, 466, 468, 473, 475, 480, 482, 491, 493, 849, 857, 1024, 1054, 1055, 1068, 1074, 1079, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1324, 1329], "weight": [81, 90, 147, 149, 151, 155, 156, 160, 378, 431, 447, 448, 454, 455, 465, 466, 468, 474, 475, 481, 482, 492, 493, 495, 521, 542, 568, 570, 573, 574, 575, 580, 581, 582, 587, 849, 868, 874, 875, 876, 1060, 1061, 1074, 1080, 1156, 1171, 1194, 1309, 1313, 1320, 1324, 1327, 1329, 1334, 1335, 1338], "statist": [81, 90, 156, 160, 431, 447, 454, 455, 465, 466, 468, 474, 475, 481, 482, 492, 493, 1074, 1080, 1320, 1327, 1338], "label": [86, 157, 161, 162, 450, 460, 487, 871, 872, 873, 874, 875, 876, 897, 1327, 1334, 1337], "integ": [86, 157, 195, 255, 273, 320, 333, 450, 460, 487, 976, 979, 980, 981, 984, 985, 992, 994, 997, 999, 1001, 1002, 1006, 1009, 1010, 1017, 1024, 1031, 1032, 1033, 1038, 1039, 1041, 1042, 1043, 1045, 1049, 1053, 1064, 1065, 1067, 1068, 1070, 1071, 1072, 1073, 1081, 1083, 1084, 1085, 1090, 1092, 1094, 1095, 1098, 1100, 1107, 1109, 1110, 1111, 1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1195, 1197, 1198, 1207, 1208, 1215, 1217, 1218, 1225, 1227, 1228, 1234, 1236, 1239, 1240, 1245, 1246, 1248, 1250, 1255, 1257, 1258, 1259, 1260, 1261, 1264, 1271, 1276, 1277], "analys": [91, 1310], "handl": [91, 1310, 1324], "turbine_typ": [91, 508, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 895, 897, 1327, 1330, 1334, 1335, 1337], "turbinetyp": [91, 167, 168, 508, 649, 652, 653, 658, 659, 664, 665, 670, 671, 1310, 1313], "turbine_model_nam": 91, "found": [91, 119, 904, 1312, 1314, 1330, 1335, 1337], "turbine_model_sel": 91, "n_model": 91, "pre_rotor_model": 91, "farmdatamodellist": [91, 105, 106, 107, 108, 109, 110, 111, 112, 1310], "pre": [91, 93, 1326, 1333, 1336], "post_rotor_model": 91, "without": [91, 497, 868, 1313, 1329, 1333, 1335], "par": [91, 92, 497, 773, 781, 793], "respecitv": 91, "set_par": [91, 99, 497], "model_nam": [91, 99, 497], "init_par": [91, 99, 497], "final_par": [91, 99, 497], "collect_model": [91, 94, 497], "analyz": [91, 94, 497], "gather": [91, 94, 497], "st_sel": [91, 93, 165, 166, 167, 497, 588, 589, 590, 592, 594, 597, 599, 603, 605, 609, 611, 614, 617, 621, 623, 625, 627, 630, 632, 634, 635, 637, 638, 640, 643, 645, 647, 649, 650, 652, 654, 658, 660, 664, 666, 670, 672], "respect": [92, 445, 581, 582, 1156, 1194, 1327, 1337, 1338, 1339], "post": [93, 1325, 1332], "befor": [100, 101, 180, 441, 615, 739, 871, 872, 874, 875, 876, 1064, 1065, 1072, 1073, 1092, 1093, 1102, 1260, 1261, 1329], "By": [105, 139, 1043, 1339], "togeth": [105, 139, 1339], "common": [105, 139, 724, 773, 789, 794, 1156, 1194, 1321], "farmmodel": [113, 498, 508, 1310, 1313], "oper": [113, 183, 812, 817, 823, 827, 833, 849, 865, 866, 867, 1310, 1333], "contrast": [113, 927, 1310], "turbinemodel": [113, 163, 164, 165, 166, 167, 498, 499, 508, 588, 589, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 1310, 1313], "allow": [113, 495, 1310, 1324, 1329, 1336], "applic": [113, 980, 981, 984, 985, 1001, 1002, 1009, 1010, 1024, 1031, 1032, 1037, 1041, 1042, 1068, 1083, 1084, 1085, 1094, 1095, 1100, 1116, 1117, 1121, 1122, 1126, 1127, 1131, 1132, 1137, 1138, 1147, 1148, 1153, 1154, 1159, 1160, 1166, 1167, 1172, 1173, 1178, 1179, 1184, 1185, 1197, 1198, 1207, 1208, 1217, 1218, 1227, 1228, 1239, 1240, 1248, 1250, 1264, 1271, 1310, 1325, 1329], "util": [117, 119, 185, 190, 508, 869, 870, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 1195, 1196, 1205, 1206, 1215, 1216, 1225, 1226, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1311, 1324, 1329, 1336, 1337, 1338], "error": [119, 120, 190, 447, 756, 898, 904, 1337], "upcast": 120, "accept_non": 120, "serv": [120, 1327], "identifi": [120, 194, 318, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 1305, 1309, 1324, 1336], "state_turbin": [120, 383, 1309], "state_point": [120, 381, 1309], "combin": [120, 831, 832, 1339], "m": [120, 397, 398, 399, 404, 410, 412, 417, 422, 423, 424, 432, 433, 438, 448, 455, 664, 670, 711, 712, 871, 872, 873, 874, 875, 876, 999, 1000, 1156, 1194, 1320, 1326, 1327, 1328, 1331, 1335, 1336, 1337, 1338], "f": [120, 588, 589, 927, 1156, 1194, 1331, 1333, 1337, 1338, 1339], "p": [120, 408, 411, 419, 439, 440, 597, 652, 653, 659, 665, 671, 880, 897, 906, 908, 1156, 1194, 1320, 1324, 1325, 1327, 1328, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "scalar": [120, 195, 196, 200, 204, 211, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 274, 275, 276, 277, 279, 280, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 556, 557, 1156, 1194], "data_prio": 120, "search": [120, 447, 448, 455, 457, 508, 512, 641, 724, 725, 750, 751, 762, 763, 767, 768, 794, 795, 926, 1318, 1324, 1330, 1331, 1335, 1337], "throw": 120, "an": [120, 161, 320, 333, 574, 575, 699, 756, 835, 871, 872, 873, 874, 875, 876, 927, 1024, 1028, 1068, 1100, 1156, 1194, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1311, 1312, 1317, 1328, 1334, 1337, 1339], "nan": [120, 195, 255, 447, 448, 495, 868, 927, 979, 1324, 1333], "been": [122, 987, 1306, 1308, 1324, 1325], "mobj": 125, "reduc": [125, 574, 575, 581, 582, 849, 865, 866, 867, 1324], "quantiti": [127, 147, 1332], "new_wake_delta": [127, 129, 130, 134, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 555], "fill": [127, 130, 134, 190, 195, 272, 320, 447, 513, 516, 520, 521, 525, 529, 530, 534, 538, 539, 542, 545, 549, 550, 553, 555, 930, 940, 948, 955, 962, 970, 1311], "zero": [127, 134, 414, 513, 520, 521, 529, 530, 538, 539, 542, 549, 550, 555, 641, 732, 733, 736, 743, 744, 747, 749, 753, 759, 765, 770, 797, 802, 807, 886, 888, 889, 1156, 1194, 1281, 1286, 1320, 1335], "specifi": [127, 129, 195, 200, 320, 513, 515, 521, 524, 530, 533, 539, 541, 542, 544, 550, 552, 610, 1313, 1324, 1329, 1337], "evaluate_result": [127, 130, 513, 516, 521, 525, 530, 534, 539, 542, 545, 550, 553], "pwake_typ": [127, 133, 513, 521, 530, 539, 542, 550], "wake_delta": [129, 130, 134, 178, 179, 180, 181, 183, 184, 513, 515, 516, 520, 521, 524, 525, 529, 530, 533, 534, 538, 539, 541, 542, 544, 545, 549, 550, 552, 553, 555, 731, 734, 737, 739, 742, 745, 750, 755, 756, 761, 762, 766, 767, 772, 794, 798, 799, 803, 804, 809, 812, 813, 817, 818, 823, 824, 827, 828, 833, 834], "ani": [129, 130, 134, 195, 206, 251, 287, 320, 325, 515, 516, 520, 524, 525, 529, 533, 534, 538, 541, 544, 545, 549, 552, 553, 555, 649, 838, 928, 980, 981, 984, 985, 1001, 1002, 1009, 1010, 1031, 1032, 1041, 1042, 1083, 1084, 1085, 1094, 1095, 1116, 1117, 1121, 1122, 1126, 1127, 1131, 1132, 1137, 1138, 1147, 1148, 1153, 1154, 1159, 1160, 1166, 1167, 1172, 1173, 1178, 1179, 1184, 1185, 1197, 1198, 1207, 1208, 1217, 1218, 1227, 1228, 1240, 1250, 1271, 1287, 1289, 1295, 1301, 1302, 1303, 1304, 1313, 1326, 1328, 1332, 1336, 1337, 1339], "states_turbin": [130, 149, 151, 516, 525, 534, 545, 553, 570], "amb_r": [130, 516, 525, 534, 545, 553], "place": [130, 516, 525, 534, 545, 553, 871, 872, 873, 1102, 1248, 1264, 1315, 1328, 1329, 1333], "calc_var": [147, 148, 568, 574, 575, 581, 582, 603, 604], "Their": [147, 148, 575, 582], "ad": [147, 148, 181, 182, 183, 575, 582, 593, 755, 761, 766, 772, 798, 803, 809, 810, 812, 815, 817, 821, 823, 825, 827, 831, 833, 849, 868, 1043, 1102, 1312, 1324, 1326, 1329, 1330, 1334, 1335, 1337, 1338, 1339], "automat": [147, 148, 149, 575, 582, 842, 863, 871, 872, 873, 874, 875, 876, 1156, 1194, 1324, 1337], "n_rotor_point": [147, 153, 568, 572, 574, 579, 581, 586], "rotor_point_weight": [147, 155, 568, 573, 574, 580, 581, 587], "design_point": [147, 150, 568, 569, 574, 577, 581, 584], "design": [147, 150, 152, 568, 569, 571, 574, 577, 581, 584], "get_rotor_point": [147, 152, 568, 571, 574, 581], "eval_rpoint_result": [147, 151, 568, 570, 574, 581], "rpoint_result": [147, 151, 568, 570, 574, 581], "rpoint": [147, 149, 376, 377, 554, 568, 574, 581, 1309], "store_rpoint": 149, "store_rweight": 149, "store_amb_r": 149, "n_rpoint": [149, 151, 152, 153, 155, 570, 571, 572, 573, 579, 580, 586, 587], "reult": 149, "come": [149, 1327, 1334, 1337], "per": [149, 151, 382, 455, 570, 574, 575, 581, 582, 731, 849, 858, 860, 861, 862, 863, 866, 867, 1248, 1282, 1309, 1312, 1334], "formul": [150, 569, 577, 584, 1334], "plane": [150, 569, 577, 584, 869, 871, 872, 873, 874, 875, 876, 960, 1318], "z": [150, 569, 577, 584, 688, 689, 871, 872, 873, 874, 875, 876], "coordin": [150, 173, 174, 176, 177, 179, 429, 433, 434, 447, 448, 569, 577, 584, 699, 703, 704, 706, 709, 710, 711, 715, 716, 718, 721, 722, 724, 728, 729, 737, 840, 841, 871, 872, 873, 874, 875, 876, 1081, 1156, 1194, 1199, 1209, 1219, 1229, 1280, 1320, 1327, 1328, 1329, 1332, 1335], "radiu": [150, 569, 577, 584, 745, 748, 750, 754, 756, 760, 762, 767, 771, 946, 947, 976, 977, 1299, 1300], "n_rotor_axi": [150, 569, 577, 584], "n_rotor_sid": [150, 569, 577, 584], "n_rotor_up": [150, 569, 577, 584], "dpoint": [150, 569, 577, 584], "copy_to_ambi": [151, 570], "either": [151, 455, 457, 482, 484, 556, 557, 570, 625, 626, 898, 999, 1000, 1102, 1318, 1320, 1334, 1336], "In": [151, 570, 762, 927, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "latter": [151, 521, 570, 1280, 1324, 1329, 1333, 1334, 1337, 1339], "case": [151, 447, 496, 570, 863, 886, 888, 889, 892, 897, 904, 1312, 1324, 1329, 1333, 1334, 1335, 1336, 1337, 1339], "expect": [151, 192, 193, 570, 610, 625, 1328, 1331], "If": [151, 570, 641, 724, 725, 750, 751, 762, 763, 767, 768, 794, 795, 811, 816, 826, 883, 886, 888, 889, 927, 1069, 1156, 1194, 1280, 1333, 1337], "describ": [156, 1312, 1326, 1327, 1328, 1335], "meteorolog": [156, 1332], "speed": [156, 397, 398, 399, 404, 422, 423, 424, 432, 455, 468, 469, 475, 476, 597, 598, 630, 631, 646, 648, 652, 653, 658, 659, 664, 665, 670, 671, 676, 679, 682, 685, 821, 897, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 925, 1302, 1303, 1312, 1313, 1319, 1320, 1327, 1328, 1329, 1331, 1332, 1334, 1335, 1337, 1338, 1339], "turbul": [156, 402, 428, 670, 799, 800, 1313, 1320, 1321, 1324, 1328, 1331, 1332, 1337, 1338, 1339], "intens": [156, 402, 428, 670, 1313, 1320, 1321, 1324, 1328, 1332, 1337, 1338, 1339], "air": [156, 400, 425, 468, 469, 475, 476, 646, 648, 652, 653, 658, 659, 664, 670, 671, 897, 1313, 1320, 1324, 1328, 1331], "densiti": [156, 400, 425, 468, 469, 475, 476, 646, 648, 664, 897, 1129, 1130, 1157, 1313, 1316, 1320, 1324, 1328, 1331], "mere": 161, "defin": [161, 699, 1156, 1194, 1195, 1205, 1313, 1316, 1320, 1329, 1332, 1333, 1334, 1336, 1339], "basic": [161, 192, 193, 497, 521, 621, 1311, 1313, 1329, 1331], "xy": [161, 162, 869, 871, 874, 1195, 1199, 1205, 1209, 1215, 1219, 1225, 1229, 1324, 1328, 1336, 1339], "ground": [161, 162, 412, 1320], "posit": [161, 162, 164, 195, 255, 976, 997, 1239, 1314, 1315, 1324, 1333], "2": [161, 162, 278, 368, 445, 446, 495, 513, 514, 561, 732, 733, 736, 744, 748, 749, 754, 760, 762, 771, 797, 799, 804, 842, 927, 932, 933, 934, 935, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 954, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 972, 973, 974, 975, 1156, 1194, 1199, 1209, 1219, 1229, 1280, 1299, 1300, 1313, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "appear": [161, 162, 756, 1329, 1331, 1333, 1337, 1339], "mstates_sel": 161, "boolean": [161, 162, 588, 589, 1034, 1035, 1050, 1142, 1143, 1156, 1194, 1199, 1209, 1219, 1229], "diamet": [161, 162, 167, 168, 410, 441, 581, 582, 621, 622, 750, 840, 841, 842, 1115, 1195, 1196, 1199, 1205, 1206, 1209, 1215, 1216, 1219, 1225, 1226, 1229, 1313, 1320, 1324, 1329, 1332], "overwrit": [161, 162], "h": [161, 162, 167, 168, 192, 193, 412, 448, 649, 843, 1320, 1327, 1328, 1331, 1335], "hub": [161, 162, 167, 168, 441, 1313, 1324, 1331, 1332, 1335], "height": [161, 162, 167, 168, 169, 170, 392, 412, 429, 441, 447, 448, 455, 457, 466, 581, 582, 621, 622, 676, 677, 679, 680, 682, 683, 685, 686, 688, 690, 692, 693, 695, 697, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 1312, 1313, 1319, 1320, 1323, 1324, 1325, 1327, 1328, 1332, 1335], "turbine_model": [161, 162, 441, 498, 499, 508, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "add_model": [161, 163], "states_sel": [161, 163, 164, 380, 455, 457, 463, 466, 482, 484, 490, 493, 1309], "insert_model": [161, 164], "insert": [161, 164, 1302, 1303], "models_state_sel": 162, "can": [167, 287, 530, 556, 734, 773, 1033, 1102, 1156, 1194, 1311, 1312, 1313, 1314, 1321, 1324, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "overwritten": 167, "p_nomin": [167, 168, 394, 408, 649, 863, 1320, 1324], "nomin": [167, 168, 851, 1333], "power": [167, 168, 375, 396, 416, 419, 510, 597, 598, 645, 647, 652, 653, 658, 659, 664, 665, 670, 671, 849, 851, 856, 857, 863, 895, 897, 1090, 1309, 1313, 1314, 1317, 1320, 1323, 1324, 1325, 1329, 1331, 1332, 1334, 1337, 1338, 1339], "kw": [167, 168, 375, 393, 597, 598, 649, 863, 1309], "p_unit": [167, 168, 375, 649, 1309, 1324], "w": [168, 375, 391, 432, 439, 440, 455, 475, 476, 561, 645, 646, 648, 652, 653, 658, 659, 664, 670, 906, 908, 910, 913, 916, 917, 922, 1156, 1194, 1302, 1303, 1309, 1313, 1318, 1320, 1324, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "mw": [168, 192, 193, 371, 375, 1309, 1327, 1331, 1333, 1337, 1338], "gw": [168, 319, 375, 1309, 1325], "verticalprofil": [169, 170, 171, 172, 475, 476, 482, 484, 676, 679, 682, 685, 688, 692, 695, 1310, 1313], "vertic": [169, 581, 582, 869, 872, 875, 876, 1310, 1313, 1317, 1324, 1331, 1339], "profil": [169, 170, 171, 172, 475, 476, 484, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 914, 918, 919, 923, 1310, 1313, 1319, 1324, 1327, 1331], "input_var": [169, 171, 592, 593, 676, 678, 679, 681, 682, 684, 685, 687, 688, 691, 692, 694, 695, 698, 814, 820, 830], "profile_typ": [169, 172, 676, 679, 682, 685, 688, 692, 695], "translat": [173, 1068, 1070, 1071, 1100, 1110, 1111, 1239, 1245, 1246, 1248, 1258, 1259, 1264, 1276, 1277, 1332, 1339], "global": [173, 1327], "also": [173, 287, 842, 1324, 1325, 1327, 1329, 1332, 1333, 1334, 1337, 1339], "respons": [173, 1313, 1332, 1334], "calc_ord": [173, 175, 699, 701, 706, 708, 711, 714, 718, 720, 724, 726], "get_wake_coo": [173, 177, 699, 704, 706, 710, 711, 716, 718, 722, 724, 729], "get_centreline_point": [173, 176, 699, 703, 706, 709, 711, 715, 718, 721, 724, 728], "along": [173, 174, 176, 574, 575, 581, 582, 699, 703, 706, 709, 711, 715, 718, 721, 724, 728, 1313, 1324, 1332, 1335, 1339], "centrelin": [173, 174, 176, 699, 703, 706, 709, 711, 715, 718, 721, 724, 728, 804, 805, 1324, 1332], "calc_centreline_integr": [173, 174, 699, 706, 711, 718, 724], "integr": [173, 174, 195, 278, 320, 368, 574, 575, 581, 582, 699, 706, 711, 718, 724, 804, 805, 1321, 1324], "dx": [174, 804, 805, 1330], "self_wak": [174, 804, 805], "ipar": [174, 457, 626, 804, 805], "upper": [174, 581, 1144, 1313, 1336], "bound": [174, 447, 976, 997, 999, 1006, 1114, 1119, 1124, 1129, 1135, 1140, 1144, 1145, 1151, 1324], "step": [174, 195, 306, 320, 445, 446, 574, 575, 581, 582, 711, 712, 804, 805, 863, 897, 1324, 1327, 1328, 1330, 1331, 1332, 1336, 1338], "consid": [174, 804, 805, 1033, 1043, 1324, 1337], "interpol": [174, 447, 448, 457, 592, 593, 626, 645, 647, 652, 658, 664, 665, 670, 671, 688, 689, 711, 712, 718, 719, 1313, 1324], "n_var": [174, 1043], "wake_coo": [177, 179, 704, 710, 716, 722, 729, 737], "init_wake_delta": [178, 181, 731, 734, 742, 745, 750, 755, 756, 761, 762, 766, 767, 772, 794, 798, 799, 803, 804, 809], "storag": [178, 181, 711, 712, 731, 734, 742, 745, 750, 755, 756, 761, 762, 766, 767, 772, 794, 798, 799, 803, 804, 809], "finalize_wake_delta": [178, 180, 731, 734, 739, 742, 745, 750, 756, 762, 767, 794, 799, 804], "amb_result": [178, 180, 183, 731, 734, 739, 742, 745, 750, 756, 762, 767, 794, 799, 804, 812, 817, 823, 827, 833], "afterward": [180, 739], "wakesuperposit": [182, 183, 184, 508, 734, 810, 815, 821, 825, 831, 1310, 1313], "superposit": [182, 508, 731, 734, 735, 742, 745, 746, 750, 751, 756, 757, 762, 763, 767, 768, 794, 795, 799, 800, 804, 805, 821, 831, 1310, 1313, 1324, 1330, 1332, 1338], "note": [182, 880, 1248, 1313, 1326, 1327, 1328, 1329, 1331, 1334, 1335, 1338, 1339], "matter": [182, 1333], "other": [182, 468, 890, 1024, 1064, 1065, 1068, 1072, 1073, 1100, 1239, 1248, 1260, 1261, 1264, 1312, 1317, 1324, 1326, 1328, 1330, 1332, 1333, 1334, 1339], "calc_wakes_plus_wak": [182, 184, 810, 813, 815, 818, 821, 824, 825, 828, 831, 834], "calc_final_wake_delta": [182, 183, 810, 812, 815, 817, 821, 823, 825, 827, 831, 833], "final_wake_delta": [183, 812, 817, 823, 827, 833], "simpl": [183, 812, 817, 823, 827, 833, 1324, 1328, 1333, 1335, 1339], "plu": [183, 812, 817, 823, 827, 833, 1280, 1298], "sel_sp": [184, 813, 818, 824, 828, 834], "wake_model_result": [184, 813, 818, 824, 828, 834], "origin": [184, 195, 255, 813, 818, 824, 828, 834, 969, 1046, 1071, 1074, 1075, 1111, 1156, 1194, 1246, 1259, 1277, 1325, 1336], "n_sel_sp": [184, 813, 818, 824, 828, 834], "boundari": [185, 186, 842, 929, 930, 934, 936, 938, 940, 944, 946, 948, 951, 953, 955, 958, 960, 962, 966, 968, 970, 974, 976, 977, 997, 998, 1114, 1115, 1116, 1117, 1118, 1195, 1196, 1199, 1205, 1206, 1209, 1215, 1216, 1219, 1225, 1226, 1229, 1314, 1316, 1327, 1329], "geom2d": [185, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 1195, 1196, 1205, 1206, 1215, 1216, 1225, 1226, 1298, 1329], "areageometri": [185, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 946, 953, 960, 968, 969, 976, 977, 1195, 1196, 1205, 1206, 1215, 1216, 1225, 1226, 1298, 1318], "wind_farm": [185, 186], "add_turbin": [185, 187, 441, 1339], "turbine_nam": [185, 189, 881, 883], "staticdata": [190, 191, 1311, 1327], "static": [190, 646, 648, 652, 653, 658, 659, 664, 665, 670, 671, 898, 900, 901, 936, 937, 1311, 1318, 1324, 1325, 1328, 1329, 1331, 1334, 1335, 1337, 1338], "directori": [190, 1311], "add_data_packag": [190, 898, 900], "context": [190, 898, 900, 901, 902, 903, 904, 905, 1329], "packag": [190, 898, 900, 901, 1305, 1311, 1312, 1313, 1314, 1318, 1321, 1324, 1325, 1326, 1327, 1329, 1330, 1332, 1335, 1339], "file_sfx": [190, 898, 900], "locat": [190, 568, 864, 898, 900, 901, 1302, 1303, 1326, 1327, 1334, 1339], "add_data_package_fil": [190, 898, 901], "file_nam": [190, 192, 884, 889, 893, 898, 901, 904, 1311], "add_fil": [190, 898, 902, 903], "file_path": [190, 443, 444, 840, 845, 846, 847, 848, 849, 869, 877, 880, 881, 883, 884, 890, 893, 895, 898, 902, 903, 906, 911, 912, 1312], "path": [190, 192, 193, 443, 444, 455, 457, 482, 484, 496, 510, 609, 610, 625, 626, 646, 648, 652, 653, 658, 659, 664, 665, 670, 671, 880, 883, 889, 898, 902, 903, 904, 911, 912, 953, 1279, 1280, 1297, 1318, 1325, 1337], "get_file_path": [190, 898, 904, 1327], "check_raw": [190, 898, 904], "toc": [190, 898, 905, 1327], "content": [190, 508, 512, 898, 905, 1337], "data_book": [191, 898, 899], "parse_pct_file_nam": [192, 1311], "pars": [192, 193, 447, 448, 1024, 1059, 1068, 1100, 1239, 1248, 1264, 1311], "format": [192, 193, 447, 448, 455, 844, 880, 906, 912, 1312, 1327, 1328], "csv": [192, 193, 441, 442, 455, 840, 845, 881, 883, 906, 907, 909, 910, 1297, 1312, 1318, 1324, 1329, 1331, 1334, 1335, 1336, 1337, 1338], "pathlib": [192, 193, 898, 904, 1327], "parsed_data": [192, 193], "parse_pct_two_fil": [193, 1311], "file_name_a": [193, 1311], "file_name_b": [193, 1311], "second": [193, 398, 423, 1320], "constant": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 762, 913, 915, 917, 921, 922, 925, 1305, 1320, 1324, 1328, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "amb_rpoint_result": [194, 1309], "amb_rpoint_r": [194, 1309], "dtype": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 1309, 1329], "see": [195, 196, 225, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 343, 1135, 1136, 1140, 1141, 1156, 1191, 1192, 1194, 1288, 1290, 1291, 1324, 1326, 1329, 1331, 1332, 1338], "help": [195, 225, 320, 343, 906, 1135, 1136, 1140, 1141, 1191, 1192, 1288, 1290, 1291, 1318], "accur": [195, 225, 320, 343, 1135, 1136, 1140, 1141, 1191, 1192, 1288, 1290, 1291], "signatur": [195, 225, 320, 343, 1135, 1136, 1140, 1141, 1191, 1192, 1288, 1290, 1291], "__hash__": [195, 215, 320, 332], "hash": [195, 215, 320, 332], "__str__": [195, 246, 320, 362, 976, 978, 997, 999, 1006, 1017, 1024, 1068, 1081, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "__lt__": [195, 220, 320, 338], "__le__": [195, 218, 320, 336], "__eq__": [195, 208, 320, 327], "__ne__": [195, 223, 320, 341], "__gt__": [195, 214, 320, 331], "__ge__": [195, 212, 320, 330], "__add__": [195, 198, 320, 322], "__radd__": [195, 229, 320, 347], "__sub__": [195, 247, 320, 363], "__rsub__": [195, 242, 320, 359], "__mul__": [195, 222, 320, 340], "__rmul__": [195, 237, 320, 354], "__mod__": [195, 221, 320, 339], "__rmod__": [195, 236, 320, 353], "__divmod__": [195, 207, 320, 326], "divmod": [195, 207, 231, 320, 326, 349], "__rdivmod__": [195, 231, 320, 349], "__pow__": [195, 228, 320, 346], "mod": [195, 228, 239, 320, 346, 356], "pow": [195, 228, 239, 320, 346, 356], "__rpow__": [195, 239, 320, 356], "__neg__": [195, 224, 320, 342], "__pos__": [195, 227, 320, 345], "__abs__": [195, 197, 320, 321], "ab": [195, 197, 320, 321], "__bool__": [195, 205, 320, 324], "__int__": [195, 216, 320, 334], "__float__": [195, 209, 320, 328], "__floordiv__": [195, 210, 320, 329], "__rfloordiv__": [195, 234, 320, 351], "__truediv__": [195, 248, 320, 364], "__rtruediv__": [195, 243, 320, 360], "as_integer_ratio": [195, 255], "pair": [195, 255, 1156, 1194], "whose": [195, 255, 1314, 1327], "ratio": [195, 255], "equal": [195, 255, 394, 408, 411, 1320], "denomin": [195, 255, 320, 367], "rais": [195, 255, 447, 904], "overflowerror": [195, 255], "infin": [195, 255], "valueerror": [195, 255, 1156, 1194], "is_integ": [195, 278, 320, 368], "finit": [195, 278, 320, 368], "otherwis": [195, 278, 904, 1331], "item": [195, 206, 279, 320, 325], "parametr": [195, 206, 320, 325], "wrapper": [195, 206, 320, 325, 498, 1313], "around": [195, 206, 320, 325], "__invert__": [195, 217, 320, 335], "__lshift__": [195, 219, 320, 337], "__rlshift__": [195, 235, 320, 352], "__rshift__": [195, 241, 320, 358], "__rrshift__": [195, 240, 320, 357], "__and__": [195, 199, 320, 323], "__rand__": [195, 230, 320, 348], "__xor__": [195, 249, 320, 365], "__rxor__": [195, 244, 320, 361], "__or__": [195, 226, 320, 344], "__ror__": [195, 238, 320, 355], "tolist": [195, 312, 320], "method": [195, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 443, 593, 831, 832, 911, 912], "ident": [195, 196, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 1328, 1339], "attribut": [195, 196, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 1327], "itemset": [195, 280, 320], "tobyt": [195, 310, 320], "tofil": [195, 311, 320], "tostr": [195, 313, 320], "byteswap": [195, 258, 320], "astyp": [195, 256, 320], "getfield": [195, 276, 320], "setfield": [195, 299, 320], "resiz": [195, 296, 320], "__array__": [195, 200, 320], "sc": [195, 200, 204, 320], "__array_wrap__": [195, 204, 320], "__sizeof__": [195, 245, 320], "byte": [195, 245, 281, 285, 287, 306, 320], "__reduce__": [195, 232, 320], "helper": [195, 232, 320, 877, 906, 911, 912, 1074, 1305, 1314, 1318], "pickl": [195, 232, 320], "dump": [195, 270, 271, 320], "transpos": [195, 315, 320], "put": [195, 291, 320], "repeat": [195, 294, 320, 1102], "choos": [195, 259, 320, 1156, 1194, 1326, 1331, 1333, 1338], "sort": [195, 303, 320], "argsort": [195, 254, 320], "searchsort": [195, 298, 320], "argmax": [195, 252, 320], "argmin": [195, 253, 320], "reshap": [195, 295, 320], "squeez": [195, 304, 320], "view": [195, 274, 317, 320], "swapax": [195, 308, 320], "max": [195, 282, 320, 495, 610, 831, 832, 842, 865, 866, 867, 871, 872, 873, 874, 875, 876, 1081, 1082, 1091, 1099, 1100, 1102, 1144, 1170, 1171, 1316, 1324, 1330, 1334], "min": [195, 284, 320, 495, 610, 842, 865, 866, 867, 871, 872, 873, 874, 875, 876, 1081, 1082, 1091, 1099, 1100, 1102, 1144, 1170, 1171, 1316, 1324, 1334, 1336], "ptp": [195, 290, 320], "trace": [195, 314, 320, 1336], "diagon": [195, 268, 320], "clip": [195, 260, 320], "conj": [195, 262, 320], "conjug": [195, 263, 320], "nonzero": [195, 288, 320], "std": [195, 305, 320], "sum": [195, 307, 320, 842, 849, 855, 860, 862, 865, 866, 867, 868, 1024, 1054, 1055, 1060, 1061, 1068, 1081, 1082, 1091, 1099, 1100, 1156, 1194, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1324, 1337], "cumsum": [195, 266, 320], "prod": [195, 289, 320], "cumprod": [195, 265, 320], "compress": [195, 261, 320], "flatten": [195, 275, 320], "ravel": [195, 292, 320], "round": [195, 297, 320], "__format__": [195, 211, 320], "formatt": [195, 211, 320], "setflag": [195, 300, 320], "newbyteord": [195, 287, 320], "new_ord": [195, 287, 320], "differ": [195, 287, 320, 513, 530, 539, 1313, 1321, 1324, 1327, 1328, 1334], "ndim": [195, 286, 320], "stride": [195, 306, 320], "pointer": [195, 267, 320], "items": [195, 281, 320], "length": [195, 281, 285, 320, 417, 438, 445, 495, 513, 514, 711, 712, 718, 719, 913, 914, 915, 917, 918, 919, 921, 922, 923, 925, 1074, 1314, 1320, 1324, 1327], "element": [195, 281, 302, 320, 574, 575, 581, 582, 1156, 1194], "gentyp": [195, 302, 320], "nbyte": [195, 285, 320], "descriptor": [195, 269, 320], "real": [195, 293, 320, 927, 1318], "imag": [195, 277, 320, 842, 864, 871, 872, 873, 874, 875, 876, 929, 930, 936, 938, 940, 946, 948, 953, 955, 960, 962, 968, 970], "imaginari": [195, 277, 320], "flat": [195, 274, 320], "t": [195, 196, 320, 427, 439, 440, 441, 630, 631, 718, 719, 868, 906, 908, 1156, 1194, 1320], "__array_interface__": [195, 201, 320], "protocol": [195, 201, 203, 320], "python": [195, 201, 320, 1156, 1194, 1324, 1325, 1332], "side": [195, 201, 320, 868], "__array_struct__": [195, 203, 320], "struct": [195, 203, 320], "__array_priority__": [195, 202, 320], "prioriti": [195, 202, 320], "pleas": [196, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 1322, 1325], "version": [206, 278, 325, 368, 1156, 1194, 1324, 1326, 1327, 1329, 1331, 1334, 1337, 1338], "22": [206, 278, 325, 368, 1327, 1329, 1333, 1337], "alia": [206, 325], "genericalia": [206, 325], "import": [206, 325, 1156, 1194, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "signedinteg": [206, 320, 325, 1309], "pep": [206, 325], "585": [206, 325], "hint": [206, 325], "gener": [206, 325, 699, 804, 835, 837, 839, 849, 864, 869, 871, 872, 873, 874, 875, 876, 985, 1042, 1315, 1317, 1321, 1324, 1327, 1329], "standard": [206, 325, 849, 859, 1156, 1194, 1335], "doubl": [255, 278, 1324], "10": [255, 724, 750, 762, 773, 794, 799, 804, 1322, 1324, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "25": [255, 751, 762, 763, 799, 800, 804, 805, 1327, 1329, 1331, 1333, 1335, 1337], "4": [255, 750, 1156, 1194, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "chang": [287, 609, 610, 1313, 1324, 1325, 1326, 1327, 1329, 1331, 1334, 1337, 1338], "made": 287, "field": [287, 821, 849, 868, 1328, 1332, 1335, 1338, 1339], "follow": [287, 455, 711, 756, 1156, 1194, 1313, 1323, 1324, 1327, 1328, 1329, 1331, 1332, 1333, 1334, 1336, 1337, 1338, 1339], "swap": 287, "opposit": 287, "endian": 287, "littl": 287, "big": 287, "nativ": 287, "ignor": 287, "abov": [287, 872, 873, 875, 876, 1325, 1326, 1329, 1333, 1334, 1337, 1339], "new_dtyp": 287, "giga": [319, 1309], "watt": [319, 371, 375, 388, 391, 393, 863, 1309], "ityp": [320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 1309], "__index__": [320, 333], "convert": [320, 333, 1156, 1194, 1280, 1335], "suitabl": [320, 333], "bit_count": [320, 366], "bit": [320, 366], "absolut": [320, 366, 405, 435, 634, 637, 1313, 1320, 1324, 1339], "analog": [320, 366], "builtin": [320, 366], "popcount": [320, 366], "c": [320, 366, 1156, 1194, 1326, 1339], "numer": [320, 369, 688, 976, 997, 999, 1006, 1013, 1017, 1021, 1024, 1056, 1068, 1081, 1090, 1092, 1098, 1100, 1239, 1248, 1264, 1313], "itself": [320, 369], "int64": [366, 368, 1329, 1335], "127": [366, 1337], "7": [366, 1156, 1194, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "uint32": 368, "5": [368, 750, 800, 1156, 1194, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "kappa": [370, 913, 915, 917, 921, 922, 925, 1309, 1319], "41": [370, 913, 915, 917, 921, 922, 925, 1309, 1319, 1329], "van": [370, 913, 915, 917, 921, 922, 925, 1309], "karman": [370, 913, 915, 917, 921, 922, 925, 1309], "mega": [371, 1309], "pop": [374, 1033, 1043, 1071, 1111, 1246, 1259, 1277, 1309], "popul": [374, 976, 981, 985, 997, 999, 1002, 1006, 1010, 1017, 1024, 1032, 1033, 1035, 1039, 1042, 1043, 1068, 1074, 1075, 1081, 1084, 1090, 1092, 1095, 1098, 1100, 1114, 1117, 1119, 1122, 1124, 1127, 1129, 1132, 1135, 1138, 1140, 1143, 1145, 1148, 1151, 1154, 1157, 1160, 1164, 1167, 1170, 1173, 1176, 1179, 1182, 1185, 1188, 1191, 1195, 1198, 1205, 1208, 1215, 1218, 1225, 1228, 1239, 1248, 1264, 1309, 1314, 1327, 1329], "1000000000": [375, 1309], "1000000": [375, 1309], "tw": [375, 388, 1309], "1000000000000": [375, 1309], "factor": [375, 415, 597, 598, 625, 626, 750, 751, 762, 763, 799, 800, 804, 805, 914, 918, 919, 923, 1081, 1082, 1091, 1099, 1130, 1158, 1309, 1313, 1319, 1320, 1324, 1339], "rel": [375, 406, 436, 1309, 1320], "rotor_point": [376, 377, 1309, 1330], "rweight": [378, 1309], "rotor_weight": [378, 1309], "state_source_turbin": [382, 1309], "tmodel": [384, 1309], "tmodel_sel": [385, 1309], "tname": [386, 1309, 1329, 1334, 1335], "terra": [388, 1309], "valid": [389, 652, 653, 658, 659, 670, 671, 762, 1092, 1093, 1151, 1152, 1153, 1154, 1155, 1195, 1196, 1199, 1205, 1209, 1215, 1219, 1225, 1229, 1309, 1316, 1325, 1337], "xyh": [392, 840, 846, 848, 1320], "vector": [392, 429, 445, 446, 871, 872, 873, 960, 961, 1033, 1043, 1074, 1156, 1194, 1301, 1302, 1303, 1304, 1314, 1318, 1320, 1325, 1329, 1337, 1338], "kilo": [393, 1309], "amb_cap": [394, 439, 440, 906, 908, 1320, 1337], "capac": [394, 408, 849, 851, 1320, 1324, 1337], "amb_p": [394, 396, 411, 439, 440, 906, 908, 1320, 1328, 1329, 1333, 1335, 1337], "amb_ct": [395, 439, 440, 906, 908, 1320, 1329, 1335], "thrust": [395, 409, 630, 631, 1313, 1320, 1324, 1325, 1332, 1333, 1339], "coeffici": [395, 409, 927, 1060, 1061, 1320, 1332, 1333], "user": [396, 419, 1156, 1194, 1305, 1312, 1320, 1324, 1332], "amb_rew": [397, 439, 440, 893, 894, 906, 908, 1320, 1328, 1329, 1333, 1335, 1336, 1337], "amb_rews2": [398, 439, 440, 906, 908, 1320, 1329, 1335], "moment": [398, 399, 423, 424, 1320], "amb_rews3": [399, 439, 440, 906, 908, 1320, 1329, 1335], "third": [399, 424, 1320], "amb_rho": [400, 439, 440, 906, 908, 1320, 1329, 1335], "kg": [400, 425, 1320], "m3": [400, 425, 1320], "amb_t": [401, 439, 440, 906, 908, 1320], "temperatur": [401, 427, 1320], "kelvin": [401, 427, 1320], "amb_ti": [402, 439, 440, 906, 908, 1320, 1330, 1335], "amb_wd": [403, 439, 440, 610, 884, 886, 888, 889, 893, 906, 908, 1320, 1335], "degre": [403, 405, 406, 430, 435, 436, 886, 888, 889, 927, 1302, 1303, 1318, 1320, 1339], "amb_w": [404, 439, 440, 906, 908, 1320, 1327, 1329, 1331, 1334, 1335, 1337, 1338], "amb_yaw": [405, 439, 440, 1320], "yaw": [405, 406, 435, 436, 439, 440, 634, 637, 653, 659, 665, 671, 724, 794, 1313, 1320, 1323, 1324, 1325, 1329, 1330, 1335], "angl": [405, 406, 435, 436, 756, 757, 789, 1264, 1265, 1320, 1328, 1336, 1339], "amb_yawm": [406, 439, 440, 1320], "amb_yld": [407, 439, 440, 906, 908, 1320, 1337], "yield": [407, 437, 835, 837, 839, 849, 856, 863, 1317, 1320, 1322, 1324, 1325, 1331, 1332, 1337, 1338], "gwh": [407, 437, 863, 1320, 1331, 1337, 1338], "cap": [408, 439, 440, 906, 908, 1320, 1337], "ct": [409, 439, 440, 510, 597, 630, 631, 645, 647, 648, 652, 653, 658, 659, 664, 665, 670, 671, 725, 746, 747, 748, 750, 751, 753, 754, 757, 759, 760, 762, 763, 768, 770, 771, 773, 788, 795, 799, 800, 804, 805, 895, 897, 906, 908, 1313, 1317, 1320, 1324, 1327, 1333, 1335, 1339], "eff": [411, 853, 906, 908, 1320, 1337], "effici": [411, 849, 852, 853, 1156, 1194, 1320, 1324, 1331, 1333, 1337, 1338], "over": [412, 804, 849, 854, 855, 886, 888, 889, 927, 1156, 1194, 1320, 1321, 1324, 1329, 1338], "k": [413, 414, 415, 640, 641, 724, 725, 750, 751, 756, 757, 762, 763, 767, 768, 789, 794, 795, 1313, 1320, 1324, 1330, 1337, 1338], "growth": [413, 724, 725, 750, 751, 756, 757, 762, 763, 767, 768, 794, 795, 799, 800, 804, 805, 1320, 1324, 1338], "kb": [414, 415, 640, 641, 1320, 1324], "kti": [414, 415, 640, 641, 642, 643, 644, 1313, 1320, 1324, 1330, 1337], "ti": [414, 415, 428, 439, 440, 468, 469, 475, 476, 561, 640, 641, 670, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 804, 805, 831, 897, 906, 908, 1098, 1313, 1314, 1320, 1324, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "between": [415, 581, 1146, 1156, 1194, 1195, 1196, 1205, 1206, 1215, 1216, 1225, 1226, 1249, 1299, 1300, 1313, 1320, 1328, 1329, 1331], "max_p": [416, 597, 602, 1320, 1333, 1334], "maxp": [416, 1320, 1333, 1334], "derat": [416, 597, 895, 1317, 1320, 1324, 1333, 1334], "boost": [416, 597, 895, 1317, 1320, 1324, 1333, 1334], "mol": [417, 495, 685, 920, 921, 924, 925, 1319, 1320, 1327], "monin": [417, 920, 921, 924, 925, 1320, 1327], "ubukhof": [417, 1320], "pa_alpha": [420, 1320], "alpha": [420, 724, 725, 773, 788, 794, 795, 1320, 1329], "porteagel": [420, 421, 794, 1320, 1321, 1324], "pa_beta": [421, 1320], "beta": [421, 724, 725, 773, 788, 795, 1320], "rew": [422, 439, 440, 581, 906, 908, 1313, 1320, 1324, 1328, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "rews2": [423, 439, 440, 630, 631, 653, 659, 665, 671, 906, 908, 1320], "rews3": [424, 439, 440, 597, 598, 602, 653, 659, 665, 671, 906, 908, 1320], "rho": [425, 439, 440, 468, 469, 475, 476, 645, 646, 648, 652, 653, 658, 659, 670, 671, 897, 906, 908, 1320, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "shear": [426, 692, 916, 1313, 1318, 1320, 1324], "expon": [426, 653, 659, 665, 671, 692, 916, 1313, 1320, 1324, 1339], "txyh": [429, 1320], "wd": [430, 439, 440, 468, 469, 475, 476, 610, 706, 707, 906, 908, 1301, 1302, 1303, 1304, 1318, 1320, 1324, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "yawm": [436, 439, 440, 634, 637, 724, 789, 794, 1313, 1320, 1339], "yld": [437, 439, 440, 906, 908, 1320, 1337], "z0": [438, 913, 914, 915, 917, 918, 919, 921, 922, 923, 925, 1319, 1320, 1327], "rough": [438, 913, 914, 915, 917, 918, 919, 921, 922, 923, 925, 1320], "amb2var": [439, 1320], "map": [439, 440, 447, 448, 455, 457, 482, 484, 495, 513, 514, 515, 516, 517, 518, 519, 520, 556, 557, 592, 593, 610, 880, 890, 892, 991, 992, 1027, 1028, 1313, 1317, 1320, 1324, 1330, 1331, 1334], "var2amb": [440, 1320], "farm_layout": [441, 442, 443, 444, 445, 446, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338], "add_from_csv": [441, 442, 1312], "data_sourc": [441, 442, 447, 448, 455, 457, 466, 482, 484, 493, 556, 557, 592, 593, 609, 610, 625, 626, 645, 646, 652, 653, 688, 689, 1312, 1327, 1328, 1329, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "col_index": 441, "col_nam": 441, "col_x": 441, "col_i": 441, "col_h": 441, "col_d": 441, "col_id": 441, "cols_models_pr": 441, "cols_models_post": 441, "turbine_base_nam": 441, "turbine_id": 441, "turbine_base_name_count_shift": 441, "turbine_paramet": [441, 444, 445, 446], "panda": [441, 442, 455, 457, 463, 482, 484, 490, 495, 556, 557, 592, 593, 609, 610, 625, 626, 645, 646, 647, 648, 652, 653, 658, 659, 664, 665, 670, 671, 689, 840, 849, 856, 858, 860, 861, 862, 863, 866, 867, 869, 877, 880, 881, 882, 884, 886, 890, 893, 895, 906, 911, 912, 1312, 1313, 1318, 1324, 1327, 1329, 1331, 1333, 1334, 1335, 1337, 1338, 1339], "datafram": [441, 442, 455, 457, 482, 484, 495, 556, 557, 592, 593, 609, 610, 625, 626, 645, 646, 647, 648, 652, 653, 658, 659, 664, 665, 670, 671, 689, 856, 858, 860, 861, 862, 863, 866, 867, 880, 881, 882, 884, 886, 888, 889, 893, 911, 912, 1312, 1313, 1324, 1333, 1334, 1335, 1337, 1339], "column": [441, 455, 457, 482, 484, 495, 556, 557, 592, 593, 610, 625, 626, 646, 648, 652, 653, 658, 659, 664, 670, 689, 880, 883, 906, 912, 927, 1156, 1194, 1280, 1327, 1331, 1333, 1334, 1336, 1337], "enter": 441, "forward": [441, 443, 444, 445, 446, 501, 842, 847, 871, 872, 873, 874, 875, 876, 880, 911, 912], "add_from_df": [442, 1312, 1324], "add_from_fil": [443, 1312, 1327, 1337], "infer": [443, 444, 1335], "suffix": [443, 447, 448], "add_from_json": [444, 1312], "set_farm_nam": 444, "turbim": [444, 1312], "json": [444, 844, 1312], "add_grid": [445, 1312, 1328, 1336, 1338], "xy_bas": [445, 446, 1312, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1338], "step_vector": [445, 1312, 1328, 1336, 1338], "regular": [445, 447, 574, 581, 1215, 1225, 1248, 1264, 1312, 1313, 1315, 1316, 1324, 1336, 1338], "grid": [445, 447, 530, 539, 574, 1130, 1158, 1164, 1205, 1206, 1215, 1225, 1226, 1248, 1249, 1264, 1312, 1313, 1315, 1316, 1324, 1328, 1338], "add_row": [446, 1312, 1329, 1331, 1333, 1334, 1335], "xy_step": [446, 1312, 1329, 1331, 1333, 1334, 1335], "row": [446, 625, 626, 1156, 1194, 1225, 1226, 1248, 1249, 1312, 1323, 1325, 1331, 1333, 1336, 1337], "fielddatanc": [447, 448, 449, 450, 451, 452, 453, 454, 1312, 1324, 1328], "heterogen": [447, 1312, 1323, 1325, 1331], "horizont": [447, 869, 871, 874, 1312, 1317, 1324, 1327, 1328, 1331, 1335], "netcdf": [447, 1312, 1328], "pattern": [447, 448, 1324, 1333], "end": [447, 448, 868, 900, 906, 911, 912], "nc": [447, 448, 906, 907, 909, 910, 1324, 1328], "One": [447, 448, 1328], "mani": [447, 448, 1324, 1325], "ovar": [447, 455, 482, 556, 625], "var2ncvar": [447, 448, 1328], "fixed_var": [447, 448, 455, 457, 482, 484, 493, 1327, 1328, 1329, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "uniform": [447, 448, 455, 457, 475, 482, 484, 556, 557, 641, 695, 718, 1100, 1102, 1312, 1313, 1324, 1327, 1335, 1336, 1337, 1339], "read": [447, 448, 455, 457, 482, 484, 496, 557, 593, 610, 626, 646, 648, 652, 653, 658, 659, 664, 665, 670, 671, 906, 911, 1279, 1280, 1297, 1298, 1312, 1318, 1324, 1328, 1337], "states_coord": [447, 448, 1328], "x_coord": [447, 448, 1328], "y_coord": [447, 448, 1328], "h_coord": [447, 448, 1328], "pre_load": [447, 448, 1328], "weight_ncvar": [447, 448], "bounds_error": [447, 1328], "exceed": [447, 495], "fill_valu": 447, "time_format": [447, 448, 1328], "datetim": [447, 448], "string": [447, 448, 512, 878, 880, 888, 889, 976, 978, 997, 999, 1006, 1017, 1024, 1068, 1081, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1156, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1194, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "interp_nan": [447, 448], "linearli": [447, 448], "interpn_par": [447, 448], "scipi": [447, 448, 457, 626, 664, 665, 670, 671, 1156, 1194], "interpn": [447, 448, 626, 664, 665, 670, 671], "utmx": [448, 1328], "utmi": [448, 1328], "d_": 448, "sel": [448, 1100, 1102], "isel": 448, "xr": 448, "multiheightst": [455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 1312, 1324], "multipl": [455, 731, 1312, 1313, 1324, 1325, 1334], "taken": [455, 1335], "exampl": [455, 897, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "50": [455, 495, 1327, 1329, 1330, 1331, 1334, 1338], "60": [455, 1329], "100": [455, 602, 711, 712, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "var2col": [455, 457, 482, 484, 493, 495, 556, 557, 1327, 1329, 1331, 1334, 1336, 1337, 1338], "fix": [455, 457, 468, 482, 484, 1119, 1176, 1205, 1312, 1316, 1324], "pd_read_par": [455, 457, 484, 557, 689], "slice": [455, 457, 463, 482, 484, 490, 530, 1313, 1335], "rang": [455, 457, 463, 482, 484, 490, 609, 610, 1313, 1324, 1333, 1334, 1339], "states_loc": [455, 457, 463, 466, 482, 484, 490, 493, 1331], "loc": [455, 457, 463, 482, 484, 490, 1333, 1334], "rdict": [455, 456, 466, 467, 482, 483, 493, 494], "index_col": [455, 456, 466, 467, 482, 483, 493, 494], "interp1d": 457, "multiheighttimeseri": [466, 467, 1312, 1324, 1327, 1331], "multi": [466, 734, 1312, 1323, 1324, 1325], "timeseri": [466, 493, 494, 718, 719, 863, 1312, 1313, 1323, 1324, 1325, 1331, 1336], "parse_d": [466, 467, 493, 494], "scanw": [468, 469, 470, 471, 472, 473, 474, 1312], "ws_list": [468, 469], "singlestatest": [475, 476, 477, 478, 479, 480, 481, 1312, 1324, 1335], "profdict": [475, 482], "profdata": [475, 476], "statest": [482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 1312, 1327, 1329, 1333, 1334, 1338, 1339], "readabl": [482, 1312, 1334, 1337], "rpar": [482, 652], "create_random_abl_st": [495, 1312], "cols_minmax": 495, "mol_abs_rang": 495, "5000": [495, 1329, 1333, 1336, 1337], "normal": [495, 564, 565, 706, 842, 1156, 1194, 1313, 1327, 1333, 1338], "random": [495, 1312, 1327], "abl": [495, 676, 679, 682, 685, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 1312, 1313, 1324], "neutral": [495, 676, 685, 913, 914, 915, 1313, 1318], "stratif": 495, "windio": [496, 1324], "read_cas": [496, 1312], "case_yaml": [496, 1312], "site_par": [496, 1312], "farm_par": 496, "ana_par": 496, "yaml": [496, 1312, 1324], "read_sit": 496, "read_farm": 496, "read_analys": 496, "basicfarmcontrol": [497, 1313, 1330], "condit": [497, 609, 976, 977, 1299, 1313, 1324, 1329, 1332, 1334, 1335, 1339], "farm_model": [498, 499, 500, 501, 502, 503, 504, 508, 1330], "turbine2farmmodel": [498, 499, 500, 501, 502, 503, 504, 1313, 1330], "promot": [498, 1313], "simpli": [498, 564, 1313, 1326, 1327, 1330, 1334, 1338], "init": [501, 900, 901, 1069, 1100, 1102, 1105, 1242, 1253, 1273], "slightli": [505, 1318, 1334], "enhanc": [505, 1318], "pass": [507, 1156, 1194, 1327, 1329, 1331, 1334, 1337, 1338], "kind": [508, 1311, 1328, 1339], "turbine_ord": 508, "partial_wak": [508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 1330], "partialwakemodel": 508, "wake_superposit": [508, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 1330], "pct_file": [508, 510], "print_toc": [508, 512, 1330], "curv": [510, 645, 646, 648, 652, 658, 659, 664, 665, 670, 671, 895, 897, 1313, 1317, 1324, 1325, 1333], "creation": [510, 884, 893, 1305, 1317, 1338], "more": [513, 1156, 1194, 1324, 1334, 1337], "than": [513, 821, 1337], "invok": [513, 597, 699, 1313, 1324, 1325, 1326, 1329, 1337, 1338, 1339], "wname2pwak": [513, 514], "wtype2pwak": [513, 514], "ones": [514, 522, 531, 540, 543, 551, 927], "partialaxiwak": [521, 522, 523, 524, 525, 526, 527, 528, 529, 731, 1313, 1330], "axial": [521, 1313], "idea": [521, 821, 1333], "radial": [521, 522, 732, 744, 748, 749, 754, 760, 771], "n": [521, 522, 530, 531, 539, 540, 574, 575, 581, 582, 871, 872, 873, 960, 961, 989, 990, 1057, 1058, 1119, 1120, 1124, 1125, 1135, 1136, 1156, 1176, 1177, 1194, 1313, 1324, 1326, 1327, 1330, 1335, 1336, 1337, 1339], "radii": [521, 747, 748, 753, 754, 759, 760, 770, 771, 1299, 1318], "cover": 521, "disc": [521, 542, 976, 977, 1332], "overlap": [521, 542, 574, 575], "circl": [521, 542, 946, 947, 948, 949, 950, 951, 952, 1195, 1196, 1199, 1205, 1206, 1209, 1215, 1216, 1219, 1225, 1226, 1229, 1299, 1300, 1318, 1329], "area": [521, 574, 575, 930, 936, 938, 940, 946, 948, 955, 962, 970, 976, 977, 1280, 1299, 1300, 1314, 1318, 1324, 1329], "partialdistslicedwak": [530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 734, 1313, 1330], "distanc": [530, 750, 751, 929, 930, 934, 936, 938, 940, 944, 946, 948, 951, 953, 955, 958, 960, 962, 966, 968, 970, 974, 999, 1000, 1145, 1146, 1156, 1158, 1170, 1171, 1194, 1195, 1196, 1205, 1206, 1215, 1216, 1225, 1226, 1249, 1299, 1300, 1313, 1314, 1316, 1318, 1329, 1339], "make": [530, 1296, 1299, 1313, 1314, 1326, 1329, 1337], "structur": [530, 664, 670, 1313, 1324, 1331, 1337], "optin": [530, 1280], "done": [530, 987, 1336], "grotor": 530, "gridrotor": [530, 531, 540, 574, 575, 576, 577, 578, 579, 580, 1313, 1330], "partialgrid": [539, 540, 541, 1313, 1330], "mai": [539, 597, 1313, 1328, 1339], "partialtophat": [542, 543, 544, 545, 546, 547, 548, 549, 1313, 1330], "hat": [542, 745, 1313, 1321, 1339], "rotorpoint": [550, 551, 552, 553, 554, 555, 1313, 1330], "directli": [550, 893, 898, 1024, 1033, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1311, 1313, 1317, 1318, 1321, 1334], "get_wake_point": [550, 554], "setuniformdata": [556, 557, 558, 559, 560, 1313, 1324], "both": [556, 557, 742, 743, 762, 765, 799, 802, 804, 807, 1248, 1333, 1337, 1338], "assum": [556, 557, 1299, 1336], "Or": [556, 557], "independ": [556, 557, 1331], "written": [556, 557, 883, 1325], "tke2ti": [561, 562, 563, 1313, 1324, 1330], "tke": [561, 1313, 1324, 1327, 1331, 1332], "sqrt": [561, 1156, 1194, 1313], "wakedelta": [564, 565, 566, 567, 1313], "subtract": [564, 1313, 1329], "divid": [564, 565, 871, 872, 873, 874, 875, 876], "centrerotor": [568, 569, 570, 571, 572, 573, 1313, 1330], "compos": [574, 581, 1313], "possibli": [574, 1313], "kick": [574, 1313], "out": [574, 1156, 1194, 1313, 1334, 1336, 1339], "outsid": [574, 1313, 1328], "reduct": [574, 575], "actual": [574, 575, 1024, 1033, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1324, 1326, 1331, 1333, 1335], "repres": [574, 575, 625, 664, 670, 843, 946, 953, 960, 1313, 1318, 1327, 1338, 1339], "circ": [574, 575], "recalcul": [574, 575], "accordingli": [574, 575], "nint": [574, 575, 581, 582], "200": [574, 575, 581, 582, 1327, 1329, 1331, 1333, 1339], "levelrotor": [581, 582, 583, 584, 585, 586, 587, 1313, 1324, 1330], "lower": [581, 810, 811, 821, 822, 864, 1144, 1313, 1324, 1336], "blade": [581, 1313], "tip": [581, 1313], "everi": [581, 582, 1326], "in_var": [588, 589], "vairabl": [588, 589], "func": [588, 589, 1024, 1033, 1043, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1281, 1287, 1288, 1289, 1290, 1295], "in0": [588, 589], "in1": [588, 589], "stsel": [588, 589], "out0": [588, 589], "ou1": [588, 589], "where": [588, 589, 843, 1156, 1194, 1302, 1303, 1329, 1331, 1332, 1334, 1339], "inx": [588, 589], "outi": [588, 589], "lookupt": [592, 593, 594, 595, 596, 1313, 1324], "tabl": [592, 593, 625, 1313, 1324, 1333, 1334], "varmap": [592, 593, 976, 991, 992, 997, 999, 1006, 1017, 1081, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191], "pd_file_read_par": [593, 610, 626, 646, 653], "xr_interp_arg": 593, "powermask": [597, 598, 599, 600, 601, 602, 1313, 1324, 1330, 1333], "below": [597, 872, 873, 875, 876, 1324, 1326], "rate": 597, "higher": [597, 810, 811, 821, 822, 1324], "introduc": [597, 1321, 1324], "so": [597, 927, 1324, 1332, 1333, 1335, 1336], "wise": [597, 625, 626, 1156, 1194], "var_ws_p": [597, 598, 653, 659, 665, 671], "factor_p": [597, 598, 602], "update_p_ct": [597, 602], "rated_p": [597, 602], "var_w": 602, "p_lim": 602, "rotorcentrecalc": [603, 604, 605, 606, 607, 608, 1313, 1324, 1330], "sectormanag": [609, 610, 611, 612, 613, 1313, 1324, 1334], "range_var": [609, 610, 1334], "target_var": [609, 610, 1334], "col_tind": 610, "col_tnam": [610, 1334], "colmap": [610, 1334], "var_period": 610, "360": 610, "within": [610, 898, 1195, 1196, 1205, 1206, 1215, 1216, 1225, 1226, 1299, 1314, 1316, 1318, 1324, 1326, 1329, 1332], "exist": [610, 773, 792, 904, 1144, 1332, 1335, 1339], "period": 610, "setfarmvar": [614, 615, 616, 617, 618, 619, 620, 1313, 1324, 1333, 1339], "add_var": [614, 616, 1100, 1102, 1333, 1339], "remov": [614, 620, 1326, 1333], "setxyhd": [621, 622, 623, 624, 1313], "set_xi": [621, 622], "set_h": [621, 622], "set_d": [621, 622], "tablefactor": [625, 626, 627, 628, 629, 1313, 1324], "multipli": [625, 626, 750, 751, 762, 763, 799, 800, 804, 805, 1313, 1324], "dimension": [625, 1156, 1194, 1313, 1324], "col_var": [625, 626, 688, 689], "row_var": [625, 626], "onto": [625, 626], "thrust2ct": [630, 631, 632, 633, 1313, 1324, 1330], "thrust_var": [630, 631], "wsct": [630, 652, 658, 664, 670], "var_ws_ct": [630, 631, 653, 659, 665, 671], "yaw2yawm": [634, 635, 636, 1313, 1324, 1330, 1339], "yawm2yaw": [637, 638, 639, 1313, 1324, 1330, 1339], "linear": [640, 810, 831, 832, 1313, 1330, 1338], "ti_var": [640, 641, 804, 805], "k_var": [640, 641, 724, 725, 750, 751, 756, 757, 762, 763, 767, 768, 794, 795], "ti_val": [640, 641], "cpctfile": [645, 646, 1313, 1324], "pctfile": [645, 646, 652, 653, 654, 655, 656, 657, 1313, 1327, 1330, 1334, 1335, 1337], "cp": [645, 646, 647, 648, 1313, 1324], "col_w": [645, 646, 652, 653, 658], "col_cp": [645, 646, 648], "225": [645, 646, 648, 664, 897, 1327, 1328, 1329, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "paramer": 646, "cpctfromtwo": [647, 648, 1313, 1324], "pctfromtwo": [647, 648, 658, 659, 660, 661, 662, 663, 1313], "data_source_cp": [647, 648], "data_source_ct": [647, 648, 658, 659, 664, 665, 670, 671], "col_ws_cp_fil": 648, "pd_file_read_pars_cp": 648, "pd_file_read_pars_ct": [648, 659, 665, 671], "nulltyp": [649, 650, 651, 1313, 1324, 1330], "doe": [649, 1195, 1205, 1215, 1225, 1313, 1331, 1333, 1336], "col_p": [652, 653, 658, 659], "col_ct": [652, 653, 658, 659], "densitii": [652, 653, 658, 659, 670, 671], "correct": [652, 653, 658, 659, 670, 671, 699, 750, 751, 756, 821, 1313, 1324, 1332, 1333, 1335], "wsp": [652, 658, 664, 670], "p_ct": [653, 659, 664, 665, 671], "p_p": [653, 659, 665, 671, 1339], "88": [653, 659, 665, 671, 1327, 1329, 1337, 1339], "source_p": [658, 664, 670], "source_ct": [658, 664, 670], "rpars_p": [658, 664, 670], "rpars_ct": [658, 664, 670], "data_source_p": [658, 659, 664, 665, 670, 671], "col_ws_p_fil": [658, 659], "col_ws_ct_fil": 659, "pd_file_read_pars_p": [659, 665, 671], "wsrho2pctfromtwo": [664, 665, 666, 667, 668, 669, 1313], "950": [664, 1329], "975": 664, "275": 664, "subsequ": [664, 670, 1332], "neccessarili": [664, 670, 1313, 1337], "ipars_p": [664, 670], "ipars_ct": [664, 670], "interpn_pars_p": [665, 671], "interpn_pars_ct": [665, 671], "wsti2pctfromtwo": [670, 671, 672, 673, 674, 675, 1313, 1324], "05": [670, 897, 1140, 1141, 1327, 1329, 1331, 1333, 1334, 1336, 1338, 1339], "06": [670, 1327, 1329, 1331, 1336, 1337], "07": [670, 724, 725, 773, 788, 795, 1327, 1328, 1330, 1336], "vertical_profil": [676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698], "abllogneutralwsprofil": [676, 677, 678, 1313], "log": [676, 679, 682, 685, 914, 918, 919, 923, 1313, 1319], "abllogstablewsprofil": [679, 680, 681, 1313], "stabl": [679, 685, 917, 918, 919, 920, 921, 1313, 1318, 1326], "abllogunstablewsprofil": [682, 683, 684, 1313], "unstabl": [682, 685, 922, 923, 924, 925, 1313, 1318], "abllogwsprofil": [685, 686, 687, 1313, 1327], "pick": 685, "dataprofil": [688, 689, 690, 691, 1313, 1324], "data_z": 688, "n_z": 688, "data_v": 688, "interp_par": [688, 689], "col_z": [688, 689], "read_csv": 689, "shearedprofil": [692, 693, 694, 1313, 1324], "uniformprofil": [695, 696, 697, 698, 1313], "farmord": [699, 700, 701, 702, 703, 704, 705, 1313, 1330], "warn": [699, 1327, 1329, 1331, 1334, 1337, 1338], "test": [699, 929, 935, 936, 938, 945, 946, 952, 953, 959, 960, 967, 968, 975, 1324, 1327], "purpos": [699, 1327, 1329, 1335], "give": [699, 1324, 1337], "when": [699, 1324, 1327, 1328, 1329, 1333, 1337], "base_fram": [699, 700, 724, 725], "rotorwd1": [699, 700], "rotorwd": [699, 700, 706, 707, 708, 709, 710, 725, 1313, 1330], "align": [706, 1313], "axi": [706, 842, 871, 872, 873, 874, 875, 876, 887, 890, 892, 897, 930, 940, 948, 955, 962, 970, 1008, 1019, 1029, 1156, 1194, 1195, 1199, 1205, 1209, 1215, 1219, 1225, 1229, 1301, 1302, 1303, 1304, 1313, 1317, 1318, 1335, 1339], "var_wd": [706, 707], "streamlin": [711, 712, 713, 714, 715, 716, 717, 804, 1313, 1321, 1324, 1328, 1330, 1332], "n_delstor": [711, 712], "increas": [711, 712, 1321], "max_length": [711, 712], "cl_ipar": [711, 712, 718, 719], "line": [711, 712, 718, 719, 745, 747, 750, 753, 756, 759, 767, 770, 930, 940, 948, 955, 962, 970, 1324, 1326, 1335], "100000": [711, 712, 1333], "timelin": [718, 719, 720, 721, 722, 723, 1313, 1324, 1330, 1336], "dynam": [718, 1313, 1323, 1325], "spatial": [718, 999, 1156, 1194, 1313, 1314, 1324, 1327, 1336], "max_wake_length": [718, 719], "dt_min": [718, 719, 1336], "minut": [718, 719, 1327, 1331, 1336], "20000": [718, 719], "yawedwak": [724, 725, 726, 727, 728, 729, 730, 1313, 1324, 1330], "bend": [724, 1313, 1324, 1339], "bastankhah": [724, 762, 773, 794, 1321, 1324, 1339], "port": [724, 773, 794, 1339], "agel": [724, 773, 794, 1339], "2016": [724, 773, 794, 1324], "http": [724, 750, 756, 762, 773, 794, 799, 804, 821, 927, 1296, 1299, 1322, 1324, 1325, 1326, 1337], "doi": [724, 750, 762, 773, 794, 1322], "org": [724, 750, 762, 773, 794, 799, 804, 821, 1322], "1017": [724, 773, 794], "jfm": [724, 773, 794], "595": [724, 773, 794], "porteagelmodel": [724, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 1321], "here": [724, 725, 750, 751, 762, 763, 767, 768, 794, 795, 1311, 1312, 1314, 1324, 1325, 1327, 1329, 1331, 1333, 1334, 1335, 1337, 1338, 1339], "misalign": [724, 794, 1339], "ct_max": [724, 725, 745, 746, 751, 756, 757, 762, 763, 767, 768, 773, 788, 794, 795, 799, 800, 804, 805], "9999": [724, 725, 745, 746, 751, 756, 757, 763, 767, 768, 773, 788, 794, 795, 800, 805], "58": [724, 725, 773, 788, 794, 795, 1327, 1329], "beyond": [725, 746, 751, 757, 762, 763, 768, 773, 788, 795, 799, 800, 804, 805], "determin": [725, 773, 788, 795, 863, 1324, 1332], "onset": [725, 773, 788, 795], "far": [725, 773, 788, 795, 1324], "region": [725, 773, 788, 795], "axisymmetricwakemodel": [731, 732, 733, 742, 745, 1321], "distslicedwakemodel": [731, 734, 735, 736, 737, 738, 739, 740, 741, 794, 1321], "r": [731, 732, 742, 743, 744, 745, 748, 749, 750, 754, 756, 760, 762, 765, 767, 771, 799, 802, 804, 807, 1321], "separ": [731, 734, 1321, 1324, 1332], "abil": [731, 734], "calc_wakes_spsel_x_r": [731, 732, 742, 744, 745, 749, 750, 756, 762, 767, 799, 804], "calc_wakes_spsel_x_yz": [731, 733, 734, 736, 742, 745, 750, 756, 762, 767, 794, 797, 799, 804], "n_r_per_x": [732, 744, 748, 749, 754, 760, 771], "n_sp_sel": [732, 733, 736, 743, 744, 747, 749, 753, 759, 765, 770, 797, 802, 807], "sp_sel": [732, 733, 736, 743, 744, 747, 749, 753, 759, 765, 770, 773, 786, 797, 802, 807], "non": [732, 733, 736, 743, 744, 747, 749, 753, 759, 765, 770, 797, 802, 807, 1071, 1111, 1144, 1156, 1194, 1246, 1259, 1277, 1325, 1326], "yz": [733, 734, 736, 797, 869, 876, 1321, 1324], "n_yz_per_x": [733, 736, 797], "denpend": [734, 1321], "superp": 734, "gaussianwakemodel": [742, 743, 744, 762, 799, 804, 1321], "gaussian": [742, 1321], "calc_amplitude_sigma_spsel": [742, 743, 762, 765, 799, 802, 804, 807], "amplitud": [742, 743, 762, 765, 799, 802, 804, 807], "sigma": [742, 743, 762, 765, 799, 802, 804, 807, 1324], "amsi": [743, 765, 802, 807], "tophatwakemodel": [745, 746, 747, 748, 749, 750, 756, 767, 1321], "calc_wake_radiu": [745, 748, 750, 754, 756, 760, 767, 771], "calc_centreline_wake_delta": [745, 747, 750, 753, 756, 759, 767, 770], "wake_r": [747, 748, 753, 754, 759, 760, 770, 771], "cl_del": [747, 753, 759, 770], "varlu": [747, 753, 759, 770], "crespohernandeztiwak": [750, 751, 752, 753, 754, 755, 1321, 1324, 1330], "crespo": [750, 1321], "hernandez": [750, 1321], "empir": [750, 1321], "correl": [750, 1156, 1194, 1321], "1016": [750, 762], "0167": 750, "6105": 750, "95": [750, 1327, 1329, 1338], "00033": 750, "we": [750, 1156, 1194, 1324, 1325, 1326, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "eqn": 750, "17": [750, 1327, 1329, 1333, 1338], "15": [750, 1327, 1328, 1329, 1331, 1333, 1334, 1337, 1338], "1088": [750, 799, 804], "1742": [750, 799, 804], "6596": [750, 799, 804], "625": 750, "012039": 750, "a_near": [750, 751], "a_far": [750, 751], "e1": [750, 751], "e2": [750, 751], "e3": [750, 751], "use_ambti": [750, 751], "sbeta_factor": [750, 751, 762, 763, 799, 800, 804, 805], "sbeta": [750, 751, 762, 763, 799, 800, 804, 805], "near_wake_d": [750, 751], "362": 751, "73": [751, 1329], "83": [751, 1156, 1194, 1329, 1336], "0325": 751, "32": [751, 1329], "iectiwak": [756, 757, 758, 759, 760, 761, 1321, 1330], "iec": [756, 1321], "64100": [756, 1321], "2005": [756, 1321], "8": [756, 800, 821, 840, 842, 847, 1321, 1322, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "orbit": 756, "dtu": 756, "dk": 756, "3750291": 756, "2009_31": 756, "pdf": [756, 799, 804, 821], "v2": 756, "volluk": 756, "implement": [756, 1329, 1332], "document": [756, 1156, 1194, 1314, 1324], "frandsen": [756, 799, 800, 1324], "2019": [756, 757], "opening_angl": [756, 757], "open": [756, 757, 1322, 1324], "21": [756, 757, 1327, 1329, 1333, 1336], "6": [756, 757, 1156, 1194, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "iec_typ": 757, "bastankhahwak": [762, 763, 764, 765, 766, 1321, 1330], "j": [762, 1156, 1194], "renen": 762, "2014": 762, "01": [762, 1327, 1329, 1330, 1331, 1336, 1337], "002": 762, "modif": 762, "fit": 762, "better": 762, "jensenwak": [767, 768, 769, 770, 771, 772, 1321, 1330], "jensen": [767, 1156, 1194, 1321, 1330], "repetit": [773, 1321], "avoid": [773, 1156, 1194, 1321, 1339], "mdata_kei": [773, 779], "x0": [773, 787], "NEAR": [773, 780], "r_pc": [773, 782], "r_pc_": [773, 783], "ampl_near": [773, 775], "delta_near": [773, 778], "ampl_far": [773, 774], "sigma_y_far": [773, 784], "sigma_z_far": [773, 785], "delta_far": [773, 777], "calc_data": [773, 789], "has_data": [773, 792], "clean": [773, 790], "gamma": [789, 1339], "radiant": [789, 1339], "porteagelwak": [794, 795, 796, 797, 798, 1321, 1330], "turboparkwak": [799, 800, 801, 802, 803, 1321, 1324, 1330], "turbopark": [799, 804, 1321, 1324], "iopscienc": [799, 804], "iop": [799, 804], "articl": [799, 804, 1322], "2265": [799, 804], "022063": [799, 804], "c1": [799, 800, 1170, 1171], "c2": [799, 800, 1170, 1171], "turboparkwakeix": [804, 805, 806, 807, 808, 809, 1321, 1330], "own": [804, 805, 1335], "linearsuperposit": [810, 811, 812, 813, 814, 1313, 1324, 1330], "supersposit": [810, 815, 825, 1313], "rescal": [810, 815, 821, 825, 1313], "scale": [810, 811, 815, 816, 825, 826, 1081, 1082, 1091, 1099, 1170, 1171, 1328, 1336], "rule": [810, 811, 815, 816, 825, 826, 1081, 1082, 1091, 1099, 1324, 1334, 1339], "lim_low": [810, 811, 821, 822], "lim_high": [810, 811, 821, 822], "svar": [810, 811, 815, 816, 825, 826], "vafriabl": [810, 811], "input_farm_var": [810, 814, 815, 820, 825, 830], "source_turbin": [811, 816, 826], "source_turbine_amb": [811, 816, 826], "source_turbine_": [811, 816, 826], "maxsuperposit": [815, 816, 817, 818, 819, 820, 1313, 1330], "maximum": [815, 871, 872, 873, 874, 875, 876, 1156, 1194, 1313, 1324, 1338], "productsuperposit": [821, 822, 823, 824, 1313, 1324, 1330], "product": [821, 1156, 1194, 1313, 1330], "dimensionless": 821, "deficit": [821, 1321, 1332, 1337, 1338, 1339], "rather": 821, "equival": [821, 1332, 1337, 1339], "arxiv": 821, "2010": 821, "03873": 821, "equat": [821, 1324], "quadraticsuperposit": [825, 826, 827, 828, 829, 830, 1313, 1330], "quadrat": [825, 831, 832, 1313, 1330], "tisuperposit": [831, 832, 833, 834, 1313, 1330], "ti_superp": [831, 832], "power_n": [831, 832], "superp_to_amb": [831, 832], "anim": [835, 836, 837, 838, 839, 849, 864, 871, 872, 873, 874, 875, 876, 1317, 1324, 1336], "artist": [835, 837, 839, 864, 1317, 1324], "fig": [835, 836, 837, 839, 842, 849, 864, 871, 872, 873, 874, 875, 876, 888, 1296, 1318, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "pyplot": [835, 836, 838, 842, 892, 897, 930, 940, 948, 955, 962, 970, 1008, 1019, 1029, 1199, 1209, 1219, 1229, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "figur": [835, 836, 840, 842, 864, 869, 871, 872, 873, 874, 875, 876, 884, 888, 889, 893, 929, 930, 936, 938, 940, 946, 948, 953, 955, 960, 962, 968, 970, 976, 997, 999, 1006, 1008, 1017, 1019, 1024, 1029, 1068, 1081, 1090, 1092, 1098, 1100, 1195, 1199, 1205, 1209, 1215, 1219, 1225, 1229, 1239, 1248, 1264, 1296, 1318, 1324, 1329, 1331, 1335, 1337], "add_gener": [835, 837, 1336], "gen": [835, 837, 839], "verbostii": 838, "artistanim": 838, "farmlayoutoutput": [840, 841, 842, 843, 844, 845, 846, 847, 848, 1317, 1324, 1327, 1329, 1331, 1334, 1337, 1338], "plot": [840, 842, 845, 846, 847, 848, 869, 871, 872, 873, 874, 875, 876, 884, 888, 889, 890, 892, 893, 895, 897, 930, 940, 948, 955, 962, 970, 1199, 1209, 1219, 1229, 1296, 1317, 1324, 1328, 1329, 1333, 1334, 1335, 1337, 1338, 1339], "layout": [840, 842, 843, 844, 845, 846, 847, 848, 888, 889, 976, 997, 999, 1006, 1008, 1017, 1019, 1024, 1029, 1068, 1081, 1090, 1092, 1098, 1100, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1314, 1317, 1323, 1324, 1325, 1336, 1337], "fre": 840, "from_r": [840, 841], "results_st": [840, 841], "from_result": [840, 841], "get_layout_data": [840, 843], "get_layout_dict": [840, 844], "get_figur": [840, 842, 847, 884, 888, 893, 1327, 1329, 1331, 1334, 1337, 1338], "color_bi": [840, 842, 1331, 1337, 1338], "fontsiz": [840, 842, 847], "figsiz": [840, 842, 849, 864, 871, 872, 873, 874, 875, 876, 890, 892, 897, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338], "annot": [840, 842, 1331, 1337, 1338], "write_plot": [840, 847], "write": [840, 845, 846, 847, 848, 849, 869, 877, 880, 881, 883, 884, 889, 890, 893, 895, 906, 912, 1297, 1317, 1318, 1324], "write_xyh": [840, 848], "write_csv": [840, 845, 881, 883], "write_json": [840, 846], "format_col2var": [840, 849, 869, 877, 880, 881, 884, 890, 893, 895], "print_model": [840, 849, 869, 877, 879, 881, 884, 890, 893, 895, 976, 997, 999, 1006, 1014, 1017, 1022, 1081, 1090, 1092, 1098], "model_typ": [840, 849, 869, 877, 878, 881, 884, 890, 893, 895], "titl": [842, 871, 872, 873, 874, 875, 876, 887, 888, 889, 890, 892, 895, 897, 1195, 1199, 1205, 1209, 1215, 1219, 1225, 1229, 1322, 1327, 1331, 1333, 1334, 1336, 1337, 1338], "ax": [842, 849, 864, 871, 872, 873, 874, 875, 876, 890, 892, 897, 929, 930, 936, 938, 940, 946, 948, 953, 955, 960, 962, 968, 970, 976, 997, 999, 1006, 1008, 1017, 1019, 1024, 1029, 1068, 1081, 1090, 1092, 1098, 1100, 1195, 1199, 1205, 1209, 1215, 1219, 1225, 1229, 1239, 1248, 1264, 1327, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338], "normalize_d": 842, "ret_im": [842, 864, 871, 872, 873, 874, 875, 876, 1336], "barg": [842, 1199, 1209, 1219, 1229], "anno_delx": 842, "anno_d": 842, "scatter": [842, 864, 1324], "color": [842, 871, 872, 873, 874, 875, 876, 930, 940, 948, 955, 962, 970, 1324, 1337], "mean_rew": [842, 1331, 1337, 1338], "etc": [842, 1329, 1331], "wrt": [842, 849, 858, 859, 860, 861, 862, 929, 934, 936, 938, 944, 946, 951, 953, 958, 960, 966, 968, 974, 1033, 1043], "plt": [842, 864, 871, 872, 873, 874, 875, 876, 892, 897, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "No": 842, "matplotlib": [842, 864, 871, 872, 873, 874, 875, 876, 930, 940, 948, 953, 955, 962, 970, 1008, 1019, 1029, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "im": [842, 864, 871, 872, 873, 874, 875, 876], "pathcollect": [842, 864], "farmresultsev": [849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 1317, 1324, 1331, 1333, 1336, 1337, 1338], "farm_calc": 849, "weinsum": [849, 868], "rh": [849, 868], "einstein": [849, 868, 1324], "last": [849, 868, 927, 1326], "vars_op": [849, 866, 867], "some": [849, 865, 866, 867, 926, 1156, 1194, 1318, 1329, 1332, 1333, 1339], "reduce_turbin": [849, 867], "reduce_al": [849, 865], "states_op": [849, 865], "turbines_op": [849, 865], "calc_states_mean": [849, 858], "calc_states_sum": [849, 860], "calc_states_std": [849, 859], "deviat": [849, 859], "calc_turbine_mean": [849, 861], "calc_turbine_sum": [849, 862], "calc_farm_mean": [849, 854], "calc_farm_sum": [849, 855], "calc_mean_farm_pow": [849, 857, 1331, 1333, 1337, 1338], "calc_turbine_yield": [849, 856, 863, 1337], "annual": [849, 863, 1331, 1337, 1338], "add_capac": [849, 851, 1337], "p_nom": [849, 851], "calc_farm_yield": [849, 856, 1331, 1338], "turbine_yield": [849, 856], "power_uncert": [849, 856], "p75": [849, 856, 1324], "p90": [849, 856, 1324], "add_effici": [849, 852, 1337, 1338], "calc_farm_effici": [849, 853, 1331, 1337, 1338], "gen_stdata": [849, 864, 1336], "fulli": [854, 855, 865, 1195, 1196, 1205, 1206, 1215, 1216, 1225, 1226, 1325], "contract": [854, 855, 865, 1081, 1082, 1091, 1099], "uncertainti": 856, "trigger": 856, "farm_yield": 856, "_type_": 859, "_description_": 859, "hour": 863, "delta_t": 863, "p_unit_w": 863, "retur": 863, "durat": 863, "datetime64": 863, "seri": [863, 1324, 1332, 1337], "legloc": [864, 1336], "right": [864, 868, 873], "legend": [864, 887, 888, 889], "It": [868, 1325, 1326, 1328, 1331, 1333, 1334], "about": [868, 1046, 1329, 1333], "hand": 868, "einsum": [868, 1024, 1060, 1061, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "express": [868, 1144], "convent": [868, 927, 1156, 1194], "mention": [868, 1327, 1331], "obligatori": 868, "flowplots2d": [869, 870, 871, 872, 873, 874, 875, 876, 1317, 1324, 1328, 1329, 1331, 1335, 1336, 1338, 1339], "2d": [869, 871, 872, 873, 874, 875, 876, 929, 953, 960, 1317, 1318, 1338], "flow": [869, 871, 872, 873, 874, 875, 876, 1317, 1323, 1324, 1325, 1331, 1332, 1335, 1336], "runner": [869, 870, 1024, 1026, 1068, 1239, 1249, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1324, 1329, 1336, 1337, 1338], "get_mean_fig_xi": [869, 874, 1329, 1338], "resolut": [869, 871, 872, 873, 874, 875, 876, 1328, 1329, 1331, 1335, 1336, 1338, 1339], "xmin": [869, 871, 872, 874, 875, 1328, 1329, 1331, 1339], "ymin": [869, 871, 873, 874, 876, 1328, 1329, 1339], "get_mean_fig_xz": [869, 875], "x_direct": [869, 872, 873, 875, 876, 1331], "270": [869, 872, 873, 875, 876, 1327, 1331, 1333, 1335, 1339], "xz": [869, 872, 875, 1324], "get_mean_fig_yz": [869, 876], "gen_states_fig_xi": [869, 871, 1328, 1335, 1336, 1339], "gen_states_fig_xz": [869, 872, 1331], "gen_states_fig_yz": [869, 873, 1339], "xmax": [871, 872, 874, 875, 1328, 1329, 1331, 1336, 1339], "ymax": [871, 873, 874, 876, 1328, 1329, 1336, 1339], "xlabel": [871, 872, 874, 875], "ylabel": [871, 873, 874, 876], "xspace": [871, 872, 874, 875], "500": [871, 872, 873, 874, 875, 876, 1170, 1171, 1327, 1328, 1329, 1330, 1331, 1334, 1336, 1338], "yspace": [871, 873, 874, 876], "var_min": [871, 872, 873, 874, 875, 876], "var_max": [871, 872, 873, 874, 875, 876], "normalize_xi": [871, 874], "normalize_var": [871, 872, 873, 874, 875, 876], "vlabel": [871, 872, 873, 874, 875, 876], "add_bar": [871, 872, 873, 874, 875, 876], "cmap": [871, 872, 873, 874, 875, 876, 888, 889, 1333], "quiver_n": [871, 872, 873, 1328, 1336], "quiver_par": [871, 872, 873, 1328, 1336], "ret_stat": [871, 872, 873, 874, 875, 876], "space": [871, 872, 873, 874, 875, 876, 1130, 1156, 1158, 1164, 1194, 1205, 1206, 1248, 1264, 1270, 1316, 1324], "contourf": [871, 872, 873, 874, 875, 876], "pure": [871, 872, 873, 874, 875, 876, 1114, 1119, 1124, 1129, 1135, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1195, 1205, 1315, 1316, 1324], "minimum": [871, 872, 873, 874, 875, 876], "bar": [871, 872, 873, 874, 875, 876, 1156, 1194, 1199, 1209, 1219, 1229, 1281, 1282, 1338], "colormap": [871, 872, 873, 874, 875, 876], "th": [871, 872, 873, 1156, 1194, 1324], "quiver": [871, 872, 873], "usag": [871, 872, 873, 874, 875, 876, 1324], "si": [871, 872, 873, 874, 875, 876], "quadmesh": [871, 872, 873, 874, 875, 876], "quadcontourset": [871, 872, 873, 874, 875, 876], "zmin": [872, 873, 875, 876, 1331, 1339], "zmax": [872, 873, 875, 876, 1331, 1339], "zlabel": [872, 873, 875, 876], "zspace": [872, 873, 875, 876], "normalize_x": [872, 875], "normalize_z": [872, 873, 875, 876], "north": [872, 873, 875, 876, 1334], "ech": [872, 873], "normalize_i": [873, 876], "left": [873, 1336], "weight_turbin": [874, 875, 876], "job": 877, "handi": 877, "format_dict": [880, 906, 912], "underli": [880, 976, 977, 980, 997, 998, 999, 1000, 1001, 1006, 1007, 1009, 1017, 1018, 1081, 1082, 1083, 1090, 1091, 1092, 1093, 1094, 1098, 1099, 1114, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1126, 1129, 1130, 1131, 1135, 1137, 1140, 1145, 1146, 1147, 1151, 1152, 1153, 1157, 1158, 1159, 1164, 1165, 1166, 1170, 1171, 1172, 1176, 1177, 1178, 1182, 1183, 1184, 1188, 1189, 1191], "flappi": [880, 906, 910, 1324, 1325], "fv": [880, 897, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "4f": [880, 906, 908, 912], "resultswrit": [881, 882, 883, 1317, 1324], "roseplotoutput": [884, 885, 886, 887, 888, 889, 893, 1317, 1324, 1334], "rose": [884, 886, 888, 889, 893, 1317, 1323, 1324, 1325, 1327, 1329, 1334, 1337], "get_data_info": [884, 887, 893], "dname": [884, 887, 893], "descript": [884, 887, 893, 1305, 1306, 1312, 1313, 1314, 1321], "sector": [884, 886, 888, 889, 893, 1323, 1324, 1325, 1332, 1337], "var_bin": [884, 886, 888, 889, 893], "px": [884, 888, 889, 893], "write_figur": [884, 889, 893], "start0": [886, 888, 889], "bin": [886, 888, 889, 1324, 1326, 1327, 1337, 1338], "seper": [886, 888, 889], "relev": [886, 888, 889, 1313, 1321], "minu": [886, 888, 889], "half": [886, 888, 889, 960, 1318], "width": [886, 888, 889, 1324], "pd": [886, 888, 889, 1333, 1334, 1339], "long": [887, 1324], "text": 887, "turbo": [888, 889], "layout_dict": [888, 889], "title_dict": [888, 889], "ret_data": [888, 889], "stateturbinemap": [890, 891, 892, 1317, 1324, 1333], "heat": [890, 892, 1317, 1324], "plot_map": [890, 892, 1333], "subplot": [892, 897, 1327, 1329, 1333, 1335, 1336, 1337, 1338], "pcolormesh": 892, "statesroseplotoutput": [893, 894, 1317, 1324, 1327, 1329, 1331, 1334, 1337, 1338], "ws_var": [893, 894], "turbinetypecurv": [895, 896, 897, 1317, 1324, 1327, 1333], "plot_curv": [895, 897, 1327, 1333], "p_max": [895, 897, 929, 932, 936, 938, 942, 946, 949, 953, 956, 960, 964, 968, 972, 1329, 1333], "x_label": 897, "y_label": 897, "ws_min": [897, 1334], "ws_max": [897, 1334], "30": [897, 1327, 1329, 1336, 1337, 1338, 1339], "ws_step": 897, "pmax_arg": 897, "mask": [897, 1323, 1324, 1325, 1334], "labl": 897, "minim": [897, 929, 933, 936, 938, 943, 946, 950, 953, 957, 960, 965, 968, 973, 999, 1000, 1024, 1051, 1052, 1053, 1068, 1081, 1082, 1091, 1098, 1099, 1100, 1108, 1109, 1129, 1130, 1135, 1145, 1146, 1158, 1188, 1195, 1196, 1203, 1205, 1206, 1213, 1215, 1216, 1223, 1225, 1226, 1235, 1236, 1239, 1244, 1248, 1249, 1256, 1257, 1264, 1270, 1275, 1314, 1316, 1329], "dbase": 898, "must": [900, 901, 999, 1314, 1328], "py": [901, 1327, 1329, 1331, 1334, 1337, 1338], "file_man": 901, "keyerror": 904, "pandasfilehelp": [906, 907, 908, 909, 910, 911, 912, 1318], "default_reading_paramet": [906, 909], "support": [906, 1156, 1194, 1324, 1325, 1326, 1332], "default_writing_paramet": [906, 910], "data_file_format": [906, 907], "export": 906, "default_format_dict": [906, 908], "bz2": [906, 907, 909, 910], "gz": [906, 907, 909, 910, 1324, 1331, 1336, 1337, 1338], "zip": [906, 907, 909, 910], "h5": [906, 907, 909, 910], "mode": [906, 910], "5f": [906, 908], "6f": [906, 908], "3f": [906, 908], "read_fil": [906, 911, 1279, 1297], "write_fil": [906, 912], "calc_w": [913, 916, 917, 922, 1319], "ustar": [913, 915, 917, 921, 922, 925, 1319], "friction": [913, 915, 917, 921, 922, 925, 1319], "veloc": [913, 915, 917, 921, 922, 925, 1319], "logz": [914, 919, 923, 1319], "lz": [914, 918, 919, 923], "ws_ref": [915, 921, 925, 1319], "h_ref": [915, 921, 925, 1319], "refer": [915, 916, 921, 925, 1156, 1194, 1296, 1319, 1327, 1339], "height0": [916, 1319], "ws0": [916, 1319], "psi": [917, 920, 922, 924, 1319], "lgz": [918, 1319], "obukhov": [920, 921, 924, 925, 1327], "all_subclass": [926, 1318], "cl": [926, 936, 937, 1318], "cubic_root": [927, 1318, 1324], "a0": [927, 1318], "a1": [927, 1318], "a2": [927, 1318], "a3": [927, 1318], "root": [927, 1318], "polynomi": [927, 1318], "work": [927, 1324, 1326, 1328, 1336, 1338], "fast": [927, 1325], "you": [927, 1156, 1194, 1326, 1330, 1331, 1332, 1335, 1337, 1339], "spare": 927, "yourself": [927, 1327], "github": [927, 1323, 1324, 1325, 1326], "com": [927, 1296, 1299, 1324, 1325, 1326], "opencv": 927, "blob": 927, "master": 927, "modul": 927, "calib3d": 927, "src": 927, "polynom_solv": 927, "cpp": 927, "n_a0": 927, "delta_wd": [928, 1318], "wd_a": [928, 1318], "wd_b": [928, 1318], "close": [929, 953, 1318, 1328, 1336], "geometri": [929, 931, 935, 936, 937, 938, 939, 941, 945, 946, 952, 953, 959, 960, 963, 967, 968, 969, 971, 975, 976, 977, 1195, 1196, 1205, 1206, 1215, 1216, 1225, 1226, 1280, 1298, 1314, 1316, 1318, 1329], "p_min": [929, 932, 933, 936, 938, 942, 943, 946, 949, 950, 953, 956, 957, 960, 964, 965, 968, 972, 973, 1329], "points_dist": [929, 934, 936, 938, 944, 946, 951, 953, 958, 960, 966, 968, 974], "return_nearest": [929, 934, 936, 938, 944, 946, 951, 953, 958, 960, 966, 968, 974], "points_insid": [929, 935, 936, 938, 945, 946, 952, 953, 959, 960, 967, 968, 975], "insid": [929, 935, 936, 938, 945, 946, 952, 953, 959, 960, 961, 967, 968, 975, 976, 977, 997, 1314, 1328], "add_to_figur": [929, 930, 936, 938, 940, 946, 948, 953, 955, 960, 962, 968, 970, 1329], "show_boundari": [929, 930, 936, 938, 940, 946, 948, 953, 955, 960, 962, 968, 970], "invers": [929, 931, 936, 938, 941, 946, 953, 960, 963, 968, 971, 1156, 1194, 1339], "invert": [929, 931, 936, 938, 941, 946, 953, 960, 963, 968, 971, 1318], "fill_mod": [930, 940, 946, 948, 953, 955, 960, 962, 970, 1329], "inside_slategrai": [930, 940, 970], "pars_boundari": [930, 940, 948, 955, 962, 970], "pars_dist": [930, 940, 948, 955, 962, 970, 1329], "dist": [930, 934, 940, 944, 948, 951, 955, 958, 962, 966, 970, 974, 1000, 1156, 1194], "dist_insid": [930, 940, 948, 955, 962, 970, 1329], "dist_outsid": [930, 940, 948, 955, 962, 970, 1329], "inside_": [930, 940, 948, 955, 962, 970], "outside_": [930, 940, 948, 955, 962, 970], "command": [930, 940, 948, 955, 962, 970, 1326], "invertedareageometri": [931, 941, 963, 968, 969, 970, 971, 972, 973, 974, 975, 1318], "probe": [934, 935, 944, 945, 951, 952, 958, 959, 966, 967, 974, 975, 1024, 1026], "nearest": [934, 944, 951, 958, 966, 974], "bundari": [934, 944, 951, 958, 966, 974], "smallest": [934, 944, 951, 958, 966, 974], "p_nearest": [934, 944, 951, 958, 966, 974], "areaintersect": [936, 937, 1318], "intersect": [936, 1299, 1300, 1318], "areaunion": [938, 939, 940, 941, 942, 943, 944, 945, 1318], "union": [938, 1318], "cobnstructor": [946, 947], "closedpolygon": [953, 954, 955, 956, 957, 958, 959, 1318, 1329], "polygon": [953, 954, 1280, 1318, 1329], "poli": 953, "halfplan": [960, 961, 962, 963, 964, 965, 966, 967, 1318], "orthogon": 960, "opt": [976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1305, 1324, 1329], "constraint": [976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1017, 1018, 1024, 1027, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1047, 1051, 1054, 1068, 1100, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1165, 1171, 1177, 1183, 1189, 1195, 1205, 1215, 1225, 1239, 1240, 1248, 1249, 1250, 1264, 1271, 1315, 1329], "areageometryconstraint": [976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1314], "farmconstraint": [976, 999, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1314], "constrain": [976, 997, 1314], "sel_turbin": [976, 977, 997, 999, 1000, 1006, 1007, 1015, 1017, 1018, 1023, 1024, 1026, 1062, 1068, 1081, 1090, 1092, 1098, 1100, 1239, 1248, 1264], "disc_insid": [976, 977], "ensur": [976, 977], "full": [976, 977, 1324, 1327, 1331], "problem": [976, 977, 980, 981, 984, 985, 997, 998, 999, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1017, 1018, 1024, 1026, 1027, 1028, 1031, 1032, 1033, 1038, 1039, 1041, 1042, 1043, 1046, 1060, 1061, 1068, 1081, 1082, 1083, 1084, 1085, 1090, 1091, 1092, 1093, 1094, 1095, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1324, 1329, 1337], "n_compon": [976, 984, 985, 988, 995, 996, 997, 999, 1004, 1005, 1006, 1012, 1016, 1017, 1033, 1034, 1035, 1042, 1043, 1081, 1085, 1087, 1088, 1089, 1090, 1092, 1096, 1097, 1098, 1114, 1118, 1119, 1123, 1124, 1128, 1129, 1134, 1135, 1139, 1140, 1142, 1143, 1144, 1145, 1150, 1151, 1155, 1157, 1162, 1163, 1164, 1168, 1169, 1170, 1174, 1175, 1176, 1180, 1181, 1182, 1186, 1187, 1188, 1190, 1191, 1193], "compon": [976, 979, 980, 981, 982, 984, 985, 988, 995, 996, 997, 999, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1012, 1016, 1017, 1024, 1033, 1043, 1054, 1055, 1068, 1081, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1092, 1094, 1095, 1096, 1097, 1098, 1100, 1114, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1131, 1132, 1134, 1135, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1193, 1194, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1301, 1302, 1304, 1329], "vardeps_float": [976, 995, 997, 999, 1005, 1006, 1016, 1017, 1081, 1089, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191], "calc_individu": [976, 980, 997, 999, 1001, 1006, 1009, 1017, 1081, 1083, 1090, 1092, 1094, 1098, 1114, 1116, 1119, 1121, 1124, 1126, 1129, 1131, 1135, 1137, 1140, 1145, 1147, 1151, 1153, 1157, 1159, 1164, 1166, 1170, 1172, 1176, 1178, 1182, 1184, 1188, 1191], "vars_int": [976, 979, 980, 981, 984, 985, 997, 999, 1001, 1002, 1006, 1009, 1010, 1017, 1024, 1031, 1032, 1033, 1038, 1039, 1041, 1042, 1043, 1064, 1065, 1068, 1070, 1071, 1072, 1073, 1081, 1083, 1084, 1085, 1090, 1092, 1094, 1095, 1098, 1100, 1110, 1111, 1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1195, 1197, 1198, 1205, 1207, 1208, 1215, 1217, 1218, 1225, 1227, 1228, 1239, 1240, 1245, 1246, 1248, 1250, 1258, 1259, 1260, 1261, 1264, 1271, 1276, 1277], "vars_float": [976, 979, 980, 981, 984, 985, 997, 999, 1001, 1002, 1006, 1009, 1010, 1017, 1024, 1031, 1032, 1033, 1038, 1039, 1041, 1042, 1043, 1064, 1065, 1068, 1070, 1071, 1072, 1073, 1081, 1083, 1084, 1085, 1090, 1092, 1094, 1095, 1098, 1100, 1110, 1111, 1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1195, 1197, 1198, 1205, 1207, 1208, 1215, 1217, 1218, 1225, 1227, 1228, 1239, 1240, 1245, 1246, 1248, 1250, 1258, 1259, 1260, 1261, 1264, 1271, 1276, 1277], "problem_result": [976, 980, 981, 984, 985, 997, 999, 1001, 1002, 1006, 1009, 1010, 1017, 1031, 1032, 1041, 1042, 1081, 1083, 1084, 1085, 1090, 1092, 1094, 1095, 1098, 1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1197, 1198, 1207, 1208, 1217, 1218, 1227, 1228, 1240, 1250, 1271, 1329], "calc_popul": [976, 981, 997, 999, 1002, 1006, 1010, 1017, 1081, 1084, 1090, 1092, 1095, 1098, 1114, 1117, 1119, 1122, 1124, 1127, 1129, 1132, 1135, 1138, 1140, 1145, 1148, 1151, 1154, 1157, 1160, 1164, 1167, 1170, 1173, 1176, 1179, 1182, 1185, 1188, 1191], "n_sel_turbin": [976, 997, 999, 1006, 1013, 1017, 1021, 1024, 1056, 1068, 1070, 1071, 1081, 1090, 1092, 1098, 1100, 1110, 1111, 1239, 1245, 1246, 1248, 1258, 1259, 1264, 1276, 1277], "add_to_layout_figur": [976, 997, 999, 1006, 1008, 1017, 1019, 1024, 1029, 1068, 1081, 1090, 1092, 1098, 1100, 1239, 1248, 1264], "get_bound": [976, 997, 999, 1006, 1114, 1119, 1124, 1129, 1135, 1140, 1144, 1145, 1151], "check_individu": [976, 997, 999, 1006, 1114, 1119, 1124, 1129, 1135, 1140, 1142, 1145, 1151], "constraint_valu": [976, 997, 999, 1006, 1024, 1034, 1035, 1068, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1142, 1143, 1145, 1151, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "fullfil": [976, 997, 999, 1006, 1024, 1034, 1035, 1068, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1142, 1143, 1145, 1151, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "check_popul": [976, 997, 999, 1006, 1114, 1119, 1124, 1129, 1135, 1140, 1143, 1145, 1151], "component_nam": [976, 982, 997, 999, 1006, 1017, 1081, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191], "var_names_int": [976, 994, 997, 999, 1006, 1017, 1024, 1067, 1068, 1081, 1090, 1092, 1098, 1100, 1113, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1214, 1215, 1225, 1238, 1239, 1248, 1263, 1264], "n_vars_int": [976, 979, 980, 981, 984, 985, 990, 996, 997, 999, 1001, 1002, 1006, 1009, 1010, 1017, 1024, 1031, 1032, 1033, 1038, 1039, 1041, 1042, 1043, 1045, 1049, 1053, 1058, 1064, 1065, 1068, 1070, 1071, 1072, 1073, 1081, 1083, 1084, 1085, 1090, 1092, 1094, 1095, 1098, 1100, 1104, 1107, 1109, 1110, 1111, 1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1192, 1195, 1197, 1198, 1205, 1207, 1208, 1210, 1212, 1213, 1215, 1217, 1218, 1225, 1227, 1228, 1231, 1234, 1236, 1239, 1240, 1245, 1246, 1248, 1250, 1252, 1255, 1257, 1258, 1259, 1260, 1261, 1264, 1271, 1276, 1277, 1329], "var_names_float": [976, 993, 997, 999, 1006, 1017, 1024, 1066, 1068, 1081, 1090, 1092, 1098, 1100, 1112, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1204, 1205, 1215, 1224, 1225, 1237, 1239, 1247, 1248, 1262, 1264, 1278], "n_vars_float": [976, 979, 980, 981, 984, 985, 989, 995, 997, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1016, 1017, 1024, 1031, 1032, 1033, 1038, 1039, 1041, 1042, 1043, 1044, 1048, 1052, 1057, 1064, 1065, 1068, 1070, 1071, 1072, 1073, 1081, 1083, 1084, 1085, 1089, 1090, 1092, 1094, 1095, 1098, 1100, 1103, 1106, 1108, 1110, 1111, 1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1140, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188, 1191, 1192, 1195, 1197, 1198, 1200, 1202, 1203, 1205, 1207, 1208, 1215, 1217, 1218, 1220, 1222, 1223, 1225, 1227, 1228, 1230, 1233, 1235, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1248, 1250, 1251, 1254, 1256, 1258, 1259, 1260, 1261, 1264, 1271, 1272, 1274, 1275, 1276, 1277, 1329], "vardeps_int": [976, 996, 997, 999, 1006, 1017, 1081, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191], "rename_vars_int": [976, 992, 997, 999, 1006, 1017, 1081, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191], "renam": [976, 991, 992, 997, 999, 1006, 1017, 1081, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1324], "rename_vars_float": [976, 991, 997, 999, 1006, 1017, 1081, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191], "finalize_individu": [976, 984, 997, 999, 1006, 1017, 1024, 1041, 1068, 1081, 1085, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1240, 1248, 1250, 1264, 1271], "champion": [976, 984, 997, 999, 1006, 1017, 1024, 1041, 1068, 1081, 1085, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1240, 1248, 1250, 1264, 1271], "finalize_popul": [976, 985, 997, 999, 1006, 1017, 1024, 1042, 1068, 1081, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "ana_deriv": [976, 979, 997, 999, 1006, 1017, 1081, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191], "analyt": [976, 979, 997, 999, 1006, 1017, 1033, 1081, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191], "possibl": [976, 979, 997, 999, 1006, 1017, 1081, 1090, 1092, 1098, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1156, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1194, 1334], "info": [976, 978, 997, 999, 1006, 1017, 1024, 1068, 1081, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "finish": [976, 987, 997, 999, 1006, 1017, 1024, 1068, 1081, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1329], "farmoptproblem": [977, 998, 1000, 1007, 1018, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1082, 1090, 1091, 1093, 1098, 1099, 1115, 1120, 1125, 1130, 1146, 1152, 1158, 1165, 1171, 1177, 1183, 1189, 1314, 1324], "optim": [977, 984, 998, 1000, 1006, 1007, 1018, 1024, 1026, 1030, 1041, 1064, 1065, 1068, 1070, 1071, 1072, 1073, 1082, 1085, 1090, 1091, 1093, 1098, 1099, 1100, 1110, 1111, 1115, 1120, 1125, 1130, 1140, 1146, 1152, 1156, 1158, 1165, 1171, 1177, 1183, 1189, 1194, 1195, 1205, 1215, 1225, 1239, 1240, 1245, 1246, 1248, 1250, 1258, 1259, 1260, 1261, 1264, 1271, 1276, 1277, 1305, 1314, 1315, 1316, 1322, 1323, 1324, 1325], "iwopi": [977, 1000, 1007, 1018, 1024, 1026, 1027, 1028, 1033, 1043, 1140, 1191, 1195, 1205, 1215, 1225, 1314, 1316, 1325, 1329], "cannot": 979, "differenti": [979, 1033, 1043], "n_sel_compon": [979, 980, 981, 1001, 1002, 1009, 1010, 1083, 1084, 1094, 1095, 1116, 1117, 1121, 1122, 1126, 1127, 1131, 1132, 1137, 1138, 1147, 1148, 1153, 1154, 1159, 1160, 1166, 1167, 1172, 1173, 1178, 1179, 1184, 1185], "n_pop": [981, 985, 1002, 1010, 1032, 1035, 1039, 1042, 1065, 1071, 1073, 1074, 1075, 1084, 1095, 1111, 1117, 1122, 1127, 1132, 1138, 1143, 1148, 1154, 1160, 1167, 1173, 1179, 1185, 1198, 1208, 1218, 1228, 1246, 1259, 1261, 1277, 1314], "old": [991, 992], "dep": [995, 996, 1005, 1016, 1081, 1082, 1089, 1091, 1099], "farmboundaryconstraint": [997, 998, 1314, 1329], "mindistconstraint": [999, 1000, 1001, 1002, 1003, 1004, 1005, 1314, 1329], "least": [999, 1156, 1194, 1314], "min_dist": [999, 1000, 1145, 1146, 1157, 1158, 1195, 1196, 1205, 1206, 1215, 1216, 1225, 1226, 1248, 1249, 1329], "min_dist_unit": [999, 1000, 1329], "constaint": [999, 1003, 1145, 1149], "geom_layout": [1006, 1017, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1314], "farmobject": [1017, 1018, 1019, 1020, 1021, 1022, 1023, 1081, 1082, 1091, 1092, 1093, 1099, 1314], "calc_farm_arg": [1024, 1026], "all_turbin": [1024, 1030, 1068, 1100, 1239, 1248, 1264], "tvar": [1024, 1063, 1068, 1100, 1239, 1248, 1264], "turbine_i": [1024, 1059, 1063, 1068, 1100, 1239, 1248, 1264], "parse_tvar": [1024, 1059, 1068, 1100, 1239, 1248, 1264], "tvr": [1024, 1059, 1068, 1100, 1239, 1248, 1264], "drop_var": [1024, 1046], "exclud": [1024, 1046, 1324], "update_problem_individu": [1024, 1064, 1068, 1072, 1100, 1239, 1248, 1260, 1264], "latest": [1024, 1064, 1065, 1068, 1072, 1073, 1100, 1239, 1248, 1260, 1261, 1264, 1326], "update_problem_popul": [1024, 1065, 1068, 1073, 1100, 1239, 1248, 1261, 1264], "apply_individu": [1024, 1031, 1068, 1100, 1195, 1197, 1205, 1207, 1215, 1217, 1225, 1227, 1239, 1248, 1264], "apply_popul": [1024, 1032, 1068, 1100, 1195, 1198, 1205, 1208, 1215, 1218, 1225, 1228, 1239, 1248, 1264], "whole": [1024, 1032, 1068, 1100, 1195, 1198, 1205, 1208, 1215, 1218, 1225, 1228, 1239, 1248, 1264, 1324], "int_inf": [1024, 1025, 1049, 1053, 1068, 1100, 1107, 1109, 1195, 1205, 1215, 1225, 1234, 1236, 1239, 1248, 1255, 1257, 1264], "999999": [1024, 1025, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "initial_values_int": [1024, 1045, 1068, 1100, 1104, 1195, 1205, 1210, 1215, 1225, 1231, 1239, 1248, 1252, 1264], "min_values_int": [1024, 1053, 1068, 1100, 1109, 1195, 1205, 1213, 1215, 1225, 1236, 1239, 1248, 1257, 1264], "max_values_int": [1024, 1049, 1068, 1100, 1107, 1195, 1205, 1212, 1215, 1225, 1234, 1239, 1248, 1255, 1264], "initial_values_float": [1024, 1044, 1068, 1100, 1103, 1195, 1200, 1205, 1215, 1220, 1225, 1230, 1239, 1241, 1248, 1251, 1264, 1272], "min_values_float": [1024, 1052, 1068, 1100, 1108, 1195, 1203, 1205, 1215, 1223, 1225, 1235, 1239, 1244, 1248, 1256, 1264, 1275], "max_values_float": [1024, 1048, 1068, 1100, 1106, 1195, 1202, 1205, 1215, 1222, 1225, 1233, 1239, 1243, 1248, 1254, 1264, 1274], "add_object": [1024, 1028, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1329], "varmap_int": [1024, 1027, 1028, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "varmap_float": [1024, 1027, 1028, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "add_constraint": [1024, 1027, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1329], "min_values_constraint": [1024, 1051, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "max_values_constraint": [1024, 1047, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "constraints_tol": [1024, 1036, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "toler": [1024, 1036, 1068, 1100, 1140, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "n_object": [1024, 1038, 1039, 1041, 1050, 1055, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1240, 1248, 1250, 1264, 1271, 1329], "n_constraint": [1024, 1036, 1038, 1039, 1041, 1042, 1047, 1051, 1054, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1240, 1248, 1250, 1264, 1271, 1329], "calc_gradi": [1024, 1033, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "ivar": [1024, 1033, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "gradient": [1024, 1033, 1043, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "get_gradi": [1024, 1033, 1043, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "obtain": [1024, 1043, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1327, 1331, 1338], "link": [1024, 1043, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1325, 1329, 1337], "maximize_obj": [1024, 1050, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "evaluate_individu": [1024, 1038, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "ret_prob_r": [1024, 1038, 1039, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "evaluate_popul": [1024, 1039, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "check_constraints_individu": [1024, 1034, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "check_constraints_popul": [1024, 1035, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "prob_res_einsum_individu": [1024, 1060, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "prob_res_list": [1024, 1060, 1061, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "coeff": [1024, 1060, 1061, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "prob_res_einsum_popul": [1024, 1061, 1068, 1100, 1195, 1205, 1215, 1225, 1239, 1248, 1264], "subject": 1030, "fvar": 1033, "vr": 1033, "overload": [1033, 1308], "optfunctionlist": [1033, 1043], "n_vr": 1033, "ctol": 1036, "addition": [1038, 1039], "con": [1038, 1039, 1041, 1042, 1240, 1250, 1271], "prob_r": [1038, 1039, 1060, 1061], "were": [1043, 1324, 1332, 1338, 1339], "previous": 1043, "cf": [1043, 1334], "problemdefaultfunc": 1043, "decid": [1046, 1326], "drop": 1046, "cma": 1047, "inf": [1048, 1052, 1106, 1108, 1144, 1202, 1203, 1222, 1223, 1233, 1235, 1243, 1244, 1254, 1256, 1274, 1275], "unbound": [1048, 1049, 1052, 1053, 1106, 1107, 1108, 1109, 1202, 1203, 1222, 1223, 1233, 1234, 1235, 1236, 1243, 1244, 1254, 1255, 1256, 1257, 1274, 1275], "cmi": 1051, "n_con": 1054, "n_obj": 1055, "farmvarsproblem": [1068, 1069, 1070, 1071, 1072, 1073, 1100, 1101, 1239, 1248, 1249, 1264, 1270, 1314, 1315, 1324], "pre_rotor_var": [1068, 1069], "post_rotor_var": [1068, 1069], "opt2farm_vars_individu": [1068, 1070, 1100, 1110, 1239, 1245, 1248, 1258, 1264, 1276], "opt2farm_vars_popul": [1068, 1071, 1100, 1111, 1239, 1246, 1248, 1259, 1264, 1277], "post_rotor": 1069, "super": [1069, 1105, 1242, 1253, 1273], "farm_var": [1070, 1071, 1110, 1111, 1245, 1246, 1258, 1259, 1276, 1277], "popstat": [1074, 1075, 1076, 1077, 1078, 1079, 1080, 1314], "artifici": [1074, 1314], "farmvarobject": [1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1098, 1314], "contract_st": [1081, 1082, 1091, 1099], "contract_turbin": [1082, 1091, 1099], "maxfarmpow": [1090, 1091, 1314, 1329], "maximize_pow": [1090, 1091, 1329], "maxnturbin": [1092, 1093, 1094, 1095, 1096, 1097, 1314], "turrbin": [1092, 1314], "check_valid": [1092, 1093], "count": [1092, 1093, 1324], "max_n_turbin": [1092, 1093], "minimalmaxti": [1098, 1099, 1314], "minimize_ti": [1098, 1099], "optfarmvar": [1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1315], "typ": [1100, 1102], "model_kei": 1102, "geometr": [1114, 1115, 1119, 1120, 1124, 1125, 1129, 1130, 1135, 1145, 1146, 1151, 1152, 1157, 1158, 1164, 1165, 1170, 1171, 1176, 1177, 1182, 1183, 1188, 1189, 1195, 1205, 1315, 1316, 1324], "cmpnt": [1114, 1116, 1117, 1119, 1121, 1122, 1124, 1126, 1127, 1129, 1131, 1132, 1135, 1137, 1138, 1145, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1164, 1166, 1167, 1170, 1172, 1173, 1176, 1178, 1179, 1182, 1184, 1185, 1188], "additio": [1115, 1120, 1125, 1130, 1146, 1152], "cfixn": [1119, 1120, 1121, 1122, 1123, 1316], "cmaxn": [1124, 1125, 1126, 1127, 1128, 1316], "cmindens": [1129, 1130, 1131, 1132, 1133, 1134, 1316], "min_valu": [1129, 1130], "dfactor": [1129, 1130, 1157, 1158], "min_dens": [1129, 1130], "cminn": [1135, 1136, 1137, 1138, 1139, 1316], "optfunct": [1140, 1191], "tol": [1140, 1141], "violat": 1140, "1e": [1140, 1141, 1329], "mindist": [1145, 1146, 1147, 1148, 1149, 1150, 1316], "cdist": [1156, 1194], "xa": [1156, 1194], "xb": [1156, 1194], "metric": [1156, 1194], "euclidean": [1156, 1194], "m_a": [1156, 1194], "observ": [1156, 1194, 1327, 1329, 1331, 1334, 1337, 1338], "m_b": [1156, 1194], "callabl": [1156, 1194], "braycurti": [1156, 1194], "canberra": [1156, 1194], "chebyshev": [1156, 1194], "cityblock": [1156, 1194], "cosin": [1156, 1194], "dice": [1156, 1194], "ham": [1156, 1194], "jaccard": [1156, 1194], "jensenshannon": [1156, 1194], "kulczynski1": [1156, 1194], "mahalanobi": [1156, 1194], "match": [1156, 1194], "minkowski": [1156, 1194], "rogerstanimoto": [1156, 1194], "russellrao": [1156, 1194], "seuclidean": [1156, 1194], "sokalmichen": [1156, 1194], "sokalsneath": [1156, 1194], "sqeuclidean": [1156, 1194], "yule": [1156, 1194], "norm": [1156, 1194], "unweight": [1156, 1194], "varianc": [1156, 1194], "vstack": [1156, 1194], "ddof": [1156, 1194], "vi": [1156, 1194], "covari": [1156, 1194], "matrix": [1156, 1194], "inv": [1156, 1194], "cov": [1156, 1194], "u": [1156, 1194, 1301, 1302, 1329], "ij": [1156, 1194], "except": [1156, 1194], "thrown": [1156, 1194], "arrang": [1156, 1194], "_p": [1156, 1194], "quasi": [1156, 1194], "citi": [1156, 1194], "block": [1156, 1194, 1329], "manhattan": [1156, 1194], "u_i": [1156, 1194], "v_i": [1156, 1194], "x_i": [1156, 1194], "squar": [1156, 1194], "_2": [1156, 1194], "frac": [1156, 1194], "cdot": [1156, 1194], "its": [1156, 1194, 1264, 1315, 1325, 1332, 1335], "dot": [1156, 1194], "proport": [1156, 1194], "those": [1156, 1194, 1332], "disagre": [1156, 1194], "To": [1156, 1194], "save": [1156, 1194, 1337], "shannon": [1156, 1194], "probabl": [1156, 1194], "q": [1156, 1194], "pointwis": [1156, 1194], "kullback": [1156, 1194], "leibler": [1156, 1194], "diverg": [1156, 1194], "precis": [1156, 1194], "max_i": [1156, 1194], "sum_i": [1156, 1194], "brai": [1156, 1194], "curti": [1156, 1194], "synonym": [1156, 1194], "kulczynski": [1156, 1194], "roger": [1156, 1194], "tanimoto": [1156, 1194], "russel": [1156, 1194], "rao": [1156, 1194], "sokal": [1156, 1194], "michen": [1156, 1194], "sneath": [1156, 1194], "suppli": [1156, 1194], "ariti": [1156, 1194], "could": [1156, 1194, 1324, 1332, 1334, 1335, 1338], "dm": [1156, 1194], "lambda": [1156, 1194], "librari": [1156, 1194, 1329, 1335], "would": [1156, 1194], "ineffici": [1156, 1194], "syntax": [1156, 1194], "find": [1156, 1194, 1324], "four": [1156, 1194, 1328], "35": [1156, 1194, 1327, 1329, 1336], "0456": [1156, 1194], "85": [1156, 1194, 1329], "2672": [1156, 1194], "1174": [1156, 1194], "89": [1156, 1194, 1329, 1333], "9711": [1156, 1194], "9728": [1156, 1194], "9422": [1156, 1194], "36": [1156, 1194, 1327, 1329, 1336], "1667": [1156, 1194], "86": [1156, 1194, 1322, 1329, 1331, 1337], "7833": [1156, 1194], "7044": [1156, 1194], "6172": [1156, 1194], "8856": [1156, 1194], "0893": [1156, 1194], "3561": [1156, 1194], "8477": [1156, 1194], "corner": [1156, 1194, 1328], "cube": [1156, 1194], "b": [1156, 1194, 1325], "9": [1156, 1194, 1324, 1326, 1327, 1329, 1330, 1333, 1334, 1335, 1337, 1339], "maxdens": [1157, 1158, 1159, 1160, 1161, 1162, 1163, 1316], "max_dens": [1157, 1158], "maxgridspac": [1164, 1165, 1166, 1167, 1168, 1169, 1316], "max_dxdi": [1164, 1165], "memimadist": [1170, 1171, 1172, 1173, 1174, 1175, 1316], "c3": [1170, 1171], "mimamean": [1170, 1171], "diff": 1171, "ofixn": [1176, 1177, 1178, 1179, 1180, 1181, 1316], "omaxn": [1182, 1183, 1184, 1185, 1186, 1187, 1188, 1316], "maxn": [1182, 1183], "ominn": [1188, 1189, 1190, 1316], "vnames_int": 1192, "vnames_float": 1192, "cname": 1192, "geomlayout": [1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1316, 1324], "involv": [1195, 1205, 1215, 1225, 1324], "calc_valid": [1195, 1196], "get_fig": [1195, 1199, 1205, 1209, 1215, 1219, 1225, 1229], "plotli": [1195, 1199, 1205, 1209, 1215, 1219, 1225, 1229, 1296, 1318, 1324], "true_circl": [1199, 1209, 1219, 1229], "ndarari": [1199, 1209, 1219, 1229], "draw": [1199, 1209, 1219, 1229], "geomlayoutgrid": [1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1316, 1324], "background": [1205, 1206, 1316, 1324, 1328, 1329, 1332], "grid_spac": [1205, 1206], "geomreggrid": [1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1316, 1324], "max_dist": [1215, 1216, 1225, 1226, 1249], "n_grid": [1225, 1226, 1248, 1249], "n_max": [1225, 1226], "n_row_max": [1225, 1226, 1249], "farmlayoutoptproblem": [1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1315, 1329], "reggridslayoutoptproblem": [1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1315], "sever": [1248, 1315, 1324], "mix": 1248, "min_spac": [1248, 1264, 1270], "max_n_row": 1248, "regularlayoutoptproblem": [1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1315, 1324], "spacing_x": [1264, 1268], "spacing_i": [1264, 1269], "offset_x": [1264, 1266], "offset_i": [1264, 1267], "read_shp": [1279, 1280, 1318, 1324], "fname": [1279, 1280, 1318], "shp": [1279, 1280, 1297, 1318], "geopanda": [1279, 1280, 1297], "geodatafram": 1279, "wsg84": 1279, "read_shp_polygon": [1280, 1298, 1318, 1324], "name_col": 1280, "geom_col": 1280, "to_utm": 1280, "ret_utm_zon": [1280, 1298, 1318], "extract": 1280, "utm": [1280, 1298], "zone": [1280, 1298], "letter": [1280, 1298], "32u": [1280, 1298], "point_dict_exterior": 1280, "point_dict_interior": 1280, "utm_zone_str": [1280, 1298], "utem": [1280, 1298], "daskrunn": [1281, 1282, 1283, 1284, 1285, 1286, 1287, 1318, 1324, 1328, 1329, 1336, 1337, 1338], "schedul": [1281, 1282, 1324, 1329, 1337], "progress_bar": [1281, 1282, 1324], "show": [1281, 1282, 1324, 1327, 1328, 1329, 1331, 1333, 1334, 1335, 1337, 1338, 1339], "progress": [1281, 1282, 1337, 1338], "cluster_arg": [1281, 1282], "explicit": [1281, 1282, 1324, 1328], "cluster": [1281, 1282, 1324, 1325, 1329, 1337, 1338], "setup": [1281, 1282, 1323, 1324, 1325, 1329, 1331, 1333, 1334, 1335, 1338, 1339], "client_arg": [1281, 1282], "client": [1281, 1282], "n_worker": [1281, 1282], "is_distribut": [1281, 1285], "threads_per_work": 1282, "process": [1282, 1332], "worker": [1282, 1337], "thread": [1282, 1337], "defaultrunn": [1288, 1289, 1318, 1324], "show_plotly_fig": [1296, 1318, 1324], "displai": [1296, 1318, 1337, 1338], "window": [1296, 1318, 1324], "stackoverflow": 1296, "question": [1296, 1329], "53570384": 1296, "how": [1296, 1323, 1324, 1325, 1333, 1337, 1338], "standalon": 1296, "shp2csv": [1297, 1318, 1324], "ifil": [1297, 1318], "ofil": [1297, 1318], "in_kwarg": [1297, 1318], "out_kwarg": [1297, 1318], "inam": 1297, "onam": 1297, "to_csv": 1297, "shp2geom2d": [1298, 1318], "shapefil": [1298, 1318], "geom": 1298, "tool": [1298, 1337], "two_circl": [1299, 1300], "r1": [1299, 1300, 1318], "r2": [1299, 1300, 1318], "sure": [1299, 1326, 1329, 1337], "These": [1299, 1313, 1328, 1329, 1331, 1336, 1339], "diego": 1299, "assencio": 1299, "8d6ca3d82151bad815f78addf9b5c1c6": 1299, "calc_area": [1300, 1318], "broadcast": [1300, 1302, 1303], "anoth": [1300, 1338, 1339], "uv2wd": [1301, 1318], "uv": [1301, 1302, 1318], "wd2uv": [1302, 1318], "against": [1302, 1303], "wd2wdvec": [1303, 1318], "wdvec": [1303, 1304, 1318], "wdvec2wd": [1304, 1318], "shortcut": 1305, "concret": [1305, 1313, 1321], "manag": [1306, 1323, 1324, 1325, 1332], "sweep": [1306, 1307], "until": [1306, 1308, 1324], "reach": [1306, 1308, 1311, 1324, 1336], "access": 1311, "atmospher": [1312, 1313, 1327], "interfac": [1312, 1324, 1329], "propag": [1313, 1324, 1332, 1336], "due": [1313, 1334], "ie": 1313, "avail": [1313, 1321, 1323, 1326, 1327, 1337], "machin": 1313, "net": 1313, "intern": [1314, 1325], "extern": 1314, "classif": 1321, "cite": 1322, "joss": 1322, "paper": 1322, "softwar": [1322, 1325, 1327], "bibtex": 1322, "schmidt2023": 1322, "author": [1322, 1327], "jona": [1322, 1327, 1328, 1329, 1331, 1334, 1337, 1338], "schmidt": 1322, "luka": 1322, "vollmer": 1322, "martin": 1322, "d\u00f6renk\u00e4mper": 1322, "bernhard": 1322, "stoevesandt": 1322, "21105": 1322, "05464": 1322, "url": 1322, "year": 1322, "2023": [1322, 1327, 1336], "publish": [1322, 1324], "journal": 1322, "volum": 1322, "page": 1322, "5464": 1322, "jupyt": 1323, "notebook": [1323, 1324, 1332], "folder": [1323, 1324], "repositori": [1323, 1325], "overview": [1323, 1324, 1325, 1335], "releas": [1324, 1326], "readi": [1324, 1330, 1335, 1336, 1339], "transfer": [1324, 1339], "fraunhof": [1324, 1325, 1329], "iw": [1324, 1325, 1327, 1329], "hous": 1324, "predecessor": [1324, 1325], "yet": 1324, "just": [1324, 1333], "enjoi": 1324, "await": 1324, "comment": 1324, "issu": [1324, 1325], "thank": 1324, "changelog": 1324, "fraunhoferiw": [1324, 1325, 1326], "commit": [1324, 1325], "style": 1324, "black": 1324, "small": [1324, 1327], "discov": 1324, "flake8": 1324, "now": [1324, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1338, 1339], "pytest": 1324, "unittest": 1324, "workflow": 1324, "docu": 1324, "io": 1324, "doc": [1324, 1337], "html": [1324, 1336], "miss": 1324, "wind_rot": [1324, 1328], "manifest": 1324, "orst": 1324, "pctsinglefil": 1324, "iecti2019": 1324, "iecti2005": 1324, "concept": [1324, 1336], "instal": [1324, 1325], "pip": [1324, 1325], "capabl": [1324, 1325], "As": [1324, 1326, 1339], "pcttwofil": 1324, "windroseoutput": 1324, "histogram": 1324, "ambientwindroseoutput": 1324, "improv": 1324, "browser": 1324, "featur": [1324, 1334], "wind_ros": 1324, "layout_single_st": 1324, "layout_wind_ros": 1324, "layout_opt": [1324, 1329], "ipynb": 1324, "demonstr": [1324, 1327, 1329, 1333, 1335, 1338, 1339], "wrf": [1324, 1331, 1332], "ambientroseplotoutput": 1324, "multi_height": 1324, "bug": 1324, "veer": 1324, "power_mask": 1324, "solv": [1324, 1329], "cubic": 1324, "forgotten": 1324, "api": [1324, 1325, 1337], "hotfix": 1324, "wsrho2pcttwofil": 1324, "sector_manag": 1324, "sector_man": 1324, "col_model": 1324, "offset": 1324, "compare_wak": 1324, "compar": [1324, 1333, 1334], "yawed_wak": 1324, "simplifi": 1324, "accept": 1324, "replac": [1324, 1326], "intuit": 1324, "turboparkix": 1324, "summar": 1324, "bracket": 1324, "eq": 1324, "wrong": 1324, "layout_regular_grid": 1324, "geom_reggrid": 1324, "affect": [1324, 1333], "geopandas_help": 1324, "interior": 1324, "11": [1324, 1326, 1327, 1329, 1333, 1336, 1337, 1339], "cleaner": 1324, "treatment": 1324, "slimmer": 1324, "distribut": [1324, 1327, 1329, 1337], "move": [1324, 1329], "irrespect": 1324, "restart": 1324, "complet": [1324, 1327, 1330, 1331, 1334, 1336, 1337, 1338], "incomplet": 1324, "slurm": 1324, "queue": 1324, "system": [1324, 1326, 1327, 1332, 1335, 1337], "timeseries_slurm": 1324, "hpc": 1324, "apigen": 1324, "through": [1324, 1325], "outer": 1324, "consist": [1324, 1327, 1333, 1334, 1335, 1338], "timeseries_100": [1324, 1336], "short": [1324, 1327], "timestep": 1324, "vari": [1324, 1327, 1331], "chosen": 1324, "slow": 1324, "down": [1324, 1337], "prevent": 1324, "shown": [1324, 1327], "signal": [1324, 1336], "consider": 1324, "contour": 1324, "autom": 1324, "pypi": 1324, "modular": 1325, "steer": 1325, "construct": 1325, "analysi": 1325, "studi": 1325, "comparison": 1325, "simul": [1325, 1327, 1332], "complex": [1325, 1337], "chain": 1325, "perform": 1325, "ow": 1325, "remot": 1325, "enabl": 1325, "well": [1325, 1327, 1329, 1339], "tracker": 1325, "report": 1325, "mit": 1325, "citat": 1325, "conda": 1325, "histori": 1325, "fork": [1325, 1326], "branch": [1325, 1326], "git": [1325, 1326, 1327, 1328, 1329, 1331, 1334, 1337, 1338], "checkout": 1325, "new_branch": 1325, "your": [1325, 1326, 1335], "am": [1325, 1336], "awesom": 1325, "messag": 1325, "push": 1325, "pull": 1325, "request": 1325, "develop": 1325, "flapfoam": 1325, "public": [1325, 1339], "publicli": 1325, "fund": 1325, "research": 1325, "project": 1325, "particular": [1325, 1337], "feder": 1325, "ministri": 1325, "econom": 1325, "affair": 1325, "climat": 1325, "action": [1325, 1332], "bmwk": 1325, "roject": 1325, "smart": 1325, "grant": 1325, "0325851b": 1325, "0325397b": 1325, "03ee3008a": 1325, "educ": 1325, "bmbf": 1325, "framework": 1325, "h2digit": 1325, "03sf0635": 1325, "venv": 1326, "conveni": [1326, 1335], "prefer": 1326, "python3": 1326, "Then": 1326, "activ": 1326, "leav": 1326, "deactiv": 1326, "altern": 1326, "dev": 1326, "egg": 1326, "clone": 1326, "cd": 1326, "whenev": 1326, "concern": 1326, "recommend": [1326, 1328], "strongli": 1326, "libmamba": 1326, "solver": [1326, 1329], "forg": 1326, "config": 1326, "channel": 1326, "necessari": [1326, 1336], "while": 1326, "again": [1326, 1329, 1333], "build": 1326, "Such": 1327, "often": [1327, 1332], "terminologi": [1327, 1332, 1335], "three": [1327, 1339], "67": [1327, 1329, 1337], "randomli": 1327, "t0": [1327, 1329, 1333, 1334, 1335, 1337, 1339], "101872": [1327, 1337], "70": [1327, 1328, 1329, 1334, 1337], "1004753": [1327, 1337], "57": [1327, 1329, 1336, 1337], "t1": [1327, 1329, 1333, 1334, 1335, 1337, 1339], "103659": [1327, 1337], "97": [1327, 1329, 1336, 1337], "1002993": [1327, 1337], "29": [1327, 1329, 1337], "t2": [1327, 1329, 1333, 1335, 1337], "100780": [1327, 1337], "09": [1327, 1337], "1000779": [1327, 1337], "t3": [1327, 1329, 1333, 1335, 1337], "100290": [1327, 1337], "42": [1327, 1329, 1337], "1004330": [1327, 1337], "t4": [1327, 1329, 1333, 1335], "103005": 1327, "1003540": 1327, "t5": [1327, 1329], "100102": 1327, "92": [1327, 1329], "1004849": 1327, "55": [1327, 1329], "t6": [1327, 1329], "104162": 1327, "1001061": 1327, "like": [1327, 1332, 1334], "mesoscal": 1327, "75": [1327, 1328, 1329, 1331, 1337], "2009": [1327, 1331], "00": [1327, 1329, 1331, 1336, 1337], "37214": [1327, 1331], "42685": [1327, 1331], "28838": [1327, 1331], "31": [1327, 1328, 1329, 1331, 1337], "23": [1327, 1329, 1331, 1337], "27767": [1327, 1331], "36368": [1327, 1331], "30095": [1327, 1331], "At": 1327, "90": [1327, 1329, 1331], "150": [1327, 1329, 1331, 1337, 1338], "250": [1327, 1329, 1331, 1334, 1339], "o": [1327, 1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "16": [1327, 1329, 1331, 1333, 1334, 1336, 1337, 1338], "20": [1327, 1328, 1329, 1330, 1331, 1333, 1334, 1337, 1338], "svg": [1327, 1329, 1331, 1334, 1337, 1338], "rose_plot": [1327, 1329, 1331, 1334, 1337, 1338], "174": [1327, 1329, 1331, 1334, 1337, 1338], "futurewarn": [1327, 1329, 1331, 1334, 1337, 1338], "deprec": [1327, 1329, 1331, 1334, 1337, 1338], "futur": [1327, 1329, 1331, 1334, 1337, 1338], "retain": [1327, 1329, 1331, 1334, 1337, 1338], "behavior": [1327, 1329, 1331, 1334, 1337, 1338], "adopt": [1327, 1329, 1331, 1334, 1337, 1338], "silenc": [1327, 1329, 1331, 1334, 1337, 1338], "grp": [1327, 1329, 1331, 1334, 1337, 1338], "lgd": [1327, 1329, 1331, 1334, 1337, 1338], "34": [1327, 1329, 1331, 1334, 1337, 1338], "frequenc": [1327, 1329, 1331, 1334, 1337, 1338], "groupbi": [1327, 1329, 1331, 1334, 1337, 1338], "binnd": 1327, "layer": 1327, "64": [1327, 1329, 1337], "253": 1327, "032": 1327, "542331196166035e": 1327, "65": [1327, 1329, 1337, 1338], "207": 1327, "145": 1327, "0001230528308906": 1327, "49": [1327, 1328, 1329, 1336], "46": [1327, 1329], "116": 1327, "0001563449299843": 1327, "72": [1327, 1328, 1329, 1333], "314": 1327, "048": 1327, "618827331554488e": 1327, "18": [1327, 1329, 1333, 1338], "302": 1327, "027": 1327, "694": 1327, "98695302482496e": 1327, "3000": [1327, 1329, 1333, 1339], "2018": 1327, "24": [1327, 1329, 1333, 1337], "172": 1327, "27": [1327, 1329, 1338], "51": [1327, 1329], "184": 1327, "13": [1327, 1329, 1331, 1333, 1336], "52": [1327, 1329, 1338], "198": 1327, "04": [1327, 1329, 1330], "209": [1327, 1329], "93": [1327, 1329], "19": [1327, 1329, 1333, 1336, 1337], "78": [1327, 1329, 1338], "217": 1327, "223": 1327, "26": [1327, 1328, 1329, 1336, 1337], "68": [1327, 1329], "227": 1327, "02": [1327, 1329, 1330], "8000": [1327, 1335, 1337], "2017": [1327, 1337], "62": [1327, 1329, 1337], "244": [1327, 1337], "0504": [1327, 1337], "99": [1327, 1329, 1334, 1337], "243": [1327, 1337], "03": [1327, 1329, 1335, 1337], "0514": [1327, 1337], "0522": [1327, 1337], "33": [1327, 1329, 1336, 1337], "241": [1327, 1337], "0523": [1327, 1337], "0518": 1327, "242": 1327, "0513": 1327, "12": [1327, 1329, 1333, 1335, 1336, 1338, 1339], "269": 1327, "836": 1327, "344": 1327, "268": 1327, "532": 1327, "267": 1327, "406": 1327, "265": 1327, "981": 1327, "39": [1327, 1328, 1329, 1335, 1336, 1337], "coars": [1327, 1329, 1338], "216": [1327, 1329, 1338], "site": [1327, 1329], "bremen": [1327, 1329, 1334], "germani": [1327, 1329], "00158": [1327, 1329, 1338], "00244": [1327, 1329, 1338], "00319": [1327, 1329, 1338], "00367": 1327, "00042": [1327, 1329, 1338], "veri": [1327, 1328, 1329, 1337], "inhomogen": 1327, "long_nam": 1327, "rotat": 1327, "subtitl": 1327, "date": 1327, "2021": 1327, "300": [1327, 1329, 1333, 1339], "2500": [1327, 1328, 1329], "180": 1327, "220": 1327, "120": 1327, "dtu10": 1327, "dtu10mw": [1327, 1330, 1336], "iea15": 1327, "iea15mw": [1327, 1330], "iwt7": [1327, 1330], "nrel5": [1327, 1333, 1335, 1337], "nrel5mw": [1327, 1328, 1329, 1330, 1331, 1333, 1335, 1337, 1338, 1339], "14": [1327, 1329, 1333, 1336, 1337], "nstate": 1327, "ncurv": 1327, "pctcurv": 1327, "categori": 1327, "relative_to": 1327, "parent": 1327, "lt": [1327, 1329, 1335], "posixpath": 1327, "gt": [1327, 1329, 1335], "printout": [1327, 1335], "feel": 1327, "invit": 1327, "best": [1328, 1329, 1334], "wai": 1328, "similar": 1328, "claim": 1328, "inlin": [1328, 1329, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339], "associ": 1328, "netcfd": 1328, "back": 1328, "our": [1328, 1329, 1330, 1331, 1333, 1334, 1338, 1339], "let": [1328, 1329, 1331, 1333, 1334, 1336, 1337, 1338, 1339], "domain": 1328, "rectangl": 1328, "realiz": [1328, 1339], "instanc": [1328, 1336], "streamlines_100": [1328, 1330], "grid16": [1328, 1330], "jensen_linear_k007": [1328, 1330, 1335], "4000": [1328, 1329, 1334, 1338], "implicit": [1328, 1329, 1337, 1339], "fr": [1328, 1331, 1333, 1335, 1337], "to_datafram": [1328, 1331, 1333, 1335, 1336, 1337, 1339], "scale_unit": [1328, 1336], "201": [1328, 1336], "158092": 1328, "491089": 1328, "1474": 1328, "211367": 1328, "208": [1328, 1329], "044994": 1328, "673386": 1328, "1580": 1328, "523022": 1328, "214": [1328, 1329], "523994": 1328, "960601": 1328, "1748": 1328, "171047": 1328, "218": 1328, "242345": 1328, "867297": 1328, "1127": 1328, "597810": 1328, "222": [1328, 1336], "297880": 1328, "283373": 1328, "1352": 1328, "715530": 1328, "899315": 1328, "731909": 1328, "808657": 1328, "1614": 1328, "607085": 1328, "1101": 1328, "211997": 1328, "236": 1328, "751304": 1328, "932726": 1328, "1156": 1328, "958672": 1328, "237": 1328, "139685": 1328, "375640": 1328, "142662": 1328, "1406": 1328, "547918": 1328, "801": 1328, "751505": 1328, "484049": 1328, "818854": 1328, "381124": 1328, "1665": 1328, "347000": 1328, "908": 1328, "970303": 1328, "311353": 1328, "703701": 1328, "746596": 1328, "1054": 1328, "871543": 1328, "653": 1328, "807377": 1328, "259090": 1328, "995899": 1328, "857833": 1328, "1185": 1328, "898485": 1328, "690": 1328, "639688": 1328, "676969": 1328, "357075": 1328, "1396": 1328, "122949": 1328, "44": [1328, 1329], "537113": 1328, "352448": 1328, "521": 1328, "748653": 1328, "47": [1328, 1329, 1336], "447853": 1328, "960030": 1328, "917024": 1328, "724": 1328, "421405": 1328, "710": 1328, "071241": 1328, "815208": 1328, "580130": 1328, "998": 1328, "581195": 1328, "462887": 1328, "352662": 1328, "621921": 1328, "552147": 1328, "960214": 1328, "363478": 1328, "184792": 1328, "580285": 1328, "552663": 1328, "task": 1329, "detail": [1329, 1332, 1337], "pymoo": 1329, "nice": 1329, "genet": 1329, "optimizer_pymoo": 1329, "gm": 1329, "tackl": 1329, "wind_rose_bremen": [1329, 1334, 1338], "0036700002": [1329, 1338], "next": [1329, 1331, 1333, 1335, 1337, 1338], "1200": 1329, "800": [1329, 1335, 1336], "900": [1329, 1336, 1338], "float64": [1329, 1335], "1500": 1329, "700": 1329, "later": [1329, 1333, 1336, 1337], "wish": [1329, 1337, 1338, 1339], "t7": 1329, "t8": 1329, "t9": 1329, "notic": [1329, 1333, 1334, 1336, 1337, 1339], "shortli": 1329, "begin": 1329, "bastankhah_linear_k002": [1329, 1330, 1331, 1333, 1334], "n_obj_cmptn": 1329, "n_con_cmptn": 1329, "impli": 1329, "ga": 1329, "form": [1329, 1337], "n_max_gen": 1329, "pop_siz": 1329, "problem_par": 1329, "algo_par": 1329, "seed": 1329, "setup_par": 1329, "term_par": 1329, "ftol": 1329, "xtol": 1329, "print_info": 1329, "sampl": 1329, "float_random": 1329, "floatrandomsampl": 1329, "termin": 1329, "defaultsingleobjectivetermin": 1329, "001": 1329, "n_gen": 1329, "n_eval": 1329, "cv_min": 1329, "cv_avg": 1329, "f_avg": 1329, "f_min": 1329, "257950e": 1329, "094916e": 1329, "180418e": 1329, "141625e": 1329, "279782e": 1329, "157184e": 1329, "404513e": 1329, "577682e": 1329, "579169e": 1329, "703733e": 1329, "350": 1329, "531147e": 1329, "050876e": 1329, "400": 1329, "000000e": 1329, "605222e": 1329, "588240e": 1329, "450": 1329, "103920e": 1329, "527620e": 1329, "582192e": 1329, "550": 1329, "732673e": 1329, "600": [1329, 1331, 1333, 1334], "832754e": 1329, "586968e": 1329, "591846e": 1329, "650": 1329, "055741e": 1329, "588486e": 1329, "604179e": 1329, "8416979966": 1329, "586179e": 1329, "750": [1329, 1339], "0056020975": 1329, "586244e": 1329, "592827e": 1329, "609887e": 1329, "850": 1329, "597835e": 1329, "616432e": 1329, "601994e": 1329, "619099e": 1329, "608318e": 1329, "637494e": 1329, "615190e": 1329, "645683e": 1329, "1050": 1329, "622881e": 1329, "646187e": 1329, "1100": 1329, "631506e": 1329, "653047e": 1329, "1150": 1329, "640921e": 1329, "655091e": 1329, "648388e": 1329, "657861e": 1329, "1250": 1329, "651988e": 1329, "663615e": 1329, "1300": 1329, "655195e": 1329, "1350": 1329, "658165e": 1329, "667660e": 1329, "28": 1329, "1400": 1329, "660791e": 1329, "671652e": 1329, "1450": 1329, "663724e": 1329, "676832e": 1329, "667884e": 1329, "679974e": 1329, "1550": 1329, "672357e": 1329, "685551e": 1329, "1600": 1329, "676653e": 1329, "688468e": 1329, "1650": 1329, "681032e": 1329, "688999e": 1329, "1700": 1329, "684254e": 1329, "692540e": 1329, "1750": 1329, "686841e": 1329, "1800": 1329, "689011e": 1329, "693343e": 1329, "37": 1329, "1850": 1329, "690736e": 1329, "700848e": 1329, "38": 1329, "1900": 1329, "692806e": 1329, "701437e": 1329, "1950": 1329, "695244e": 1329, "702613e": 1329, "40": [1329, 1336], "2000": [1329, 1334], "698077e": 1329, "714461e": 1329, "2050": 1329, "701772e": 1329, "2100": 1329, "705495e": 1329, "716273e": 1329, "43": 1329, "2150": 1329, "709527e": 1329, "720787e": 1329, "2200": 1329, "712644e": 1329, "721430e": 1329, "45": 1329, "2250": 1329, "715937e": 1329, "722818e": 1329, "2300": 1329, "719261e": 1329, "726242e": 1329, "2350": 1329, "721874e": 1329, "728699e": 1329, "48": 1329, "2400": 1329, "724323e": 1329, "729085e": 1329, "2450": 1329, "726669e": 1329, "731540e": 1329, "729169e": 1329, "736498e": 1329, "2550": 1329, "731473e": 1329, "2600": 1329, "733755e": 1329, "739439e": 1329, "53": [1329, 1337], "2650": 1329, "736553e": 1329, "741091e": 1329, "54": [1329, 1337], "2700": 1329, "737859e": 1329, "2750": 1329, "739620e": 1329, "746115e": 1329, "56": 1329, "2800": 1329, "741132e": 1329, "2850": 1329, "742407e": 1329, "2900": 1329, "743667e": 1329, "59": 1329, "2950": 1329, "744499e": 1329, "747450e": 1329, "745637e": 1329, "749378e": 1329, "61": [1329, 1336], "3050": 1329, "746819e": 1329, "750740e": 1329, "3100": 1329, "748079e": 1329, "751545e": 1329, "63": [1329, 1337], "3150": 1329, "749500e": 1329, "752455e": 1329, "3200": 1329, "750617e": 1329, "3250": 1329, "751276e": 1329, "752688e": 1329, "66": [1329, 1337], "3300": 1329, "751675e": 1329, "753603e": 1329, "3350": 1329, "752037e": 1329, "753628e": 1329, "3400": 1329, "752668e": 1329, "754781e": 1329, "69": 1329, "3450": 1329, "753223e": 1329, "755507e": 1329, "3500": 1329, "753940e": 1329, "755627e": 1329, "71": [1329, 1333, 1336], "3550": 1329, "754475e": 1329, "756641e": 1329, "3600": 1329, "754917e": 1329, "756729e": 1329, "3650": 1329, "755482e": 1329, "756732e": 1329, "74": 1329, "3700": 1329, "755880e": 1329, "756858e": 1329, "3750": 1329, "756292e": 1329, "757238e": 1329, "76": 1329, "3800": 1329, "756666e": 1329, "757649e": 1329, "77": [1329, 1338], "3850": 1329, "756985e": 1329, "757750e": 1329, "3900": 1329, "757224e": 1329, "757984e": 1329, "79": [1329, 1335, 1336], "3950": 1329, "757503e": 1329, "758511e": 1329, "80": [1329, 1338], "757798e": 1329, "759081e": 1329, "81": [1329, 1338], "4050": 1329, "758090e": 1329, "82": 1329, "4100": 1329, "758474e": 1329, "759855e": 1329, "4150": 1329, "758746e": 1329, "759968e": 1329, "84": [1329, 1331], "4200": 1329, "758965e": 1329, "4250": 1329, "759223e": 1329, "4300": 1329, "759449e": 1329, "87": [1329, 1337], "4350": 1329, "759646e": 1329, "759971e": 1329, "4400": 1329, "759774e": 1329, "760032e": 1329, "4450": 1329, "759883e": 1329, "760064e": 1329, "4500": 1329, "759951e": 1329, "760100e": 1329, "91": [1329, 1338], "4550": 1329, "760006e": 1329, "760142e": 1329, "4600": 1329, "760062e": 1329, "760593e": 1329, "4650": 1329, "760121e": 1329, "760978e": 1329, "94": [1329, 1338], "4700": 1329, "760182e": 1329, "4750": 1329, "760257e": 1329, "96": 1329, "4800": 1329, "760395e": 1329, "760997e": 1329, "4850": 1329, "760607e": 1329, "761020e": 1329, "98": [1329, 1331], "4900": 1329, "760797e": 1329, "761706e": 1329, "4950": 1329, "760918e": 1329, "761763e": 1329, "761054e": 1329, "success": 1329, "28808": 1329, "815290012986": 1329, "x_0000": 1329, "484848e": 1329, "y_0000": 1329, "387982e": 1329, "x_0001": 1329, "999400e": 1329, "y_0001": 1329, "193226e": 1329, "x_0002": 1329, "743332e": 1329, "y_0002": 1329, "853013e": 1329, "x_0003": 1329, "161273e": 1329, "y_0003": 1329, "356752e": 1329, "x_0004": 1329, "010384e": 1329, "y_0004": 1329, "495968e": 1329, "x_0005": 1329, "992900e": 1329, "y_0005": 1329, "499577e": 1329, "x_0006": 1329, "970308e": 1329, "y_0006": 1329, "893921e": 1329, "x_0007": 1329, "136647e": 1329, "y_0007": 1329, "198557e": 1329, "x_0008": 1329, "942851e": 1329, "y_0008": 1329, "147376e": 1329, "x_0009": 1329, "992843e": 1329, "y_0009": 1329, "559152e": 1329, "880882e": 1329, "boundary_0000": 1329, "409687e": 1329, "boundary_0001": 1329, "001485e": 1329, "boundary_0002": 1329, "boundary_0003": 1329, "212439e": 1329, "boundary_0004": 1329, "038416e": 1329, "boundary_0005": 1329, "227091e": 1329, "boundary_0006": 1329, "boundary_0007": 1329, "boundary_0008": 1329, "714927e": 1329, "boundary_0009": 1329, "156536e": 1329, "dist_0_1": 1329, "053034e": 1329, "dist_0_2": 1329, "133692e": 1329, "dist_0_3": 1329, "512186e": 1329, "dist_0_4": 1329, "063629e": 1329, "dist_0_5": 1329, "032833e": 1329, "dist_0_6": 1329, "912219e": 1329, "dist_0_7": 1329, "174197e": 1329, "dist_0_8": 1329, "235491e": 1329, "dist_0_9": 1329, "389174e": 1329, "dist_1_2": 1329, "810253e": 1329, "dist_1_3": 1329, "227849e": 1329, "dist_1_4": 1329, "346207e": 1329, "dist_1_5": 1329, "282549e": 1329, "dist_1_6": 1329, "644388e": 1329, "dist_1_7": 1329, "015225e": 1329, "dist_1_8": 1329, "760754e": 1329, "dist_1_9": 1329, "459327e": 1329, "dist_2_3": 1329, "734121e": 1329, "dist_2_4": 1329, "000907e": 1329, "dist_2_5": 1329, "035690e": 1329, "dist_2_6": 1329, "547630e": 1329, "dist_2_7": 1329, "612574e": 1329, "dist_2_8": 1329, "428297e": 1329, "dist_2_9": 1329, "480372e": 1329, "dist_3_4": 1329, "383697e": 1329, "dist_3_5": 1329, "427543e": 1329, "dist_3_6": 1329, "533256e": 1329, "dist_3_7": 1329, "217365e": 1329, "dist_3_8": 1329, "085619e": 1329, "dist_3_9": 1329, "184343e": 1329, "dist_4_5": 1329, "462646e": 1329, "dist_4_6": 1329, "321302e": 1329, "dist_4_7": 1329, "301324e": 1329, "dist_4_8": 1329, "519941e": 1329, "dist_4_9": 1329, "401477e": 1329, "dist_5_6": 1329, "244685e": 1329, "dist_5_7": 1329, "910567e": 1329, "dist_5_8": 1329, "002368e": 1329, "dist_5_9": 1329, "916621e": 1329, "dist_6_7": 1329, "304425e": 1329, "dist_6_8": 1329, "924854e": 1329, "dist_6_9": 1329, "010247e": 1329, "dist_7_8": 1329, "429886e": 1329, "dist_7_9": 1329, "403714e": 1329, "dist_8_9": 1329, "394927e": 1329, "210": 1329, "211": 1329, "212": 1329, "213": 1329, "215": 1329, "995": 1329, "081": 1329, "109": 1329, "5e": 1329, "448": 1329, "999": 1329, "743": 1329, "6137": 1329, "994": 1329, "338": 1329, "419": 1329, "685": 1329, "147e": 1329, "755": 1329, "00013": 1329, "u2": [1329, 1335], "visual": [1329, 1331, 1333, 1334, 1335, 1336, 1337], "dpar": 1329, "zorder": 1329, "outside_whit": 1329, "anyth": 1329, "organ": 1330, "farm_pmask": 1330, "pmask": [1330, 1333, 1334], "farm_hubh_data": 1330, "hubh_data": 1330, "farm_kti": 1330, "farm_kti_02": 1330, "kti_02": [1330, 1337], "farm_kti_04": 1330, "kti_04": 1330, "farm_kti_05": 1330, "kti_05": [1330, 1338, 1339], "farm_kti_amb": 1330, "kti_amb": 1330, "farm_kti_amb_02": 1330, "kti_amb_02": 1330, "farm_kti_amb_04": 1330, "kti_amb_04": 1330, "farm_kti_amb_05": 1330, "kti_amb_05": 1330, "farm_thrust2ct": 1330, "farm_yaw2yawm": 1330, "farm_yawm2yaw": 1330, "axiwake10": 1330, "axiwake2": 1330, "axiwake20": 1330, "axiwake3": 1330, "axiwake4": 1330, "axiwake5": 1330, "axiwake6": 1330, "axiwake7": 1330, "axiwake8": 1330, "axiwake9": 1330, "distslic": 1330, "distsliced100": 1330, "distsliced16": 1330, "distsliced25": 1330, "distsliced36": 1330, "distsliced4": 1330, "distsliced400": 1330, "distsliced49": 1330, "distsliced64": 1330, "distsliced81": 1330, "distsliced9": 1330, "grid100": 1330, "grid25": 1330, "grid36": 1330, "grid4": 1330, "grid400": 1330, "grid49": 1330, "grid64": 1330, "grid81": 1330, "grid9": [1330, 1331], "top_hat": 1330, "level10": 1330, "level2": 1330, "level20": 1330, "level3": 1330, "level4": 1330, "level5": 1330, "level6": 1330, "level7": 1330, "level8": 1330, "level9": 1330, "5mw": [1330, 1334, 1335, 1337], "null_typ": 1330, "rotor_wd_farmo": 1330, "streamlines_1": 1330, "streamlines_10": 1330, "streamlines_100_farmo": 1330, "streamlines_100_yaw": 1330, "streamlines_10_farmo": 1330, "streamlines_10_yaw": 1330, "streamlines_1_farmo": 1330, "streamlines_1_yaw": 1330, "streamlines_5": 1330, "streamlines_50": 1330, "streamlines_500": 1330, "streamlines_500_farmo": 1330, "streamlines_500_yaw": 1330, "streamlines_50_farmo": 1330, "streamlines_50_yaw": 1330, "streamlines_5_farmo": 1330, "streamlines_5_yaw": 1330, "timelines_10min": 1330, "timelines_10": [1330, 1336], "timelines_1km": 1330, "timelines_1min": 1330, "timelines_1": 1330, "timelines_30min": 1330, "timelines_30": 1330, "timelines_60min": 1330, "bastankhah0_linear": 1330, "sp": 1330, "bastankhah0_linear_amb": 1330, "linear_amb": 1330, "bastankhah0_linear_amb_k002": 1330, "bastankhah0_linear_amb_k004": 1330, "bastankhah0_linear_k002": 1330, "bastankhah0_linear_k004": 1330, "bastankhah0_linear_lim": 1330, "linear_lim": 1330, "bastankhah0_linear_lim_k002": 1330, "bastankhah0_linear_lim_k004": 1330, "bastankhah0_max": 1330, "bastankhah0_max_amb": 1330, "max_amb": 1330, "bastankhah0_max_amb_k002": 1330, "bastankhah0_max_amb_k004": 1330, "bastankhah0_max_k002": 1330, "bastankhah0_max_k004": 1330, "bastankhah0_product": 1330, "bastankhah0_product_k002": 1330, "bastankhah0_product_k004": 1330, "bastankhah0_product_lim": 1330, "product_lim": 1330, "bastankhah0_product_lim_k002": 1330, "bastankhah0_product_lim_k004": 1330, "bastankhah0_quadrat": 1330, "bastankhah0_quadratic_amb": 1330, "quadratic_amb": 1330, "bastankhah0_quadratic_amb_k002": 1330, "bastankhah0_quadratic_amb_k004": 1330, "bastankhah0_quadratic_k002": 1330, "bastankhah0_quadratic_k004": 1330, "bastankhah_linear": [1330, 1338], "bastankhah_linear_amb": 1330, "bastankhah_linear_amb_k002": 1330, "bastankhah_linear_amb_k004": 1330, "bastankhah_linear_k004": [1330, 1336], "bastankhah_linear_lim": 1330, "bastankhah_linear_lim_k002": 1330, "bastankhah_linear_lim_k004": 1330, "bastankhah_max": 1330, "bastankhah_max_amb": 1330, "bastankhah_max_amb_k002": 1330, "bastankhah_max_amb_k004": 1330, "bastankhah_max_k002": 1330, "bastankhah_max_k004": 1330, "bastankhah_product": 1330, "bastankhah_product_k002": 1330, "bastankhah_product_k004": 1330, "bastankhah_product_lim": 1330, "bastankhah_product_lim_k002": 1330, "bastankhah_product_lim_k004": 1330, "bastankhah_quadrat": [1330, 1337], "bastankhah_quadratic_amb": 1330, "bastankhah_quadratic_amb_k002": 1330, "bastankhah_quadratic_amb_k004": 1330, "bastankhah_quadratic_k002": 1330, "bastankhah_quadratic_k004": 1330, "crespohernandez_ambti_cub": 1330, "ti_cub": 1330, "crespohernandez_ambti_linear": 1330, "ti_linear": 1330, "crespohernandez_ambti_max": 1330, "ti_max": 1330, "crespohernandez_ambti_quadrat": 1330, "ti_quadrat": 1330, "crespohernandez_ambti_quart": 1330, "ti_quart": 1330, "crespohernandez_cub": 1330, "crespohernandez_cubic_k002": 1330, "crespohernandez_linear": 1330, "crespohernandez_linear_k002": 1330, "crespohernandez_max": [1330, 1337, 1338, 1339], "crespohernandez_max_k002": 1330, "crespohernandez_quadrat": 1330, "crespohernandez_quadratic_k002": 1330, "crespohernandez_quart": 1330, "crespohernandez_quartic_k002": 1330, "iecti2005_cub": 1330, "19076020221856677": 1330, "iecti2005_linear": 1330, "iecti2005_max": 1330, "iecti2005_quadrat": 1330, "iecti2005_quart": 1330, "iecti2019_cub": 1330, "iecti2019_linear": 1330, "iecti2019_max": 1330, "iecti2019_quadrat": 1330, "iecti2019_quart": 1330, "jensen_linear": 1330, "jensen_linear_amb": 1330, "jensen_linear_amb_k002": 1330, "jensen_linear_amb_k004": 1330, "jensen_linear_amb_k007": 1330, "jensen_linear_amb_k0075": 1330, "075": 1330, "jensen_linear_k002": 1330, "jensen_linear_k004": 1330, "jensen_linear_k0075": 1330, "jensen_linear_lim": 1330, "jensen_linear_lim_k002": 1330, "jensen_linear_lim_k004": 1330, "jensen_linear_lim_k007": 1330, "jensen_linear_lim_k0075": 1330, "jensen_max": 1330, "jensen_max_amb": 1330, "jensen_max_amb_k002": 1330, "jensen_max_amb_k004": 1330, "jensen_max_amb_k007": 1330, "jensen_max_amb_k0075": 1330, "jensen_max_k002": 1330, "jensen_max_k004": 1330, "jensen_max_k007": 1330, "jensen_max_k0075": 1330, "jensen_product": 1330, "jensen_product_k002": 1330, "jensen_product_k004": 1330, "jensen_product_k007": 1330, "jensen_product_k0075": 1330, "jensen_product_lim": 1330, "jensen_product_lim_k002": 1330, "jensen_product_lim_k004": 1330, "jensen_product_lim_k007": 1330, "jensen_product_lim_k0075": 1330, "jensen_quadrat": 1330, "jensen_quadratic_amb": 1330, "jensen_quadratic_amb_k002": 1330, "jensen_quadratic_amb_k004": 1330, "jensen_quadratic_amb_k007": 1330, "jensen_quadratic_amb_k0075": 1330, "jensen_quadratic_k002": 1330, "jensen_quadratic_k004": 1330, "jensen_quadratic_k007": 1330, "jensen_quadratic_k0075": 1330, "porteagel_linear": [1330, 1339], "porteagel_linear_amb": 1330, "porteagel_linear_amb_k002": 1330, "porteagel_linear_amb_k004": 1330, "porteagel_linear_k002": 1330, "porteagel_linear_k004": 1330, "porteagel_linear_lim": 1330, "porteagel_linear_lim_k002": 1330, "porteagel_linear_lim_k004": 1330, "porteagel_max": 1330, "porteagel_max_amb": 1330, "porteagel_max_amb_k002": 1330, "porteagel_max_amb_k004": 1330, "porteagel_max_k002": 1330, "porteagel_max_k004": 1330, "porteagel_product": 1330, "porteagel_product_k002": 1330, "porteagel_product_k004": 1330, "porteagel_product_lim": 1330, "porteagel_product_lim_k002": 1330, "porteagel_product_lim_k004": 1330, "porteagel_quadrat": 1330, "porteagel_quadratic_amb": 1330, "porteagel_quadratic_amb_k002": 1330, "porteagel_quadratic_amb_k004": 1330, "porteagel_quadratic_k002": 1330, "porteagel_quadratic_k004": 1330, "turboparkix_linear_a002_dx001": 1330, "turboparkix_linear_a002_dx1": 1330, "turboparkix_linear_a002_dx10": 1330, "turboparkix_linear_a002_dx100": 1330, "turboparkix_linear_a002_dx5": 1330, "turboparkix_linear_a002_dx50": 1330, "turboparkix_linear_a004_dx001": 1330, "turboparkix_linear_a004_dx1": 1330, "turboparkix_linear_a004_dx10": 1330, "turboparkix_linear_a004_dx100": 1330, "turboparkix_linear_a004_dx5": 1330, "turboparkix_linear_a004_dx50": 1330, "turboparkix_linear_amb_a002_dx001": 1330, "turboparkix_linear_amb_a002_dx1": 1330, "turboparkix_linear_amb_a002_dx10": 1330, "turboparkix_linear_amb_a002_dx100": 1330, "turboparkix_linear_amb_a002_dx5": 1330, "turboparkix_linear_amb_a002_dx50": 1330, "turboparkix_linear_amb_a004_dx001": 1330, "turboparkix_linear_amb_a004_dx1": 1330, "turboparkix_linear_amb_a004_dx10": 1330, "turboparkix_linear_amb_a004_dx100": 1330, "turboparkix_linear_amb_a004_dx5": 1330, "turboparkix_linear_amb_a004_dx50": 1330, "turboparkix_linear_lim_a002_dx001": 1330, "turboparkix_linear_lim_a002_dx1": 1330, "turboparkix_linear_lim_a002_dx10": 1330, "turboparkix_linear_lim_a002_dx100": 1330, "turboparkix_linear_lim_a002_dx5": 1330, "turboparkix_linear_lim_a002_dx50": 1330, "turboparkix_linear_lim_a004_dx001": 1330, "turboparkix_linear_lim_a004_dx1": 1330, "turboparkix_linear_lim_a004_dx10": 1330, "turboparkix_linear_lim_a004_dx100": 1330, "turboparkix_linear_lim_a004_dx5": 1330, "turboparkix_linear_lim_a004_dx50": 1330, "turboparkix_max_a002_dx001": 1330, "turboparkix_max_a002_dx1": 1330, "turboparkix_max_a002_dx10": 1330, "turboparkix_max_a002_dx100": 1330, "turboparkix_max_a002_dx5": 1330, "turboparkix_max_a002_dx50": 1330, "turboparkix_max_a004_dx001": 1330, "turboparkix_max_a004_dx1": 1330, "turboparkix_max_a004_dx10": 1330, "turboparkix_max_a004_dx100": 1330, "turboparkix_max_a004_dx5": 1330, "turboparkix_max_a004_dx50": 1330, "turboparkix_max_amb_a002_dx001": 1330, "turboparkix_max_amb_a002_dx1": 1330, "turboparkix_max_amb_a002_dx10": 1330, "turboparkix_max_amb_a002_dx100": 1330, "turboparkix_max_amb_a002_dx5": 1330, "turboparkix_max_amb_a002_dx50": 1330, "turboparkix_max_amb_a004_dx001": 1330, "turboparkix_max_amb_a004_dx1": 1330, "turboparkix_max_amb_a004_dx10": 1330, "turboparkix_max_amb_a004_dx100": 1330, "turboparkix_max_amb_a004_dx5": 1330, "turboparkix_max_amb_a004_dx50": 1330, "turboparkix_product_a002_dx001": 1330, "turboparkix_product_a002_dx1": 1330, "turboparkix_product_a002_dx10": 1330, "turboparkix_product_a002_dx100": 1330, "turboparkix_product_a002_dx5": 1330, "turboparkix_product_a002_dx50": 1330, "turboparkix_product_a004_dx001": 1330, "turboparkix_product_a004_dx1": 1330, "turboparkix_product_a004_dx10": 1330, "turboparkix_product_a004_dx100": 1330, "turboparkix_product_a004_dx5": 1330, "turboparkix_product_a004_dx50": 1330, "turboparkix_product_lim_a002_dx001": 1330, "turboparkix_product_lim_a002_dx1": 1330, "turboparkix_product_lim_a002_dx10": 1330, "turboparkix_product_lim_a002_dx100": 1330, "turboparkix_product_lim_a002_dx5": 1330, "turboparkix_product_lim_a002_dx50": 1330, "turboparkix_product_lim_a004_dx001": 1330, "turboparkix_product_lim_a004_dx1": 1330, "turboparkix_product_lim_a004_dx10": 1330, "turboparkix_product_lim_a004_dx100": 1330, "turboparkix_product_lim_a004_dx5": 1330, "turboparkix_product_lim_a004_dx50": 1330, "turboparkix_quadratic_a002_dx001": 1330, "turboparkix_quadratic_a002_dx1": 1330, "turboparkix_quadratic_a002_dx10": 1330, "turboparkix_quadratic_a002_dx100": 1330, "turboparkix_quadratic_a002_dx5": 1330, "turboparkix_quadratic_a002_dx50": 1330, "turboparkix_quadratic_a004_dx001": 1330, "turboparkix_quadratic_a004_dx1": 1330, "turboparkix_quadratic_a004_dx10": 1330, "turboparkix_quadratic_a004_dx100": 1330, "turboparkix_quadratic_a004_dx5": 1330, "turboparkix_quadratic_a004_dx50": 1330, "turboparkix_quadratic_amb_a002_dx001": 1330, "turboparkix_quadratic_amb_a002_dx1": 1330, "turboparkix_quadratic_amb_a002_dx10": 1330, "turboparkix_quadratic_amb_a002_dx100": 1330, "turboparkix_quadratic_amb_a002_dx5": 1330, "turboparkix_quadratic_amb_a002_dx50": 1330, "turboparkix_quadratic_amb_a004_dx001": 1330, "turboparkix_quadratic_amb_a004_dx1": 1330, "turboparkix_quadratic_amb_a004_dx10": 1330, "turboparkix_quadratic_amb_a004_dx100": 1330, "turboparkix_quadratic_amb_a004_dx5": 1330, "turboparkix_quadratic_amb_a004_dx50": 1330, "turbopark_linear_a002": 1330, "turbopark_linear_a004": 1330, "turbopark_linear_amb_a002": 1330, "turbopark_linear_amb_a004": 1330, "turbopark_linear_lim_a002": 1330, "turbopark_linear_lim_a004": 1330, "turbopark_max_a002": 1330, "turbopark_max_a004": 1330, "turbopark_max_amb_a002": 1330, "turbopark_max_amb_a004": 1330, "turbopark_product_a002": 1330, "turbopark_product_a004": 1330, "turbopark_product_lim_a002": 1330, "turbopark_product_lim_a004": 1330, "turbopark_quadratic_a002": 1330, "turbopark_quadratic_a004": 1330, "turbopark_quadratic_amb_a002": 1330, "turbopark_quadratic_amb_a004": 1330, "my_jensen": 1330, "042": 1330, "jensenwake45": 1330, "freshli": 1330, "similarli": [1330, 1333, 1339], "section": [1330, 1332, 1335, 1337, 1339], "explor": 1331, "download": 1331, "newa": 1331, "websit": 1331, "4464": 1331, "stamp": 1331, "mark": 1331, "month": 1331, "kinet": [1331, 1332], "energi": [1331, 1332], "assumpt": 1331, "variat": 1331, "neglect": 1331, "inflow": [1331, 1337], "manual": 1331, "alreadi": [1331, 1335], "howev": [1331, 1339], "neither": [1331, 1333], "goal": 1331, "certain": 1331, "approxim": 1331, "west": [1331, 1334, 1339], "undo": 1331, "earlier": 1331, "p0": [1331, 1333, 1337, 1338], "nfarm": [1331, 1333, 1335, 1336, 1337, 1338, 1339], "1f": [1331, 1333, 1337, 1338], "2f": [1331, 1333, 1337, 1338], "340": [1331, 1334], "14377": 1331, "593022": 1331, "1533": 1331, "584614": 1331, "83636": 1331, "192504": 1331, "1299": 1331, "635898": 1331, "299802": 1331, "1362": 1331, "286874": 1331, "538688": 1331, "1501": 1331, "771092": 1331, "226181": 1331, "1940": 1331, "207249": 1331, "532676": 1331, "4041": 1331, "896723": 1331, "22320": 1331, "131": 1331, "reflect": [1332, 1336, 1339], "script": 1332, "inform": [1332, 1335, 1337], "arbitrari": 1332, "becom": 1332, "reli": 1332, "averag": 1332, "stem": 1332, "henc": [1332, 1333, 1334, 1337], "approach": 1332, "might": 1332, "sdata": [1333, 1339], "exce": 1333, "nor": 1333, "pmax_": 1333, "s_": 1333, "pmax_4": 1333, "6000": [1333, 1334], "pmax_2": 1333, "pmax_0": 1333, "pmax_1": 1333, "pmax_3": 1333, "set_pmax": 1333, "thought": 1333, "sinc": [1333, 1336], "od": 1333, "furthermor": 1333, "somewher": 1333, "present": 1333, "influenc": 1333, "o1": 1333, "000000": [1333, 1335, 1336, 1337, 1339], "100622": 1333, "403": 1333, "460668": 1333, "230759": 1333, "160101": 1333, "836726": 1333, "448432": 1333, "102": [1333, 1337], "024826": 1333, "1771": 1333, "969501": 1333, "727": 1333, "422438": 1333, "109672": 1333, "440": 1333, "497551": 1333, "664896": 1333, "328": 1333, "099527": 1333, "346418": 1333, "256": 1333, "059846": 1333, "4562": 1333, "500000": 1333, "218395": 1333, "1934": 1333, "349917": 1333, "026105": 1333, "1202": 1333, "442515": 1333, "419438": 1333, "926": 1333, "179190": 1333, "069268": 1333, "768": 1333, "743105": 1333, "740422": 1333, "265493": 1333, "610241": 1333, "4829": 1333, "480538": 1333, "737726": 1333, "305147": 1333, "704317": 1333, "538785": 1333, "001123": 1333, "463783": 1333, "027022": 1333, "922952": 1333, "572237": 1333, "549852": 1333, "200276": 1333, "124457": 1333, "856675": 1333, "753726": 1333, "552823": 1333, "501976": 1333, "340518": 1333, "re": [1333, 1336], "o0": 1333, "edgecolor": 1333, "white": 1333, "ylorrd": 1333, "vmin": 1333, "vmax": 1333, "nanmax": 1333, "ylgn": 1333, "produc": [1333, 1337], "off": 1334, "persu": 1334, "east": 1334, "wd_min": 1334, "wd_max": 1334, "170": 1334, "191": 1334, "290": 1334, "110": 1334, "correspons": 1334, "fulfil": 1334, "ttype": 1334, "nrel": [1334, 1335, 1337], "d126": [1334, 1335, 1337], "h90": [1334, 1335, 1337], "sector_rul": 1334, "rews_min": 1334, "rews_max": 1334, "orient": 1334, "wa": [1334, 1336], "5001": 1334, "7000": 1334, "high": 1334, "westerli": 1334, "south": 1334, "summari": 1335, "skip": 1335, "ask": 1335, "519e": 1335, "6e": 1335, "4e": 1335, "2e": 1335, "easili": 1335, "2518": 1335, "600000": 1335, "790000": 1335, "633459": 1335, "1557": 1335, "076947": 1335, "803665": 1335, "176627": 1335, "1290": 1335, "332498": 1335, "808234": 1335, "955794": 1335, "1167": 1335, "325199": 1335, "812210": 1335, "821354": 1335, "1106": 1335, "880886": 1335, "818932": 1335, "linspac": 1335, "15000": 1335, "npoint": 1335, "set_xlabel": 1335, "set_ylabel": 1335, "916": 1335, "principl": 1336, "backward": 1336, "trajectori": 1336, "hit": [1336, 1339], "fall": 1336, "cross": [1336, 1339], "commun": 1336, "inlcud": 1336, "rcparam": 1336, "jshtml": 1336, "101": [1336, 1338], "202": [1336, 1338], "324e": 1336, "lim": 1336, "000e": 1336, "fail": 1336, "ok": 1336, "203": 1336, "behaviour": 1336, "farm_df": [1336, 1339], "1532": 1336, "700000": [1336, 1337], "063574": 1336, "845": 1336, "738040": 1336, "693421": 1336, "640": 1336, "016335": 1336, "gridspec_kw": 1336, "height_ratio": 1336, "anom": 1336, "panel": 1336, "013": 1336, "fun": [1336, 1337], "304": 1336, "desir": [1337, 1339], "timeseries_8000": 1337, "test_farm_67": 1337, "further": 1337, "alwai": 1337, "598951": 1337, "307949": 1337, "067607": 1337, "522240": 1337, "728003": 1337, "299": 1337, "208883": 1337, "4868": 1337, "2712": 1337, "819583": 1337, "435150": 1337, "4752": 1337, "878044": 1337, "750000": 1337, "607321": 1337, "4828": 1337, "202797": 1337, "769528": 1337, "3234": 1337, "107125": 1337, "536000": 1337, "turbine_result": 1337, "nresult": 1337, "3067": 1337, "723397": 1337, "2778": 1337, "987770": 1337, "613545": 1337, "555798": 1337, "825445": 1337, "873257": 1337, "2531": 1337, "065918": 1337, "506213": 1337, "713413": 1337, "2702": 1337, "820210": 1337, "540564": 1337, "780747": 1337, "2739": 1337, "058250": 1337, "547812": 1337, "805992": 1337, "2593": 1337, "172270": 1337, "518634": 1337, "737070": 1337, "2625": 1337, "796799": 1337, "525159": 1337, "748704": 1337, "2591": 1337, "950988": 1337, "518390": 1337, "731988": 1337, "2864": 1337, "102273": 1337, "572820": 1337, "860799": 1337, "2571": 1337, "260829": 1337, "514252": 1337, "726062": 1337, "2633": 1337, "819847": 1337, "526764": 1337, "755245": 1337, "343933": 1337, "172137": 1337, "676705": 1337, "994150": 1337, "716189": 1337, "001980": 1337, "705491": 1337, "089536": 1337, "524245": 1337, "072262": 1337, "177": 1337, "205": 1337, "1558": 1337, "seen": 1337, "mean_eff": [1337, 1338], "faster": 1337, "overhead": 1337, "But": 1337, "extrem": 1337, "realli": 1337, "dai": 1337, "nmean": 1337, "launch": 1337, "localclust": 1337, "849c5264": 1337, "tcp": 1337, "39549": 1337, "128": 1337, "251": 1337, "gib": 1337, "dashboard": 1337, "8787": 1337, "statu": 1337, "shut": 1337, "runtim": 1337, "localhost": 1337, "address": 1337, "plenti": 1337, "relat": 1338, "686": 1338, "perfectli": 1338, "fine": 1338, "aim": 1339, "set_yawm": 1339, "want": 1339, "sensit": 1339, "continu": 1339, "downstream": 1339, "clearli": 1339, "frontal": 1339, "146549": 1339, "042770": 1339, "240": 1339, "co": 1339, "corect": 1339, "fact": 1339, "p_": 1339, "crespohernandez": 1339, "even": 1339, "though": 1339}, "objects": {"foxes.algorithms": [[0, 0, 1, "", "Downwind", "The downwind algorithm."], [8, 0, 1, "", "Iterative", "Iterative calculation of farm data."]], "foxes.algorithms.Downwind": [[1, 1, 1, "", "__init__", "Constructor."], [2, 1, 1, "", "calc_farm", "Calculate farm data."], [3, 1, 1, "", "calc_points", "Calculate data at a given set of points."], [4, 1, 1, "", "finalize", "Finalizes the algorithm."], [5, 1, 1, "", "get_model", "Get the algorithm specific model"], [6, 1, 1, "", "init_states", "Initialize states, if needed."], [7, 1, 1, "", "initialize", "Initializes the algorithm."]], "foxes.algorithms.Iterative": [[9, 1, 1, "", "__init__", "Constructor."], [10, 1, 1, "", "calc_farm", "Calculate farm data."], [11, 1, 1, "", "get_model", "Get the algorithm specific model"], [12, 2, 1, "", "iterations", "The current iteration number"]], "foxes.algorithms.downwind.models": [[13, 0, 1, "", "CalcOrder", "This model calculates the turbine evaluation order, via wake frames."], [17, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."], [22, 0, 1, "", "PointWakesCalculation", "This model calculates wake effects at points of interest."], [28, 0, 1, "", "SetAmbFarmResults", "This model copies farm data results to ambient results."], [32, 0, 1, "", "SetAmbPointResults", "This model copies point results to ambient results."]], "foxes.algorithms.downwind.models.CalcOrder": [[14, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [15, 1, 1, "", "initialize", "Initializes the model."], [16, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.FarmWakesCalculation": [[18, 1, 1, "", "__init__", "Constructor."], [19, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [20, 1, 1, "", "initialize", "Initializes the model."], [21, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.PointWakesCalculation": [[23, 1, 1, "", "__init__", "Constructor."], [24, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [25, 1, 1, "", "contribute_to_wake_deltas", "Contribute to wake deltas from source turbines"], [26, 1, 1, "", "initialize", "Initializes the model."], [27, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.SetAmbFarmResults": [[29, 1, 1, "", "__init__", "Constructor."], [30, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [31, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.SetAmbPointResults": [[33, 1, 1, "", "__init__", "Constructor."], [34, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [35, 1, 1, "", "initialize", "Initializes the model."], [36, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.algorithms.iterative": [[37, 0, 1, "", "ConvCrit", "Abstract base class for convergence criteria"], [41, 0, 1, "", "ConvCritList", "A list of convergence criteria"], [46, 0, 1, "", "ConvVarDelta", "Requires convergence of a selection of variables."], [50, 0, 1, "", "DefaultConv", "Default convergence criteria."]], "foxes.algorithms.iterative.ConvCrit": [[38, 1, 1, "", "__init__", "Constructor."], [39, 1, 1, "", "check_converged", "Check convergence criteria."], [40, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvCritList": [[42, 1, 1, "", "__init__", "Constructor."], [43, 1, 1, "", "add_crit", "Add a convergence criterion"], [44, 1, 1, "", "check_converged", "Check convergence criteria."], [45, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvVarDelta": [[47, 1, 1, "", "__init__", "Constructor."], [48, 1, 1, "", "check_converged", "Check convergence criteria."], [49, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.DefaultConv": [[51, 1, 1, "", "__init__", "Constructor."]], "foxes.algorithms.iterative.models": [[52, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."]], "foxes.algorithms.iterative.models.FarmWakesCalculation": [[53, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [54, 1, 1, "", "initialize", "Initializes the model."], [55, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.constants": [[194, 3, 1, "", "AMB_RPOINT_RESULTS", "Identified for ambient rotor point results"], [195, 4, 1, "", "DTYPE", "Default data type for floats"], [318, 3, 1, "", "FARM", "Wind farm identifier"], [319, 3, 1, "", "GW", "The unit giga watt"], [320, 4, 1, "", "ITYPE", "Default data type for int"], [370, 3, 1, "", "KAPPA", "The Van-Karman constant"], [371, 3, 1, "", "MW", "The unit mega watt"], [372, 3, 1, "", "POINT", "Point identifier"], [373, 3, 1, "", "POINTS", "Points identifier"], [374, 3, 1, "", "POP", "Population identifier"], [375, 3, 1, "", "P_UNITS", "Power unit factors relative to watts, key: unit str, value: factor"], [376, 3, 1, "", "RPOINT", "Rotor point identifier"], [377, 3, 1, "", "RPOINTS", "Rotor points identifier"], [378, 3, 1, "", "RWEIGHTS", "Rotor point weights identifier"], [379, 3, 1, "", "STATE", "States identifier"], [380, 3, 1, "", "STATES_SEL", "Identifier for states selection"], [381, 3, 1, "", "STATE_POINT", "Identifier for state-point dimensions"], [382, 3, 1, "", "STATE_SOURCE_TURBINE", "Identifier for the source turbines per state"], [383, 3, 1, "", "STATE_TURBINE", "Identifier for state-turbine dimensions"], [384, 3, 1, "", "TMODELS", "Turbine models identifier"], [385, 3, 1, "", "TMODEL_SELS", "Selected turbine models identifier"], [386, 3, 1, "", "TNAME", "Wind turbine name identifier"], [387, 3, 1, "", "TURBINE", "Wind turbine identifier"], [388, 3, 1, "", "TW", "The unit terra watt"], [389, 3, 1, "", "VALID", "Validity identifier"], [390, 3, 1, "", "VARS", "Variables identifier"], [391, 3, 1, "", "W", "The unit watt"], [392, 3, 1, "", "XYH", "The vector (x, y, height)"], [393, 3, 1, "", "kW", "The unit kilo watt"]], "foxes.constants.DTYPE": [[196, 4, 1, "", "T", "Scalar attribute identical to the corresponding array attribute."], [197, 1, 1, "", "__abs__", "abs(self)"], [198, 1, 1, "", "__add__", "Return self+value."], [199, 1, 1, "", "__and__", "Return self&value."], [200, 1, 1, "", "__array__", "sc.__array__(dtype) return 0-dim array from scalar with specified dtype"], [201, 4, 1, "", "__array_interface__", "Array protocol: Python side"], [202, 4, 1, "", "__array_priority__", "Array priority."], [203, 4, 1, "", "__array_struct__", "Array protocol: struct"], [204, 1, 1, "", "__array_wrap__", "sc.__array_wrap__(obj) return scalar from array"], [205, 1, 1, "", "__bool__", "True if self else False"], [206, 1, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [207, 1, 1, "", "__divmod__", "Return divmod(self, value)."], [208, 1, 1, "", "__eq__", "Return self==value."], [209, 1, 1, "", "__float__", "float(self)"], [210, 1, 1, "", "__floordiv__", "Return self//value."], [211, 1, 1, "", "__format__", "NumPy array scalar formatter"], [212, 1, 1, "", "__ge__", "Return self>=value."], [213, 1, 1, "", "__getitem__", "Return self[key]."], [214, 1, 1, "", "__gt__", "Return self>value."], [215, 1, 1, "", "__hash__", "Return hash(self)."], [216, 1, 1, "", "__int__", "int(self)"], [217, 1, 1, "", "__invert__", "~self"], [218, 1, 1, "", "__le__", "Return self<=value."], [219, 1, 1, "", "__lshift__", "Return self<<value."], [220, 1, 1, "", "__lt__", "Return self<value."], [221, 1, 1, "", "__mod__", "Return self%value."], [222, 1, 1, "", "__mul__", "Return self*value."], [223, 1, 1, "", "__ne__", "Return self!=value."], [224, 1, 1, "", "__neg__", "-self"], [225, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [226, 1, 1, "", "__or__", "Return self|value."], [227, 1, 1, "", "__pos__", "+self"], [228, 1, 1, "", "__pow__", "Return pow(self, value, mod)."], [229, 1, 1, "", "__radd__", "Return value+self."], [230, 1, 1, "", "__rand__", "Return value&self."], [231, 1, 1, "", "__rdivmod__", "Return divmod(value, self)."], [232, 1, 1, "", "__reduce__", "Helper for pickle."], [233, 1, 1, "", "__repr__", "Return repr(self)."], [234, 1, 1, "", "__rfloordiv__", "Return value//self."], [235, 1, 1, "", "__rlshift__", "Return value<<self."], [236, 1, 1, "", "__rmod__", "Return value%self."], [237, 1, 1, "", "__rmul__", "Return value*self."], [238, 1, 1, "", "__ror__", "Return value|self."], [239, 1, 1, "", "__rpow__", "Return pow(value, self, mod)."], [240, 1, 1, "", "__rrshift__", "Return value>>self."], [241, 1, 1, "", "__rshift__", "Return self>>value."], [242, 1, 1, "", "__rsub__", "Return value-self."], [243, 1, 1, "", "__rtruediv__", "Return value/self."], [244, 1, 1, "", "__rxor__", "Return value^self."], [245, 1, 1, "", "__sizeof__", "Size of object in memory, in bytes."], [246, 1, 1, "", "__str__", "Return str(self)."], [247, 1, 1, "", "__sub__", "Return self-value."], [248, 1, 1, "", "__truediv__", "Return self/value."], [249, 1, 1, "", "__xor__", "Return self^value."], [250, 1, 1, "", "all", "Scalar method identical to the corresponding array attribute."], [251, 1, 1, "", "any", "Scalar method identical to the corresponding array attribute."], [252, 1, 1, "", "argmax", "Scalar method identical to the corresponding array attribute."], [253, 1, 1, "", "argmin", "Scalar method identical to the corresponding array attribute."], [254, 1, 1, "", "argsort", "Scalar method identical to the corresponding array attribute."], [255, 1, 1, "", "as_integer_ratio", "Return a pair of integers, whose ratio is exactly equal to the original floating point number, and with a positive denominator. Raise OverflowError on infinities and a ValueError on NaNs."], [256, 1, 1, "", "astype", "Scalar method identical to the corresponding array attribute."], [257, 4, 1, "", "base", "Scalar attribute identical to the corresponding array attribute."], [258, 1, 1, "", "byteswap", "Scalar method identical to the corresponding array attribute."], [259, 1, 1, "", "choose", "Scalar method identical to the corresponding array attribute."], [260, 1, 1, "", "clip", "Scalar method identical to the corresponding array attribute."], [261, 1, 1, "", "compress", "Scalar method identical to the corresponding array attribute."], [262, 1, 1, "", "conj", ""], [263, 1, 1, "", "conjugate", "Scalar method identical to the corresponding array attribute."], [264, 1, 1, "", "copy", "Scalar method identical to the corresponding array attribute."], [265, 1, 1, "", "cumprod", "Scalar method identical to the corresponding array attribute."], [266, 1, 1, "", "cumsum", "Scalar method identical to the corresponding array attribute."], [267, 4, 1, "", "data", "Pointer to start of data."], [268, 1, 1, "", "diagonal", "Scalar method identical to the corresponding array attribute."], [269, 4, 1, "", "dtype", "Get array data-descriptor."], [270, 1, 1, "", "dump", "Scalar method identical to the corresponding array attribute."], [271, 1, 1, "", "dumps", "Scalar method identical to the corresponding array attribute."], [272, 1, 1, "", "fill", "Scalar method identical to the corresponding array attribute."], [273, 4, 1, "", "flags", "The integer value of flags."], [274, 4, 1, "", "flat", "A 1-D view of the scalar."], [275, 1, 1, "", "flatten", "Scalar method identical to the corresponding array attribute."], [276, 1, 1, "", "getfield", "Scalar method identical to the corresponding array attribute."], [277, 4, 1, "", "imag", "The imaginary part of the scalar."], [278, 1, 1, "", "is_integer", "Return True if the floating point number is finite with integral value, and False otherwise."], [279, 1, 1, "", "item", "Scalar method identical to the corresponding array attribute."], [280, 1, 1, "", "itemset", "Scalar method identical to the corresponding array attribute."], [281, 4, 1, "", "itemsize", "The length of one element in bytes."], [282, 1, 1, "", "max", "Scalar method identical to the corresponding array attribute."], [283, 1, 1, "", "mean", "Scalar method identical to the corresponding array attribute."], [284, 1, 1, "", "min", "Scalar method identical to the corresponding array attribute."], [285, 4, 1, "", "nbytes", "The length of the scalar in bytes."], [286, 4, 1, "", "ndim", "The number of array dimensions."], [287, 1, 1, "", "newbyteorder", "Return a new dtype with a different byte order."], [288, 1, 1, "", "nonzero", "Scalar method identical to the corresponding array attribute."], [289, 1, 1, "", "prod", "Scalar method identical to the corresponding array attribute."], [290, 1, 1, "", "ptp", "Scalar method identical to the corresponding array attribute."], [291, 1, 1, "", "put", "Scalar method identical to the corresponding array attribute."], [292, 1, 1, "", "ravel", "Scalar method identical to the corresponding array attribute."], [293, 4, 1, "", "real", "The real part of the scalar."], [294, 1, 1, "", "repeat", "Scalar method identical to the corresponding array attribute."], [295, 1, 1, "", "reshape", "Scalar method identical to the corresponding array attribute."], [296, 1, 1, "", "resize", "Scalar method identical to the corresponding array attribute."], [297, 1, 1, "", "round", "Scalar method identical to the corresponding array attribute."], [298, 1, 1, "", "searchsorted", "Scalar method identical to the corresponding array attribute."], [299, 1, 1, "", "setfield", "Scalar method identical to the corresponding array attribute."], [300, 1, 1, "", "setflags", "Scalar method identical to the corresponding array attribute."], [301, 4, 1, "", "shape", "Tuple of array dimensions."], [302, 4, 1, "", "size", "The number of elements in the gentype."], [303, 1, 1, "", "sort", "Scalar method identical to the corresponding array attribute."], [304, 1, 1, "", "squeeze", "Scalar method identical to the corresponding array attribute."], [305, 1, 1, "", "std", "Scalar method identical to the corresponding array attribute."], [306, 4, 1, "", "strides", "Tuple of bytes steps in each dimension."], [307, 1, 1, "", "sum", "Scalar method identical to the corresponding array attribute."], [308, 1, 1, "", "swapaxes", "Scalar method identical to the corresponding array attribute."], [309, 1, 1, "", "take", "Scalar method identical to the corresponding array attribute."], [310, 1, 1, "", "tobytes", ""], [311, 1, 1, "", "tofile", "Scalar method identical to the corresponding array attribute."], [312, 1, 1, "", "tolist", "Scalar method identical to the corresponding array attribute."], [313, 1, 1, "", "tostring", "Scalar method identical to the corresponding array attribute."], [314, 1, 1, "", "trace", "Scalar method identical to the corresponding array attribute."], [315, 1, 1, "", "transpose", "Scalar method identical to the corresponding array attribute."], [316, 1, 1, "", "var", "Scalar method identical to the corresponding array attribute."], [317, 1, 1, "", "view", "Scalar method identical to the corresponding array attribute."]], "foxes.constants.ITYPE": [[321, 1, 1, "", "__abs__", "abs(self)"], [322, 1, 1, "", "__add__", "Return self+value."], [323, 1, 1, "", "__and__", "Return self&value."], [324, 1, 1, "", "__bool__", "True if self else False"], [325, 1, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [326, 1, 1, "", "__divmod__", "Return divmod(self, value)."], [327, 1, 1, "", "__eq__", "Return self==value."], [328, 1, 1, "", "__float__", "float(self)"], [329, 1, 1, "", "__floordiv__", "Return self//value."], [330, 1, 1, "", "__ge__", "Return self>=value."], [331, 1, 1, "", "__gt__", "Return self>value."], [332, 1, 1, "", "__hash__", "Return hash(self)."], [333, 1, 1, "", "__index__", "Return self converted to an integer, if self is suitable for use as an index into a list."], [334, 1, 1, "", "__int__", "int(self)"], [335, 1, 1, "", "__invert__", "~self"], [336, 1, 1, "", "__le__", "Return self<=value."], [337, 1, 1, "", "__lshift__", "Return self<<value."], [338, 1, 1, "", "__lt__", "Return self<value."], [339, 1, 1, "", "__mod__", "Return self%value."], [340, 1, 1, "", "__mul__", "Return self*value."], [341, 1, 1, "", "__ne__", "Return self!=value."], [342, 1, 1, "", "__neg__", "-self"], [343, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [344, 1, 1, "", "__or__", "Return self|value."], [345, 1, 1, "", "__pos__", "+self"], [346, 1, 1, "", "__pow__", "Return pow(self, value, mod)."], [347, 1, 1, "", "__radd__", "Return value+self."], [348, 1, 1, "", "__rand__", "Return value&self."], [349, 1, 1, "", "__rdivmod__", "Return divmod(value, self)."], [350, 1, 1, "", "__repr__", "Return repr(self)."], [351, 1, 1, "", "__rfloordiv__", "Return value//self."], [352, 1, 1, "", "__rlshift__", "Return value<<self."], [353, 1, 1, "", "__rmod__", "Return value%self."], [354, 1, 1, "", "__rmul__", "Return value*self."], [355, 1, 1, "", "__ror__", "Return value|self."], [356, 1, 1, "", "__rpow__", "Return pow(value, self, mod)."], [357, 1, 1, "", "__rrshift__", "Return value>>self."], [358, 1, 1, "", "__rshift__", "Return self>>value."], [359, 1, 1, "", "__rsub__", "Return value-self."], [360, 1, 1, "", "__rtruediv__", "Return value/self."], [361, 1, 1, "", "__rxor__", "Return value^self."], [362, 1, 1, "", "__str__", "Return str(self)."], [363, 1, 1, "", "__sub__", "Return self-value."], [364, 1, 1, "", "__truediv__", "Return self/value."], [365, 1, 1, "", "__xor__", "Return self^value."], [366, 1, 1, "", "bit_count", "Computes the number of 1-bits in the absolute value of the input. Analogous to the builtin int.bit_count or popcount in C++."], [367, 4, 1, "", "denominator", "denominator of value (1)"], [368, 1, 1, "", "is_integer", "Return True if the number is finite with integral value."], [369, 4, 1, "", "numerator", "numerator of value (the value itself)"]], "foxes.core": [[56, 0, 1, "", "Algorithm", "Abstract base class for algorithms."], [70, 0, 1, "", "Data", "Container for data and meta data."], [78, 0, 1, "", "DataCalcModel", "Abstract base class for models with that run calculation on xarray Dataset data."], [81, 0, 1, "", "ExtendedStates", "States extended by point data models."], [91, 0, 1, "", "FarmController", "Analyses selected turbine models and handles their call."], [100, 0, 1, "", "FarmDataModel", "Abstract base class for models that modify farm data."], [105, 0, 1, "", "FarmDataModelList", "A list of farm data models."], [113, 0, 1, "", "FarmModel", "A FarmDataModel that operates on the farm level (in contrast to a TurbineModel, which allows application to a subset of turbines)."], [114, 0, 1, "", "Model", "Base class for all models."], [127, 0, 1, "", "PartialWakesModel", "Abstract base class for partial wakes models."], [135, 0, 1, "", "PointDataModel", "Abstract base class for models that modify point based data."], [139, 0, 1, "", "PointDataModelList", "A list of point data models."], [147, 0, 1, "", "RotorModel", "Abstract base class of rotor models."], [156, 0, 1, "", "States", "Abstract base class for states."], [161, 0, 1, "", "Turbine", "An individual wind turbine."], [165, 0, 1, "", "TurbineModel", "Abstract base class for turbine models."], [167, 0, 1, "", "TurbineType", "Abstract base class for turbine type models."], [169, 0, 1, "", "VerticalProfile", "Abstract base class for vertical profiles."], [173, 0, 1, "", "WakeFrame", "Abstract base class for wake frames."], [178, 0, 1, "", "WakeModel", "Abstract base class for wake models."], [182, 0, 1, "", "WakeSuperposition", "Abstract base class for wake superposition models."], [185, 0, 1, "", "WindFarm", "The wind farm."]], "foxes.core.Algorithm": [[57, 1, 1, "", "__init__", "Constructor."], [58, 1, 1, "", "chunked", ""], [59, 1, 1, "", "cleanup", "Cleanup after calculation"], [60, 1, 1, "", "finalize", "Finalizes the algorithm."], [61, 1, 1, "", "finalize_model", "Call the finalization routine of the model, if not to be kept."], [62, 1, 1, "", "get_models_data", "Creates xarray from model input data."], [63, 2, 1, "", "idata_mem", "The current idata memory"], [64, 1, 1, "", "initialize", "Initializes the algorithm."], [65, 1, 1, "", "new", "Run-time algorithm factory."], [66, 1, 1, "", "new_point_data", "Creates a point data xarray object, containing only points."], [67, 1, 1, "", "print", "Print function, based on verbosity."], [68, 1, 1, "", "update_idata", "Add to idata memory, optionally update and return idata object."], [69, 1, 1, "", "update_n_turbines", "Reset the number of turbines, according to self.farm"]], "foxes.core.Data": [[71, 1, 1, "", "__init__", "Constructor."], [72, 1, 1, "", "add", "Add data entry"], [73, 1, 1, "", "from_points", "Create from points"], [74, 2, 1, "", "n_points", "The number of points"], [75, 2, 1, "", "n_states", "The number of states"], [76, 2, 1, "", "n_turbines", "The number of turbines"], [77, 1, 1, "", "states_i0", "Get the state counter for first state in chunk"]], "foxes.core.DataCalcModel": [[79, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [80, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.ExtendedStates": [[82, 1, 1, "", "__init__", "Constructor."], [83, 1, 1, "", "append", "Add a model to the list"], [84, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [85, 1, 1, "", "finalize", "Finalizes the model."], [86, 1, 1, "", "index", "The index list"], [87, 1, 1, "", "initialize", "Initializes the model."], [88, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [89, 1, 1, "", "size", "The total number of states."], [90, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.FarmController": [[92, 1, 1, "", "__init__", "Constructor."], [93, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [94, 1, 1, "", "collect_models", "Analyze and gather turbine models, based on the turbines of the wind farm."], [95, 1, 1, "", "finalize", "Finalizes the model."], [96, 1, 1, "", "initialize", "Initializes the model."], [97, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [98, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [99, 1, 1, "", "set_pars", "Set parameters for a turbine model"]], "foxes.core.FarmDataModel": [[101, 1, 1, "", "__init__", "Constructor."], [102, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [103, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [104, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.FarmDataModelList": [[106, 1, 1, "", "__init__", "Constructor."], [107, 1, 1, "", "append", "Add a model to the list"], [108, 1, 1, "", "calculate", "The main model calculation."], [109, 1, 1, "", "finalize", "Finalizes the model."], [110, 1, 1, "", "initialize", "Initializes the model."], [111, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [112, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.core.Model": [[115, 1, 1, "", "__init__", "Constructor."], [116, 1, 1, "", "__repr__", "Return repr(self)."], [117, 1, 1, "", "data_to_store", "Adds data from mdata to the local store, intended for iterative runs."], [118, 1, 1, "", "finalize", "Finalizes the model."], [119, 1, 1, "", "from_data_or_store", "Get data from mdata or local store"], [120, 1, 1, "", "get_data", "Getter for a data entry in the model object or provided data sources"], [121, 1, 1, "", "initialize", "Initializes the model."], [122, 2, 1, "", "initialized", "Initialization flag."], [123, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [124, 2, 1, "", "model_id", "Unique id based on the model type."], [125, 1, 1, "", "reduce_states", "Modifies the given objects by selecting a subset of states."], [126, 1, 1, "", "var", "Creates a model specific variable name."]], "foxes.core.PartialWakesModel": [[128, 1, 1, "", "__init__", "Constructor."], [129, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [130, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [131, 1, 1, "", "initialize", "Initializes the model."], [132, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [133, 1, 1, "", "new", "Run-time partial wakes factory."], [134, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.core.PointDataModel": [[136, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [137, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [138, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.PointDataModelList": [[140, 1, 1, "", "__init__", "Constructor."], [141, 1, 1, "", "append", "Add a model to the list"], [142, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [143, 1, 1, "", "finalize", "Finalizes the model."], [144, 1, 1, "", "initialize", "Initializes the model."], [145, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [146, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.core.RotorModel": [[148, 1, 1, "", "__init__", "Constructor."], [149, 1, 1, "", "calculate", "Calculate ambient rotor effective results."], [150, 1, 1, "", "design_points", "The rotor model design points."], [151, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [152, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [153, 1, 1, "", "n_rotor_points", "The number of rotor points"], [154, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [155, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.core.States": [[157, 1, 1, "", "index", "The index list"], [158, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [159, 1, 1, "", "size", "The total number of states."], [160, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.Turbine": [[162, 1, 1, "", "__init__", "Constructor."], [163, 1, 1, "", "add_model", "Add a turbine model to the list."], [164, 1, 1, "", "insert_model", "Insert a turbine model into the list of models."]], "foxes.core.TurbineModel": [[166, 1, 1, "", "calculate", "The main model calculation."]], "foxes.core.TurbineType": [[168, 1, 1, "", "__init__", "Constructor."]], "foxes.core.VerticalProfile": [[170, 1, 1, "", "calculate", "Run the profile calculation."], [171, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."], [172, 1, 1, "", "new", "Run-time profile factory."]], "foxes.core.WakeFrame": [[174, 1, 1, "", "calc_centreline_integral", "Integrates variables along the centreline."], [175, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [176, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [177, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.core.WakeModel": [[179, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [180, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [181, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.core.WakeSuperposition": [[183, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [184, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.core.WindFarm": [[186, 1, 1, "", "__init__", "Constructor."], [187, 1, 1, "", "add_turbine", "Add a wind turbine to the list."], [188, 2, 1, "", "n_turbines", "The number of turbines in the wind farm"], [189, 2, 1, "", "turbine_names", "The list of names of all turbines"]], "foxes.data": [[190, 0, 1, "", "StaticData", "A DataBook filled with static data from this directory."], [192, 5, 1, "", "parse_Pct_file_name", "Parse basic turbine data from file name"], [193, 5, 1, "", "parse_Pct_two_files", "Parse basic turbine data from file names"]], "foxes.data.StaticData": [[191, 1, 1, "", "__init__", "Constructor."]], "foxes.input.farm_layout": [[441, 5, 1, "", "add_from_csv", "Add turbines to wind farm via csv input file."], [442, 5, 1, "", "add_from_df", "Add turbines to wind farm via pandas DataFrame."], [443, 5, 1, "", "add_from_file", "Add turbines from file."], [444, 5, 1, "", "add_from_json", "Add turbimes from a json file."], [445, 5, 1, "", "add_grid", "Add a regular grid of turbines."], [446, 5, 1, "", "add_row", "Add a single row of turbines."]], "foxes.input.states": [[447, 0, 1, "", "FieldDataNC", "Heterogeneous ambient states on a regular horizontal grid in NetCDF format."], [455, 0, 1, "", "MultiHeightStates", "States with multiple heights data per entry."], [466, 0, 1, "", "MultiHeightTimeseries", "Multi-height timeseries states data."], [468, 0, 1, "", "ScanWS", "A given list of wind speeds, all other variables are fixed."], [475, 0, 1, "", "SingleStateStates", "A single uniform state."], [482, 0, 1, "", "StatesTable", "States from a pandas.DataFrame or a pandas readable file."], [493, 0, 1, "", "Timeseries", "Timeseries states data."], [495, 5, 1, "", "create_random_abl_states", "Create random abl states."]], "foxes.input.states.FieldDataNC": [[448, 1, 1, "", "__init__", "Constructor."], [449, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [450, 1, 1, "", "index", "The index list"], [451, 1, 1, "", "initialize", "Initializes the model."], [452, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [453, 1, 1, "", "size", "The total number of states."], [454, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightStates": [[456, 4, 1, "", "RDICT", ""], [457, 1, 1, "", "__init__", "Constructor."], [458, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [459, 1, 1, "", "finalize", "Finalizes the model."], [460, 1, 1, "", "index", "The index list"], [461, 1, 1, "", "initialize", "Initializes the model."], [462, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [463, 1, 1, "", "reset", "Reset the states, optionally select states"], [464, 1, 1, "", "size", "The total number of states."], [465, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightTimeseries": [[467, 4, 1, "", "RDICT", ""]], "foxes.input.states.ScanWS": [[469, 1, 1, "", "__init__", "Constructor."], [470, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [471, 1, 1, "", "initialize", "Initializes the model."], [472, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [473, 1, 1, "", "size", "The total number of states."], [474, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.SingleStateStates": [[476, 1, 1, "", "__init__", "Constructor."], [477, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [478, 1, 1, "", "initialize", "Initializes the model."], [479, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [480, 1, 1, "", "size", "The total number of states."], [481, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.StatesTable": [[483, 4, 1, "", "RDICT", ""], [484, 1, 1, "", "__init__", "Constructor."], [485, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [486, 1, 1, "", "finalize", "Finalizes the model."], [487, 1, 1, "", "index", "The index list"], [488, 1, 1, "", "initialize", "Initializes the model."], [489, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [490, 1, 1, "", "reset", "Reset the states, optionally select states"], [491, 1, 1, "", "size", "The total number of states."], [492, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.Timeseries": [[494, 4, 1, "", "RDICT", ""]], "foxes.input.windio": [[496, 5, 1, "", "read_case", "Reads a WindIO case"]], "foxes.models.farm_controllers": [[497, 0, 1, "", "BasicFarmController", "The basic farm controller, running all turbine models in their order, without conditions."]], "foxes.models.farm_models": [[498, 0, 1, "", "Turbine2FarmModel", "Wrapper that promotes turbine models into farm models, simply by selecting all turbines."]], "foxes.models.farm_models.Turbine2FarmModel": [[499, 1, 1, "", "__init__", "Constructor."], [500, 1, 1, "", "__repr__", "Return repr(self)."], [501, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [502, 1, 1, "", "finalize", "Finalizes the model."], [503, 1, 1, "", "initialize", "Initializes the model."], [504, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.model_book": [[505, 0, 1, "", "Dict", "A slightly enhanced dictionary."], [508, 0, 1, "", "ModelBook", "Container for all kinds of models."]], "foxes.models.model_book.Dict": [[506, 1, 1, "", "__getitem__", "x.__getitem__(y) <==> x[y]"], [507, 1, 1, "", "__init__", "Constructor."]], "foxes.models.model_book.ModelBook": [[509, 1, 1, "", "__getitem__", ""], [510, 1, 1, "", "__init__", "Constructor."], [511, 1, 1, "", "finalize", "Finalizes the model."], [512, 1, 1, "", "print_toc", "Print the contents."]], "foxes.models.partial_wakes": [[513, 0, 1, "", "Mapped", "Partial wake models depending on the wake model (type)."], [521, 0, 1, "", "PartialAxiwake", "Partial wake calculation for axial wake models."], [530, 0, 1, "", "PartialDistSlicedWake", "Partial wakes for distance sliced wake models, making use of their structure."], [539, 0, 1, "", "PartialGrid", "Partial wakes on a grid rotor that may differ from the one in the algorithm."], [542, 0, 1, "", "PartialTopHat", "Partial wakes for top-hat models."], [550, 0, 1, "", "RotorPoints", "Partial wakes calculation directly by the rotor model."]], "foxes.models.partial_wakes.Mapped": [[514, 1, 1, "", "__init__", "Constructor."], [515, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [516, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [517, 1, 1, "", "finalize", "Finalizes the model."], [518, 1, 1, "", "initialize", "Initializes the model."], [519, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [520, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialAxiwake": [[522, 1, 1, "", "__init__", "Constructor."], [523, 1, 1, "", "__repr__", "Return repr(self)."], [524, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [525, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [526, 1, 1, "", "finalize", "Finalizes the model."], [527, 1, 1, "", "initialize", "Initializes the model."], [528, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [529, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialDistSlicedWake": [[531, 1, 1, "", "__init__", "Constructor."], [532, 1, 1, "", "__repr__", "Return repr(self)."], [533, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [534, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [535, 1, 1, "", "finalize", "Finalizes the model."], [536, 1, 1, "", "initialize", "Initializes the model."], [537, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [538, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialGrid": [[540, 1, 1, "", "__init__", "Constructor."], [541, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes.PartialTopHat": [[543, 1, 1, "", "__init__", "Constructor."], [544, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [545, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [546, 1, 1, "", "finalize", "Finalizes the model."], [547, 1, 1, "", "initialize", "Initializes the model."], [548, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"], [549, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.RotorPoints": [[551, 1, 1, "", "__init__", "Constructor."], [552, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [553, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [554, 1, 1, "", "get_wake_points", "Get the wake calculation points."], [555, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.point_models": [[556, 0, 1, "", "SetUniformData", "Set uniform data (can be state dependent)"], [561, 0, 1, "", "TKE2TI", "Calculates TI from TKE, using TI = sqrt( 3/2 * TKE) / WS"], [564, 0, 1, "", "WakeDeltas", "This point model simply subtracts ambient results from waked results."]], "foxes.models.point_models.SetUniformData": [[557, 1, 1, "", "__init__", "Constructor."], [558, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [559, 1, 1, "", "initialize", "Initializes the model."], [560, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.TKE2TI": [[562, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [563, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.WakeDeltas": [[565, 1, 1, "", "__init__", "Constructor."], [566, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [567, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.rotor_models": [[568, 0, 1, "", "CentreRotor", "The centre rotor model."], [574, 0, 1, "", "GridRotor", "The weighted regular grid rotor model, composed maximally of n x n points, possibly kicking out the outside points."], [581, 0, 1, "", "LevelRotor", "The weighted regular rotor level model, composed of of n points between lower and upper blade tip. Calculates a height-dependent REWS"]], "foxes.models.rotor_models.CentreRotor": [[569, 1, 1, "", "design_points", "The rotor model design points."], [570, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [571, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [572, 1, 1, "", "n_rotor_points", "The number of rotor points"], [573, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.GridRotor": [[575, 1, 1, "", "__init__", "Constructor."], [576, 1, 1, "", "__repr__", "Return repr(self)."], [577, 1, 1, "", "design_points", "The rotor model design points."], [578, 1, 1, "", "initialize", "Initializes the model."], [579, 1, 1, "", "n_rotor_points", "The number of rotor points"], [580, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.LevelRotor": [[582, 1, 1, "", "__init__", "Constructor."], [583, 1, 1, "", "__repr__", "Return repr(self)."], [584, 1, 1, "", "design_points", "The rotor model design points."], [585, 1, 1, "", "initialize", "Initializes the model."], [586, 1, 1, "", "n_rotor_points", "The number of rotor points"], [587, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.turbine_models": [[588, 0, 1, "", "Calculator", "Calculates variables based on given functions."], [592, 0, 1, "", "LookupTable", "Calculates the data by interpolation of lookup-table data"], [597, 0, 1, "", "PowerMask", "Invokes a maximal power value."], [603, 0, 1, "", "RotorCentreCalc", "Calculates data at the rotor centre"], [609, 0, 1, "", "SectorManagement", "Changes variables based on variable range conditions."], [614, 0, 1, "", "SetFarmVars", "Set farm data variables to given data."], [621, 0, 1, "", "SetXYHD", "Sets basic turbine data, from turbine object to farm data."], [625, 0, 1, "", "TableFactors", "Multiplies variables by factors from a two dimensional table."], [630, 0, 1, "", "Thrust2Ct", "Calculates ct from thrust force data."], [634, 0, 1, "", "YAW2YAWM", "Calculates delta yaw (i.e. YAWM) from absolute yaw (i.e. YAW)"], [637, 0, 1, "", "YAWM2YAW", "Calculates absolute yaw (i.e. YAWM) from delta yaw (i.e. YAWM)"], [640, 0, 1, "", "kTI", "Calculates the wake model parameter k as a linear function of TI."]], "foxes.models.turbine_models.Calculator": [[589, 1, 1, "", "__init__", "Constructor."], [590, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [591, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.LookupTable": [[593, 1, 1, "", "__init__", "Constructor."], [594, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [595, 1, 1, "", "initialize", "Initializes the model."], [596, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.PowerMask": [[598, 1, 1, "", "__init__", "Constructor."], [599, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [600, 1, 1, "", "initialize", "Initializes the model."], [601, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [602, 1, 1, "", "update_P_ct", ""]], "foxes.models.turbine_models.RotorCentreCalc": [[604, 1, 1, "", "__init__", "Constructor."], [605, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [606, 1, 1, "", "finalize", "Finalizes the model."], [607, 1, 1, "", "initialize", "Initializes the model."], [608, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SectorManagement": [[610, 1, 1, "", "__init__", "Constructor."], [611, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [612, 1, 1, "", "initialize", "Initializes the model."], [613, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SetFarmVars": [[615, 1, 1, "", "__init__", "Constructor."], [616, 1, 1, "", "add_var", "Add data for a variable."], [617, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [618, 1, 1, "", "initialize", "Initializes the model."], [619, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [620, 1, 1, "", "reset", "Remove all variables."]], "foxes.models.turbine_models.SetXYHD": [[622, 1, 1, "", "__init__", "Constructor."], [623, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [624, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.TableFactors": [[626, 1, 1, "", "__init__", "Constructor."], [627, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [628, 1, 1, "", "initialize", "Initializes the model."], [629, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.Thrust2Ct": [[631, 1, 1, "", "__init__", "Constructor."], [632, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [633, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAW2YAWM": [[635, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [636, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAWM2YAW": [[638, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [639, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.kTI": [[641, 1, 1, "", "__init__", "Constructor."], [642, 1, 1, "", "__repr__", "Return repr(self)."], [643, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [644, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types": [[645, 0, 1, "", "CpCtFile", "Calculate power and ct by interpolating from cp-ct-curve data file (or pandas DataFrame)."], [647, 0, 1, "", "CpCtFromTwo", "Calculate power and ct by interpolating cp and ct from two files (or two pandas DataFrames)."], [649, 0, 1, "", "NullType", "A turbine type that does not compute any data."], [652, 0, 1, "", "PCtFile", "Calculate power and ct by interpolating from power-ct-curve data file (or pandas DataFrame)."], [658, 0, 1, "", "PCtFromTwo", "Calculate power and ct by interpolating from power curve and ct curve data files."], [664, 0, 1, "", "WsRho2PCtFromTwo", "Calculate air density dependent power and ct values, as given by two individual files."], [670, 0, 1, "", "WsTI2PCtFromTwo", "Calculate turbulent intensity dependent power and ct values, as given by two individual files."]], "foxes.models.turbine_types.CpCtFile": [[646, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.CpCtFromTwo": [[648, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.NullType": [[650, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [651, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFile": [[653, 1, 1, "", "__init__", "Constructor."], [654, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [655, 1, 1, "", "finalize", "Finalizes the model."], [656, 1, 1, "", "initialize", "Initializes the model."], [657, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFromTwo": [[659, 1, 1, "", "__init__", "Constructor."], [660, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [661, 1, 1, "", "finalize", "Finalizes the model."], [662, 1, 1, "", "initialize", "Initializes the model."], [663, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsRho2PCtFromTwo": [[665, 1, 1, "", "__init__", "Constructor."], [666, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [667, 1, 1, "", "finalize", "Finalizes the model."], [668, 1, 1, "", "initialize", "Initializes the model."], [669, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsTI2PCtFromTwo": [[671, 1, 1, "", "__init__", "Constructor."], [672, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [673, 1, 1, "", "finalize", "Finalizes the model."], [674, 1, 1, "", "initialize", "Initializes the model."], [675, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.vertical_profiles": [[676, 0, 1, "", "ABLLogNeutralWsProfile", "The neutral ABL wind speed log profile."], [679, 0, 1, "", "ABLLogStableWsProfile", "The stable ABL wind speed log profile."], [682, 0, 1, "", "ABLLogUnstableWsProfile", "The unstable ABL wind speed log profile."], [685, 0, 1, "", "ABLLogWsProfile", "The neutral/stable/unstable ABL wind speed log profile."], [688, 0, 1, "", "DataProfile", "A profile based on numerical data."], [692, 0, 1, "", "ShearedProfile", "A wind shear profile, based on a shear exponent."], [695, 0, 1, "", "UniformProfile", "A profile with uniform values."]], "foxes.models.vertical_profiles.ABLLogNeutralWsProfile": [[677, 1, 1, "", "calculate", "Run the profile calculation."], [678, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogStableWsProfile": [[680, 1, 1, "", "calculate", "Run the profile calculation."], [681, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogUnstableWsProfile": [[683, 1, 1, "", "calculate", "Run the profile calculation."], [684, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogWsProfile": [[686, 1, 1, "", "calculate", "Run the profile calculation."], [687, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.DataProfile": [[689, 1, 1, "", "__init__", "Constructor"], [690, 1, 1, "", "calculate", "Run the profile calculation."], [691, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ShearedProfile": [[693, 1, 1, "", "calculate", "Run the profile calculation."], [694, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.UniformProfile": [[696, 1, 1, "", "__init__", "Constructor"], [697, 1, 1, "", "calculate", "Run the profile calculation."], [698, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.wake_frames": [[699, 0, 1, "", "FarmOrder", "Invokes turbine ordering as defined by the wind farm."], [706, 0, 1, "", "RotorWD", "Align the first axis for each rotor with the local normalized wind direction."], [711, 0, 1, "", "Streamlines", "Streamline following wakes"], [718, 0, 1, "", "Timelines", "Dynamic wakes for spatially uniform timeseries states."], [724, 0, 1, "", "YawedWakes", "Bend the wakes for yawed turbines."]], "foxes.models.wake_frames.FarmOrder": [[700, 1, 1, "", "__init__", "Constructor."], [701, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [702, 1, 1, "", "finalize", "Finalizes the model."], [703, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [704, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [705, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.RotorWD": [[707, 1, 1, "", "__init__", "Constructor."], [708, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [709, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [710, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.models.wake_frames.Streamlines": [[712, 1, 1, "", "__init__", "Constructor."], [713, 1, 1, "", "__repr__", "Return repr(self)."], [714, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [715, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [716, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [717, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.Timelines": [[719, 1, 1, "", "__init__", "Constructor."], [720, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [721, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [722, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [723, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.YawedWakes": [[725, 1, 1, "", "__init__", "Constructor."], [726, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [727, 1, 1, "", "finalize", "Finalizes the model."], [728, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [729, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [730, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_models": [[731, 0, 1, "", "AxisymmetricWakeModel", "Abstract base class for wake models that depend on (x, r) separately."], [734, 0, 1, "", "DistSlicedWakeModel", "Abstract base class for wake models for which the x-denpendency can be separated from the yz-dependency."], [742, 0, 1, "", "GaussianWakeModel", "Abstract base class for Gaussian wake models."], [745, 0, 1, "", "TopHatWakeModel", "Abstract base class for top-hat wake models."]], "foxes.models.wake_models.AxisymmetricWakeModel": [[732, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."], [733, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."]], "foxes.models.wake_models.DistSlicedWakeModel": [[735, 1, 1, "", "__init__", "Constructor."], [736, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [737, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [738, 1, 1, "", "finalize", "Finalizes the model."], [739, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [740, 1, 1, "", "initialize", "Initializes the model."], [741, 1, 1, "", "keep", "Add model and all sub models to the keep_models list"]], "foxes.models.wake_models.GaussianWakeModel": [[743, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [744, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.TopHatWakeModel": [[746, 1, 1, "", "__init__", "Constructor."], [747, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [748, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [749, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.ti": [[750, 0, 1, "", "CrespoHernandezTIWake", "The Crespo and Hernandez TI empirical correlation"], [756, 0, 1, "", "IECTIWake", "The TI wake model from IEC-64100-1-2005-8 (2005):"]], "foxes.models.wake_models.ti.CrespoHernandezTIWake": [[751, 1, 1, "", "__init__", "Constructor."], [752, 1, 1, "", "__repr__", "Return repr(self)."], [753, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [754, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [755, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.ti.IECTIWake": [[757, 1, 1, "", "__init__", "Constructor."], [758, 1, 1, "", "__repr__", "Return repr(self)."], [759, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [760, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [761, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind": [[762, 0, 1, "", "BastankhahWake", "The Bastankhah wake model"], [767, 0, 1, "", "JensenWake", "The Jensen wake model."], [773, 0, 1, "", "PorteAgelModel", "Common calculations for the wake model and the wake frame, such that code repetitions can be avoided."], [794, 0, 1, "", "PorteAgelWake", "The Bastankhah PorteAgel wake model"], [799, 0, 1, "", "TurbOParkWake", "The TurbOPark wake model"], [804, 0, 1, "", "TurbOParkWakeIX", "The generalized TurbOPark wake model, integrating TI over the streamline."]], "foxes.models.wake_models.wind.BastankhahWake": [[763, 1, 1, "", "__init__", "Constructor."], [764, 1, 1, "", "__repr__", "Return repr(self)."], [765, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [766, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.JensenWake": [[768, 1, 1, "", "__init__", "Constructor."], [769, 1, 1, "", "__repr__", "Return repr(self)."], [770, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [771, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [772, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.PorteAgelModel": [[774, 4, 1, "", "AMPL_FAR", ""], [775, 4, 1, "", "AMPL_NEAR", ""], [776, 4, 1, "", "CHECK", ""], [777, 4, 1, "", "DELTA_FAR", ""], [778, 4, 1, "", "DELTA_NEAR", ""], [779, 4, 1, "", "MDATA_KEY", ""], [780, 4, 1, "", "NEAR", ""], [781, 4, 1, "", "PARS", ""], [782, 4, 1, "", "R_PC", ""], [783, 4, 1, "", "R_PC_S", ""], [784, 4, 1, "", "SIGMA_Y_FAR", ""], [785, 4, 1, "", "SIGMA_Z_FAR", ""], [786, 4, 1, "", "SP_SEL", ""], [787, 4, 1, "", "X0", ""], [788, 1, 1, "", "__init__", "Constructor."], [789, 1, 1, "", "calc_data", "Calculate common model data, store it in mdata."], [790, 1, 1, "", "clean", "Clean all data"], [791, 1, 1, "", "get_data", "Return data entry"], [792, 1, 1, "", "has_data", "Check if data exists"], [793, 2, 1, "", "pars", "Dictionary of the model parameters"]], "foxes.models.wake_models.wind.PorteAgelWake": [[795, 1, 1, "", "__init__", "Constructor."], [796, 1, 1, "", "__repr__", "Return repr(self)."], [797, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [798, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWake": [[800, 1, 1, "", "__init__", "Constructor."], [801, 1, 1, "", "__repr__", "Return repr(self)."], [802, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [803, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWakeIX": [[805, 1, 1, "", "__init__", "Constructor."], [806, 1, 1, "", "__repr__", "Return repr(self)."], [807, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [808, 1, 1, "", "finalize", "Finalizes the model."], [809, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_superpositions": [[810, 0, 1, "", "LinearSuperposition", "Linear supersposition of wake model results, optionally rescaled."], [815, 0, 1, "", "MaxSuperposition", "Maximum supersposition of wake model results, optionally rescaled."], [821, 0, 1, "", "ProductSuperposition", "Product wind wake superposition."], [825, 0, 1, "", "QuadraticSuperposition", "Quadratic supersposition of wake model results, optionally rescaled."], [831, 0, 1, "", "TISuperposition", "A collection of superpositions for TI."]], "foxes.models.wake_superpositions.LinearSuperposition": [[811, 1, 1, "", "__init__", "Constructor."], [812, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [813, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [814, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.MaxSuperposition": [[816, 1, 1, "", "__init__", "Constructor."], [817, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [818, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [819, 1, 1, "", "initialize", "Initializes the model."], [820, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.ProductSuperposition": [[822, 1, 1, "", "__init__", "Constructor."], [823, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [824, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.QuadraticSuperposition": [[826, 1, 1, "", "__init__", "Constructor."], [827, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [828, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [829, 1, 1, "", "initialize", "Initializes the model."], [830, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.TISuperposition": [[832, 1, 1, "", "__init__", "Constructor."], [833, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [834, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.opt.constraints": [[976, 0, 1, "", "AreaGeometryConstraint", "Constrains turbine positions to the inside of a given area geometry."], [997, 0, 1, "", "FarmBoundaryConstraint", "Constrains turbine positions to the inside of the wind farm boundary"], [999, 0, 1, "", "MinDistConstraint", "Turbines must keep at least a minimal spatial distance."]], "foxes.opt.constraints.AreaGeometryConstraint": [[977, 1, 1, "", "__init__", "Constructor."], [978, 1, 1, "", "__str__", "Get info string"], [979, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [980, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [981, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [982, 2, 1, "", "component_names", "The names of the components"], [983, 1, 1, "", "finalize", "Finalize the object."], [984, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [985, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [986, 1, 1, "", "initialize", "Initialize the object."], [987, 2, 1, "", "initialized", "Flag for finished initialization"], [988, 1, 1, "", "n_components", "Returns the number of components of the function."], [989, 2, 1, "", "n_vars_float", "The number of float variables"], [990, 2, 1, "", "n_vars_int", "The number of int variables"], [991, 1, 1, "", "rename_vars_float", "Rename float variables."], [992, 1, 1, "", "rename_vars_int", "Rename integer variables."], [993, 2, 1, "", "var_names_float", "The names of the float variables"], [994, 2, 1, "", "var_names_int", "The names of the integer variables"], [995, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [996, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "foxes.opt.constraints.FarmBoundaryConstraint": [[998, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.constraints.MinDistConstraint": [[1000, 1, 1, "", "__init__", "Constructor."], [1001, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1002, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1003, 1, 1, "", "initialize", "Initialize the constaint."], [1004, 1, 1, "", "n_components", "Returns the number of components of the function."], [1005, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core": [[1006, 0, 1, "", "FarmConstraint", "Abstract base class for foxes wind farm optimization constraints."], [1017, 0, 1, "", "FarmObjective", "Abstract base class for foxes wind farm objective functions."], [1024, 0, 1, "", "FarmOptProblem", "Abstract base class of wind farm optimization problems."], [1068, 0, 1, "", "FarmVarsProblem", "Abstract base class for models that optimize farm variables."], [1074, 0, 1, "", "PopStates", "Helper class for vectorized opt population calculation, via artificial states of length n_pop times n_states."]], "foxes.opt.core.FarmConstraint": [[1007, 1, 1, "", "__init__", "Constructor."], [1008, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1009, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1010, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1011, 2, 1, "", "farm", "The wind farm"], [1012, 1, 1, "", "n_components", "Returns the number of components of the function."], [1013, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1014, 1, 1, "", "print_models", "Prints all model names."], [1015, 2, 1, "", "sel_turbines", "The list of selected turbines"], [1016, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core.FarmObjective": [[1018, 1, 1, "", "__init__", "Constraints."], [1019, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1020, 2, 1, "", "farm", "The wind farm"], [1021, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1022, 1, 1, "", "print_models", "Prints all model names."], [1023, 2, 1, "", "sel_turbines", "The list of selected turbines"]], "foxes.opt.core.FarmOptProblem": [[1025, 4, 1, "", "INT_INF", ""], [1026, 1, 1, "", "__init__", "Constructor."], [1027, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [1028, 1, 1, "", "add_objective", "Add an objective to the problem."], [1029, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1030, 2, 1, "", "all_turbines", "Flag for all turbines optimization"], [1031, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1032, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1033, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [1034, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [1035, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [1036, 2, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [1037, 2, 1, "", "counter", "The current value of the application counter"], [1038, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [1039, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [1040, 2, 1, "", "farm", "The wind farm"], [1041, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1042, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [1043, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [1044, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1045, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [1046, 1, 1, "", "initialize", "Initialize the object."], [1047, 2, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [1048, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1049, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1050, 2, 1, "", "maximize_objs", "Flags for objective maximization"], [1051, 2, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [1052, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1053, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1054, 2, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [1055, 2, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [1056, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1057, 2, 1, "", "n_vars_float", "The number of float variables"], [1058, 2, 1, "", "n_vars_int", "The number of int variables"], [1059, 1, 1, "", "parse_tvar", "Parse foxes variable name and turbine index from turbine variable"], [1060, 1, 1, "", "prob_res_einsum_individual", "Calculate the einsum of problem results"], [1061, 1, 1, "", "prob_res_einsum_population", "Calculate the einsum of problem results"], [1062, 2, 1, "", "sel_turbines", "The selected turbines"], [1063, 1, 1, "", "tvar", "Gets turbine variable name"], [1064, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1065, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1066, 1, 1, "", "var_names_float", "The names of float variables."], [1067, 1, 1, "", "var_names_int", "The names of integer variables."]], "foxes.opt.core.FarmVarsProblem": [[1069, 1, 1, "", "initialize", "Initialize the object."], [1070, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1071, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1072, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1073, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."]], "foxes.opt.core.PopStates": [[1075, 1, 1, "", "__init__", "Constructor."], [1076, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [1077, 1, 1, "", "initialize", "Initializes the model."], [1078, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [1079, 1, 1, "", "size", "The total number of states."], [1080, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.opt.objectives": [[1081, 0, 1, "", "FarmVarObjective", "Objectives based on farm variables."], [1090, 0, 1, "", "MaxFarmPower", "Maximize the mean wind farm power"], [1092, 0, 1, "", "MaxNTurbines", "Maximizes the number of turrbines."], [1098, 0, 1, "", "MinimalMaxTI", "Minimize the maximal turbine TI"]], "foxes.opt.objectives.FarmVarObjective": [[1082, 1, 1, "", "__init__", "Constructor."], [1083, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1084, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1085, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1086, 1, 1, "", "initialize", "Initialize the object."], [1087, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1088, 1, 1, "", "n_components", "Returns the number of components of the function."], [1089, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.objectives.MaxFarmPower": [[1091, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.objectives.MaxNTurbines": [[1093, 1, 1, "", "__init__", "Constructor."], [1094, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1095, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1096, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1097, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.objectives.MinimalMaxTI": [[1099, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.problems": [[1100, 0, 1, "", "OptFarmVars", "Optimize a selection of farm variables."]], "foxes.opt.problems.OptFarmVars": [[1101, 1, 1, "", "__init__", "Constructor."], [1102, 1, 1, "", "add_var", "Add a variable."], [1103, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1104, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1105, 1, 1, "", "initialize", "Initialize the object."], [1106, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1107, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1108, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1109, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1110, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1111, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1112, 1, 1, "", "var_names_float", "The names of float variables."], [1113, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout": [[1239, 0, 1, "", "FarmLayoutOptProblem", "The turbine positioning optimization problem"], [1248, 0, 1, "", "RegGridsLayoutOptProblem", "Places turbines on several regular grids and optimizes their parameters."], [1264, 0, 1, "", "RegularLayoutOptProblem", "Places turbines on a regular grid and optimizes its parameters."]], "foxes.opt.problems.layout.FarmLayoutOptProblem": [[1240, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1241, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1242, 1, 1, "", "initialize", "Initialize the object."], [1243, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1244, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1245, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1246, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1247, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.RegGridsLayoutOptProblem": [[1249, 1, 1, "", "__init__", "Constraints."], [1250, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1251, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1252, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1253, 1, 1, "", "initialize", "Initialize the object."], [1254, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1255, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1256, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1257, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1258, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1259, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1260, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1261, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1262, 1, 1, "", "var_names_float", "The names of float variables."], [1263, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.RegularLayoutOptProblem": [[1265, 4, 1, "", "ANGLE", ""], [1266, 4, 1, "", "OFFSET_X", ""], [1267, 4, 1, "", "OFFSET_Y", ""], [1268, 4, 1, "", "SPACING_X", ""], [1269, 4, 1, "", "SPACING_Y", ""], [1270, 1, 1, "", "__init__", "Constructor."], [1271, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1272, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1273, 1, 1, "", "initialize", "Initialize the object."], [1274, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1275, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1276, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1277, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1278, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts": [[1195, 0, 1, "", "GeomLayout", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes)."], [1205, 0, 1, "", "GeomLayoutGridded", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes), on a fixes background point grid."], [1215, 0, 1, "", "GeomRegGrid", "A regular grid within a boundary geometry."], [1225, 0, 1, "", "GeomRegGrids", "A regular grid within a boundary geometry."]], "foxes.opt.problems.layout.geom_layouts.GeomLayout": [[1196, 1, 1, "", "__init__", "Constructor."], [1197, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1198, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1199, 1, 1, "", "get_fig", "Return plotly figure axis."], [1200, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1201, 1, 1, "", "initialize", "Initialize the object."], [1202, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1203, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1204, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded": [[1206, 1, 1, "", "__init__", "Constructor."], [1207, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1208, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1209, 1, 1, "", "get_fig", "Return plotly figure axis."], [1210, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1211, 1, 1, "", "initialize", "Initialize the object."], [1212, 1, 1, "", "max_values_int", "The maximal values of the int variables."], [1213, 1, 1, "", "min_values_int", "The minimal values of the int variables."], [1214, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrid": [[1216, 1, 1, "", "__init__", "Constructor."], [1217, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1218, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1219, 1, 1, "", "get_fig", "Return plotly figure axis."], [1220, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1221, 1, 1, "", "initialize", "Initialize the object."], [1222, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1223, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1224, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrids": [[1226, 1, 1, "", "__init__", "Constructor."], [1227, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1228, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1229, 1, 1, "", "get_fig", "Return plotly figure axis."], [1230, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1231, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1232, 1, 1, "", "initialize", "Initialize the object."], [1233, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1234, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1235, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1236, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1237, 1, 1, "", "var_names_float", "The names of float variables."], [1238, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1114, 0, 1, "", "Boundary", "Boundary constraint for purely geometrical layouts problems."], [1119, 0, 1, "", "CFixN", "Fixed number of turbines constraint for purely geometrical layouts problems."], [1124, 0, 1, "", "CMaxN", "Maximal number of turbines constraint for purely geometrical layouts problems."], [1129, 0, 1, "", "CMinDensity", "Minimal turbine density constraint for purely geometrical layouts problems."], [1135, 0, 1, "", "CMinN", "Minimal number of turbines constraint for purely geometrical layouts problems."], [1140, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [1145, 0, 1, "", "MinDist", "Minimal distance constraint for purely geometrical layouts problems."], [1151, 0, 1, "", "Valid", "Validity constraint for purely geometrical layouts problems."], [1156, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.constraints.Boundary": [[1115, 1, 1, "", "__init__", "Constructor."], [1116, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1117, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1118, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CFixN": [[1120, 1, 1, "", "__init__", "Constructor."], [1121, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1122, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1123, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN": [[1125, 1, 1, "", "__init__", "Constructor."], [1126, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1127, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1128, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity": [[1130, 1, 1, "", "__init__", "Constructor."], [1131, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1132, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1133, 1, 1, "", "initialize", "Initialize the object."], [1134, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinN": [[1136, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1137, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1138, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1139, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Constraint": [[1141, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1142, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [1143, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [1144, 1, 1, "", "get_bounds", "Returns the bounds for all components."]], "foxes.opt.problems.layout.geom_layouts.constraints.MinDist": [[1146, 1, 1, "", "__init__", "Constructor."], [1147, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1148, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1149, 1, 1, "", "initialize", "Initialize the constaint."], [1150, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Valid": [[1152, 1, 1, "", "__init__", "Constructor."], [1153, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1154, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1155, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1157, 0, 1, "", "MaxDensity", "Maximal turbine density objective for purely geometrical layouts problems."], [1164, 0, 1, "", "MaxGridSpacing", "Maximal grid spacing objective for purely geometrical layouts problems."], [1170, 0, 1, "", "MeMiMaDist", "Mean-min-max distance objective for purely geometrical layouts problems."], [1176, 0, 1, "", "OFixN", "Fixed number of turbines objective for purely geometrical layouts problems."], [1182, 0, 1, "", "OMaxN", "Maximal number of turbines objective for purely geometrical layouts problems."], [1188, 0, 1, "", "OMinN", "Minimal number of turbines objective for purely geometrical layouts problems."], [1191, 0, 1, "", "Objective", "Abstract base class for objective functions."], [1194, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity": [[1158, 1, 1, "", "__init__", "Constructor."], [1159, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1160, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1161, 1, 1, "", "initialize", "Initialize the object."], [1162, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1163, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing": [[1165, 1, 1, "", "__init__", "Constructor."], [1166, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1167, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1168, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1169, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist": [[1171, 1, 1, "", "__init__", "Constructor."], [1172, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1173, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1174, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1175, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OFixN": [[1177, 1, 1, "", "__init__", "Constructor."], [1178, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1179, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1180, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1181, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN": [[1183, 1, 1, "", "__init__", "Constructor."], [1184, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1185, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1186, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1187, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMinN": [[1189, 1, 1, "", "__init__", "Constructor."], [1190, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.opt.problems.layout.geom_layouts.objectives.Objective": [[1192, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1193, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.output": [[835, 0, 1, "", "Animator", "Creates an animation from generators that yield lists of artists."], [840, 0, 1, "", "FarmLayoutOutput", "Plot the farm layout"], [849, 0, 1, "", "FarmResultsEval", "Evaluates farm results data."], [869, 0, 1, "", "FlowPlots2D", "Class for horizontal or vertical 2D flow plots"], [877, 0, 1, "", "Output", "Base class for foxes output."], [881, 0, 1, "", "ResultsWriter", "Writes results farm data to file."], [884, 0, 1, "", "RosePlotOutput", "Class for rose plot creation"], [890, 0, 1, "", "StateTurbineMap", "Creates heat maps with turbines on the one and states on the other axis."], [893, 0, 1, "", "StatesRosePlotOutput", "Class for rose plot creation directly from states"], [895, 0, 1, "", "TurbineTypeCurves", "Creates power and ct curves for turbine types, optionally including derating/boost."]], "foxes.output.Animator": [[836, 1, 1, "", "__init__", "Constructor."], [837, 1, 1, "", "add_generator", "Add a generator."], [838, 1, 1, "", "animate", "Create the animation"], [839, 2, 1, "", "generators", "The artist generators"]], "foxes.output.FarmLayoutOutput": [[841, 1, 1, "", "__init__", "Constructor."], [842, 1, 1, "", "get_figure", "Creates farm layout figure."], [843, 1, 1, "", "get_layout_data", "Returns wind farm layout."], [844, 1, 1, "", "get_layout_dict", "Returns wind farm layout."], [845, 1, 1, "", "write_csv", "Writes csv layout file."], [846, 1, 1, "", "write_json", "Writes xyh layout file."], [847, 1, 1, "", "write_plot", "Writes the layout plot to file."], [848, 1, 1, "", "write_xyh", "Writes xyh layout file."]], "foxes.output.FarmResultsEval": [[850, 1, 1, "", "__init__", "Constructor."], [851, 1, 1, "", "add_capacity", "Adds capacity to the farm results"], [852, 1, 1, "", "add_efficiency", "Adds efficiency to the farm results"], [853, 1, 1, "", "calc_farm_efficiency", "Calculates farm efficiency"], [854, 1, 1, "", "calc_farm_mean", "Calculates the mean over states and turbines."], [855, 1, 1, "", "calc_farm_sum", "Calculates the sum over states and turbines."], [856, 1, 1, "", "calc_farm_yield", "Calculates yield, P75 and P90 at the farm level"], [857, 1, 1, "", "calc_mean_farm_power", "Calculates the mean total farm power."], [858, 1, 1, "", "calc_states_mean", "Calculates the mean wrt states."], [859, 1, 1, "", "calc_states_std", "Calculates the standard deviation wrt states."], [860, 1, 1, "", "calc_states_sum", "Calculates the sum wrt states."], [861, 1, 1, "", "calc_turbine_mean", "Calculates the mean wrt turbines."], [862, 1, 1, "", "calc_turbine_sum", "Calculates the sum wrt turbines."], [863, 1, 1, "", "calc_turbine_yield", "Calculates the yield per turbine"], [864, 1, 1, "", "gen_stdata", "Generates state-turbine data, intended to be used in animations"], [865, 1, 1, "", "reduce_all", "Reduces states and turbine dimension by some operation"], [866, 1, 1, "", "reduce_states", "Reduces the states dimension by some operation"], [867, 1, 1, "", "reduce_turbines", "Reduces the turbine dimension by some operation"], [868, 1, 1, "", "weinsum", "Calculates Einstein sum, adding weights as last argument to the given fields."]], "foxes.output.FlowPlots2D": [[870, 1, 1, "", "__init__", "Constructor."], [871, 1, 1, "", "gen_states_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [872, 1, 1, "", "gen_states_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [873, 1, 1, "", "gen_states_fig_yz", "Generates 2D farm flow figure in a plane."], [874, 1, 1, "", "get_mean_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [875, 1, 1, "", "get_mean_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [876, 1, 1, "", "get_mean_fig_yz", "Generates 2D farm flow figure in a vertical yz-plane."]], "foxes.output.Output": [[878, 1, 1, "", "new", "Run-time output model factory."], [879, 1, 1, "", "print_models", "Prints all model names."], [880, 1, 1, "", "write", "Writes data to file via pandas."]], "foxes.output.ResultsWriter": [[882, 1, 1, "", "__init__", "Constructor."], [883, 1, 1, "", "write_csv", "Writes a csv file"]], "foxes.output.RosePlotOutput": [[885, 1, 1, "", "__init__", "Constructor."], [886, 1, 1, "", "get_data", "Get pandas DataFrame with wind rose data."], [887, 1, 1, "", "get_data_info", "Returns default description for a variable."], [888, 1, 1, "", "get_figure", "Creates px figure object"], [889, 1, 1, "", "write_figure", "Write rose plot to file"]], "foxes.output.StateTurbineMap": [[891, 1, 1, "", "__init__", "Constructor."], [892, 1, 1, "", "plot_map", "Plot the heat map for the selected variable."]], "foxes.output.StatesRosePlotOutput": [[894, 1, 1, "", "__init__", "Constructor."]], "foxes.output.TurbineTypeCurves": [[896, 1, 1, "", "__init__", "Constructor."], [897, 1, 1, "", "plot_curves", "Plot the power or ct curve."]], "foxes.utils": [[898, 0, 1, "", "DataBook", "Container class for file paths, either directly given or as static data within a package."], [906, 0, 1, "", "PandasFileHelper", "This class helps reading and writing data to files via pandas."], [926, 5, 1, "", "all_subclasses", "Searches all classes derived from some base class."], [927, 5, 1, "", "cubic_roots", "Calculate real roots of polynomials of degree 3."], [928, 5, 1, "", "delta_wd", "Calculates wd_b - wd_a."], [1279, 5, 1, "", "read_shp", "Read a shape file"], [1280, 5, 1, "", "read_shp_polygons", "Reads the polygon points from a shp file."], [1296, 5, 1, "", "show_plotly_fig", "Displays a plotly figure in a window"], [1297, 5, 1, "", "shp2csv", "Read shape file, write csv file"], [1298, 5, 1, "", "shp2geom2d", "Read shapefile into geom2d geometry"], [1301, 5, 1, "", "uv2wd", "Calculate wind direction from wind vectors."], [1302, 5, 1, "", "wd2uv", "Calculate wind vectors from wind directions in degrees."], [1303, 5, 1, "", "wd2wdvec", "Calculate wind direction vectors from wind directions in degrees."], [1304, 5, 1, "", "wdvec2wd", "Calculate wind direction from wind direction vectors."]], "foxes.utils.DataBook": [[899, 1, 1, "", "__init__", "Constructor."], [900, 1, 1, "", "add_data_package", "Add static files from a package location."], [901, 1, 1, "", "add_data_package_file", "Add a static file from a package location."], [902, 1, 1, "", "add_file", "Add a file path"], [903, 1, 1, "", "add_files", "Add file paths"], [904, 1, 1, "", "get_file_path", "Get path of a file"], [905, 1, 1, "", "toc", "Get list of contents"]], "foxes.utils.PandasFileHelper": [[907, 4, 1, "", "DATA_FILE_FORMATS", ""], [908, 4, 1, "", "DEFAULT_FORMAT_DICT", ""], [909, 4, 1, "", "DEFAULT_READING_PARAMETERS", ""], [910, 4, 1, "", "DEFAULT_WRITING_PARAMETERS", ""], [911, 1, 1, "", "read_file", "Helper for reading data according to file ending."], [912, 1, 1, "", "write_file", "Helper for writing data according to file ending."]], "foxes.utils.abl.neutral": [[913, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [914, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [915, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.sheared": [[916, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"]], "foxes.utils.abl.stable": [[917, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [918, 5, 1, "", "lgz", "Calculates the log factor for wind speed profiles."], [919, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [920, 5, 1, "", "psi", "The Psi function"], [921, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.unstable": [[922, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [923, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [924, 5, 1, "", "psi", "The Psi function"], [925, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.geom2d": [[929, 0, 1, "", "AreaGeometry", "Abstract base class for closed 2D geometries."], [936, 0, 1, "", "AreaIntersection", "The intersection of area geometries."], [938, 0, 1, "", "AreaUnion", "The union of area geometries."], [946, 0, 1, "", "Circle", "This class represents the area of a circle."], [953, 0, 1, "", "ClosedPolygon", "This class represents a closed 2D polygon."], [960, 0, 1, "", "HalfPlane", "This class represents a half plane in 2d."], [968, 0, 1, "", "InvertedAreaGeometry", "Base class for inverted geometries."]], "foxes.utils.geom2d.AreaGeometry": [[930, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [931, 1, 1, "", "inverse", "Get the inverted geometry"], [932, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [933, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [934, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [935, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.AreaIntersection": [[937, 1, 1, "", "__new__", "Constructor."]], "foxes.utils.geom2d.AreaUnion": [[939, 1, 1, "", "__init__", "Constructor."], [940, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [941, 1, 1, "", "inverse", "Get the inverted geometry"], [942, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [943, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [944, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [945, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.Circle": [[947, 1, 1, "", "__init__", "Cobnstructor."], [948, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [949, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [950, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [951, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [952, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.ClosedPolygon": [[954, 1, 1, "", "__init__", "Constructor."], [955, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [956, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [957, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [958, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [959, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.HalfPlane": [[961, 1, 1, "", "__init__", "Constructor."], [962, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [963, 1, 1, "", "inverse", "Get the inverted geometry"], [964, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [965, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [966, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [967, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.InvertedAreaGeometry": [[969, 1, 1, "", "__init__", "Constructor."], [970, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [971, 1, 1, "", "inverse", "Get the inverted geometry"], [972, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [973, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [974, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [975, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.runners": [[1281, 0, 1, "", "DaskRunner", "Class for function execution via dask"], [1288, 0, 1, "", "DefaultRunner", "Class for default function execution."], [1290, 0, 1, "", "Runner", "Abstract base class for runners."]], "foxes.utils.runners.DaskRunner": [[1282, 1, 1, "", "__init__", "Constructor."], [1283, 1, 1, "", "finalize", "Finallize the runner"], [1284, 1, 1, "", "initialize", "Initialize the runner"], [1285, 1, 1, "", "is_distributed", ""], [1286, 1, 1, "", "print", "Prints if verbosity is not zero"], [1287, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.DefaultRunner": [[1289, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.Runner": [[1291, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1292, 1, 1, "", "finalize", "Finalize the runner"], [1293, 1, 1, "", "initialize", "Initialize the runner"], [1294, 2, 1, "", "initialized", "Initialization flag"], [1295, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.two_circles": [[1299, 5, 1, "", "area", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."], [1300, 5, 1, "", "calc_area", "Calculates the intersection of two circles."]], "foxes.variables": [[394, 3, 1, "", "AMB_CAP", "Ambient capacity, equals AMB_P/P_nominal"], [395, 3, 1, "", "AMB_CT", "The ambient thrust coefficient"], [396, 3, 1, "", "AMB_P", "The ambient power, unit depends on user choice"], [397, 3, 1, "", "AMB_REWS", "Ambient rotor effective wind speed in m/s"], [398, 3, 1, "", "AMB_REWS2", "Ambient rotor effective wind speed in m/s, calculated from second moment"], [399, 3, 1, "", "AMB_REWS3", "Ambient rotor effective wind speed in m/s, calculated from third moment"], [400, 3, 1, "", "AMB_RHO", "The ambient air density in kg/m3"], [401, 3, 1, "", "AMB_T", "The ambient temperature in Kelvin"], [402, 3, 1, "", "AMB_TI", "The ambient turbulence intensity"], [403, 3, 1, "", "AMB_WD", "The ambient wind direction in degrees"], [404, 3, 1, "", "AMB_WS", "The ambient wind speed in m/s"], [405, 3, 1, "", "AMB_YAW", "The ambient absolute yaw angle of  a turbine in degrees"], [406, 3, 1, "", "AMB_YAWM", "The ambient relative yaw angle of  a turbine in degrees"], [407, 3, 1, "", "AMB_YLD", "Ambient yield in GWh/a"], [408, 3, 1, "", "CAP", "Capacity, equals P/P_nominal"], [409, 3, 1, "", "CT", "The thrust coefficient"], [410, 3, 1, "", "D", "The rotor diameter in m"], [411, 3, 1, "", "EFF", "Efficiency, equals P/AMB_P"], [412, 3, 1, "", "H", "The height over ground in m"], [413, 3, 1, "", "K", "Wake growth parameter"], [414, 3, 1, "", "KB", "KTI value for zero TI, K = KB + KTI*TI"], [415, 3, 1, "", "KTI", "Factor between K and TI, K = KB + KTI*TI"], [416, 3, 1, "", "MAX_P", "The maximal power, for derating/boost"], [417, 3, 1, "", "MOL", "The Monin-Ubukhof length in m"], [418, 3, 1, "", "ORDER", "The turbine order"], [419, 3, 1, "", "P", "The power, unit depends on user choice"], [420, 3, 1, "", "PA_ALPHA", "The alpha parameter of the PorteAgel wake model"], [421, 3, 1, "", "PA_BETA", "The beta parameter of the PorteAgel wake model"], [422, 3, 1, "", "REWS", "Rotor effective wind speed in m/s"], [423, 3, 1, "", "REWS2", "Rotor effective wind speed in m/s, calculated from second moment"], [424, 3, 1, "", "REWS3", "Rotor effective wind speed in m/s, calculated from third moment"], [425, 3, 1, "", "RHO", "The air density in kg/m3"], [426, 3, 1, "", "SHEAR", "The shear exponent"], [427, 3, 1, "", "T", "The temperature in Kelvin"], [428, 3, 1, "", "TI", "The turbulence intensity"], [429, 3, 1, "", "TXYH", "The turbine rotor centre coordinate  vector (x, y, height)"], [430, 3, 1, "", "WD", "The wind direction in degrees"], [431, 3, 1, "", "WEIGHT", "The statistical weight of a state"], [432, 3, 1, "", "WS", "The wind speed in m/s"], [433, 3, 1, "", "X", "The x coordinate in m"], [434, 3, 1, "", "Y", "The y coordinate in"], [435, 3, 1, "", "YAW", "The absolute yaw angle of a turbine in degrees"], [436, 3, 1, "", "YAWM", "The relative yaw angle of a turbine in degrees"], [437, 3, 1, "", "YLD", "Yield in GWh/a"], [438, 3, 1, "", "Z0", "The roughness length in m"], [439, 3, 1, "", "amb2var", "Mapping from ambient variable to the corresponding waked variable"], [440, 3, 1, "", "var2amb", "Mapping from variable to the corresponding ambient variable"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:data", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"public": [0, 8, 13, 17, 22, 28, 32, 37, 41, 46, 50, 52, 56, 70, 78, 81, 91, 100, 105, 113, 114, 127, 135, 139, 147, 156, 161, 165, 167, 169, 173, 178, 182, 185, 190, 195, 320, 447, 455, 466, 468, 475, 482, 493, 497, 498, 505, 508, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 835, 840, 849, 869, 877, 881, 884, 890, 893, 895, 898, 906, 929, 936, 938, 946, 953, 960, 968, 976, 997, 999, 1006, 1017, 1024, 1068, 1074, 1081, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1281, 1288, 1290], "member": [0, 8, 13, 17, 22, 28, 32, 37, 41, 46, 50, 52, 56, 70, 78, 81, 91, 100, 105, 113, 114, 127, 135, 139, 147, 156, 161, 165, 167, 169, 173, 178, 182, 185, 190, 195, 320, 447, 455, 466, 468, 475, 482, 493, 497, 498, 505, 508, 513, 521, 530, 539, 542, 550, 556, 561, 564, 568, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 634, 637, 640, 645, 647, 649, 652, 658, 664, 670, 676, 679, 682, 685, 688, 692, 695, 699, 706, 711, 718, 724, 731, 734, 742, 745, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 835, 840, 849, 869, 877, 881, 884, 890, 893, 895, 898, 906, 929, 936, 938, 946, 953, 960, 968, 976, 997, 999, 1006, 1017, 1024, 1068, 1074, 1081, 1090, 1092, 1098, 1100, 1114, 1119, 1124, 1129, 1135, 1140, 1145, 1151, 1157, 1164, 1170, 1176, 1182, 1188, 1191, 1195, 1205, 1215, 1225, 1239, 1248, 1264, 1281, 1288, 1290], "paramet": [1, 2, 3, 4, 5, 9, 10, 11, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 30, 31, 33, 34, 35, 38, 39, 42, 43, 44, 47, 48, 53, 54, 55, 57, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 77, 79, 80, 82, 83, 84, 85, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 152, 154, 158, 160, 162, 163, 164, 166, 168, 170, 172, 174, 175, 176, 177, 179, 180, 181, 183, 184, 186, 187, 191, 192, 193, 287, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 454, 457, 458, 459, 461, 462, 463, 465, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 481, 484, 485, 486, 488, 489, 490, 492, 496, 499, 501, 502, 503, 504, 507, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 565, 566, 567, 570, 571, 575, 578, 582, 585, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 635, 636, 638, 639, 641, 643, 644, 646, 648, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 677, 680, 683, 686, 689, 690, 693, 696, 697, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 751, 753, 754, 755, 757, 759, 760, 761, 763, 765, 766, 768, 770, 771, 772, 788, 789, 791, 792, 795, 797, 798, 800, 802, 803, 805, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 841, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 880, 882, 883, 885, 886, 887, 888, 889, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 934, 935, 937, 939, 940, 944, 945, 947, 948, 951, 952, 954, 955, 958, 959, 961, 962, 966, 967, 969, 970, 974, 975, 977, 979, 980, 981, 983, 984, 985, 986, 991, 992, 998, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1018, 1019, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1041, 1042, 1043, 1046, 1059, 1060, 1061, 1063, 1064, 1065, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1080, 1082, 1083, 1084, 1085, 1086, 1090, 1091, 1093, 1094, 1095, 1098, 1099, 1101, 1102, 1105, 1110, 1111, 1115, 1116, 1117, 1120, 1121, 1122, 1125, 1126, 1127, 1130, 1131, 1132, 1133, 1137, 1138, 1140, 1142, 1143, 1146, 1147, 1148, 1149, 1152, 1153, 1154, 1156, 1158, 1159, 1160, 1161, 1165, 1166, 1167, 1171, 1172, 1173, 1177, 1178, 1179, 1183, 1184, 1185, 1189, 1194, 1196, 1197, 1198, 1199, 1201, 1206, 1207, 1208, 1209, 1211, 1216, 1217, 1218, 1219, 1221, 1226, 1227, 1228, 1229, 1232, 1240, 1242, 1245, 1246, 1249, 1250, 1253, 1258, 1259, 1260, 1261, 1270, 1271, 1273, 1276, 1277, 1279, 1280, 1282, 1287, 1289, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304], "return": [2, 3, 5, 10, 11, 12, 14, 15, 16, 19, 20, 21, 24, 26, 27, 30, 31, 34, 35, 36, 39, 40, 44, 45, 48, 49, 53, 54, 55, 62, 63, 66, 73, 74, 75, 76, 77, 79, 80, 84, 86, 87, 88, 89, 90, 93, 96, 98, 102, 103, 104, 108, 110, 112, 119, 121, 122, 124, 125, 126, 131, 134, 136, 137, 138, 142, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 166, 170, 171, 174, 175, 176, 177, 183, 184, 188, 189, 192, 193, 206, 287, 325, 449, 450, 451, 452, 453, 454, 458, 460, 461, 462, 464, 465, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 485, 487, 488, 489, 491, 492, 495, 496, 501, 503, 504, 518, 520, 527, 529, 536, 538, 547, 549, 554, 555, 558, 559, 560, 562, 563, 566, 567, 569, 571, 572, 573, 577, 578, 579, 580, 584, 585, 586, 587, 590, 591, 594, 595, 596, 599, 600, 601, 605, 607, 608, 611, 612, 613, 617, 618, 619, 623, 624, 627, 628, 629, 632, 633, 635, 636, 638, 639, 643, 644, 650, 651, 654, 656, 657, 660, 662, 663, 666, 668, 669, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 690, 691, 693, 694, 697, 698, 701, 703, 704, 705, 708, 709, 710, 714, 715, 716, 717, 720, 721, 722, 723, 726, 728, 729, 730, 732, 733, 736, 740, 743, 744, 747, 748, 749, 753, 754, 759, 760, 765, 770, 771, 791, 792, 793, 797, 802, 807, 812, 813, 814, 817, 818, 819, 820, 823, 824, 827, 828, 829, 830, 833, 834, 838, 839, 842, 843, 844, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 886, 887, 888, 889, 892, 897, 904, 905, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 931, 932, 933, 934, 935, 941, 942, 943, 944, 945, 949, 950, 951, 952, 956, 957, 958, 959, 963, 964, 965, 966, 967, 971, 972, 973, 974, 975, 978, 979, 980, 981, 982, 984, 985, 987, 988, 989, 990, 993, 994, 995, 996, 1001, 1002, 1004, 1005, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1020, 1021, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1067, 1070, 1071, 1076, 1077, 1078, 1079, 1080, 1083, 1084, 1085, 1087, 1088, 1089, 1094, 1095, 1096, 1097, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1117, 1118, 1121, 1122, 1123, 1126, 1127, 1128, 1131, 1132, 1134, 1137, 1138, 1139, 1143, 1144, 1147, 1148, 1150, 1153, 1154, 1155, 1156, 1159, 1160, 1162, 1163, 1166, 1167, 1168, 1169, 1172, 1173, 1174, 1175, 1178, 1179, 1180, 1181, 1184, 1185, 1186, 1187, 1190, 1193, 1194, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1262, 1263, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1287, 1289, 1294, 1295, 1298, 1299, 1300, 1301, 1302, 1303, 1304], "attribut": [8, 22, 28, 32, 37, 41, 46, 56, 70, 81, 91, 100, 105, 114, 127, 139, 147, 161, 167, 185, 447, 455, 475, 482, 498, 505, 508, 513, 521, 530, 542, 556, 564, 574, 581, 588, 592, 597, 603, 609, 614, 621, 625, 630, 640, 652, 658, 664, 670, 688, 695, 699, 706, 711, 718, 724, 734, 750, 756, 762, 767, 773, 794, 799, 804, 810, 815, 821, 825, 831, 835, 840, 849, 869, 881, 890, 895, 898, 906, 938, 946, 953, 960, 976, 999, 1024, 1074, 1081, 1092, 1140, 1195, 1205, 1215, 1225, 1248, 1264, 1281], "exampl": [206, 278, 325, 366, 368, 1156, 1194, 1323], "see": [206, 325], "also": [206, 325], "yield": [864, 871, 872, 873, 874, 875, 876], "rais": [1156, 1194], "note": [1156, 1194], "api": 1305, "fox": [1306, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1325, 1332], "algorithm": [1306, 1307, 1308], "downwind": 1307, "model": [1307, 1308, 1313, 1321, 1330], "iter": 1308, "constant": 1309, "core": [1310, 1314], "input": 1312, "farm_layout": 1312, "state": [1312, 1327], "windio": 1312, "farm_control": 1313, "farm_model": 1313, "partial_wak": 1313, "point_model": 1313, "rotor_model": 1313, "turbine_model": 1313, "turbine_typ": 1313, "vertical_profil": 1313, "wake_fram": 1313, "wake_model": [1313, 1321], "wake_superposit": 1313, "opt": [1314, 1315, 1316], "problem": [1314, 1315, 1316], "object": [1314, 1316], "constraint": [1314, 1316], "layout": [1315, 1316, 1327, 1329], "geom_layout": [1315, 1316], "output": 1317, "util": [1318, 1319], "abl": [1318, 1319], "geom2d": 1318, "runner": 1318, "two_circl": 1318, "neutral": 1319, "stabl": 1319, "unstabl": 1319, "shear": 1319, "variabl": 1320, "wind": [1321, 1327, 1331, 1334, 1338], "ti": 1321, "citat": 1322, "histori": 1324, "v0": 1324, "1": 1324, "0": 1324, "alpha": 1324, "2": 1324, "3": 1324, "4": 1324, "5": 1324, "6": 1324, "welcom": 1325, "licens": 1325, "content": 1325, "contribut": 1325, "acknowledg": 1325, "instal": 1326, "requir": 1326, "via": 1326, "pip": 1326, "virtual": 1326, "python": 1326, "environ": 1326, "standard": 1326, "user": 1326, "develop": 1326, "conda": 1326, "prepar": 1326, "static": 1327, "data": [1327, 1331, 1337, 1338], "farm": 1327, "test_farm_67": 1327, "csv": 1327, "ambient": 1327, "wrf": 1327, "timeseri": [1327, 1337], "4464": 1327, "gz": 1327, "abl_states_6000": 1327, "timeseries_3000": 1327, "timeseries_8000": 1327, "timeseries_100": 1327, "wind_rose_bremen": 1327, "wind_rot": 1327, "nc": 1327, "power": [1327, 1333], "thrust": 1327, "curv": 1327, "dtu": 1327, "10mw": 1327, "d178d3": 1327, "h119": 1327, "iea": 1327, "15mw": 1327, "d240": 1327, "h150": 1327, "iwt": 1327, "7d5mw": 1327, "d164": 1327, "h100": 1327, "nrel": 1327, "5mw": 1327, "d126": 1327, "h90": 1327, "file": 1327, "path": 1327, "heterogen": 1328, "flow": 1328, "optim": 1329, "The": 1330, "book": 1330, "multi": 1331, "height": 1331, "overview": 1332, "how": 1332, "setup": 1332, "mask": 1333, "sector": 1334, "manag": 1334, "singl": 1335, "row": 1335, "turbin": 1335, "dynam": 1336, "wake": [1336, 1339], "rose": 1338, "yaw": 1339, "rotor": 1339}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Public members": [[0, "public-members"], [8, "public-members"], [13, "public-members"], [17, "public-members"], [22, "public-members"], [28, "public-members"], [32, "public-members"], [37, "public-members"], [41, "public-members"], [46, "public-members"], [50, "public-members"], [52, "public-members"], [56, "public-members"], [70, "public-members"], [78, "public-members"], [81, "public-members"], [91, "public-members"], [100, "public-members"], [105, "public-members"], [113, "public-members"], [114, "public-members"], [127, "public-members"], [135, "public-members"], [139, "public-members"], [147, "public-members"], [156, "public-members"], [161, "public-members"], [165, "public-members"], [167, "public-members"], [169, "public-members"], [173, "public-members"], [178, "public-members"], [182, "public-members"], [185, "public-members"], [190, "public-members"], [195, "public-members"], [320, "public-members"], [447, "public-members"], [455, "public-members"], [466, "public-members"], [468, "public-members"], [475, "public-members"], [482, "public-members"], [493, "public-members"], [497, "public-members"], [498, "public-members"], [505, "public-members"], [508, "public-members"], [513, "public-members"], [521, "public-members"], [530, "public-members"], [539, "public-members"], [542, "public-members"], [550, "public-members"], [556, "public-members"], [561, "public-members"], [564, "public-members"], [568, "public-members"], [574, "public-members"], [581, "public-members"], [588, "public-members"], [592, "public-members"], [597, "public-members"], [603, "public-members"], [609, "public-members"], [614, "public-members"], [621, "public-members"], [625, "public-members"], [630, "public-members"], [634, "public-members"], [637, "public-members"], [640, "public-members"], [645, "public-members"], [647, "public-members"], [649, "public-members"], [652, "public-members"], [658, "public-members"], [664, "public-members"], [670, "public-members"], [676, "public-members"], [679, "public-members"], [682, "public-members"], [685, "public-members"], [688, "public-members"], [692, "public-members"], [695, "public-members"], [699, "public-members"], [706, "public-members"], [711, "public-members"], [718, "public-members"], [724, "public-members"], [731, "public-members"], [734, "public-members"], [742, "public-members"], [745, "public-members"], [750, "public-members"], [756, "public-members"], [762, "public-members"], [767, "public-members"], [773, "public-members"], [794, "public-members"], [799, "public-members"], [804, "public-members"], [810, "public-members"], [815, "public-members"], [821, "public-members"], [825, "public-members"], [831, "public-members"], [835, "public-members"], [840, "public-members"], [849, "public-members"], [869, "public-members"], [877, "public-members"], [881, "public-members"], [884, "public-members"], [890, "public-members"], [893, "public-members"], [895, "public-members"], [898, "public-members"], [906, "public-members"], [929, "public-members"], [936, "public-members"], [938, "public-members"], [946, "public-members"], [953, "public-members"], [960, "public-members"], [968, "public-members"], [976, "public-members"], [997, "public-members"], [999, "public-members"], [1006, "public-members"], [1017, "public-members"], [1024, "public-members"], [1068, "public-members"], [1074, "public-members"], [1081, "public-members"], [1090, "public-members"], [1092, "public-members"], [1098, "public-members"], [1100, "public-members"], [1114, "public-members"], [1119, "public-members"], [1124, "public-members"], [1129, "public-members"], [1135, "public-members"], [1140, "public-members"], [1145, "public-members"], [1151, "public-members"], [1157, "public-members"], [1164, "public-members"], [1170, "public-members"], [1176, "public-members"], [1182, "public-members"], [1188, "public-members"], [1191, "public-members"], [1195, "public-members"], [1205, "public-members"], [1215, "public-members"], [1225, "public-members"], [1239, "public-members"], [1248, "public-members"], [1264, "public-members"], [1281, "public-members"], [1288, "public-members"], [1290, "public-members"]], "Parameters": [[1, "parameters"], [2, "parameters"], [3, "parameters"], [4, "parameters"], [5, "parameters"], [9, "parameters"], [10, "parameters"], [11, "parameters"], [14, "parameters"], [15, "parameters"], [16, "parameters"], [19, "parameters"], [20, "parameters"], [21, "parameters"], [23, "parameters"], [24, "parameters"], [25, "parameters"], [26, "parameters"], [27, "parameters"], [30, "parameters"], [31, "parameters"], [33, "parameters"], [34, "parameters"], [35, "parameters"], [38, "parameters"], [39, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [47, "parameters"], [48, "parameters"], [53, "parameters"], [54, "parameters"], [55, "parameters"], [57, "parameters"], [60, "parameters"], [61, "parameters"], [62, "parameters"], [65, "parameters"], [66, "parameters"], [67, "parameters"], [68, "parameters"], [71, "parameters"], [72, "parameters"], [73, "parameters"], [77, "parameters"], [79, "parameters"], [80, "parameters"], [82, "parameters"], [83, "parameters"], [84, "parameters"], [85, "parameters"], [87, "parameters"], [88, "parameters"], [90, "parameters"], [92, "parameters"], [93, "parameters"], [94, "parameters"], [95, "parameters"], [96, "parameters"], [97, "parameters"], [98, "parameters"], [99, "parameters"], [101, "parameters"], [102, "parameters"], [103, "parameters"], [104, "parameters"], [106, "parameters"], [107, "parameters"], [108, "parameters"], [109, "parameters"], [110, "parameters"], [111, "parameters"], [112, "parameters"], [117, "parameters"], [118, "parameters"], [119, "parameters"], [120, "parameters"], [121, "parameters"], [123, "parameters"], [125, "parameters"], [126, "parameters"], [128, "parameters"], [129, "parameters"], [130, "parameters"], [131, "parameters"], [132, "parameters"], [133, "parameters"], [134, "parameters"], [136, "parameters"], [138, "parameters"], [140, "parameters"], [141, "parameters"], [142, "parameters"], [143, "parameters"], [144, "parameters"], [145, "parameters"], [146, "parameters"], [148, "parameters"], [149, "parameters"], [151, "parameters"], [152, "parameters"], [154, "parameters"], [158, "parameters"], [160, "parameters"], [162, "parameters"], [163, "parameters"], [164, "parameters"], [166, "parameters"], [168, "parameters"], [170, "parameters"], [172, "parameters"], [174, "parameters"], [175, "parameters"], [176, "parameters"], [177, "parameters"], [179, "parameters"], [180, "parameters"], [181, "parameters"], [183, "parameters"], [184, "parameters"], [186, "parameters"], [187, "parameters"], [191, "parameters"], [192, "parameters"], [193, "parameters"], [287, "parameters"], [441, "parameters"], [442, "parameters"], [443, "parameters"], [444, "parameters"], [445, "parameters"], [446, "parameters"], [448, "parameters"], [449, "parameters"], [451, "parameters"], [452, "parameters"], [454, "parameters"], [457, "parameters"], [458, "parameters"], [459, "parameters"], [461, "parameters"], [462, "parameters"], [463, "parameters"], [465, "parameters"], [468, "parameters"], [469, "parameters"], [470, "parameters"], [471, "parameters"], [472, "parameters"], [474, "parameters"], [476, "parameters"], [477, "parameters"], [478, "parameters"], [479, "parameters"], [481, "parameters"], [484, "parameters"], [485, "parameters"], [486, "parameters"], [488, "parameters"], [489, "parameters"], [490, "parameters"], [492, "parameters"], [496, "parameters"], [499, "parameters"], [501, "parameters"], [502, "parameters"], [503, "parameters"], [504, "parameters"], [507, "parameters"], [510, "parameters"], [511, "parameters"], [512, "parameters"], [514, "parameters"], [515, "parameters"], [516, "parameters"], [517, "parameters"], [518, "parameters"], [519, "parameters"], [520, "parameters"], [522, "parameters"], [524, "parameters"], [525, "parameters"], [526, "parameters"], [527, "parameters"], [528, "parameters"], [529, "parameters"], [531, "parameters"], [533, "parameters"], [534, "parameters"], [535, "parameters"], [536, "parameters"], [537, "parameters"], [538, "parameters"], [540, "parameters"], [541, "parameters"], [543, "parameters"], [544, "parameters"], [545, "parameters"], [546, "parameters"], [547, "parameters"], [548, "parameters"], [549, "parameters"], [551, "parameters"], [552, "parameters"], [553, "parameters"], [554, "parameters"], [555, "parameters"], [557, "parameters"], [558, "parameters"], [559, "parameters"], [560, "parameters"], [562, "parameters"], [563, "parameters"], [565, "parameters"], [566, "parameters"], [567, "parameters"], [570, "parameters"], [571, "parameters"], [575, "parameters"], [578, "parameters"], [582, "parameters"], [585, "parameters"], [589, "parameters"], [590, "parameters"], [591, "parameters"], [593, "parameters"], [594, "parameters"], [595, "parameters"], [596, "parameters"], [598, "parameters"], [599, "parameters"], [600, "parameters"], [601, "parameters"], [604, "parameters"], [605, "parameters"], [606, "parameters"], [607, "parameters"], [608, "parameters"], [610, "parameters"], [611, "parameters"], [612, "parameters"], [613, "parameters"], [615, "parameters"], [616, "parameters"], [617, "parameters"], [618, "parameters"], [619, "parameters"], [622, "parameters"], [623, "parameters"], [624, "parameters"], [626, "parameters"], [627, "parameters"], [628, "parameters"], [629, "parameters"], [631, "parameters"], [632, "parameters"], [633, "parameters"], [635, "parameters"], [636, "parameters"], [638, "parameters"], [639, "parameters"], [641, "parameters"], [643, "parameters"], [644, "parameters"], [646, "parameters"], [648, "parameters"], [650, "parameters"], [651, "parameters"], [653, "parameters"], [654, "parameters"], [655, "parameters"], [656, "parameters"], [657, "parameters"], [659, "parameters"], [660, "parameters"], [661, "parameters"], [662, "parameters"], [663, "parameters"], [665, "parameters"], [666, "parameters"], [667, "parameters"], [668, "parameters"], [669, "parameters"], [671, "parameters"], [672, "parameters"], [673, "parameters"], [674, "parameters"], [675, "parameters"], [677, "parameters"], [680, "parameters"], [683, "parameters"], [686, "parameters"], [689, "parameters"], [690, "parameters"], [693, "parameters"], [696, "parameters"], [697, "parameters"], [700, "parameters"], [701, "parameters"], [702, "parameters"], [703, "parameters"], [704, "parameters"], [705, "parameters"], [707, "parameters"], [708, "parameters"], [709, "parameters"], [710, "parameters"], [712, "parameters"], [714, "parameters"], [715, "parameters"], [716, "parameters"], [717, "parameters"], [719, "parameters"], [720, "parameters"], [721, "parameters"], [722, "parameters"], [723, "parameters"], [725, "parameters"], [726, "parameters"], [727, "parameters"], [728, "parameters"], [729, "parameters"], [730, "parameters"], [732, "parameters"], [733, "parameters"], [735, "parameters"], [736, "parameters"], [737, "parameters"], [738, "parameters"], [739, "parameters"], [740, "parameters"], [741, "parameters"], [743, "parameters"], [744, "parameters"], [746, "parameters"], [747, "parameters"], [748, "parameters"], [749, "parameters"], [751, "parameters"], [753, "parameters"], [754, "parameters"], [755, "parameters"], [757, "parameters"], [759, "parameters"], [760, "parameters"], [761, "parameters"], [763, "parameters"], [765, "parameters"], [766, "parameters"], [768, "parameters"], [770, "parameters"], [771, "parameters"], [772, "parameters"], [788, "parameters"], [789, "parameters"], [791, "parameters"], [792, "parameters"], [795, "parameters"], [797, "parameters"], [798, "parameters"], [800, "parameters"], [802, "parameters"], [803, "parameters"], [805, "parameters"], [807, "parameters"], [808, "parameters"], [809, "parameters"], [811, "parameters"], [812, "parameters"], [813, "parameters"], [814, "parameters"], [816, "parameters"], [817, "parameters"], [818, "parameters"], [819, "parameters"], [820, "parameters"], [822, "parameters"], [823, "parameters"], [824, "parameters"], [826, "parameters"], [827, "parameters"], [828, "parameters"], [829, "parameters"], [830, "parameters"], [832, "parameters"], [833, "parameters"], [834, "parameters"], [836, "parameters"], [837, "parameters"], [838, "parameters"], [841, "parameters"], [842, "parameters"], [845, "parameters"], [846, "parameters"], [847, "parameters"], [848, "parameters"], [850, "parameters"], [851, "parameters"], [852, "parameters"], [854, "parameters"], [855, "parameters"], [856, "parameters"], [857, "parameters"], [858, "parameters"], [860, "parameters"], [861, "parameters"], [862, "parameters"], [863, "parameters"], [864, "parameters"], [865, "parameters"], [866, "parameters"], [867, "parameters"], [868, "parameters"], [870, "parameters"], [871, "parameters"], [872, "parameters"], [873, "parameters"], [874, "parameters"], [875, "parameters"], [876, "parameters"], [878, "parameters"], [880, "parameters"], [882, "parameters"], [883, "parameters"], [885, "parameters"], [886, "parameters"], [887, "parameters"], [888, "parameters"], [889, "parameters"], [891, "parameters"], [892, "parameters"], [894, "parameters"], [896, "parameters"], [897, "parameters"], [898, "parameters"], [899, "parameters"], [900, "parameters"], [901, "parameters"], [902, "parameters"], [903, "parameters"], [904, "parameters"], [905, "parameters"], [911, "parameters"], [912, "parameters"], [913, "parameters"], [914, "parameters"], [915, "parameters"], [916, "parameters"], [917, "parameters"], [918, "parameters"], [919, "parameters"], [920, "parameters"], [921, "parameters"], [922, "parameters"], [923, "parameters"], [924, "parameters"], [925, "parameters"], [926, "parameters"], [927, "parameters"], [928, "parameters"], [930, "parameters"], [934, "parameters"], [935, "parameters"], [937, "parameters"], [939, "parameters"], [940, "parameters"], [944, "parameters"], [945, "parameters"], [947, "parameters"], [948, "parameters"], [951, "parameters"], [952, "parameters"], [954, "parameters"], [955, "parameters"], [958, "parameters"], [959, "parameters"], [961, "parameters"], [962, "parameters"], [966, "parameters"], [967, "parameters"], [969, "parameters"], [970, "parameters"], [974, "parameters"], [975, "parameters"], [977, "parameters"], [979, "parameters"], [980, "parameters"], [981, "parameters"], [983, "parameters"], [984, "parameters"], [985, "parameters"], [986, "parameters"], [991, "parameters"], [992, "parameters"], [998, "parameters"], [1000, "parameters"], [1001, "parameters"], [1002, "parameters"], [1003, "parameters"], [1007, "parameters"], [1008, "parameters"], [1009, "parameters"], [1010, "parameters"], [1018, "parameters"], [1019, "parameters"], [1026, "parameters"], [1027, "parameters"], [1028, "parameters"], [1029, "parameters"], [1031, "parameters"], [1032, "parameters"], [1033, "parameters"], [1034, "parameters"], [1035, "parameters"], [1038, "parameters"], [1039, "parameters"], [1041, "parameters"], [1042, "parameters"], [1043, "parameters"], [1046, "parameters"], [1059, "parameters"], [1060, "parameters"], [1061, "parameters"], [1063, "parameters"], [1064, "parameters"], [1065, "parameters"], [1069, "parameters"], [1070, "parameters"], [1071, "parameters"], [1072, "parameters"], [1073, "parameters"], [1075, "parameters"], [1076, "parameters"], [1077, "parameters"], [1078, "parameters"], [1080, "parameters"], [1082, "parameters"], [1083, "parameters"], [1084, "parameters"], [1085, "parameters"], [1086, "parameters"], [1090, "parameters"], [1091, "parameters"], [1093, "parameters"], [1094, "parameters"], [1095, "parameters"], [1098, "parameters"], [1099, "parameters"], [1101, "parameters"], [1102, "parameters"], [1105, "parameters"], [1110, "parameters"], [1111, "parameters"], [1115, "parameters"], [1116, "parameters"], [1117, "parameters"], [1120, "parameters"], [1121, "parameters"], [1122, "parameters"], [1125, "parameters"], [1126, "parameters"], [1127, "parameters"], [1130, "parameters"], [1131, "parameters"], [1132, "parameters"], [1133, "parameters"], [1137, "parameters"], [1138, "parameters"], [1140, "parameters"], [1142, "parameters"], [1143, "parameters"], [1146, "parameters"], [1147, "parameters"], [1148, "parameters"], [1149, "parameters"], [1152, "parameters"], [1153, "parameters"], [1154, "parameters"], [1156, "parameters"], [1158, "parameters"], [1159, "parameters"], [1160, "parameters"], [1161, "parameters"], [1165, "parameters"], [1166, "parameters"], [1167, "parameters"], [1171, "parameters"], [1172, "parameters"], [1173, "parameters"], [1177, "parameters"], [1178, "parameters"], [1179, "parameters"], [1183, "parameters"], [1184, "parameters"], [1185, "parameters"], [1189, "parameters"], [1194, "parameters"], [1196, "parameters"], [1197, "parameters"], [1198, "parameters"], [1199, "parameters"], [1201, "parameters"], [1206, "parameters"], [1207, "parameters"], [1208, "parameters"], [1209, "parameters"], [1211, "parameters"], [1216, "parameters"], [1217, "parameters"], [1218, "parameters"], [1219, "parameters"], [1221, "parameters"], [1226, "parameters"], [1227, "parameters"], [1228, "parameters"], [1229, "parameters"], [1232, "parameters"], [1240, "parameters"], [1242, "parameters"], [1245, "parameters"], [1246, "parameters"], [1249, "parameters"], [1250, "parameters"], [1253, "parameters"], [1258, "parameters"], [1259, "parameters"], [1260, "parameters"], [1261, "parameters"], [1270, "parameters"], [1271, "parameters"], [1273, "parameters"], [1276, "parameters"], [1277, "parameters"], [1279, "parameters"], [1280, "parameters"], [1282, "parameters"], [1287, "parameters"], [1289, "parameters"], [1295, "parameters"], [1297, "parameters"], [1298, "parameters"], [1299, "parameters"], [1300, "parameters"], [1301, "parameters"], [1302, "parameters"], [1303, "parameters"], [1304, "parameters"]], "Returns": [[2, "returns"], [3, "returns"], [5, "returns"], [10, "returns"], [11, "returns"], [12, "returns"], [14, "returns"], [15, "returns"], [16, "returns"], [19, "returns"], [20, "returns"], [21, "returns"], [24, "returns"], [26, "returns"], [27, "returns"], [30, "returns"], [31, "returns"], [34, "returns"], [35, "returns"], [36, "returns"], [39, "returns"], [40, "returns"], [44, "returns"], [45, "returns"], [48, "returns"], [49, "returns"], [53, "returns"], [54, "returns"], [55, "returns"], [62, "returns"], [63, "returns"], [66, "returns"], [73, "returns"], [74, "returns"], [75, "returns"], [76, "returns"], [77, "returns"], [79, "returns"], [80, "returns"], [84, "returns"], [86, "returns"], [87, "returns"], [88, "returns"], [89, "returns"], [90, "returns"], [93, "returns"], [96, "returns"], [98, "returns"], [102, "returns"], [103, "returns"], [104, "returns"], [108, "returns"], [110, "returns"], [112, "returns"], [119, "returns"], [121, "returns"], [122, "returns"], [124, "returns"], [125, "returns"], [126, "returns"], [131, "returns"], [134, "returns"], [136, "returns"], [137, "returns"], [138, "returns"], [142, "returns"], [144, "returns"], [146, "returns"], [149, "returns"], [150, "returns"], [152, "returns"], [153, "returns"], [154, "returns"], [155, "returns"], [157, "returns"], [158, "returns"], [159, "returns"], [160, "returns"], [166, "returns"], [170, "returns"], [171, "returns"], [174, "returns"], [175, "returns"], [176, "returns"], [177, "returns"], [183, "returns"], [184, "returns"], [188, "returns"], [189, "returns"], [192, "returns"], [193, "returns"], [206, "returns"], [287, "returns"], [325, "returns"], [449, "returns"], [450, "returns"], [451, "returns"], [452, "returns"], [453, "returns"], [454, "returns"], [458, "returns"], [460, "returns"], [461, "returns"], [462, "returns"], [464, "returns"], [465, "returns"], [470, "returns"], [471, "returns"], [472, "returns"], [473, "returns"], [474, "returns"], [477, "returns"], [478, "returns"], [479, "returns"], [480, "returns"], [481, "returns"], [485, "returns"], [487, "returns"], [488, "returns"], [489, "returns"], [491, "returns"], [492, "returns"], [495, "returns"], [496, "returns"], [501, "returns"], [503, "returns"], [504, "returns"], [518, "returns"], [520, "returns"], [527, "returns"], [529, "returns"], [536, "returns"], [538, "returns"], [547, "returns"], [549, "returns"], [554, "returns"], [555, "returns"], [558, "returns"], [559, "returns"], [560, "returns"], [562, "returns"], [563, "returns"], [566, "returns"], [567, "returns"], [569, "returns"], [571, "returns"], [572, "returns"], [573, "returns"], [577, "returns"], [578, "returns"], [579, "returns"], [580, "returns"], [584, "returns"], [585, "returns"], [586, "returns"], [587, "returns"], [590, "returns"], [591, "returns"], [594, "returns"], [595, "returns"], [596, "returns"], [599, "returns"], [600, "returns"], [601, "returns"], [605, "returns"], [607, "returns"], [608, "returns"], [611, "returns"], [612, "returns"], [613, "returns"], [617, "returns"], [618, "returns"], [619, "returns"], [623, "returns"], [624, "returns"], [627, "returns"], [628, "returns"], [629, "returns"], [632, "returns"], [633, "returns"], [635, "returns"], [636, "returns"], [638, "returns"], [639, "returns"], [643, "returns"], [644, "returns"], [650, "returns"], [651, "returns"], [654, "returns"], [656, "returns"], [657, "returns"], [660, "returns"], [662, "returns"], [663, "returns"], [666, "returns"], [668, "returns"], [669, "returns"], [672, "returns"], [674, "returns"], [675, "returns"], [677, "returns"], [678, "returns"], [680, "returns"], [681, "returns"], [683, "returns"], [684, "returns"], [686, "returns"], [687, "returns"], [690, "returns"], [691, "returns"], [693, "returns"], [694, "returns"], [697, "returns"], [698, "returns"], [701, "returns"], [703, "returns"], [704, "returns"], [705, "returns"], [708, "returns"], [709, "returns"], [710, "returns"], [714, "returns"], [715, "returns"], [716, "returns"], [717, "returns"], [720, "returns"], [721, "returns"], [722, "returns"], [723, "returns"], [726, "returns"], [728, "returns"], [729, "returns"], [730, "returns"], [732, "returns"], [733, "returns"], [736, "returns"], [740, "returns"], [743, "returns"], [744, "returns"], [747, "returns"], [748, "returns"], [749, "returns"], [753, "returns"], [754, "returns"], [759, "returns"], [760, "returns"], [765, "returns"], [770, "returns"], [771, "returns"], [791, "returns"], [792, "returns"], [793, "returns"], [797, "returns"], [802, "returns"], [807, "returns"], [812, "returns"], [813, "returns"], [814, "returns"], [817, "returns"], [818, "returns"], [819, "returns"], [820, "returns"], [823, "returns"], [824, "returns"], [827, "returns"], [828, "returns"], [829, "returns"], [830, "returns"], [833, "returns"], [834, "returns"], [838, "returns"], [839, "returns"], [842, "returns"], [843, "returns"], [844, "returns"], [853, "returns"], [854, "returns"], [855, "returns"], [856, "returns"], [857, "returns"], [858, "returns"], [860, "returns"], [861, "returns"], [862, "returns"], [863, "returns"], [865, "returns"], [866, "returns"], [867, "returns"], [868, "returns"], [886, "returns"], [887, "returns"], [888, "returns"], [889, "returns"], [892, "returns"], [897, "returns"], [904, "returns"], [905, "returns"], [911, "returns"], [913, "returns"], [914, "returns"], [915, "returns"], [916, "returns"], [917, "returns"], [918, "returns"], [919, "returns"], [920, "returns"], [921, "returns"], [922, "returns"], [923, "returns"], [924, "returns"], [925, "returns"], [926, "returns"], [927, "returns"], [928, "returns"], [931, "returns"], [932, "returns"], [933, "returns"], [934, "returns"], [935, "returns"], [941, "returns"], [942, "returns"], [943, "returns"], [944, "returns"], [945, "returns"], [949, "returns"], [950, "returns"], [951, "returns"], [952, "returns"], [956, "returns"], [957, "returns"], [958, "returns"], [959, "returns"], [963, "returns"], [964, "returns"], [965, "returns"], [966, "returns"], [967, "returns"], [971, "returns"], [972, "returns"], [973, "returns"], [974, "returns"], [975, "returns"], [978, "returns"], [979, "returns"], [980, "returns"], [981, "returns"], [982, "returns"], [984, "returns"], [985, "returns"], [987, "returns"], [988, "returns"], [989, "returns"], [990, "returns"], [993, "returns"], [994, "returns"], [995, "returns"], [996, "returns"], [1001, "returns"], [1002, "returns"], [1004, "returns"], [1005, "returns"], [1009, "returns"], [1010, "returns"], [1011, "returns"], [1012, "returns"], [1013, "returns"], [1015, "returns"], [1016, "returns"], [1020, "returns"], [1021, "returns"], [1023, "returns"], [1030, "returns"], [1031, "returns"], [1032, "returns"], [1033, "returns"], [1034, "returns"], [1035, "returns"], [1036, "returns"], [1037, "returns"], [1038, "returns"], [1039, "returns"], [1040, "returns"], [1041, "returns"], [1042, "returns"], [1043, "returns"], [1044, "returns"], [1045, "returns"], [1047, "returns"], [1048, "returns"], [1049, "returns"], [1050, "returns"], [1051, "returns"], [1052, "returns"], [1053, "returns"], [1054, "returns"], [1055, "returns"], [1056, "returns"], [1057, "returns"], [1058, "returns"], [1059, "returns"], [1060, "returns"], [1061, "returns"], [1062, "returns"], [1063, "returns"], [1066, "returns"], [1067, "returns"], [1070, "returns"], [1071, "returns"], [1076, "returns"], [1077, "returns"], [1078, "returns"], [1079, "returns"], [1080, "returns"], [1083, "returns"], [1084, "returns"], [1085, "returns"], [1087, "returns"], [1088, "returns"], [1089, "returns"], [1094, "returns"], [1095, "returns"], [1096, "returns"], [1097, "returns"], [1103, "returns"], [1104, "returns"], [1106, "returns"], [1107, "returns"], [1108, "returns"], [1109, "returns"], [1110, "returns"], [1111, "returns"], [1112, "returns"], [1113, "returns"], [1116, "returns"], [1117, "returns"], [1118, "returns"], [1121, "returns"], [1122, "returns"], [1123, "returns"], [1126, "returns"], [1127, "returns"], [1128, "returns"], [1131, "returns"], [1132, "returns"], [1134, "returns"], [1137, "returns"], [1138, "returns"], [1139, "returns"], [1143, "returns"], [1144, "returns"], [1147, "returns"], [1148, "returns"], [1150, "returns"], [1153, "returns"], [1154, "returns"], [1155, "returns"], [1156, "returns"], [1159, "returns"], [1160, "returns"], [1162, "returns"], [1163, "returns"], [1166, "returns"], [1167, "returns"], [1168, "returns"], [1169, "returns"], [1172, "returns"], [1173, "returns"], [1174, "returns"], [1175, "returns"], [1178, "returns"], [1179, "returns"], [1180, "returns"], [1181, "returns"], [1184, "returns"], [1185, "returns"], [1186, "returns"], [1187, "returns"], [1190, "returns"], [1193, "returns"], [1194, "returns"], [1197, "returns"], [1198, "returns"], [1199, "returns"], [1200, "returns"], [1202, "returns"], [1203, "returns"], [1204, "returns"], [1207, "returns"], [1208, "returns"], [1209, "returns"], [1210, "returns"], [1212, "returns"], [1213, "returns"], [1214, "returns"], [1217, "returns"], [1218, "returns"], [1219, "returns"], [1220, "returns"], [1222, "returns"], [1223, "returns"], [1224, "returns"], [1227, "returns"], [1228, "returns"], [1229, "returns"], [1230, "returns"], [1231, "returns"], [1233, "returns"], [1234, "returns"], [1235, "returns"], [1236, "returns"], [1237, "returns"], [1238, "returns"], [1240, "returns"], [1241, "returns"], [1243, "returns"], [1244, "returns"], [1245, "returns"], [1246, "returns"], [1247, "returns"], [1250, "returns"], [1251, "returns"], [1252, "returns"], [1254, "returns"], [1255, "returns"], [1256, "returns"], [1257, "returns"], [1258, "returns"], [1259, "returns"], [1262, "returns"], [1263, "returns"], [1271, "returns"], [1272, "returns"], [1274, "returns"], [1275, "returns"], [1276, "returns"], [1277, "returns"], [1278, "returns"], [1279, "returns"], [1280, "returns"], [1287, "returns"], [1289, "returns"], [1294, "returns"], [1295, "returns"], [1298, "returns"], [1299, "returns"], [1300, "returns"], [1301, "returns"], [1302, "returns"], [1303, "returns"], [1304, "returns"]], "Attributes": [[8, "attributes"], [22, "attributes"], [28, "attributes"], [32, "attributes"], [37, "attributes"], [41, "attributes"], [46, "attributes"], [56, "attributes"], [70, "attributes"], [81, "attributes"], [91, "attributes"], [100, "attributes"], [105, "attributes"], [114, "attributes"], [127, "attributes"], [139, "attributes"], [147, "attributes"], [161, "attributes"], [167, "attributes"], [185, "attributes"], [447, "attributes"], [455, "attributes"], [475, "attributes"], [482, "attributes"], [498, "attributes"], [505, "attributes"], [508, "attributes"], [513, "attributes"], [521, "attributes"], [530, "attributes"], [542, "attributes"], [556, "attributes"], [564, "attributes"], [574, "attributes"], [581, "attributes"], [588, "attributes"], [592, "attributes"], [597, "attributes"], [603, "attributes"], [609, "attributes"], [614, "attributes"], [621, "attributes"], [625, "attributes"], [630, "attributes"], [640, "attributes"], [652, "attributes"], [658, "attributes"], [664, "attributes"], [670, "attributes"], [688, "attributes"], [695, "attributes"], [699, "attributes"], [706, "attributes"], [711, "attributes"], [718, "attributes"], [724, "attributes"], [734, "attributes"], [750, "attributes"], [756, "attributes"], [762, "attributes"], [767, "attributes"], [773, "attributes"], [794, "attributes"], [799, "attributes"], [804, "attributes"], [810, "attributes"], [815, "attributes"], [821, "attributes"], [825, "attributes"], [831, "attributes"], [835, "attributes"], [840, "attributes"], [849, "attributes"], [869, "attributes"], [881, "attributes"], [890, "attributes"], [895, "attributes"], [898, "attributes"], [906, "attributes"], [938, "attributes"], [946, "attributes"], [953, "attributes"], [960, "attributes"], [976, "attributes"], [999, "attributes"], [1024, "attributes"], [1074, "attributes"], [1081, "attributes"], [1092, "attributes"], [1140, "attributes"], [1195, "attributes"], [1205, "attributes"], [1215, "attributes"], [1225, "attributes"], [1248, "attributes"], [1264, "attributes"], [1281, "attributes"]], "Examples": [[206, "examples"], [278, "examples"], [325, "examples"], [366, "examples"], [368, "examples"], [1156, "examples"], [1194, "examples"], [1323, "examples"]], "See Also": [[206, "see-also"], [325, "see-also"]], "Yields": [[864, "yields"], [871, "yields"], [872, "yields"], [873, "yields"], [874, "yields"], [875, "yields"], [876, "yields"]], "Raises": [[1156, "raises"], [1194, "raises"]], "Notes": [[1156, "notes"], [1194, "notes"]], "API": [[1305, "api"]], "foxes.algorithms": [[1306, "foxes-algorithms"]], "Downwind algorithm": [[1307, "downwind-algorithm"]], "Downwind algorithm models": [[1307, "downwind-algorithm-models"]], "Iterative algorithm": [[1308, "iterative-algorithm"]], "Iterative algorithm models": [[1308, "iterative-algorithm-models"]], "foxes.constants": [[1309, "foxes-constants"]], "foxes.core": [[1310, "foxes-core"]], "foxes": [[1311, "foxes"]], "foxes.input": [[1312, "foxes-input"]], "foxes.input.farm_layout": [[1312, "foxes-input-farm-layout"]], "foxes.input.states": [[1312, "foxes-input-states"]], "foxes.input.windio": [[1312, "foxes-input-windio"]], "foxes.models": [[1313, "foxes-models"]], "foxes.models.farm_controllers": [[1313, "foxes-models-farm-controllers"]], "foxes.models.farm_models": [[1313, "foxes-models-farm-models"]], "foxes.models.partial_wakes": [[1313, "foxes-models-partial-wakes"]], "foxes.models.point_models": [[1313, "foxes-models-point-models"]], "foxes.models.rotor_models": [[1313, "foxes-models-rotor-models"]], "foxes.models.turbine_models": [[1313, "foxes-models-turbine-models"]], "foxes.models.turbine_types": [[1313, "foxes-models-turbine-types"]], "foxes.models.vertical_profiles": [[1313, "foxes-models-vertical-profiles"]], "foxes.models.wake_frames": [[1313, "foxes-models-wake-frames"]], "foxes.models.wake_models": [[1313, "foxes-models-wake-models"], [1321, "foxes-models-wake-models"]], "foxes.models.wake_superpositions": [[1313, "foxes-models-wake-superpositions"]], "foxes.opt": [[1314, "foxes-opt"]], "foxes.opt.core": [[1314, "foxes-opt-core"]], "foxes.opt.problems": [[1314, "foxes-opt-problems"], [1315, "foxes-opt-problems"]], "foxes.opt.objectives": [[1314, "foxes-opt-objectives"]], "foxes.opt.constraints": [[1314, "foxes-opt-constraints"]], "foxes.opt.problems.layout": [[1315, "foxes-opt-problems-layout"]], "foxes.opt.problems.layout.geom_layouts": [[1315, "foxes-opt-problems-layout-geom-layouts"], [1316, "foxes-opt-problems-layout-geom-layouts"]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1316, "foxes-opt-problems-layout-geom-layouts-objectives"]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1316, "foxes-opt-problems-layout-geom-layouts-constraints"]], "foxes.output": [[1317, "foxes-output"]], "foxes.utils": [[1318, "foxes-utils"]], "foxes.utils.abl": [[1318, "foxes-utils-abl"]], "foxes.utils.geom2d": [[1318, "foxes-utils-geom2d"]], "foxes.utils.runners": [[1318, "foxes-utils-runners"]], "foxes.utils.two_circles": [[1318, "foxes-utils-two-circles"]], "foxes.utils.abl.neutral": [[1319, "foxes-utils-abl-neutral"]], "foxes.utils.abl.stable": [[1319, "foxes-utils-abl-stable"]], "foxes.utils.abl.unstable": [[1319, "foxes-utils-abl-unstable"]], "foxes.utils.abl.sheared": [[1319, "foxes-utils-abl-sheared"]], "foxes.variables": [[1320, "foxes-variables"]], "foxes.models.wake_models.wind": [[1321, "foxes-models-wake-models-wind"]], "foxes.models.wake_models.ti": [[1321, "foxes-models-wake-models-ti"]], "Citation": [[1322, "citation"]], "History": [[1324, "history"]], "v0.1.0-alpha": [[1324, "v0-1-0-alpha"]], "v0.1.1-alpha": [[1324, "v0-1-1-alpha"]], "v0.1.2-alpha": [[1324, "v0-1-2-alpha"]], "v0.1.3-alpha": [[1324, "v0-1-3-alpha"]], "v0.1.4-alpha": [[1324, "v0-1-4-alpha"]], "v0.2.0-alpha": [[1324, "v0-2-0-alpha"]], "v0.2.1-alpha": [[1324, "v0-2-1-alpha"]], "v0.2.2-alpha": [[1324, "v0-2-2-alpha"]], "v0.2.3-alpha": [[1324, "v0-2-3-alpha"]], "v0.2.4-alpha": [[1324, "v0-2-4-alpha"]], "v0.2.5-alpha": [[1324, "v0-2-5-alpha"]], "v0.2.6-alpha": [[1324, "v0-2-6-alpha"]], "v0.3.0-alpha": [[1324, "v0-3-0-alpha"]], "v0.3.1-alpha": [[1324, "v0-3-1-alpha"]], "v0.3.2-alpha": [[1324, "v0-3-2-alpha"]], "v0.3.3-alpha": [[1324, "v0-3-3-alpha"]], "v0.3.4-alpha": [[1324, "v0-3-4-alpha"]], "v0.3.5-alpha": [[1324, "v0-3-5-alpha"]], "v0.4.0": [[1324, "v0-4-0"]], "v0.4.1": [[1324, "v0-4-1"]], "v0.4.2": [[1324, "v0-4-2"]], "v0.4.3": [[1324, "v0-4-3"]], "v0.4.4": [[1324, "v0-4-4"]], "v0.4.5": [[1324, "v0-4-5"]], "Welcome to FOXES": [[1325, "welcome-to-foxes"]], "License": [[1325, "license"]], "Contents": [[1325, "contents"]], "Contributing": [[1325, "contributing"]], "Acknowledgements": [[1325, "acknowledgements"]], "Installation": [[1326, "installation"]], "Requirements": [[1326, "requirements"]], "Installation via pip": [[1326, "installation-via-pip"]], "Virtual Python environment": [[1326, "virtual-python-environment"], [1326, "id1"]], "Standard users": [[1326, "standard-users"], [1326, "id2"]], "Developers": [[1326, "developers"], [1326, "id3"]], "Installation via conda": [[1326, "installation-via-conda"]], "Preparation": [[1326, "preparation"]], "Static data": [[1327, "Static-data"]], "Wind farm layout data": [[1327, "Wind-farm-layout-data"]], "test_farm_67.csv": [[1327, "test_farm_67.csv"]], "Ambient states data": [[1327, "Ambient-states-data"]], "WRF-Timeseries-4464.csv.gz": [[1327, "WRF-Timeseries-4464.csv.gz"]], "abl_states_6000.csv.gz": [[1327, "abl_states_6000.csv.gz"]], "timeseries_3000.csv.gz": [[1327, "timeseries_3000.csv.gz"]], "timeseries_8000.csv.gz": [[1327, "timeseries_8000.csv.gz"]], "timeseries_100.csv.gz": [[1327, "timeseries_100.csv.gz"]], "wind_rose_bremen.csv": [[1327, "wind_rose_bremen.csv"]], "wind_rotation.nc": [[1327, "wind_rotation.nc"]], "Power and thrust curves": [[1327, "Power-and-thrust-curves"]], "DTU-10MW-D178d3-H119.csv": [[1327, "DTU-10MW-D178d3-H119.csv"]], "IEA-15MW-D240-H150.csv": [[1327, "IEA-15MW-D240-H150.csv"]], "IWT-7d5MW-D164-H100.csv": [[1327, "IWT-7d5MW-D164-H100.csv"]], "NREL-5MW-D126-H90.csv": [[1327, "NREL-5MW-D126-H90.csv"]], "File paths": [[1327, "File-paths"]], "Heterogeneous flow": [[1328, "Heterogeneous-flow"]], "Layout optimization": [[1329, "Layout-optimization"]], "The model book": [[1330, "The-model-book"]], "Multi-height wind data": [[1331, "Multi-height-wind-data"]], "Overview - how to setup foxes": [[1332, "Overview---how-to-setup-foxes"]], "Power mask": [[1333, "Power-mask"]], "Wind sector management": [[1334, "Wind-sector-management"]], "Single row of turbines": [[1335, "Single-row-of-turbines"]], "Dynamic wakes": [[1336, "Dynamic-wakes"]], "Timeseries data": [[1337, "Timeseries-data"]], "Wind rose data": [[1338, "Wind-rose-data"]], "Yawed rotor wakes": [[1339, "Yawed-rotor-wakes"]]}, "indexentries": {"pep 585": [[206, "index-0"], [325, "index-0"]], "python enhancement proposals": [[206, "index-0"], [325, "index-0"]]}, "docurls": ["_algorithms/Downwind.html", "_algorithms/Downwind.__init__.html", "_algorithms/Downwind.calc_farm.html", "_algorithms/Downwind.calc_points.html", "_algorithms/Downwind.finalize.html", "_algorithms/Downwind.get_model.html", "_algorithms/Downwind.init_states.html", "_algorithms/Downwind.initialize.html", "_algorithms/Iterative.html", "_algorithms/Iterative.__init__.html", "_algorithms/Iterative.calc_farm.html", "_algorithms/Iterative.get_model.html", "_algorithms/Iterative.iterations.html", "_algorithms/downwind/models/CalcOrder.html", "_algorithms/downwind/models/CalcOrder.calculate.html", "_algorithms/downwind/models/CalcOrder.initialize.html", "_algorithms/downwind/models/CalcOrder.output_farm_vars.html", "_algorithms/downwind/models/FarmWakesCalculation.html", "_algorithms/downwind/models/FarmWakesCalculation.__init__.html", "_algorithms/downwind/models/FarmWakesCalculation.calculate.html", "_algorithms/downwind/models/FarmWakesCalculation.initialize.html", "_algorithms/downwind/models/FarmWakesCalculation.output_farm_vars.html", "_algorithms/downwind/models/PointWakesCalculation.html", "_algorithms/downwind/models/PointWakesCalculation.__init__.html", "_algorithms/downwind/models/PointWakesCalculation.calculate.html", "_algorithms/downwind/models/PointWakesCalculation.contribute_to_wake_deltas.html", "_algorithms/downwind/models/PointWakesCalculation.initialize.html", "_algorithms/downwind/models/PointWakesCalculation.output_point_vars.html", "_algorithms/downwind/models/SetAmbFarmResults.html", "_algorithms/downwind/models/SetAmbFarmResults.__init__.html", "_algorithms/downwind/models/SetAmbFarmResults.calculate.html", "_algorithms/downwind/models/SetAmbFarmResults.output_farm_vars.html", "_algorithms/downwind/models/SetAmbPointResults.html", "_algorithms/downwind/models/SetAmbPointResults.__init__.html", "_algorithms/downwind/models/SetAmbPointResults.calculate.html", "_algorithms/downwind/models/SetAmbPointResults.initialize.html", "_algorithms/downwind/models/SetAmbPointResults.output_point_vars.html", "_algorithms/iterative/ConvCrit.html", "_algorithms/iterative/ConvCrit.__init__.html", "_algorithms/iterative/ConvCrit.check_converged.html", "_algorithms/iterative/ConvCrit.get_deltas.html", "_algorithms/iterative/ConvCritList.html", "_algorithms/iterative/ConvCritList.__init__.html", "_algorithms/iterative/ConvCritList.add_crit.html", "_algorithms/iterative/ConvCritList.check_converged.html", "_algorithms/iterative/ConvCritList.get_deltas.html", "_algorithms/iterative/ConvVarDelta.html", "_algorithms/iterative/ConvVarDelta.__init__.html", "_algorithms/iterative/ConvVarDelta.check_converged.html", "_algorithms/iterative/ConvVarDelta.get_deltas.html", "_algorithms/iterative/DefaultConv.html", "_algorithms/iterative/DefaultConv.__init__.html", "_algorithms/iterative/models/FarmWakesCalculation.html", "_algorithms/iterative/models/FarmWakesCalculation.calculate.html", "_algorithms/iterative/models/FarmWakesCalculation.initialize.html", "_algorithms/iterative/models/FarmWakesCalculation.output_farm_vars.html", "_core/Algorithm.html", "_core/Algorithm.__init__.html", "_core/Algorithm.chunked.html", "_core/Algorithm.cleanup.html", "_core/Algorithm.finalize.html", "_core/Algorithm.finalize_model.html", "_core/Algorithm.get_models_data.html", "_core/Algorithm.idata_mem.html", "_core/Algorithm.initialize.html", "_core/Algorithm.new.html", "_core/Algorithm.new_point_data.html", "_core/Algorithm.print.html", "_core/Algorithm.update_idata.html", "_core/Algorithm.update_n_turbines.html", "_core/Data.html", "_core/Data.__init__.html", "_core/Data.add.html", "_core/Data.from_points.html", "_core/Data.n_points.html", "_core/Data.n_states.html", "_core/Data.n_turbines.html", "_core/Data.states_i0.html", "_core/DataCalcModel.html", "_core/DataCalcModel.calculate.html", "_core/DataCalcModel.run_calculation.html", "_core/ExtendedStates.html", "_core/ExtendedStates.__init__.html", "_core/ExtendedStates.append.html", "_core/ExtendedStates.calculate.html", "_core/ExtendedStates.finalize.html", "_core/ExtendedStates.index.html", "_core/ExtendedStates.initialize.html", "_core/ExtendedStates.output_point_vars.html", "_core/ExtendedStates.size.html", "_core/ExtendedStates.weights.html", "_core/FarmController.html", "_core/FarmController.__init__.html", "_core/FarmController.calculate.html", "_core/FarmController.collect_models.html", "_core/FarmController.finalize.html", "_core/FarmController.initialize.html", "_core/FarmController.keep.html", "_core/FarmController.output_farm_vars.html", "_core/FarmController.set_pars.html", "_core/FarmDataModel.html", "_core/FarmDataModel.__init__.html", "_core/FarmDataModel.calculate.html", "_core/FarmDataModel.output_farm_vars.html", "_core/FarmDataModel.run_calculation.html", "_core/FarmDataModelList.html", "_core/FarmDataModelList.__init__.html", "_core/FarmDataModelList.append.html", "_core/FarmDataModelList.calculate.html", "_core/FarmDataModelList.finalize.html", "_core/FarmDataModelList.initialize.html", "_core/FarmDataModelList.keep.html", "_core/FarmDataModelList.output_farm_vars.html", "_core/FarmModel.html", "_core/Model.html", "_core/Model.__init__.html", "_core/Model.__repr__.html", "_core/Model.data_to_store.html", "_core/Model.finalize.html", "_core/Model.from_data_or_store.html", "_core/Model.get_data.html", "_core/Model.initialize.html", "_core/Model.initialized.html", "_core/Model.keep.html", "_core/Model.model_id.html", "_core/Model.reduce_states.html", "_core/Model.var.html", "_core/PartialWakesModel.html", "_core/PartialWakesModel.__init__.html", "_core/PartialWakesModel.contribute_to_wake_deltas.html", "_core/PartialWakesModel.evaluate_results.html", "_core/PartialWakesModel.initialize.html", "_core/PartialWakesModel.keep.html", "_core/PartialWakesModel.new.html", "_core/PartialWakesModel.new_wake_deltas.html", "_core/PointDataModel.html", "_core/PointDataModel.calculate.html", "_core/PointDataModel.output_point_vars.html", "_core/PointDataModel.run_calculation.html", "_core/PointDataModelList.html", "_core/PointDataModelList.__init__.html", "_core/PointDataModelList.append.html", "_core/PointDataModelList.calculate.html", "_core/PointDataModelList.finalize.html", "_core/PointDataModelList.initialize.html", "_core/PointDataModelList.keep.html", "_core/PointDataModelList.output_point_vars.html", "_core/RotorModel.html", "_core/RotorModel.__init__.html", "_core/RotorModel.calculate.html", "_core/RotorModel.design_points.html", "_core/RotorModel.eval_rpoint_results.html", "_core/RotorModel.get_rotor_points.html", "_core/RotorModel.n_rotor_points.html", "_core/RotorModel.output_farm_vars.html", "_core/RotorModel.rotor_point_weights.html", "_core/States.html", "_core/States.index.html", "_core/States.output_point_vars.html", "_core/States.size.html", "_core/States.weights.html", "_core/Turbine.html", "_core/Turbine.__init__.html", "_core/Turbine.add_model.html", "_core/Turbine.insert_model.html", "_core/TurbineModel.html", "_core/TurbineModel.calculate.html", "_core/TurbineType.html", "_core/TurbineType.__init__.html", "_core/VerticalProfile.html", "_core/VerticalProfile.calculate.html", "_core/VerticalProfile.input_vars.html", "_core/VerticalProfile.new.html", "_core/WakeFrame.html", "_core/WakeFrame.calc_centreline_integral.html", "_core/WakeFrame.calc_order.html", "_core/WakeFrame.get_centreline_points.html", "_core/WakeFrame.get_wake_coos.html", "_core/WakeModel.html", "_core/WakeModel.contribute_to_wake_deltas.html", "_core/WakeModel.finalize_wake_deltas.html", "_core/WakeModel.init_wake_deltas.html", "_core/WakeSuperposition.html", "_core/WakeSuperposition.calc_final_wake_delta.html", "_core/WakeSuperposition.calc_wakes_plus_wake.html", "_core/WindFarm.html", "_core/WindFarm.__init__.html", "_core/WindFarm.add_turbine.html", "_core/WindFarm.n_turbines.html", "_core/WindFarm.turbine_names.html", "_data/StaticData.html", "_data/StaticData.__init__.html", "_data/parse_Pct_file_name.html", "_data/parse_Pct_two_files.html", "_foxes/constants/AMB_RPOINT_RESULTS.html", "_foxes/constants/DTYPE.html", "_foxes/constants/DTYPE.T.html", "_foxes/constants/DTYPE.__abs__.html", "_foxes/constants/DTYPE.__add__.html", "_foxes/constants/DTYPE.__and__.html", "_foxes/constants/DTYPE.__array__.html", "_foxes/constants/DTYPE.__array_interface__.html", "_foxes/constants/DTYPE.__array_priority__.html", "_foxes/constants/DTYPE.__array_struct__.html", "_foxes/constants/DTYPE.__array_wrap__.html", "_foxes/constants/DTYPE.__bool__.html", "_foxes/constants/DTYPE.__class_getitem__.html", "_foxes/constants/DTYPE.__divmod__.html", "_foxes/constants/DTYPE.__eq__.html", "_foxes/constants/DTYPE.__float__.html", "_foxes/constants/DTYPE.__floordiv__.html", "_foxes/constants/DTYPE.__format__.html", "_foxes/constants/DTYPE.__ge__.html", "_foxes/constants/DTYPE.__getitem__.html", "_foxes/constants/DTYPE.__gt__.html", "_foxes/constants/DTYPE.__hash__.html", "_foxes/constants/DTYPE.__int__.html", "_foxes/constants/DTYPE.__invert__.html", "_foxes/constants/DTYPE.__le__.html", "_foxes/constants/DTYPE.__lshift__.html", "_foxes/constants/DTYPE.__lt__.html", "_foxes/constants/DTYPE.__mod__.html", "_foxes/constants/DTYPE.__mul__.html", "_foxes/constants/DTYPE.__ne__.html", "_foxes/constants/DTYPE.__neg__.html", "_foxes/constants/DTYPE.__new__.html", "_foxes/constants/DTYPE.__or__.html", "_foxes/constants/DTYPE.__pos__.html", "_foxes/constants/DTYPE.__pow__.html", "_foxes/constants/DTYPE.__radd__.html", "_foxes/constants/DTYPE.__rand__.html", "_foxes/constants/DTYPE.__rdivmod__.html", "_foxes/constants/DTYPE.__reduce__.html", "_foxes/constants/DTYPE.__repr__.html", "_foxes/constants/DTYPE.__rfloordiv__.html", "_foxes/constants/DTYPE.__rlshift__.html", "_foxes/constants/DTYPE.__rmod__.html", "_foxes/constants/DTYPE.__rmul__.html", "_foxes/constants/DTYPE.__ror__.html", "_foxes/constants/DTYPE.__rpow__.html", "_foxes/constants/DTYPE.__rrshift__.html", "_foxes/constants/DTYPE.__rshift__.html", "_foxes/constants/DTYPE.__rsub__.html", "_foxes/constants/DTYPE.__rtruediv__.html", "_foxes/constants/DTYPE.__rxor__.html", "_foxes/constants/DTYPE.__sizeof__.html", "_foxes/constants/DTYPE.__str__.html", "_foxes/constants/DTYPE.__sub__.html", "_foxes/constants/DTYPE.__truediv__.html", "_foxes/constants/DTYPE.__xor__.html", "_foxes/constants/DTYPE.all.html", "_foxes/constants/DTYPE.any.html", "_foxes/constants/DTYPE.argmax.html", "_foxes/constants/DTYPE.argmin.html", "_foxes/constants/DTYPE.argsort.html", "_foxes/constants/DTYPE.as_integer_ratio.html", "_foxes/constants/DTYPE.astype.html", "_foxes/constants/DTYPE.base.html", "_foxes/constants/DTYPE.byteswap.html", "_foxes/constants/DTYPE.choose.html", "_foxes/constants/DTYPE.clip.html", "_foxes/constants/DTYPE.compress.html", "_foxes/constants/DTYPE.conj.html", "_foxes/constants/DTYPE.conjugate.html", "_foxes/constants/DTYPE.copy.html", "_foxes/constants/DTYPE.cumprod.html", "_foxes/constants/DTYPE.cumsum.html", "_foxes/constants/DTYPE.data.html", "_foxes/constants/DTYPE.diagonal.html", "_foxes/constants/DTYPE.dtype.html", "_foxes/constants/DTYPE.dump.html", "_foxes/constants/DTYPE.dumps.html", "_foxes/constants/DTYPE.fill.html", "_foxes/constants/DTYPE.flags.html", "_foxes/constants/DTYPE.flat.html", "_foxes/constants/DTYPE.flatten.html", "_foxes/constants/DTYPE.getfield.html", "_foxes/constants/DTYPE.imag.html", "_foxes/constants/DTYPE.is_integer.html", "_foxes/constants/DTYPE.item.html", "_foxes/constants/DTYPE.itemset.html", "_foxes/constants/DTYPE.itemsize.html", "_foxes/constants/DTYPE.max.html", "_foxes/constants/DTYPE.mean.html", "_foxes/constants/DTYPE.min.html", "_foxes/constants/DTYPE.nbytes.html", "_foxes/constants/DTYPE.ndim.html", "_foxes/constants/DTYPE.newbyteorder.html", "_foxes/constants/DTYPE.nonzero.html", "_foxes/constants/DTYPE.prod.html", "_foxes/constants/DTYPE.ptp.html", "_foxes/constants/DTYPE.put.html", "_foxes/constants/DTYPE.ravel.html", "_foxes/constants/DTYPE.real.html", "_foxes/constants/DTYPE.repeat.html", "_foxes/constants/DTYPE.reshape.html", "_foxes/constants/DTYPE.resize.html", "_foxes/constants/DTYPE.round.html", "_foxes/constants/DTYPE.searchsorted.html", "_foxes/constants/DTYPE.setfield.html", "_foxes/constants/DTYPE.setflags.html", "_foxes/constants/DTYPE.shape.html", "_foxes/constants/DTYPE.size.html", "_foxes/constants/DTYPE.sort.html", "_foxes/constants/DTYPE.squeeze.html", "_foxes/constants/DTYPE.std.html", "_foxes/constants/DTYPE.strides.html", "_foxes/constants/DTYPE.sum.html", "_foxes/constants/DTYPE.swapaxes.html", "_foxes/constants/DTYPE.take.html", "_foxes/constants/DTYPE.tobytes.html", "_foxes/constants/DTYPE.tofile.html", "_foxes/constants/DTYPE.tolist.html", "_foxes/constants/DTYPE.tostring.html", "_foxes/constants/DTYPE.trace.html", "_foxes/constants/DTYPE.transpose.html", "_foxes/constants/DTYPE.var.html", "_foxes/constants/DTYPE.view.html", "_foxes/constants/FARM.html", "_foxes/constants/GW.html", "_foxes/constants/ITYPE.html", "_foxes/constants/ITYPE.__abs__.html", "_foxes/constants/ITYPE.__add__.html", "_foxes/constants/ITYPE.__and__.html", "_foxes/constants/ITYPE.__bool__.html", "_foxes/constants/ITYPE.__class_getitem__.html", "_foxes/constants/ITYPE.__divmod__.html", "_foxes/constants/ITYPE.__eq__.html", "_foxes/constants/ITYPE.__float__.html", "_foxes/constants/ITYPE.__floordiv__.html", "_foxes/constants/ITYPE.__ge__.html", "_foxes/constants/ITYPE.__gt__.html", "_foxes/constants/ITYPE.__hash__.html", "_foxes/constants/ITYPE.__index__.html", "_foxes/constants/ITYPE.__int__.html", "_foxes/constants/ITYPE.__invert__.html", "_foxes/constants/ITYPE.__le__.html", "_foxes/constants/ITYPE.__lshift__.html", "_foxes/constants/ITYPE.__lt__.html", "_foxes/constants/ITYPE.__mod__.html", "_foxes/constants/ITYPE.__mul__.html", "_foxes/constants/ITYPE.__ne__.html", "_foxes/constants/ITYPE.__neg__.html", "_foxes/constants/ITYPE.__new__.html", "_foxes/constants/ITYPE.__or__.html", "_foxes/constants/ITYPE.__pos__.html", "_foxes/constants/ITYPE.__pow__.html", "_foxes/constants/ITYPE.__radd__.html", "_foxes/constants/ITYPE.__rand__.html", "_foxes/constants/ITYPE.__rdivmod__.html", "_foxes/constants/ITYPE.__repr__.html", "_foxes/constants/ITYPE.__rfloordiv__.html", "_foxes/constants/ITYPE.__rlshift__.html", "_foxes/constants/ITYPE.__rmod__.html", "_foxes/constants/ITYPE.__rmul__.html", "_foxes/constants/ITYPE.__ror__.html", "_foxes/constants/ITYPE.__rpow__.html", "_foxes/constants/ITYPE.__rrshift__.html", "_foxes/constants/ITYPE.__rshift__.html", "_foxes/constants/ITYPE.__rsub__.html", "_foxes/constants/ITYPE.__rtruediv__.html", "_foxes/constants/ITYPE.__rxor__.html", "_foxes/constants/ITYPE.__str__.html", "_foxes/constants/ITYPE.__sub__.html", "_foxes/constants/ITYPE.__truediv__.html", "_foxes/constants/ITYPE.__xor__.html", "_foxes/constants/ITYPE.bit_count.html", "_foxes/constants/ITYPE.denominator.html", "_foxes/constants/ITYPE.is_integer.html", "_foxes/constants/ITYPE.numerator.html", "_foxes/constants/KAPPA.html", "_foxes/constants/MW.html", "_foxes/constants/POINT.html", "_foxes/constants/POINTS.html", "_foxes/constants/POP.html", "_foxes/constants/P_UNITS.html", "_foxes/constants/RPOINT.html", "_foxes/constants/RPOINTS.html", "_foxes/constants/RWEIGHTS.html", "_foxes/constants/STATE.html", "_foxes/constants/STATES_SEL.html", "_foxes/constants/STATE_POINT.html", "_foxes/constants/STATE_SOURCE_TURBINE.html", "_foxes/constants/STATE_TURBINE.html", "_foxes/constants/TMODELS.html", "_foxes/constants/TMODEL_SELS.html", "_foxes/constants/TNAME.html", "_foxes/constants/TURBINE.html", "_foxes/constants/TW.html", "_foxes/constants/VALID.html", "_foxes/constants/VARS.html", "_foxes/constants/W.html", "_foxes/constants/XYH.html", "_foxes/constants/kW.html", "_foxes/variables/AMB_CAP.html", "_foxes/variables/AMB_CT.html", "_foxes/variables/AMB_P.html", "_foxes/variables/AMB_REWS.html", "_foxes/variables/AMB_REWS2.html", "_foxes/variables/AMB_REWS3.html", "_foxes/variables/AMB_RHO.html", "_foxes/variables/AMB_T.html", "_foxes/variables/AMB_TI.html", "_foxes/variables/AMB_WD.html", "_foxes/variables/AMB_WS.html", "_foxes/variables/AMB_YAW.html", "_foxes/variables/AMB_YAWM.html", "_foxes/variables/AMB_YLD.html", "_foxes/variables/CAP.html", "_foxes/variables/CT.html", "_foxes/variables/D.html", "_foxes/variables/EFF.html", "_foxes/variables/H.html", "_foxes/variables/K.html", "_foxes/variables/KB.html", "_foxes/variables/KTI.html", "_foxes/variables/MAX_P.html", "_foxes/variables/MOL.html", "_foxes/variables/ORDER.html", "_foxes/variables/P.html", "_foxes/variables/PA_ALPHA.html", "_foxes/variables/PA_BETA.html", "_foxes/variables/REWS.html", "_foxes/variables/REWS2.html", "_foxes/variables/REWS3.html", "_foxes/variables/RHO.html", "_foxes/variables/SHEAR.html", "_foxes/variables/T.html", "_foxes/variables/TI.html", "_foxes/variables/TXYH.html", "_foxes/variables/WD.html", "_foxes/variables/WEIGHT.html", "_foxes/variables/WS.html", "_foxes/variables/X.html", "_foxes/variables/Y.html", "_foxes/variables/YAW.html", "_foxes/variables/YAWM.html", "_foxes/variables/YLD.html", "_foxes/variables/Z0.html", "_foxes/variables/amb2var.html", "_foxes/variables/var2amb.html", "_input/farm_layout/add_from_csv.html", "_input/farm_layout/add_from_df.html", "_input/farm_layout/add_from_file.html", "_input/farm_layout/add_from_json.html", "_input/farm_layout/add_grid.html", "_input/farm_layout/add_row.html", "_input/states/FieldDataNC.html", "_input/states/FieldDataNC.__init__.html", "_input/states/FieldDataNC.calculate.html", "_input/states/FieldDataNC.index.html", "_input/states/FieldDataNC.initialize.html", "_input/states/FieldDataNC.output_point_vars.html", "_input/states/FieldDataNC.size.html", "_input/states/FieldDataNC.weights.html", "_input/states/MultiHeightStates.html", "_input/states/MultiHeightStates.RDICT.html", "_input/states/MultiHeightStates.__init__.html", "_input/states/MultiHeightStates.calculate.html", "_input/states/MultiHeightStates.finalize.html", "_input/states/MultiHeightStates.index.html", "_input/states/MultiHeightStates.initialize.html", "_input/states/MultiHeightStates.output_point_vars.html", "_input/states/MultiHeightStates.reset.html", "_input/states/MultiHeightStates.size.html", "_input/states/MultiHeightStates.weights.html", "_input/states/MultiHeightTimeseries.html", "_input/states/MultiHeightTimeseries.RDICT.html", "_input/states/ScanWS.html", "_input/states/ScanWS.__init__.html", "_input/states/ScanWS.calculate.html", "_input/states/ScanWS.initialize.html", "_input/states/ScanWS.output_point_vars.html", "_input/states/ScanWS.size.html", "_input/states/ScanWS.weights.html", "_input/states/SingleStateStates.html", "_input/states/SingleStateStates.__init__.html", "_input/states/SingleStateStates.calculate.html", "_input/states/SingleStateStates.initialize.html", "_input/states/SingleStateStates.output_point_vars.html", "_input/states/SingleStateStates.size.html", "_input/states/SingleStateStates.weights.html", "_input/states/StatesTable.html", "_input/states/StatesTable.RDICT.html", "_input/states/StatesTable.__init__.html", "_input/states/StatesTable.calculate.html", "_input/states/StatesTable.finalize.html", "_input/states/StatesTable.index.html", "_input/states/StatesTable.initialize.html", "_input/states/StatesTable.output_point_vars.html", "_input/states/StatesTable.reset.html", "_input/states/StatesTable.size.html", "_input/states/StatesTable.weights.html", "_input/states/Timeseries.html", "_input/states/Timeseries.RDICT.html", "_input/states/create_random_abl_states.html", "_input/windio/read_case.html", "_models/farm_controllers/BasicFarmController.html", "_models/farm_models/Turbine2FarmModel.html", "_models/farm_models/Turbine2FarmModel.__init__.html", "_models/farm_models/Turbine2FarmModel.__repr__.html", "_models/farm_models/Turbine2FarmModel.calculate.html", "_models/farm_models/Turbine2FarmModel.finalize.html", "_models/farm_models/Turbine2FarmModel.initialize.html", "_models/farm_models/Turbine2FarmModel.output_farm_vars.html", "_models/model_book/Dict.html", "_models/model_book/Dict.__getitem__.html", "_models/model_book/Dict.__init__.html", "_models/model_book/ModelBook.html", "_models/model_book/ModelBook.__getitem__.html", "_models/model_book/ModelBook.__init__.html", "_models/model_book/ModelBook.finalize.html", "_models/model_book/ModelBook.print_toc.html", "_models/partial_wakes/Mapped.html", "_models/partial_wakes/Mapped.__init__.html", "_models/partial_wakes/Mapped.contribute_to_wake_deltas.html", "_models/partial_wakes/Mapped.evaluate_results.html", "_models/partial_wakes/Mapped.finalize.html", "_models/partial_wakes/Mapped.initialize.html", "_models/partial_wakes/Mapped.keep.html", "_models/partial_wakes/Mapped.new_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.html", "_models/partial_wakes/PartialAxiwake.__init__.html", "_models/partial_wakes/PartialAxiwake.__repr__.html", "_models/partial_wakes/PartialAxiwake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.evaluate_results.html", "_models/partial_wakes/PartialAxiwake.finalize.html", "_models/partial_wakes/PartialAxiwake.initialize.html", "_models/partial_wakes/PartialAxiwake.keep.html", "_models/partial_wakes/PartialAxiwake.new_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.html", "_models/partial_wakes/PartialDistSlicedWake.__init__.html", "_models/partial_wakes/PartialDistSlicedWake.__repr__.html", "_models/partial_wakes/PartialDistSlicedWake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.evaluate_results.html", "_models/partial_wakes/PartialDistSlicedWake.finalize.html", "_models/partial_wakes/PartialDistSlicedWake.initialize.html", "_models/partial_wakes/PartialDistSlicedWake.keep.html", "_models/partial_wakes/PartialDistSlicedWake.new_wake_deltas.html", "_models/partial_wakes/PartialGrid.html", "_models/partial_wakes/PartialGrid.__init__.html", "_models/partial_wakes/PartialGrid.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.html", "_models/partial_wakes/PartialTopHat.__init__.html", "_models/partial_wakes/PartialTopHat.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.evaluate_results.html", "_models/partial_wakes/PartialTopHat.finalize.html", "_models/partial_wakes/PartialTopHat.initialize.html", "_models/partial_wakes/PartialTopHat.keep.html", "_models/partial_wakes/PartialTopHat.new_wake_deltas.html", "_models/partial_wakes/RotorPoints.html", "_models/partial_wakes/RotorPoints.__init__.html", "_models/partial_wakes/RotorPoints.contribute_to_wake_deltas.html", "_models/partial_wakes/RotorPoints.evaluate_results.html", "_models/partial_wakes/RotorPoints.get_wake_points.html", "_models/partial_wakes/RotorPoints.new_wake_deltas.html", "_models/point_models/SetUniformData.html", "_models/point_models/SetUniformData.__init__.html", "_models/point_models/SetUniformData.calculate.html", "_models/point_models/SetUniformData.initialize.html", "_models/point_models/SetUniformData.output_point_vars.html", "_models/point_models/TKE2TI.html", "_models/point_models/TKE2TI.calculate.html", "_models/point_models/TKE2TI.output_point_vars.html", "_models/point_models/WakeDeltas.html", "_models/point_models/WakeDeltas.__init__.html", "_models/point_models/WakeDeltas.calculate.html", "_models/point_models/WakeDeltas.output_point_vars.html", "_models/rotor_models/CentreRotor.html", "_models/rotor_models/CentreRotor.design_points.html", "_models/rotor_models/CentreRotor.eval_rpoint_results.html", "_models/rotor_models/CentreRotor.get_rotor_points.html", "_models/rotor_models/CentreRotor.n_rotor_points.html", "_models/rotor_models/CentreRotor.rotor_point_weights.html", "_models/rotor_models/GridRotor.html", "_models/rotor_models/GridRotor.__init__.html", "_models/rotor_models/GridRotor.__repr__.html", "_models/rotor_models/GridRotor.design_points.html", "_models/rotor_models/GridRotor.initialize.html", "_models/rotor_models/GridRotor.n_rotor_points.html", "_models/rotor_models/GridRotor.rotor_point_weights.html", "_models/rotor_models/LevelRotor.html", "_models/rotor_models/LevelRotor.__init__.html", "_models/rotor_models/LevelRotor.__repr__.html", "_models/rotor_models/LevelRotor.design_points.html", "_models/rotor_models/LevelRotor.initialize.html", "_models/rotor_models/LevelRotor.n_rotor_points.html", "_models/rotor_models/LevelRotor.rotor_point_weights.html", "_models/turbine_models/Calculator.html", "_models/turbine_models/Calculator.__init__.html", "_models/turbine_models/Calculator.calculate.html", "_models/turbine_models/Calculator.output_farm_vars.html", "_models/turbine_models/LookupTable.html", "_models/turbine_models/LookupTable.__init__.html", "_models/turbine_models/LookupTable.calculate.html", "_models/turbine_models/LookupTable.initialize.html", "_models/turbine_models/LookupTable.output_farm_vars.html", "_models/turbine_models/PowerMask.html", "_models/turbine_models/PowerMask.__init__.html", "_models/turbine_models/PowerMask.calculate.html", "_models/turbine_models/PowerMask.initialize.html", "_models/turbine_models/PowerMask.output_farm_vars.html", "_models/turbine_models/PowerMask.update_P_ct.html", "_models/turbine_models/RotorCentreCalc.html", "_models/turbine_models/RotorCentreCalc.__init__.html", "_models/turbine_models/RotorCentreCalc.calculate.html", "_models/turbine_models/RotorCentreCalc.finalize.html", "_models/turbine_models/RotorCentreCalc.initialize.html", "_models/turbine_models/RotorCentreCalc.output_farm_vars.html", "_models/turbine_models/SectorManagement.html", "_models/turbine_models/SectorManagement.__init__.html", "_models/turbine_models/SectorManagement.calculate.html", "_models/turbine_models/SectorManagement.initialize.html", "_models/turbine_models/SectorManagement.output_farm_vars.html", "_models/turbine_models/SetFarmVars.html", "_models/turbine_models/SetFarmVars.__init__.html", "_models/turbine_models/SetFarmVars.add_var.html", "_models/turbine_models/SetFarmVars.calculate.html", "_models/turbine_models/SetFarmVars.initialize.html", "_models/turbine_models/SetFarmVars.output_farm_vars.html", "_models/turbine_models/SetFarmVars.reset.html", "_models/turbine_models/SetXYHD.html", "_models/turbine_models/SetXYHD.__init__.html", "_models/turbine_models/SetXYHD.calculate.html", "_models/turbine_models/SetXYHD.output_farm_vars.html", "_models/turbine_models/TableFactors.html", "_models/turbine_models/TableFactors.__init__.html", "_models/turbine_models/TableFactors.calculate.html", "_models/turbine_models/TableFactors.initialize.html", "_models/turbine_models/TableFactors.output_farm_vars.html", "_models/turbine_models/Thrust2Ct.html", "_models/turbine_models/Thrust2Ct.__init__.html", "_models/turbine_models/Thrust2Ct.calculate.html", "_models/turbine_models/Thrust2Ct.output_farm_vars.html", "_models/turbine_models/YAW2YAWM.html", "_models/turbine_models/YAW2YAWM.calculate.html", "_models/turbine_models/YAW2YAWM.output_farm_vars.html", "_models/turbine_models/YAWM2YAW.html", "_models/turbine_models/YAWM2YAW.calculate.html", "_models/turbine_models/YAWM2YAW.output_farm_vars.html", "_models/turbine_models/kTI.html", "_models/turbine_models/kTI.__init__.html", "_models/turbine_models/kTI.__repr__.html", "_models/turbine_models/kTI.calculate.html", "_models/turbine_models/kTI.output_farm_vars.html", "_models/turbine_types/CpCtFile.html", "_models/turbine_types/CpCtFile.__init__.html", "_models/turbine_types/CpCtFromTwo.html", "_models/turbine_types/CpCtFromTwo.__init__.html", "_models/turbine_types/NullType.html", "_models/turbine_types/NullType.calculate.html", "_models/turbine_types/NullType.output_farm_vars.html", "_models/turbine_types/PCtFile.html", "_models/turbine_types/PCtFile.__init__.html", "_models/turbine_types/PCtFile.calculate.html", "_models/turbine_types/PCtFile.finalize.html", "_models/turbine_types/PCtFile.initialize.html", "_models/turbine_types/PCtFile.output_farm_vars.html", "_models/turbine_types/PCtFromTwo.html", "_models/turbine_types/PCtFromTwo.__init__.html", "_models/turbine_types/PCtFromTwo.calculate.html", "_models/turbine_types/PCtFromTwo.finalize.html", "_models/turbine_types/PCtFromTwo.initialize.html", "_models/turbine_types/PCtFromTwo.output_farm_vars.html", "_models/turbine_types/WsRho2PCtFromTwo.html", "_models/turbine_types/WsRho2PCtFromTwo.__init__.html", "_models/turbine_types/WsRho2PCtFromTwo.calculate.html", "_models/turbine_types/WsRho2PCtFromTwo.finalize.html", "_models/turbine_types/WsRho2PCtFromTwo.initialize.html", "_models/turbine_types/WsRho2PCtFromTwo.output_farm_vars.html", "_models/turbine_types/WsTI2PCtFromTwo.html", "_models/turbine_types/WsTI2PCtFromTwo.__init__.html", "_models/turbine_types/WsTI2PCtFromTwo.calculate.html", "_models/turbine_types/WsTI2PCtFromTwo.finalize.html", "_models/turbine_types/WsTI2PCtFromTwo.initialize.html", "_models/turbine_types/WsTI2PCtFromTwo.output_farm_vars.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.calculate.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogStableWsProfile.html", "_models/vertical_profiles/ABLLogStableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogStableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogWsProfile.html", "_models/vertical_profiles/ABLLogWsProfile.calculate.html", "_models/vertical_profiles/ABLLogWsProfile.input_vars.html", "_models/vertical_profiles/DataProfile.html", "_models/vertical_profiles/DataProfile.__init__.html", "_models/vertical_profiles/DataProfile.calculate.html", "_models/vertical_profiles/DataProfile.input_vars.html", "_models/vertical_profiles/ShearedProfile.html", "_models/vertical_profiles/ShearedProfile.calculate.html", "_models/vertical_profiles/ShearedProfile.input_vars.html", "_models/vertical_profiles/UniformProfile.html", "_models/vertical_profiles/UniformProfile.__init__.html", "_models/vertical_profiles/UniformProfile.calculate.html", "_models/vertical_profiles/UniformProfile.input_vars.html", "_models/wake_frames/FarmOrder.html", "_models/wake_frames/FarmOrder.__init__.html", "_models/wake_frames/FarmOrder.calc_order.html", "_models/wake_frames/FarmOrder.finalize.html", "_models/wake_frames/FarmOrder.get_centreline_points.html", "_models/wake_frames/FarmOrder.get_wake_coos.html", "_models/wake_frames/FarmOrder.initialize.html", "_models/wake_frames/RotorWD.html", "_models/wake_frames/RotorWD.__init__.html", "_models/wake_frames/RotorWD.calc_order.html", "_models/wake_frames/RotorWD.get_centreline_points.html", "_models/wake_frames/RotorWD.get_wake_coos.html", "_models/wake_frames/Streamlines.html", "_models/wake_frames/Streamlines.__init__.html", "_models/wake_frames/Streamlines.__repr__.html", "_models/wake_frames/Streamlines.calc_order.html", "_models/wake_frames/Streamlines.get_centreline_points.html", "_models/wake_frames/Streamlines.get_wake_coos.html", "_models/wake_frames/Streamlines.initialize.html", "_models/wake_frames/Timelines.html", "_models/wake_frames/Timelines.__init__.html", "_models/wake_frames/Timelines.calc_order.html", "_models/wake_frames/Timelines.get_centreline_points.html", "_models/wake_frames/Timelines.get_wake_coos.html", "_models/wake_frames/Timelines.initialize.html", "_models/wake_frames/YawedWakes.html", "_models/wake_frames/YawedWakes.__init__.html", "_models/wake_frames/YawedWakes.calc_order.html", "_models/wake_frames/YawedWakes.finalize.html", "_models/wake_frames/YawedWakes.get_centreline_points.html", "_models/wake_frames/YawedWakes.get_wake_coos.html", "_models/wake_frames/YawedWakes.initialize.html", "_models/wake_models/AxisymmetricWakeModel.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.html", "_models/wake_models/DistSlicedWakeModel.__init__.html", "_models/wake_models/DistSlicedWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.contribute_to_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.finalize.html", "_models/wake_models/DistSlicedWakeModel.finalize_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.initialize.html", "_models/wake_models/DistSlicedWakeModel.keep.html", "_models/wake_models/GaussianWakeModel.html", "_models/wake_models/GaussianWakeModel.calc_amplitude_sigma_spsel.html", "_models/wake_models/GaussianWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/TopHatWakeModel.html", "_models/wake_models/TopHatWakeModel.__init__.html", "_models/wake_models/TopHatWakeModel.calc_centreline_wake_deltas.html", "_models/wake_models/TopHatWakeModel.calc_wake_radius.html", "_models/wake_models/TopHatWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/ti/CrespoHernandezTIWake.html", "_models/wake_models/ti/CrespoHernandezTIWake.__init__.html", "_models/wake_models/ti/CrespoHernandezTIWake.__repr__.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_wake_radius.html", "_models/wake_models/ti/CrespoHernandezTIWake.init_wake_deltas.html", "_models/wake_models/ti/IECTIWake.html", "_models/wake_models/ti/IECTIWake.__init__.html", "_models/wake_models/ti/IECTIWake.__repr__.html", "_models/wake_models/ti/IECTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/IECTIWake.calc_wake_radius.html", "_models/wake_models/ti/IECTIWake.init_wake_deltas.html", "_models/wake_models/wind/BastankhahWake.html", "_models/wake_models/wind/BastankhahWake.__init__.html", "_models/wake_models/wind/BastankhahWake.__repr__.html", "_models/wake_models/wind/BastankhahWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/BastankhahWake.init_wake_deltas.html", "_models/wake_models/wind/JensenWake.html", "_models/wake_models/wind/JensenWake.__init__.html", "_models/wake_models/wind/JensenWake.__repr__.html", "_models/wake_models/wind/JensenWake.calc_centreline_wake_deltas.html", "_models/wake_models/wind/JensenWake.calc_wake_radius.html", "_models/wake_models/wind/JensenWake.init_wake_deltas.html", "_models/wake_models/wind/PorteAgelModel.html", "_models/wake_models/wind/PorteAgelModel.AMPL_FAR.html", "_models/wake_models/wind/PorteAgelModel.AMPL_NEAR.html", "_models/wake_models/wind/PorteAgelModel.CHECK.html", "_models/wake_models/wind/PorteAgelModel.DELTA_FAR.html", "_models/wake_models/wind/PorteAgelModel.DELTA_NEAR.html", "_models/wake_models/wind/PorteAgelModel.MDATA_KEY.html", "_models/wake_models/wind/PorteAgelModel.NEAR.html", "_models/wake_models/wind/PorteAgelModel.PARS.html", "_models/wake_models/wind/PorteAgelModel.R_PC.html", "_models/wake_models/wind/PorteAgelModel.R_PC_S.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Y_FAR.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Z_FAR.html", "_models/wake_models/wind/PorteAgelModel.SP_SEL.html", "_models/wake_models/wind/PorteAgelModel.X0.html", "_models/wake_models/wind/PorteAgelModel.__init__.html", "_models/wake_models/wind/PorteAgelModel.calc_data.html", "_models/wake_models/wind/PorteAgelModel.clean.html", "_models/wake_models/wind/PorteAgelModel.get_data.html", "_models/wake_models/wind/PorteAgelModel.has_data.html", "_models/wake_models/wind/PorteAgelModel.pars.html", "_models/wake_models/wind/PorteAgelWake.html", "_models/wake_models/wind/PorteAgelWake.__init__.html", "_models/wake_models/wind/PorteAgelWake.__repr__.html", "_models/wake_models/wind/PorteAgelWake.calc_wakes_spsel_x_yz.html", "_models/wake_models/wind/PorteAgelWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWake.html", "_models/wake_models/wind/TurbOParkWake.__init__.html", "_models/wake_models/wind/TurbOParkWake.__repr__.html", "_models/wake_models/wind/TurbOParkWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWakeIX.html", "_models/wake_models/wind/TurbOParkWakeIX.__init__.html", "_models/wake_models/wind/TurbOParkWakeIX.__repr__.html", "_models/wake_models/wind/TurbOParkWakeIX.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWakeIX.finalize.html", "_models/wake_models/wind/TurbOParkWakeIX.init_wake_deltas.html", "_models/wake_superpositions/LinearSuperposition.html", "_models/wake_superpositions/LinearSuperposition.__init__.html", "_models/wake_superpositions/LinearSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/LinearSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/LinearSuperposition.input_farm_vars.html", "_models/wake_superpositions/MaxSuperposition.html", "_models/wake_superpositions/MaxSuperposition.__init__.html", "_models/wake_superpositions/MaxSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/MaxSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/MaxSuperposition.initialize.html", "_models/wake_superpositions/MaxSuperposition.input_farm_vars.html", "_models/wake_superpositions/ProductSuperposition.html", "_models/wake_superpositions/ProductSuperposition.__init__.html", "_models/wake_superpositions/ProductSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/ProductSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.html", "_models/wake_superpositions/QuadraticSuperposition.__init__.html", "_models/wake_superpositions/QuadraticSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/QuadraticSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.initialize.html", "_models/wake_superpositions/QuadraticSuperposition.input_farm_vars.html", "_models/wake_superpositions/TISuperposition.html", "_models/wake_superpositions/TISuperposition.__init__.html", "_models/wake_superpositions/TISuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/TISuperposition.calc_wakes_plus_wake.html", "_output/Animator.html", "_output/Animator.__init__.html", "_output/Animator.add_generator.html", "_output/Animator.animate.html", "_output/Animator.generators.html", "_output/FarmLayoutOutput.html", "_output/FarmLayoutOutput.__init__.html", "_output/FarmLayoutOutput.get_figure.html", "_output/FarmLayoutOutput.get_layout_data.html", "_output/FarmLayoutOutput.get_layout_dict.html", "_output/FarmLayoutOutput.write_csv.html", "_output/FarmLayoutOutput.write_json.html", "_output/FarmLayoutOutput.write_plot.html", "_output/FarmLayoutOutput.write_xyh.html", "_output/FarmResultsEval.html", "_output/FarmResultsEval.__init__.html", "_output/FarmResultsEval.add_capacity.html", "_output/FarmResultsEval.add_efficiency.html", "_output/FarmResultsEval.calc_farm_efficiency.html", "_output/FarmResultsEval.calc_farm_mean.html", "_output/FarmResultsEval.calc_farm_sum.html", "_output/FarmResultsEval.calc_farm_yield.html", "_output/FarmResultsEval.calc_mean_farm_power.html", "_output/FarmResultsEval.calc_states_mean.html", "_output/FarmResultsEval.calc_states_std.html", "_output/FarmResultsEval.calc_states_sum.html", "_output/FarmResultsEval.calc_turbine_mean.html", "_output/FarmResultsEval.calc_turbine_sum.html", "_output/FarmResultsEval.calc_turbine_yield.html", "_output/FarmResultsEval.gen_stdata.html", "_output/FarmResultsEval.reduce_all.html", "_output/FarmResultsEval.reduce_states.html", "_output/FarmResultsEval.reduce_turbines.html", "_output/FarmResultsEval.weinsum.html", "_output/FlowPlots2D.html", "_output/FlowPlots2D.__init__.html", "_output/FlowPlots2D.gen_states_fig_xy.html", "_output/FlowPlots2D.gen_states_fig_xz.html", "_output/FlowPlots2D.gen_states_fig_yz.html", "_output/FlowPlots2D.get_mean_fig_xy.html", "_output/FlowPlots2D.get_mean_fig_xz.html", "_output/FlowPlots2D.get_mean_fig_yz.html", "_output/Output.html", "_output/Output.new.html", "_output/Output.print_models.html", "_output/Output.write.html", "_output/ResultsWriter.html", "_output/ResultsWriter.__init__.html", "_output/ResultsWriter.write_csv.html", "_output/RosePlotOutput.html", "_output/RosePlotOutput.__init__.html", "_output/RosePlotOutput.get_data.html", "_output/RosePlotOutput.get_data_info.html", "_output/RosePlotOutput.get_figure.html", "_output/RosePlotOutput.write_figure.html", "_output/StateTurbineMap.html", "_output/StateTurbineMap.__init__.html", "_output/StateTurbineMap.plot_map.html", "_output/StatesRosePlotOutput.html", "_output/StatesRosePlotOutput.__init__.html", "_output/TurbineTypeCurves.html", "_output/TurbineTypeCurves.__init__.html", "_output/TurbineTypeCurves.plot_curves.html", "_utils/DataBook.html", "_utils/DataBook.__init__.html", "_utils/DataBook.add_data_package.html", "_utils/DataBook.add_data_package_file.html", "_utils/DataBook.add_file.html", "_utils/DataBook.add_files.html", "_utils/DataBook.get_file_path.html", "_utils/DataBook.toc.html", "_utils/PandasFileHelper.html", "_utils/PandasFileHelper.DATA_FILE_FORMATS.html", "_utils/PandasFileHelper.DEFAULT_FORMAT_DICT.html", "_utils/PandasFileHelper.DEFAULT_READING_PARAMETERS.html", "_utils/PandasFileHelper.DEFAULT_WRITING_PARAMETERS.html", "_utils/PandasFileHelper.read_file.html", "_utils/PandasFileHelper.write_file.html", "_utils/abl/neutral/calc_ws.html", "_utils/abl/neutral/logz.html", "_utils/abl/neutral/ustar.html", "_utils/abl/sheared/calc_ws.html", "_utils/abl/stable/calc_ws.html", "_utils/abl/stable/lgz.html", "_utils/abl/stable/logz.html", "_utils/abl/stable/psi.html", "_utils/abl/stable/ustar.html", "_utils/abl/unstable/calc_ws.html", "_utils/abl/unstable/logz.html", "_utils/abl/unstable/psi.html", "_utils/abl/unstable/ustar.html", "_utils/all_subclasses.html", "_utils/cubic_roots.html", "_utils/delta_wd.html", "_utils/geom2d/AreaGeometry.html", "_utils/geom2d/AreaGeometry.add_to_figure.html", "_utils/geom2d/AreaGeometry.inverse.html", "_utils/geom2d/AreaGeometry.p_max.html", "_utils/geom2d/AreaGeometry.p_min.html", "_utils/geom2d/AreaGeometry.points_distance.html", "_utils/geom2d/AreaGeometry.points_inside.html", "_utils/geom2d/AreaIntersection.html", "_utils/geom2d/AreaIntersection.__new__.html", "_utils/geom2d/AreaUnion.html", "_utils/geom2d/AreaUnion.__init__.html", "_utils/geom2d/AreaUnion.add_to_figure.html", "_utils/geom2d/AreaUnion.inverse.html", "_utils/geom2d/AreaUnion.p_max.html", "_utils/geom2d/AreaUnion.p_min.html", "_utils/geom2d/AreaUnion.points_distance.html", "_utils/geom2d/AreaUnion.points_inside.html", "_utils/geom2d/Circle.html", "_utils/geom2d/Circle.__init__.html", "_utils/geom2d/Circle.add_to_figure.html", "_utils/geom2d/Circle.p_max.html", "_utils/geom2d/Circle.p_min.html", "_utils/geom2d/Circle.points_distance.html", "_utils/geom2d/Circle.points_inside.html", "_utils/geom2d/ClosedPolygon.html", "_utils/geom2d/ClosedPolygon.__init__.html", "_utils/geom2d/ClosedPolygon.add_to_figure.html", "_utils/geom2d/ClosedPolygon.p_max.html", "_utils/geom2d/ClosedPolygon.p_min.html", "_utils/geom2d/ClosedPolygon.points_distance.html", "_utils/geom2d/ClosedPolygon.points_inside.html", "_utils/geom2d/HalfPlane.html", "_utils/geom2d/HalfPlane.__init__.html", "_utils/geom2d/HalfPlane.add_to_figure.html", "_utils/geom2d/HalfPlane.inverse.html", "_utils/geom2d/HalfPlane.p_max.html", "_utils/geom2d/HalfPlane.p_min.html", "_utils/geom2d/HalfPlane.points_distance.html", "_utils/geom2d/HalfPlane.points_inside.html", "_utils/geom2d/InvertedAreaGeometry.html", "_utils/geom2d/InvertedAreaGeometry.__init__.html", "_utils/geom2d/InvertedAreaGeometry.add_to_figure.html", "_utils/geom2d/InvertedAreaGeometry.inverse.html", "_utils/geom2d/InvertedAreaGeometry.p_max.html", "_utils/geom2d/InvertedAreaGeometry.p_min.html", "_utils/geom2d/InvertedAreaGeometry.points_distance.html", "_utils/geom2d/InvertedAreaGeometry.points_inside.html", "_utils/opt/constraints/AreaGeometryConstraint.html", "_utils/opt/constraints/AreaGeometryConstraint.__init__.html", "_utils/opt/constraints/AreaGeometryConstraint.__str__.html", "_utils/opt/constraints/AreaGeometryConstraint.ana_deriv.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_population.html", "_utils/opt/constraints/AreaGeometryConstraint.component_names.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_population.html", "_utils/opt/constraints/AreaGeometryConstraint.initialize.html", "_utils/opt/constraints/AreaGeometryConstraint.initialized.html", "_utils/opt/constraints/AreaGeometryConstraint.n_components.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_float.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_int.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_float.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_int.html", "_utils/opt/constraints/FarmBoundaryConstraint.html", "_utils/opt/constraints/FarmBoundaryConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.html", "_utils/opt/constraints/MinDistConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.calc_individual.html", "_utils/opt/constraints/MinDistConstraint.calc_population.html", "_utils/opt/constraints/MinDistConstraint.initialize.html", "_utils/opt/constraints/MinDistConstraint.n_components.html", "_utils/opt/constraints/MinDistConstraint.vardeps_float.html", "_utils/opt/core/FarmConstraint.html", "_utils/opt/core/FarmConstraint.__init__.html", "_utils/opt/core/FarmConstraint.add_to_layout_figure.html", "_utils/opt/core/FarmConstraint.calc_individual.html", "_utils/opt/core/FarmConstraint.calc_population.html", "_utils/opt/core/FarmConstraint.farm.html", "_utils/opt/core/FarmConstraint.n_components.html", "_utils/opt/core/FarmConstraint.n_sel_turbines.html", "_utils/opt/core/FarmConstraint.print_models.html", "_utils/opt/core/FarmConstraint.sel_turbines.html", "_utils/opt/core/FarmConstraint.vardeps_float.html", "_utils/opt/core/FarmObjective.html", "_utils/opt/core/FarmObjective.__init__.html", "_utils/opt/core/FarmObjective.add_to_layout_figure.html", "_utils/opt/core/FarmObjective.farm.html", "_utils/opt/core/FarmObjective.n_sel_turbines.html", "_utils/opt/core/FarmObjective.print_models.html", "_utils/opt/core/FarmObjective.sel_turbines.html", "_utils/opt/core/FarmOptProblem.html", "_utils/opt/core/FarmOptProblem.INT_INF.html", "_utils/opt/core/FarmOptProblem.__init__.html", "_utils/opt/core/FarmOptProblem.add_constraint.html", "_utils/opt/core/FarmOptProblem.add_objective.html", "_utils/opt/core/FarmOptProblem.add_to_layout_figure.html", "_utils/opt/core/FarmOptProblem.all_turbines.html", "_utils/opt/core/FarmOptProblem.apply_individual.html", "_utils/opt/core/FarmOptProblem.apply_population.html", "_utils/opt/core/FarmOptProblem.calc_gradients.html", "_utils/opt/core/FarmOptProblem.check_constraints_individual.html", "_utils/opt/core/FarmOptProblem.check_constraints_population.html", "_utils/opt/core/FarmOptProblem.constraints_tol.html", "_utils/opt/core/FarmOptProblem.counter.html", "_utils/opt/core/FarmOptProblem.evaluate_individual.html", "_utils/opt/core/FarmOptProblem.evaluate_population.html", "_utils/opt/core/FarmOptProblem.farm.html", "_utils/opt/core/FarmOptProblem.finalize_individual.html", "_utils/opt/core/FarmOptProblem.finalize_population.html", "_utils/opt/core/FarmOptProblem.get_gradients.html", "_utils/opt/core/FarmOptProblem.initial_values_float.html", "_utils/opt/core/FarmOptProblem.initial_values_int.html", "_utils/opt/core/FarmOptProblem.initialize.html", "_utils/opt/core/FarmOptProblem.max_values_constraints.html", "_utils/opt/core/FarmOptProblem.max_values_float.html", "_utils/opt/core/FarmOptProblem.max_values_int.html", "_utils/opt/core/FarmOptProblem.maximize_objs.html", "_utils/opt/core/FarmOptProblem.min_values_constraints.html", "_utils/opt/core/FarmOptProblem.min_values_float.html", "_utils/opt/core/FarmOptProblem.min_values_int.html", "_utils/opt/core/FarmOptProblem.n_constraints.html", "_utils/opt/core/FarmOptProblem.n_objectives.html", "_utils/opt/core/FarmOptProblem.n_sel_turbines.html", "_utils/opt/core/FarmOptProblem.n_vars_float.html", "_utils/opt/core/FarmOptProblem.n_vars_int.html", "_utils/opt/core/FarmOptProblem.parse_tvar.html", "_utils/opt/core/FarmOptProblem.prob_res_einsum_individual.html", "_utils/opt/core/FarmOptProblem.prob_res_einsum_population.html", "_utils/opt/core/FarmOptProblem.sel_turbines.html", "_utils/opt/core/FarmOptProblem.tvar.html", "_utils/opt/core/FarmOptProblem.update_problem_individual.html", "_utils/opt/core/FarmOptProblem.update_problem_population.html", "_utils/opt/core/FarmOptProblem.var_names_float.html", "_utils/opt/core/FarmOptProblem.var_names_int.html", "_utils/opt/core/FarmVarsProblem.html", "_utils/opt/core/FarmVarsProblem.initialize.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_individual.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_population.html", "_utils/opt/core/FarmVarsProblem.update_problem_individual.html", "_utils/opt/core/FarmVarsProblem.update_problem_population.html", "_utils/opt/core/PopStates.html", "_utils/opt/core/PopStates.__init__.html", "_utils/opt/core/PopStates.calculate.html", "_utils/opt/core/PopStates.initialize.html", "_utils/opt/core/PopStates.output_point_vars.html", "_utils/opt/core/PopStates.size.html", "_utils/opt/core/PopStates.weights.html", "_utils/opt/objectives/FarmVarObjective.html", "_utils/opt/objectives/FarmVarObjective.__init__.html", "_utils/opt/objectives/FarmVarObjective.calc_individual.html", "_utils/opt/objectives/FarmVarObjective.calc_population.html", "_utils/opt/objectives/FarmVarObjective.finalize_individual.html", "_utils/opt/objectives/FarmVarObjective.initialize.html", "_utils/opt/objectives/FarmVarObjective.maximize.html", "_utils/opt/objectives/FarmVarObjective.n_components.html", "_utils/opt/objectives/FarmVarObjective.vardeps_float.html", "_utils/opt/objectives/MaxFarmPower.html", "_utils/opt/objectives/MaxFarmPower.__init__.html", "_utils/opt/objectives/MaxNTurbines.html", "_utils/opt/objectives/MaxNTurbines.__init__.html", "_utils/opt/objectives/MaxNTurbines.calc_individual.html", "_utils/opt/objectives/MaxNTurbines.calc_population.html", "_utils/opt/objectives/MaxNTurbines.maximize.html", "_utils/opt/objectives/MaxNTurbines.n_components.html", "_utils/opt/objectives/MinimalMaxTI.html", "_utils/opt/objectives/MinimalMaxTI.__init__.html", "_utils/opt/problems/OptFarmVars.html", "_utils/opt/problems/OptFarmVars.__init__.html", "_utils/opt/problems/OptFarmVars.add_var.html", "_utils/opt/problems/OptFarmVars.initial_values_float.html", "_utils/opt/problems/OptFarmVars.initial_values_int.html", "_utils/opt/problems/OptFarmVars.initialize.html", "_utils/opt/problems/OptFarmVars.max_values_float.html", "_utils/opt/problems/OptFarmVars.max_values_int.html", "_utils/opt/problems/OptFarmVars.min_values_float.html", "_utils/opt/problems/OptFarmVars.min_values_int.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_individual.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_population.html", "_utils/opt/problems/OptFarmVars.var_names_float.html", "_utils/opt/problems/OptFarmVars.var_names_int.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.get_bounds.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintscdist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivescdist.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.var_names_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_int.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_int.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.ANGLE.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.var_names_float.html", "_utils/read_shp.html", "_utils/read_shp_polygons.html", "_utils/runners/DaskRunner.html", "_utils/runners/DaskRunner.__init__.html", "_utils/runners/DaskRunner.finalize.html", "_utils/runners/DaskRunner.initialize.html", "_utils/runners/DaskRunner.is_distributed.html", "_utils/runners/DaskRunner.print.html", "_utils/runners/DaskRunner.run.html", "_utils/runners/DefaultRunner.html", "_utils/runners/DefaultRunner.run.html", "_utils/runners/Runner.html", "_utils/runners/Runner.__init__.html", "_utils/runners/Runner.finalize.html", "_utils/runners/Runner.initialize.html", "_utils/runners/Runner.initialized.html", "_utils/runners/Runner.run.html", "_utils/show_plotly_fig.html", "_utils/shp2csv.html", "_utils/shp2geom2d.html", "_utils/two_circles/area.html", "_utils/two_circles/calc_area.html", "_utils/uv2wd.html", "_utils/wd2uv.html", "_utils/wd2wdvec.html", "_utils/wdvec2wd.html", "api.html", "api_algorithms.html", "api_algorithms_downwind.html", "api_algorithms_iterative.html", "api_constants.html", "api_core.html", "api_foxes.html", "api_input.html", "api_models.html", "api_opt.html", "api_opt_problems.html", "api_opt_problems_geom.html", "api_output.html", "api_utils.html", "api_utils_abl.html", "api_variables.html", "api_wake_models.html", "citation.html", "examples.html", "history.html", "index.html", "installation.html", "notebooks/data.html", "notebooks/heterogeneous.html", "notebooks/layout_opt.html", "notebooks/model_book.html", "notebooks/multi_height.html", "notebooks/overview.html", "notebooks/power_mask.html", "notebooks/sector_man.html", "notebooks/single_row.html", "notebooks/timelines.html", "notebooks/timeseries.html", "notebooks/wind_rose.html", "notebooks/yawed_wake.html"]})