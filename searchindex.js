Search.setIndex({"titles": ["foxes.core.Algorithm", "foxes.core.Algorithm.__init__", "foxes.core.Algorithm.finalize", "foxes.core.Algorithm.finalize_model", "foxes.core.Algorithm.get_models_data", "foxes.core.Algorithm.idata_mem", "foxes.core.Algorithm.initialize", "foxes.core.Algorithm.new", "foxes.core.Algorithm.new_point_data", "foxes.core.Algorithm.print", "foxes.core.Algorithm.update_idata", "foxes.core.Algorithm.update_n_turbines", "foxes.core.Data", "foxes.core.Data.__init__", "foxes.core.DataCalcModel", "foxes.core.DataCalcModel.calculate", "foxes.core.DataCalcModel.run_calculation", "foxes.core.ExtendedStates", "foxes.core.ExtendedStates.__init__", "foxes.core.ExtendedStates.append", "foxes.core.ExtendedStates.calculate", "foxes.core.ExtendedStates.finalize", "foxes.core.ExtendedStates.index", "foxes.core.ExtendedStates.initialize", "foxes.core.ExtendedStates.output_point_vars", "foxes.core.ExtendedStates.size", "foxes.core.ExtendedStates.weights", "foxes.core.FarmController", "foxes.core.FarmController.__init__", "foxes.core.FarmController.calculate", "foxes.core.FarmController.collect_models", "foxes.core.FarmController.finalize", "foxes.core.FarmController.initialize", "foxes.core.FarmController.output_farm_vars", "foxes.core.FarmController.set_pars", "foxes.core.FarmDataModel", "foxes.core.FarmDataModel.__init__", "foxes.core.FarmDataModel.calculate", "foxes.core.FarmDataModel.output_farm_vars", "foxes.core.FarmDataModel.run_calculation", "foxes.core.FarmDataModelList", "foxes.core.FarmDataModelList.__init__", "foxes.core.FarmDataModelList.append", "foxes.core.FarmDataModelList.calculate", "foxes.core.FarmDataModelList.finalize", "foxes.core.FarmDataModelList.initialize", "foxes.core.FarmDataModelList.output_farm_vars", "foxes.core.FarmModel", "foxes.core.Model", "foxes.core.Model.__init__", "foxes.core.Model.__repr__", "foxes.core.Model.finalize", "foxes.core.Model.get_data", "foxes.core.Model.initialize", "foxes.core.Model.initialized", "foxes.core.Model.model_id", "foxes.core.Model.var", "foxes.core.PartialWakesModel", "foxes.core.PartialWakesModel.__init__", "foxes.core.PartialWakesModel.contribute_to_wake_deltas", "foxes.core.PartialWakesModel.evaluate_results", "foxes.core.PartialWakesModel.initialize", "foxes.core.PartialWakesModel.new", "foxes.core.PartialWakesModel.new_wake_deltas", "foxes.core.PointDataModel", "foxes.core.PointDataModel.calculate", "foxes.core.PointDataModel.output_point_vars", "foxes.core.PointDataModel.run_calculation", "foxes.core.PointDataModelList", "foxes.core.PointDataModelList.__init__", "foxes.core.PointDataModelList.append", "foxes.core.PointDataModelList.calculate", "foxes.core.PointDataModelList.finalize", "foxes.core.PointDataModelList.initialize", "foxes.core.PointDataModelList.output_point_vars", "foxes.core.RotorModel", "foxes.core.RotorModel.__init__", "foxes.core.RotorModel.calculate", "foxes.core.RotorModel.design_points", "foxes.core.RotorModel.eval_rpoint_results", "foxes.core.RotorModel.get_rotor_points", "foxes.core.RotorModel.n_rotor_points", "foxes.core.RotorModel.output_farm_vars", "foxes.core.RotorModel.rotor_point_weights", "foxes.core.States", "foxes.core.States.index", "foxes.core.States.output_point_vars", "foxes.core.States.size", "foxes.core.States.weights", "foxes.core.Turbine", "foxes.core.Turbine.__init__", "foxes.core.Turbine.add_model", "foxes.core.Turbine.insert_model", "foxes.core.TurbineModel", "foxes.core.TurbineModel.calculate", "foxes.core.TurbineType", "foxes.core.TurbineType.__init__", "foxes.core.VerticalProfile", "foxes.core.VerticalProfile.calculate", "foxes.core.VerticalProfile.input_vars", "foxes.core.VerticalProfile.new", "foxes.core.WakeFrame", "foxes.core.WakeFrame.calc_centreline_integral", "foxes.core.WakeFrame.calc_order", "foxes.core.WakeFrame.get_centreline_points", "foxes.core.WakeFrame.get_wake_coos", "foxes.core.WakeModel", "foxes.core.WakeModel.contribute_to_wake_deltas", "foxes.core.WakeModel.finalize_wake_deltas", "foxes.core.WakeModel.init_wake_deltas", "foxes.core.WakeSuperposition", "foxes.core.WakeSuperposition.calc_final_wake_delta", "foxes.core.WakeSuperposition.calc_wakes_plus_wake", "foxes.core.WindFarm", "foxes.core.WindFarm.__init__", "foxes.core.WindFarm.add_turbine", "foxes.core.WindFarm.n_turbines", "foxes.core.WindFarm.turbine_names", "foxes.data.StaticData", "foxes.data.StaticData.__init__", "foxes.data.parse_Pct_file_name", "foxes.data.parse_Pct_two_files", "foxes.constants.AMB_RPOINT_RESULTS", "foxes.constants.DTYPE", "foxes.constants.DTYPE.T", "foxes.constants.DTYPE.__abs__", "foxes.constants.DTYPE.__add__", "foxes.constants.DTYPE.__and__", "foxes.constants.DTYPE.__array__", "foxes.constants.DTYPE.__array_interface__", "foxes.constants.DTYPE.__array_priority__", "foxes.constants.DTYPE.__array_struct__", "foxes.constants.DTYPE.__array_wrap__", "foxes.constants.DTYPE.__bool__", "foxes.constants.DTYPE.__class_getitem__", "foxes.constants.DTYPE.__divmod__", "foxes.constants.DTYPE.__eq__", "foxes.constants.DTYPE.__float__", "foxes.constants.DTYPE.__floordiv__", "foxes.constants.DTYPE.__format__", "foxes.constants.DTYPE.__ge__", "foxes.constants.DTYPE.__getitem__", "foxes.constants.DTYPE.__gt__", "foxes.constants.DTYPE.__hash__", "foxes.constants.DTYPE.__int__", "foxes.constants.DTYPE.__invert__", "foxes.constants.DTYPE.__le__", "foxes.constants.DTYPE.__lshift__", "foxes.constants.DTYPE.__lt__", "foxes.constants.DTYPE.__mod__", "foxes.constants.DTYPE.__mul__", "foxes.constants.DTYPE.__ne__", "foxes.constants.DTYPE.__neg__", "foxes.constants.DTYPE.__new__", "foxes.constants.DTYPE.__or__", "foxes.constants.DTYPE.__pos__", "foxes.constants.DTYPE.__pow__", "foxes.constants.DTYPE.__radd__", "foxes.constants.DTYPE.__rand__", "foxes.constants.DTYPE.__rdivmod__", "foxes.constants.DTYPE.__reduce__", "foxes.constants.DTYPE.__repr__", "foxes.constants.DTYPE.__rfloordiv__", "foxes.constants.DTYPE.__rlshift__", "foxes.constants.DTYPE.__rmod__", "foxes.constants.DTYPE.__rmul__", "foxes.constants.DTYPE.__ror__", "foxes.constants.DTYPE.__rpow__", "foxes.constants.DTYPE.__rrshift__", "foxes.constants.DTYPE.__rshift__", "foxes.constants.DTYPE.__rsub__", "foxes.constants.DTYPE.__rtruediv__", "foxes.constants.DTYPE.__rxor__", "foxes.constants.DTYPE.__sizeof__", "foxes.constants.DTYPE.__str__", "foxes.constants.DTYPE.__sub__", "foxes.constants.DTYPE.__truediv__", "foxes.constants.DTYPE.__xor__", "foxes.constants.DTYPE.all", "foxes.constants.DTYPE.any", "foxes.constants.DTYPE.argmax", "foxes.constants.DTYPE.argmin", "foxes.constants.DTYPE.argsort", "foxes.constants.DTYPE.as_integer_ratio", "foxes.constants.DTYPE.astype", "foxes.constants.DTYPE.base", "foxes.constants.DTYPE.byteswap", "foxes.constants.DTYPE.choose", "foxes.constants.DTYPE.clip", "foxes.constants.DTYPE.compress", "foxes.constants.DTYPE.conj", "foxes.constants.DTYPE.conjugate", "foxes.constants.DTYPE.copy", "foxes.constants.DTYPE.cumprod", "foxes.constants.DTYPE.cumsum", "foxes.constants.DTYPE.data", "foxes.constants.DTYPE.diagonal", "foxes.constants.DTYPE.dtype", "foxes.constants.DTYPE.dump", "foxes.constants.DTYPE.dumps", "foxes.constants.DTYPE.fill", "foxes.constants.DTYPE.flags", "foxes.constants.DTYPE.flat", "foxes.constants.DTYPE.flatten", "foxes.constants.DTYPE.getfield", "foxes.constants.DTYPE.imag", "foxes.constants.DTYPE.is_integer", "foxes.constants.DTYPE.item", "foxes.constants.DTYPE.itemset", "foxes.constants.DTYPE.itemsize", "foxes.constants.DTYPE.max", "foxes.constants.DTYPE.mean", "foxes.constants.DTYPE.min", "foxes.constants.DTYPE.nbytes", "foxes.constants.DTYPE.ndim", "foxes.constants.DTYPE.newbyteorder", "foxes.constants.DTYPE.nonzero", "foxes.constants.DTYPE.prod", "foxes.constants.DTYPE.ptp", "foxes.constants.DTYPE.put", "foxes.constants.DTYPE.ravel", "foxes.constants.DTYPE.real", "foxes.constants.DTYPE.repeat", "foxes.constants.DTYPE.reshape", "foxes.constants.DTYPE.resize", "foxes.constants.DTYPE.round", "foxes.constants.DTYPE.searchsorted", "foxes.constants.DTYPE.setfield", "foxes.constants.DTYPE.setflags", "foxes.constants.DTYPE.shape", "foxes.constants.DTYPE.size", "foxes.constants.DTYPE.sort", "foxes.constants.DTYPE.squeeze", "foxes.constants.DTYPE.std", "foxes.constants.DTYPE.strides", "foxes.constants.DTYPE.sum", "foxes.constants.DTYPE.swapaxes", "foxes.constants.DTYPE.take", "foxes.constants.DTYPE.tobytes", "foxes.constants.DTYPE.tofile", "foxes.constants.DTYPE.tolist", "foxes.constants.DTYPE.tostring", "foxes.constants.DTYPE.trace", "foxes.constants.DTYPE.transpose", "foxes.constants.DTYPE.var", "foxes.constants.DTYPE.view", "foxes.constants.FARM", "foxes.constants.GW", "foxes.constants.ITYPE", "foxes.constants.ITYPE.__abs__", "foxes.constants.ITYPE.__add__", "foxes.constants.ITYPE.__and__", "foxes.constants.ITYPE.__bool__", "foxes.constants.ITYPE.__class_getitem__", "foxes.constants.ITYPE.__divmod__", "foxes.constants.ITYPE.__eq__", "foxes.constants.ITYPE.__float__", "foxes.constants.ITYPE.__floordiv__", "foxes.constants.ITYPE.__ge__", "foxes.constants.ITYPE.__gt__", "foxes.constants.ITYPE.__hash__", "foxes.constants.ITYPE.__index__", "foxes.constants.ITYPE.__int__", "foxes.constants.ITYPE.__invert__", "foxes.constants.ITYPE.__le__", "foxes.constants.ITYPE.__lshift__", "foxes.constants.ITYPE.__lt__", "foxes.constants.ITYPE.__mod__", "foxes.constants.ITYPE.__mul__", "foxes.constants.ITYPE.__ne__", "foxes.constants.ITYPE.__neg__", "foxes.constants.ITYPE.__new__", "foxes.constants.ITYPE.__or__", "foxes.constants.ITYPE.__pos__", "foxes.constants.ITYPE.__pow__", "foxes.constants.ITYPE.__radd__", "foxes.constants.ITYPE.__rand__", "foxes.constants.ITYPE.__rdivmod__", "foxes.constants.ITYPE.__repr__", "foxes.constants.ITYPE.__rfloordiv__", "foxes.constants.ITYPE.__rlshift__", "foxes.constants.ITYPE.__rmod__", "foxes.constants.ITYPE.__rmul__", "foxes.constants.ITYPE.__ror__", "foxes.constants.ITYPE.__rpow__", "foxes.constants.ITYPE.__rrshift__", "foxes.constants.ITYPE.__rshift__", "foxes.constants.ITYPE.__rsub__", "foxes.constants.ITYPE.__rtruediv__", "foxes.constants.ITYPE.__rxor__", "foxes.constants.ITYPE.__str__", "foxes.constants.ITYPE.__sub__", "foxes.constants.ITYPE.__truediv__", "foxes.constants.ITYPE.__xor__", "foxes.constants.ITYPE.bit_count", "foxes.constants.ITYPE.denominator", "foxes.constants.ITYPE.is_integer", "foxes.constants.ITYPE.numerator", "foxes.constants.KAPPA", "foxes.constants.MW", "foxes.constants.POINT", "foxes.constants.POINTS", "foxes.constants.POP", "foxes.constants.P_UNITS", "foxes.constants.RPOINT", "foxes.constants.RPOINTS", "foxes.constants.RWEIGHTS", "foxes.constants.STATE", "foxes.constants.TMODELS", "foxes.constants.TMODEL_SELS", "foxes.constants.TNAME", "foxes.constants.TURBINE", "foxes.constants.TW", "foxes.constants.VALID", "foxes.constants.VARS", "foxes.constants.W", "foxes.constants.kW", "foxes.variables.AMB_CAP", "foxes.variables.AMB_CT", "foxes.variables.AMB_P", "foxes.variables.AMB_REWS", "foxes.variables.AMB_REWS2", "foxes.variables.AMB_REWS3", "foxes.variables.AMB_RHO", "foxes.variables.AMB_T", "foxes.variables.AMB_TI", "foxes.variables.AMB_WD", "foxes.variables.AMB_WS", "foxes.variables.AMB_YAW", "foxes.variables.AMB_YAWM", "foxes.variables.AMB_YLD", "foxes.variables.CAP", "foxes.variables.CT", "foxes.variables.D", "foxes.variables.EFF", "foxes.variables.H", "foxes.variables.K", "foxes.variables.KB", "foxes.variables.KTI", "foxes.variables.MAX_P", "foxes.variables.MOL", "foxes.variables.ORDER", "foxes.variables.P", "foxes.variables.PA_ALPHA", "foxes.variables.PA_BETA", "foxes.variables.REWS", "foxes.variables.REWS2", "foxes.variables.REWS3", "foxes.variables.RHO", "foxes.variables.SHEAR", "foxes.variables.T", "foxes.variables.TI", "foxes.variables.TXYH", "foxes.variables.WD", "foxes.variables.WEIGHT", "foxes.variables.WS", "foxes.variables.X", "foxes.variables.XYH", "foxes.variables.Y", "foxes.variables.YAW", "foxes.variables.YAWM", "foxes.variables.YLD", "foxes.variables.Z0", "foxes.variables.amb2var", "foxes.variables.var2amb", "foxes.input.farm_layout.add_from_csv", "foxes.input.farm_layout.add_from_df", "foxes.input.farm_layout.add_from_file", "foxes.input.farm_layout.add_from_json", "foxes.input.farm_layout.add_grid", "foxes.input.farm_layout.add_row", "foxes.input.states.FieldDataNC", "foxes.input.states.FieldDataNC.__init__", "foxes.input.states.FieldDataNC.calculate", "foxes.input.states.FieldDataNC.index", "foxes.input.states.FieldDataNC.initialize", "foxes.input.states.FieldDataNC.output_point_vars", "foxes.input.states.FieldDataNC.size", "foxes.input.states.FieldDataNC.weights", "foxes.input.states.MultiHeightStates", "foxes.input.states.MultiHeightStates.RDICT", "foxes.input.states.MultiHeightStates.__init__", "foxes.input.states.MultiHeightStates.calculate", "foxes.input.states.MultiHeightStates.finalize", "foxes.input.states.MultiHeightStates.index", "foxes.input.states.MultiHeightStates.initialize", "foxes.input.states.MultiHeightStates.output_point_vars", "foxes.input.states.MultiHeightStates.reset", "foxes.input.states.MultiHeightStates.size", "foxes.input.states.MultiHeightStates.weights", "foxes.input.states.MultiHeightTimeseries", "foxes.input.states.MultiHeightTimeseries.RDICT", "foxes.input.states.ScanWS", "foxes.input.states.ScanWS.__init__", "foxes.input.states.ScanWS.calculate", "foxes.input.states.ScanWS.initialize", "foxes.input.states.ScanWS.output_point_vars", "foxes.input.states.ScanWS.size", "foxes.input.states.ScanWS.weights", "foxes.input.states.SingleStateStates", "foxes.input.states.SingleStateStates.__init__", "foxes.input.states.SingleStateStates.calculate", "foxes.input.states.SingleStateStates.initialize", "foxes.input.states.SingleStateStates.output_point_vars", "foxes.input.states.SingleStateStates.size", "foxes.input.states.SingleStateStates.weights", "foxes.input.states.StatesTable", "foxes.input.states.StatesTable.RDICT", "foxes.input.states.StatesTable.__init__", "foxes.input.states.StatesTable.calculate", "foxes.input.states.StatesTable.finalize", "foxes.input.states.StatesTable.index", "foxes.input.states.StatesTable.initialize", "foxes.input.states.StatesTable.output_point_vars", "foxes.input.states.StatesTable.reset", "foxes.input.states.StatesTable.size", "foxes.input.states.StatesTable.weights", "foxes.input.states.Timeseries", "foxes.input.states.Timeseries.RDICT", "foxes.input.states.create_random_abl_states", "foxes.input.windio.read_case", "foxes.models.farm_controllers.BasicFarmController", "foxes.models.farm_models.Turbine2FarmModel", "foxes.models.farm_models.Turbine2FarmModel.__init__", "foxes.models.farm_models.Turbine2FarmModel.__repr__", "foxes.models.farm_models.Turbine2FarmModel.calculate", "foxes.models.farm_models.Turbine2FarmModel.finalize", "foxes.models.farm_models.Turbine2FarmModel.initialize", "foxes.models.farm_models.Turbine2FarmModel.output_farm_vars", "foxes.models.model_book.Dict", "foxes.models.model_book.Dict.__getitem__", "foxes.models.model_book.Dict.__init__", "foxes.models.model_book.ModelBook", "foxes.models.model_book.ModelBook.__getitem__", "foxes.models.model_book.ModelBook.__init__", "foxes.models.model_book.ModelBook.finalize", "foxes.models.model_book.ModelBook.print_toc", "foxes.models.partial_wakes.Mapped", "foxes.models.partial_wakes.Mapped.__init__", "foxes.models.partial_wakes.Mapped.contribute_to_wake_deltas", "foxes.models.partial_wakes.Mapped.evaluate_results", "foxes.models.partial_wakes.Mapped.finalize", "foxes.models.partial_wakes.Mapped.initialize", "foxes.models.partial_wakes.Mapped.new_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake", "foxes.models.partial_wakes.PartialAxiwake.__init__", "foxes.models.partial_wakes.PartialAxiwake.__repr__", "foxes.models.partial_wakes.PartialAxiwake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake.evaluate_results", "foxes.models.partial_wakes.PartialAxiwake.finalize", "foxes.models.partial_wakes.PartialAxiwake.initialize", "foxes.models.partial_wakes.PartialAxiwake.new_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake", "foxes.models.partial_wakes.PartialDistSlicedWake.__init__", "foxes.models.partial_wakes.PartialDistSlicedWake.__repr__", "foxes.models.partial_wakes.PartialDistSlicedWake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake.evaluate_results", "foxes.models.partial_wakes.PartialDistSlicedWake.finalize", "foxes.models.partial_wakes.PartialDistSlicedWake.initialize", "foxes.models.partial_wakes.PartialDistSlicedWake.new_wake_deltas", "foxes.models.partial_wakes.PartialGrid", "foxes.models.partial_wakes.PartialGrid.__init__", "foxes.models.partial_wakes.PartialGrid.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat", "foxes.models.partial_wakes.PartialTopHat.__init__", "foxes.models.partial_wakes.PartialTopHat.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat.evaluate_results", "foxes.models.partial_wakes.PartialTopHat.finalize", "foxes.models.partial_wakes.PartialTopHat.get_wake_points", "foxes.models.partial_wakes.PartialTopHat.initialize", "foxes.models.partial_wakes.PartialTopHat.new_wake_deltas", "foxes.models.partial_wakes.RotorPoints", "foxes.models.partial_wakes.RotorPoints.__init__", "foxes.models.partial_wakes.RotorPoints.contribute_to_wake_deltas", "foxes.models.partial_wakes.RotorPoints.evaluate_results", "foxes.models.partial_wakes.RotorPoints.get_wake_points", "foxes.models.partial_wakes.RotorPoints.initialize", "foxes.models.partial_wakes.RotorPoints.new_wake_deltas", "foxes.models.point_models.SetUniformData", "foxes.models.point_models.SetUniformData.__init__", "foxes.models.point_models.SetUniformData.calculate", "foxes.models.point_models.SetUniformData.initialize", "foxes.models.point_models.SetUniformData.output_point_vars", "foxes.models.point_models.TKE2TI", "foxes.models.point_models.TKE2TI.calculate", "foxes.models.point_models.TKE2TI.output_point_vars", "foxes.models.point_models.WakeDeltas", "foxes.models.point_models.WakeDeltas.__init__", "foxes.models.point_models.WakeDeltas.calculate", "foxes.models.point_models.WakeDeltas.output_point_vars", "foxes.models.rotor_models.CentreRotor", "foxes.models.rotor_models.CentreRotor.design_points", "foxes.models.rotor_models.CentreRotor.eval_rpoint_results", "foxes.models.rotor_models.CentreRotor.get_rotor_points", "foxes.models.rotor_models.CentreRotor.n_rotor_points", "foxes.models.rotor_models.CentreRotor.rotor_point_weights", "foxes.models.rotor_models.GridRotor", "foxes.models.rotor_models.GridRotor.__init__", "foxes.models.rotor_models.GridRotor.__repr__", "foxes.models.rotor_models.GridRotor.design_points", "foxes.models.rotor_models.GridRotor.initialize", "foxes.models.rotor_models.GridRotor.n_rotor_points", "foxes.models.rotor_models.GridRotor.rotor_point_weights", "foxes.models.turbine_models.Calculator", "foxes.models.turbine_models.Calculator.__init__", "foxes.models.turbine_models.Calculator.calculate", "foxes.models.turbine_models.Calculator.output_farm_vars", "foxes.models.turbine_models.LookupTable", "foxes.models.turbine_models.LookupTable.__init__", "foxes.models.turbine_models.LookupTable.calculate", "foxes.models.turbine_models.LookupTable.initialize", "foxes.models.turbine_models.LookupTable.output_farm_vars", "foxes.models.turbine_models.PowerMask", "foxes.models.turbine_models.PowerMask.__init__", "foxes.models.turbine_models.PowerMask.calculate", "foxes.models.turbine_models.PowerMask.initialize", "foxes.models.turbine_models.PowerMask.output_farm_vars", "foxes.models.turbine_models.PowerMask.update_P_ct", "foxes.models.turbine_models.RotorCentreCalc", "foxes.models.turbine_models.RotorCentreCalc.__init__", "foxes.models.turbine_models.RotorCentreCalc.calculate", "foxes.models.turbine_models.RotorCentreCalc.finalize", "foxes.models.turbine_models.RotorCentreCalc.initialize", "foxes.models.turbine_models.RotorCentreCalc.output_farm_vars", "foxes.models.turbine_models.SectorManagement", "foxes.models.turbine_models.SectorManagement.__init__", "foxes.models.turbine_models.SectorManagement.calculate", "foxes.models.turbine_models.SectorManagement.initialize", "foxes.models.turbine_models.SectorManagement.output_farm_vars", "foxes.models.turbine_models.SetFarmVars", "foxes.models.turbine_models.SetFarmVars.__init__", "foxes.models.turbine_models.SetFarmVars.add_var", "foxes.models.turbine_models.SetFarmVars.calculate", "foxes.models.turbine_models.SetFarmVars.initialize", "foxes.models.turbine_models.SetFarmVars.output_farm_vars", "foxes.models.turbine_models.SetFarmVars.reset", "foxes.models.turbine_models.SetXYHD", "foxes.models.turbine_models.SetXYHD.__init__", "foxes.models.turbine_models.SetXYHD.calculate", "foxes.models.turbine_models.SetXYHD.output_farm_vars", "foxes.models.turbine_models.TableFactors", "foxes.models.turbine_models.TableFactors.__init__", "foxes.models.turbine_models.TableFactors.calculate", "foxes.models.turbine_models.TableFactors.initialize", "foxes.models.turbine_models.TableFactors.output_farm_vars", "foxes.models.turbine_models.Thrust2Ct", "foxes.models.turbine_models.Thrust2Ct.__init__", "foxes.models.turbine_models.Thrust2Ct.calculate", "foxes.models.turbine_models.Thrust2Ct.output_farm_vars", "foxes.models.turbine_models.YAW2YAWM", "foxes.models.turbine_models.YAW2YAWM.calculate", "foxes.models.turbine_models.YAW2YAWM.output_farm_vars", "foxes.models.turbine_models.YAWM2YAW", "foxes.models.turbine_models.YAWM2YAW.calculate", "foxes.models.turbine_models.YAWM2YAW.output_farm_vars", "foxes.models.turbine_models.kTI", "foxes.models.turbine_models.kTI.__init__", "foxes.models.turbine_models.kTI.__repr__", "foxes.models.turbine_models.kTI.calculate", "foxes.models.turbine_models.kTI.output_farm_vars", "foxes.models.turbine_types.CpCtFile", "foxes.models.turbine_types.CpCtFile.__init__", "foxes.models.turbine_types.CpCtFromTwo", "foxes.models.turbine_types.CpCtFromTwo.__init__", "foxes.models.turbine_types.NullType", "foxes.models.turbine_types.NullType.calculate", "foxes.models.turbine_types.NullType.output_farm_vars", "foxes.models.turbine_types.PCtFile", "foxes.models.turbine_types.PCtFile.__init__", "foxes.models.turbine_types.PCtFile.calculate", "foxes.models.turbine_types.PCtFile.finalize", "foxes.models.turbine_types.PCtFile.initialize", "foxes.models.turbine_types.PCtFile.output_farm_vars", "foxes.models.turbine_types.PCtFromTwo", "foxes.models.turbine_types.PCtFromTwo.__init__", "foxes.models.turbine_types.PCtFromTwo.calculate", "foxes.models.turbine_types.PCtFromTwo.finalize", "foxes.models.turbine_types.PCtFromTwo.initialize", "foxes.models.turbine_types.PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsRho2PCtFromTwo", "foxes.models.turbine_types.WsRho2PCtFromTwo.__init__", "foxes.models.turbine_types.WsRho2PCtFromTwo.calculate", "foxes.models.turbine_types.WsRho2PCtFromTwo.finalize", "foxes.models.turbine_types.WsRho2PCtFromTwo.initialize", "foxes.models.turbine_types.WsRho2PCtFromTwo.output_farm_vars", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogStableWsProfile", "foxes.models.vertical_profiles.ABLLogStableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogStableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogWsProfile", "foxes.models.vertical_profiles.ABLLogWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogWsProfile.input_vars", "foxes.models.vertical_profiles.ShearedProfile", "foxes.models.vertical_profiles.ShearedProfile.calculate", "foxes.models.vertical_profiles.ShearedProfile.input_vars", "foxes.models.vertical_profiles.UniformProfile", "foxes.models.vertical_profiles.UniformProfile.__init__", "foxes.models.vertical_profiles.UniformProfile.calculate", "foxes.models.vertical_profiles.UniformProfile.input_vars", "foxes.models.wake_frames.FarmOrder", "foxes.models.wake_frames.FarmOrder.__init__", "foxes.models.wake_frames.FarmOrder.calc_order", "foxes.models.wake_frames.FarmOrder.finalize", "foxes.models.wake_frames.FarmOrder.get_centreline_points", "foxes.models.wake_frames.FarmOrder.get_wake_coos", "foxes.models.wake_frames.FarmOrder.initialize", "foxes.models.wake_frames.RotorWD", "foxes.models.wake_frames.RotorWD.__init__", "foxes.models.wake_frames.RotorWD.calc_order", "foxes.models.wake_frames.RotorWD.get_centreline_points", "foxes.models.wake_frames.RotorWD.get_wake_coos", "foxes.models.wake_frames.Streamlines", "foxes.models.wake_frames.Streamlines.__init__", "foxes.models.wake_frames.Streamlines.__repr__", "foxes.models.wake_frames.Streamlines.calc_order", "foxes.models.wake_frames.Streamlines.get_centreline_points", "foxes.models.wake_frames.Streamlines.get_wake_coos", "foxes.models.wake_frames.Streamlines.initialize", "foxes.models.wake_frames.YawedWakes", "foxes.models.wake_frames.YawedWakes.__init__", "foxes.models.wake_frames.YawedWakes.calc_order", "foxes.models.wake_frames.YawedWakes.finalize", "foxes.models.wake_frames.YawedWakes.get_centreline_points", "foxes.models.wake_frames.YawedWakes.get_wake_coos", "foxes.models.wake_frames.YawedWakes.initialize", "foxes.models.wake_models.AxisymmetricWakeModel", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel", "foxes.models.wake_models.DistSlicedWakeModel.__init__", "foxes.models.wake_models.DistSlicedWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel.contribute_to_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.finalize", "foxes.models.wake_models.DistSlicedWakeModel.finalize_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.initialize", "foxes.models.wake_models.GaussianWakeModel", "foxes.models.wake_models.GaussianWakeModel.calc_amplitude_sigma_spsel", "foxes.models.wake_models.GaussianWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.TopHatWakeModel", "foxes.models.wake_models.TopHatWakeModel.__init__", "foxes.models.wake_models.TopHatWakeModel.calc_centreline_wake_deltas", "foxes.models.wake_models.TopHatWakeModel.calc_wake_radius", "foxes.models.wake_models.TopHatWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.ti.CrespoHernandezTIWake", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__init__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__repr__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_wake_radius", "foxes.models.wake_models.ti.CrespoHernandezTIWake.init_wake_deltas", "foxes.models.wake_models.ti.IECTIWake", "foxes.models.wake_models.ti.IECTIWake.__init__", "foxes.models.wake_models.ti.IECTIWake.__repr__", "foxes.models.wake_models.ti.IECTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.IECTIWake.calc_wake_radius", "foxes.models.wake_models.ti.IECTIWake.init_wake_deltas", "foxes.models.wake_models.wind.BastankhahWake", "foxes.models.wake_models.wind.BastankhahWake.__init__", "foxes.models.wake_models.wind.BastankhahWake.__repr__", "foxes.models.wake_models.wind.BastankhahWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.BastankhahWake.init_wake_deltas", "foxes.models.wake_models.wind.JensenWake", "foxes.models.wake_models.wind.JensenWake.__init__", "foxes.models.wake_models.wind.JensenWake.__repr__", "foxes.models.wake_models.wind.JensenWake.calc_centreline_wake_deltas", "foxes.models.wake_models.wind.JensenWake.calc_wake_radius", "foxes.models.wake_models.wind.JensenWake.init_wake_deltas", "foxes.models.wake_models.wind.PorteAgelModel", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_FAR", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.CHECK", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_FAR", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.MDATA_KEY", "foxes.models.wake_models.wind.PorteAgelModel.NEAR", "foxes.models.wake_models.wind.PorteAgelModel.PARS", "foxes.models.wake_models.wind.PorteAgelModel.R_PC", "foxes.models.wake_models.wind.PorteAgelModel.R_PC_S", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Y_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Z_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SP_SEL", "foxes.models.wake_models.wind.PorteAgelModel.X0", "foxes.models.wake_models.wind.PorteAgelModel.__init__", "foxes.models.wake_models.wind.PorteAgelModel.calc_data", "foxes.models.wake_models.wind.PorteAgelModel.clean", "foxes.models.wake_models.wind.PorteAgelModel.get_data", "foxes.models.wake_models.wind.PorteAgelModel.has_data", "foxes.models.wake_models.wind.PorteAgelModel.pars", "foxes.models.wake_models.wind.PorteAgelWake", "foxes.models.wake_models.wind.PorteAgelWake.__init__", "foxes.models.wake_models.wind.PorteAgelWake.__repr__", "foxes.models.wake_models.wind.PorteAgelWake.calc_wakes_spsel_x_yz", "foxes.models.wake_models.wind.PorteAgelWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWake", "foxes.models.wake_models.wind.TurbOParkWake.__init__", "foxes.models.wake_models.wind.TurbOParkWake.__repr__", "foxes.models.wake_models.wind.TurbOParkWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWakeIX", "foxes.models.wake_models.wind.TurbOParkWakeIX.__init__", "foxes.models.wake_models.wind.TurbOParkWakeIX.__repr__", "foxes.models.wake_models.wind.TurbOParkWakeIX.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWakeIX.init_wake_deltas", "foxes.models.wake_superpositions.LinearSuperposition", "foxes.models.wake_superpositions.LinearSuperposition.__init__", "foxes.models.wake_superpositions.LinearSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.LinearSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.MaxSuperposition", "foxes.models.wake_superpositions.MaxSuperposition.__init__", "foxes.models.wake_superpositions.MaxSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.MaxSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.MaxSuperposition.initialize", "foxes.models.wake_superpositions.ProductSuperposition", "foxes.models.wake_superpositions.ProductSuperposition.__init__", "foxes.models.wake_superpositions.ProductSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.ProductSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition", "foxes.models.wake_superpositions.QuadraticSuperposition.__init__", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition.initialize", "foxes.models.wake_superpositions.TISuperposition", "foxes.models.wake_superpositions.TISuperposition.__init__", "foxes.models.wake_superpositions.TISuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.TISuperposition.calc_wakes_plus_wake", "foxes.output.FarmLayoutOutput", "foxes.output.FarmLayoutOutput.__init__", "foxes.output.FarmLayoutOutput.get_figure", "foxes.output.FarmLayoutOutput.get_layout_data", "foxes.output.FarmLayoutOutput.get_layout_dict", "foxes.output.FarmLayoutOutput.write_csv", "foxes.output.FarmLayoutOutput.write_json", "foxes.output.FarmLayoutOutput.write_plot", "foxes.output.FarmLayoutOutput.write_xyh", "foxes.output.FarmResultsEval", "foxes.output.FarmResultsEval.__init__", "foxes.output.FarmResultsEval.add_capacity", "foxes.output.FarmResultsEval.add_efficiency", "foxes.output.FarmResultsEval.calc_farm_efficiency", "foxes.output.FarmResultsEval.calc_farm_mean", "foxes.output.FarmResultsEval.calc_farm_sum", "foxes.output.FarmResultsEval.calc_farm_yield", "foxes.output.FarmResultsEval.calc_mean_farm_power", "foxes.output.FarmResultsEval.calc_states_mean", "foxes.output.FarmResultsEval.calc_states_std", "foxes.output.FarmResultsEval.calc_states_sum", "foxes.output.FarmResultsEval.calc_turbine_mean", "foxes.output.FarmResultsEval.calc_turbine_sum", "foxes.output.FarmResultsEval.calc_turbine_yield", "foxes.output.FarmResultsEval.reduce_all", "foxes.output.FarmResultsEval.reduce_states", "foxes.output.FarmResultsEval.reduce_turbines", "foxes.output.FarmResultsEval.weinsum", "foxes.output.FlowPlots2D", "foxes.output.FlowPlots2D.__init__", "foxes.output.FlowPlots2D.gen_states_fig_xy", "foxes.output.FlowPlots2D.gen_states_fig_xz", "foxes.output.FlowPlots2D.gen_states_fig_yz", "foxes.output.FlowPlots2D.get_mean_fig_xy", "foxes.output.FlowPlots2D.get_mean_fig_xz", "foxes.output.FlowPlots2D.get_mean_fig_yz", "foxes.output.Output", "foxes.output.Output.new", "foxes.output.Output.print_models", "foxes.output.Output.write", "foxes.output.ResultsWriter", "foxes.output.ResultsWriter.__init__", "foxes.output.ResultsWriter.write_csv", "foxes.output.RosePlotOutput", "foxes.output.RosePlotOutput.__init__", "foxes.output.RosePlotOutput.get_data", "foxes.output.RosePlotOutput.get_data_info", "foxes.output.RosePlotOutput.get_figure", "foxes.output.RosePlotOutput.write_figure", "foxes.output.StateTurbineMap", "foxes.output.StateTurbineMap.__init__", "foxes.output.StateTurbineMap.plot_map", "foxes.output.StatesRosePlotOutput", "foxes.output.StatesRosePlotOutput.__init__", "foxes.output.TurbineTypeCurves", "foxes.output.TurbineTypeCurves.__init__", "foxes.output.TurbineTypeCurves.plot_curves", "foxes.utils.DataBook", "foxes.utils.DataBook.__init__", "foxes.utils.DataBook.add_data_package", "foxes.utils.DataBook.add_data_package_file", "foxes.utils.DataBook.add_file", "foxes.utils.DataBook.add_files", "foxes.utils.DataBook.get_file_path", "foxes.utils.DataBook.toc", "foxes.utils.PandasFileHelper", "foxes.utils.PandasFileHelper.DATA_FILE_FORMATS", "foxes.utils.PandasFileHelper.DEFAULT_FORMAT_DICT", "foxes.utils.PandasFileHelper.DEFAULT_READING_PARAMETERS", "foxes.utils.PandasFileHelper.DEFAULT_WRITING_PARAMETERS", "foxes.utils.PandasFileHelper.read_file", "foxes.utils.PandasFileHelper.write_file", "foxes.utils.abl.neutral.calc_ws", "foxes.utils.abl.neutral.logz", "foxes.utils.abl.neutral.ustar", "foxes.utils.abl.sheared.calc_ws", "foxes.utils.abl.stable.calc_ws", "foxes.utils.abl.stable.lgz", "foxes.utils.abl.stable.logz", "foxes.utils.abl.stable.psi", "foxes.utils.abl.stable.ustar", "foxes.utils.abl.unstable.calc_ws", "foxes.utils.abl.unstable.logz", "foxes.utils.abl.unstable.psi", "foxes.utils.abl.unstable.ustar", "foxes.utils.all_subclasses", "foxes.utils.cubic_roots", "foxes.utils.delta_wd", "foxes.utils.geom2d.AreaGeometry", "foxes.utils.geom2d.AreaGeometry.add_to_figure", "foxes.utils.geom2d.AreaGeometry.inverse", "foxes.utils.geom2d.AreaGeometry.p_max", "foxes.utils.geom2d.AreaGeometry.p_min", "foxes.utils.geom2d.AreaGeometry.points_distance", "foxes.utils.geom2d.AreaGeometry.points_inside", "foxes.utils.geom2d.AreaIntersection", "foxes.utils.geom2d.AreaIntersection.__new__", "foxes.utils.geom2d.AreaUnion", "foxes.utils.geom2d.AreaUnion.__init__", "foxes.utils.geom2d.AreaUnion.add_to_figure", "foxes.utils.geom2d.AreaUnion.inverse", "foxes.utils.geom2d.AreaUnion.p_max", "foxes.utils.geom2d.AreaUnion.p_min", "foxes.utils.geom2d.AreaUnion.points_distance", "foxes.utils.geom2d.AreaUnion.points_inside", "foxes.utils.geom2d.Circle", "foxes.utils.geom2d.Circle.__init__", "foxes.utils.geom2d.Circle.add_to_figure", "foxes.utils.geom2d.Circle.p_max", "foxes.utils.geom2d.Circle.p_min", "foxes.utils.geom2d.Circle.points_distance", "foxes.utils.geom2d.Circle.points_inside", "foxes.utils.geom2d.ClosedPolygon", "foxes.utils.geom2d.ClosedPolygon.__init__", "foxes.utils.geom2d.ClosedPolygon.add_to_figure", "foxes.utils.geom2d.ClosedPolygon.p_max", "foxes.utils.geom2d.ClosedPolygon.p_min", "foxes.utils.geom2d.ClosedPolygon.points_distance", "foxes.utils.geom2d.ClosedPolygon.points_inside", "foxes.utils.geom2d.HalfPlane", "foxes.utils.geom2d.HalfPlane.__init__", "foxes.utils.geom2d.HalfPlane.add_to_figure", "foxes.utils.geom2d.HalfPlane.inverse", "foxes.utils.geom2d.HalfPlane.p_max", "foxes.utils.geom2d.HalfPlane.p_min", "foxes.utils.geom2d.HalfPlane.points_distance", "foxes.utils.geom2d.HalfPlane.points_inside", "foxes.utils.geom2d.InvertedAreaGeometry", "foxes.utils.geom2d.InvertedAreaGeometry.__init__", "foxes.utils.geom2d.InvertedAreaGeometry.add_to_figure", "foxes.utils.geom2d.InvertedAreaGeometry.inverse", "foxes.utils.geom2d.InvertedAreaGeometry.p_max", "foxes.utils.geom2d.InvertedAreaGeometry.p_min", "foxes.utils.geom2d.InvertedAreaGeometry.points_distance", "foxes.utils.geom2d.InvertedAreaGeometry.points_inside", "foxes.opt.constraints.AreaGeometryConstraint", "foxes.opt.constraints.AreaGeometryConstraint.__init__", "foxes.opt.constraints.AreaGeometryConstraint.__str__", "foxes.opt.constraints.AreaGeometryConstraint.ana_deriv", "foxes.opt.constraints.AreaGeometryConstraint.calc_individual", "foxes.opt.constraints.AreaGeometryConstraint.calc_population", "foxes.opt.constraints.AreaGeometryConstraint.component_names", "foxes.opt.constraints.AreaGeometryConstraint.finalize", "foxes.opt.constraints.AreaGeometryConstraint.finalize_individual", "foxes.opt.constraints.AreaGeometryConstraint.finalize_population", "foxes.opt.constraints.AreaGeometryConstraint.initialize", "foxes.opt.constraints.AreaGeometryConstraint.initialized", "foxes.opt.constraints.AreaGeometryConstraint.n_components", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.var_names_float", "foxes.opt.constraints.AreaGeometryConstraint.var_names_int", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_float", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_int", "foxes.opt.constraints.FarmBoundaryConstraint", "foxes.opt.constraints.FarmBoundaryConstraint.__init__", "foxes.opt.constraints.MinDistConstraint", "foxes.opt.constraints.MinDistConstraint.__init__", "foxes.opt.constraints.MinDistConstraint.calc_individual", "foxes.opt.constraints.MinDistConstraint.calc_population", "foxes.opt.constraints.MinDistConstraint.initialize", "foxes.opt.constraints.MinDistConstraint.n_components", "foxes.opt.constraints.MinDistConstraint.vardeps_float", "foxes.opt.core.FarmConstraint", "foxes.opt.core.FarmConstraint.__init__", "foxes.opt.core.FarmConstraint.add_to_layout_figure", "foxes.opt.core.FarmConstraint.calc_individual", "foxes.opt.core.FarmConstraint.calc_population", "foxes.opt.core.FarmConstraint.farm", "foxes.opt.core.FarmConstraint.n_components", "foxes.opt.core.FarmConstraint.n_sel_turbines", "foxes.opt.core.FarmConstraint.print_models", "foxes.opt.core.FarmConstraint.sel_turbines", "foxes.opt.core.FarmConstraint.vardeps_float", "foxes.opt.core.FarmObjective", "foxes.opt.core.FarmObjective.__init__", "foxes.opt.core.FarmObjective.add_to_layout_figure", "foxes.opt.core.FarmObjective.farm", "foxes.opt.core.FarmObjective.n_sel_turbines", "foxes.opt.core.FarmObjective.print_models", "foxes.opt.core.FarmObjective.sel_turbines", "foxes.opt.core.FarmOptProblem", "foxes.opt.core.FarmOptProblem.INT_INF", "foxes.opt.core.FarmOptProblem.__init__", "foxes.opt.core.FarmOptProblem.add_constraint", "foxes.opt.core.FarmOptProblem.add_objective", "foxes.opt.core.FarmOptProblem.add_to_layout_figure", "foxes.opt.core.FarmOptProblem.all_turbines", "foxes.opt.core.FarmOptProblem.apply_individual", "foxes.opt.core.FarmOptProblem.apply_population", "foxes.opt.core.FarmOptProblem.calc_gradients", "foxes.opt.core.FarmOptProblem.check_constraints_individual", "foxes.opt.core.FarmOptProblem.check_constraints_population", "foxes.opt.core.FarmOptProblem.constraints_tol", "foxes.opt.core.FarmOptProblem.counter", "foxes.opt.core.FarmOptProblem.evaluate_individual", "foxes.opt.core.FarmOptProblem.evaluate_population", "foxes.opt.core.FarmOptProblem.farm", "foxes.opt.core.FarmOptProblem.finalize_individual", "foxes.opt.core.FarmOptProblem.finalize_population", "foxes.opt.core.FarmOptProblem.get_gradients", "foxes.opt.core.FarmOptProblem.initial_values_float", "foxes.opt.core.FarmOptProblem.initial_values_int", "foxes.opt.core.FarmOptProblem.initialize", "foxes.opt.core.FarmOptProblem.max_values_constraints", "foxes.opt.core.FarmOptProblem.max_values_float", "foxes.opt.core.FarmOptProblem.max_values_int", "foxes.opt.core.FarmOptProblem.maximize_objs", "foxes.opt.core.FarmOptProblem.min_values_constraints", "foxes.opt.core.FarmOptProblem.min_values_float", "foxes.opt.core.FarmOptProblem.min_values_int", "foxes.opt.core.FarmOptProblem.n_constraints", "foxes.opt.core.FarmOptProblem.n_objectives", "foxes.opt.core.FarmOptProblem.n_sel_turbines", "foxes.opt.core.FarmOptProblem.n_vars_float", "foxes.opt.core.FarmOptProblem.n_vars_int", "foxes.opt.core.FarmOptProblem.parse_tvar", "foxes.opt.core.FarmOptProblem.sel_turbines", "foxes.opt.core.FarmOptProblem.tvar", "foxes.opt.core.FarmOptProblem.update_problem_individual", "foxes.opt.core.FarmOptProblem.update_problem_population", "foxes.opt.core.FarmOptProblem.var_names_float", "foxes.opt.core.FarmOptProblem.var_names_int", "foxes.opt.core.FarmVarsProblem", "foxes.opt.core.FarmVarsProblem.initialize", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_individual", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_population", "foxes.opt.core.FarmVarsProblem.update_problem_individual", "foxes.opt.core.FarmVarsProblem.update_problem_population", "foxes.opt.core.PopStates", "foxes.opt.core.PopStates.__init__", "foxes.opt.core.PopStates.calculate", "foxes.opt.core.PopStates.initialize", "foxes.opt.core.PopStates.output_point_vars", "foxes.opt.core.PopStates.size", "foxes.opt.core.PopStates.weights", "foxes.opt.objectives.FarmVarObjective", "foxes.opt.objectives.FarmVarObjective.__init__", "foxes.opt.objectives.FarmVarObjective.calc_individual", "foxes.opt.objectives.FarmVarObjective.calc_population", "foxes.opt.objectives.FarmVarObjective.finalize_individual", "foxes.opt.objectives.FarmVarObjective.initialize", "foxes.opt.objectives.FarmVarObjective.maximize", "foxes.opt.objectives.FarmVarObjective.n_components", "foxes.opt.objectives.FarmVarObjective.vardeps_float", "foxes.opt.objectives.MaxFarmPower", "foxes.opt.objectives.MaxFarmPower.__init__", "foxes.opt.objectives.MaxNTurbines", "foxes.opt.objectives.MaxNTurbines.__init__", "foxes.opt.objectives.MaxNTurbines.calc_individual", "foxes.opt.objectives.MaxNTurbines.calc_population", "foxes.opt.objectives.MaxNTurbines.maximize", "foxes.opt.objectives.MaxNTurbines.n_components", "foxes.opt.objectives.MinimalMaxTI", "foxes.opt.objectives.MinimalMaxTI.__init__", "foxes.opt.problems.OptFarmVars", "foxes.opt.problems.OptFarmVars.__init__", "foxes.opt.problems.OptFarmVars.add_var", "foxes.opt.problems.OptFarmVars.initial_values_float", "foxes.opt.problems.OptFarmVars.initial_values_int", "foxes.opt.problems.OptFarmVars.initialize", "foxes.opt.problems.OptFarmVars.max_values_float", "foxes.opt.problems.OptFarmVars.max_values_int", "foxes.opt.problems.OptFarmVars.min_values_float", "foxes.opt.problems.OptFarmVars.min_values_int", "foxes.opt.problems.OptFarmVars.opt2farm_vars_individual", "foxes.opt.problems.OptFarmVars.opt2farm_vars_population", "foxes.opt.problems.OptFarmVars.var_names_float", "foxes.opt.problems.OptFarmVars.var_names_int", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_population", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.get_bounds", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Valid", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.cdist", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.Objective", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.cdist", "foxes.opt.problems.layout.geom_layouts.GeomLayout", "foxes.opt.problems.layout.geom_layouts.GeomLayout.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayout.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayout.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.var_names_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_int", "foxes.opt.problems.layout.FarmLayoutOptProblem", "foxes.opt.problems.layout.FarmLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.initialize", "foxes.opt.problems.layout.FarmLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.FarmLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_int", "foxes.opt.problems.layout.RegularLayoutOptProblem", "foxes.opt.problems.layout.RegularLayoutOptProblem.ANGLE", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegularLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegularLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegularLayoutOptProblem.var_names_float", "foxes.utils.read_shp", "foxes.utils.read_shp_polygons", "foxes.utils.runners.DaskRunner", "foxes.utils.runners.DaskRunner.__init__", "foxes.utils.runners.DaskRunner.finalize", "foxes.utils.runners.DaskRunner.initialize", "foxes.utils.runners.DaskRunner.is_distributed", "foxes.utils.runners.DaskRunner.print", "foxes.utils.runners.DaskRunner.run", "foxes.utils.runners.DefaultRunner", "foxes.utils.runners.DefaultRunner.run", "foxes.utils.runners.Runner", "foxes.utils.runners.Runner.__init__", "foxes.utils.runners.Runner.finalize", "foxes.utils.runners.Runner.initialize", "foxes.utils.runners.Runner.initialized", "foxes.utils.runners.Runner.run", "foxes.utils.show_plotly_fig", "foxes.utils.shp2csv", "foxes.utils.shp2geom2d", "foxes.utils.two_circles.area", "foxes.utils.two_circles.calc_area", "foxes.utils.uv2wd", "foxes.utils.wd2uv", "foxes.utils.wd2wdvec", "foxes.utils.wdvec2wd", "API", "foxes.constants", "foxes.core", "foxes", "foxes.input", "foxes.models", "foxes.opt", "foxes.opt.problems", "foxes.opt.problems.layout.geom_layouts", "foxes.output", "foxes.utils", "foxes.utils.abl.neutral", "foxes.variables", "foxes.models.wake_models", "Examples", "History", "Welcome to FOXES", "Installation", "Static data", "Heterogeneous flow", "Layout optimization", "The model book", "Multi-height wind data", "Overview - how to setup foxes", "Power mask", "Wind sector management", "Single row of turbines", "Timeseries data", "Wind rose data", "Yawed rotor wakes"], "terms": {"class": [0, 7, 12, 14, 17, 27, 35, 40, 47, 48, 57, 62, 64, 68, 75, 84, 89, 93, 95, 97, 100, 101, 106, 110, 113, 118, 371, 379, 390, 392, 399, 406, 417, 421, 422, 429, 432, 437, 438, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 561, 562, 563, 564, 567, 568, 573, 574, 579, 580, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 729, 738, 757, 765, 766, 769, 772, 778, 781, 783, 786, 794, 814, 817, 824, 826, 834, 841, 848, 856, 864, 885, 887, 894, 905, 912, 921, 931, 954, 955, 960, 967, 976, 978, 984, 986, 991, 1000, 1001, 1005, 1006, 1010, 1011, 1015, 1016, 1021, 1026, 1031, 1032, 1037, 1038, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1128, 1134, 1139, 1150, 1159, 1167, 1174, 1176, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1209, 1212, 1220], "fox": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "core": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 368, 369, 370, 371, 373, 375, 376, 378, 379, 382, 383, 385, 386, 389, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 405, 406, 408, 409, 410, 412, 413, 416, 420, 421, 422, 423, 425, 426, 427, 428, 432, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 492, 493, 496, 500, 503, 505, 506, 507, 509, 510, 511, 512, 514, 515, 516, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 532, 533, 534, 536, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 564, 565, 566, 567, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 588, 591, 594, 597, 600, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 635, 636, 637, 638, 639, 641, 642, 645, 646, 647, 651, 652, 653, 657, 658, 659, 663, 664, 668, 669, 670, 671, 687, 689, 690, 695, 696, 700, 701, 705, 706, 707, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 727, 728, 740, 752, 781, 864, 887, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 978, 986, 1026, 1077, 1081, 1091, 1101, 1111, 1125, 1134, 1135, 1150, 1156, 1191, 1194, 1195, 1196, 1198, 1199, 1204, 1206], "algorithm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 20, 21, 23, 24, 26, 29, 30, 31, 32, 33, 37, 38, 39, 43, 44, 45, 46, 51, 53, 58, 59, 60, 61, 63, 65, 67, 71, 72, 73, 74, 77, 79, 80, 82, 86, 88, 94, 102, 103, 104, 105, 107, 108, 109, 111, 112, 373, 375, 376, 378, 382, 383, 385, 386, 389, 394, 395, 396, 398, 401, 402, 403, 405, 409, 410, 412, 413, 416, 420, 425, 426, 427, 428, 435, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 480, 481, 482, 484, 485, 488, 489, 492, 493, 500, 505, 506, 509, 510, 511, 514, 515, 516, 520, 521, 522, 523, 526, 527, 528, 532, 533, 534, 538, 539, 542, 543, 544, 547, 548, 550, 551, 553, 554, 558, 559, 565, 566, 569, 570, 571, 572, 575, 576, 577, 578, 581, 582, 583, 584, 604, 606, 607, 608, 609, 610, 613, 614, 615, 619, 620, 621, 622, 625, 626, 627, 628, 629, 631, 632, 635, 636, 637, 638, 639, 641, 642, 645, 646, 647, 651, 652, 653, 657, 658, 659, 663, 664, 668, 669, 670, 695, 696, 700, 701, 705, 706, 709, 710, 713, 714, 715, 718, 719, 722, 723, 724, 727, 728, 740, 752, 757, 758, 759, 760, 761, 762, 763, 764, 912, 914, 962, 963, 964, 966, 1135, 1156, 1193, 1196, 1206, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "model": [0, 1, 3, 4, 5, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 308, 309, 343, 344, 365, 371, 373, 375, 376, 379, 382, 383, 385, 386, 390, 392, 394, 395, 396, 399, 401, 402, 403, 406, 409, 410, 412, 413, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 738, 757, 765, 766, 767, 769, 772, 778, 781, 783, 784, 785, 864, 885, 887, 894, 902, 905, 910, 934, 954, 955, 960, 962, 963, 964, 967, 976, 978, 984, 988, 1191, 1192, 1193, 1194, 1197, 1201, 1203, 1205, 1206, 1207, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "sourc": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 876, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 902, 905, 906, 907, 910, 912, 914, 917, 919, 920, 934, 947, 949, 950, 951, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1207, 1208, 1220], "abstract": [0, 14, 15, 35, 37, 38, 47, 57, 59, 60, 63, 64, 65, 66, 75, 78, 81, 83, 84, 87, 88, 93, 94, 95, 97, 98, 99, 101, 103, 105, 106, 107, 109, 110, 111, 112, 630, 631, 633, 635, 640, 641, 643, 645, 646, 817, 820, 821, 822, 823, 824, 894, 900, 905, 912, 954, 956, 957, 1026, 1077, 1079, 1176, 1181, 1191, 1193, 1197, 1201, 1204, 1206], "base": [0, 9, 14, 15, 17, 18, 20, 27, 29, 30, 35, 37, 40, 43, 47, 48, 55, 57, 64, 65, 68, 71, 75, 84, 93, 94, 95, 97, 101, 103, 106, 110, 123, 185, 248, 365, 369, 370, 371, 373, 379, 382, 390, 392, 394, 399, 401, 406, 409, 417, 421, 422, 425, 437, 444, 452, 460, 463, 471, 478, 480, 483, 484, 486, 488, 490, 496, 503, 505, 507, 509, 512, 514, 518, 520, 524, 526, 529, 532, 536, 538, 540, 542, 545, 547, 549, 550, 552, 553, 555, 558, 560, 562, 564, 565, 567, 569, 573, 575, 579, 581, 585, 588, 591, 594, 597, 600, 604, 606, 611, 613, 616, 619, 623, 625, 630, 633, 640, 643, 648, 654, 655, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 765, 786, 803, 809, 813, 814, 817, 856, 894, 905, 912, 921, 954, 960, 962, 967, 1001, 1006, 1011, 1016, 1026, 1032, 1038, 1077, 1176, 1191, 1193, 1196, 1197, 1200, 1201, 1202, 1204, 1206, 1213, 1214, 1216, 1218, 1219, 1220], "collect": [0, 134, 253, 725, 759, 760, 761, 762, 763, 764, 1042, 1080, 1196, 1214, 1217], "requir": [0, 16, 23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 437, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963, 1207, 1209, 1210, 1211, 1212, 1214, 1218, 1220], "object": [0, 4, 8, 10, 14, 17, 23, 27, 32, 35, 40, 45, 47, 48, 52, 53, 55, 57, 59, 60, 61, 64, 68, 73, 75, 84, 93, 95, 97, 101, 106, 110, 123, 153, 173, 215, 248, 271, 371, 375, 379, 385, 390, 392, 395, 399, 402, 406, 412, 417, 420, 421, 422, 427, 437, 439, 440, 442, 444, 447, 448, 450, 452, 455, 456, 458, 460, 462, 463, 465, 466, 469, 471, 473, 474, 476, 478, 481, 483, 486, 490, 496, 500, 503, 507, 510, 512, 515, 518, 522, 524, 527, 529, 533, 536, 540, 543, 545, 549, 552, 555, 560, 562, 564, 567, 571, 573, 577, 579, 583, 585, 588, 591, 594, 597, 600, 604, 610, 611, 616, 622, 623, 629, 630, 633, 639, 640, 643, 648, 654, 660, 665, 692, 697, 702, 707, 711, 715, 716, 720, 724, 725, 731, 759, 760, 761, 762, 763, 764, 772, 776, 781, 818, 828, 836, 843, 850, 858, 864, 871, 874, 885, 887, 894, 905, 906, 912, 915, 916, 921, 926, 927, 929, 930, 931, 934, 938, 943, 954, 955, 960, 963, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 991, 1000, 1005, 1010, 1015, 1019, 1021, 1026, 1031, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1087, 1091, 1097, 1101, 1107, 1111, 1118, 1125, 1126, 1128, 1134, 1136, 1139, 1150, 1157, 1159, 1184, 1194, 1196, 1198, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1218, 1219, 1220], "run": [0, 1, 7, 14, 29, 35, 36, 57, 62, 93, 97, 98, 100, 421, 437, 444, 452, 460, 463, 471, 530, 585, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 602, 729, 738, 757, 765, 766, 769, 772, 778, 781, 783, 912, 914, 950, 951, 958, 959, 1135, 1146, 1147, 1167, 1168, 1173, 1174, 1175, 1176, 1181, 1193, 1196, 1197, 1206, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219], "calcul": [0, 12, 13, 14, 15, 16, 17, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, 51, 53, 59, 60, 61, 63, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 84, 86, 88, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 321, 322, 346, 347, 371, 373, 375, 376, 378, 379, 382, 383, 385, 386, 389, 390, 392, 394, 395, 396, 398, 399, 401, 402, 403, 405, 406, 409, 410, 412, 413, 416, 417, 421, 422, 425, 426, 427, 428, 435, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 492, 493, 496, 497, 500, 503, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 532, 533, 534, 536, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 663, 664, 665, 668, 669, 670, 671, 687, 692, 695, 696, 697, 700, 701, 702, 705, 706, 707, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 756, 757, 758, 772, 773, 782, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 813, 815, 816, 817, 822, 824, 826, 832, 834, 839, 841, 846, 848, 854, 856, 862, 864, 867, 868, 869, 885, 887, 889, 890, 894, 897, 898, 905, 912, 921, 931, 950, 951, 954, 958, 959, 960, 962, 963, 964, 966, 967, 969, 970, 976, 978, 980, 981, 984, 986, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1031, 1033, 1034, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1080, 1081, 1091, 1101, 1111, 1125, 1134, 1146, 1147, 1150, 1185, 1186, 1187, 1188, 1189, 1190, 1193, 1196, 1197, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1220], "contain": [0, 8, 12, 13, 432, 786, 788, 789, 931, 1166, 1193, 1194, 1195, 1196, 1197, 1201, 1210, 1211, 1212, 1214, 1215, 1217, 1218], "function": [0, 9, 14, 15, 16, 20, 29, 37, 39, 40, 43, 59, 60, 65, 67, 68, 71, 79, 94, 103, 373, 379, 381, 382, 387, 394, 401, 406, 408, 409, 414, 425, 439, 440, 447, 448, 455, 456, 462, 465, 466, 473, 474, 480, 484, 488, 492, 503, 504, 505, 509, 514, 520, 526, 532, 538, 542, 547, 550, 553, 555, 558, 565, 569, 575, 581, 606, 613, 619, 625, 759, 760, 761, 762, 763, 764, 765, 768, 805, 808, 810, 812, 815, 864, 876, 883, 884, 885, 887, 892, 893, 894, 900, 904, 905, 906, 912, 921, 926, 927, 929, 930, 931, 942, 943, 950, 951, 954, 958, 959, 962, 967, 968, 974, 975, 976, 977, 978, 979, 983, 984, 985, 986, 1000, 1004, 1005, 1009, 1010, 1014, 1015, 1020, 1021, 1025, 1026, 1031, 1036, 1037, 1041, 1042, 1043, 1049, 1050, 1055, 1056, 1061, 1062, 1067, 1068, 1073, 1074, 1077, 1080, 1081, 1091, 1101, 1111, 1125, 1126, 1134, 1136, 1146, 1147, 1150, 1157, 1167, 1173, 1174, 1175, 1176, 1181, 1185, 1191, 1193, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1206, 1209, 1211, 1212, 1219], "which": [0, 17, 24, 27, 33, 35, 38, 40, 46, 47, 60, 64, 66, 68, 74, 75, 82, 84, 86, 93, 95, 101, 107, 108, 109, 111, 112, 371, 376, 379, 381, 386, 390, 392, 396, 399, 403, 406, 413, 417, 421, 422, 428, 440, 448, 456, 466, 474, 478, 482, 483, 485, 486, 489, 490, 496, 503, 506, 507, 511, 512, 516, 518, 523, 524, 525, 528, 529, 534, 536, 539, 540, 541, 544, 545, 548, 549, 551, 552, 554, 555, 559, 560, 562, 564, 566, 567, 568, 572, 573, 574, 578, 579, 584, 604, 605, 623, 624, 631, 632, 633, 635, 636, 638, 641, 642, 645, 647, 651, 653, 657, 659, 663, 664, 668, 670, 695, 696, 700, 701, 705, 706, 709, 710, 713, 714, 718, 719, 722, 723, 727, 728, 731, 734, 735, 736, 737, 762, 763, 764, 781, 921, 931, 960, 964, 967, 968, 977, 985, 988, 1042, 1080, 1187, 1190, 1193, 1196, 1204, 1207, 1210, 1211, 1214, 1217, 1218, 1219, 1220], "ar": [0, 14, 17, 24, 27, 33, 35, 38, 40, 46, 47, 64, 66, 68, 74, 75, 76, 78, 79, 82, 84, 86, 93, 95, 101, 107, 108, 109, 110, 215, 365, 371, 372, 376, 379, 386, 390, 392, 396, 399, 403, 406, 413, 417, 421, 422, 428, 437, 438, 444, 445, 452, 453, 461, 464, 472, 478, 482, 483, 485, 486, 489, 490, 491, 492, 496, 497, 499, 503, 504, 506, 507, 511, 512, 516, 518, 519, 523, 524, 525, 528, 529, 534, 536, 539, 540, 541, 544, 545, 548, 549, 551, 552, 554, 555, 559, 560, 562, 564, 566, 567, 572, 573, 578, 579, 584, 636, 638, 653, 659, 664, 670, 696, 701, 706, 736, 753, 754, 755, 768, 771, 817, 823, 824, 826, 833, 834, 840, 841, 847, 848, 855, 856, 863, 864, 885, 887, 894, 912, 918, 921, 922, 923, 931, 954, 960, 964, 986, 988, 1000, 1005, 1010, 1015, 1021, 1026, 1028, 1029, 1030, 1031, 1037, 1042, 1080, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1185, 1195, 1196, 1198, 1199, 1201, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "meant": 0, "call": [0, 3, 14, 16, 27, 39, 40, 67, 68, 512, 912, 921, 950, 951, 954, 958, 959, 986, 1042, 1080, 1081, 1091, 1101, 1111, 1125, 1134, 1146, 1147, 1150, 1193, 1196, 1206, 1208, 1214, 1215, 1217, 1220], "from": [0, 4, 17, 18, 23, 32, 45, 53, 57, 58, 59, 61, 73, 75, 77, 80, 118, 119, 120, 121, 123, 128, 132, 134, 215, 248, 253, 321, 322, 346, 347, 363, 364, 367, 368, 371, 372, 375, 379, 381, 385, 395, 402, 406, 408, 412, 419, 427, 437, 438, 439, 442, 444, 445, 447, 450, 452, 453, 455, 458, 460, 461, 462, 463, 464, 465, 469, 471, 472, 473, 476, 478, 479, 481, 483, 486, 490, 493, 496, 500, 507, 508, 510, 515, 522, 525, 527, 533, 536, 540, 543, 545, 549, 552, 560, 562, 567, 571, 573, 577, 583, 604, 605, 610, 622, 623, 624, 629, 633, 639, 648, 649, 654, 697, 698, 715, 724, 729, 730, 762, 763, 764, 768, 774, 776, 777, 781, 785, 786, 787, 788, 789, 814, 912, 915, 916, 934, 947, 954, 963, 986, 1042, 1080, 1125, 1134, 1150, 1166, 1187, 1188, 1189, 1190, 1194, 1195, 1196, 1200, 1201, 1203, 1204, 1206, 1208, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1220], "top": [0, 463, 643, 1191, 1194, 1196, 1204, 1220], "level": [0, 1, 3, 10, 21, 23, 31, 32, 44, 45, 47, 51, 53, 61, 72, 73, 365, 367, 368, 369, 370, 372, 375, 383, 385, 387, 395, 402, 410, 412, 414, 426, 427, 435, 441, 442, 449, 450, 457, 458, 467, 469, 476, 481, 500, 510, 515, 521, 522, 527, 533, 543, 570, 571, 576, 577, 582, 583, 607, 610, 622, 626, 629, 637, 639, 715, 724, 738, 740, 741, 745, 759, 760, 761, 762, 763, 764, 771, 871, 872, 873, 874, 891, 915, 916, 921, 922, 923, 929, 930, 931, 934, 955, 963, 971, 972, 986, 988, 991, 1019, 1028, 1029, 1035, 1047, 1087, 1097, 1107, 1118, 1126, 1128, 1136, 1139, 1157, 1159, 1167, 1168, 1183, 1191, 1193, 1194, 1206], "code": [0, 215, 671, 1204, 1206, 1207, 1208], "mbook": [0, 1, 420, 781, 782, 783, 784, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "modelbook": [0, 1, 420, 432, 433, 434, 435, 436, 781, 783, 784, 1194, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "The": [0, 1, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 123, 201, 205, 209, 213, 214, 215, 221, 230, 247, 248, 298, 299, 312, 315, 316, 318, 319, 323, 324, 325, 326, 327, 328, 329, 332, 333, 335, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 686, 687, 689, 690, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1077, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1173, 1175, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1194, 1196, 1198, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "book": [0, 1, 89, 90, 119, 367, 420, 633, 634, 644, 649, 655, 661, 666, 693, 698, 703, 781, 783, 784, 785, 786, 787, 1205, 1207, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219], "farm": [0, 1, 11, 20, 27, 29, 30, 35, 37, 40, 43, 47, 52, 57, 59, 60, 63, 65, 71, 75, 77, 79, 80, 89, 90, 94, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 116, 246, 365, 366, 367, 368, 369, 370, 373, 382, 394, 401, 409, 420, 421, 422, 425, 432, 437, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 462, 463, 465, 466, 468, 470, 471, 473, 474, 475, 477, 480, 484, 488, 492, 493, 503, 504, 505, 509, 514, 520, 526, 529, 532, 536, 538, 542, 547, 550, 553, 556, 558, 565, 569, 575, 581, 604, 606, 608, 609, 613, 614, 615, 619, 620, 621, 623, 624, 625, 627, 628, 631, 632, 635, 636, 638, 641, 642, 645, 646, 647, 648, 649, 651, 652, 653, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 687, 692, 693, 695, 696, 700, 701, 705, 706, 709, 710, 713, 714, 718, 719, 722, 723, 727, 728, 729, 730, 731, 732, 733, 738, 739, 740, 741, 742, 745, 746, 757, 758, 759, 760, 761, 762, 763, 764, 769, 770, 772, 773, 774, 776, 777, 778, 779, 782, 864, 885, 887, 894, 899, 905, 908, 912, 928, 950, 951, 954, 955, 956, 957, 958, 959, 962, 967, 976, 978, 984, 986, 988, 996, 997, 1081, 1091, 1101, 1111, 1125, 1131, 1132, 1134, 1144, 1145, 1146, 1147, 1150, 1162, 1163, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1206, 1207, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "windfarm": [0, 1, 113, 114, 115, 116, 117, 365, 366, 367, 368, 369, 370, 420, 729, 730, 864, 887, 899, 908, 928, 1194, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "wind": [0, 1, 27, 30, 84, 89, 90, 113, 114, 115, 116, 246, 310, 311, 320, 321, 322, 326, 327, 345, 346, 347, 353, 355, 365, 366, 367, 368, 369, 370, 379, 392, 393, 399, 400, 420, 421, 512, 513, 545, 546, 561, 563, 567, 568, 573, 574, 579, 580, 585, 588, 591, 594, 597, 604, 611, 612, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 716, 729, 730, 732, 733, 746, 759, 760, 761, 762, 763, 764, 772, 774, 776, 777, 781, 785, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 813, 816, 864, 885, 887, 894, 899, 905, 908, 912, 928, 954, 967, 976, 978, 984, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1201, 1202, 1203, 1205, 1206, 1207, 1210, 1211, 1212, 1214, 1215, 1217, 1218, 1220], "chunk": [0, 1, 12, 14, 15, 20, 23, 29, 32, 37, 43, 45, 53, 61, 65, 71, 73, 94, 103, 373, 375, 382, 385, 394, 395, 401, 402, 409, 412, 425, 427, 442, 450, 458, 469, 476, 480, 481, 484, 488, 500, 505, 509, 510, 514, 515, 520, 522, 526, 527, 532, 533, 538, 542, 543, 547, 550, 553, 558, 565, 569, 571, 575, 577, 581, 583, 606, 610, 613, 619, 622, 625, 629, 639, 715, 724, 962, 963, 1210, 1213, 1215, 1216, 1218, 1219, 1220], "dict": [0, 1, 4, 5, 7, 10, 12, 13, 15, 16, 20, 23, 27, 28, 29, 32, 34, 37, 39, 43, 45, 52, 53, 61, 63, 65, 67, 71, 73, 77, 79, 94, 98, 102, 107, 108, 109, 120, 121, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 379, 381, 382, 385, 394, 395, 399, 400, 401, 402, 406, 408, 409, 412, 419, 420, 425, 427, 429, 430, 431, 432, 437, 438, 442, 443, 450, 451, 453, 458, 459, 461, 469, 470, 476, 477, 478, 479, 480, 481, 484, 488, 492, 500, 504, 505, 507, 508, 509, 510, 514, 515, 518, 519, 520, 522, 525, 526, 527, 532, 533, 538, 541, 542, 543, 547, 550, 553, 558, 561, 563, 565, 567, 568, 569, 571, 573, 574, 575, 577, 579, 580, 581, 583, 586, 589, 592, 595, 598, 602, 610, 616, 617, 622, 629, 631, 632, 633, 634, 635, 636, 638, 639, 642, 644, 645, 647, 649, 651, 653, 655, 657, 659, 661, 664, 666, 668, 670, 691, 693, 695, 696, 698, 701, 702, 703, 706, 707, 708, 711, 712, 715, 716, 717, 720, 721, 724, 731, 733, 743, 744, 745, 753, 754, 755, 759, 760, 761, 762, 763, 764, 768, 771, 776, 777, 780, 785, 786, 794, 799, 800, 818, 828, 836, 843, 850, 858, 865, 879, 880, 886, 888, 895, 906, 912, 914, 915, 916, 955, 956, 957, 962, 963, 967, 968, 976, 977, 979, 984, 985, 987, 991, 996, 997, 1001, 1006, 1011, 1016, 1032, 1038, 1042, 1080, 1085, 1095, 1105, 1115, 1128, 1131, 1132, 1135, 1139, 1144, 1145, 1156, 1159, 1162, 1163, 1165, 1166, 1167, 1168, 1173, 1175, 1181, 1183, 1184, 1193, 1201, 1210, 1211, 1216], "choic": [0, 1, 89, 96, 319, 342, 725, 726, 731, 753, 754, 755, 988, 1167, 1168, 1203, 1214, 1217, 1218, 1219, 1220], "parallel": [0, 1, 14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 371, 379, 390, 392, 399, 406, 417, 421, 422, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 960, 1042, 1080, 1168, 1206, 1207, 1211, 1214, 1218, 1219], "dask": [0, 1, 14, 1167, 1168, 1201, 1206, 1207, 1218], "e": [0, 1, 14, 419, 478, 479, 512, 513, 549, 552, 768, 800, 912, 942, 943, 954, 986, 1042, 1080, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1166, 1184, 1194, 1196, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1220], "g": [0, 1, 512, 513, 768, 800, 1042, 1080, 1166, 1184, 1194, 1196, 1206, 1207, 1210, 1213, 1217, 1220], "state": [0, 1, 8, 17, 18, 22, 25, 26, 29, 52, 59, 60, 75, 77, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 102, 104, 105, 107, 112, 307, 354, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 439, 440, 447, 448, 455, 456, 462, 465, 466, 473, 474, 478, 479, 490, 492, 503, 504, 505, 509, 514, 520, 526, 532, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 608, 609, 614, 615, 620, 621, 627, 628, 631, 632, 635, 636, 641, 642, 645, 646, 647, 651, 652, 657, 658, 663, 668, 669, 687, 690, 695, 700, 705, 710, 714, 719, 723, 728, 729, 730, 731, 738, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 778, 781, 782, 912, 934, 957, 960, 961, 965, 966, 968, 977, 985, 988, 997, 1132, 1145, 1163, 1192, 1193, 1196, 1197, 1200, 1203, 1206, 1207, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "1000": [0, 1, 303, 512, 513, 752, 1192, 1210, 1211, 1213, 1215, 1216, 1218, 1219, 1220], "verbos": [0, 1, 3, 9, 10, 14, 17, 21, 23, 27, 31, 32, 35, 40, 44, 45, 47, 48, 51, 53, 57, 61, 64, 68, 72, 73, 75, 84, 93, 95, 97, 101, 106, 110, 113, 115, 365, 367, 368, 369, 370, 371, 372, 375, 379, 383, 385, 387, 390, 392, 395, 399, 402, 406, 410, 412, 414, 417, 421, 422, 426, 427, 432, 435, 437, 441, 442, 444, 449, 450, 452, 457, 458, 460, 463, 467, 469, 471, 476, 478, 481, 483, 486, 490, 496, 500, 503, 507, 510, 512, 515, 518, 521, 522, 524, 527, 529, 533, 536, 540, 543, 545, 549, 552, 555, 560, 562, 564, 567, 570, 571, 573, 576, 577, 579, 582, 583, 585, 588, 591, 594, 597, 600, 604, 607, 610, 611, 616, 622, 623, 626, 629, 630, 633, 637, 639, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 715, 716, 720, 724, 725, 738, 740, 741, 759, 760, 761, 762, 763, 764, 771, 864, 871, 872, 873, 874, 885, 887, 891, 894, 905, 912, 915, 916, 921, 922, 923, 929, 930, 931, 934, 954, 955, 960, 963, 967, 971, 972, 976, 978, 984, 986, 991, 1000, 1005, 1010, 1015, 1019, 1021, 1026, 1028, 1029, 1031, 1035, 1037, 1043, 1047, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1087, 1091, 1097, 1101, 1107, 1111, 1118, 1125, 1126, 1128, 1134, 1136, 1139, 1150, 1157, 1159, 1167, 1168, 1172, 1183, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "int": [0, 1, 3, 10, 21, 23, 25, 31, 32, 44, 45, 51, 53, 55, 59, 60, 61, 72, 73, 77, 79, 81, 87, 89, 90, 92, 109, 115, 116, 123, 144, 248, 262, 294, 365, 367, 368, 369, 370, 372, 375, 377, 379, 381, 383, 385, 387, 388, 395, 397, 402, 404, 406, 408, 410, 412, 414, 415, 426, 427, 435, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 453, 455, 456, 457, 458, 461, 462, 465, 466, 467, 469, 473, 474, 476, 481, 492, 494, 496, 497, 500, 501, 510, 515, 521, 522, 527, 533, 543, 570, 571, 576, 577, 582, 583, 607, 610, 616, 617, 622, 626, 629, 637, 639, 653, 659, 664, 670, 696, 701, 706, 715, 724, 729, 730, 731, 736, 740, 741, 752, 759, 760, 761, 762, 763, 764, 771, 774, 776, 777, 864, 865, 867, 868, 869, 871, 872, 873, 874, 876, 877, 878, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 897, 898, 900, 901, 903, 905, 906, 909, 911, 912, 914, 915, 916, 921, 922, 923, 925, 929, 930, 931, 933, 934, 937, 941, 942, 943, 944, 945, 946, 947, 948, 949, 954, 955, 957, 960, 961, 963, 965, 967, 969, 970, 971, 972, 974, 976, 978, 980, 981, 983, 984, 986, 988, 990, 991, 993, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1055, 1056, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1077, 1081, 1082, 1087, 1091, 1092, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1107, 1111, 1112, 1117, 1118, 1120, 1122, 1124, 1125, 1126, 1128, 1132, 1134, 1135, 1136, 1138, 1139, 1141, 1143, 1145, 1149, 1150, 1157, 1159, 1163, 1166, 1167, 1168, 1183, 1187, 1188, 1189, 1190, 1192, 1209], "0": [0, 1, 3, 10, 14, 17, 21, 23, 27, 31, 32, 35, 40, 44, 45, 47, 48, 51, 53, 57, 61, 64, 68, 72, 73, 75, 78, 84, 93, 95, 97, 101, 106, 110, 115, 123, 128, 133, 183, 206, 248, 252, 298, 303, 365, 367, 368, 369, 370, 371, 375, 379, 380, 383, 385, 387, 390, 391, 392, 395, 399, 402, 406, 407, 410, 412, 414, 417, 418, 419, 421, 422, 426, 427, 432, 435, 437, 441, 442, 444, 449, 450, 452, 457, 458, 460, 463, 467, 469, 471, 476, 478, 481, 483, 486, 490, 491, 496, 499, 500, 503, 507, 510, 512, 513, 515, 518, 521, 522, 524, 525, 527, 529, 533, 536, 540, 543, 545, 549, 552, 555, 560, 562, 564, 567, 568, 570, 571, 573, 574, 576, 577, 579, 580, 582, 583, 585, 588, 591, 594, 597, 600, 604, 607, 610, 611, 616, 617, 622, 623, 624, 626, 629, 630, 633, 637, 639, 640, 643, 644, 648, 649, 654, 655, 660, 661, 665, 666, 671, 686, 692, 693, 697, 698, 702, 703, 707, 711, 715, 716, 720, 724, 725, 731, 740, 741, 757, 759, 760, 761, 762, 763, 764, 771, 785, 801, 803, 805, 809, 810, 813, 815, 864, 871, 872, 873, 874, 885, 887, 891, 894, 905, 912, 915, 916, 921, 922, 923, 929, 930, 931, 934, 954, 955, 960, 963, 967, 968, 971, 972, 976, 978, 984, 986, 991, 1000, 1005, 1010, 1015, 1019, 1021, 1026, 1028, 1029, 1031, 1035, 1037, 1042, 1043, 1047, 1050, 1056, 1057, 1062, 1068, 1074, 1077, 1080, 1081, 1087, 1091, 1097, 1101, 1107, 1111, 1118, 1125, 1126, 1128, 1134, 1136, 1139, 1150, 1157, 1159, 1167, 1168, 1183, 1188, 1189, 1192, 1201, 1202, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "mean": [0, 1, 31, 44, 72, 110, 123, 211, 248, 731, 738, 743, 746, 747, 750, 753, 754, 755, 762, 774, 776, 777, 967, 968, 976, 977, 985, 1042, 1056, 1057, 1080, 1197, 1199, 1206, 1211, 1213, 1218, 1219], "silent": [0, 1, 3, 10, 23, 31, 32, 44, 45, 51, 53, 61, 72, 73, 115, 365, 367, 368, 369, 370, 375, 385, 387, 395, 402, 412, 414, 427, 435, 442, 450, 458, 469, 476, 481, 500, 510, 515, 521, 522, 527, 533, 543, 571, 577, 583, 607, 610, 622, 626, 629, 637, 639, 715, 724, 740, 741, 771, 871, 872, 873, 874, 891, 915, 916, 921, 922, 923, 929, 930, 931, 934, 955, 963, 971, 972, 991, 1019, 1028, 1029, 1035, 1047, 1087, 1097, 1107, 1118, 1126, 1128, 1136, 1139, 1157, 1159, 1167, 1168, 1183], "dbook": [0, 1, 367, 1209], "databook": [0, 1, 118, 119, 367, 786, 787, 788, 789, 790, 791, 792, 793, 1194, 1201], "data": [0, 1, 4, 8, 12, 13, 14, 15, 16, 17, 20, 23, 27, 29, 32, 35, 37, 39, 40, 43, 45, 47, 48, 52, 53, 57, 59, 60, 61, 63, 64, 65, 67, 68, 71, 73, 75, 77, 79, 80, 84, 89, 93, 94, 95, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 119, 120, 121, 123, 195, 197, 215, 248, 365, 366, 367, 368, 371, 372, 373, 375, 379, 381, 382, 385, 390, 392, 394, 395, 399, 400, 401, 402, 406, 408, 409, 412, 417, 419, 421, 422, 425, 427, 437, 439, 440, 442, 443, 444, 447, 448, 450, 451, 452, 455, 456, 458, 459, 460, 462, 463, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 488, 490, 492, 493, 496, 500, 503, 505, 507, 508, 509, 510, 512, 514, 515, 517, 518, 520, 522, 524, 525, 526, 527, 529, 531, 532, 533, 536, 537, 538, 540, 541, 542, 543, 545, 547, 549, 550, 552, 553, 555, 556, 558, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 573, 574, 575, 577, 579, 580, 581, 583, 585, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 602, 604, 606, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 687, 688, 689, 690, 692, 693, 695, 696, 697, 700, 701, 702, 705, 706, 707, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 738, 743, 744, 746, 747, 749, 750, 751, 752, 753, 754, 755, 757, 765, 768, 769, 770, 771, 772, 774, 776, 777, 778, 781, 783, 786, 787, 793, 794, 799, 800, 803, 809, 813, 864, 872, 873, 885, 887, 894, 905, 912, 929, 930, 950, 951, 954, 958, 959, 960, 962, 963, 967, 971, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1126, 1134, 1136, 1146, 1147, 1150, 1157, 1165, 1192, 1193, 1194, 1195, 1196, 1200, 1201, 1202, 1203, 1205, 1206, 1207, 1210, 1211, 1214, 1215, 1216, 1217, 1220], "none": [0, 1, 3, 4, 8, 10, 14, 17, 22, 27, 29, 35, 40, 47, 48, 52, 57, 58, 64, 68, 71, 75, 77, 79, 84, 85, 89, 90, 91, 92, 93, 95, 96, 97, 101, 106, 110, 113, 114, 123, 156, 167, 248, 274, 284, 365, 367, 369, 370, 371, 372, 374, 379, 381, 384, 387, 390, 392, 393, 399, 400, 406, 408, 411, 414, 417, 421, 422, 429, 431, 432, 434, 436, 437, 438, 444, 445, 452, 453, 460, 461, 463, 464, 471, 472, 478, 483, 486, 490, 492, 496, 503, 507, 512, 518, 524, 525, 529, 536, 540, 545, 549, 552, 555, 556, 560, 562, 564, 567, 568, 573, 574, 579, 580, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 624, 630, 633, 640, 643, 648, 649, 654, 660, 661, 665, 666, 692, 693, 697, 702, 707, 708, 711, 716, 717, 720, 725, 729, 730, 731, 734, 735, 736, 737, 738, 740, 745, 752, 757, 759, 760, 761, 762, 763, 764, 769, 770, 771, 772, 774, 776, 777, 778, 780, 781, 782, 783, 785, 786, 787, 792, 815, 834, 836, 841, 843, 848, 850, 864, 865, 867, 868, 869, 885, 887, 888, 889, 890, 894, 895, 897, 898, 905, 906, 912, 914, 915, 916, 921, 931, 934, 954, 960, 967, 968, 969, 970, 976, 977, 978, 980, 981, 984, 985, 986, 988, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1031, 1032, 1033, 1034, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1078, 1080, 1081, 1082, 1085, 1091, 1092, 1095, 1101, 1102, 1105, 1111, 1112, 1115, 1125, 1134, 1135, 1150, 1166, 1167, 1168, 1201, 1210, 1212, 1213, 1217, 1220], "default": [0, 1, 4, 22, 85, 123, 215, 248, 367, 374, 379, 384, 406, 411, 434, 438, 444, 445, 452, 453, 461, 463, 464, 472, 508, 556, 624, 671, 686, 693, 734, 735, 736, 737, 740, 752, 772, 775, 781, 794, 931, 934, 1042, 1080, 1166, 1174, 1192, 1201, 1206, 1209, 1210, 1211, 1212, 1213, 1215, 1217, 1218, 1220], "keep_model": [0, 1, 2, 3, 934], "list": [0, 1, 3, 10, 12, 13, 16, 17, 18, 19, 22, 24, 27, 33, 38, 39, 40, 41, 42, 43, 46, 57, 58, 66, 67, 68, 69, 70, 71, 74, 75, 76, 82, 84, 85, 86, 89, 90, 91, 92, 99, 102, 113, 115, 117, 118, 248, 261, 365, 369, 370, 371, 372, 374, 376, 379, 381, 384, 386, 387, 390, 392, 396, 399, 403, 406, 408, 411, 413, 414, 417, 428, 436, 438, 445, 453, 461, 464, 472, 478, 479, 482, 485, 486, 487, 489, 497, 503, 504, 506, 507, 508, 511, 516, 523, 525, 528, 529, 534, 539, 540, 541, 544, 548, 551, 554, 559, 566, 572, 578, 584, 587, 590, 593, 596, 599, 603, 740, 743, 744, 747, 749, 750, 751, 771, 774, 776, 777, 785, 786, 788, 791, 793, 794, 814, 825, 826, 827, 864, 865, 867, 868, 869, 870, 881, 882, 885, 887, 888, 889, 890, 894, 895, 897, 898, 903, 905, 906, 911, 914, 921, 931, 934, 948, 952, 953, 955, 960, 964, 967, 968, 969, 970, 976, 977, 978, 980, 981, 984, 985, 988, 998, 999, 1002, 1003, 1007, 1008, 1012, 1013, 1017, 1018, 1023, 1024, 1033, 1034, 1039, 1040, 1042, 1045, 1046, 1052, 1053, 1058, 1059, 1064, 1065, 1070, 1071, 1080, 1090, 1100, 1110, 1123, 1124, 1133, 1148, 1149, 1164, 1166, 1191, 1193, 1194, 1195, 1206, 1209, 1212, 1215], "str": [0, 1, 7, 12, 13, 15, 16, 20, 24, 27, 29, 33, 34, 37, 38, 39, 43, 46, 48, 52, 56, 62, 63, 65, 66, 67, 71, 74, 75, 76, 77, 79, 82, 86, 89, 90, 94, 95, 96, 99, 100, 102, 107, 108, 109, 111, 112, 113, 114, 117, 120, 121, 123, 174, 215, 248, 290, 303, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 379, 381, 382, 386, 394, 396, 399, 400, 401, 403, 406, 408, 409, 413, 419, 420, 425, 428, 429, 431, 432, 434, 436, 437, 438, 443, 451, 459, 470, 477, 478, 479, 480, 482, 484, 485, 486, 487, 488, 489, 492, 497, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 520, 523, 524, 525, 526, 528, 529, 531, 532, 534, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 558, 559, 561, 563, 565, 566, 567, 568, 569, 572, 573, 574, 575, 578, 579, 580, 581, 584, 587, 590, 593, 596, 599, 603, 611, 612, 623, 624, 631, 632, 633, 634, 635, 636, 638, 642, 644, 645, 647, 648, 649, 651, 653, 654, 655, 657, 659, 660, 661, 664, 665, 666, 668, 670, 689, 692, 693, 695, 696, 698, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 731, 734, 735, 736, 737, 743, 744, 747, 749, 750, 751, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 771, 774, 775, 776, 777, 780, 785, 786, 788, 789, 790, 791, 792, 793, 794, 799, 800, 818, 828, 836, 843, 850, 858, 865, 866, 870, 879, 880, 881, 882, 886, 887, 888, 895, 906, 914, 915, 916, 931, 934, 947, 949, 952, 953, 955, 962, 964, 967, 968, 976, 977, 979, 984, 985, 988, 998, 999, 1001, 1006, 1011, 1016, 1032, 1038, 1042, 1044, 1051, 1057, 1063, 1069, 1075, 1080, 1085, 1090, 1095, 1100, 1105, 1110, 1115, 1123, 1124, 1133, 1135, 1148, 1149, 1156, 1164, 1165, 1166, 1167, 1168, 1183, 1184, 1192, 1206, 1212], "keep": [0, 1, 887, 1197, 1208], "memori": [0, 1, 2, 5, 10, 23, 32, 45, 53, 61, 73, 123, 173, 248, 371, 372, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963, 1042, 1080, 1206, 1218], "do": [0, 1, 52, 1042, 1080, 1196, 1211, 1213, 1218, 1219], "final": [0, 1, 2, 3, 14, 17, 21, 27, 31, 34, 35, 40, 44, 47, 48, 51, 57, 64, 68, 72, 75, 84, 93, 95, 97, 101, 106, 108, 110, 111, 371, 379, 383, 390, 392, 399, 406, 410, 417, 421, 422, 426, 432, 435, 437, 441, 444, 449, 452, 457, 460, 463, 467, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 521, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 570, 573, 576, 579, 582, 585, 588, 591, 594, 597, 600, 604, 607, 611, 616, 623, 626, 630, 633, 637, 638, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 708, 709, 711, 713, 716, 717, 718, 720, 722, 725, 727, 864, 871, 872, 873, 885, 887, 894, 905, 912, 929, 930, 954, 960, 967, 971, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1126, 1134, 1136, 1150, 1157, 1167, 1169, 1174, 1176, 1178, 1211, 1216, 1219], "them": [0, 1, 815, 1042, 1080, 1210, 1219], "constructor": [0, 1, 7, 12, 13, 14, 17, 18, 27, 28, 35, 36, 40, 41, 47, 48, 49, 57, 58, 64, 68, 69, 75, 76, 84, 89, 90, 93, 95, 96, 97, 101, 106, 110, 113, 114, 118, 119, 371, 372, 379, 381, 390, 392, 393, 399, 400, 406, 408, 417, 421, 422, 423, 429, 431, 432, 434, 437, 438, 444, 445, 452, 453, 460, 461, 463, 464, 471, 472, 478, 479, 483, 486, 487, 490, 496, 497, 503, 504, 507, 508, 512, 513, 518, 519, 524, 525, 529, 530, 536, 537, 540, 541, 545, 546, 549, 552, 555, 556, 560, 561, 562, 563, 564, 567, 568, 573, 574, 579, 580, 585, 588, 591, 594, 597, 600, 601, 604, 605, 611, 612, 616, 617, 623, 624, 630, 633, 634, 640, 643, 644, 648, 649, 654, 655, 660, 661, 665, 666, 671, 686, 692, 693, 697, 698, 702, 703, 707, 708, 711, 712, 716, 717, 720, 721, 725, 726, 729, 730, 738, 739, 757, 758, 769, 770, 772, 773, 778, 779, 781, 782, 783, 784, 786, 787, 824, 825, 826, 827, 841, 842, 848, 849, 856, 857, 864, 865, 885, 886, 887, 888, 894, 895, 912, 914, 954, 960, 961, 967, 968, 976, 977, 978, 979, 984, 985, 986, 987, 1000, 1001, 1005, 1006, 1010, 1011, 1015, 1016, 1031, 1032, 1037, 1038, 1043, 1044, 1050, 1051, 1056, 1057, 1062, 1063, 1068, 1069, 1074, 1075, 1081, 1082, 1091, 1092, 1101, 1102, 1111, 1112, 1125, 1150, 1156, 1167, 1168, 1212, 1218], "print": [0, 9, 432, 436, 729, 731, 738, 757, 765, 767, 769, 772, 778, 781, 783, 864, 885, 887, 894, 902, 905, 910, 967, 976, 978, 984, 1167, 1172, 1209, 1210, 1211, 1212, 1213, 1215, 1217, 1218, 1219, 1220], "arg": [0, 7, 9, 366, 367, 429, 431, 748, 986, 987, 1026, 1027, 1167, 1172, 1173, 1174, 1175, 1176, 1181, 1184, 1195, 1201, 1219], "kwarg": [0, 7, 9, 57, 62, 97, 100, 123, 153, 248, 271, 366, 367, 429, 431, 437, 444, 452, 453, 460, 461, 463, 471, 503, 504, 508, 585, 588, 591, 594, 597, 600, 729, 731, 736, 738, 745, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 778, 780, 781, 783, 785, 794, 799, 800, 864, 865, 885, 886, 887, 888, 894, 895, 896, 905, 906, 907, 912, 914, 917, 954, 955, 967, 968, 976, 977, 978, 979, 984, 985, 986, 987, 991, 1001, 1005, 1006, 1010, 1011, 1016, 1021, 1022, 1026, 1027, 1032, 1037, 1038, 1042, 1080, 1125, 1128, 1134, 1135, 1139, 1150, 1156, 1159, 1165, 1166, 1167, 1172, 1173, 1174, 1175, 1176, 1181, 1184, 1201, 1219], "initi": [0, 6, 10, 13, 14, 17, 23, 27, 32, 34, 35, 40, 45, 47, 48, 53, 54, 57, 61, 63, 64, 68, 73, 75, 84, 93, 95, 97, 101, 106, 109, 110, 371, 372, 375, 379, 385, 390, 392, 395, 399, 402, 406, 412, 417, 421, 422, 427, 437, 442, 443, 444, 450, 451, 452, 458, 459, 460, 463, 469, 470, 471, 476, 477, 478, 481, 483, 486, 490, 496, 500, 503, 507, 510, 512, 515, 518, 522, 524, 527, 529, 533, 536, 540, 543, 545, 549, 552, 555, 560, 562, 564, 567, 571, 573, 577, 579, 583, 585, 588, 591, 594, 597, 600, 604, 610, 611, 616, 622, 623, 629, 630, 633, 639, 640, 643, 648, 653, 654, 659, 660, 664, 665, 670, 671, 692, 696, 697, 701, 702, 706, 707, 711, 715, 716, 720, 724, 725, 864, 874, 875, 885, 887, 891, 894, 905, 912, 932, 933, 934, 954, 955, 960, 963, 967, 972, 976, 978, 984, 986, 988, 989, 990, 991, 1000, 1005, 1010, 1015, 1019, 1021, 1022, 1026, 1027, 1031, 1035, 1037, 1043, 1047, 1050, 1056, 1062, 1068, 1074, 1077, 1078, 1081, 1086, 1087, 1091, 1096, 1097, 1101, 1106, 1107, 1111, 1116, 1117, 1118, 1125, 1127, 1128, 1134, 1137, 1138, 1139, 1150, 1158, 1159, 1167, 1170, 1174, 1176, 1177, 1179, 1180, 1206, 1211, 1213], "update_idata": [0, 10], "idata": [0, 2, 4, 5, 10, 23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963], "add": [0, 10, 17, 19, 40, 42, 68, 70, 83, 89, 91, 109, 110, 112, 113, 115, 118, 365, 366, 367, 368, 369, 370, 495, 502, 529, 531, 653, 659, 664, 670, 696, 701, 706, 707, 710, 711, 714, 716, 719, 720, 723, 725, 728, 731, 738, 740, 741, 759, 760, 761, 762, 763, 764, 786, 788, 789, 790, 791, 817, 818, 824, 826, 828, 834, 836, 841, 843, 848, 850, 856, 858, 864, 885, 887, 894, 896, 905, 907, 912, 915, 916, 917, 954, 967, 976, 978, 984, 986, 988, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1195, 1211, 1212, 1215, 1216, 1217, 1218], "option": [0, 1, 3, 4, 7, 8, 10, 15, 16, 18, 29, 39, 43, 52, 57, 58, 67, 71, 77, 79, 89, 90, 91, 92, 96, 102, 113, 119, 215, 365, 366, 367, 368, 369, 370, 372, 379, 381, 387, 390, 393, 400, 406, 408, 414, 417, 419, 425, 431, 434, 436, 438, 445, 453, 461, 464, 472, 492, 497, 504, 508, 525, 541, 556, 561, 563, 567, 568, 573, 574, 579, 580, 624, 649, 660, 661, 665, 666, 703, 707, 708, 711, 717, 720, 730, 731, 740, 745, 752, 759, 760, 761, 762, 763, 764, 770, 771, 774, 776, 777, 780, 781, 783, 785, 786, 787, 799, 800, 818, 822, 828, 832, 836, 839, 843, 846, 850, 854, 858, 862, 865, 868, 869, 886, 888, 889, 890, 895, 897, 898, 906, 914, 915, 916, 921, 931, 934, 955, 968, 969, 970, 976, 977, 979, 980, 981, 984, 985, 987, 988, 991, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1013, 1016, 1017, 1018, 1023, 1024, 1032, 1033, 1034, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1052, 1053, 1058, 1059, 1064, 1065, 1070, 1071, 1080, 1082, 1085, 1092, 1095, 1102, 1105, 1112, 1115, 1128, 1135, 1139, 1156, 1159, 1165, 1166, 1167, 1168, 1184, 1196, 1200, 1206, 1211, 1213, 1214, 1216, 1218, 1219], "updat": [0, 10, 57, 60, 112, 437, 440, 444, 448, 452, 456, 460, 463, 466, 471, 474, 512, 710, 714, 719, 723, 728, 912, 950, 951, 954, 958, 959, 986, 1125, 1134, 1146, 1147, 1150, 1211, 1220], "return": [0, 10, 14, 17, 27, 35, 40, 47, 48, 50, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 123, 126, 127, 128, 132, 135, 136, 138, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 183, 206, 248, 250, 251, 254, 255, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 371, 379, 390, 392, 399, 406, 417, 421, 422, 424, 437, 444, 446, 452, 454, 460, 463, 471, 478, 483, 486, 490, 496, 498, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 557, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 618, 623, 630, 633, 640, 643, 648, 650, 654, 656, 660, 662, 665, 667, 671, 692, 694, 697, 699, 702, 704, 707, 711, 716, 720, 725, 729, 748, 759, 760, 761, 762, 763, 764, 772, 781, 817, 824, 826, 834, 841, 848, 856, 864, 885, 887, 894, 905, 960, 967, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1028, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1217], "properti": [0, 5, 14, 17, 27, 35, 40, 47, 48, 54, 55, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 113, 116, 117, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 691, 692, 697, 702, 707, 711, 716, 720, 725, 864, 870, 875, 877, 878, 881, 882, 885, 887, 894, 899, 901, 903, 905, 908, 909, 911, 912, 918, 924, 925, 928, 935, 938, 939, 942, 943, 944, 945, 946, 948, 954, 960, 967, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1167, 1174, 1176, 1180], "idata_mem": [0, 5], "current": [0, 5, 215, 912, 925, 954, 986, 1125, 1134, 1150, 1196, 1214, 1216], "update_n_turbin": [0, 11], "reset": [0, 11, 379, 387, 390, 406, 414, 417, 529, 535, 1213, 1215], "number": [0, 11, 17, 25, 75, 81, 84, 87, 109, 113, 116, 123, 134, 183, 206, 214, 230, 248, 253, 294, 296, 370, 371, 372, 377, 379, 388, 390, 392, 397, 399, 404, 406, 415, 417, 444, 445, 490, 494, 496, 497, 501, 540, 624, 644, 649, 653, 655, 659, 660, 661, 664, 666, 670, 671, 686, 693, 696, 697, 698, 701, 702, 703, 706, 707, 708, 711, 712, 720, 721, 731, 736, 759, 760, 761, 762, 763, 764, 774, 776, 777, 864, 876, 877, 878, 885, 887, 892, 894, 900, 905, 912, 942, 943, 945, 946, 954, 957, 960, 965, 967, 974, 976, 978, 983, 984, 986, 997, 1000, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1014, 1015, 1020, 1021, 1025, 1026, 1031, 1032, 1036, 1037, 1041, 1042, 1043, 1049, 1050, 1055, 1056, 1061, 1062, 1063, 1067, 1068, 1073, 1074, 1077, 1080, 1081, 1082, 1091, 1092, 1101, 1102, 1111, 1112, 1125, 1132, 1134, 1135, 1145, 1150, 1163, 1168, 1197, 1199, 1211, 1212, 1214], "turbin": [0, 11, 27, 28, 29, 30, 34, 47, 52, 57, 59, 60, 77, 79, 89, 90, 91, 92, 93, 94, 95, 101, 102, 103, 104, 105, 107, 112, 113, 115, 116, 117, 120, 121, 308, 309, 310, 311, 328, 329, 341, 352, 359, 360, 365, 366, 367, 368, 369, 370, 421, 422, 423, 425, 432, 434, 437, 439, 440, 444, 447, 448, 452, 455, 456, 460, 462, 463, 465, 466, 471, 473, 474, 492, 503, 504, 505, 509, 512, 514, 520, 525, 526, 532, 536, 538, 542, 547, 550, 553, 558, 564, 565, 569, 575, 581, 604, 606, 608, 609, 611, 613, 614, 615, 616, 619, 620, 621, 623, 625, 627, 628, 631, 632, 635, 636, 641, 642, 645, 646, 647, 651, 652, 657, 658, 663, 668, 669, 687, 690, 695, 700, 705, 708, 710, 712, 714, 719, 721, 723, 728, 731, 736, 738, 740, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 762, 763, 764, 771, 772, 774, 776, 777, 778, 781, 783, 785, 864, 865, 885, 887, 888, 894, 895, 901, 903, 905, 906, 909, 911, 912, 914, 918, 944, 947, 948, 949, 954, 967, 968, 976, 977, 978, 984, 985, 986, 988, 1001, 1005, 1006, 1010, 1011, 1015, 1016, 1021, 1032, 1043, 1062, 1063, 1068, 1074, 1081, 1082, 1091, 1092, 1101, 1102, 1125, 1134, 1150, 1156, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1203, 1205, 1206, 1207, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1218, 1219, 1220], "accord": [0, 11, 57, 60, 367, 437, 440, 444, 448, 452, 456, 460, 463, 466, 471, 474, 594, 794, 799, 800, 1212, 1216], "self": [0, 11, 14, 17, 23, 27, 32, 35, 40, 45, 47, 48, 50, 53, 57, 61, 64, 68, 73, 75, 84, 93, 95, 97, 101, 106, 110, 123, 125, 126, 127, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 371, 375, 379, 385, 390, 392, 395, 399, 402, 406, 412, 417, 421, 422, 424, 427, 437, 442, 444, 446, 450, 452, 454, 458, 460, 463, 469, 471, 476, 478, 481, 483, 486, 490, 496, 497, 498, 500, 503, 507, 510, 512, 515, 518, 522, 524, 527, 529, 533, 536, 540, 543, 545, 549, 552, 555, 557, 560, 562, 564, 567, 571, 573, 577, 579, 583, 585, 588, 591, 594, 597, 600, 604, 610, 611, 616, 618, 622, 623, 629, 630, 633, 639, 640, 643, 648, 650, 654, 656, 660, 662, 665, 667, 671, 692, 694, 697, 699, 702, 704, 707, 711, 715, 716, 720, 724, 725, 736, 937, 941, 960, 963, 993, 995, 1021, 1022, 1026, 1027, 1077, 1078, 1085, 1095, 1105, 1115, 1120, 1122, 1141, 1143, 1174, 1176, 1177], "get_models_data": [0, 4], "creat": [0, 4, 8, 14, 17, 27, 35, 40, 47, 48, 56, 57, 59, 60, 63, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 123, 153, 248, 271, 371, 379, 390, 392, 399, 406, 417, 419, 421, 422, 437, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 462, 463, 465, 466, 470, 471, 473, 474, 477, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 729, 731, 772, 776, 778, 781, 783, 960, 988, 1195, 1200, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "xarrai": [0, 4, 8, 12, 13, 14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 371, 372, 379, 390, 392, 399, 406, 417, 421, 422, 478, 483, 486, 490, 496, 503, 507, 508, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 729, 730, 738, 739, 757, 758, 770, 773, 778, 779, 782, 960, 1193, 1206, 1211, 1217], "input": [0, 4, 15, 16, 39, 67, 97, 98, 99, 248, 294, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 503, 504, 507, 508, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 1042, 1080, 1183, 1191, 1196, 1203, 1206, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "new_point_data": [0, 8], "point": [0, 8, 17, 18, 20, 52, 64, 65, 68, 71, 75, 77, 78, 79, 80, 81, 83, 101, 104, 105, 107, 109, 112, 122, 123, 183, 206, 300, 301, 304, 305, 306, 369, 370, 373, 382, 394, 401, 409, 432, 444, 445, 463, 468, 471, 475, 480, 484, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 502, 604, 608, 609, 611, 614, 615, 616, 617, 620, 621, 623, 627, 628, 631, 632, 635, 636, 641, 642, 645, 647, 651, 653, 657, 659, 663, 664, 668, 670, 695, 696, 700, 701, 705, 706, 710, 714, 719, 723, 728, 757, 758, 759, 760, 761, 772, 773, 774, 776, 777, 781, 782, 817, 820, 821, 822, 823, 824, 826, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 860, 861, 862, 863, 912, 914, 962, 1042, 1080, 1081, 1082, 1085, 1091, 1092, 1095, 1101, 1102, 1105, 1111, 1112, 1115, 1135, 1166, 1185, 1186, 1192, 1193, 1196, 1199, 1201, 1206, 1209, 1210, 1211, 1213, 1214, 1216, 1217, 1218, 1219], "states_indic": [0, 8], "onli": [0, 8, 10, 134, 253, 365, 444, 604, 640, 641, 643, 646, 648, 652, 654, 658, 660, 663, 665, 669, 697, 700, 702, 705, 774, 776, 777, 815, 921, 1042, 1080, 1206, 1208, 1209, 1212, 1217, 1218, 1220], "finalize_model": [0, 3], "routin": [0, 3], "kept": [0, 3], "clear_mem": [0, 2], "fals": [0, 2, 35, 36, 47, 52, 60, 77, 79, 93, 123, 206, 365, 448, 456, 466, 474, 486, 487, 492, 529, 530, 549, 552, 648, 649, 729, 730, 731, 738, 740, 746, 752, 759, 760, 761, 762, 763, 764, 769, 771, 817, 818, 822, 824, 826, 828, 832, 834, 839, 841, 846, 848, 854, 856, 858, 862, 865, 921, 931, 988, 1166, 1184, 1201, 1206, 1210], "classmethod": [0, 7, 57, 62, 97, 100, 437, 444, 452, 460, 463, 471, 512, 517, 585, 588, 591, 594, 597, 600, 729, 738, 757, 765, 766, 767, 768, 769, 772, 775, 778, 781, 783, 794, 799, 800, 864, 885, 887, 894, 902, 905, 910, 912, 947, 949, 954, 967, 976, 978, 984, 986, 1125, 1134, 1150, 1167, 1171], "new": [0, 7, 57, 62, 63, 97, 100, 112, 123, 134, 153, 206, 215, 248, 253, 271, 296, 437, 443, 444, 451, 452, 459, 460, 463, 470, 471, 477, 585, 588, 591, 594, 597, 600, 710, 714, 719, 723, 728, 729, 738, 757, 765, 766, 769, 772, 778, 781, 783, 879, 880, 912, 919, 920, 954, 986, 1081, 1083, 1084, 1091, 1093, 1094, 1101, 1103, 1104, 1111, 1113, 1114, 1125, 1134, 1150, 1206, 1208, 1211, 1212], "algo_typ": [0, 7], "time": [0, 7, 57, 62, 97, 100, 372, 437, 444, 452, 460, 463, 471, 585, 588, 591, 594, 597, 600, 729, 738, 752, 757, 765, 766, 769, 772, 778, 781, 783, 960, 1042, 1080, 1197, 1206, 1208, 1209, 1210, 1213, 1214, 1215, 1218, 1219], "factori": [0, 7, 57, 62, 97, 100, 437, 444, 452, 460, 463, 471, 585, 588, 591, 594, 597, 600, 729, 738, 757, 765, 766, 769, 772, 778, 781, 783], "__repr__": [0, 14, 17, 27, 35, 40, 47, 48, 50, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 123, 161, 248, 278, 371, 379, 390, 392, 399, 406, 417, 421, 422, 424, 437, 444, 446, 452, 454, 460, 463, 471, 478, 483, 486, 490, 496, 498, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 557, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 618, 623, 630, 633, 640, 643, 648, 650, 654, 656, 660, 662, 665, 667, 671, 692, 694, 697, 699, 702, 704, 707, 711, 716, 720, 725, 960], "repr": [0, 14, 17, 27, 35, 40, 47, 48, 50, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 123, 161, 248, 278, 371, 379, 390, 392, 399, 406, 417, 421, 422, 424, 437, 444, 446, 452, 454, 460, 463, 471, 478, 483, 486, 490, 496, 498, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 557, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 618, 623, 630, 633, 640, 643, 648, 650, 654, 656, 660, 662, 665, 667, 671, 692, 694, 697, 699, 702, 704, 707, 711, 716, 720, 725, 960], "model_id": [0, 14, 17, 27, 35, 40, 47, 48, 55, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 960], "uniqu": [0, 14, 17, 27, 35, 40, 47, 48, 55, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 960], "id": [0, 14, 17, 27, 35, 40, 47, 48, 55, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 365, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 960], "type": [0, 14, 17, 23, 27, 32, 35, 40, 45, 47, 48, 53, 55, 57, 61, 64, 68, 73, 75, 84, 89, 90, 93, 95, 97, 101, 106, 110, 123, 134, 153, 215, 248, 253, 271, 371, 375, 379, 385, 390, 392, 395, 399, 402, 406, 412, 417, 421, 422, 427, 432, 434, 436, 437, 442, 444, 450, 452, 458, 460, 463, 469, 471, 476, 478, 481, 483, 486, 490, 496, 500, 503, 507, 510, 512, 515, 518, 522, 524, 527, 529, 533, 536, 540, 543, 545, 549, 552, 555, 560, 562, 564, 567, 571, 573, 577, 579, 583, 585, 588, 591, 594, 597, 600, 604, 610, 611, 616, 622, 623, 629, 630, 633, 639, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 715, 716, 720, 724, 725, 783, 785, 960, 963, 988, 1021, 1022, 1026, 1027, 1042, 1077, 1078, 1080, 1174, 1176, 1177, 1192, 1193, 1196, 1200, 1206, 1209, 1210, 1211, 1212, 1214, 1215, 1217, 1218, 1220], "var": [0, 14, 16, 17, 27, 35, 40, 47, 48, 56, 57, 64, 68, 75, 84, 93, 95, 97, 99, 101, 106, 110, 123, 244, 248, 314, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 487, 490, 496, 503, 507, 512, 518, 519, 524, 529, 531, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 603, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 708, 711, 712, 716, 720, 721, 725, 738, 743, 744, 747, 748, 749, 750, 751, 756, 757, 759, 760, 761, 762, 763, 764, 772, 774, 776, 777, 781, 864, 867, 885, 887, 894, 905, 912, 931, 947, 949, 954, 955, 956, 957, 960, 967, 976, 978, 984, 986, 996, 997, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1042, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1080, 1125, 1131, 1132, 1134, 1144, 1145, 1150, 1162, 1163, 1192], "v": [0, 14, 17, 27, 35, 40, 47, 48, 56, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 960, 1042, 1080, 1187, 1188], "specif": [0, 14, 17, 27, 35, 40, 47, 48, 56, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 215, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 960, 1201, 1218], "variabl": [0, 14, 15, 16, 17, 20, 24, 27, 29, 33, 35, 37, 38, 39, 40, 43, 46, 47, 48, 52, 56, 57, 63, 64, 65, 66, 67, 68, 71, 74, 75, 76, 77, 79, 82, 84, 86, 93, 94, 95, 97, 99, 101, 102, 106, 107, 108, 109, 110, 111, 112, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 371, 372, 373, 376, 379, 381, 382, 386, 390, 392, 394, 396, 399, 400, 401, 403, 406, 408, 409, 413, 417, 419, 421, 422, 425, 428, 437, 443, 444, 451, 452, 459, 460, 463, 470, 471, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 496, 497, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 518, 519, 520, 523, 524, 525, 526, 528, 529, 531, 532, 534, 535, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 578, 579, 580, 581, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 601, 603, 604, 611, 612, 616, 623, 624, 630, 631, 632, 633, 634, 635, 636, 638, 640, 642, 643, 644, 645, 647, 648, 649, 651, 653, 654, 655, 657, 659, 660, 661, 664, 665, 666, 668, 670, 671, 692, 693, 695, 696, 697, 698, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 725, 727, 728, 731, 743, 744, 747, 749, 750, 751, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 768, 769, 771, 772, 774, 775, 776, 777, 778, 780, 781, 783, 785, 864, 867, 868, 869, 872, 873, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 893, 894, 897, 898, 904, 905, 912, 915, 916, 919, 920, 921, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 940, 941, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 964, 967, 968, 969, 970, 971, 975, 976, 977, 978, 979, 980, 981, 984, 985, 986, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1031, 1033, 1034, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1080, 1081, 1083, 1084, 1086, 1088, 1089, 1090, 1091, 1093, 1094, 1096, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1108, 1109, 1110, 1111, 1113, 1114, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1191, 1192, 1195, 1196, 1197, 1198, 1206, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "name": [0, 5, 7, 12, 13, 14, 17, 24, 27, 28, 33, 34, 35, 38, 40, 46, 47, 48, 56, 57, 62, 63, 64, 66, 68, 74, 75, 77, 82, 84, 86, 89, 90, 93, 95, 96, 97, 99, 100, 101, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 120, 121, 310, 365, 368, 369, 370, 371, 372, 376, 379, 381, 386, 390, 392, 396, 399, 400, 403, 406, 408, 413, 417, 419, 421, 422, 428, 429, 431, 432, 436, 437, 438, 443, 444, 451, 452, 459, 460, 463, 470, 471, 477, 478, 479, 482, 483, 485, 486, 489, 490, 496, 497, 503, 506, 507, 508, 511, 512, 516, 518, 519, 523, 524, 525, 528, 529, 531, 534, 536, 539, 540, 544, 545, 546, 548, 549, 551, 552, 554, 555, 556, 559, 560, 561, 562, 563, 564, 566, 567, 568, 572, 573, 574, 578, 579, 580, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 603, 604, 611, 616, 623, 624, 630, 631, 632, 633, 634, 635, 636, 638, 640, 642, 643, 644, 645, 647, 648, 649, 651, 653, 654, 655, 657, 659, 660, 661, 664, 665, 666, 668, 670, 671, 692, 693, 695, 696, 697, 698, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 725, 727, 728, 729, 731, 738, 753, 754, 755, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 781, 783, 785, 786, 789, 792, 864, 865, 870, 879, 880, 881, 882, 885, 886, 887, 888, 894, 895, 902, 905, 906, 910, 912, 914, 934, 947, 949, 952, 953, 954, 955, 956, 957, 960, 964, 967, 968, 976, 977, 978, 979, 984, 985, 986, 988, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1010, 1011, 1015, 1016, 1021, 1022, 1026, 1031, 1032, 1037, 1038, 1043, 1044, 1050, 1051, 1056, 1057, 1062, 1063, 1068, 1069, 1074, 1075, 1077, 1078, 1081, 1090, 1091, 1100, 1101, 1110, 1111, 1123, 1124, 1125, 1131, 1132, 1133, 1134, 1135, 1144, 1145, 1148, 1149, 1150, 1156, 1162, 1163, 1164, 1166, 1192, 1194, 1201, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1218], "flag": [0, 14, 17, 27, 29, 35, 36, 40, 47, 48, 54, 57, 60, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 123, 201, 248, 368, 371, 372, 379, 390, 392, 399, 406, 417, 421, 422, 437, 440, 444, 448, 452, 456, 460, 463, 466, 471, 474, 478, 483, 486, 490, 496, 497, 503, 507, 512, 518, 524, 529, 530, 536, 537, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 649, 654, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 729, 730, 731, 740, 746, 752, 759, 760, 761, 762, 763, 764, 792, 822, 832, 839, 846, 854, 862, 864, 875, 885, 887, 894, 905, 912, 918, 921, 926, 931, 938, 954, 960, 967, 973, 976, 978, 982, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1048, 1050, 1054, 1056, 1060, 1062, 1066, 1068, 1072, 1074, 1076, 1077, 1079, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1167, 1168, 1174, 1176, 1180, 1208, 1211], "get_data": [0, 14, 17, 27, 35, 40, 47, 48, 52, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 689, 692, 697, 702, 707, 711, 716, 720, 725, 772, 774, 781, 960], "st_sel": [0, 14, 17, 27, 29, 35, 40, 47, 48, 52, 57, 64, 68, 75, 84, 93, 94, 95, 97, 101, 106, 110, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 504, 505, 507, 509, 512, 514, 518, 520, 524, 526, 529, 532, 536, 538, 540, 542, 545, 547, 549, 550, 552, 553, 555, 558, 560, 562, 564, 565, 567, 569, 573, 575, 579, 581, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 692, 697, 702, 707, 711, 716, 720, 725, 960], "upcast": [0, 14, 17, 27, 35, 40, 47, 48, 52, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 692, 697, 702, 707, 711, 716, 720, 725, 960], "getter": [0, 14, 17, 27, 35, 40, 47, 48, 52, 57, 64, 68, 75, 84, 93, 95, 97, 101, 106, 110, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 692, 697, 702, 707, 711, 716, 720, 725, 960], "entri": [0, 2, 4, 14, 17, 23, 27, 32, 35, 40, 45, 47, 48, 52, 53, 57, 61, 64, 68, 73, 75, 84, 89, 93, 95, 97, 101, 106, 110, 371, 375, 379, 385, 390, 392, 395, 399, 402, 406, 412, 417, 421, 422, 427, 437, 442, 444, 450, 452, 458, 460, 463, 469, 471, 476, 478, 481, 483, 486, 490, 496, 500, 503, 507, 510, 512, 515, 518, 522, 524, 527, 529, 533, 536, 540, 543, 545, 549, 552, 555, 560, 562, 564, 567, 571, 573, 577, 579, 583, 585, 588, 591, 594, 597, 600, 604, 610, 611, 616, 622, 623, 629, 630, 633, 639, 640, 643, 648, 654, 660, 665, 671, 689, 692, 697, 702, 707, 711, 715, 716, 720, 724, 725, 768, 800, 960, 963, 1042, 1080, 1195, 1206, 1209, 1216], "either": [0, 14, 17, 27, 35, 40, 47, 48, 52, 57, 64, 68, 75, 79, 84, 93, 95, 97, 101, 106, 110, 371, 379, 381, 390, 392, 399, 406, 408, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 479, 483, 486, 490, 492, 496, 503, 507, 512, 518, 524, 529, 536, 540, 541, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 692, 697, 702, 707, 711, 716, 720, 725, 786, 887, 888, 960, 988, 1201, 1203, 1216], "given": [0, 14, 17, 27, 35, 40, 47, 48, 52, 57, 64, 68, 75, 84, 89, 90, 93, 95, 97, 101, 104, 106, 110, 215, 371, 379, 390, 392, 399, 406, 417, 421, 422, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 556, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 608, 611, 614, 616, 620, 623, 624, 627, 630, 633, 640, 643, 648, 649, 654, 660, 661, 665, 666, 692, 693, 697, 702, 707, 711, 716, 720, 725, 738, 740, 745, 752, 756, 786, 792, 801, 804, 805, 810, 864, 872, 873, 885, 887, 894, 905, 912, 922, 923, 929, 930, 954, 960, 967, 971, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1028, 1029, 1031, 1037, 1042, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1080, 1081, 1091, 1101, 1111, 1125, 1126, 1134, 1136, 1150, 1157, 1167, 1173, 1174, 1175, 1176, 1181, 1195, 1196, 1197, 1201, 1202, 1206, 1216], "bool": [2, 27, 29, 35, 36, 52, 54, 60, 77, 79, 91, 92, 94, 112, 123, 206, 248, 296, 365, 368, 371, 372, 419, 440, 448, 456, 466, 474, 486, 487, 492, 496, 497, 505, 509, 514, 520, 526, 530, 532, 536, 537, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 631, 632, 635, 641, 642, 645, 647, 648, 649, 651, 657, 663, 668, 690, 695, 700, 705, 710, 714, 719, 723, 728, 729, 730, 731, 740, 746, 752, 759, 760, 761, 762, 763, 764, 771, 792, 818, 822, 828, 832, 836, 839, 843, 846, 850, 854, 858, 862, 864, 865, 875, 883, 884, 893, 904, 918, 921, 926, 931, 967, 968, 973, 975, 977, 978, 979, 982, 985, 988, 1048, 1054, 1060, 1066, 1072, 1076, 1079, 1081, 1082, 1085, 1095, 1105, 1115, 1166, 1167, 1168, 1180, 1184], "clear": [2, 1214], "includ": [2, 17, 23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 783, 788, 963, 1200, 1206, 1208, 1209, 1211, 1219, 1220], "ha": [4, 23, 32, 45, 53, 54, 61, 73, 375, 385, 395, 402, 412, 427, 436, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 875, 963, 1134, 1188, 1189, 1206, 1207, 1210, 1213, 1215, 1216, 1218], "exactli": [4, 23, 32, 45, 53, 61, 73, 123, 183, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963], "two": [4, 23, 32, 45, 53, 61, 73, 369, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 540, 543, 562, 571, 577, 579, 583, 610, 622, 629, 639, 715, 724, 815, 963, 1042, 1080, 1185, 1186, 1196, 1201, 1206, 1210, 1211, 1214, 1215, 1216, 1218, 1220], "data_var": [4, 23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963], "name_str": [4, 23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963], "dim_tupl": [4, 23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963], "data_ndarrai": [4, 23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963], "coord": [4, 23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963, 1042, 1080], "dim_name_str": [4, 23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963], "dim_arrai": [4, 23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963], "take": [4, 58, 123, 237, 248, 762, 763, 764], "": [4, 12, 13, 14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 123, 215, 248, 320, 321, 322, 327, 345, 346, 347, 355, 371, 372, 379, 390, 392, 399, 406, 417, 421, 422, 452, 453, 461, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 756, 759, 760, 761, 762, 763, 764, 815, 914, 921, 931, 960, 1135, 1156, 1203, 1206, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "dataset": [4, 8, 14, 16, 39, 67, 371, 372, 729, 730, 738, 739, 757, 758, 770, 773, 778, 779, 782, 1193, 1206, 1211, 1217], "kei": [5, 12, 13, 15, 20, 29, 37, 43, 52, 63, 65, 71, 77, 79, 94, 107, 108, 109, 123, 141, 248, 303, 373, 382, 394, 399, 400, 401, 406, 408, 409, 419, 425, 429, 430, 432, 433, 437, 438, 443, 451, 459, 470, 477, 480, 484, 488, 492, 505, 509, 514, 518, 519, 520, 526, 532, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 631, 632, 633, 634, 635, 636, 638, 642, 644, 645, 647, 649, 651, 653, 655, 657, 659, 661, 664, 666, 668, 670, 671, 689, 693, 695, 696, 698, 701, 703, 706, 707, 708, 712, 716, 717, 721, 753, 754, 755, 768, 771, 786, 793, 794, 798, 879, 880, 915, 916, 955, 956, 957, 962, 967, 988, 996, 997, 1131, 1132, 1144, 1145, 1162, 1163, 1166, 1192, 1212], "valu": [5, 15, 20, 29, 37, 43, 63, 65, 71, 77, 79, 94, 101, 104, 107, 108, 109, 123, 126, 127, 135, 136, 138, 140, 142, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 201, 206, 215, 248, 250, 251, 254, 255, 257, 258, 259, 264, 265, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 303, 337, 371, 372, 373, 379, 381, 382, 392, 393, 394, 399, 400, 401, 406, 408, 409, 419, 425, 432, 437, 438, 443, 451, 459, 470, 477, 480, 484, 486, 487, 488, 492, 505, 508, 509, 512, 514, 518, 519, 520, 526, 532, 538, 542, 547, 550, 553, 556, 558, 565, 569, 575, 579, 581, 594, 600, 601, 604, 608, 611, 614, 616, 620, 623, 624, 627, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 644, 645, 646, 647, 649, 651, 652, 653, 655, 657, 658, 659, 660, 661, 663, 664, 666, 668, 669, 670, 671, 686, 687, 690, 693, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 712, 716, 717, 721, 740, 745, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 771, 774, 776, 777, 785, 786, 805, 808, 810, 812, 864, 867, 868, 869, 872, 873, 879, 880, 885, 887, 889, 890, 894, 897, 898, 905, 912, 915, 916, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 935, 936, 937, 939, 940, 941, 950, 951, 954, 955, 956, 957, 958, 959, 962, 967, 969, 970, 971, 976, 978, 980, 981, 984, 986, 988, 989, 990, 992, 993, 994, 995, 996, 997, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1028, 1029, 1031, 1033, 1034, 1037, 1039, 1040, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1081, 1083, 1084, 1086, 1088, 1089, 1091, 1093, 1094, 1096, 1098, 1099, 1101, 1103, 1104, 1106, 1108, 1109, 1111, 1113, 1114, 1116, 1117, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1134, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1150, 1157, 1158, 1160, 1161, 1162, 1163, 1166, 1173, 1175, 1181, 1192, 1196, 1203, 1206, 1210, 1215, 1216, 1220], "select": [7, 27, 29, 57, 58, 62, 89, 90, 91, 92, 93, 94, 100, 112, 309, 371, 372, 379, 381, 387, 390, 406, 408, 414, 417, 422, 436, 503, 504, 505, 509, 514, 520, 526, 532, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 631, 632, 635, 641, 642, 645, 647, 651, 657, 663, 668, 695, 700, 705, 710, 714, 719, 723, 728, 766, 778, 780, 864, 865, 867, 868, 869, 885, 887, 888, 889, 890, 894, 895, 897, 898, 901, 903, 905, 906, 909, 911, 912, 914, 921, 931, 944, 948, 954, 967, 969, 970, 976, 978, 980, 981, 984, 986, 988, 1002, 1003, 1007, 1008, 1012, 1013, 1017, 1018, 1023, 1024, 1033, 1034, 1039, 1040, 1045, 1046, 1052, 1053, 1058, 1059, 1064, 1065, 1070, 1071, 1125, 1134, 1150, 1191, 1192, 1193, 1194, 1196, 1198, 1206, 1210, 1211, 1212, 1213, 1214, 1217, 1218], "deriv": [7, 62, 100, 766, 814, 864, 867, 885, 887, 894, 905, 921, 931, 967, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1201], "tupl": [7, 12, 13, 15, 16, 39, 67, 123, 229, 234, 248, 366, 367, 419, 431, 437, 438, 641, 663, 700, 705, 731, 756, 759, 760, 761, 762, 763, 764, 780, 785, 987, 1173, 1175, 1181, 1184], "addit": [7, 16, 39, 67, 102, 365, 366, 399, 400, 420, 453, 461, 504, 508, 561, 563, 568, 574, 580, 702, 703, 771, 780, 785, 865, 886, 888, 895, 906, 912, 914, 955, 968, 976, 977, 979, 984, 985, 991, 1128, 1135, 1139, 1156, 1159, 1165, 1166, 1183, 1206, 1216, 1218, 1219], "numpi": [8, 12, 15, 20, 26, 27, 29, 37, 43, 52, 59, 60, 65, 71, 77, 78, 79, 80, 83, 88, 89, 90, 91, 92, 94, 98, 102, 103, 104, 105, 107, 108, 109, 111, 112, 123, 134, 139, 248, 253, 369, 370, 373, 378, 382, 389, 394, 398, 401, 405, 409, 416, 425, 439, 440, 447, 448, 455, 456, 462, 465, 466, 468, 473, 474, 475, 480, 484, 488, 491, 492, 493, 495, 499, 502, 503, 504, 505, 509, 514, 520, 526, 531, 532, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 586, 589, 592, 595, 598, 602, 606, 608, 609, 613, 614, 615, 619, 620, 621, 625, 627, 628, 631, 632, 635, 636, 638, 641, 642, 645, 646, 647, 651, 652, 653, 657, 658, 659, 663, 664, 668, 669, 670, 687, 689, 690, 695, 696, 700, 701, 705, 706, 709, 710, 713, 714, 718, 719, 722, 723, 727, 728, 732, 781, 815, 816, 820, 821, 822, 823, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 860, 861, 862, 863, 867, 883, 884, 893, 904, 912, 914, 921, 924, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 956, 957, 962, 966, 975, 988, 989, 990, 992, 993, 994, 995, 996, 997, 1042, 1080, 1085, 1086, 1088, 1089, 1095, 1096, 1098, 1099, 1105, 1106, 1108, 1109, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1127, 1129, 1130, 1131, 1132, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1158, 1160, 1161, 1162, 1163, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1210, 1211, 1215, 1217, 1220], "ndarrai": [8, 15, 20, 26, 27, 29, 37, 43, 52, 59, 60, 65, 71, 77, 78, 79, 80, 83, 88, 89, 90, 91, 92, 94, 98, 102, 103, 104, 105, 107, 108, 109, 111, 112, 124, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 203, 204, 207, 208, 210, 211, 212, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 369, 370, 373, 378, 382, 389, 394, 398, 401, 405, 409, 416, 425, 439, 440, 447, 448, 455, 456, 462, 465, 466, 468, 473, 474, 475, 480, 484, 488, 491, 492, 493, 495, 499, 502, 503, 504, 505, 509, 514, 520, 526, 531, 532, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 586, 589, 592, 595, 598, 602, 606, 608, 609, 613, 614, 615, 619, 620, 621, 625, 627, 628, 631, 632, 635, 636, 638, 641, 642, 645, 646, 647, 651, 652, 653, 657, 658, 659, 663, 664, 668, 669, 670, 687, 689, 690, 695, 696, 700, 701, 705, 706, 709, 710, 713, 714, 718, 719, 722, 723, 727, 728, 732, 756, 781, 815, 816, 820, 821, 822, 823, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 860, 861, 862, 863, 867, 883, 884, 893, 904, 912, 914, 921, 924, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 956, 957, 962, 966, 975, 988, 989, 990, 992, 993, 994, 995, 996, 997, 1042, 1080, 1085, 1086, 1088, 1089, 1095, 1096, 1098, 1099, 1105, 1106, 1108, 1109, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1127, 1129, 1130, 1131, 1132, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1158, 1160, 1161, 1162, 1163, 1166, 1185, 1186, 1187, 1188, 1189, 1190, 1220], "shape": [8, 20, 26, 27, 29, 37, 43, 59, 60, 65, 71, 77, 78, 79, 80, 83, 88, 89, 90, 91, 92, 94, 98, 102, 103, 104, 105, 107, 108, 109, 111, 112, 123, 229, 248, 369, 370, 373, 378, 382, 389, 394, 398, 401, 405, 409, 416, 425, 439, 440, 447, 448, 455, 456, 462, 465, 466, 468, 473, 474, 475, 480, 484, 488, 491, 492, 493, 495, 499, 502, 503, 504, 505, 509, 514, 520, 526, 531, 532, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 586, 589, 592, 595, 598, 602, 606, 608, 609, 613, 614, 615, 619, 620, 621, 625, 627, 628, 631, 632, 635, 636, 638, 641, 642, 645, 646, 647, 651, 652, 653, 657, 658, 659, 663, 664, 668, 669, 670, 687, 690, 695, 696, 700, 701, 705, 706, 709, 710, 713, 714, 718, 719, 722, 723, 727, 728, 732, 781, 815, 816, 820, 821, 822, 823, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 860, 861, 862, 863, 867, 868, 869, 872, 873, 883, 884, 889, 890, 893, 897, 898, 904, 912, 914, 919, 920, 921, 922, 923, 924, 926, 927, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 950, 951, 956, 957, 958, 959, 962, 966, 969, 970, 971, 973, 975, 980, 981, 982, 989, 990, 992, 993, 994, 995, 996, 997, 1002, 1003, 1007, 1008, 1012, 1013, 1017, 1018, 1023, 1024, 1028, 1029, 1030, 1033, 1034, 1039, 1040, 1045, 1046, 1048, 1052, 1053, 1054, 1058, 1059, 1060, 1064, 1065, 1066, 1070, 1071, 1072, 1076, 1079, 1083, 1084, 1085, 1086, 1088, 1089, 1093, 1094, 1095, 1096, 1098, 1099, 1103, 1104, 1105, 1106, 1108, 1109, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1126, 1127, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1157, 1158, 1160, 1161, 1162, 1163, 1165, 1166, 1183, 1186, 1187, 1188, 1189, 1190, 1201, 1206, 1217, 1220], "n_state": [8, 20, 26, 27, 29, 37, 43, 52, 59, 60, 65, 71, 77, 79, 80, 88, 89, 90, 91, 92, 94, 102, 103, 104, 105, 107, 108, 109, 111, 112, 373, 378, 382, 389, 394, 398, 401, 405, 409, 416, 419, 425, 439, 440, 447, 448, 455, 456, 462, 465, 466, 468, 473, 474, 475, 480, 484, 488, 492, 493, 503, 504, 505, 509, 514, 520, 526, 531, 532, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 606, 608, 609, 613, 614, 615, 619, 620, 621, 625, 627, 628, 631, 632, 635, 636, 638, 641, 642, 645, 646, 647, 651, 652, 653, 657, 658, 659, 663, 664, 668, 669, 670, 687, 690, 695, 696, 700, 701, 705, 706, 709, 710, 713, 714, 718, 719, 722, 723, 727, 728, 912, 914, 954, 956, 957, 960, 962, 966, 986, 996, 997, 1125, 1131, 1132, 1134, 1144, 1145, 1150, 1162, 1163, 1195, 1197, 1217], "n_point": [8, 20, 52, 65, 71, 78, 102, 104, 105, 106, 107, 108, 109, 111, 112, 373, 382, 394, 401, 409, 468, 475, 480, 484, 488, 491, 499, 608, 609, 614, 615, 620, 621, 627, 628, 630, 631, 632, 633, 635, 636, 638, 640, 641, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 657, 658, 659, 660, 663, 664, 665, 668, 669, 670, 687, 690, 692, 695, 696, 697, 700, 701, 702, 705, 706, 709, 710, 713, 714, 718, 719, 722, 723, 727, 728, 822, 823, 832, 833, 839, 840, 842, 846, 847, 854, 855, 862, 863, 912, 914, 962, 1085, 1095, 1105, 1115, 1166, 1217], "3": [8, 77, 78, 80, 104, 105, 107, 134, 206, 253, 468, 475, 483, 491, 493, 499, 608, 609, 614, 615, 620, 621, 627, 628, 636, 732, 781, 815, 912, 914, 1042, 1080, 1196, 1201, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "array_lik": [8, 12, 13, 16, 22, 85, 89, 90, 369, 374, 384, 393, 411, 419, 1042, 1080], "indic": [8, 22, 77, 79, 85, 369, 370, 374, 384, 411, 492, 731, 771, 921, 948], "dimens": [8, 12, 13, 16, 52, 79, 123, 214, 229, 234, 248, 492, 738, 753, 754, 755, 1189, 1196, 1209, 1211, 1217, 1220], "A": [8, 40, 43, 47, 68, 71, 118, 119, 123, 134, 202, 248, 253, 392, 399, 429, 564, 597, 600, 697, 698, 702, 703, 725, 752, 786, 787, 1042, 1080, 1081, 1091, 1101, 1111, 1193, 1194, 1195, 1196, 1199, 1201, 1209, 1210, 1212], "dictionari": [10, 23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 429, 431, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 671, 691, 715, 724, 768, 800, 963, 1201], "els": [10, 79, 492, 774, 776, 777], "model_book": [12, 429, 430, 431, 432, 433, 434, 435, 436, 1193, 1194, 1201], "meta": [12, 1193], "us": [12, 16, 40, 68, 110, 248, 261, 365, 437, 452, 483, 512, 604, 624, 630, 633, 648, 649, 660, 671, 686, 693, 731, 771, 864, 865, 867, 912, 936, 937, 940, 941, 950, 951, 954, 958, 959, 986, 992, 993, 994, 995, 1042, 1080, 1088, 1089, 1108, 1109, 1119, 1120, 1121, 1122, 1125, 1129, 1130, 1134, 1140, 1141, 1142, 1143, 1146, 1147, 1150, 1160, 1161, 1195, 1196, 1197, 1206, 1208, 1211, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1220], "dure": [12, 13, 16, 23, 32, 45, 53, 61, 73, 371, 372, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963, 1206, 1211, 1212, 1218], "singl": [12, 15, 20, 29, 37, 43, 65, 71, 94, 103, 370, 373, 382, 394, 399, 401, 409, 425, 480, 484, 488, 490, 505, 509, 514, 520, 526, 532, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 606, 613, 619, 625, 774, 776, 777, 864, 868, 885, 887, 889, 894, 897, 905, 912, 926, 954, 962, 967, 969, 976, 978, 980, 984, 986, 1000, 1002, 1005, 1007, 1010, 1012, 1015, 1017, 1021, 1023, 1026, 1031, 1033, 1037, 1039, 1043, 1045, 1050, 1052, 1056, 1058, 1062, 1064, 1068, 1070, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1195, 1205, 1206, 1207, 1209, 1213, 1214], "usual": [12, 1214], "dim": [12, 13, 123, 128, 248], "same": [12, 13, 98, 586, 589, 592, 595, 598, 602, 745, 816, 988, 1042, 1080, 1186, 1218, 1220], "subset": [12, 13, 47, 52, 371, 372, 379, 381, 387, 406, 408, 414, 432, 436, 1193, 1196, 1206, 1212], "loop_dim": [12, 13, 14, 16], "loop": [12, 13, 16, 815], "apply_ufunc": [12, 13, 14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 371, 379, 390, 392, 399, 406, 417, 421, 422, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 960], "size": [12, 17, 25, 79, 84, 87, 102, 123, 173, 230, 248, 371, 377, 379, 388, 390, 392, 397, 399, 404, 406, 415, 417, 492, 616, 617, 702, 703, 731, 736, 785, 960, 961, 965, 1210, 1211, 1218], "__getitem__": [12, 123, 141, 248, 429, 430, 432, 433], "x": [12, 78, 101, 102, 104, 352, 356, 357, 365, 369, 371, 372, 429, 430, 444, 491, 496, 499, 536, 537, 604, 608, 611, 614, 616, 620, 623, 627, 630, 631, 632, 633, 635, 640, 641, 642, 643, 645, 646, 647, 648, 651, 652, 654, 657, 658, 660, 663, 665, 668, 669, 671, 687, 690, 695, 697, 700, 702, 705, 731, 732, 759, 760, 761, 762, 763, 764, 785, 815, 817, 818, 820, 821, 824, 826, 828, 830, 831, 834, 836, 837, 838, 841, 843, 844, 845, 848, 850, 852, 853, 856, 858, 860, 861, 1042, 1080, 1189, 1190, 1196, 1203, 1204, 1207, 1209, 1210, 1211, 1213, 1217, 1218, 1219, 1220], "y": [12, 78, 352, 357, 358, 365, 369, 371, 372, 429, 430, 491, 499, 536, 537, 731, 732, 759, 760, 761, 762, 763, 764, 785, 817, 818, 820, 821, 824, 826, 828, 830, 831, 834, 836, 837, 838, 841, 843, 844, 845, 848, 850, 852, 853, 856, 858, 860, 861, 1042, 1080, 1189, 1190, 1203, 1209, 1210, 1211, 1217, 1218], "store": [13, 23, 27, 28, 32, 45, 53, 61, 73, 77, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 671, 687, 715, 724, 963, 1042, 1080, 1212], "datacalcmodel": [14, 15, 16, 35, 64, 1193, 1206], "via": [14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 365, 366, 371, 372, 379, 381, 387, 390, 392, 399, 406, 408, 414, 417, 421, 422, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 729, 738, 757, 765, 768, 769, 772, 778, 781, 783, 794, 921, 931, 960, 1167, 1194, 1195, 1197, 1201, 1206, 1207, 1211, 1214, 1215, 1218, 1220], "i": [14, 15, 16, 20, 29, 37, 39, 43, 52, 65, 67, 71, 78, 79, 89, 94, 103, 110, 123, 134, 183, 206, 215, 248, 253, 261, 296, 365, 367, 373, 379, 382, 394, 401, 409, 419, 425, 437, 438, 444, 445, 452, 453, 461, 463, 464, 472, 478, 479, 480, 484, 488, 491, 492, 496, 497, 499, 503, 504, 505, 509, 512, 514, 520, 526, 532, 538, 542, 547, 549, 550, 552, 553, 558, 565, 567, 568, 569, 573, 574, 575, 579, 581, 604, 606, 613, 619, 625, 630, 631, 632, 633, 635, 641, 642, 645, 647, 651, 654, 655, 657, 660, 663, 668, 695, 700, 705, 716, 745, 765, 770, 780, 785, 822, 823, 832, 833, 839, 840, 846, 847, 854, 855, 862, 863, 912, 931, 934, 942, 943, 950, 951, 954, 958, 959, 962, 967, 986, 1042, 1080, 1081, 1091, 1101, 1111, 1125, 1134, 1146, 1147, 1150, 1167, 1172, 1196, 1197, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "thei": [14, 77, 89, 90, 101, 109, 653, 659, 664, 670, 696, 701, 706, 1196, 1204, 1206, 1209, 1210, 1211, 1212, 1214, 1218], "depend": [14, 79, 319, 342, 437, 444, 478, 479, 492, 568, 574, 579, 580, 630, 633, 640, 641, 643, 646, 648, 652, 654, 658, 660, 663, 665, 669, 697, 700, 702, 705, 864, 883, 884, 885, 887, 893, 894, 904, 905, 967, 968, 975, 976, 977, 978, 984, 985, 988, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1196, 1203, 1204, 1206, 1208, 1210, 1213, 1214, 1218, 1220], "set": [14, 27, 34, 89, 90, 95, 419, 421, 478, 529, 536, 731, 1196, 1206, 1209, 1215, 1216, 1218, 1219, 1220], "For": [14, 59, 60, 89, 90, 102, 104, 105, 107, 112, 419, 439, 440, 447, 448, 455, 456, 462, 465, 466, 473, 474, 512, 608, 609, 614, 615, 620, 621, 627, 628, 631, 632, 635, 636, 641, 642, 645, 646, 647, 648, 651, 652, 657, 658, 663, 668, 669, 687, 690, 695, 700, 705, 710, 714, 719, 723, 728, 785, 1042, 1080, 1208, 1209, 1211, 1213, 1214, 1215, 1217, 1218, 1220], "each": [14, 27, 43, 59, 60, 71, 89, 90, 102, 104, 105, 107, 112, 123, 234, 248, 419, 439, 440, 447, 448, 455, 456, 462, 465, 466, 473, 474, 579, 608, 609, 611, 614, 615, 620, 621, 627, 628, 631, 632, 635, 636, 641, 642, 645, 646, 647, 651, 652, 657, 658, 663, 668, 669, 687, 690, 695, 700, 705, 710, 714, 719, 723, 728, 740, 759, 785, 905, 967, 973, 976, 978, 982, 984, 1042, 1043, 1048, 1050, 1054, 1056, 1060, 1062, 1066, 1068, 1072, 1074, 1076, 1077, 1079, 1080, 1196, 1209, 1211, 1214, 1215, 1217, 1218, 1219, 1220], "individu": [14, 89, 95, 579, 864, 868, 869, 885, 887, 889, 890, 894, 897, 898, 905, 912, 922, 926, 927, 954, 967, 969, 970, 976, 978, 980, 981, 984, 986, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1028, 1031, 1033, 1034, 1037, 1039, 1040, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1194, 1196, 1211, 1214], "algo": [14, 15, 16, 17, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 51, 53, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 79, 80, 82, 84, 86, 88, 93, 94, 95, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 371, 373, 375, 376, 378, 379, 382, 383, 385, 386, 387, 389, 390, 392, 394, 395, 396, 398, 399, 401, 402, 403, 405, 406, 409, 410, 412, 413, 414, 416, 417, 420, 421, 422, 425, 426, 427, 428, 432, 435, 437, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 492, 493, 496, 500, 503, 505, 506, 507, 509, 510, 511, 512, 514, 515, 516, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 532, 533, 534, 536, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 588, 591, 594, 597, 600, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 657, 658, 659, 660, 663, 664, 665, 668, 669, 670, 671, 692, 695, 696, 697, 700, 701, 702, 705, 706, 707, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 727, 728, 738, 740, 752, 757, 758, 912, 914, 934, 950, 951, 954, 958, 959, 960, 962, 963, 964, 966, 986, 1125, 1134, 1135, 1146, 1147, 1150, 1156, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "paramet": [14, 27, 40, 68, 336, 343, 344, 379, 406, 419, 421, 422, 437, 555, 567, 573, 579, 616, 623, 648, 654, 660, 665, 671, 691, 692, 697, 702, 794, 912, 1134, 1150, 1196, 1198, 1203, 1211, 1214, 1217, 1218, 1219], "main": [14, 15, 17, 20, 27, 29, 35, 37, 40, 43, 47, 64, 65, 68, 71, 84, 93, 94, 95, 371, 373, 379, 382, 390, 392, 394, 399, 401, 406, 409, 417, 421, 422, 425, 478, 480, 483, 484, 486, 488, 503, 505, 507, 509, 512, 514, 518, 520, 524, 526, 529, 532, 536, 538, 540, 542, 545, 547, 549, 550, 552, 553, 555, 558, 560, 562, 564, 565, 567, 569, 573, 575, 579, 581, 960, 962, 1208, 1209], "run_calcul": [14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 371, 379, 390, 392, 399, 406, 417, 421, 422, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 960], "out_var": [14, 16, 17, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 371, 379, 390, 392, 399, 406, 417, 421, 422, 478, 483, 486, 490, 496, 503, 504, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 960], "out_core_var": [14, 16], "start": [14, 16, 17, 18, 27, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 119, 123, 195, 248, 365, 371, 379, 390, 392, 399, 406, 417, 421, 422, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 604, 605, 623, 624, 786, 787, 960, 1206, 1209, 1215, 1217, 1220], "thi": [15, 16, 20, 23, 29, 32, 35, 36, 37, 39, 43, 45, 53, 60, 61, 65, 67, 71, 73, 77, 79, 94, 103, 106, 107, 118, 134, 253, 373, 375, 382, 385, 394, 395, 401, 402, 409, 412, 425, 427, 437, 440, 442, 448, 450, 456, 458, 466, 469, 474, 476, 480, 481, 484, 486, 488, 492, 500, 505, 509, 510, 512, 514, 515, 520, 522, 526, 527, 530, 532, 533, 538, 542, 543, 547, 550, 553, 558, 565, 569, 571, 575, 577, 581, 583, 594, 604, 606, 610, 613, 619, 622, 624, 625, 629, 630, 633, 636, 639, 640, 643, 644, 648, 649, 654, 655, 660, 661, 665, 666, 671, 686, 692, 693, 697, 698, 702, 703, 715, 716, 724, 738, 759, 760, 761, 762, 763, 764, 765, 794, 815, 834, 841, 848, 864, 865, 931, 950, 951, 958, 959, 962, 963, 988, 1042, 1080, 1081, 1091, 1101, 1111, 1134, 1146, 1147, 1194, 1195, 1196, 1197, 1201, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "execut": [15, 18, 20, 29, 37, 43, 65, 71, 94, 103, 373, 382, 394, 401, 409, 425, 480, 484, 488, 505, 509, 514, 520, 526, 532, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 606, 613, 619, 625, 962, 1167, 1174, 1196, 1201, 1208], "all": [15, 17, 20, 23, 26, 27, 29, 32, 37, 43, 45, 48, 53, 58, 61, 65, 71, 73, 79, 84, 88, 94, 103, 110, 111, 113, 117, 123, 178, 215, 248, 371, 372, 373, 375, 378, 379, 382, 385, 389, 390, 392, 394, 395, 398, 399, 401, 402, 405, 406, 409, 412, 416, 417, 421, 422, 425, 427, 432, 442, 450, 458, 468, 469, 475, 476, 480, 481, 484, 488, 492, 500, 503, 504, 505, 509, 510, 514, 515, 520, 522, 526, 527, 529, 532, 533, 535, 538, 542, 543, 547, 550, 553, 558, 565, 569, 571, 575, 577, 581, 583, 606, 610, 613, 619, 622, 625, 629, 639, 671, 688, 707, 709, 711, 713, 715, 716, 718, 720, 722, 724, 725, 727, 729, 731, 738, 756, 757, 765, 767, 769, 771, 772, 774, 776, 777, 778, 781, 783, 814, 864, 867, 868, 869, 883, 884, 885, 887, 889, 890, 893, 894, 897, 898, 902, 904, 905, 910, 912, 914, 918, 921, 927, 931, 942, 943, 954, 960, 962, 963, 966, 967, 968, 969, 970, 975, 976, 977, 978, 980, 981, 984, 985, 986, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1030, 1031, 1033, 1034, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1080, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1166, 1186, 1191, 1193, 1194, 1195, 1196, 1201, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1217, 1219], "comput": [15, 20, 29, 37, 43, 57, 65, 71, 94, 103, 110, 248, 294, 373, 382, 394, 401, 409, 425, 480, 484, 488, 505, 509, 514, 520, 526, 532, 538, 542, 547, 550, 553, 558, 564, 565, 569, 575, 581, 606, 613, 619, 623, 625, 692, 781, 962, 1042, 1080, 1196, 1206, 1214, 1220], "should": [15, 20, 23, 29, 32, 37, 43, 45, 53, 61, 65, 71, 73, 94, 103, 371, 372, 373, 375, 382, 385, 394, 395, 401, 402, 409, 412, 425, 427, 437, 442, 450, 458, 469, 476, 480, 481, 484, 488, 500, 505, 509, 510, 514, 515, 520, 522, 526, 527, 532, 533, 538, 542, 543, 547, 550, 553, 558, 565, 569, 571, 575, 577, 581, 583, 606, 610, 613, 619, 622, 625, 629, 639, 715, 716, 724, 962, 963, 1042, 1080, 1186, 1208, 1210, 1211, 1215, 1216, 1218, 1219, 1220], "arrai": [15, 20, 23, 29, 32, 37, 43, 45, 53, 61, 65, 71, 73, 89, 90, 94, 103, 123, 124, 128, 129, 130, 131, 132, 139, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 203, 204, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 248, 373, 375, 382, 385, 394, 395, 401, 402, 409, 412, 425, 427, 442, 450, 458, 469, 476, 480, 481, 484, 488, 500, 503, 504, 505, 509, 510, 514, 515, 520, 522, 526, 527, 532, 533, 538, 542, 543, 547, 550, 553, 558, 565, 569, 571, 575, 577, 581, 583, 606, 610, 613, 619, 622, 625, 629, 639, 715, 724, 756, 815, 816, 867, 868, 869, 872, 873, 889, 890, 897, 898, 919, 920, 921, 922, 923, 926, 927, 929, 930, 931, 950, 951, 958, 959, 962, 963, 969, 970, 971, 973, 980, 981, 982, 1002, 1003, 1007, 1008, 1012, 1013, 1017, 1018, 1023, 1024, 1028, 1029, 1030, 1033, 1034, 1039, 1040, 1042, 1045, 1046, 1048, 1052, 1053, 1054, 1058, 1059, 1060, 1064, 1065, 1066, 1070, 1071, 1072, 1076, 1079, 1080, 1083, 1084, 1085, 1093, 1094, 1095, 1103, 1104, 1105, 1113, 1114, 1115, 1126, 1136, 1146, 1147, 1157, 1166, 1187, 1188, 1189, 1190, 1210, 1211, 1220], "result": [15, 16, 20, 29, 37, 39, 43, 60, 65, 67, 71, 75, 77, 79, 94, 98, 102, 108, 110, 111, 122, 215, 373, 382, 394, 401, 409, 425, 440, 444, 448, 456, 466, 474, 480, 484, 486, 487, 488, 490, 492, 496, 505, 509, 514, 520, 526, 532, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 586, 589, 592, 595, 598, 602, 604, 638, 643, 645, 648, 651, 654, 657, 665, 668, 707, 709, 711, 713, 718, 720, 722, 727, 729, 730, 731, 738, 739, 740, 741, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 769, 770, 772, 773, 774, 776, 777, 778, 779, 782, 868, 869, 872, 873, 889, 890, 897, 898, 919, 920, 922, 923, 926, 929, 930, 962, 969, 970, 971, 980, 981, 1002, 1003, 1007, 1008, 1012, 1013, 1017, 1018, 1023, 1024, 1028, 1029, 1033, 1034, 1039, 1040, 1042, 1045, 1046, 1052, 1053, 1058, 1059, 1064, 1065, 1070, 1071, 1080, 1083, 1084, 1093, 1094, 1103, 1104, 1113, 1114, 1126, 1136, 1157, 1173, 1175, 1181, 1192, 1196, 1200, 1203, 1206, 1211, 1213, 1214, 1215, 1217, 1218, 1219, 1220], "output": [15, 16, 20, 24, 29, 33, 37, 38, 39, 43, 46, 65, 66, 67, 71, 74, 82, 86, 94, 115, 371, 372, 373, 376, 379, 381, 382, 386, 394, 396, 399, 400, 401, 403, 406, 408, 409, 413, 425, 428, 480, 482, 484, 485, 488, 489, 503, 504, 505, 506, 507, 508, 509, 511, 514, 516, 520, 523, 526, 528, 532, 534, 538, 539, 542, 544, 547, 548, 550, 551, 553, 554, 558, 559, 565, 566, 569, 572, 575, 578, 581, 584, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 962, 964, 1042, 1080, 1183, 1191, 1206, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "calc_par": [16, 17, 27, 34, 35, 39, 40, 47, 64, 67, 68, 75, 84, 93, 95, 371, 379, 390, 392, 399, 406, 417, 421, 422, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 960], "typic": [16, 39, 67, 84, 931], "fc": [16, 978, 979, 1210, 1213, 1215, 1216, 1218, 1219, 1220], "argument": [16, 39, 67, 420, 431, 504, 731, 738, 756, 780, 785, 987, 1042, 1080, 1085, 1095, 1105, 1115, 1167, 1168, 1173, 1175, 1181, 1184, 1209, 1215, 1218, 1219], "extendedst": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1193, 1206], "extend": [17, 1193, 1207], "pmodel": 17, "pointdatamodellist": [17, 68, 69, 70, 71, 72, 73, 74, 1193], "first": [17, 52, 121, 579, 611, 1196, 1208, 1211, 1213, 1218, 1219, 1220], "point_model": [17, 18, 432, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 1212], "append": [17, 19, 40, 42, 68, 70], "total": [17, 25, 84, 87, 110, 116, 371, 377, 379, 388, 390, 392, 397, 399, 404, 406, 415, 417, 738, 746, 912, 942, 943, 954, 960, 965, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1206, 1211], "index": [17, 22, 59, 60, 84, 85, 89, 90, 92, 102, 104, 105, 107, 112, 248, 261, 365, 371, 374, 379, 381, 384, 387, 390, 392, 399, 406, 408, 411, 414, 417, 439, 440, 447, 448, 455, 456, 462, 465, 466, 473, 474, 525, 608, 609, 614, 615, 620, 621, 627, 628, 631, 632, 635, 636, 641, 642, 645, 646, 647, 651, 652, 657, 658, 663, 668, 669, 687, 690, 695, 700, 705, 710, 714, 719, 723, 728, 729, 730, 731, 759, 760, 761, 762, 763, 764, 867, 912, 947, 949, 954, 960, 986, 1125, 1134, 1150, 1185, 1206, 1209, 1215, 1216, 1218, 1220], "weight": [17, 26, 75, 77, 79, 83, 84, 88, 306, 354, 371, 372, 378, 379, 389, 390, 392, 398, 399, 405, 406, 416, 417, 419, 444, 463, 490, 492, 495, 496, 497, 502, 738, 756, 762, 763, 764, 960, 966, 1042, 1057, 1080, 1192, 1196, 1203, 1209, 1211, 1216, 1217, 1219], "statist": [17, 26, 84, 88, 354, 371, 378, 379, 389, 390, 392, 398, 399, 405, 406, 416, 417, 960, 966, 1203, 1209, 1219], "output_point_var": [17, 24, 64, 66, 68, 74, 84, 86, 371, 376, 379, 386, 390, 392, 396, 399, 403, 406, 413, 417, 478, 482, 483, 485, 486, 489, 960, 964], "being": [17, 24, 27, 33, 35, 38, 40, 46, 47, 64, 66, 68, 74, 75, 82, 84, 86, 93, 95, 107, 108, 371, 376, 379, 386, 390, 392, 396, 399, 403, 406, 413, 417, 421, 422, 428, 478, 482, 483, 485, 486, 489, 490, 496, 503, 506, 507, 511, 512, 516, 518, 523, 524, 528, 529, 534, 536, 539, 540, 544, 545, 548, 549, 551, 552, 554, 555, 559, 560, 562, 564, 566, 567, 572, 573, 578, 579, 584, 636, 638, 931, 960, 964, 1042, 1080], "modifi": [17, 24, 27, 33, 35, 38, 40, 46, 47, 57, 59, 60, 64, 66, 68, 74, 75, 79, 82, 84, 86, 93, 95, 107, 108, 371, 376, 379, 386, 390, 392, 396, 399, 403, 406, 413, 417, 421, 422, 428, 437, 439, 440, 444, 447, 448, 452, 455, 456, 460, 462, 463, 465, 466, 471, 473, 474, 478, 482, 483, 485, 486, 489, 490, 492, 496, 503, 506, 507, 511, 512, 516, 518, 523, 524, 528, 529, 534, 536, 539, 540, 544, 545, 548, 549, 551, 552, 554, 555, 559, 560, 562, 564, 566, 567, 572, 573, 578, 579, 584, 636, 638, 960, 964, 1193], "mdata": [17, 20, 23, 27, 29, 32, 35, 37, 40, 43, 45, 47, 53, 57, 59, 60, 61, 63, 64, 65, 68, 71, 73, 75, 77, 79, 80, 84, 93, 94, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 371, 373, 375, 379, 382, 385, 390, 392, 394, 395, 399, 401, 402, 406, 409, 412, 417, 421, 422, 425, 427, 437, 439, 440, 442, 443, 444, 447, 448, 450, 451, 452, 455, 456, 458, 459, 460, 462, 463, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 486, 488, 490, 492, 493, 496, 500, 503, 505, 507, 509, 510, 512, 514, 515, 518, 520, 522, 524, 526, 527, 529, 532, 533, 536, 538, 540, 542, 543, 545, 547, 549, 550, 552, 553, 555, 558, 560, 562, 564, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 604, 606, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 657, 658, 659, 660, 663, 664, 665, 668, 669, 670, 671, 687, 688, 689, 690, 692, 695, 696, 697, 700, 701, 702, 705, 706, 707, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 727, 728, 960, 962, 963], "fdata": [17, 20, 27, 29, 35, 37, 40, 43, 47, 57, 59, 60, 63, 64, 65, 68, 71, 75, 77, 79, 80, 84, 93, 94, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 371, 373, 379, 382, 390, 392, 394, 399, 401, 406, 409, 417, 421, 422, 425, 437, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 462, 463, 465, 466, 468, 470, 471, 473, 474, 475, 477, 478, 480, 483, 484, 486, 488, 490, 492, 493, 496, 503, 505, 507, 509, 512, 514, 518, 520, 524, 526, 529, 532, 536, 538, 540, 542, 545, 547, 549, 550, 552, 553, 555, 558, 560, 562, 564, 565, 567, 569, 573, 575, 579, 581, 604, 606, 608, 609, 611, 613, 614, 615, 616, 619, 620, 621, 623, 625, 627, 628, 630, 631, 632, 633, 635, 636, 638, 640, 641, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 657, 658, 659, 660, 663, 664, 665, 668, 669, 670, 671, 687, 692, 695, 696, 697, 700, 701, 702, 705, 706, 707, 709, 710, 711, 713, 714, 716, 718, 719, 720, 722, 723, 725, 727, 728, 960, 962], "pdata": [17, 20, 64, 65, 68, 71, 84, 371, 373, 379, 382, 390, 392, 394, 399, 401, 406, 409, 417, 478, 480, 483, 484, 486, 488, 960, 962], "pointdatamodel": [18, 19, 64, 65, 66, 67, 68, 69, 70, 84, 432, 478, 483, 486, 1193, 1196], "after": [18, 79, 110, 111, 365, 492, 512, 707, 709, 711, 713, 716, 718, 720, 722, 725, 727, 759, 760, 762, 763, 764, 1211, 1215], "label": [22, 85, 89, 90, 374, 384, 411, 759, 760, 761, 762, 763, 764, 785, 1209, 1216, 1218], "integ": [22, 85, 123, 183, 201, 248, 261, 374, 384, 411, 864, 867, 868, 869, 872, 873, 880, 882, 885, 887, 889, 890, 894, 897, 898, 905, 912, 919, 920, 921, 926, 927, 929, 930, 931, 933, 937, 941, 950, 951, 953, 954, 956, 957, 958, 959, 967, 969, 970, 971, 976, 978, 980, 981, 984, 986, 993, 995, 996, 997, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1031, 1033, 1034, 1037, 1039, 1040, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1081, 1083, 1084, 1093, 1094, 1101, 1103, 1104, 1111, 1113, 1114, 1120, 1122, 1125, 1126, 1131, 1132, 1134, 1136, 1141, 1143, 1144, 1145, 1146, 1147, 1150, 1157, 1162, 1163], "load": [23, 32, 45, 53, 61, 73, 371, 372, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963, 1206, 1210], "file": [23, 32, 45, 53, 61, 73, 118, 120, 121, 365, 366, 367, 368, 371, 372, 375, 379, 381, 385, 395, 402, 406, 408, 412, 420, 427, 434, 442, 450, 458, 469, 476, 478, 479, 481, 500, 508, 510, 515, 522, 524, 525, 527, 533, 540, 541, 543, 560, 561, 562, 563, 567, 568, 571, 573, 574, 577, 579, 580, 583, 610, 622, 629, 639, 654, 715, 724, 729, 734, 735, 736, 737, 738, 757, 765, 768, 769, 771, 772, 777, 778, 781, 783, 786, 788, 789, 790, 791, 792, 794, 799, 800, 963, 1165, 1166, 1183, 1194, 1195, 1196, 1200, 1201, 1206, 1207, 1208, 1210, 1211, 1213, 1216, 1217, 1218, 1219], "part": [23, 32, 45, 53, 61, 73, 123, 205, 221, 248, 375, 385, 395, 402, 412, 427, 436, 442, 444, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963, 1209, 1211, 1213, 1214, 1216], "under": [23, 27, 28, 32, 40, 45, 53, 61, 68, 73, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963, 1204, 1206, 1207, 1209, 1210, 1212, 1215, 1220], "reason": [23, 32, 45, 53, 61, 73, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 963], "provid": [23, 32, 45, 53, 61, 73, 75, 375, 385, 395, 402, 412, 427, 442, 450, 458, 469, 476, 481, 500, 510, 515, 522, 527, 533, 543, 571, 577, 583, 610, 622, 629, 639, 715, 724, 765, 780, 785, 963, 1194, 1196, 1206, 1209, 1210, 1211, 1212, 1213, 1214, 1217, 1218], "output_var": [24, 33, 38, 46, 66, 74, 82, 86, 371, 372, 376, 379, 381, 386, 390, 396, 403, 406, 408, 413, 417, 428, 478, 479, 482, 485, 489, 506, 507, 508, 511, 516, 523, 528, 534, 539, 540, 541, 544, 548, 551, 554, 559, 566, 572, 578, 584, 964, 1209, 1210, 1211, 1213, 1215, 1216, 1218, 1219, 1220], "n_turbin": [26, 27, 29, 37, 43, 52, 77, 79, 80, 88, 94, 103, 113, 116, 370, 378, 389, 398, 405, 416, 425, 492, 493, 503, 504, 505, 509, 514, 520, 526, 531, 532, 538, 542, 547, 550, 553, 558, 565, 569, 575, 581, 606, 613, 619, 625, 732, 966, 1000, 1001, 1031, 1032, 1081, 1082, 1091, 1092, 1101, 1102, 1211, 1213, 1215, 1216, 1217], "farmcontrol": [27, 28, 29, 30, 31, 32, 33, 34, 421, 432, 1193, 1196], "farmdatamodel": [27, 35, 36, 37, 38, 39, 40, 41, 42, 47, 75, 93, 1193], "analys": [27, 1193], "handl": [27, 1193, 1206], "turbine_typ": [27, 432, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 783, 785, 1209, 1212, 1216, 1217, 1218], "turbinetyp": [27, 95, 96, 432, 564, 567, 568, 573, 574, 579, 580, 1193, 1196], "turbine_model_nam": 27, "found": [27, 792, 1195, 1197, 1212, 1217, 1218], "turbine_model_sel": 27, "n_model": 27, "pre_rotor_model": 27, "farmdatamodellist": [27, 40, 41, 42, 43, 44, 45, 46, 1193], "pre": [27, 29, 1208, 1215], "rotor": [27, 29, 35, 36, 57, 75, 77, 78, 79, 80, 81, 83, 89, 90, 95, 96, 122, 304, 305, 306, 320, 321, 322, 333, 345, 346, 347, 352, 365, 432, 444, 445, 452, 453, 460, 461, 463, 464, 468, 471, 475, 490, 491, 492, 493, 494, 495, 496, 499, 501, 502, 518, 519, 530, 536, 537, 611, 716, 729, 730, 731, 864, 865, 988, 1001, 1192, 1193, 1196, 1203, 1205, 1206, 1207, 1211, 1214, 1218], "post_rotor_model": 27, "without": [27, 421, 756, 1196, 1211, 1215, 1217], "par": [27, 28, 421, 671, 679, 691], "respecitv": 27, "set_par": [27, 34, 421], "model_nam": [27, 34, 421], "init_par": [27, 34, 421], "final_par": [27, 34, 421], "collect_model": [27, 30, 421], "analyz": [27, 30, 421], "gather": [27, 30, 421], "output_farm_var": [27, 33, 35, 38, 40, 46, 47, 75, 82, 93, 95, 421, 422, 428, 490, 496, 503, 506, 507, 511, 512, 516, 518, 523, 524, 528, 529, 534, 536, 539, 540, 544, 545, 548, 549, 551, 552, 554, 555, 559, 560, 562, 564, 566, 567, 572, 573, 578, 579, 584], "pre_rotor": [27, 29, 35, 36, 47, 93, 421, 529, 530, 549, 552, 955, 988], "respect": [28, 52, 369, 1042, 1080, 1209, 1218, 1219, 1220], "post": [29, 1207, 1214], "befor": [35, 36, 108, 365, 530, 638, 759, 760, 762, 763, 764, 950, 951, 958, 959, 978, 979, 988, 1146, 1147, 1211], "By": [40, 68, 931, 1220], "togeth": [40, 68, 1220], "one": [40, 43, 59, 60, 68, 71, 77, 79, 83, 102, 104, 105, 107, 112, 123, 209, 248, 437, 438, 439, 440, 444, 445, 447, 448, 452, 453, 455, 456, 460, 461, 462, 463, 464, 465, 466, 472, 473, 474, 492, 495, 496, 497, 502, 608, 609, 614, 615, 620, 621, 627, 628, 631, 632, 635, 636, 641, 642, 645, 646, 647, 651, 652, 657, 658, 663, 668, 669, 687, 690, 695, 700, 705, 710, 714, 719, 723, 728, 778, 785, 815, 1042, 1080, 1186, 1196, 1200, 1206, 1209, 1213, 1219, 1220], "common": [40, 68, 623, 671, 687, 692, 1042, 1080, 1204], "farmmodel": [47, 422, 432, 1193, 1196], "oper": [47, 111, 709, 713, 718, 722, 727, 738, 753, 754, 755, 1193, 1215], "contrast": [47, 815, 1193], "turbinemodel": [47, 91, 92, 93, 94, 95, 422, 423, 432, 503, 504, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 1193, 1196], "allow": [47, 419, 1193, 1206, 1211], "applic": [47, 868, 869, 872, 873, 889, 890, 897, 898, 912, 919, 920, 925, 929, 930, 954, 969, 970, 971, 980, 981, 986, 1002, 1003, 1007, 1008, 1012, 1013, 1017, 1018, 1023, 1024, 1033, 1034, 1039, 1040, 1045, 1046, 1052, 1053, 1058, 1059, 1064, 1065, 1070, 1071, 1083, 1084, 1093, 1094, 1103, 1104, 1113, 1114, 1125, 1126, 1134, 1136, 1150, 1157, 1193, 1207, 1211], "data_prio": 52, "accept_non": 52, "serv": [52, 1209], "If": [52, 79, 492, 556, 623, 624, 648, 649, 660, 661, 665, 666, 692, 693, 708, 712, 721, 771, 774, 776, 777, 815, 955, 1042, 1080, 1166, 1215, 1218], "get": [52, 101, 104, 118, 123, 197, 248, 463, 468, 471, 475, 604, 608, 611, 614, 616, 620, 623, 627, 772, 774, 781, 786, 792, 793, 817, 819, 824, 826, 829, 834, 841, 848, 851, 856, 859, 864, 866, 883, 884, 885, 887, 893, 894, 904, 905, 912, 924, 935, 939, 949, 954, 967, 975, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1206, 1209], "specifi": [52, 57, 59, 123, 128, 248, 437, 439, 444, 447, 452, 455, 460, 462, 463, 465, 471, 473, 525, 1196, 1206, 1211, 1218], "broadcast": [52, 1186, 1188, 1189], "potenti": 52, "scalar": [52, 123, 124, 128, 132, 139, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 248, 478, 479, 1042, 1080], "search": [52, 371, 372, 379, 381, 432, 436, 556, 623, 624, 648, 649, 660, 661, 665, 666, 692, 693, 814, 1201, 1206, 1212, 1213, 1217, 1218], "throw": 52, "an": [52, 89, 248, 261, 496, 497, 604, 654, 815, 912, 916, 954, 986, 1042, 1080, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1194, 1195, 1210, 1216, 1218, 1220], "error": [52, 118, 371, 372, 654, 786, 792, 1218], "np": [52, 134, 183, 206, 253, 294, 296, 752, 756, 815, 867, 868, 869, 872, 873, 889, 890, 897, 898, 919, 920, 921, 922, 923, 926, 927, 929, 930, 931, 950, 951, 958, 959, 969, 970, 971, 973, 980, 981, 982, 1002, 1003, 1007, 1008, 1012, 1013, 1017, 1018, 1023, 1024, 1028, 1029, 1030, 1033, 1034, 1039, 1040, 1042, 1045, 1046, 1048, 1052, 1053, 1054, 1058, 1059, 1060, 1064, 1065, 1066, 1070, 1071, 1072, 1076, 1079, 1080, 1083, 1084, 1093, 1094, 1103, 1104, 1113, 1114, 1126, 1136, 1146, 1147, 1157, 1166, 1210, 1211, 1215, 1217, 1220], "nan": [52, 123, 183, 419, 756, 815, 867, 1206, 1215], "true": [54, 79, 118, 123, 206, 248, 296, 368, 372, 419, 440, 492, 496, 497, 536, 537, 690, 759, 760, 761, 762, 763, 764, 786, 792, 822, 823, 832, 833, 834, 836, 839, 840, 841, 843, 846, 847, 848, 850, 854, 855, 862, 863, 875, 918, 978, 979, 1085, 1095, 1105, 1115, 1166, 1168, 1210, 1211, 1213, 1215, 1218, 1219], "been": [54, 875, 1206, 1207], "partialwakesmodel": [57, 58, 59, 60, 61, 62, 63, 437, 444, 452, 463, 471, 1193, 1196], "partial": [57, 62, 432, 437, 438, 444, 452, 460, 463, 471, 630, 633, 1193, 1196, 1204, 1214], "wake": [57, 58, 59, 60, 62, 63, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 336, 343, 344, 363, 432, 437, 438, 439, 440, 443, 444, 445, 447, 448, 451, 452, 453, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 477, 486, 555, 604, 605, 608, 609, 611, 614, 615, 616, 620, 621, 623, 624, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 686, 687, 690, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 722, 723, 725, 726, 727, 728, 1081, 1091, 1193, 1196, 1198, 1199, 1203, 1204, 1205, 1206, 1207, 1210, 1214, 1215, 1217, 1218, 1219], "effect": [57, 75, 77, 320, 321, 322, 345, 346, 347, 463, 490, 496, 1196, 1198, 1199, 1203, 1214, 1215, 1216, 1219, 1220], "quantiti": [57, 75, 1214], "wake_model": [57, 58, 432, 437, 438, 444, 445, 452, 453, 460, 461, 463, 464, 471, 472, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "wakemodel": [57, 58, 106, 107, 108, 109, 432, 438, 445, 453, 461, 464, 472, 633, 1193, 1204], "wake_fram": [57, 58, 432, 438, 444, 445, 453, 460, 461, 463, 464, 471, 472, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 1210, 1211, 1212, 1213, 1215, 1216, 1218, 1219, 1220], "wakefram": [57, 58, 101, 102, 103, 104, 105, 432, 438, 445, 453, 461, 464, 472, 604, 605, 611, 616, 623, 624, 1193, 1196], "frame": [57, 58, 78, 101, 102, 104, 105, 107, 379, 432, 438, 445, 453, 461, 464, 472, 478, 479, 491, 499, 604, 605, 608, 614, 620, 623, 624, 627, 636, 671, 1165, 1193, 1196, 1204, 1206, 1210, 1214, 1220], "new_wake_delta": [57, 59, 60, 63, 437, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 462, 463, 465, 466, 470, 471, 473, 474, 477], "delta": [57, 59, 60, 63, 106, 107, 108, 109, 110, 111, 112, 437, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 462, 463, 465, 466, 470, 471, 473, 474, 477, 486, 487, 549, 552, 630, 631, 632, 633, 635, 636, 638, 640, 642, 643, 645, 647, 648, 651, 653, 654, 657, 659, 660, 664, 665, 668, 670, 692, 695, 696, 697, 701, 702, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 722, 723, 725, 726, 727, 728, 752, 816, 1016, 1044, 1196, 1206, 1214], "fill": [57, 60, 63, 118, 123, 200, 248, 371, 372, 437, 440, 443, 444, 448, 451, 452, 456, 459, 460, 463, 466, 470, 471, 474, 477, 818, 828, 836, 843, 850, 858, 1194], "zero": [57, 63, 337, 437, 443, 444, 451, 452, 459, 460, 463, 470, 471, 477, 556, 631, 632, 635, 641, 642, 645, 647, 651, 657, 663, 668, 695, 700, 705, 1042, 1080, 1167, 1172, 1203, 1217], "contribute_to_wake_delta": [57, 59, 60, 106, 107, 437, 439, 440, 444, 447, 448, 452, 455, 456, 460, 462, 463, 465, 466, 471, 473, 474, 630, 633, 636, 640, 643, 648, 654, 660, 665, 692, 697, 702], "contribut": [57, 59, 106, 107, 110, 111, 437, 439, 444, 447, 452, 455, 460, 462, 463, 465, 471, 473, 630, 633, 636, 640, 643, 648, 654, 660, 665, 692, 697, 702, 707, 709, 711, 713, 716, 718, 720, 722, 725, 727], "evaluate_result": [57, 60, 437, 440, 444, 448, 452, 456, 460, 463, 466, 471, 474], "wake_delta": [57, 59, 60, 63, 106, 107, 108, 109, 111, 112, 437, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 462, 463, 465, 466, 470, 471, 473, 474, 477, 630, 633, 636, 638, 640, 643, 648, 653, 654, 659, 660, 664, 665, 670, 692, 696, 697, 701, 702, 706, 709, 710, 713, 714, 718, 719, 722, 723, 727, 728], "pwake_typ": [57, 62, 437, 444, 452, 460, 463, 471], "states_source_turbin": [59, 101, 102, 104, 105, 107, 112, 439, 447, 455, 462, 465, 473, 604, 608, 609, 611, 614, 615, 616, 620, 621, 623, 627, 628, 631, 632, 635, 636, 640, 641, 642, 643, 645, 646, 647, 648, 651, 652, 654, 657, 658, 660, 663, 665, 668, 669, 671, 687, 690, 695, 697, 700, 702, 705, 707, 710, 711, 714, 716, 719, 720, 723, 725, 728], "correspond": [59, 123, 124, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 203, 204, 207, 208, 210, 211, 212, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 248, 363, 364, 439, 447, 455, 462, 465, 473, 512, 1187, 1190, 1203, 1208, 1212, 1213, 1216], "caus": [59, 102, 104, 105, 107, 112, 439, 447, 455, 462, 465, 473, 608, 609, 614, 615, 620, 621, 627, 628, 631, 632, 635, 636, 641, 642, 645, 646, 647, 651, 652, 657, 658, 663, 668, 669, 687, 690, 695, 700, 705, 710, 714, 719, 723, 728, 1206], "ani": [59, 60, 63, 123, 134, 179, 215, 248, 253, 439, 440, 443, 447, 448, 451, 455, 456, 459, 462, 465, 466, 470, 473, 474, 477, 564, 816, 868, 869, 872, 873, 889, 890, 897, 898, 919, 920, 929, 930, 969, 970, 971, 980, 981, 1002, 1003, 1007, 1008, 1012, 1013, 1017, 1018, 1023, 1024, 1033, 1034, 1039, 1040, 1045, 1046, 1052, 1053, 1058, 1059, 1064, 1065, 1070, 1071, 1083, 1084, 1093, 1094, 1103, 1104, 1113, 1114, 1126, 1136, 1157, 1173, 1175, 1181, 1187, 1188, 1189, 1190, 1196, 1208, 1210, 1214, 1218, 1220], "states_turbin": [60, 77, 79, 440, 448, 456, 466, 474, 492], "update_amb_r": [60, 440, 448, 456, 466, 474], "place": [60, 440, 448, 456, 466, 474, 759, 760, 761, 988, 1134, 1150, 1198, 1210, 1211, 1215], "evalu": [60, 75, 79, 98, 101, 103, 105, 107, 108, 109, 440, 444, 445, 448, 452, 456, 466, 474, 490, 492, 496, 586, 589, 592, 595, 598, 602, 604, 606, 609, 611, 613, 615, 616, 619, 621, 623, 625, 628, 630, 636, 638, 653, 659, 664, 670, 696, 701, 706, 738, 781, 801, 802, 804, 805, 806, 807, 810, 811, 912, 926, 927, 954, 986, 1081, 1082, 1091, 1101, 1111, 1125, 1134, 1150, 1196, 1198, 1199, 1200, 1206, 1207, 1214, 1216, 1217, 1218], "ambient": [60, 75, 76, 77, 79, 84, 108, 111, 122, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 363, 364, 371, 440, 448, 456, 466, 474, 486, 487, 490, 492, 496, 497, 638, 648, 649, 708, 709, 712, 713, 718, 721, 722, 725, 726, 727, 738, 740, 746, 752, 1192, 1195, 1196, 1203, 1206, 1207, 1213, 1214, 1215, 1217, 1218, 1219], "rotormodel": [75, 76, 77, 78, 79, 80, 81, 82, 83, 432, 444, 445, 452, 453, 461, 463, 464, 490, 496, 1193, 1196], "calc_var": [75, 76, 490, 496, 497, 518, 519], "Their": [75, 76, 497], "ad": [75, 76, 109, 110, 111, 497, 508, 653, 659, 664, 670, 696, 701, 706, 707, 709, 711, 713, 716, 718, 720, 722, 725, 727, 738, 756, 931, 988, 1195, 1206, 1208, 1211, 1212, 1216, 1217, 1218, 1219, 1220], "automat": [75, 76, 77, 497, 731, 752, 759, 760, 761, 762, 763, 764, 1042, 1080, 1206, 1218], "n_rotor_point": [75, 81, 490, 494, 496, 501], "rotor_point_weight": [75, 83, 490, 495, 496, 502], "design_point": [75, 78, 490, 491, 496, 499], "design": [75, 78, 80, 490, 491, 493, 496, 499], "get_rotor_point": [75, 80, 490, 493, 496], "eval_rpoint_result": [75, 79, 490, 492, 496], "rpoint_result": [75, 79, 490, 492, 496], "rpoint": [75, 77, 304, 305, 468, 475, 490, 496, 1192], "store_rpoint": 77, "store_rweight": 77, "store_amb_r": 77, "n_rpoint": [77, 79, 80, 81, 83, 492, 493, 494, 495, 501, 502], "switch": [77, 967, 968, 977, 985, 1206, 1216], "reult": 77, "come": [77, 1209, 1216, 1218], "per": [77, 79, 379, 492, 496, 497, 630, 738, 747, 749, 750, 751, 752, 754, 755, 1134, 1168, 1195, 1216], "formul": [78, 491, 499, 1216], "plane": [78, 491, 499, 757, 759, 760, 761, 762, 763, 764, 848, 1201], "z": [78, 491, 499, 759, 760, 761, 762, 763, 764], "coordin": [78, 101, 102, 104, 105, 107, 352, 356, 358, 371, 372, 491, 499, 604, 608, 609, 611, 614, 615, 616, 620, 621, 623, 627, 628, 636, 729, 730, 759, 760, 761, 762, 763, 764, 967, 1042, 1080, 1085, 1095, 1105, 1115, 1166, 1203, 1209, 1210, 1211, 1214, 1217], "centr": [78, 352, 490, 491, 499, 518, 616, 617, 643, 645, 648, 651, 654, 657, 665, 668, 834, 835, 848, 849, 1185, 1186, 1196, 1201, 1203, 1206, 1209, 1211, 1212, 1215, 1216, 1217, 1218, 1219, 1220], "1": [78, 79, 113, 115, 123, 134, 183, 202, 206, 248, 253, 294, 295, 296, 303, 365, 367, 368, 369, 370, 372, 419, 491, 492, 499, 560, 561, 563, 568, 574, 579, 580, 648, 654, 698, 729, 731, 738, 740, 741, 761, 764, 771, 785, 815, 872, 873, 912, 929, 934, 954, 955, 968, 971, 986, 991, 1015, 1016, 1042, 1043, 1044, 1056, 1057, 1080, 1081, 1087, 1091, 1097, 1101, 1107, 1111, 1118, 1125, 1126, 1128, 1134, 1135, 1136, 1139, 1150, 1157, 1159, 1168, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1201, 1204, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "radiu": [78, 491, 499, 643, 646, 648, 652, 654, 658, 660, 665, 669, 834, 835, 864, 865, 1185, 1186], "n_rotor_axi": [78, 491, 499], "n_rotor_sid": [78, 491, 499], "n_rotor_up": [78, 491, 499], "dpoint": [78, 491, 499], "copy_to_ambi": [79, 492], "In": [79, 492, 660, 815, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "latter": [79, 444, 492, 1166, 1206, 1211, 1215, 1216, 1218, 1220], "case": [79, 371, 372, 420, 492, 752, 774, 776, 777, 780, 785, 792, 1195, 1206, 1211, 1215, 1216, 1217, 1218, 1220], "expect": [79, 120, 121, 492, 525, 540, 1210, 1213], "have": [79, 492, 503, 504, 1042, 1080, 1186, 1196, 1206, 1211, 1213, 1214, 1215, 1216, 1217, 1219], "copi": [79, 123, 192, 248, 492], "describ": [84, 1195, 1209, 1210, 1217], "meteorolog": [84, 1214], "speed": [84, 320, 321, 322, 327, 345, 346, 347, 355, 379, 392, 393, 399, 400, 512, 513, 545, 546, 561, 563, 567, 568, 573, 574, 579, 580, 585, 588, 591, 594, 716, 785, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 813, 1188, 1189, 1195, 1196, 1202, 1203, 1209, 1210, 1211, 1213, 1214, 1216, 1217, 1218, 1219, 1220], "direct": [84, 326, 353, 392, 393, 399, 400, 496, 497, 611, 612, 759, 760, 761, 762, 763, 764, 774, 776, 777, 816, 848, 849, 1187, 1188, 1189, 1190, 1194, 1196, 1201, 1203, 1206, 1209, 1210, 1213, 1214, 1216, 1217, 1218, 1219, 1220], "turbul": [84, 325, 351, 697, 698, 1203, 1204, 1206, 1210, 1213, 1214, 1218, 1219, 1220], "intens": [84, 325, 351, 1203, 1204, 1206, 1210, 1214, 1218, 1219, 1220], "air": [84, 323, 348, 392, 393, 399, 400, 561, 563, 567, 568, 573, 574, 579, 785, 1196, 1203, 1206, 1210, 1213], "densiti": [84, 323, 348, 392, 393, 399, 400, 561, 563, 579, 785, 1015, 1016, 1043, 1196, 1199, 1203, 1206, 1210, 1213], "mere": 89, "defin": [89, 604, 1042, 1080, 1081, 1091, 1196, 1199, 1203, 1211, 1214, 1215, 1216, 1220], "basic": [89, 120, 121, 421, 444, 536, 1194, 1196, 1211, 1213], "xy": [89, 90, 757, 759, 762, 1081, 1085, 1091, 1095, 1101, 1105, 1111, 1115, 1206, 1210, 1220], "ground": [89, 90, 335, 1203], "posit": [89, 90, 92, 123, 183, 864, 885, 1125, 1197, 1198, 1206, 1215], "2": [89, 90, 206, 296, 369, 370, 419, 437, 438, 483, 631, 632, 635, 646, 647, 652, 658, 660, 669, 695, 697, 702, 731, 815, 820, 821, 822, 823, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 860, 861, 862, 863, 1042, 1080, 1085, 1095, 1105, 1115, 1166, 1185, 1186, 1196, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "appear": [89, 90, 654, 1211, 1213, 1215, 1218, 1220], "mstates_sel": 89, "boolean": [89, 90, 503, 504, 922, 923, 938, 1028, 1029, 1042, 1080, 1085, 1095, 1105, 1115], "d": [89, 90, 95, 96, 120, 121, 123, 202, 248, 333, 564, 648, 649, 729, 730, 864, 865, 887, 888, 1000, 1001, 1042, 1080, 1081, 1082, 1085, 1091, 1092, 1095, 1101, 1102, 1105, 1111, 1112, 1115, 1185, 1186, 1201, 1203, 1211, 1217], "float": [89, 90, 95, 96, 102, 123, 137, 183, 206, 248, 256, 379, 381, 392, 393, 399, 400, 512, 513, 556, 561, 563, 567, 568, 573, 574, 580, 600, 601, 616, 617, 623, 624, 644, 648, 649, 654, 655, 660, 661, 665, 666, 671, 686, 692, 693, 697, 698, 702, 703, 707, 708, 716, 717, 729, 730, 740, 742, 745, 746, 752, 759, 760, 761, 762, 763, 764, 774, 776, 777, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 834, 835, 864, 865, 867, 868, 869, 872, 873, 877, 879, 881, 883, 885, 887, 888, 889, 890, 893, 894, 897, 898, 904, 905, 912, 919, 920, 921, 926, 927, 929, 930, 931, 932, 936, 940, 945, 950, 951, 952, 954, 956, 957, 958, 959, 967, 968, 969, 970, 971, 975, 976, 977, 978, 980, 981, 984, 985, 986, 988, 989, 992, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1021, 1023, 1024, 1026, 1031, 1032, 1033, 1034, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1050, 1052, 1053, 1056, 1057, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1080, 1081, 1082, 1083, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1101, 1102, 1103, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1119, 1121, 1123, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1140, 1142, 1144, 1145, 1146, 1147, 1148, 1150, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1185, 1188, 1189, 1192, 1209, 1211], "diamet": [89, 90, 95, 96, 333, 365, 536, 537, 648, 729, 730, 731, 1001, 1081, 1082, 1085, 1091, 1092, 1095, 1101, 1102, 1105, 1111, 1112, 1115, 1196, 1203, 1206, 1211, 1214], "overwrit": [89, 90], "h": [89, 90, 95, 96, 120, 121, 335, 372, 564, 732, 1203, 1209, 1210, 1211, 1213, 1217], "hub": [89, 90, 95, 96, 365, 1196, 1206, 1213, 1214, 1217], "height": [89, 90, 95, 96, 97, 98, 335, 352, 357, 365, 371, 372, 379, 381, 390, 536, 537, 585, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 602, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 1195, 1196, 1202, 1203, 1205, 1206, 1207, 1209, 1210, 1214, 1217], "turbine_model": [89, 90, 365, 422, 423, 432, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "add_model": [89, 91], "states_sel": [89, 91, 92, 379, 381, 387, 390, 406, 408, 414, 417], "insert_model": [89, 92], "insert": [89, 92, 1188, 1189], "models_state_sel": 90, "can": [95, 215, 452, 478, 633, 671, 921, 988, 1042, 1080, 1194, 1195, 1196, 1197, 1204, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "overwritten": 95, "p_nomin": [95, 96, 317, 331, 564, 752, 1203, 1206], "nomin": [95, 96, 740, 1215], "power": [95, 96, 303, 319, 339, 342, 434, 512, 513, 560, 562, 567, 568, 573, 574, 579, 580, 738, 740, 745, 746, 752, 783, 785, 976, 1192, 1196, 1197, 1200, 1203, 1205, 1206, 1207, 1211, 1213, 1214, 1216, 1218, 1219, 1220], "kw": [95, 96, 303, 316, 512, 513, 564, 752, 1192], "p_unit": [95, 96, 303, 564, 1192, 1206], "unit": [95, 96, 247, 299, 303, 312, 315, 316, 319, 342, 512, 513, 648, 649, 745, 752, 887, 888, 1042, 1080, 1192, 1203, 1209], "w": [96, 303, 315, 355, 363, 364, 379, 399, 400, 483, 560, 561, 563, 567, 568, 573, 574, 579, 794, 796, 798, 801, 804, 805, 810, 1042, 1080, 1188, 1189, 1192, 1196, 1201, 1203, 1206, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "mw": [96, 120, 121, 299, 303, 1192, 1209, 1213, 1215, 1218, 1219], "gw": [96, 247, 303, 1192, 1207], "verticalprofil": [97, 98, 99, 100, 399, 400, 406, 408, 585, 588, 591, 594, 597, 600, 1193, 1196], "vertic": [97, 757, 760, 763, 764, 1193, 1196, 1200, 1206, 1213, 1220], "profil": [97, 98, 99, 100, 399, 400, 408, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 802, 806, 807, 811, 1193, 1196, 1202, 1206, 1209, 1213], "input_var": [97, 99, 507, 508, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 603], "need": [97, 99, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 603, 1211, 1213, 1215, 1216, 1219], "profile_typ": [97, 100, 585, 588, 591, 594, 597, 600], "translat": [101, 954, 956, 957, 986, 996, 997, 1125, 1131, 1132, 1134, 1144, 1145, 1150, 1162, 1163, 1214, 1220], "global": [101, 1209], "also": [101, 215, 731, 1206, 1207, 1209, 1211, 1214, 1215, 1216, 1218, 1220], "respons": [101, 1196, 1214, 1216], "order": [101, 103, 123, 215, 248, 341, 421, 432, 579, 604, 606, 611, 613, 616, 619, 623, 625, 921, 931, 1196, 1203, 1211, 1215, 1216, 1217], "calc_ord": [101, 103, 604, 606, 611, 613, 616, 619, 623, 625], "get_wake_coo": [101, 105, 604, 609, 611, 615, 616, 621, 623, 628], "get_centreline_point": [101, 104, 604, 608, 611, 614, 616, 620, 623, 627], "along": [101, 102, 104, 496, 497, 604, 608, 611, 614, 616, 620, 623, 627, 1196, 1206, 1214, 1217, 1220], "centrelin": [101, 102, 104, 604, 608, 611, 614, 616, 620, 623, 627, 702, 703, 1206, 1214], "calc_centreline_integr": [101, 102, 604, 611, 616, 623], "integr": [101, 102, 123, 206, 248, 296, 496, 497, 604, 611, 616, 623, 702, 703, 1204, 1206], "dx": [102, 702, 703, 1212], "ipar": [102, 381, 541, 702, 703], "upper": [102, 1030], "bound": [102, 371, 372, 864, 885, 887, 894, 1000, 1005, 1010, 1015, 1021, 1026, 1030, 1031, 1037], "step": [102, 123, 234, 248, 369, 370, 496, 497, 616, 617, 702, 703, 752, 785, 1206, 1210, 1212, 1213, 1214, 1219], "interpol": [102, 381, 507, 508, 541, 560, 562, 567, 573, 579, 580, 616, 617, 1196, 1206], "n_var": [102, 931], "wake_coo": [105, 107, 609, 615, 621, 628, 636], "init_wake_delta": [106, 109, 630, 633, 640, 643, 648, 653, 654, 659, 660, 664, 665, 670, 692, 696, 697, 701, 702, 706], "storag": [106, 109, 616, 617, 630, 633, 640, 643, 648, 653, 654, 659, 660, 664, 665, 670, 692, 696, 697, 701, 702, 706], "finalize_wake_delta": [106, 108, 630, 633, 638, 640, 643, 648, 654, 660, 665, 692, 697, 702], "amb_result": [106, 108, 111, 630, 633, 638, 640, 643, 648, 654, 660, 665, 692, 697, 702, 709, 713, 718, 722, 727], "fly": [107, 108, 109, 636, 638, 653, 659, 664, 670, 696, 701, 706], "ob": [107, 108, 636, 638], "appli": [107, 108, 109, 111, 112, 636, 638, 653, 659, 664, 670, 696, 701, 706, 709, 710, 713, 714, 718, 719, 722, 723, 727, 728, 745, 912, 919, 920, 954, 986, 988, 1042, 1080, 1081, 1083, 1084, 1091, 1093, 1094, 1101, 1103, 1104, 1111, 1113, 1114, 1125, 1134, 1150, 1196, 1211, 1220], "afterward": [108, 638], "wakesuperposit": [110, 111, 112, 432, 633, 707, 711, 716, 720, 725, 1193, 1196], "superposit": [110, 432, 630, 633, 634, 640, 643, 644, 648, 649, 654, 655, 660, 661, 665, 666, 692, 693, 697, 698, 702, 703, 716, 725, 1193, 1196, 1206, 1212, 1214, 1219], "note": [110, 768, 1134, 1196, 1209, 1210, 1211, 1213, 1216, 1217, 1219, 1220], "matter": [110, 1215], "other": [110, 392, 778, 912, 950, 951, 954, 958, 959, 986, 1125, 1134, 1146, 1147, 1150, 1195, 1200, 1206, 1208, 1210, 1212, 1214, 1215, 1216, 1220], "calc_wakes_plus_wak": [110, 112, 707, 710, 711, 714, 716, 719, 720, 723, 725, 728], "previou": [110, 112, 707, 710, 711, 714, 716, 719, 720, 723, 725, 728], "calc_final_wake_delta": [110, 111, 707, 709, 711, 713, 716, 718, 720, 722, 725, 727], "final_wake_delta": [111, 709, 713, 718, 722, 727], "simpl": [111, 709, 713, 718, 722, 727, 1206, 1210, 1215, 1217, 1220], "plu": [111, 709, 713, 718, 722, 727, 1166, 1184], "sel_sp": [112, 710, 714, 719, 723, 728], "wake_model_result": [112, 710, 714, 719, 723, 728], "origin": [112, 123, 183, 710, 714, 719, 723, 728, 857, 934, 957, 960, 961, 997, 1042, 1080, 1132, 1145, 1163, 1207], "n_sel_sp": [112, 710, 714, 719, 723, 728], "wdelta": [112, 631, 632, 635, 642, 647, 695, 710, 714, 719, 723, 728], "boundari": [113, 114, 731, 817, 818, 822, 824, 826, 828, 832, 834, 836, 839, 841, 843, 846, 848, 850, 854, 856, 858, 862, 864, 865, 885, 886, 1000, 1001, 1002, 1003, 1004, 1081, 1082, 1085, 1091, 1092, 1095, 1101, 1102, 1105, 1111, 1112, 1115, 1197, 1199, 1209, 1211], "util": [113, 118, 432, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 1081, 1082, 1091, 1092, 1101, 1102, 1111, 1112, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1194, 1206, 1211, 1218, 1219], "geom2d": [113, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 1081, 1082, 1091, 1092, 1101, 1102, 1111, 1112, 1184, 1211], "areageometri": [113, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 834, 841, 848, 856, 857, 864, 865, 1081, 1082, 1091, 1092, 1101, 1102, 1111, 1112, 1184, 1201], "wind_farm": [113, 114], "add_turbin": [113, 115, 365, 1220], "turbine_nam": [113, 117, 769, 771], "staticdata": [118, 119, 1194, 1209], "static": [118, 561, 563, 567, 568, 573, 574, 579, 580, 786, 788, 789, 824, 825, 1194, 1201, 1206, 1207, 1210, 1211, 1213, 1216, 1217, 1218, 1219], "directori": [118, 1194], "add_data_packag": [118, 786, 788], "context": [118, 786, 788, 789, 790, 791, 792, 793, 1211], "packag": [118, 786, 788, 789, 1191, 1194, 1195, 1196, 1197, 1201, 1204, 1206, 1207, 1208, 1209, 1211, 1212, 1214, 1217, 1220], "file_sfx": [118, 786, 788], "locat": [118, 490, 786, 788, 789, 1188, 1189, 1208, 1209, 1216, 1220], "add_data_package_fil": [118, 786, 789], "file_nam": [118, 120, 772, 777, 781, 786, 789, 792, 1194], "add_fil": [118, 786, 790, 791], "file_path": [118, 367, 368, 729, 734, 735, 736, 737, 738, 757, 765, 768, 769, 771, 772, 778, 781, 783, 786, 790, 791, 794, 799, 800, 1195], "path": [118, 120, 121, 367, 368, 379, 381, 406, 408, 420, 434, 524, 525, 540, 541, 561, 563, 567, 568, 573, 574, 579, 580, 768, 771, 777, 786, 790, 791, 792, 799, 800, 841, 1165, 1166, 1183, 1201, 1207, 1218], "get_file_path": [118, 786, 792, 1209], "check_raw": [118, 786, 792], "toc": [118, 786, 793, 1209], "content": [118, 432, 436, 786, 793, 1218], "data_book": [119, 786, 787], "parse_pct_file_nam": [120, 1194], "pars": [120, 121, 371, 372, 912, 947, 954, 986, 1125, 1134, 1150, 1194], "format": [120, 121, 371, 372, 379, 733, 768, 794, 800, 1195, 1209, 1210], "csv": [120, 121, 365, 366, 379, 729, 734, 769, 771, 794, 795, 797, 798, 1183, 1195, 1201, 1206, 1211, 1213, 1216, 1217, 1218, 1219], "pathlib": [120, 121, 786, 792, 1209], "parsed_data": [120, 121], "parse_pct_two_fil": [121, 1194], "file_name_a": [121, 1194], "file_name_b": [121, 1194], "second": [121, 321, 346, 1203], "constant": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 660, 801, 803, 805, 809, 810, 813, 1191, 1206, 1210, 1213, 1215, 1216, 1218, 1219, 1220], "amb_rpoint_result": [122, 1192], "amb_rpoint_r": [122, 1192], "identifi": [122, 246, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 1191, 1192, 1206], "dtype": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 1192, 1211], "__hash__": [123, 143, 248, 260], "hash": [123, 143, 248, 260], "__str__": [123, 174, 248, 290, 864, 866, 885, 887, 894, 905, 912, 954, 967, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "__lt__": [123, 148, 248, 266], "__le__": [123, 146, 248, 264], "__eq__": [123, 136, 248, 255], "__ne__": [123, 151, 248, 269], "__gt__": [123, 142, 248, 259], "__ge__": [123, 140, 248, 258], "__add__": [123, 126, 248, 250], "__radd__": [123, 157, 248, 275], "__sub__": [123, 175, 248, 291], "__rsub__": [123, 170, 248, 287], "__mul__": [123, 150, 248, 268], "__rmul__": [123, 165, 248, 282], "__mod__": [123, 149, 248, 267], "__rmod__": [123, 164, 248, 281], "__divmod__": [123, 135, 248, 254], "divmod": [123, 135, 159, 248, 254, 277], "__rdivmod__": [123, 159, 248, 277], "__pow__": [123, 156, 248, 274], "mod": [123, 156, 167, 248, 274, 284], "pow": [123, 156, 167, 248, 274, 284], "__rpow__": [123, 167, 248, 284], "__neg__": [123, 152, 248, 270], "__pos__": [123, 155, 248, 273], "__abs__": [123, 125, 248, 249], "ab": [123, 125, 248, 249], "__bool__": [123, 133, 248, 252], "__int__": [123, 144, 248, 262], "__float__": [123, 137, 248, 256], "__floordiv__": [123, 138, 248, 257], "__rfloordiv__": [123, 162, 248, 279], "__truediv__": [123, 176, 248, 292], "__rtruediv__": [123, 171, 248, 288], "see": [123, 124, 153, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 203, 204, 207, 208, 210, 211, 212, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 248, 271, 1021, 1022, 1026, 1027, 1042, 1077, 1078, 1080, 1174, 1176, 1177, 1206, 1211, 1213, 1214, 1219], "help": [123, 153, 248, 271, 794, 1021, 1022, 1026, 1027, 1077, 1078, 1174, 1176, 1177, 1201], "accur": [123, 153, 248, 271, 1021, 1022, 1026, 1027, 1077, 1078, 1174, 1176, 1177], "signatur": [123, 153, 248, 271, 1021, 1022, 1026, 1027, 1077, 1078, 1174, 1176, 1177], "as_integer_ratio": [123, 183], "pair": [123, 183, 1042, 1080], "whose": [123, 183, 1197, 1209], "ratio": [123, 183], "equal": [123, 183, 317, 331, 334, 1203], "denomin": [123, 183, 248, 295], "rais": [123, 183, 371, 372, 792], "overflowerror": [123, 183], "infin": [123, 183], "valueerror": [123, 183, 1042, 1080], "is_integ": [123, 206, 248, 296], "finit": [123, 206, 248, 296], "otherwis": [123, 206, 792, 1213], "item": [123, 134, 207, 248, 253], "parametr": [123, 134, 248, 253], "wrapper": [123, 134, 248, 253, 422, 1196], "around": [123, 134, 248, 253], "__invert__": [123, 145, 248, 263], "__lshift__": [123, 147, 248, 265], "__rlshift__": [123, 163, 248, 280], "__rshift__": [123, 169, 248, 286], "__rrshift__": [123, 168, 248, 285], "__and__": [123, 127, 248, 251], "__rand__": [123, 158, 248, 276], "__xor__": [123, 177, 248, 293], "__rxor__": [123, 172, 248, 289], "__or__": [123, 154, 248, 272], "__ror__": [123, 166, 248, 283], "tolist": [123, 240, 248], "method": [123, 134, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 203, 204, 207, 208, 210, 211, 212, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 248, 253, 367, 508, 725, 726, 799, 800], "ident": [123, 124, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 203, 204, 207, 208, 210, 211, 212, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 248, 1210, 1220], "attribut": [123, 124, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 203, 204, 207, 208, 210, 211, 212, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 248, 1209], "itemset": [123, 208, 248], "tobyt": [123, 238, 248], "tofil": [123, 239, 248], "tostr": [123, 241, 248], "byteswap": [123, 186, 248], "astyp": [123, 184, 248], "getfield": [123, 204, 248], "setfield": [123, 227, 248], "resiz": [123, 224, 248], "__array__": [123, 128, 248], "sc": [123, 128, 132, 248], "__array_wrap__": [123, 132, 248], "obj": [123, 132, 248, 926, 927, 929, 930, 1126, 1136, 1157], "__sizeof__": [123, 173, 248], "byte": [123, 173, 209, 213, 215, 234, 248], "__reduce__": [123, 160, 248], "helper": [123, 160, 248, 765, 794, 799, 800, 960, 1191, 1197, 1201], "pickl": [123, 160, 248], "dump": [123, 198, 199, 248], "transpos": [123, 243, 248], "put": [123, 219, 248], "repeat": [123, 222, 248, 988], "choos": [123, 187, 248, 1042, 1080, 1208, 1213, 1215, 1219], "sort": [123, 231, 248], "argsort": [123, 182, 248], "searchsort": [123, 226, 248], "argmax": [123, 180, 248], "argmin": [123, 181, 248], "reshap": [123, 223, 248], "squeez": [123, 232, 248], "view": [123, 202, 245, 248], "swapax": [123, 236, 248], "max": [123, 210, 248, 419, 525, 725, 726, 731, 753, 754, 755, 759, 760, 761, 762, 763, 764, 967, 968, 977, 985, 986, 988, 1030, 1056, 1057, 1199, 1206, 1212, 1216], "min": [123, 212, 248, 419, 525, 731, 753, 754, 755, 759, 760, 761, 762, 763, 764, 967, 968, 977, 985, 986, 988, 1030, 1056, 1057, 1199, 1206, 1216], "ptp": [123, 218, 248], "trace": [123, 242, 248], "diagon": [123, 196, 248], "clip": [123, 188, 248], "conj": [123, 190, 248], "conjug": [123, 191, 248], "nonzero": [123, 216, 248], "std": [123, 233, 248], "sum": [123, 235, 248, 731, 738, 744, 749, 751, 753, 754, 755, 756, 912, 942, 943, 954, 967, 968, 977, 985, 986, 1042, 1080, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1206, 1218], "cumsum": [123, 194, 248], "prod": [123, 217, 248], "cumprod": [123, 193, 248], "compress": [123, 189, 248], "flatten": [123, 203, 248], "ravel": [123, 220, 248], "round": [123, 225, 248], "__format__": [123, 139, 248], "formatt": [123, 139, 248], "setflag": [123, 228, 248], "newbyteord": [123, 215, 248], "new_ord": [123, 215, 248], "differ": [123, 215, 248, 437, 452, 460, 1196, 1204, 1206, 1209, 1210, 1216], "ndim": [123, 214, 248], "stride": [123, 234, 248], "pointer": [123, 195, 248], "items": [123, 209, 248], "length": [123, 209, 213, 248, 340, 362, 369, 419, 437, 438, 616, 617, 801, 802, 803, 805, 806, 807, 809, 810, 811, 813, 960, 1197, 1203, 1206, 1209], "element": [123, 209, 230, 248, 496, 497, 1042, 1080], "gentyp": [123, 230, 248], "nbyte": [123, 213, 248], "descriptor": [123, 197, 248], "real": [123, 221, 248, 815, 1201], "imag": [123, 205, 248, 731, 759, 760, 761, 762, 763, 764, 817, 818, 824, 826, 828, 834, 836, 841, 843, 848, 850, 856, 858], "imaginari": [123, 205, 248], "flat": [123, 202, 248], "t": [123, 124, 248, 350, 363, 364, 365, 545, 546, 756, 794, 796, 1042, 1080, 1203], "__array_interface__": [123, 129, 248], "protocol": [123, 129, 131, 248], "python": [123, 129, 134, 248, 253, 1042, 1080, 1206, 1207, 1214], "side": [123, 129, 248, 756], "__array_struct__": [123, 131, 248], "struct": [123, 131, 248], "__array_priority__": [123, 130, 248], "prioriti": [123, 130, 248], "pleas": [124, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 203, 204, 207, 208, 210, 211, 212, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 1207], "version": [134, 206, 253, 296, 1042, 1080, 1206, 1208], "22": [134, 206, 253, 296, 1209, 1211, 1215, 1218], "alia": [134, 253], "genericalia": [134, 253], "import": [134, 253, 1042, 1080, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "signedinteg": [134, 248, 253, 1192], "avail": [134, 253, 1196, 1204, 1205, 1208, 1209, 1218], "9": [134, 253, 1042, 1080, 1206, 1208, 1209, 1211, 1212, 1215, 1216, 1217, 1218, 1220], "later": [134, 253, 1211, 1215, 1218], "pep": [134, 253], "585": [134, 253], "hint": [134, 253], "gener": [134, 253, 604, 702, 757, 759, 760, 761, 762, 763, 764, 873, 930, 1198, 1204, 1206, 1209, 1211], "standard": [134, 253, 738, 748, 1042, 1080, 1217], "doubl": [183, 206, 1206], "10": [183, 623, 648, 660, 671, 692, 697, 702, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "25": [183, 649, 660, 661, 697, 698, 702, 703, 1209, 1211, 1213, 1215, 1217, 1218], "4": [183, 648, 1042, 1080, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "chang": [215, 524, 525, 1196, 1206, 1207, 1208, 1209, 1213], "made": 215, "field": [215, 716, 738, 756, 1210, 1214, 1217, 1219, 1220], "sub": [215, 955, 988, 1197, 1206, 1211], "follow": [215, 379, 616, 654, 1042, 1080, 1196, 1205, 1206, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1218, 1219, 1220], "swap": 215, "opposit": 215, "endian": 215, "littl": 215, "big": 215, "nativ": 215, "ignor": 215, "forc": [215, 545, 1196, 1208], "abov": [215, 760, 761, 763, 764, 1207, 1211, 1215, 1216, 1218, 1220], "new_dtyp": 215, "giga": [247, 1192], "watt": [247, 299, 303, 312, 315, 316, 752, 1192], "ityp": [248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 1192], "__index__": [248, 261], "convert": [248, 261, 1042, 1080, 1166, 1217], "suitabl": [248, 261], "bit_count": [248, 294], "bit": [248, 294], "absolut": [248, 294, 328, 359, 549, 552, 1196, 1203, 1206, 1220], "analog": [248, 294], "builtin": [248, 294], "popcount": [248, 294], "c": [248, 294, 1042, 1080, 1208, 1220], "numer": [248, 297, 864, 885, 887, 894, 901, 905, 909, 912, 944, 954, 967, 976, 978, 984, 986, 1125, 1134, 1150], "itself": [248, 297], "int64": [294, 296, 1211, 1217], "127": [294, 1218], "7": [294, 1042, 1080, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "uint32": 296, "5": [296, 648, 698, 1042, 1080, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "kappa": [298, 801, 803, 805, 809, 810, 813, 1192, 1202], "41": [298, 801, 803, 805, 809, 810, 813, 1192, 1202, 1211], "van": [298, 801, 803, 805, 809, 810, 813, 1192], "karman": [298, 801, 803, 805, 809, 810, 813, 1192], "mega": [299, 1192], "pop": [302, 921, 931, 957, 997, 1132, 1145, 1163, 1192], "popul": [302, 864, 869, 873, 885, 887, 890, 894, 898, 905, 912, 920, 921, 923, 927, 930, 931, 954, 960, 961, 967, 970, 976, 978, 981, 984, 986, 1000, 1003, 1005, 1008, 1010, 1013, 1015, 1018, 1021, 1024, 1026, 1029, 1031, 1034, 1037, 1040, 1043, 1046, 1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 1077, 1081, 1084, 1091, 1094, 1101, 1104, 1111, 1114, 1125, 1134, 1150, 1192, 1197, 1209, 1211], "1000000000": [303, 1192], "1000000": [303, 1192], "tw": [303, 312, 1192], "1000000000000": [303, 1192], "factor": [303, 338, 512, 513, 540, 541, 648, 649, 660, 661, 697, 698, 702, 703, 802, 806, 807, 811, 967, 968, 977, 985, 1016, 1044, 1192, 1196, 1202, 1203, 1206, 1220], "rel": [303, 329, 360, 1192, 1203], "rotor_point": [304, 305, 1192, 1212], "rweight": [306, 1192], "rotor_weight": [306, 1192], "tmodel": [308, 1192], "tmodel_sel": [309, 1192], "tname": [310, 1192, 1211, 1216, 1217], "terra": [312, 1192], "valid": [313, 567, 568, 573, 574, 660, 978, 979, 1037, 1038, 1039, 1040, 1041, 1081, 1082, 1085, 1091, 1095, 1101, 1105, 1111, 1115, 1192, 1199, 1207, 1218], "kilo": [316, 1192], "amb_cap": [317, 363, 364, 794, 796, 1203, 1218], "capac": [317, 331, 738, 740, 1203, 1206, 1218], "amb_p": [317, 319, 334, 363, 364, 794, 796, 1203, 1210, 1211, 1215, 1217, 1218], "amb_ct": [318, 363, 364, 794, 796, 1203, 1211, 1217], "thrust": [318, 332, 545, 546, 1196, 1203, 1206, 1207, 1214, 1215, 1220], "coeffici": [318, 332, 815, 1203, 1214, 1215], "user": [319, 342, 1042, 1080, 1191, 1195, 1203, 1206, 1214], "amb_rew": [320, 363, 364, 781, 782, 794, 796, 1203, 1210, 1215, 1217, 1218], "m": [320, 321, 322, 327, 333, 335, 340, 345, 346, 347, 355, 356, 362, 372, 379, 579, 616, 617, 759, 760, 761, 762, 763, 764, 887, 888, 1042, 1080, 1203, 1208, 1209, 1210, 1213, 1217, 1218, 1219], "amb_rews2": [321, 363, 364, 794, 796, 1203], "moment": [321, 322, 346, 347, 1203], "amb_rews3": [322, 363, 364, 794, 796, 1203], "third": [322, 347, 1203], "amb_rho": [323, 363, 364, 794, 796, 1203, 1211, 1217], "kg": [323, 348, 1203], "m3": [323, 348, 1203], "amb_t": [324, 363, 364, 794, 796, 1203], "temperatur": [324, 350, 1203], "kelvin": [324, 350, 1203], "amb_ti": [325, 363, 364, 794, 796, 1203, 1211, 1212, 1217], "amb_wd": [326, 363, 364, 525, 772, 774, 776, 777, 781, 794, 796, 1203, 1217], "degre": [326, 328, 329, 353, 359, 360, 815, 1188, 1189, 1201, 1203, 1220], "amb_w": [327, 363, 364, 794, 796, 1203, 1209, 1211, 1213, 1216, 1217, 1218, 1219], "amb_yaw": [328, 363, 364, 1203], "yaw": [328, 329, 359, 360, 363, 364, 549, 552, 568, 574, 580, 623, 692, 1196, 1203, 1205, 1206, 1207, 1212], "angl": [328, 329, 359, 360, 654, 655, 687, 1150, 1151, 1203, 1210, 1220], "amb_yawm": [329, 363, 364, 1203], "amb_yld": [330, 363, 364, 794, 796, 1203, 1218], "yield": [330, 361, 738, 745, 752, 1203, 1206, 1207, 1213, 1214, 1218, 1219], "gwh": [330, 361, 752, 1203, 1213, 1218, 1219], "cap": [331, 363, 364, 794, 796, 1203, 1218], "p": [331, 334, 342, 363, 364, 512, 567, 568, 574, 580, 768, 785, 794, 796, 1042, 1080, 1203, 1206, 1207, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "ct": [332, 363, 364, 434, 512, 545, 546, 560, 562, 563, 567, 568, 573, 574, 579, 580, 624, 644, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 660, 661, 665, 666, 668, 669, 671, 686, 693, 697, 698, 702, 703, 783, 785, 794, 796, 1196, 1200, 1203, 1206, 1209, 1215, 1217, 1220], "eff": [334, 742, 794, 796, 1203, 1218], "effici": [334, 738, 741, 742, 1042, 1080, 1203, 1206, 1213, 1215, 1218, 1219], "over": [335, 702, 738, 743, 744, 774, 776, 777, 815, 1042, 1080, 1203, 1204, 1206, 1211, 1219], "k": [336, 337, 338, 555, 556, 623, 624, 648, 649, 654, 655, 660, 661, 665, 666, 671, 687, 692, 693, 1196, 1203, 1206, 1212, 1218, 1219], "growth": [336, 623, 624, 648, 649, 654, 655, 660, 661, 665, 666, 692, 693, 697, 698, 702, 703, 1203, 1206, 1219], "kb": [337, 338, 555, 556, 1203, 1206], "kti": [337, 338, 555, 556, 557, 558, 559, 1196, 1203, 1206, 1212, 1218], "ti": [337, 338, 351, 363, 364, 392, 393, 399, 400, 483, 555, 556, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 702, 703, 725, 785, 794, 796, 984, 1196, 1197, 1203, 1206, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "between": [338, 1032, 1042, 1080, 1081, 1082, 1091, 1092, 1101, 1102, 1111, 1112, 1135, 1185, 1186, 1203, 1210, 1211, 1213], "max_p": [339, 512, 517, 1203, 1215, 1216], "maxp": [339, 1203, 1215, 1216], "maxim": [339, 496, 497, 512, 616, 617, 624, 644, 649, 655, 660, 661, 666, 671, 686, 693, 697, 698, 702, 703, 785, 817, 820, 824, 826, 830, 834, 837, 841, 844, 848, 852, 856, 860, 905, 912, 935, 936, 937, 938, 954, 967, 968, 973, 976, 977, 978, 982, 984, 985, 986, 992, 993, 1010, 1011, 1043, 1048, 1050, 1054, 1056, 1060, 1062, 1066, 1068, 1072, 1074, 1076, 1077, 1079, 1081, 1088, 1091, 1098, 1101, 1102, 1108, 1111, 1112, 1119, 1120, 1125, 1129, 1134, 1135, 1140, 1141, 1150, 1160, 1196, 1197, 1199, 1203, 1206, 1211, 1215], "derat": [339, 512, 783, 1200, 1203, 1206, 1215, 1216], "boost": [339, 512, 783, 1200, 1203, 1206, 1215, 1216], "mol": [340, 419, 594, 808, 809, 812, 813, 1202, 1203, 1209], "monin": [340, 808, 809, 812, 813, 1203, 1209], "ubukhof": [340, 1203], "pa_alpha": [343, 1203], "alpha": [343, 623, 624, 671, 686, 692, 693, 1203, 1211], "porteagel": [343, 344, 692, 1203, 1204, 1206], "pa_beta": [344, 1203], "beta": [344, 623, 624, 671, 686, 693, 1203], "rew": [345, 363, 364, 794, 796, 1203, 1210, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "rews2": [346, 363, 364, 545, 546, 568, 574, 580, 794, 796, 1203], "rews3": [347, 363, 364, 512, 513, 517, 568, 574, 580, 794, 796, 1203], "rho": [348, 363, 364, 392, 393, 399, 400, 560, 561, 563, 567, 568, 573, 574, 785, 794, 796, 1203, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "shear": [349, 597, 804, 1196, 1201, 1203, 1206], "expon": [349, 568, 574, 580, 597, 804, 1196, 1203, 1206, 1220], "txyh": [352, 1203], "vector": [352, 357, 369, 370, 759, 760, 761, 848, 849, 921, 931, 960, 1042, 1080, 1187, 1188, 1189, 1190, 1197, 1201, 1203, 1207, 1211, 1218, 1219], "wd": [353, 363, 364, 392, 393, 399, 400, 525, 611, 612, 794, 796, 1187, 1188, 1189, 1190, 1201, 1203, 1206, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "xyh": [357, 729, 735, 737, 1203], "yawm": [360, 363, 364, 549, 552, 623, 687, 692, 1196, 1203, 1220], "yld": [361, 363, 364, 794, 796, 1203, 1218], "z0": [362, 801, 802, 803, 805, 806, 807, 809, 810, 811, 813, 1202, 1203, 1209], "rough": [362, 801, 802, 803, 805, 806, 807, 809, 810, 811, 813, 1203], "amb2var": [363, 1203], "map": [363, 364, 371, 372, 379, 381, 406, 408, 419, 437, 438, 439, 440, 441, 442, 443, 478, 479, 507, 508, 525, 768, 778, 780, 879, 880, 915, 916, 1196, 1200, 1203, 1206, 1212, 1213, 1216], "var2amb": [364, 1203], "farm_layout": [365, 366, 367, 368, 369, 370, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219], "add_from_csv": [365, 366, 1195], "data_sourc": [365, 366, 371, 372, 379, 381, 390, 406, 408, 417, 478, 479, 507, 508, 524, 525, 540, 541, 560, 561, 567, 568, 1195, 1209, 1210, 1211, 1213, 1215, 1216, 1218, 1219, 1220], "col_index": 365, "col_nam": 365, "col_x": 365, "col_i": 365, "col_h": 365, "col_d": 365, "col_id": 365, "cols_models_pr": 365, "cols_models_post": 365, "turbine_base_nam": 365, "turbine_id": 365, "turbine_base_name_count_shift": 365, "turbine_paramet": [365, 368, 369, 370], "panda": [365, 366, 379, 381, 387, 406, 408, 414, 419, 478, 479, 507, 508, 524, 525, 540, 541, 560, 561, 562, 563, 567, 568, 573, 574, 579, 580, 729, 738, 745, 747, 749, 750, 751, 752, 754, 755, 757, 765, 768, 769, 770, 772, 774, 778, 781, 783, 794, 799, 800, 1195, 1196, 1201, 1206, 1215, 1216, 1217, 1218, 1220], "datafram": [365, 366, 379, 381, 406, 408, 419, 478, 479, 507, 508, 524, 525, 540, 541, 560, 561, 562, 563, 567, 568, 573, 574, 579, 580, 745, 747, 749, 750, 751, 752, 754, 755, 768, 769, 770, 772, 774, 781, 799, 800, 1195, 1196, 1206, 1215, 1216, 1217, 1218, 1220], "column": [365, 379, 381, 406, 408, 419, 478, 479, 507, 508, 525, 540, 541, 561, 563, 567, 568, 573, 574, 579, 768, 771, 794, 800, 815, 1042, 1080, 1166, 1209, 1213, 1215, 1216, 1218], "enter": 365, "instead": [365, 371, 372, 379, 381, 406, 408, 648, 649, 660, 771, 912, 921, 954, 986, 1042, 1080, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1206, 1208, 1213, 1219, 1220], "forward": [365, 367, 368, 369, 370, 425, 731, 736, 759, 760, 761, 762, 763, 764, 768, 799, 800], "add_from_df": [366, 1195, 1206], "add_from_fil": [367, 1195, 1209, 1218], "infer": [367, 368, 1217], "suffix": [367, 371, 372], "add_from_json": [368, 1195], "set_farm_nam": 368, "turbim": [368, 1195], "json": [368, 733, 1195], "add_grid": [369, 1195, 1210, 1219], "xy_bas": [369, 370, 1195, 1210, 1211, 1213, 1215, 1216, 1217, 1219], "step_vector": [369, 1195, 1210, 1219], "regular": [369, 371, 496, 1101, 1111, 1134, 1150, 1195, 1196, 1198, 1199, 1206, 1219], "grid": [369, 371, 452, 460, 496, 1016, 1044, 1050, 1091, 1092, 1101, 1111, 1112, 1134, 1135, 1150, 1195, 1196, 1198, 1199, 1206, 1210, 1219], "add_row": [370, 1195, 1211, 1213, 1215, 1216, 1217], "xy_step": [370, 1195, 1211, 1213, 1215, 1216, 1217], "row": [370, 540, 541, 1042, 1080, 1111, 1112, 1134, 1135, 1195, 1205, 1207, 1213, 1215, 1218], "fielddatanc": [371, 372, 373, 374, 375, 376, 377, 378, 1195, 1206, 1210], "heterogen": [371, 1195, 1205, 1207, 1213], "horizont": [371, 757, 759, 762, 1195, 1200, 1206, 1209, 1210, 1213, 1217], "netcdf": [371, 1195, 1210], "pattern": [371, 372, 1206, 1215], "end": [371, 372, 756, 788, 794, 799, 800], "nc": [371, 372, 794, 795, 797, 798, 1206, 1210], "One": [371, 372, 1210], "mani": [371, 372, 1206, 1207], "ovar": [371, 379, 406, 478, 540], "var2ncvar": [371, 372, 1210], "fixed_var": [371, 372, 379, 381, 406, 408, 417, 1209, 1210, 1211, 1213, 1215, 1216, 1218, 1219, 1220], "uniform": [371, 372, 379, 381, 399, 406, 408, 478, 479, 556, 600, 986, 988, 1195, 1196, 1206, 1209, 1217, 1218, 1220], "read": [371, 372, 379, 381, 406, 408, 420, 479, 508, 525, 541, 561, 563, 567, 568, 573, 574, 579, 580, 794, 799, 1165, 1166, 1183, 1184, 1195, 1201, 1206, 1210, 1218], "states_coord": [371, 372, 1210], "x_coord": [371, 372, 1210], "y_coord": [371, 372, 1210], "h_coord": [371, 372, 1210], "pre_load": [371, 372, 1210], "weight_ncvar": [371, 372], "bounds_error": [371, 372, 1210], "exceed": [371, 372, 419], "fill_valu": [371, 372], "time_format": [371, 372, 1210], "datetim": [371, 372], "string": [371, 372, 436, 766, 768, 774, 776, 777, 864, 866, 885, 887, 894, 905, 912, 954, 967, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1042, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1080, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "sel": [371, 372, 986, 988], "xr": [371, 372], "utmx": [372, 1210], "utmi": [372, 1210], "d_": 372, "multiheightst": [379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 1195, 1206], "multipl": [379, 630, 1195, 1196, 1206, 1207, 1216], "taken": [379, 1217], "exampl": [379, 785, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220], "50": [379, 419, 1209, 1211, 1212, 1213, 1216, 1219], "60": [379, 1211, 1219], "100": [379, 517, 616, 617, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "var2col": [379, 381, 406, 408, 417, 419, 478, 479, 1209, 1211, 1213, 1216, 1218, 1219], "fix": [379, 381, 392, 406, 408, 1005, 1062, 1091, 1195, 1199, 1206], "pd_read_par": [379, 381, 408, 479], "slice": [379, 381, 387, 406, 408, 414, 452, 1196, 1217], "rang": [379, 381, 387, 406, 408, 414, 524, 525, 1196, 1206, 1215, 1216, 1220], "states_loc": [379, 381, 387, 390, 406, 408, 414, 417, 1213], "loc": [379, 381, 387, 406, 408, 414, 1215, 1216], "rdict": [379, 380, 390, 391, 406, 407, 417, 418], "index_col": [379, 380, 390, 391, 406, 407, 417, 418], "scipi": [381, 541, 579, 580, 1042, 1080], "interp1d": 381, "multiheighttimeseri": [390, 391, 1195, 1206, 1209, 1213], "multi": [390, 633, 1195, 1205, 1206, 1207], "timeseri": [390, 417, 418, 752, 1195, 1205, 1207, 1213], "parse_d": [390, 391, 417, 418], "scanw": [392, 393, 394, 395, 396, 397, 398, 1195], "ws_list": [392, 393], "singlestatest": [399, 400, 401, 402, 403, 404, 405, 1195, 1206, 1217], "profdict": [399, 406], "profdata": [399, 400], "statest": [406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 1195, 1209, 1211, 1215, 1216, 1219, 1220], "readabl": [406, 1195, 1216, 1218], "rpar": [406, 567], "create_random_abl_st": [419, 1195], "cols_minmax": 419, "mol_abs_rang": 419, "5000": [419, 1211, 1215, 1218], "normal": [419, 486, 487, 611, 731, 1042, 1080, 1196, 1209, 1215, 1219], "random": [419, 1195, 1209], "abl": [419, 585, 588, 591, 594, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 1195, 1196, 1206], "neutral": [419, 585, 594, 801, 802, 803, 1196, 1201], "stratif": 419, "windio": [420, 1206], "read_cas": [420, 1195], "case_yaml": [420, 1195], "site_par": [420, 1195], "farm_par": 420, "ana_par": 420, "yaml": [420, 1195, 1206], "read_sit": 420, "read_farm": 420, "read_analys": 420, "farm_control": [421, 432, 1212], "basicfarmcontrol": [421, 1196, 1212], "control": [421, 432, 1196], "condit": [421, 524, 864, 865, 1185, 1196, 1206, 1211, 1214, 1216, 1217, 1220], "farm_model": [422, 423, 424, 425, 426, 427, 428, 432, 1212], "turbine2farmmodel": [422, 423, 424, 425, 426, 427, 428, 1196, 1212], "promot": [422, 1196], "simpli": [422, 486, 1196, 1208, 1209, 1212, 1216, 1219], "init": [425, 788, 789, 955, 986, 988, 991, 1128, 1139, 1159], "slightli": [429, 1201, 1216], "enhanc": [429, 1201], "pass": [431, 1042, 1080, 1219], "kind": [432, 1194, 1210, 1220], "rotor_model": [432, 444, 445, 452, 453, 461, 463, 464, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 1210, 1211, 1212, 1213, 1215, 1216, 1218, 1219, 1220], "turbine_ord": 432, "turbineord": 432, "partial_wak": [432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 1212], "partialwakemodel": 432, "wake_superposit": [432, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 1212], "pct_file": [432, 434], "print_toc": [432, 436, 1212], "curv": [434, 560, 561, 563, 567, 573, 574, 579, 580, 783, 785, 1196, 1200, 1206, 1207, 1215], "creation": [434, 772, 781, 1191, 1200, 1219], "more": [437, 1042, 1080, 1206, 1216, 1218], "than": [437, 716, 1218], "invok": [437, 512, 604, 1196, 1206, 1207, 1208, 1211, 1218, 1219, 1220], "wname2pwak": [437, 438], "wtype2pwak": [437, 438], "ones": [438, 445, 453, 461, 464, 472, 815], "partialaxiwak": [444, 445, 446, 447, 448, 449, 450, 451, 630, 1196, 1212], "axial": [444, 1196], "idea": [444, 716, 1215], "onc": [444, 1210, 1211, 1217, 1220], "radial": [444, 445, 631, 642, 646, 647, 652, 658, 669], "n": [444, 445, 452, 453, 460, 461, 496, 497, 759, 760, 761, 848, 849, 877, 878, 945, 946, 1005, 1006, 1010, 1011, 1021, 1022, 1042, 1062, 1063, 1080, 1196, 1209, 1212, 1217, 1218, 1220], "radii": [444, 645, 646, 651, 652, 657, 658, 668, 669, 1185, 1201], "cover": 444, "target": [444, 1216], "disc": [444, 463, 864, 865, 1214], "overlap": [444, 463, 496, 497], "circl": [444, 463, 834, 835, 836, 837, 838, 839, 840, 1081, 1082, 1085, 1091, 1092, 1095, 1101, 1102, 1105, 1111, 1112, 1115, 1185, 1186, 1201, 1211], "area": [444, 496, 497, 818, 824, 826, 828, 834, 836, 843, 850, 858, 864, 865, 1166, 1185, 1186, 1197, 1201, 1206, 1211], "partialdistslicedwak": [452, 453, 454, 455, 456, 457, 458, 459, 460, 633, 1196, 1212], "distanc": [452, 648, 649, 817, 818, 822, 824, 826, 828, 832, 834, 836, 839, 841, 843, 846, 848, 850, 854, 856, 858, 862, 887, 888, 1031, 1032, 1042, 1044, 1056, 1057, 1080, 1081, 1082, 1091, 1092, 1101, 1102, 1111, 1112, 1135, 1185, 1186, 1196, 1197, 1199, 1201, 1211, 1220], "make": [452, 1182, 1185, 1196, 1197, 1208, 1211, 1218], "structur": [452, 579, 1196, 1206, 1213, 1218], "optin": [452, 1166], "done": [452, 875], "grotor": 452, "gridrotor": [452, 453, 461, 496, 497, 498, 499, 500, 501, 502, 1196, 1212], "partialgrid": [460, 461, 462, 1196, 1212], "mai": [460, 512, 1196, 1210, 1220], "partialtophat": [463, 464, 465, 466, 467, 468, 469, 470, 1196, 1212], "hat": [463, 643, 1196, 1204, 1220], "get_wake_point": [463, 468, 471, 475], "rotorpoint": [471, 472, 473, 474, 475, 476, 477, 1196, 1212], "directli": [471, 781, 786, 912, 921, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1194, 1196, 1200, 1201, 1204, 1216], "setuniformdata": [478, 479, 480, 481, 482, 1196, 1206], "both": [478, 479, 640, 641, 660, 663, 697, 700, 702, 705, 1134, 1215, 1218, 1219], "assum": [478, 479, 1185], "Or": [478, 479], "independ": [478, 479, 1213], "written": [478, 479, 771, 1207], "tke2ti": [483, 484, 485, 1196, 1206, 1212], "tke": [483, 1196, 1206, 1209, 1213, 1214], "sqrt": [483, 1042, 1080, 1196], "wakedelta": [486, 487, 488, 489, 1196], "subtract": [486, 1196, 1211], "divid": [486, 487, 759, 760, 761, 762, 763, 764], "centrerotor": [490, 491, 492, 493, 494, 495, 1196, 1212], "compos": [496, 1196], "possibli": [496, 1196], "kick": [496, 1196], "out": [496, 1042, 1080, 1196, 1216, 1220], "outsid": [496, 1196, 1210], "reduc": [496, 497, 738, 753, 754, 755, 1206], "reduct": [496, 497], "actual": [496, 497, 912, 921, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1206, 1208, 1213, 1215, 1217], "repres": [496, 497, 540, 579, 732, 834, 841, 848, 1196, 1201, 1209, 1219, 1220], "circ": [496, 497], "recalcul": [496, 497], "accordingli": [496, 497], "nint": [496, 497], "200": [496, 497, 1209, 1211, 1213, 1215, 1220], "in_var": [503, 504], "vairabl": [503, 504], "func": [503, 504, 912, 921, 931, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1167, 1173, 1174, 1175, 1176, 1181], "f": [503, 504, 815, 1042, 1080, 1213, 1215, 1218, 1219, 1220], "in0": [503, 504], "in1": [503, 504], "stsel": [503, 504], "out0": [503, 504], "ou1": [503, 504], "where": [503, 504, 732, 1042, 1080, 1188, 1189, 1211, 1213, 1214, 1216, 1220], "inx": [503, 504], "outi": [503, 504], "lookupt": [507, 508, 509, 510, 511, 1196, 1206], "lookup": [507, 508, 512, 513, 545, 546, 567, 568, 573, 574, 579, 580, 752, 1196, 1206], "tabl": [507, 508, 540, 1196, 1206, 1215, 1216], "varmap": [507, 508, 864, 879, 880, 885, 887, 894, 905, 967, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077], "pd_file_read_par": [508, 525, 541, 561, 568], "xr_interp_arg": 508, "powermask": [512, 513, 514, 515, 516, 517, 1196, 1206, 1212, 1215], "below": [512, 760, 761, 763, 764, 1206, 1208], "rate": 512, "higher": [512, 707, 708, 716, 717, 1206], "introduc": [512, 1204, 1206], "so": [512, 815, 1206, 1214, 1215, 1217], "wise": [512, 540, 541, 1042, 1080], "var_ws_p": [512, 513, 568, 574, 580], "factor_p": [512, 513, 517], "update_p_ct": [512, 517], "rated_p": [512, 517], "var_w": 517, "p_lim": 517, "rotorcentrecalc": [518, 519, 520, 521, 522, 523, 1196, 1206, 1212], "sectormanag": [524, 525, 526, 527, 528, 1196, 1206, 1216], "range_var": [524, 525, 1216], "target_var": [524, 525, 1216], "col_tind": 525, "col_tnam": [525, 1216], "colmap": [525, 1216], "var_period": 525, "360": 525, "within": [525, 786, 1081, 1082, 1091, 1092, 1101, 1102, 1111, 1112, 1185, 1197, 1199, 1201, 1208, 1211, 1214], "exist": [525, 671, 690, 792, 1030, 1214, 1217, 1220], "period": 525, "setfarmvar": [529, 530, 531, 532, 533, 534, 535, 1196, 1206, 1215, 1220], "add_var": [529, 531, 986, 988, 1215, 1220], "remov": [529, 535, 1208, 1215], "setxyhd": [536, 537, 538, 539, 1196], "set_xi": [536, 537], "set_h": [536, 537], "set_d": [536, 537], "tablefactor": [540, 541, 542, 543, 544, 1196, 1206], "multipli": [540, 541, 648, 649, 660, 661, 697, 698, 702, 703, 1196, 1206], "dimension": [540, 1042, 1080, 1196, 1206], "col_var": [540, 541], "row_var": [540, 541], "onto": [540, 541], "interpn": [541, 579, 580], "thrust2ct": [545, 546, 547, 548, 1196, 1206, 1212], "thrust_var": [545, 546], "wsct": [545, 567, 573, 579], "var_ws_ct": [545, 546, 568, 574, 580], "yaw2yawm": [549, 550, 551, 1196, 1206, 1212, 1220], "yawm2yaw": [552, 553, 554, 1196, 1206, 1212, 1220], "linear": [555, 707, 725, 726, 1196, 1212, 1219], "ti_var": [555, 556, 702, 703], "k_var": [555, 556, 623, 624, 648, 649, 654, 655, 660, 661, 665, 666, 692, 693], "ti_val": [555, 556], "cpctfile": [560, 561, 1196, 1206], "pctfile": [560, 561, 563, 567, 568, 569, 570, 571, 572, 1196, 1209, 1212, 1216, 1217, 1218], "cp": [560, 561, 562, 563, 1196, 1206], "col_w": [560, 561, 567, 568, 573], "col_cp": [560, 561, 563], "225": [560, 561, 563, 579, 785, 1209, 1210, 1211, 1215, 1216, 1217, 1218, 1219, 1220], "paramer": 561, "cpctfromtwo": [562, 563, 1196, 1206], "pctfromtwo": [562, 573, 574, 575, 576, 577, 578, 1196], "data_source_cp": [562, 563], "data_source_ct": [562, 563, 573, 574, 579, 580], "col_ws_cp_fil": 563, "pd_file_read_pars_cp": 563, "pd_file_read_pars_ct": [563, 574, 580], "nulltyp": [564, 565, 566, 1196, 1206, 1212], "doe": [564, 1081, 1091, 1101, 1111, 1196, 1213, 1215], "col_p": [567, 568, 573, 574], "col_ct": [567, 568, 573, 574], "densitii": [567, 568, 573, 574], "correct": [567, 568, 573, 574, 604, 648, 649, 654, 716, 1196, 1206, 1214, 1215, 1217], "wsp": [567, 573, 579], "p_ct": [568, 574, 579, 580], "p_p": [568, 574, 580, 1220], "88": [568, 574, 580, 1209, 1211, 1218, 1220], "source_p": [573, 579], "source_ct": [573, 579], "rpars_p": [573, 579], "rpars_ct": [573, 579], "data_source_p": [573, 574, 579, 580], "col_ws_p_fil": [573, 574], "col_ws_ct_fil": 574, "pd_file_read_pars_p": [574, 580], "wsrho2pctfromtwo": [579, 580, 581, 582, 583, 584, 1196], "950": [579, 1211], "975": 579, "275": 579, "subsequ": [579, 1214], "neccessarili": [579, 1196, 1218], "ipars_p": 579, "ipars_ct": 579, "interpn_pars_p": 580, "interpn_pars_ct": 580, "vertical_profil": [585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "abllogneutralwsprofil": [585, 586, 587, 1196], "log": [585, 588, 591, 594, 802, 806, 807, 811, 1196, 1202], "abllogstablewsprofil": [588, 589, 590, 1196], "stabl": [588, 594, 805, 806, 807, 808, 809, 1196, 1201, 1208], "abllogunstablewsprofil": [591, 592, 593, 1196], "unstabl": [591, 594, 810, 811, 812, 813, 1196, 1201], "abllogwsprofil": [594, 595, 596, 1196, 1209], "pick": 594, "shearedprofil": [597, 598, 599, 1196, 1206], "uniformprofil": [600, 601, 602, 603, 1196], "farmord": [604, 605, 606, 607, 608, 609, 610, 1196, 1212], "warn": 604, "test": [604, 817, 823, 824, 826, 833, 834, 840, 841, 847, 848, 855, 856, 863, 1206, 1209], "purpos": [604, 1209, 1211, 1217], "give": [604, 1218], "when": [604, 1206, 1209, 1210, 1211, 1215, 1218], "iter": [604, 1206], "base_fram": [604, 605, 623, 624], "rotorwd1": [604, 605], "rotorwd": [604, 605, 611, 612, 613, 614, 615, 624, 1196, 1212], "align": [611, 1196], "axi": [611, 731, 759, 760, 761, 762, 763, 764, 775, 778, 780, 785, 818, 828, 836, 843, 850, 858, 896, 907, 917, 1042, 1080, 1081, 1085, 1091, 1095, 1101, 1105, 1111, 1115, 1187, 1188, 1189, 1190, 1196, 1200, 1201, 1217, 1220], "local": [611, 648, 649, 1196, 1207, 1208, 1209, 1211, 1214, 1218], "var_wd": [611, 612], "streamlin": [616, 617, 618, 619, 620, 621, 622, 702, 1196, 1204, 1206, 1210, 1212, 1214], "n_delstor": [616, 617], "increas": [616, 617, 1204], "max_length": [616, 617], "cl_ipar": [616, 617], "line": [616, 617, 643, 645, 648, 651, 654, 657, 665, 668, 818, 828, 836, 843, 850, 858, 1206, 1208, 1217], "100000": [616, 617, 1215], "yawedwak": [623, 624, 625, 626, 627, 628, 629, 1196, 1206, 1212], "bend": [623, 1196, 1206, 1220], "bastankhah": [623, 660, 671, 692, 1204, 1206, 1220], "port": [623, 671, 692, 1220], "agel": [623, 671, 692, 1220], "2016": [623, 671, 692, 1206], "http": [623, 648, 654, 660, 671, 692, 697, 702, 716, 815, 1182, 1185, 1206, 1207, 1208, 1218], "doi": [623, 648, 660, 671, 692], "org": [623, 648, 660, 671, 692, 697, 702, 716], "1017": [623, 671, 692], "jfm": [623, 671, 692], "595": [623, 671, 692], "porteagelmodel": [623, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 1204], "here": [623, 624, 648, 649, 660, 661, 665, 666, 692, 693, 1194, 1195, 1197, 1206, 1207, 1209, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "misalign": [623, 692, 1220], "ct_max": [623, 624, 643, 644, 649, 654, 655, 660, 661, 665, 666, 671, 686, 692, 693, 697, 698, 702, 703], "9999": [623, 624, 643, 644, 649, 654, 655, 661, 665, 666, 671, 686, 692, 693, 698, 703], "58": [623, 624, 671, 686, 692, 693, 1209, 1211], "07": [623, 624, 671, 686, 693, 1210, 1212], "beyond": [624, 644, 649, 655, 660, 661, 666, 671, 686, 693, 697, 698, 702, 703], "limit": [624, 644, 649, 655, 660, 661, 666, 671, 686, 693, 697, 698, 702, 703, 707, 708, 716, 717, 1206], "determin": [624, 671, 686, 693, 752, 1206, 1214], "onset": [624, 671, 686, 693], "far": [624, 671, 686, 693, 1206], "region": [624, 671, 686, 693], "axisymmetricwakemodel": [630, 631, 632, 640, 643, 1204], "distslicedwakemodel": [630, 633, 634, 635, 636, 637, 638, 639, 692, 1204], "r": [630, 631, 640, 641, 642, 643, 646, 647, 648, 652, 654, 658, 660, 663, 665, 669, 697, 700, 702, 705, 1204], "separ": [630, 633, 1204, 1206, 1214], "abil": [630, 633], "calc_wakes_spsel_x_r": [630, 631, 640, 642, 643, 647, 648, 654, 660, 665, 697, 702], "calc_wakes_spsel_x_yz": [630, 632, 633, 635, 640, 643, 648, 654, 660, 665, 692, 695, 697, 702], "n_r_per_x": [631, 642, 646, 647, 652, 658, 669], "n_sp_sel": [631, 632, 635, 641, 642, 645, 647, 651, 657, 663, 668, 695, 700, 705], "sp_sel": [631, 632, 635, 641, 642, 645, 647, 651, 657, 663, 668, 671, 684, 695, 700, 705], "non": [631, 632, 635, 641, 642, 645, 647, 651, 657, 663, 668, 695, 700, 705, 957, 997, 1030, 1042, 1080, 1132, 1145, 1163, 1207, 1208], "yz": [632, 633, 635, 695, 757, 764, 1204, 1206], "n_yz_per_x": [632, 635, 695], "denpend": [633, 1204], "look": [633, 634, 644, 649, 655, 661, 666, 693, 698, 703, 752, 1209, 1211, 1214, 1216, 1219], "up": [633, 634, 644, 649, 655, 661, 666, 693, 698, 703, 752], "superp": 633, "gaussianwakemodel": [640, 641, 642, 660, 697, 702, 1204], "gaussian": [640, 1204], "calc_amplitude_sigma_spsel": [640, 641, 660, 663, 697, 700, 702, 705], "amplitud": [640, 641, 660, 663, 697, 700, 702, 705], "sigma": [640, 641, 660, 663, 697, 700, 702, 705, 1206], "amsi": [641, 663, 700, 705], "tophatwakemodel": [643, 644, 645, 646, 647, 648, 654, 665, 1204], "calc_wake_radiu": [643, 646, 648, 652, 654, 658, 665, 669], "calc_centreline_wake_delta": [643, 645, 648, 651, 654, 657, 665, 668], "wake_r": [645, 646, 651, 652, 657, 658, 668, 669], "cl_del": [645, 651, 657, 668], "varlu": [645, 651, 657, 668], "crespohernandeztiwak": [648, 649, 650, 651, 652, 653, 1204, 1206, 1212], "crespo": [648, 1204], "hernandez": [648, 1204], "empir": [648, 1204], "correl": [648, 1042, 1080, 1204], "1016": [648, 660], "0167": 648, "6105": 648, "95": [648, 1209, 1211, 1219], "00033": 648, "we": [648, 1042, 1080, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "eqn": 648, "17": [648, 1209, 1211, 1215, 1218, 1219], "15": [648, 1209, 1210, 1211, 1213, 1215, 1216, 1218, 1219], "1088": [648, 697, 702], "1742": [648, 697, 702], "6596": [648, 697, 702], "625": 648, "012039": 648, "a_near": [648, 649], "a_far": [648, 649], "e1": [648, 649], "e2": [648, 649], "e3": [648, 649], "use_ambti": [648, 649], "sbeta_factor": [648, 649, 660, 661, 697, 698, 702, 703], "sbeta": [648, 649, 660, 661, 697, 698, 702, 703], "near_wake_d": [648, 649], "362": 649, "73": [649, 1211], "83": [649, 1042, 1080, 1211], "0325": 649, "32": [649, 1211], "iectiwak": [654, 655, 656, 657, 658, 659, 1204, 1212], "iec": [654, 1204], "64100": [654, 1204], "2005": [654, 1204], "8": [654, 698, 716, 729, 731, 736, 1204, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "orbit": 654, "dtu": 654, "dk": 654, "3750291": 654, "2009_31": 654, "pdf": [654, 697, 702, 716], "v2": 654, "volluk": 654, "implement": [654, 1211, 1214], "document": [654, 1042, 1080, 1197, 1206], "frandsen": [654, 697, 698, 1206], "2019": [654, 655], "opening_angl": [654, 655], "open": [654, 655, 1206], "21": [654, 655, 1209, 1211, 1215, 1219], "6": [654, 655, 1042, 1080, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "iec_typ": 655, "bastankhahwak": [660, 661, 662, 663, 664, 1204, 1212], "j": [660, 1042, 1080], "renen": 660, "2014": 660, "01": [660, 1209, 1211, 1212, 1213, 1218], "002": 660, "modif": 660, "fit": 660, "better": 660, "jensenwak": [665, 666, 667, 668, 669, 670, 1204, 1212], "jensen": [665, 1042, 1080, 1204, 1212], "repetit": [671, 1204], "avoid": [671, 1042, 1080, 1204, 1220], "mdata_kei": [671, 677], "check": [671, 674, 690, 792, 864, 885, 887, 894, 912, 922, 923, 954, 978, 979, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1028, 1029, 1031, 1037, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1185, 1211, 1218], "x0": [671, 685], "NEAR": [671, 678], "r_pc": [671, 680], "r_pc_": [671, 681], "ampl_near": [671, 673], "delta_near": [671, 676], "ampl_far": [671, 672], "sigma_y_far": [671, 682], "sigma_z_far": [671, 683], "delta_far": [671, 675], "calc_data": [671, 687], "gamma": [671, 687, 1220], "has_data": [671, 690], "clean": [671, 688], "radiant": [687, 1220], "porteagelwak": [692, 693, 694, 695, 696, 1204, 1212], "turboparkwak": [697, 698, 699, 700, 701, 1204, 1206, 1212], "turbopark": [697, 702, 1204, 1206], "iopscienc": [697, 702], "iop": [697, 702], "articl": [697, 702], "2265": [697, 702], "022063": [697, 702], "c1": [697, 698, 1056, 1057], "c2": [697, 698, 1056, 1057], "turboparkwakeix": [702, 703, 704, 705, 706, 1204, 1212], "linearsuperposit": [707, 708, 709, 710, 1196, 1206, 1212], "supersposit": [707, 711, 720, 1196], "rescal": [707, 711, 716, 720, 1196], "scale": [707, 708, 711, 712, 720, 721, 967, 968, 977, 985, 1056, 1057, 1210], "rule": [707, 708, 711, 712, 720, 721, 967, 968, 977, 985, 1206, 1216, 1220], "lim_low": [707, 708, 716, 717], "lower": [707, 708, 716, 717, 1030, 1206], "lim_high": [707, 708, 716, 717], "source_turbin": [708, 712, 721], "source_turbine_amb": [708, 712, 721], "source_turbine_": [708, 712, 721], "maxsuperposit": [711, 712, 713, 714, 715, 1196, 1212], "maximum": [711, 759, 760, 761, 762, 763, 764, 1042, 1080, 1196, 1206, 1219], "productsuperposit": [716, 717, 718, 719, 1196, 1206, 1212], "product": [716, 1042, 1080, 1196, 1212], "dimensionless": 716, "deficit": [716, 1204, 1214, 1218, 1219, 1220], "rather": 716, "equival": [716, 1214, 1218, 1220], "arxiv": 716, "2010": 716, "03873": 716, "equat": [716, 1206], "quadraticsuperposit": [720, 721, 722, 723, 724, 1196, 1212], "quadrat": [720, 725, 726, 1196, 1212], "tisuperposit": [725, 726, 727, 728, 1196, 1212], "ti_superp": [725, 726], "superp_to_amb": [725, 726], "combin": [725, 726, 1220], "farmlayoutoutput": [729, 730, 731, 732, 733, 734, 735, 736, 737, 1200, 1206, 1209, 1211, 1213, 1216, 1218, 1219], "plot": [729, 731, 734, 735, 736, 737, 757, 759, 760, 761, 762, 763, 764, 772, 776, 777, 778, 780, 781, 783, 785, 818, 828, 836, 843, 850, 858, 1085, 1095, 1105, 1115, 1182, 1200, 1206, 1210, 1211, 1215, 1216, 1217, 1218, 1219, 1220], "layout": [729, 731, 732, 733, 734, 735, 736, 737, 776, 777, 864, 885, 887, 894, 896, 905, 907, 912, 917, 954, 967, 976, 978, 984, 986, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1197, 1200, 1205, 1206, 1207, 1218], "fre": 729, "from_r": [729, 730], "results_st": [729, 730], "farm_result": [729, 730, 738, 739, 757, 758, 769, 770, 778, 779, 1210, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "from_result": [729, 730], "get_layout_data": [729, 732], "get_layout_dict": [729, 733], "get_figur": [729, 731, 736, 772, 776, 781, 1209, 1211, 1213, 1216, 1218, 1219], "color_bi": [729, 731, 1213, 1218, 1219], "fontsiz": [729, 731, 736], "figsiz": [729, 731, 759, 760, 761, 762, 763, 764, 778, 780, 785, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219], "annot": [729, 731, 1213, 1218, 1219], "figur": [729, 731, 757, 759, 760, 761, 762, 763, 764, 772, 776, 777, 781, 817, 818, 824, 826, 828, 834, 836, 841, 843, 848, 850, 856, 858, 864, 885, 887, 894, 896, 905, 907, 912, 917, 954, 967, 976, 978, 984, 986, 1081, 1085, 1091, 1095, 1101, 1105, 1111, 1115, 1125, 1134, 1150, 1182, 1201, 1206, 1211, 1213, 1217, 1218], "write_plot": [729, 736], "write": [729, 734, 735, 736, 737, 738, 757, 765, 768, 769, 771, 772, 777, 778, 781, 783, 794, 800, 1183, 1200, 1201, 1206], "write_xyh": [729, 737], "write_csv": [729, 734, 769, 771], "write_json": [729, 735], "format_col2var": [729, 738, 757, 765, 768, 769, 772, 778, 781, 783], "print_model": [729, 738, 757, 765, 767, 769, 772, 778, 781, 783, 864, 885, 887, 894, 902, 905, 910, 967, 976, 978, 984], "model_typ": [729, 738, 757, 765, 766, 769, 772, 778, 781, 783], "titl": [731, 759, 760, 761, 762, 763, 764, 775, 776, 777, 778, 780, 783, 785, 1081, 1085, 1091, 1095, 1101, 1105, 1111, 1115, 1209, 1213, 1215, 1216, 1218, 1219], "fig": [731, 759, 760, 761, 762, 763, 764, 1182, 1201, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "ax": [731, 759, 760, 761, 762, 763, 764, 778, 780, 785, 817, 818, 824, 826, 828, 834, 836, 841, 843, 848, 850, 856, 858, 864, 885, 887, 894, 896, 905, 907, 912, 917, 954, 967, 976, 978, 984, 986, 1081, 1085, 1091, 1095, 1101, 1105, 1111, 1115, 1125, 1134, 1150, 1209, 1211, 1213, 1215, 1216, 1217, 1218, 1219], "normalize_d": 731, "ret_im": [731, 759, 760, 761, 762, 763, 764], "barg": [731, 1085, 1095, 1105, 1115], "scatter": [731, 1206], "color": [731, 759, 760, 761, 762, 763, 764, 818, 828, 836, 843, 850, 858, 1206, 1218], "mean_rew": [731, 1213, 1218, 1219], "etc": [731, 1211, 1213], "wrt": [731, 738, 747, 748, 749, 750, 751, 817, 822, 824, 826, 832, 834, 839, 841, 846, 848, 854, 856, 862, 921, 931], "plt": [731, 759, 760, 761, 762, 763, 764, 780, 785, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "No": 731, "matplotlib": [731, 759, 760, 761, 762, 763, 764, 818, 828, 836, 841, 843, 850, 858, 896, 907, 917, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "pyplot": [731, 780, 785, 818, 828, 836, 843, 850, 858, 896, 907, 917, 1085, 1095, 1105, 1115, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "im": [731, 759, 760, 761, 762, 763, 764], "pathcollect": 731, "farmresultsev": [738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 1200, 1206, 1213, 1215, 1218, 1219], "farm_calc": 738, "weinsum": [738, 756], "rh": [738, 756], "einstein": [738, 756, 1206], "last": [738, 756, 815, 1208], "reduce_st": [738, 754, 1218], "vars_op": [738, 754, 755], "some": [738, 753, 754, 755, 814, 1042, 1080, 1201, 1211, 1214, 1215, 1220], "reduce_turbin": [738, 755], "reduce_al": [738, 753], "states_op": [738, 753], "turbines_op": [738, 753], "calc_states_mean": [738, 747], "calc_states_sum": [738, 749], "calc_states_std": [738, 748], "deviat": [738, 748], "calc_turbine_mean": [738, 750], "calc_turbine_sum": [738, 751], "calc_farm_mean": [738, 743], "calc_farm_sum": [738, 744], "calc_mean_farm_pow": [738, 746, 1213, 1215, 1218, 1219], "calc_turbine_yield": [738, 745, 752, 1218], "annual": [738, 752, 1213, 1218, 1219], "add_capac": [738, 740, 1218], "p_nom": [738, 740], "calc_farm_yield": [738, 745, 1213, 1219], "turbine_yield": [738, 745], "power_uncert": [738, 745], "p75": [738, 745, 1206], "p90": [738, 745, 1206], "add_effici": [738, 741, 1218, 1219], "calc_farm_effici": [738, 742, 1213, 1218, 1219], "fulli": [743, 744, 753, 1081, 1082, 1091, 1092, 1101, 1102, 1111, 1112, 1207], "contract": [743, 744, 753, 967, 968, 977, 985], "uncertainti": 745, "trigger": 745, "farm_yield": 745, "_type_": 748, "_description_": 748, "hour": 752, "delta_t": 752, "p_unit_w": 752, "retur": 752, "durat": 752, "datetime64": 752, "seri": [752, 1206, 1214, 1218], "It": [756, 1207, 1210, 1213, 1215, 1216], "about": [756, 934, 1211, 1215], "treat": 756, "right": [756, 761], "hand": 756, "einsum": 756, "express": [756, 1030], "convent": [756, 815, 1042, 1080], "mention": [756, 1209, 1213], "obligatori": 756, "flowplots2d": [757, 758, 759, 760, 761, 762, 763, 764, 1200, 1206, 1210, 1211, 1213, 1217, 1219, 1220], "2d": [757, 759, 760, 761, 762, 763, 764, 817, 841, 848, 1200, 1201, 1219], "flow": [757, 759, 760, 761, 762, 763, 764, 1200, 1205, 1206, 1207, 1213, 1214, 1217], "get_mean_fig_xi": [757, 762, 1211, 1219], "resolut": [757, 759, 760, 761, 762, 763, 764, 1210, 1211, 1213, 1217, 1219, 1220], "xmin": [757, 759, 760, 762, 763, 1211, 1213, 1220], "ymin": [757, 759, 761, 762, 764, 1211, 1220], "get_mean_fig_xz": [757, 763], "x_direct": [757, 760, 761, 763, 764, 1213], "270": [757, 760, 761, 763, 764, 1209, 1213, 1215, 1217, 1220], "xz": [757, 760, 763, 1206], "get_mean_fig_yz": [757, 764], "gen_states_fig_xi": [757, 759, 1210, 1217, 1220], "gen_states_fig_xz": [757, 760, 1213], "gen_states_fig_yz": [757, 761, 1220], "xmax": [759, 760, 762, 763, 1211, 1213, 1220], "ymax": [759, 761, 762, 764, 1211, 1220], "xlabel": [759, 760, 762, 763], "ylabel": [759, 761, 762, 764], "xspace": [759, 760, 762, 763, 1210], "500": [759, 760, 761, 762, 763, 764, 1056, 1057, 1209, 1210, 1211, 1212, 1213, 1216, 1219], "yspace": [759, 761, 762, 764, 1210], "var_min": [759, 760, 761, 762, 763, 764], "var_max": [759, 760, 761, 762, 763, 764], "normalize_xi": [759, 762], "normalize_var": [759, 760, 761, 762, 763, 764], "vlabel": [759, 760, 761, 762, 763, 764], "add_bar": [759, 760, 761, 762, 763, 764], "cmap": [759, 760, 761, 762, 763, 764, 776, 777, 1215], "quiver_n": [759, 760, 761, 1210], "quiver_par": [759, 760, 761, 1210], "ret_stat": [759, 760, 761, 762, 763, 764], "extra": [759, 760, 761, 762, 763, 764, 1042, 1080], "space": [759, 760, 761, 762, 763, 764, 1016, 1042, 1044, 1050, 1080, 1091, 1092, 1134, 1150, 1156, 1199, 1206], "contourf": [759, 760, 761, 762, 763, 764], "pure": [759, 760, 761, 762, 763, 764, 1000, 1005, 1010, 1015, 1021, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1081, 1091, 1198, 1199, 1206], "minimum": [759, 760, 761, 762, 763, 764], "bar": [759, 760, 761, 762, 763, 764, 1042, 1080, 1085, 1095, 1105, 1115, 1167, 1168, 1219], "colormap": [759, 760, 761, 762, 763, 764], "th": [759, 760, 761, 1042, 1080], "quiver": [759, 760, 761], "calc_point": [759, 760, 761, 762, 763, 764, 1217], "si": [759, 760, 761, 762, 763, 764], "quadmesh": [759, 760, 761, 762, 763, 764], "quadcontourset": [759, 760, 761, 762, 763, 764], "zmin": [760, 761, 763, 764, 1213, 1220], "zmax": [760, 761, 763, 764, 1213, 1220], "zlabel": [760, 761, 763, 764], "zspace": [760, 761, 763, 764], "normalize_x": [760, 763], "normalize_z": [760, 761, 763, 764], "north": [760, 761, 763, 764, 1216], "ech": [760, 761], "normalize_i": [761, 764], "left": 761, "weight_turbin": [762, 763, 764], "job": 765, "handi": 765, "format_dict": [768, 794, 800], "underli": [768, 864, 865, 868, 885, 886, 887, 888, 889, 894, 895, 897, 905, 906, 967, 968, 969, 976, 977, 978, 979, 980, 984, 985, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1015, 1016, 1017, 1021, 1023, 1026, 1031, 1032, 1033, 1037, 1038, 1039, 1043, 1044, 1045, 1050, 1051, 1052, 1056, 1057, 1058, 1062, 1063, 1064, 1068, 1069, 1070, 1074, 1075, 1077], "flappi": [768, 794, 798, 1206, 1207], "fv": [768, 785, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "4f": [768, 794, 796, 800], "resultswrit": [769, 770, 771, 1200, 1206], "roseplotoutput": [772, 773, 774, 775, 776, 777, 781, 1200, 1216], "rose": [772, 774, 776, 777, 781, 1200, 1205, 1206, 1207, 1209, 1211, 1216, 1218], "get_data_info": [772, 775, 781], "dname": [772, 775, 781], "descript": [772, 775, 781, 1191, 1195, 1196, 1197, 1204], "sector": [772, 774, 776, 777, 781, 1205, 1206, 1207, 1214, 1218], "var_bin": [772, 774, 776, 777, 781], "wd_var": [772, 774, 776, 777, 781], "px": [772, 776, 777, 781], "write_figur": [772, 777, 781], "legend": [774, 775, 776, 777], "bin": [774, 776, 777, 1208, 1209, 1218, 1219], "seper": [774, 776, 777], "relev": [774, 776, 777, 1196, 1204], "pd": [774, 1215, 1216, 1220], "long": [775, 1206], "text": 775, "turbo": [776, 777], "layout_dict": [776, 777], "title_dict": [776, 777], "stateturbinemap": [778, 779, 780, 1200, 1206, 1215], "heat": [778, 780, 1200, 1206], "plot_map": [778, 780, 1215], "subplot": [780, 785, 1209, 1211, 1215, 1217, 1218, 1219], "pcolormesh": 780, "statesroseplotoutput": [781, 782, 1200, 1206, 1209, 1211, 1213, 1216, 1218, 1219], "ws_var": [781, 782], "turbinetypecurv": [783, 784, 785, 1200, 1206, 1209, 1215], "plot_curv": [783, 785, 1209, 1215], "p_max": [783, 785, 817, 820, 824, 826, 830, 834, 837, 841, 844, 848, 852, 856, 860, 1211, 1215], "x_label": 785, "y_label": 785, "ws_min": [785, 1216], "ws_max": [785, 1216], "30": [785, 1209, 1211, 1218, 1219, 1220], "ws_step": 785, "05": [785, 1026, 1027, 1209, 1211, 1213, 1215, 1216, 1219, 1220], "pmax_arg": 785, "mask": [785, 1205, 1206, 1207, 1216], "interest": [785, 1196, 1214, 1217], "labl": 785, "minim": [785, 817, 821, 824, 826, 831, 834, 838, 841, 845, 848, 853, 856, 861, 887, 888, 912, 939, 940, 941, 954, 967, 968, 977, 984, 985, 986, 994, 995, 1015, 1016, 1021, 1031, 1032, 1044, 1074, 1081, 1082, 1089, 1091, 1092, 1099, 1101, 1102, 1109, 1111, 1112, 1121, 1122, 1125, 1130, 1134, 1135, 1142, 1143, 1150, 1156, 1161, 1197, 1199, 1211], "dbase": 786, "must": [788, 789, 887, 1197, 1210], "py": 789, "file_man": 789, "keyerror": 792, "pandasfilehelp": [794, 795, 796, 797, 798, 799, 800, 1201], "default_reading_paramet": [794, 797], "support": [794, 1042, 1080, 1206, 1207, 1208, 1214], "default_writing_paramet": [794, 798], "data_file_format": [794, 795], "export": 794, "default_format_dict": [794, 796], "bz2": [794, 795, 797, 798], "gz": [794, 795, 797, 798, 1213, 1218, 1219], "zip": [794, 795, 797, 798], "h5": [794, 795, 797, 798], "mode": [794, 798], "5f": [794, 796], "6f": [794, 796], "3f": [794, 796], "read_fil": [794, 799, 1165, 1183], "write_fil": [794, 800], "calc_w": [801, 804, 805, 810, 1202], "ustar": [801, 803, 805, 809, 810, 813, 1202], "friction": [801, 803, 805, 809, 810, 813, 1202], "veloc": [801, 803, 805, 809, 810, 813, 1202], "logz": [802, 807, 811, 1202], "lz": [802, 806, 807, 811], "ws_ref": [803, 809, 813, 1202], "h_ref": [803, 809, 813, 1202], "refer": [803, 804, 809, 813, 1042, 1080, 1182, 1202, 1209, 1220], "height0": [804, 1202], "ws0": [804, 1202], "psi": [805, 808, 810, 812, 1202], "lgz": [806, 1202], "obukhov": [808, 809, 812, 813, 1209], "all_subclass": [814, 1201], "cl": [814, 824, 825, 1201], "cubic_root": [815, 1201, 1206], "a0": [815, 1201], "a1": [815, 1201], "a2": [815, 1201], "a3": [815, 1201], "root": [815, 1201], "polynomi": [815, 1201], "work": [815, 1206, 1208, 1210, 1219], "fast": [815, 1207], "you": [815, 1042, 1080, 1208, 1212, 1213, 1214, 1217, 1218, 1220], "spare": 815, "yourself": [815, 1209], "github": [815, 1205, 1206, 1207, 1208], "com": [815, 1182, 1185, 1206, 1207, 1208], "opencv": 815, "blob": 815, "master": 815, "modul": 815, "calib3d": 815, "src": 815, "polynom_solv": 815, "cpp": 815, "n_a0": 815, "delta_wd": [816, 1201], "wd_a": [816, 1201], "wd_b": [816, 1201], "close": [817, 841, 1201, 1210], "geometri": [817, 819, 823, 824, 825, 826, 827, 829, 833, 834, 840, 841, 847, 848, 851, 855, 856, 857, 859, 863, 864, 865, 1081, 1082, 1091, 1092, 1101, 1102, 1111, 1112, 1166, 1184, 1197, 1199, 1201, 1211], "p_min": [817, 820, 821, 824, 826, 830, 831, 834, 837, 838, 841, 844, 845, 848, 852, 853, 856, 860, 861, 1211], "points_dist": [817, 822, 824, 826, 832, 834, 839, 841, 846, 848, 854, 856, 862], "return_nearest": [817, 822, 824, 826, 832, 834, 839, 841, 846, 848, 854, 856, 862], "points_insid": [817, 823, 824, 826, 833, 834, 840, 841, 847, 848, 855, 856, 863], "insid": [817, 823, 824, 826, 833, 834, 840, 841, 847, 848, 849, 855, 856, 863, 864, 865, 885, 1197, 1210], "add_to_figur": [817, 818, 824, 826, 828, 834, 836, 841, 843, 848, 850, 856, 858, 1211], "show_boundari": [817, 818, 824, 826, 828, 834, 836, 841, 843, 848, 850, 856, 858], "invers": [817, 819, 824, 826, 829, 834, 841, 848, 851, 856, 859, 1042, 1080, 1220], "invert": [817, 819, 824, 826, 829, 834, 841, 848, 851, 856, 859, 1201], "fill_mod": [818, 828, 834, 836, 841, 843, 848, 850, 858, 1211], "inside_slategrai": [818, 828, 858], "pars_boundari": [818, 828, 836, 843, 850, 858], "pars_dist": [818, 828, 836, 843, 850, 858, 1211], "dist": [818, 822, 828, 832, 836, 839, 843, 846, 850, 854, 858, 862, 888, 1042, 1080], "dist_insid": [818, 828, 836, 843, 850, 858, 1211], "dist_outsid": [818, 828, 836, 843, 850, 858, 1211], "inside_": [818, 828, 836, 843, 850, 858], "outside_": [818, 828, 836, 843, 850, 858], "command": [818, 828, 836, 843, 850, 858, 1208], "invertedareageometri": [819, 829, 851, 856, 857, 858, 859, 860, 861, 862, 863, 1201], "probe": [822, 823, 832, 833, 839, 840, 846, 847, 854, 855, 862, 863, 912, 914], "nearest": [822, 832, 839, 846, 854, 862], "bundari": [822, 832, 839, 846, 854, 862], "smallest": [822, 832, 839, 846, 854, 862], "p_nearest": [822, 832, 839, 846, 854, 862], "areaintersect": [824, 825, 1201], "intersect": [824, 1185, 1186, 1201], "areaunion": [826, 827, 828, 829, 830, 831, 832, 833, 1201], "union": [826, 1201], "cobnstructor": [834, 835], "closedpolygon": [841, 842, 843, 844, 845, 846, 847, 1201, 1211], "polygon": [841, 842, 1166, 1201, 1211], "poli": 841, "halfplan": [848, 849, 850, 851, 852, 853, 854, 855, 1201], "half": [848, 1201], "orthogon": 848, "opt": [864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1191, 1206, 1211], "constraint": [864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 905, 906, 912, 915, 921, 922, 923, 924, 926, 927, 929, 930, 931, 935, 939, 942, 954, 986, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1051, 1057, 1063, 1069, 1075, 1081, 1091, 1101, 1111, 1125, 1126, 1134, 1135, 1136, 1150, 1157, 1198, 1211], "areageometryconstraint": [864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 1197], "farmconstraint": [864, 887, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 1197], "constrain": [864, 885, 1197], "sel_turbin": [864, 865, 885, 887, 888, 894, 895, 903, 905, 906, 911, 912, 914, 948, 954, 967, 976, 978, 984, 986, 1125, 1134, 1150], "disc_insid": [864, 865], "ensur": [864, 865], "full": [864, 865, 1206, 1209, 1213], "problem": [864, 865, 868, 869, 872, 873, 885, 886, 887, 888, 889, 890, 894, 895, 897, 898, 905, 906, 912, 914, 915, 916, 919, 920, 921, 926, 929, 930, 931, 934, 954, 967, 968, 969, 970, 971, 976, 977, 978, 979, 980, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1206, 1211, 1218], "n_compon": [864, 872, 873, 876, 883, 884, 885, 887, 892, 893, 894, 900, 904, 905, 921, 922, 923, 930, 931, 967, 971, 973, 974, 975, 976, 978, 982, 983, 984, 1000, 1004, 1005, 1009, 1010, 1014, 1015, 1020, 1021, 1025, 1026, 1028, 1029, 1030, 1031, 1036, 1037, 1041, 1043, 1048, 1049, 1050, 1054, 1055, 1056, 1060, 1061, 1062, 1066, 1067, 1068, 1072, 1073, 1074, 1076, 1077, 1079], "compon": [864, 867, 868, 869, 870, 872, 873, 876, 883, 884, 885, 887, 889, 890, 892, 893, 894, 897, 898, 900, 904, 905, 912, 921, 931, 942, 943, 954, 967, 969, 970, 971, 973, 974, 975, 976, 978, 980, 981, 982, 983, 984, 986, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1021, 1023, 1024, 1025, 1026, 1030, 1031, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1079, 1080, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1187, 1188, 1190, 1211], "vardeps_float": [864, 883, 885, 887, 893, 894, 904, 905, 967, 975, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077], "calc_individu": [864, 868, 885, 887, 889, 894, 897, 905, 967, 969, 976, 978, 980, 984, 1000, 1002, 1005, 1007, 1010, 1012, 1015, 1017, 1021, 1023, 1026, 1031, 1033, 1037, 1039, 1043, 1045, 1050, 1052, 1056, 1058, 1062, 1064, 1068, 1070, 1074, 1077], "vars_int": [864, 867, 868, 869, 872, 873, 885, 887, 889, 890, 894, 897, 898, 905, 912, 919, 920, 921, 926, 927, 929, 930, 931, 950, 951, 954, 956, 957, 958, 959, 967, 969, 970, 971, 976, 978, 980, 981, 984, 986, 996, 997, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1031, 1033, 1034, 1037, 1039, 1040, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1081, 1083, 1084, 1091, 1093, 1094, 1101, 1103, 1104, 1111, 1113, 1114, 1125, 1126, 1131, 1132, 1134, 1136, 1144, 1145, 1146, 1147, 1150, 1157, 1162, 1163], "vars_float": [864, 867, 868, 869, 872, 873, 885, 887, 889, 890, 894, 897, 898, 905, 912, 919, 920, 921, 926, 927, 929, 930, 931, 950, 951, 954, 956, 957, 958, 959, 967, 969, 970, 971, 976, 978, 980, 981, 984, 986, 996, 997, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1031, 1033, 1034, 1037, 1039, 1040, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1081, 1083, 1084, 1091, 1093, 1094, 1101, 1103, 1104, 1111, 1113, 1114, 1125, 1126, 1131, 1132, 1134, 1136, 1144, 1145, 1146, 1147, 1150, 1157, 1162, 1163], "problem_result": [864, 868, 869, 872, 873, 885, 887, 889, 890, 894, 897, 898, 905, 919, 920, 929, 930, 967, 969, 970, 971, 976, 978, 980, 981, 984, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1031, 1033, 1034, 1037, 1039, 1040, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1083, 1084, 1093, 1094, 1103, 1104, 1113, 1114, 1126, 1136, 1157, 1211], "calc_popul": [864, 869, 885, 887, 890, 894, 898, 905, 967, 970, 976, 978, 981, 984, 1000, 1003, 1005, 1008, 1010, 1013, 1015, 1018, 1021, 1024, 1026, 1031, 1034, 1037, 1040, 1043, 1046, 1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 1077], "n_sel_turbin": [864, 885, 887, 894, 901, 905, 909, 912, 944, 954, 956, 957, 967, 976, 978, 984, 986, 996, 997, 1125, 1131, 1132, 1134, 1144, 1145, 1150, 1162, 1163], "add_to_layout_figur": [864, 885, 887, 894, 896, 905, 907, 912, 917, 954, 967, 976, 978, 984, 986, 1125, 1134, 1150], "get_bound": [864, 885, 887, 894, 1000, 1005, 1010, 1015, 1021, 1026, 1030, 1031, 1037], "check_individu": [864, 885, 887, 894, 1000, 1005, 1010, 1015, 1021, 1026, 1028, 1031, 1037], "constraint_valu": [864, 885, 887, 894, 912, 922, 923, 954, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1028, 1029, 1031, 1037, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "fullfil": [864, 885, 887, 894, 912, 922, 923, 954, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1028, 1029, 1031, 1037, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "check_popul": [864, 885, 887, 894, 1000, 1005, 1010, 1015, 1021, 1026, 1029, 1031, 1037], "component_nam": [864, 870, 885, 887, 894, 905, 967, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077], "var_names_int": [864, 882, 885, 887, 894, 905, 912, 953, 954, 967, 976, 978, 984, 986, 999, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1100, 1101, 1111, 1124, 1125, 1134, 1149, 1150], "n_vars_int": [864, 867, 868, 869, 872, 873, 878, 884, 885, 887, 889, 890, 894, 897, 898, 905, 912, 919, 920, 921, 926, 927, 929, 930, 931, 933, 937, 941, 946, 950, 951, 954, 956, 957, 958, 959, 967, 969, 970, 971, 976, 978, 980, 981, 984, 986, 990, 993, 995, 996, 997, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1031, 1033, 1034, 1037, 1039, 1040, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1078, 1081, 1083, 1084, 1091, 1093, 1094, 1096, 1098, 1099, 1101, 1103, 1104, 1111, 1113, 1114, 1117, 1120, 1122, 1125, 1126, 1131, 1132, 1134, 1136, 1138, 1141, 1143, 1144, 1145, 1146, 1147, 1150, 1157, 1162, 1163, 1211], "var_names_float": [864, 881, 885, 887, 894, 905, 912, 952, 954, 967, 976, 978, 984, 986, 998, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1090, 1091, 1101, 1110, 1111, 1123, 1125, 1133, 1134, 1148, 1150, 1164], "n_vars_float": [864, 867, 868, 869, 872, 873, 877, 883, 885, 887, 889, 890, 893, 894, 897, 898, 904, 905, 912, 919, 920, 921, 926, 927, 929, 930, 931, 932, 936, 940, 945, 950, 951, 954, 956, 957, 958, 959, 967, 969, 970, 971, 975, 976, 978, 980, 981, 984, 986, 989, 992, 994, 996, 997, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1031, 1033, 1034, 1037, 1039, 1040, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074, 1077, 1078, 1081, 1083, 1084, 1086, 1088, 1089, 1091, 1093, 1094, 1101, 1103, 1104, 1106, 1108, 1109, 1111, 1113, 1114, 1116, 1119, 1121, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1134, 1136, 1137, 1140, 1142, 1144, 1145, 1146, 1147, 1150, 1157, 1158, 1160, 1161, 1162, 1163, 1211], "vardeps_int": [864, 884, 885, 887, 894, 905, 967, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077], "rename_vars_int": [864, 880, 885, 887, 894, 905, 967, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077], "renam": [864, 879, 880, 885, 887, 894, 905, 967, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1206], "rename_vars_float": [864, 879, 885, 887, 894, 905, 967, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077], "finalize_individu": [864, 872, 885, 887, 894, 905, 912, 929, 954, 967, 971, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1126, 1134, 1136, 1150, 1157], "champion": [864, 872, 885, 887, 894, 905, 912, 929, 954, 967, 971, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1126, 1134, 1136, 1150, 1157], "finalize_popul": [864, 873, 885, 887, 894, 905, 912, 930, 954, 967, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "ana_deriv": [864, 867, 885, 887, 894, 905, 967, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077], "analyt": [864, 867, 885, 887, 894, 905, 921, 967, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077], "possibl": [864, 867, 885, 887, 894, 905, 967, 976, 978, 984, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1042, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1080, 1216], "info": [864, 866, 885, 887, 894, 905, 912, 954, 967, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "finish": [864, 875, 885, 887, 894, 905, 912, 954, 967, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1211], "farmoptproblem": [865, 886, 888, 895, 906, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 968, 976, 977, 979, 984, 985, 1001, 1006, 1011, 1016, 1032, 1038, 1044, 1051, 1057, 1063, 1069, 1075, 1197, 1206], "optim": [865, 872, 886, 888, 894, 895, 906, 912, 914, 918, 929, 950, 951, 954, 956, 957, 958, 959, 968, 971, 976, 977, 979, 984, 985, 986, 996, 997, 1001, 1006, 1011, 1016, 1026, 1032, 1038, 1042, 1044, 1051, 1057, 1063, 1069, 1075, 1080, 1081, 1091, 1101, 1111, 1125, 1126, 1131, 1132, 1134, 1136, 1144, 1145, 1146, 1147, 1150, 1157, 1162, 1163, 1191, 1197, 1198, 1199, 1205, 1206, 1207], "iwopi": [865, 888, 895, 906, 912, 914, 915, 916, 921, 931, 1026, 1077, 1081, 1091, 1101, 1111, 1197, 1199, 1207, 1211], "cannot": 867, "differenti": [867, 921, 931], "n_sel_compon": [867, 868, 869, 889, 890, 897, 898, 969, 970, 980, 981, 1002, 1003, 1007, 1008, 1012, 1013, 1017, 1018, 1023, 1024, 1033, 1034, 1039, 1040, 1045, 1046, 1052, 1053, 1058, 1059, 1064, 1065, 1070, 1071], "n_pop": [869, 873, 890, 898, 920, 923, 927, 930, 951, 957, 959, 960, 961, 970, 981, 997, 1003, 1008, 1013, 1018, 1024, 1029, 1034, 1040, 1046, 1053, 1059, 1065, 1071, 1084, 1094, 1104, 1114, 1132, 1145, 1147, 1163, 1197], "old": [879, 880], "dep": [883, 884, 893, 904, 967, 968, 975, 977, 985], "farmboundaryconstraint": [885, 886, 1197, 1211], "mindistconstraint": [887, 888, 889, 890, 891, 892, 893, 1197, 1211], "least": [887, 1042, 1080, 1197], "spatial": [887, 1042, 1080, 1197, 1206, 1209], "min_dist": [887, 888, 1031, 1032, 1043, 1044, 1081, 1082, 1091, 1092, 1101, 1102, 1111, 1112, 1134, 1135, 1211], "min_dist_unit": [887, 888, 1211], "constaint": [887, 891, 1031, 1035], "geom_layout": [894, 905, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1197], "farmobject": [905, 906, 907, 908, 909, 910, 911, 967, 968, 977, 978, 979, 985, 1197], "runner": [912, 914, 954, 1125, 1135, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1206, 1211, 1218, 1219], "calc_farm_arg": [912, 914], "calc_farm": [912, 914, 1210, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "all_turbin": [912, 918, 954, 986, 1125, 1134, 1150], "counter": [912, 925, 954, 986, 1125, 1134, 1150], "tvar": [912, 949, 954, 986, 1125, 1134, 1150], "turbine_i": [912, 947, 949, 954, 986, 1125, 1134, 1150], "parse_tvar": [912, 947, 954, 986, 1125, 1134, 1150], "tvr": [912, 947, 954, 986, 1125, 1134, 1150], "drop_var": [912, 934], "exclud": [912, 934], "update_problem_individu": [912, 950, 954, 958, 986, 1125, 1134, 1146, 1150], "latest": [912, 950, 951, 954, 958, 959, 986, 1125, 1134, 1146, 1147, 1150, 1208], "update_problem_popul": [912, 951, 954, 959, 986, 1125, 1134, 1147, 1150], "apply_individu": [912, 919, 954, 986, 1081, 1083, 1091, 1093, 1101, 1103, 1111, 1113, 1125, 1134, 1150], "apply_popul": [912, 920, 954, 986, 1081, 1084, 1091, 1094, 1101, 1104, 1111, 1114, 1125, 1134, 1150], "whole": [912, 920, 954, 986, 1081, 1084, 1091, 1094, 1101, 1104, 1111, 1114, 1125, 1134, 1150, 1206], "int_inf": [912, 913, 937, 941, 954, 986, 993, 995, 1081, 1091, 1101, 1111, 1120, 1122, 1125, 1134, 1141, 1143, 1150], "999999": [912, 913, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "initial_values_int": [912, 933, 954, 986, 990, 1081, 1091, 1096, 1101, 1111, 1117, 1125, 1134, 1138, 1150], "min_values_int": [912, 941, 954, 986, 995, 1081, 1091, 1099, 1101, 1111, 1122, 1125, 1134, 1143, 1150], "max_values_int": [912, 937, 954, 986, 993, 1081, 1091, 1098, 1101, 1111, 1120, 1125, 1134, 1141, 1150], "initial_values_float": [912, 932, 954, 986, 989, 1081, 1086, 1091, 1101, 1106, 1111, 1116, 1125, 1127, 1134, 1137, 1150, 1158], "min_values_float": [912, 940, 954, 986, 994, 1081, 1089, 1091, 1101, 1109, 1111, 1121, 1125, 1130, 1134, 1142, 1150, 1161], "max_values_float": [912, 936, 954, 986, 992, 1081, 1088, 1091, 1101, 1108, 1111, 1119, 1125, 1129, 1134, 1140, 1150, 1160], "add_object": [912, 916, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1211], "varmap_int": [912, 915, 916, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "varmap_float": [912, 915, 916, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "add_constraint": [912, 915, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1211], "min_values_constraint": [912, 939, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "max_values_constraint": [912, 935, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "constraints_tol": [912, 924, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "toler": [912, 924, 954, 986, 1026, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "n_object": [912, 926, 927, 929, 938, 943, 954, 986, 1081, 1091, 1101, 1111, 1125, 1126, 1134, 1136, 1150, 1157, 1211], "n_constraint": [912, 924, 926, 927, 929, 930, 935, 939, 942, 954, 986, 1081, 1091, 1101, 1111, 1125, 1126, 1134, 1136, 1150, 1157, 1211], "calc_gradi": [912, 921, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "ivar": [912, 921, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "gradient": [912, 921, 931, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "get_gradi": [912, 921, 931, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "obtain": [912, 931, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1209, 1213, 1219], "link": [912, 931, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1207, 1211, 1218], "maximize_obj": [912, 938, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "evaluate_individu": [912, 926, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "evaluate_popul": [912, 927, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "check_constraints_individu": [912, 922, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "check_constraints_popul": [912, 923, 954, 986, 1081, 1091, 1101, 1111, 1125, 1134, 1150], "subject": 918, "fvar": 921, "vr": 921, "overload": 921, "consid": [921, 931, 1218], "optfunctionlist": [921, 931], "n_vr": 921, "ctol": 924, "ret_prob_r": 926, "addition": 926, "con": [926, 927, 929, 930, 1126, 1136, 1157], "were": [931, 1206, 1214, 1219, 1220], "previous": 931, "cf": [931, 1216], "problemdefaultfunc": 931, "decid": [934, 1208], "drop": 934, "cma": 935, "inf": [936, 940, 992, 994, 1030, 1088, 1089, 1108, 1109, 1119, 1121, 1129, 1130, 1140, 1142, 1160, 1161], "unbound": [936, 937, 940, 941, 992, 993, 994, 995, 1088, 1089, 1108, 1109, 1119, 1120, 1121, 1122, 1129, 1130, 1140, 1141, 1142, 1143, 1160, 1161], "cmi": 939, "n_con": 942, "n_obj": 943, "farmvarsproblem": [954, 955, 956, 957, 958, 959, 986, 987, 1125, 1134, 1135, 1150, 1156, 1197, 1198, 1206], "pre_rotor_var": [954, 955], "post_rotor_var": [954, 955], "opt2farm_vars_individu": [954, 956, 986, 996, 1125, 1131, 1134, 1144, 1150, 1162], "opt2farm_vars_popul": [954, 957, 986, 997, 1125, 1132, 1134, 1145, 1150, 1163], "post_rotor": 955, "super": [955, 991, 1128, 1139, 1159], "farm_var": [956, 957, 996, 997, 1131, 1132, 1144, 1145, 1162, 1163], "popstat": [960, 961, 962, 963, 964, 965, 966, 1197], "artifici": [960, 1197], "farmvarobject": [967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 984, 1197], "contract_st": [967, 968, 977, 985], "contract_turbin": [968, 977, 985], "maxfarmpow": [976, 977, 1197, 1211], "maximize_pow": [976, 977, 1211], "maxnturbin": [978, 979, 980, 981, 982, 983, 1197], "turrbin": [978, 1197], "check_valid": [978, 979], "count": [978, 979, 1206], "max_n_turbin": [978, 979], "minimalmaxti": [984, 985, 1197], "minimize_ti": [984, 985], "optfarmvar": [986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1198], "typ": [986, 988], "keyword": [987, 1173, 1175, 1181, 1184], "model_kei": 988, "geometr": [1000, 1001, 1005, 1006, 1010, 1011, 1015, 1016, 1021, 1031, 1032, 1037, 1038, 1043, 1044, 1050, 1051, 1056, 1057, 1062, 1063, 1068, 1069, 1074, 1075, 1081, 1091, 1198, 1199, 1206], "cmpnt": [1000, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1031, 1033, 1034, 1037, 1039, 1040, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1058, 1059, 1062, 1064, 1065, 1068, 1070, 1071, 1074], "additio": [1001, 1006, 1011, 1016, 1032, 1038], "cfixn": [1005, 1006, 1007, 1008, 1009, 1199], "cmaxn": [1010, 1011, 1012, 1013, 1014, 1199], "cmindens": [1015, 1016, 1017, 1018, 1019, 1020, 1199], "min_valu": [1015, 1016], "dfactor": [1015, 1016, 1043, 1044], "min_dens": [1015, 1016], "cminn": [1021, 1022, 1023, 1024, 1025, 1199], "optfunct": [1026, 1077], "tol": [1026, 1027], "violat": 1026, "1e": [1026, 1027, 1211], "mindist": [1031, 1032, 1033, 1034, 1035, 1036, 1199], "cdist": [1042, 1080], "xa": [1042, 1080], "xb": [1042, 1080], "metric": [1042, 1080], "euclidean": [1042, 1080], "m_a": [1042, 1080], "observ": [1042, 1080], "m_b": [1042, 1080], "callabl": [1042, 1080], "braycurti": [1042, 1080], "canberra": [1042, 1080], "chebyshev": [1042, 1080], "cityblock": [1042, 1080], "cosin": [1042, 1080], "dice": [1042, 1080], "ham": [1042, 1080], "jaccard": [1042, 1080], "jensenshannon": [1042, 1080], "kulczynski1": [1042, 1080], "mahalanobi": [1042, 1080], "match": [1042, 1080], "minkowski": [1042, 1080], "rogerstanimoto": [1042, 1080], "russellrao": [1042, 1080], "seuclidean": [1042, 1080], "sokalmichen": [1042, 1080], "sokalsneath": [1042, 1080], "sqeuclidean": [1042, 1080], "yule": [1042, 1080], "norm": [1042, 1080], "unweight": [1042, 1080], "varianc": [1042, 1080], "vstack": [1042, 1080], "ddof": [1042, 1080], "vi": [1042, 1080], "covari": [1042, 1080], "matrix": [1042, 1080], "inv": [1042, 1080], "cov": [1042, 1080], "u": [1042, 1080, 1187, 1188, 1211], "ij": [1042, 1080], "except": [1042, 1080], "thrown": [1042, 1080], "arrang": [1042, 1080], "_p": [1042, 1080], "quasi": [1042, 1080], "citi": [1042, 1080], "block": [1042, 1080, 1211], "manhattan": [1042, 1080], "u_i": [1042, 1080], "v_i": [1042, 1080], "x_i": [1042, 1080], "squar": [1042, 1080], "_2": [1042, 1080], "frac": [1042, 1080], "cdot": [1042, 1080], "its": [1042, 1080, 1150, 1198, 1207, 1214, 1217], "dot": [1042, 1080], "proport": [1042, 1080], "those": [1042, 1080, 1214], "disagre": [1042, 1080], "To": [1042, 1080], "save": [1042, 1080, 1218], "shannon": [1042, 1080], "probabl": [1042, 1080], "q": [1042, 1080], "pointwis": [1042, 1080], "kullback": [1042, 1080], "leibler": [1042, 1080], "diverg": [1042, 1080], "precis": [1042, 1080], "max_i": [1042, 1080], "sum_i": [1042, 1080], "brai": [1042, 1080], "curti": [1042, 1080], "synonym": [1042, 1080], "kulczynski": [1042, 1080], "roger": [1042, 1080], "tanimoto": [1042, 1080], "russel": [1042, 1080], "rao": [1042, 1080], "sokal": [1042, 1080], "michen": [1042, 1080], "sneath": [1042, 1080], "suppli": [1042, 1080], "ariti": [1042, 1080], "could": [1042, 1080, 1206, 1214, 1216, 1217, 1219], "dm": [1042, 1080], "lambda": [1042, 1080], "librari": [1042, 1080, 1211, 1217], "would": [1042, 1080], "ineffici": [1042, 1080], "syntax": [1042, 1080], "find": [1042, 1080, 1206], "four": [1042, 1080, 1210], "35": [1042, 1080, 1209, 1211], "0456": [1042, 1080], "85": [1042, 1080, 1211], "2672": [1042, 1080], "1174": [1042, 1080], "89": [1042, 1080, 1211, 1215, 1218], "9711": [1042, 1080], "9728": [1042, 1080], "9422": [1042, 1080], "36": [1042, 1080, 1209, 1211], "1667": [1042, 1080], "86": [1042, 1080, 1211, 1213, 1218], "7833": [1042, 1080], "7044": [1042, 1080], "6172": [1042, 1080], "8856": [1042, 1080], "0893": [1042, 1080], "3561": [1042, 1080], "8477": [1042, 1080], "corner": [1042, 1080, 1210], "cube": [1042, 1080], "b": [1042, 1080, 1207], "maxdens": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1199], "max_dens": [1043, 1044], "maxgridspac": [1050, 1051, 1052, 1053, 1054, 1055, 1199], "max_dxdi": [1050, 1051], "memimadist": [1056, 1057, 1058, 1059, 1060, 1061, 1199], "c3": [1056, 1057], "mimamean": [1056, 1057], "diff": 1057, "ofixn": [1062, 1063, 1064, 1065, 1066, 1067, 1199], "omaxn": [1068, 1069, 1070, 1071, 1072, 1073, 1074, 1199], "maxn": [1068, 1069], "ominn": [1074, 1075, 1076, 1199], "vnames_int": 1078, "vnames_float": 1078, "cname": 1078, "geomlayout": [1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1199, 1206], "involv": [1081, 1091, 1101, 1111, 1206], "calc_valid": [1081, 1082], "get_fig": [1081, 1085, 1091, 1095, 1101, 1105, 1111, 1115], "plotli": [1081, 1085, 1091, 1095, 1101, 1105, 1111, 1115, 1182, 1201, 1206], "true_circl": [1085, 1095, 1105, 1115], "ndarari": [1085, 1095, 1105, 1115], "draw": [1085, 1095, 1105, 1115], "geomlayoutgrid": [1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1199, 1206], "background": [1091, 1092, 1199, 1206, 1210, 1211, 1214], "grid_spac": [1091, 1092], "geomreggrid": [1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1199, 1206], "max_dist": [1101, 1102, 1111, 1112, 1135], "n_grid": [1111, 1112, 1134, 1135], "n_max": [1111, 1112], "n_row_max": [1111, 1112, 1135], "farmlayoutoptproblem": [1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1198, 1211], "reggridslayoutoptproblem": [1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1198], "sever": [1134, 1198, 1206], "mix": 1134, "min_spac": [1134, 1150, 1156], "max_n_row": 1134, "regularlayoutoptproblem": [1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1198, 1206], "spacing_x": [1150, 1154], "spacing_i": [1150, 1155], "offset_x": [1150, 1152], "offset_i": [1150, 1153], "read_shp": [1165, 1166, 1201, 1206], "fname": [1165, 1166, 1201], "shp": [1165, 1166, 1183, 1201], "geopanda": [1165, 1166, 1183], "geodatafram": 1165, "wsg84": 1165, "read_shp_polygon": [1166, 1184, 1201, 1206], "name_col": 1166, "geom_col": 1166, "to_utm": 1166, "ret_utm_zon": [1166, 1184, 1201], "extract": 1166, "utm": [1166, 1184], "zone": [1166, 1184], "letter": [1166, 1184], "32u": [1166, 1184], "point_dict_exterior": 1166, "point_dict_interior": 1166, "utm_zone_str": [1166, 1184], "utem": [1166, 1184], "daskrunn": [1167, 1168, 1169, 1170, 1171, 1172, 1173, 1201, 1206, 1210, 1211, 1218, 1219], "schedul": [1167, 1168, 1206, 1211, 1218], "progress_bar": [1167, 1168, 1206], "show": [1167, 1168, 1206, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "progress": [1167, 1168, 1218, 1219], "cluster_arg": [1167, 1168], "explicit": [1167, 1168, 1206, 1210], "cluster": [1167, 1168, 1206, 1207, 1211, 1218, 1219], "setup": [1167, 1168, 1205, 1206, 1207, 1211, 1213, 1215, 1216, 1217, 1219, 1220], "client_arg": [1167, 1168], "client": [1167, 1168], "n_worker": [1167, 1168], "is_distribut": [1167, 1171], "threads_per_work": 1168, "process": [1168, 1214], "worker": [1168, 1218], "thread": [1168, 1218], "defaultrunn": [1174, 1175, 1201, 1206], "show_plotly_fig": [1182, 1201, 1206], "displai": [1182, 1201, 1218, 1219], "window": [1182, 1201, 1206], "stackoverflow": 1182, "question": [1182, 1211], "53570384": 1182, "how": [1182, 1205, 1206, 1207, 1215, 1218, 1219], "standalon": 1182, "shp2csv": [1183, 1201, 1206], "ifil": [1183, 1201], "ofil": [1183, 1201], "in_kwarg": [1183, 1201], "out_kwarg": [1183, 1201], "inam": 1183, "onam": 1183, "to_csv": 1183, "shp2geom2d": [1184, 1201], "shapefil": [1184, 1201], "geom": 1184, "tool": [1184, 1218], "two_circl": [1185, 1186], "r1": [1185, 1186, 1201], "r2": [1185, 1186, 1201], "sure": [1185, 1208, 1211, 1218], "These": [1185, 1196, 1210, 1211, 1213, 1220], "diego": 1185, "assencio": 1185, "8d6ca3d82151bad815f78addf9b5c1c6": 1185, "calc_area": [1186, 1201], "anoth": [1186, 1219, 1220], "uv2wd": [1187, 1201], "uv": [1187, 1188, 1201], "wd2uv": [1188, 1201], "against": [1188, 1189], "wd2wdvec": [1189, 1201], "wdvec": [1189, 1190, 1201], "wdvec2wd": [1190, 1201], "shortcut": 1191, "concret": [1191, 1196, 1204], "access": 1194, "reach": [1194, 1206], "atmospher": [1195, 1196, 1209], "interfac": [1195, 1206, 1211], "propag": [1196, 1214], "due": [1196, 1216], "ie": 1196, "machin": 1196, "net": 1196, "intern": [1197, 1207], "extern": 1197, "classif": 1204, "jupyt": 1205, "notebook": [1205, 1206, 1214], "folder": [1205, 1206], "repositori": [1205, 1207], "overview": [1205, 1206, 1207, 1217], "manag": [1205, 1206, 1207, 1214], "releas": [1206, 1208], "readi": [1206, 1212, 1217, 1220], "transfer": [1206, 1220], "fraunhof": [1206, 1207, 1211], "iw": [1206, 1207, 1209, 1211], "hous": 1206, "predecessor": [1206, 1207], "yet": 1206, "just": [1206, 1215], "enjoi": 1206, "await": 1206, "comment": 1206, "issu": [1206, 1207], "thank": 1206, "changelog": 1206, "fraunhoferiw": [1206, 1207, 1208], "commit": [1206, 1207], "style": 1206, "black": 1206, "small": [1206, 1209], "discov": 1206, "flake8": 1206, "now": [1206, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1219, 1220], "pytest": 1206, "unittest": 1206, "workflow": 1206, "docu": 1206, "io": 1206, "doc": [1206, 1218], "html": 1206, "miss": 1206, "wind_rot": [1206, 1210], "manifest": 1206, "orst": 1206, "pctsinglefil": 1206, "iecti2019": 1206, "iecti2005": 1206, "concept": 1206, "instal": [1206, 1207], "pip": [1206, 1207], "capabl": [1206, 1207], "As": [1206, 1208, 1220], "pcttwofil": 1206, "windroseoutput": 1206, "histogram": 1206, "ambientwindroseoutput": 1206, "improv": 1206, "downwind": [1206, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "browser": 1206, "featur": [1206, 1216], "wind_ros": 1206, "layout_single_st": 1206, "layout_wind_ros": 1206, "layout_opt": [1206, 1211], "ipynb": 1206, "demonstr": [1206, 1209, 1211, 1215, 1217, 1219, 1220], "wrf": [1206, 1213, 1214], "ambientroseplotoutput": 1206, "multi_height": 1206, "usag": 1206, "bug": 1206, "veer": 1206, "power_mask": 1206, "solv": [1206, 1211], "cubic": 1206, "forgotten": 1206, "api": [1206, 1207, 1218], "hotfix": 1206, "wsrho2pcttwofil": 1206, "sector_manag": 1206, "sector_man": 1206, "col_model": 1206, "offset": 1206, "compare_wak": 1206, "compar": [1206, 1215, 1216], "yawed_wak": 1206, "width": 1206, "simplifi": 1206, "until": 1206, "converg": 1206, "accept": 1206, "replac": [1206, 1208], "intuit": 1206, "turboparkix": 1206, "summar": 1206, "bracket": 1206, "eq": 1206, "wrong": 1206, "layout_regular_grid": 1206, "geom_reggrid": 1206, "affect": [1206, 1215], "geopandas_help": 1206, "interior": 1206, "11": [1206, 1208, 1209, 1211, 1215, 1218, 1220], "cleaner": 1206, "treatment": 1206, "slimmer": 1206, "distribut": [1206, 1209, 1211, 1218], "move": [1206, 1211], "irrespect": 1206, "restart": 1206, "complet": [1206, 1209, 1212, 1213, 1216, 1218, 1219], "incomplet": 1206, "slurm": 1206, "queue": 1206, "system": [1206, 1208, 1209, 1214, 1217, 1218], "timeseries_slurm": 1206, "hpc": 1206, "apigen": 1206, "softwar": [1207, 1209], "modular": 1207, "steer": 1207, "construct": 1207, "analysi": 1207, "studi": 1207, "comparison": 1207, "simul": [1207, 1209, 1214], "complex": [1207, 1218], "chain": 1207, "perform": 1207, "ow": 1207, "remot": 1207, "enabl": 1207, "well": [1207, 1209, 1211, 1220], "tracker": 1207, "report": 1207, "mit": 1207, "conda": 1207, "histori": 1207, "fork": [1207, 1208], "branch": [1207, 1208], "git": [1207, 1208, 1210], "checkout": 1207, "new_branch": 1207, "your": [1207, 1208, 1217], "am": 1207, "awesom": 1207, "messag": 1207, "push": 1207, "pull": 1207, "request": 1207, "develop": 1207, "flapfoam": 1207, "public": [1207, 1220], "through": 1207, "publicli": 1207, "fund": 1207, "research": 1207, "project": 1207, "particular": [1207, 1218], "feder": 1207, "ministri": 1207, "econom": 1207, "affair": 1207, "climat": 1207, "action": [1207, 1214], "bmwk": 1207, "roject": 1207, "smart": 1207, "grant": 1207, "0325851b": 1207, "0325397b": 1207, "03ee3008a": 1207, "educ": 1207, "bmbf": 1207, "framework": 1207, "h2digit": 1207, "03sf0635": 1207, "venv": 1208, "conveni": [1208, 1217], "prefer": 1208, "python3": 1208, "Then": 1208, "activ": 1208, "everi": 1208, "leav": 1208, "deactiv": 1208, "altern": 1208, "dev": 1208, "egg": 1208, "clone": 1208, "cd": 1208, "whenev": 1208, "concern": 1208, "recommend": [1208, 1210], "forg": 1208, "channel": 1208, "while": 1208, "again": [1208, 1211, 1215], "build": 1208, "Such": 1209, "often": [1209, 1214], "terminologi": [1209, 1214, 1217], "three": [1209, 1220], "67": [1209, 1211, 1218], "randomli": 1209, "t0": [1209, 1211, 1215, 1216, 1217, 1218, 1220], "101872": [1209, 1218], "70": [1209, 1210, 1211, 1216, 1218, 1219], "1004753": [1209, 1218], "57": [1209, 1211, 1218], "t1": [1209, 1211, 1215, 1216, 1217, 1218, 1220], "103659": [1209, 1218], "97": [1209, 1211, 1218], "1002993": [1209, 1218], "29": [1209, 1211, 1218], "t2": [1209, 1211, 1215, 1217, 1218], "100780": [1209, 1218], "09": [1209, 1218], "1000779": [1209, 1218], "t3": [1209, 1211, 1215, 1217, 1218], "100290": [1209, 1218], "42": [1209, 1211, 1218], "1004330": [1209, 1218], "t4": [1209, 1211, 1215, 1217], "103005": 1209, "1003540": 1209, "t5": [1209, 1211], "100102": 1209, "92": [1209, 1211], "1004849": 1209, "55": [1209, 1211], "t6": [1209, 1211], "104162": 1209, "1001061": 1209, "like": [1209, 1214, 1216], "mesoscal": 1209, "75": [1209, 1210, 1211, 1213, 1218], "2009": [1209, 1213], "00": [1209, 1211, 1213, 1218], "37214": [1209, 1213], "42685": [1209, 1213], "28838": [1209, 1213], "31": [1209, 1210, 1211, 1213, 1218], "23": [1209, 1211, 1213, 1218], "27767": [1209, 1213], "36368": [1209, 1213], "30095": [1209, 1213], "At": 1209, "90": [1209, 1211, 1213, 1217], "150": [1209, 1211, 1213, 1218, 1219], "250": [1209, 1211, 1213, 1216, 1220], "o": [1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220], "16": [1209, 1211, 1213, 1215, 1216, 1218, 1219], "20": [1209, 1210, 1211, 1212, 1213, 1215, 1216, 1218, 1219], "binnd": 1209, "layer": 1209, "64": [1209, 1211, 1218], "253": 1209, "032": 1209, "542331196166035e": 1209, "65": [1209, 1211, 1218, 1219], "207": 1209, "145": 1209, "0001230528308906": 1209, "49": [1209, 1210, 1211], "46": [1209, 1211, 1219], "116": 1209, "0001563449299843": 1209, "72": [1209, 1210, 1211, 1215], "314": 1209, "048": 1209, "618827331554488e": 1209, "18": [1209, 1211, 1215], "302": 1209, "027": 1209, "694": 1209, "98695302482496e": 1209, "3000": [1209, 1211, 1215, 1220], "2018": 1209, "24": [1209, 1211, 1215, 1218], "172": 1209, "27": [1209, 1211], "51": [1209, 1211], "184": 1209, "13": [1209, 1211, 1213, 1215], "52": [1209, 1211], "198": 1209, "04": [1209, 1211, 1212], "34": [1209, 1211], "209": [1209, 1211], "93": [1209, 1211], "19": [1209, 1211, 1215, 1218], "78": [1209, 1211, 1219], "217": 1209, "223": 1209, "26": [1209, 1210, 1211, 1218], "68": [1209, 1211], "227": 1209, "02": [1209, 1211, 1212], "8000": [1209, 1217, 1218], "2017": [1209, 1218], "62": [1209, 1211, 1218], "244": [1209, 1218], "06": [1209, 1211, 1213, 1218], "0504": [1209, 1218], "99": [1209, 1211, 1216, 1218], "243": [1209, 1218], "03": [1209, 1211, 1217, 1218], "0514": [1209, 1218], "0522": [1209, 1218], "33": [1209, 1211, 1218], "241": [1209, 1218], "0523": [1209, 1218], "0518": 1209, "242": 1209, "0513": 1209, "coars": [1209, 1211, 1219], "216": [1209, 1211, 1219], "site": [1209, 1211], "bremen": [1209, 1211, 1216], "germani": [1209, 1211], "consist": [1209, 1215, 1216, 1217, 1219], "00158": [1209, 1211, 1219], "00244": [1209, 1211, 1219], "00319": [1209, 1211, 1219], "12": [1209, 1211, 1215, 1217, 1219, 1220], "00367": 1209, "00042": [1209, 1211, 1219], "veri": [1209, 1210, 1211, 1218], "inhomogen": 1209, "long_nam": 1209, "deg": 1209, "rotat": 1209, "subtitl": 1209, "author": 1209, "date": 1209, "2021": 1209, "300": [1209, 1211, 1215, 1220], "2500": [1209, 1210, 1211], "180": 1209, "220": 1209, "120": 1209, "dtu10": 1209, "dtu10mw": [1209, 1212], "iea15": 1209, "iea15mw": [1209, 1212], "iwt7": [1209, 1212], "nrel5": [1209, 1215, 1217, 1218], "nrel5mw": [1209, 1210, 1211, 1212, 1213, 1215, 1217, 1218, 1219, 1220], "nstate": 1209, "ncurv": 1209, "pctcurv": 1209, "39": [1209, 1210, 1211, 1217, 1218], "categori": 1209, "14": [1209, 1211, 1215, 1218], "relative_to": 1209, "parent": 1209, "lt": [1209, 1211, 1217], "posixpath": 1209, "gt": [1209, 1211, 1217], "shown": 1209, "printout": [1209, 1217], "feel": 1209, "invit": 1209, "best": [1210, 1211, 1216], "wai": 1210, "similar": 1210, "claim": 1210, "associ": 1210, "home": 1210, "jona": 1210, "netcfd": 1210, "back": 1210, "our": [1210, 1211, 1212, 1213, 1215, 1216, 1219, 1220], "let": [1210, 1211, 1213, 1215, 1216, 1218, 1219, 1220], "domain": 1210, "rectangl": 1210, "realiz": [1210, 1220], "instanc": 1210, "streamlines_100": [1210, 1212], "grid16": [1210, 1212], "jensen_linear_k007": [1210, 1212, 1217], "partial_wakes_model": [1210, 1211, 1213, 1215, 1216, 1218, 1219, 1220], "auto": [1210, 1211, 1212, 1213, 1215, 1216, 1218, 1219, 1220], "4000": [1210, 1211, 1216, 1219], "implicit": [1210, 1211, 1218, 1220], "fr": [1210, 1213, 1215, 1217, 1218], "to_datafram": [1210, 1213, 1215, 1217, 1218, 1220], "scale_unit": 1210, "201": 1210, "158092": 1210, "491089": 1210, "1474": 1210, "211367": 1210, "208": [1210, 1211], "044994": 1210, "673386": 1210, "1580": 1210, "523022": 1210, "214": [1210, 1211], "523994": 1210, "960601": 1210, "1748": 1210, "171047": 1210, "218": 1210, "242345": 1210, "867297": 1210, "1127": 1210, "597810": 1210, "222": 1210, "297880": 1210, "283373": 1210, "1352": 1210, "715530": 1210, "899315": 1210, "731909": 1210, "808657": 1210, "1614": 1210, "607085": 1210, "1101": 1210, "211997": 1210, "236": 1210, "751304": 1210, "932726": 1210, "1156": 1210, "958672": 1210, "237": 1210, "139685": 1210, "375640": 1210, "142662": 1210, "1406": 1210, "547918": 1210, "801": 1210, "751505": 1210, "484049": 1210, "818854": 1210, "381124": 1210, "1665": 1210, "347000": 1210, "908": 1210, "970303": 1210, "311353": 1210, "703701": 1210, "149847": 1210, "1054": 1210, "871543": 1210, "454": 1210, "760942": 1210, "259090": 1210, "995899": 1210, "857833": 1210, "1185": 1210, "898485": 1210, "690": 1210, "639688": 1210, "676969": 1210, "357075": 1210, "1396": 1210, "122949": 1210, "44": [1210, 1211], "537113": 1210, "352448": 1210, "263710": 1210, "521": 1210, "748653": 1210, "492": 1210, "140844": 1210, "47": [1210, 1211], "447853": 1210, "960030": 1210, "917024": 1210, "724": 1210, "421405": 1210, "710": 1210, "071241": 1210, "815208": 1210, "580130": 1210, "998": 1210, "581195": 1210, "462887": 1210, "352662": 1210, "621921": 1210, "552147": 1210, "960214": 1210, "363478": 1210, "184792": 1210, "580285": 1210, "552663": 1210, "task": 1211, "detail": [1211, 1214, 1218], "pymoo": 1211, "nice": 1211, "genet": 1211, "optimizer_pymoo": 1211, "gm": 1211, "tackl": 1211, "wind_rose_bremen": [1211, 1216, 1219], "0036700002": [1211, 1219], "next": [1211, 1213, 1215, 1217, 1218, 1219], "1200": 1211, "800": [1211, 1217], "900": [1211, 1219], "float64": [1211, 1217], "1500": 1211, "700": 1211, "wish": [1211, 1218, 1219, 1220], "t7": 1211, "t8": 1211, "t9": 1211, "notic": [1211, 1215, 1216, 1218, 1220], "shortli": 1211, "begin": 1211, "bastankhah_linear_k002": [1211, 1212, 1213, 1215, 1216], "rotor_wd": [1211, 1212, 1213, 1215, 1216, 1218, 1219], "n_obj_cmptn": 1211, "n_con_cmptn": 1211, "impli": 1211, "ga": 1211, "form": [1211, 1218], "n_max_gen": 1211, "pop_siz": 1211, "solver": 1211, "problem_par": 1211, "algo_par": 1211, "seed": 1211, "setup_par": 1211, "term_par": 1211, "ftol": 1211, "xtol": 1211, "print_info": 1211, "sampl": 1211, "float_random": 1211, "floatrandomsampl": 1211, "termin": 1211, "defaultsingleobjectivetermin": 1211, "001": 1211, "n_gen": 1211, "n_eval": 1211, "cv_min": 1211, "cv_avg": 1211, "f_avg": 1211, "f_min": 1211, "257950e": 1211, "094916e": 1211, "180418e": 1211, "141625e": 1211, "279782e": 1211, "157184e": 1211, "404513e": 1211, "577682e": 1211, "579169e": 1211, "703733e": 1211, "350": 1211, "531147e": 1211, "050876e": 1211, "400": 1211, "000000e": 1211, "605222e": 1211, "588240e": 1211, "450": 1211, "103920e": 1211, "527620e": 1211, "582192e": 1211, "550": 1211, "732673e": 1211, "600": [1211, 1213, 1215, 1216], "832754e": 1211, "586968e": 1211, "591846e": 1211, "650": 1211, "055741e": 1211, "588486e": 1211, "604179e": 1211, "8416979966": 1211, "586179e": 1211, "750": [1211, 1220], "0056020975": 1211, "586244e": 1211, "592827e": 1211, "609887e": 1211, "850": 1211, "597835e": 1211, "616432e": 1211, "601994e": 1211, "619099e": 1211, "608318e": 1211, "637494e": 1211, "615190e": 1211, "645683e": 1211, "1050": 1211, "622881e": 1211, "646187e": 1211, "1100": 1211, "631506e": 1211, "653047e": 1211, "1150": 1211, "640921e": 1211, "655091e": 1211, "648388e": 1211, "657861e": 1211, "1250": 1211, "651988e": 1211, "663615e": 1211, "1300": 1211, "655195e": 1211, "1350": 1211, "658165e": 1211, "667660e": 1211, "28": 1211, "1400": 1211, "660791e": 1211, "671652e": 1211, "1450": 1211, "663724e": 1211, "676832e": 1211, "667884e": 1211, "679974e": 1211, "1550": 1211, "672357e": 1211, "685551e": 1211, "1600": 1211, "676653e": 1211, "688468e": 1211, "1650": 1211, "681032e": 1211, "688999e": 1211, "1700": 1211, "684254e": 1211, "692540e": 1211, "1750": 1211, "686841e": 1211, "1800": 1211, "689011e": 1211, "693343e": 1211, "37": 1211, "1850": 1211, "690736e": 1211, "700848e": 1211, "38": 1211, "1900": 1211, "692806e": 1211, "701437e": 1211, "1950": 1211, "695244e": 1211, "702613e": 1211, "40": 1211, "2000": [1211, 1216], "698077e": 1211, "714461e": 1211, "2050": 1211, "701772e": 1211, "2100": 1211, "705495e": 1211, "716273e": 1211, "43": 1211, "2150": 1211, "709527e": 1211, "720787e": 1211, "2200": 1211, "712644e": 1211, "721430e": 1211, "45": 1211, "2250": 1211, "715937e": 1211, "722818e": 1211, "2300": 1211, "719261e": 1211, "726242e": 1211, "2350": 1211, "721874e": 1211, "728699e": 1211, "48": 1211, "2400": 1211, "724323e": 1211, "729085e": 1211, "2450": 1211, "726669e": 1211, "731540e": 1211, "729169e": 1211, "736498e": 1211, "2550": 1211, "731473e": 1211, "2600": 1211, "733755e": 1211, "739439e": 1211, "53": 1211, "2650": 1211, "736553e": 1211, "741091e": 1211, "54": [1211, 1218], "2700": 1211, "737859e": 1211, "2750": 1211, "739620e": 1211, "746115e": 1211, "56": 1211, "2800": 1211, "741132e": 1211, "2850": 1211, "742407e": 1211, "2900": 1211, "743667e": 1211, "59": 1211, "2950": 1211, "744499e": 1211, "747450e": 1211, "745637e": 1211, "749378e": 1211, "61": 1211, "3050": 1211, "746819e": 1211, "750740e": 1211, "3100": 1211, "748079e": 1211, "751545e": 1211, "63": [1211, 1218], "3150": 1211, "749500e": 1211, "752455e": 1211, "3200": 1211, "750617e": 1211, "3250": 1211, "751276e": 1211, "752688e": 1211, "66": [1211, 1218], "3300": 1211, "751675e": 1211, "753603e": 1211, "3350": 1211, "752037e": 1211, "753628e": 1211, "3400": 1211, "752668e": 1211, "754781e": 1211, "69": 1211, "3450": 1211, "753223e": 1211, "755507e": 1211, "3500": 1211, "753940e": 1211, "755627e": 1211, "71": [1211, 1215, 1219], "3550": 1211, "754475e": 1211, "756641e": 1211, "3600": 1211, "754917e": 1211, "756729e": 1211, "3650": 1211, "755482e": 1211, "756732e": 1211, "74": 1211, "3700": 1211, "755880e": 1211, "756858e": 1211, "3750": 1211, "756292e": 1211, "757238e": 1211, "76": 1211, "3800": 1211, "756666e": 1211, "757649e": 1211, "77": [1211, 1218], "3850": 1211, "756985e": 1211, "757750e": 1211, "3900": 1211, "757224e": 1211, "757984e": 1211, "79": [1211, 1217], "3950": 1211, "757503e": 1211, "758511e": 1211, "80": [1211, 1219], "757798e": 1211, "759081e": 1211, "81": [1211, 1219], "4050": 1211, "758090e": 1211, "82": 1211, "4100": 1211, "758474e": 1211, "759855e": 1211, "4150": 1211, "758746e": 1211, "759968e": 1211, "84": [1211, 1213], "4200": 1211, "758965e": 1211, "4250": 1211, "759223e": 1211, "4300": 1211, "759449e": 1211, "87": [1211, 1218], "4350": 1211, "759646e": 1211, "759971e": 1211, "4400": 1211, "759774e": 1211, "760032e": 1211, "4450": 1211, "759883e": 1211, "760064e": 1211, "4500": 1211, "759951e": 1211, "760100e": 1211, "91": [1211, 1219], "4550": 1211, "760006e": 1211, "760142e": 1211, "4600": 1211, "760062e": 1211, "760593e": 1211, "4650": 1211, "760121e": 1211, "760978e": 1211, "94": 1211, "4700": 1211, "760182e": 1211, "4750": 1211, "760257e": 1211, "96": 1211, "4800": 1211, "760395e": 1211, "760997e": 1211, "4850": 1211, "760607e": 1211, "761020e": 1211, "98": [1211, 1213], "4900": 1211, "760797e": 1211, "761706e": 1211, "4950": 1211, "760918e": 1211, "761763e": 1211, "761054e": 1211, "success": 1211, "28808": 1211, "815290012986": 1211, "x_0000": 1211, "484848e": 1211, "y_0000": 1211, "387982e": 1211, "x_0001": 1211, "999400e": 1211, "y_0001": 1211, "193226e": 1211, "x_0002": 1211, "743332e": 1211, "y_0002": 1211, "853013e": 1211, "x_0003": 1211, "161273e": 1211, "y_0003": 1211, "356752e": 1211, "x_0004": 1211, "010384e": 1211, "y_0004": 1211, "495968e": 1211, "x_0005": 1211, "992900e": 1211, "y_0005": 1211, "499577e": 1211, "x_0006": 1211, "970308e": 1211, "y_0006": 1211, "893921e": 1211, "x_0007": 1211, "136647e": 1211, "y_0007": 1211, "198557e": 1211, "x_0008": 1211, "942851e": 1211, "y_0008": 1211, "147376e": 1211, "x_0009": 1211, "992843e": 1211, "y_0009": 1211, "559152e": 1211, "880882e": 1211, "boundary_0000": 1211, "409687e": 1211, "boundary_0001": 1211, "001485e": 1211, "boundary_0002": 1211, "boundary_0003": 1211, "212439e": 1211, "boundary_0004": 1211, "038416e": 1211, "boundary_0005": 1211, "227091e": 1211, "boundary_0006": 1211, "boundary_0007": 1211, "boundary_0008": 1211, "714927e": 1211, "boundary_0009": 1211, "156536e": 1211, "dist_0_1": 1211, "053034e": 1211, "dist_0_2": 1211, "133692e": 1211, "dist_0_3": 1211, "512186e": 1211, "dist_0_4": 1211, "063629e": 1211, "dist_0_5": 1211, "032833e": 1211, "dist_0_6": 1211, "912219e": 1211, "dist_0_7": 1211, "174197e": 1211, "dist_0_8": 1211, "235491e": 1211, "dist_0_9": 1211, "389174e": 1211, "dist_1_2": 1211, "810253e": 1211, "dist_1_3": 1211, "227849e": 1211, "dist_1_4": 1211, "346207e": 1211, "dist_1_5": 1211, "282549e": 1211, "dist_1_6": 1211, "644388e": 1211, "dist_1_7": 1211, "015225e": 1211, "dist_1_8": 1211, "760754e": 1211, "dist_1_9": 1211, "459327e": 1211, "dist_2_3": 1211, "734121e": 1211, "dist_2_4": 1211, "000907e": 1211, "dist_2_5": 1211, "035690e": 1211, "dist_2_6": 1211, "547630e": 1211, "dist_2_7": 1211, "612574e": 1211, "dist_2_8": 1211, "428297e": 1211, "dist_2_9": 1211, "480372e": 1211, "dist_3_4": 1211, "383697e": 1211, "dist_3_5": 1211, "427543e": 1211, "dist_3_6": 1211, "533256e": 1211, "dist_3_7": 1211, "217365e": 1211, "dist_3_8": 1211, "085619e": 1211, "dist_3_9": 1211, "184343e": 1211, "dist_4_5": 1211, "462646e": 1211, "dist_4_6": 1211, "321302e": 1211, "dist_4_7": 1211, "301324e": 1211, "dist_4_8": 1211, "519941e": 1211, "dist_4_9": 1211, "401477e": 1211, "dist_5_6": 1211, "244685e": 1211, "dist_5_7": 1211, "910567e": 1211, "dist_5_8": 1211, "002368e": 1211, "dist_5_9": 1211, "916621e": 1211, "dist_6_7": 1211, "304425e": 1211, "dist_6_8": 1211, "924854e": 1211, "dist_6_9": 1211, "010247e": 1211, "dist_7_8": 1211, "429886e": 1211, "dist_7_9": 1211, "403714e": 1211, "dist_8_9": 1211, "394927e": 1211, "210": 1211, "211": 1211, "212": 1211, "213": 1211, "215": 1211, "00013": 1211, "448": 1211, "999": 1211, "743": 1211, "6137": 1211, "994": 1211, "338": 1211, "419": 1211, "685": 1211, "147e": 1211, "755": 1211, "126": [1211, 1217], "5e": 1211, "109": 1211, "995": 1211, "081": 1211, "u2": [1211, 1217], "visual": [1211, 1213, 1215, 1216, 1217, 1218], "dpar": 1211, "zorder": 1211, "outside_whit": 1211, "anyth": 1211, "organ": 1212, "basic_ctrl": 1212, "farm_pmask": 1212, "pmask": [1212, 1215, 1216], "farm_hubh_data": 1212, "hubh_data": 1212, "farm_kti": 1212, "farm_kti_02": 1212, "kti_02": [1212, 1218], "farm_kti_04": 1212, "kti_04": 1212, "farm_kti_05": 1212, "kti_05": [1212, 1219, 1220], "farm_kti_amb": 1212, "kti_amb": 1212, "farm_kti_amb_02": 1212, "kti_amb_02": 1212, "farm_kti_amb_04": 1212, "kti_amb_04": 1212, "farm_kti_amb_05": 1212, "kti_amb_05": 1212, "farm_thrust2ct": 1212, "farm_yaw2yawm": 1212, "farm_yawm2yaw": 1212, "axiwake10": 1212, "axiwake2": 1212, "axiwake20": 1212, "axiwake3": 1212, "axiwake4": 1212, "axiwake5": 1212, "axiwake6": 1212, "axiwake7": 1212, "axiwake8": 1212, "axiwake9": 1212, "distslic": 1212, "distsliced100": 1212, "distsliced16": 1212, "distsliced25": 1212, "distsliced36": 1212, "distsliced4": 1212, "distsliced400": 1212, "distsliced49": 1212, "distsliced64": 1212, "distsliced81": 1212, "distsliced9": 1212, "grid100": 1212, "grid25": 1212, "grid36": 1212, "grid4": 1212, "grid400": 1212, "grid49": 1212, "grid64": 1212, "grid81": 1212, "grid9": [1212, 1213], "top_hat": 1212, "5mw": [1212, 1216, 1217, 1218], "null_typ": 1212, "rotor_wd_farmo": 1212, "streamlines_1": 1212, "streamlines_10": 1212, "streamlines_100_farmo": 1212, "streamlines_100_yaw": 1212, "streamlines_10_farmo": 1212, "streamlines_10_yaw": 1212, "streamlines_1_farmo": 1212, "streamlines_1_yaw": 1212, "streamlines_5": 1212, "streamlines_50": 1212, "streamlines_500": 1212, "streamlines_500_farmo": 1212, "streamlines_500_yaw": 1212, "streamlines_50_farmo": 1212, "streamlines_50_yaw": 1212, "streamlines_5_farmo": 1212, "streamlines_5_yaw": 1212, "bastankhah_linear": [1212, 1219], "sp": 1212, "bastankhah_linear_amb": 1212, "linear_amb": 1212, "bastankhah_linear_amb_k002": 1212, "bastankhah_linear_amb_k004": 1212, "bastankhah_linear_k004": 1212, "bastankhah_linear_lim": 1212, "linear_lim": 1212, "bastankhah_linear_lim_k002": 1212, "bastankhah_linear_lim_k004": 1212, "bastankhah_max": 1212, "bastankhah_max_amb": 1212, "max_amb": 1212, "bastankhah_max_amb_k002": 1212, "bastankhah_max_amb_k004": 1212, "bastankhah_max_k002": 1212, "bastankhah_max_k004": 1212, "bastankhah_product": 1212, "bastankhah_product_k002": 1212, "bastankhah_product_k004": 1212, "bastankhah_product_lim": 1212, "product_lim": 1212, "bastankhah_product_lim_k002": 1212, "bastankhah_product_lim_k004": 1212, "bastankhah_quadrat": [1212, 1218], "bastankhah_quadratic_amb": 1212, "quadratic_amb": 1212, "bastankhah_quadratic_amb_k002": 1212, "bastankhah_quadratic_amb_k004": 1212, "bastankhah_quadratic_k002": 1212, "bastankhah_quadratic_k004": 1212, "crespohernandez_ambti_linear": 1212, "ti_linear": 1212, "crespohernandez_ambti_max": 1212, "ti_max": 1212, "crespohernandez_ambti_quadrat": 1212, "ti_quadrat": 1212, "crespohernandez_linear": 1212, "crespohernandez_linear_k002": 1212, "crespohernandez_max": [1212, 1218, 1219, 1220], "crespohernandez_max_k002": 1212, "crespohernandez_quadrat": 1212, "crespohernandez_quadratic_k002": 1212, "iecti2005_linear": 1212, "19076020221856677": 1212, "iecti2005_max": 1212, "iecti2005_quadrat": 1212, "iecti2019_linear": 1212, "iecti2019_max": 1212, "iecti2019_quadrat": 1212, "jensen_linear": 1212, "jensen_linear_amb": 1212, "jensen_linear_amb_k002": 1212, "jensen_linear_amb_k004": 1212, "jensen_linear_amb_k007": 1212, "jensen_linear_amb_k0075": 1212, "075": 1212, "jensen_linear_k002": 1212, "jensen_linear_k004": 1212, "jensen_linear_k0075": 1212, "jensen_linear_lim": 1212, "jensen_linear_lim_k002": 1212, "jensen_linear_lim_k004": 1212, "jensen_linear_lim_k007": 1212, "jensen_linear_lim_k0075": 1212, "jensen_max": 1212, "jensen_max_amb": 1212, "jensen_max_amb_k002": 1212, "jensen_max_amb_k004": 1212, "jensen_max_amb_k007": 1212, "jensen_max_amb_k0075": 1212, "jensen_max_k002": 1212, "jensen_max_k004": 1212, "jensen_max_k007": 1212, "jensen_max_k0075": 1212, "jensen_product": 1212, "jensen_product_k002": 1212, "jensen_product_k004": 1212, "jensen_product_k007": 1212, "jensen_product_k0075": 1212, "jensen_product_lim": 1212, "jensen_product_lim_k002": 1212, "jensen_product_lim_k004": 1212, "jensen_product_lim_k007": 1212, "jensen_product_lim_k0075": 1212, "jensen_quadrat": 1212, "jensen_quadratic_amb": 1212, "jensen_quadratic_amb_k002": 1212, "jensen_quadratic_amb_k004": 1212, "jensen_quadratic_amb_k007": 1212, "jensen_quadratic_amb_k0075": 1212, "jensen_quadratic_k002": 1212, "jensen_quadratic_k004": 1212, "jensen_quadratic_k007": 1212, "jensen_quadratic_k0075": 1212, "porteagel_linear": [1212, 1220], "porteagel_linear_amb": 1212, "porteagel_linear_amb_k002": 1212, "porteagel_linear_amb_k004": 1212, "porteagel_linear_k002": 1212, "porteagel_linear_k004": 1212, "porteagel_linear_lim": 1212, "porteagel_linear_lim_k002": 1212, "porteagel_linear_lim_k004": 1212, "porteagel_max": 1212, "porteagel_max_amb": 1212, "porteagel_max_amb_k002": 1212, "porteagel_max_amb_k004": 1212, "porteagel_max_k002": 1212, "porteagel_max_k004": 1212, "porteagel_product": 1212, "porteagel_product_k002": 1212, "porteagel_product_k004": 1212, "porteagel_product_lim": 1212, "porteagel_product_lim_k002": 1212, "porteagel_product_lim_k004": 1212, "porteagel_quadrat": 1212, "porteagel_quadratic_amb": 1212, "porteagel_quadratic_amb_k002": 1212, "porteagel_quadratic_amb_k004": 1212, "porteagel_quadratic_k002": 1212, "porteagel_quadratic_k004": 1212, "turboparkix_linear_a002_dx001": 1212, "turboparkix_linear_a002_dx1": 1212, "turboparkix_linear_a002_dx10": 1212, "turboparkix_linear_a002_dx100": 1212, "turboparkix_linear_a002_dx5": 1212, "turboparkix_linear_a002_dx50": 1212, "turboparkix_linear_a004_dx001": 1212, "turboparkix_linear_a004_dx1": 1212, "turboparkix_linear_a004_dx10": 1212, "turboparkix_linear_a004_dx100": 1212, "turboparkix_linear_a004_dx5": 1212, "turboparkix_linear_a004_dx50": 1212, "turboparkix_linear_amb_a002_dx001": 1212, "turboparkix_linear_amb_a002_dx1": 1212, "turboparkix_linear_amb_a002_dx10": 1212, "turboparkix_linear_amb_a002_dx100": 1212, "turboparkix_linear_amb_a002_dx5": 1212, "turboparkix_linear_amb_a002_dx50": 1212, "turboparkix_linear_amb_a004_dx001": 1212, "turboparkix_linear_amb_a004_dx1": 1212, "turboparkix_linear_amb_a004_dx10": 1212, "turboparkix_linear_amb_a004_dx100": 1212, "turboparkix_linear_amb_a004_dx5": 1212, "turboparkix_linear_amb_a004_dx50": 1212, "turboparkix_linear_lim_a002_dx001": 1212, "turboparkix_linear_lim_a002_dx1": 1212, "turboparkix_linear_lim_a002_dx10": 1212, "turboparkix_linear_lim_a002_dx100": 1212, "turboparkix_linear_lim_a002_dx5": 1212, "turboparkix_linear_lim_a002_dx50": 1212, "turboparkix_linear_lim_a004_dx001": 1212, "turboparkix_linear_lim_a004_dx1": 1212, "turboparkix_linear_lim_a004_dx10": 1212, "turboparkix_linear_lim_a004_dx100": 1212, "turboparkix_linear_lim_a004_dx5": 1212, "turboparkix_linear_lim_a004_dx50": 1212, "turboparkix_max_a002_dx001": 1212, "turboparkix_max_a002_dx1": 1212, "turboparkix_max_a002_dx10": 1212, "turboparkix_max_a002_dx100": 1212, "turboparkix_max_a002_dx5": 1212, "turboparkix_max_a002_dx50": 1212, "turboparkix_max_a004_dx001": 1212, "turboparkix_max_a004_dx1": 1212, "turboparkix_max_a004_dx10": 1212, "turboparkix_max_a004_dx100": 1212, "turboparkix_max_a004_dx5": 1212, "turboparkix_max_a004_dx50": 1212, "turboparkix_max_amb_a002_dx001": 1212, "turboparkix_max_amb_a002_dx1": 1212, "turboparkix_max_amb_a002_dx10": 1212, "turboparkix_max_amb_a002_dx100": 1212, "turboparkix_max_amb_a002_dx5": 1212, "turboparkix_max_amb_a002_dx50": 1212, "turboparkix_max_amb_a004_dx001": 1212, "turboparkix_max_amb_a004_dx1": 1212, "turboparkix_max_amb_a004_dx10": 1212, "turboparkix_max_amb_a004_dx100": 1212, "turboparkix_max_amb_a004_dx5": 1212, "turboparkix_max_amb_a004_dx50": 1212, "turboparkix_product_a002_dx001": 1212, "turboparkix_product_a002_dx1": 1212, "turboparkix_product_a002_dx10": 1212, "turboparkix_product_a002_dx100": 1212, "turboparkix_product_a002_dx5": 1212, "turboparkix_product_a002_dx50": 1212, "turboparkix_product_a004_dx001": 1212, "turboparkix_product_a004_dx1": 1212, "turboparkix_product_a004_dx10": 1212, "turboparkix_product_a004_dx100": 1212, "turboparkix_product_a004_dx5": 1212, "turboparkix_product_a004_dx50": 1212, "turboparkix_product_lim_a002_dx001": 1212, "turboparkix_product_lim_a002_dx1": 1212, "turboparkix_product_lim_a002_dx10": 1212, "turboparkix_product_lim_a002_dx100": 1212, "turboparkix_product_lim_a002_dx5": 1212, "turboparkix_product_lim_a002_dx50": 1212, "turboparkix_product_lim_a004_dx001": 1212, "turboparkix_product_lim_a004_dx1": 1212, "turboparkix_product_lim_a004_dx10": 1212, "turboparkix_product_lim_a004_dx100": 1212, "turboparkix_product_lim_a004_dx5": 1212, "turboparkix_product_lim_a004_dx50": 1212, "turboparkix_quadratic_a002_dx001": 1212, "turboparkix_quadratic_a002_dx1": 1212, "turboparkix_quadratic_a002_dx10": 1212, "turboparkix_quadratic_a002_dx100": 1212, "turboparkix_quadratic_a002_dx5": 1212, "turboparkix_quadratic_a002_dx50": 1212, "turboparkix_quadratic_a004_dx001": 1212, "turboparkix_quadratic_a004_dx1": 1212, "turboparkix_quadratic_a004_dx10": 1212, "turboparkix_quadratic_a004_dx100": 1212, "turboparkix_quadratic_a004_dx5": 1212, "turboparkix_quadratic_a004_dx50": 1212, "turboparkix_quadratic_amb_a002_dx001": 1212, "turboparkix_quadratic_amb_a002_dx1": 1212, "turboparkix_quadratic_amb_a002_dx10": 1212, "turboparkix_quadratic_amb_a002_dx100": 1212, "turboparkix_quadratic_amb_a002_dx5": 1212, "turboparkix_quadratic_amb_a002_dx50": 1212, "turboparkix_quadratic_amb_a004_dx001": 1212, "turboparkix_quadratic_amb_a004_dx1": 1212, "turboparkix_quadratic_amb_a004_dx10": 1212, "turboparkix_quadratic_amb_a004_dx100": 1212, "turboparkix_quadratic_amb_a004_dx5": 1212, "turboparkix_quadratic_amb_a004_dx50": 1212, "turbopark_linear_a002": 1212, "turbopark_linear_a004": 1212, "turbopark_linear_amb_a002": 1212, "turbopark_linear_amb_a004": 1212, "turbopark_linear_lim_a002": 1212, "turbopark_linear_lim_a004": 1212, "turbopark_max_a002": 1212, "turbopark_max_a004": 1212, "turbopark_max_amb_a002": 1212, "turbopark_max_amb_a004": 1212, "turbopark_product_a002": 1212, "turbopark_product_a004": 1212, "turbopark_product_lim_a002": 1212, "turbopark_product_lim_a004": 1212, "turbopark_quadratic_a002": 1212, "turbopark_quadratic_a004": 1212, "turbopark_quadratic_amb_a002": 1212, "turbopark_quadratic_amb_a004": 1212, "my_jensen": 1212, "042": 1212, "jensenwake45": 1212, "freshli": 1212, "similarli": [1212, 1215, 1220], "section": [1212, 1214, 1217, 1218, 1220], "explor": 1213, "download": 1213, "newa": 1213, "websit": 1213, "4464": 1213, "stamp": 1213, "mark": 1213, "month": 1213, "minut": 1213, "kinet": [1213, 1214], "energi": [1213, 1214], "vari": 1213, "assumpt": 1213, "variat": 1213, "neglect": 1213, "inflow": [1213, 1218], "manual": 1213, "alreadi": [1213, 1217], "howev": [1213, 1220], "neither": [1213, 1215], "goal": 1213, "certain": 1213, "approxim": 1213, "west": [1213, 1216, 1220], "undo": 1213, "earlier": 1213, "p0": [1213, 1215, 1218, 1219], "nfarm": [1213, 1215, 1217, 1218, 1219, 1220], "1f": [1213, 1215, 1218, 1219], "2f": [1213, 1215, 1218, 1219], "340": [1213, 1216], "14377": 1213, "593022": 1213, "1533": 1213, "584614": 1213, "83636": 1213, "192504": 1213, "1299": 1213, "635898": 1213, "299802": 1213, "1362": 1213, "286874": 1213, "538688": 1213, "1501": 1213, "771092": 1213, "226181": 1213, "1940": 1213, "207249": 1213, "532676": 1213, "4041": 1213, "896723": 1213, "22320": 1213, "131": 1213, "reflect": [1214, 1220], "script": 1214, "inform": [1214, 1217, 1218], "arbitrari": 1214, "becom": 1214, "reli": 1214, "averag": 1214, "stem": 1214, "henc": [1214, 1215, 1216, 1218], "approach": 1214, "might": 1214, "sdata": [1215, 1220], "exce": 1215, "nor": 1215, "pmax_": 1215, "s_": 1215, "pmax_4": 1215, "6000": [1215, 1216], "pmax_2": 1215, "pmax_0": 1215, "pmax_1": 1215, "pmax_3": 1215, "set_pmax": 1215, "thought": 1215, "sinc": 1215, "od": 1215, "furthermor": 1215, "somewher": 1215, "present": 1215, "influenc": 1215, "vars_to_amb": 1215, "o1": 1215, "000000": [1215, 1217, 1218, 1220], "100622": 1215, "403": 1215, "460668": 1215, "230759": 1215, "160101": 1215, "836726": 1215, "448432": 1215, "102": 1215, "024826": 1215, "1771": 1215, "969501": 1215, "727": 1215, "422438": 1215, "109672": 1215, "440": 1215, "497551": 1215, "664896": 1215, "328": 1215, "099527": 1215, "346418": 1215, "256": 1215, "059846": 1215, "4562": 1215, "500000": 1215, "218395": 1215, "1934": 1215, "349917": 1215, "026105": 1215, "1202": 1215, "442515": 1215, "419438": 1215, "926": 1215, "179190": 1215, "069268": 1215, "768": 1215, "743105": 1215, "740422": 1215, "265493": 1215, "610241": 1215, "4829": 1215, "480538": 1215, "737726": 1215, "305147": 1215, "704317": 1215, "538785": 1215, "001123": 1215, "463783": 1215, "027022": 1215, "922952": 1215, "572237": 1215, "549852": 1215, "200276": 1215, "124457": 1215, "856675": 1215, "753726": 1215, "552823": 1215, "501976": 1215, "340518": 1215, "re": 1215, "o0": 1215, "edgecolor": 1215, "white": 1215, "ylorrd": 1215, "vmin": 1215, "vmax": 1215, "nanmax": 1215, "ylgn": 1215, "produc": [1215, 1218], "off": 1216, "persu": 1216, "east": 1216, "wd_min": 1216, "wd_max": 1216, "170": 1216, "191": 1216, "290": 1216, "110": 1216, "correspons": 1216, "fulfil": 1216, "ttype": 1216, "nrel": [1216, 1217, 1218], "d126": [1216, 1217, 1218], "h90": [1216, 1217, 1218], "sector_rul": 1216, "rews_min": 1216, "rews_max": 1216, "orient": 1216, "wa": 1216, "5001": 1216, "7000": 1216, "high": 1216, "westerli": 1216, "south": 1216, "summari": 1217, "skip": 1217, "own": 1217, "ask": 1217, "6e": 1217, "4e": 1217, "2e": 1217, "519e": 1217, "557e": 1217, "107e": 1217, "easili": 1217, "2518": 1217, "600000": 1217, "790000": 1217, "633459": 1217, "1557": 1217, "076947": 1217, "803665": 1217, "176627": 1217, "1290": 1217, "332498": 1217, "808234": 1217, "955794": 1217, "1167": 1217, "325199": 1217, "812210": 1217, "821354": 1217, "1106": 1217, "880886": 1217, "818932": 1217, "linspac": 1217, "15000": 1217, "point_result": 1217, "npoint": 1217, "set_xlabel": 1217, "set_ylabel": 1217, "916": 1217, "desir": [1218, 1220], "timeseries_8000": 1218, "test_farm_67": 1218, "further": 1218, "alwai": 1218, "101": [1218, 1219], "598951": 1218, "307949": 1218, "067607": 1218, "522240": 1218, "728003": 1218, "299": 1218, "208883": 1218, "4868": 1218, "2712": 1218, "819583": 1218, "435150": 1218, "4752": 1218, "878044": 1218, "700000": 1218, "750000": 1218, "607321": 1218, "4828": 1218, "202797": 1218, "769528": 1218, "3234": 1218, "107125": 1218, "536000": 1218, "turbine_result": 1218, "nresult": 1218, "3067": 1218, "723397": 1218, "2778": 1218, "987770": 1218, "613545": 1218, "555798": 1218, "825445": 1218, "873257": 1218, "2531": 1218, "065918": 1218, "506213": 1218, "713413": 1218, "2702": 1218, "820210": 1218, "540564": 1218, "780747": 1218, "2739": 1218, "058250": 1218, "547812": 1218, "805992": 1218, "2593": 1218, "172270": 1218, "518634": 1218, "737070": 1218, "2625": 1218, "796799": 1218, "525159": 1218, "748704": 1218, "2591": 1218, "950988": 1218, "518390": 1218, "731988": 1218, "2864": 1218, "102273": 1218, "572820": 1218, "860799": 1218, "2571": 1218, "260829": 1218, "514252": 1218, "726062": 1218, "2633": 1218, "819847": 1218, "526764": 1218, "755245": 1218, "343933": 1218, "172137": 1218, "676705": 1218, "994150": 1218, "716189": 1218, "001980": 1218, "705491": 1218, "089536": 1218, "524245": 1218, "072262": 1218, "177": 1218, "205": 1218, "1558": 1218, "seen": 1218, "mean_eff": [1218, 1219], "fun": 1218, "faster": 1218, "overhead": 1218, "But": 1218, "extrem": 1218, "realli": 1218, "dai": 1218, "nmean": 1218, "launch": 1218, "localclust": 1218, "8629bb7a": [], "tcp": 1218, "39487": [], "gib": 1218, "dashboard": 1218, "8787": 1218, "statu": 1218, "shut": 1218, "down": 1218, "runtim": 1218, "localhost": 1218, "address": 1218, "plenti": 1218, "offlin": [], "init_notebook_mod": [], "relat": 1219, "203": [], "686": 1219, "perfectli": 1219, "fine": 1219, "aim": 1220, "set_yawm": 1220, "want": 1220, "sensit": 1220, "continu": 1220, "cross": 1220, "downstream": 1220, "clearli": 1220, "frontal": 1220, "hit": 1220, "farm_df": 1220, "146549": 1220, "042770": 1220, "240": 1220, "co": 1220, "corect": 1220, "fact": 1220, "p_": 1220, "crespohernandez": 1220, "even": 1220, "though": 1220, "most": 1220, "0735d247": 1218, "40277": 1218, "309": 1219}, "objects": {"foxes.constants": [[122, 0, 1, "", "AMB_RPOINT_RESULTS", "Identified for ambient rotor point results"], [123, 1, 1, "", "DTYPE", "Default data type for floats"], [246, 0, 1, "", "FARM", "Wind farm identifier"], [247, 0, 1, "", "GW", "The unit giga watt"], [248, 1, 1, "", "ITYPE", "Default data type for int"], [298, 0, 1, "", "KAPPA", "The Van-Karman constant"], [299, 0, 1, "", "MW", "The unit mega watt"], [300, 0, 1, "", "POINT", "Point identifier"], [301, 0, 1, "", "POINTS", "Points identifier"], [302, 0, 1, "", "POP", "Population identifier"], [303, 0, 1, "", "P_UNITS", "Power unit factors relative to watts, key: unit str, value: factor"], [304, 0, 1, "", "RPOINT", "Rotor point identifier"], [305, 0, 1, "", "RPOINTS", "Rotor points identifier"], [306, 0, 1, "", "RWEIGHTS", "Rotor point weights identifier"], [307, 0, 1, "", "STATE", "States identifier"], [308, 0, 1, "", "TMODELS", "Turbine models identifier"], [309, 0, 1, "", "TMODEL_SELS", "Selected turbine models identifier"], [310, 0, 1, "", "TNAME", "Wind turbine name identifier"], [311, 0, 1, "", "TURBINE", "Wind turbine identifier"], [312, 0, 1, "", "TW", "The unit terra watt"], [313, 0, 1, "", "VALID", "Validity identifier"], [314, 0, 1, "", "VARS", "Variables identifier"], [315, 0, 1, "", "W", "The unit watt"], [316, 0, 1, "", "kW", "The unit kilo watt"]], "foxes.constants.DTYPE": [[124, 1, 1, "", "T", "Scalar attribute identical to the corresponding array attribute."], [125, 2, 1, "", "__abs__", "abs(self)"], [126, 2, 1, "", "__add__", "Return self+value."], [127, 2, 1, "", "__and__", "Return self&value."], [128, 2, 1, "", "__array__", "sc.__array__(dtype) return 0-dim array from scalar with specified dtype"], [129, 1, 1, "", "__array_interface__", "Array protocol: Python side"], [130, 1, 1, "", "__array_priority__", "Array priority."], [131, 1, 1, "", "__array_struct__", "Array protocol: struct"], [132, 2, 1, "", "__array_wrap__", "sc.__array_wrap__(obj) return scalar from array"], [133, 2, 1, "", "__bool__", "self != 0"], [134, 2, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [135, 2, 1, "", "__divmod__", "Return divmod(self, value)."], [136, 2, 1, "", "__eq__", "Return self==value."], [137, 2, 1, "", "__float__", "float(self)"], [138, 2, 1, "", "__floordiv__", "Return self//value."], [139, 2, 1, "", "__format__", "NumPy array scalar formatter"], [140, 2, 1, "", "__ge__", "Return self>=value."], [141, 2, 1, "", "__getitem__", "Return self[key]."], [142, 2, 1, "", "__gt__", "Return self>value."], [143, 2, 1, "", "__hash__", "Return hash(self)."], [144, 2, 1, "", "__int__", "int(self)"], [145, 2, 1, "", "__invert__", "~self"], [146, 2, 1, "", "__le__", "Return self<=value."], [147, 2, 1, "", "__lshift__", "Return self<<value."], [148, 2, 1, "", "__lt__", "Return self<value."], [149, 2, 1, "", "__mod__", "Return self%value."], [150, 2, 1, "", "__mul__", "Return self*value."], [151, 2, 1, "", "__ne__", "Return self!=value."], [152, 2, 1, "", "__neg__", "-self"], [153, 2, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [154, 2, 1, "", "__or__", "Return self|value."], [155, 2, 1, "", "__pos__", "+self"], [156, 2, 1, "", "__pow__", "Return pow(self, value, mod)."], [157, 2, 1, "", "__radd__", "Return value+self."], [158, 2, 1, "", "__rand__", "Return value&self."], [159, 2, 1, "", "__rdivmod__", "Return divmod(value, self)."], [160, 2, 1, "", "__reduce__", "Helper for pickle."], [161, 2, 1, "", "__repr__", "Return repr(self)."], [162, 2, 1, "", "__rfloordiv__", "Return value//self."], [163, 2, 1, "", "__rlshift__", "Return value<<self."], [164, 2, 1, "", "__rmod__", "Return value%self."], [165, 2, 1, "", "__rmul__", "Return value*self."], [166, 2, 1, "", "__ror__", "Return value|self."], [167, 2, 1, "", "__rpow__", "Return pow(value, self, mod)."], [168, 2, 1, "", "__rrshift__", "Return value>>self."], [169, 2, 1, "", "__rshift__", "Return self>>value."], [170, 2, 1, "", "__rsub__", "Return value-self."], [171, 2, 1, "", "__rtruediv__", "Return value/self."], [172, 2, 1, "", "__rxor__", "Return value^self."], [173, 2, 1, "", "__sizeof__", "Size of object in memory, in bytes."], [174, 2, 1, "", "__str__", "Return str(self)."], [175, 2, 1, "", "__sub__", "Return self-value."], [176, 2, 1, "", "__truediv__", "Return self/value."], [177, 2, 1, "", "__xor__", "Return self^value."], [178, 2, 1, "", "all", "Scalar method identical to the corresponding array attribute."], [179, 2, 1, "", "any", "Scalar method identical to the corresponding array attribute."], [180, 2, 1, "", "argmax", "Scalar method identical to the corresponding array attribute."], [181, 2, 1, "", "argmin", "Scalar method identical to the corresponding array attribute."], [182, 2, 1, "", "argsort", "Scalar method identical to the corresponding array attribute."], [183, 2, 1, "", "as_integer_ratio", "Return a pair of integers, whose ratio is exactly equal to the original floating point number, and with a positive denominator. Raise OverflowError on infinities and a ValueError on NaNs."], [184, 2, 1, "", "astype", "Scalar method identical to the corresponding array attribute."], [185, 1, 1, "", "base", "Scalar attribute identical to the corresponding array attribute."], [186, 2, 1, "", "byteswap", "Scalar method identical to the corresponding array attribute."], [187, 2, 1, "", "choose", "Scalar method identical to the corresponding array attribute."], [188, 2, 1, "", "clip", "Scalar method identical to the corresponding array attribute."], [189, 2, 1, "", "compress", "Scalar method identical to the corresponding array attribute."], [190, 2, 1, "", "conj", ""], [191, 2, 1, "", "conjugate", "Scalar method identical to the corresponding array attribute."], [192, 2, 1, "", "copy", "Scalar method identical to the corresponding array attribute."], [193, 2, 1, "", "cumprod", "Scalar method identical to the corresponding array attribute."], [194, 2, 1, "", "cumsum", "Scalar method identical to the corresponding array attribute."], [195, 1, 1, "", "data", "Pointer to start of data."], [196, 2, 1, "", "diagonal", "Scalar method identical to the corresponding array attribute."], [197, 1, 1, "", "dtype", "Get array data-descriptor."], [198, 2, 1, "", "dump", "Scalar method identical to the corresponding array attribute."], [199, 2, 1, "", "dumps", "Scalar method identical to the corresponding array attribute."], [200, 2, 1, "", "fill", "Scalar method identical to the corresponding array attribute."], [201, 1, 1, "", "flags", "The integer value of flags."], [202, 1, 1, "", "flat", "A 1-D view of the scalar."], [203, 2, 1, "", "flatten", "Scalar method identical to the corresponding array attribute."], [204, 2, 1, "", "getfield", "Scalar method identical to the corresponding array attribute."], [205, 1, 1, "", "imag", "The imaginary part of the scalar."], [206, 2, 1, "", "is_integer", "Return True if the floating point number is finite with integral value, and False otherwise."], [207, 2, 1, "", "item", "Scalar method identical to the corresponding array attribute."], [208, 2, 1, "", "itemset", "Scalar method identical to the corresponding array attribute."], [209, 1, 1, "", "itemsize", "The length of one element in bytes."], [210, 2, 1, "", "max", "Scalar method identical to the corresponding array attribute."], [211, 2, 1, "", "mean", "Scalar method identical to the corresponding array attribute."], [212, 2, 1, "", "min", "Scalar method identical to the corresponding array attribute."], [213, 1, 1, "", "nbytes", "The length of the scalar in bytes."], [214, 1, 1, "", "ndim", "The number of array dimensions."], [215, 2, 1, "", "newbyteorder", "Return a new dtype with a different byte order."], [216, 2, 1, "", "nonzero", "Scalar method identical to the corresponding array attribute."], [217, 2, 1, "", "prod", "Scalar method identical to the corresponding array attribute."], [218, 2, 1, "", "ptp", "Scalar method identical to the corresponding array attribute."], [219, 2, 1, "", "put", "Scalar method identical to the corresponding array attribute."], [220, 2, 1, "", "ravel", "Scalar method identical to the corresponding array attribute."], [221, 1, 1, "", "real", "The real part of the scalar."], [222, 2, 1, "", "repeat", "Scalar method identical to the corresponding array attribute."], [223, 2, 1, "", "reshape", "Scalar method identical to the corresponding array attribute."], [224, 2, 1, "", "resize", "Scalar method identical to the corresponding array attribute."], [225, 2, 1, "", "round", "Scalar method identical to the corresponding array attribute."], [226, 2, 1, "", "searchsorted", "Scalar method identical to the corresponding array attribute."], [227, 2, 1, "", "setfield", "Scalar method identical to the corresponding array attribute."], [228, 2, 1, "", "setflags", "Scalar method identical to the corresponding array attribute."], [229, 1, 1, "", "shape", "Tuple of array dimensions."], [230, 1, 1, "", "size", "The number of elements in the gentype."], [231, 2, 1, "", "sort", "Scalar method identical to the corresponding array attribute."], [232, 2, 1, "", "squeeze", "Scalar method identical to the corresponding array attribute."], [233, 2, 1, "", "std", "Scalar method identical to the corresponding array attribute."], [234, 1, 1, "", "strides", "Tuple of bytes steps in each dimension."], [235, 2, 1, "", "sum", "Scalar method identical to the corresponding array attribute."], [236, 2, 1, "", "swapaxes", "Scalar method identical to the corresponding array attribute."], [237, 2, 1, "", "take", "Scalar method identical to the corresponding array attribute."], [238, 2, 1, "", "tobytes", ""], [239, 2, 1, "", "tofile", "Scalar method identical to the corresponding array attribute."], [240, 2, 1, "", "tolist", "Scalar method identical to the corresponding array attribute."], [241, 2, 1, "", "tostring", "Scalar method identical to the corresponding array attribute."], [242, 2, 1, "", "trace", "Scalar method identical to the corresponding array attribute."], [243, 2, 1, "", "transpose", "Scalar method identical to the corresponding array attribute."], [244, 2, 1, "", "var", "Scalar method identical to the corresponding array attribute."], [245, 2, 1, "", "view", "Scalar method identical to the corresponding array attribute."]], "foxes.constants.ITYPE": [[249, 2, 1, "", "__abs__", "abs(self)"], [250, 2, 1, "", "__add__", "Return self+value."], [251, 2, 1, "", "__and__", "Return self&value."], [252, 2, 1, "", "__bool__", "self != 0"], [253, 2, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [254, 2, 1, "", "__divmod__", "Return divmod(self, value)."], [255, 2, 1, "", "__eq__", "Return self==value."], [256, 2, 1, "", "__float__", "float(self)"], [257, 2, 1, "", "__floordiv__", "Return self//value."], [258, 2, 1, "", "__ge__", "Return self>=value."], [259, 2, 1, "", "__gt__", "Return self>value."], [260, 2, 1, "", "__hash__", "Return hash(self)."], [261, 2, 1, "", "__index__", "Return self converted to an integer, if self is suitable for use as an index into a list."], [262, 2, 1, "", "__int__", "int(self)"], [263, 2, 1, "", "__invert__", "~self"], [264, 2, 1, "", "__le__", "Return self<=value."], [265, 2, 1, "", "__lshift__", "Return self<<value."], [266, 2, 1, "", "__lt__", "Return self<value."], [267, 2, 1, "", "__mod__", "Return self%value."], [268, 2, 1, "", "__mul__", "Return self*value."], [269, 2, 1, "", "__ne__", "Return self!=value."], [270, 2, 1, "", "__neg__", "-self"], [271, 2, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [272, 2, 1, "", "__or__", "Return self|value."], [273, 2, 1, "", "__pos__", "+self"], [274, 2, 1, "", "__pow__", "Return pow(self, value, mod)."], [275, 2, 1, "", "__radd__", "Return value+self."], [276, 2, 1, "", "__rand__", "Return value&self."], [277, 2, 1, "", "__rdivmod__", "Return divmod(value, self)."], [278, 2, 1, "", "__repr__", "Return repr(self)."], [279, 2, 1, "", "__rfloordiv__", "Return value//self."], [280, 2, 1, "", "__rlshift__", "Return value<<self."], [281, 2, 1, "", "__rmod__", "Return value%self."], [282, 2, 1, "", "__rmul__", "Return value*self."], [283, 2, 1, "", "__ror__", "Return value|self."], [284, 2, 1, "", "__rpow__", "Return pow(value, self, mod)."], [285, 2, 1, "", "__rrshift__", "Return value>>self."], [286, 2, 1, "", "__rshift__", "Return self>>value."], [287, 2, 1, "", "__rsub__", "Return value-self."], [288, 2, 1, "", "__rtruediv__", "Return value/self."], [289, 2, 1, "", "__rxor__", "Return value^self."], [290, 2, 1, "", "__str__", "Return str(self)."], [291, 2, 1, "", "__sub__", "Return self-value."], [292, 2, 1, "", "__truediv__", "Return self/value."], [293, 2, 1, "", "__xor__", "Return self^value."], [294, 2, 1, "", "bit_count", "Computes the number of 1-bits in the absolute value of the input. Analogous to the builtin int.bit_count or popcount in C++."], [295, 1, 1, "", "denominator", "denominator of value (1)"], [296, 2, 1, "", "is_integer", "Return True if the number is finite with integral value."], [297, 1, 1, "", "numerator", "numerator of value (the value itself)"]], "foxes.core": [[0, 3, 1, "", "Algorithm", "Abstract base class for algorithms."], [12, 3, 1, "", "Data", "Container for data and meta data."], [14, 3, 1, "", "DataCalcModel", "Abstract base class for models with that run calculation on xarray Dataset data."], [17, 3, 1, "", "ExtendedStates", "States extended by point data models."], [27, 3, 1, "", "FarmController", "Analyses selected turbine models and handles their call."], [35, 3, 1, "", "FarmDataModel", "Abstract base class for models that modify farm data."], [40, 3, 1, "", "FarmDataModelList", "A list of farm data models."], [47, 3, 1, "", "FarmModel", "A FarmDataModel that operates on the farm level (in contrast to a TurbineModel, which allows application to a subset of turbines)."], [48, 3, 1, "", "Model", "Base class for all models."], [57, 3, 1, "", "PartialWakesModel", "Abstract base class for partial wakes models."], [64, 3, 1, "", "PointDataModel", "Abstract base class for models that modify point based data."], [68, 3, 1, "", "PointDataModelList", "A list of point data models."], [75, 3, 1, "", "RotorModel", "Abstract base class of rotor models."], [84, 3, 1, "", "States", "Abstract base class for states."], [89, 3, 1, "", "Turbine", "An individual wind turbine."], [93, 3, 1, "", "TurbineModel", "Abstract base class for turbine models."], [95, 3, 1, "", "TurbineType", "Abstract base class for turbine type models."], [97, 3, 1, "", "VerticalProfile", "Abstract base class for vertical profiles."], [101, 3, 1, "", "WakeFrame", "Abstract base class for wake frames."], [106, 3, 1, "", "WakeModel", "Abstract base class for wake models."], [110, 3, 1, "", "WakeSuperposition", "Abstract base class for wake superposition models."], [113, 3, 1, "", "WindFarm", "The wind farm."]], "foxes.core.Algorithm": [[1, 2, 1, "", "__init__", "Constructor."], [2, 2, 1, "", "finalize", "Finalizes the algorithm."], [3, 2, 1, "", "finalize_model", "Call the finalization routine of the model, if not to be kept."], [4, 2, 1, "", "get_models_data", "Creates xarray from model input data."], [5, 4, 1, "", "idata_mem", "The current idata memory"], [6, 2, 1, "", "initialize", "Initializes the algorithm."], [7, 2, 1, "", "new", "Run-time algorithm factory."], [8, 2, 1, "", "new_point_data", "Creates a point data xarray object, containing only points."], [9, 2, 1, "", "print", "Print function, based on verbosity."], [10, 2, 1, "", "update_idata", "Add to idata memory, optionally update and return idata object."], [11, 2, 1, "", "update_n_turbines", "Reset the number of turbines, according to self.farm"]], "foxes.core.Data": [[13, 2, 1, "", "__init__", "Constructor."]], "foxes.core.DataCalcModel": [[15, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [16, 2, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.ExtendedStates": [[18, 2, 1, "", "__init__", "Constructor."], [19, 2, 1, "", "append", "Add a model to the list"], [20, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [21, 2, 1, "", "finalize", "Finalizes the model."], [22, 2, 1, "", "index", "The index list"], [23, 2, 1, "", "initialize", "Initializes the model."], [24, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [25, 2, 1, "", "size", "The total number of states."], [26, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.FarmController": [[28, 2, 1, "", "__init__", "Constructor."], [29, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [30, 2, 1, "", "collect_models", "Analyze and gather turbine models, based on the turbines of the wind farm."], [31, 2, 1, "", "finalize", "Finalizes the model."], [32, 2, 1, "", "initialize", "Initializes the model."], [33, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [34, 2, 1, "", "set_pars", "Set parameters for a turbine model"]], "foxes.core.FarmDataModel": [[36, 2, 1, "", "__init__", "Constructor."], [37, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [38, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [39, 2, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.FarmDataModelList": [[41, 2, 1, "", "__init__", "Constructor."], [42, 2, 1, "", "append", "Add a model to the list"], [43, 2, 1, "", "calculate", "The main model calculation."], [44, 2, 1, "", "finalize", "Finalizes the model."], [45, 2, 1, "", "initialize", "Initializes the model."], [46, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.core.Model": [[49, 2, 1, "", "__init__", "Constructor."], [50, 2, 1, "", "__repr__", "Return repr(self)."], [51, 2, 1, "", "finalize", "Finalizes the model."], [52, 2, 1, "", "get_data", "Getter for a data entry in either the given data source, or the model object."], [53, 2, 1, "", "initialize", "Initializes the model."], [54, 4, 1, "", "initialized", "Initialization flag."], [55, 4, 1, "", "model_id", "Unique id based on the model type."], [56, 2, 1, "", "var", "Creates a model specific variable name."]], "foxes.core.PartialWakesModel": [[58, 2, 1, "", "__init__", "Constructor."], [59, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [60, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [61, 2, 1, "", "initialize", "Initializes the model."], [62, 2, 1, "", "new", "Run-time partial wakes factory."], [63, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.core.PointDataModel": [[65, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [66, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [67, 2, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.PointDataModelList": [[69, 2, 1, "", "__init__", "Constructor."], [70, 2, 1, "", "append", "Add a model to the list"], [71, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [72, 2, 1, "", "finalize", "Finalizes the model."], [73, 2, 1, "", "initialize", "Initializes the model."], [74, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.core.RotorModel": [[76, 2, 1, "", "__init__", "Constructor."], [77, 2, 1, "", "calculate", "Calculate ambient rotor effective results."], [78, 2, 1, "", "design_points", "The rotor model design points."], [79, 2, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [80, 2, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [81, 2, 1, "", "n_rotor_points", "The number of rotor points"], [82, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [83, 2, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.core.States": [[85, 2, 1, "", "index", "The index list"], [86, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [87, 2, 1, "", "size", "The total number of states."], [88, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.Turbine": [[90, 2, 1, "", "__init__", "Constructor."], [91, 2, 1, "", "add_model", "Add a turbine model to the list."], [92, 2, 1, "", "insert_model", "Insert a turbine model into the list of models."]], "foxes.core.TurbineModel": [[94, 2, 1, "", "calculate", "The main model calculation."]], "foxes.core.TurbineType": [[96, 2, 1, "", "__init__", "Constructor."]], "foxes.core.VerticalProfile": [[98, 2, 1, "", "calculate", "Run the profile calculation."], [99, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."], [100, 2, 1, "", "new", "Run-time profile factory."]], "foxes.core.WakeFrame": [[102, 2, 1, "", "calc_centreline_integral", "Integrates variables along the centreline."], [103, 2, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [104, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [105, 2, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.core.WakeModel": [[107, 2, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [108, 2, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [109, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.core.WakeSuperposition": [[111, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [112, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.core.WindFarm": [[114, 2, 1, "", "__init__", "Constructor."], [115, 2, 1, "", "add_turbine", "Add a wind turbine to the list."], [116, 4, 1, "", "n_turbines", "The number of turbines in the wind farm"], [117, 4, 1, "", "turbine_names", "The list of names of all turbines"]], "foxes.data": [[118, 3, 1, "", "StaticData", "A DataBook filled with static data from this directory."], [120, 5, 1, "", "parse_Pct_file_name", "Parse basic turbine data from file name"], [121, 5, 1, "", "parse_Pct_two_files", "Parse basic turbine data from file names"]], "foxes.data.StaticData": [[119, 2, 1, "", "__init__", "Constructor."]], "foxes.input.farm_layout": [[365, 5, 1, "", "add_from_csv", "Add turbines to wind farm via csv input file."], [366, 5, 1, "", "add_from_df", "Add turbines to wind farm via pandas DataFrame."], [367, 5, 1, "", "add_from_file", "Add turbines from file."], [368, 5, 1, "", "add_from_json", "Add turbimes from a json file."], [369, 5, 1, "", "add_grid", "Add a regular grid of turbines."], [370, 5, 1, "", "add_row", "Add a single row of turbines."]], "foxes.input.states": [[371, 3, 1, "", "FieldDataNC", "Heterogeneous ambient states on a regular horizontal grid in NetCDF format."], [379, 3, 1, "", "MultiHeightStates", "States with multiple heights data per entry."], [390, 3, 1, "", "MultiHeightTimeseries", "Multi-height timeseries states data."], [392, 3, 1, "", "ScanWS", "A given list of wind speeds, all other variables are fixed."], [399, 3, 1, "", "SingleStateStates", "A single uniform state."], [406, 3, 1, "", "StatesTable", "States from a pandas.DataFrame or a pandas readable file."], [417, 3, 1, "", "Timeseries", "Timeseries states data."], [419, 5, 1, "", "create_random_abl_states", "Create random abl states."]], "foxes.input.states.FieldDataNC": [[372, 2, 1, "", "__init__", "Constructor."], [373, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [374, 2, 1, "", "index", "The index list"], [375, 2, 1, "", "initialize", "Initializes the model."], [376, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [377, 2, 1, "", "size", "The total number of states."], [378, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightStates": [[380, 1, 1, "", "RDICT", ""], [381, 2, 1, "", "__init__", "Constructor."], [382, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [383, 2, 1, "", "finalize", "Finalizes the model."], [384, 2, 1, "", "index", "The index list"], [385, 2, 1, "", "initialize", "Initializes the model."], [386, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [387, 2, 1, "", "reset", "Reset the states, optionally select states"], [388, 2, 1, "", "size", "The total number of states."], [389, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightTimeseries": [[391, 1, 1, "", "RDICT", ""]], "foxes.input.states.ScanWS": [[393, 2, 1, "", "__init__", "Constructor."], [394, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [395, 2, 1, "", "initialize", "Initializes the model."], [396, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [397, 2, 1, "", "size", "The total number of states."], [398, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.SingleStateStates": [[400, 2, 1, "", "__init__", "Constructor."], [401, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [402, 2, 1, "", "initialize", "Initializes the model."], [403, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [404, 2, 1, "", "size", "The total number of states."], [405, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.StatesTable": [[407, 1, 1, "", "RDICT", ""], [408, 2, 1, "", "__init__", "Constructor."], [409, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [410, 2, 1, "", "finalize", "Finalizes the model."], [411, 2, 1, "", "index", "The index list"], [412, 2, 1, "", "initialize", "Initializes the model."], [413, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [414, 2, 1, "", "reset", "Reset the states, optionally select states"], [415, 2, 1, "", "size", "The total number of states."], [416, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.Timeseries": [[418, 1, 1, "", "RDICT", ""]], "foxes.input.windio": [[420, 5, 1, "", "read_case", "Reads a WindIO case"]], "foxes.models.farm_controllers": [[421, 3, 1, "", "BasicFarmController", "The basic farm controller, running all turbine models in their order, without conditions."]], "foxes.models.farm_models": [[422, 3, 1, "", "Turbine2FarmModel", "Wrapper that promotes turbine models into farm models, simply by selecting all turbines."]], "foxes.models.farm_models.Turbine2FarmModel": [[423, 2, 1, "", "__init__", "Constructor."], [424, 2, 1, "", "__repr__", "Return repr(self)."], [425, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [426, 2, 1, "", "finalize", "Finalizes the model."], [427, 2, 1, "", "initialize", "Initializes the model."], [428, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.model_book": [[429, 3, 1, "", "Dict", "A slightly enhanced dictionary."], [432, 3, 1, "", "ModelBook", "Container for all kinds of models."]], "foxes.models.model_book.Dict": [[430, 2, 1, "", "__getitem__", "x.__getitem__(y) <==> x[y]"], [431, 2, 1, "", "__init__", "Constructor."]], "foxes.models.model_book.ModelBook": [[433, 2, 1, "", "__getitem__", ""], [434, 2, 1, "", "__init__", "Constructor."], [435, 2, 1, "", "finalize", "Finalizes the model."], [436, 2, 1, "", "print_toc", "Print the contents."]], "foxes.models.partial_wakes": [[437, 3, 1, "", "Mapped", "Partial wake models depending on the wake model (type)."], [444, 3, 1, "", "PartialAxiwake", "Partial wake calculation for axial wake models."], [452, 3, 1, "", "PartialDistSlicedWake", "Partial wakes for distance sliced wake models, making use of their structure."], [460, 3, 1, "", "PartialGrid", "Partial wakes on a grid rotor that may differ from the one in the algorithm."], [463, 3, 1, "", "PartialTopHat", "Partial wakes for top-hat models."], [471, 3, 1, "", "RotorPoints", "Partial wakes calculation directly by the rotor model."]], "foxes.models.partial_wakes.Mapped": [[438, 2, 1, "", "__init__", "Constructor."], [439, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [440, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [441, 2, 1, "", "finalize", "Finalizes the model."], [442, 2, 1, "", "initialize", "Initializes the model."], [443, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialAxiwake": [[445, 2, 1, "", "__init__", "Constructor."], [446, 2, 1, "", "__repr__", "Return repr(self)."], [447, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [448, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [449, 2, 1, "", "finalize", "Finalizes the model."], [450, 2, 1, "", "initialize", "Initializes the model."], [451, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialDistSlicedWake": [[453, 2, 1, "", "__init__", "Constructor."], [454, 2, 1, "", "__repr__", "Return repr(self)."], [455, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [456, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [457, 2, 1, "", "finalize", "Finalizes the model."], [458, 2, 1, "", "initialize", "Initializes the model."], [459, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.PartialGrid": [[461, 2, 1, "", "__init__", "Constructor."], [462, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes.PartialTopHat": [[464, 2, 1, "", "__init__", "Constructor."], [465, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [466, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [467, 2, 1, "", "finalize", "Finalizes the model."], [468, 2, 1, "", "get_wake_points", "Get the wake calculation points."], [469, 2, 1, "", "initialize", "Initializes the model."], [470, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.partial_wakes.RotorPoints": [[472, 2, 1, "", "__init__", "Constructor."], [473, 2, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [474, 2, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [475, 2, 1, "", "get_wake_points", "Get the wake calculation points."], [476, 2, 1, "", "initialize", "Initializes the model."], [477, 2, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.point_models": [[478, 3, 1, "", "SetUniformData", "Set uniform data (can be state dependent)"], [483, 3, 1, "", "TKE2TI", "Calculates TI from TKE, using TI = sqrt( 3/2 * TKE) / WS"], [486, 3, 1, "", "WakeDeltas", "This point model simply subtracts ambient results from waked results."]], "foxes.models.point_models.SetUniformData": [[479, 2, 1, "", "__init__", "Constructor."], [480, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [481, 2, 1, "", "initialize", "Initializes the model."], [482, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.TKE2TI": [[484, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [485, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.WakeDeltas": [[487, 2, 1, "", "__init__", "Constructor."], [488, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [489, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.rotor_models": [[490, 3, 1, "", "CentreRotor", "The centre rotor model."], [496, 3, 1, "", "GridRotor", "The weighted regular grid rotor model, composed maximally of n x n points, possibly kicking out the outside points."]], "foxes.models.rotor_models.CentreRotor": [[491, 2, 1, "", "design_points", "The rotor model design points."], [492, 2, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [493, 2, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [494, 2, 1, "", "n_rotor_points", "The number of rotor points"], [495, 2, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.GridRotor": [[497, 2, 1, "", "__init__", "Constructor."], [498, 2, 1, "", "__repr__", "Return repr(self)."], [499, 2, 1, "", "design_points", "The rotor model design points."], [500, 2, 1, "", "initialize", "Initializes the model."], [501, 2, 1, "", "n_rotor_points", "The number of rotor points"], [502, 2, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.turbine_models": [[503, 3, 1, "", "Calculator", "Calculates variables based on given functions."], [507, 3, 1, "", "LookupTable", "Calculates the data by interpolation of lookup-table data"], [512, 3, 1, "", "PowerMask", "Invokes a maximal power value."], [518, 3, 1, "", "RotorCentreCalc", "Calculates data at the rotor centre"], [524, 3, 1, "", "SectorManagement", "Changes variables based on variable range conditions."], [529, 3, 1, "", "SetFarmVars", "Set farm data variables to given data."], [536, 3, 1, "", "SetXYHD", "Sets basic turbine data, from turbine object to farm data."], [540, 3, 1, "", "TableFactors", "Multiplies variables by factors from a two dimensional table."], [545, 3, 1, "", "Thrust2Ct", "Calculates ct from thrust force data."], [549, 3, 1, "", "YAW2YAWM", "Calculates delta yaw (i.e. YAWM) from absolute yaw (i.e. YAW)"], [552, 3, 1, "", "YAWM2YAW", "Calculates absolute yaw (i.e. YAWM) from delta yaw (i.e. YAWM)"], [555, 3, 1, "", "kTI", "Calculates the wake model parameter k as a linear function of TI."]], "foxes.models.turbine_models.Calculator": [[504, 2, 1, "", "__init__", "Constructor."], [505, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [506, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.LookupTable": [[508, 2, 1, "", "__init__", "Constructor."], [509, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [510, 2, 1, "", "initialize", "Initializes the model."], [511, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.PowerMask": [[513, 2, 1, "", "__init__", "Constructor."], [514, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [515, 2, 1, "", "initialize", "Initializes the model."], [516, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [517, 2, 1, "", "update_P_ct", ""]], "foxes.models.turbine_models.RotorCentreCalc": [[519, 2, 1, "", "__init__", "Constructor."], [520, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [521, 2, 1, "", "finalize", "Finalizes the model."], [522, 2, 1, "", "initialize", "Initializes the model."], [523, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SectorManagement": [[525, 2, 1, "", "__init__", "Constructor."], [526, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [527, 2, 1, "", "initialize", "Initializes the model."], [528, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SetFarmVars": [[530, 2, 1, "", "__init__", "Constructor."], [531, 2, 1, "", "add_var", "Add data for a variable."], [532, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [533, 2, 1, "", "initialize", "Initializes the model."], [534, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [535, 2, 1, "", "reset", "Remove all variables."]], "foxes.models.turbine_models.SetXYHD": [[537, 2, 1, "", "__init__", "Constructor."], [538, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [539, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.TableFactors": [[541, 2, 1, "", "__init__", "Constructor."], [542, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [543, 2, 1, "", "initialize", "Initializes the model."], [544, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.Thrust2Ct": [[546, 2, 1, "", "__init__", "Constructor."], [547, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [548, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAW2YAWM": [[550, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [551, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAWM2YAW": [[553, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [554, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.kTI": [[556, 2, 1, "", "__init__", "Constructor."], [557, 2, 1, "", "__repr__", "Return repr(self)."], [558, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [559, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types": [[560, 3, 1, "", "CpCtFile", "Calculate power and ct by interpolating from cp-ct-curve data file (or pandas DataFrame)."], [562, 3, 1, "", "CpCtFromTwo", "Calculate power and ct by interpolating cp and ct from two files (or two pandas DataFrames)."], [564, 3, 1, "", "NullType", "A turbine type that does not compute any data."], [567, 3, 1, "", "PCtFile", "Calculate power and ct by interpolating from power-ct-curve data file (or pandas DataFrame)."], [573, 3, 1, "", "PCtFromTwo", "Calculate power and ct by interpolating from power curve and ct curve data files."], [579, 3, 1, "", "WsRho2PCtFromTwo", "Calculate air density dependent power and ct values, as given by two individual files."]], "foxes.models.turbine_types.CpCtFile": [[561, 2, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.CpCtFromTwo": [[563, 2, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.NullType": [[565, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [566, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFile": [[568, 2, 1, "", "__init__", "Constructor."], [569, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [570, 2, 1, "", "finalize", "Finalizes the model."], [571, 2, 1, "", "initialize", "Initializes the model."], [572, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFromTwo": [[574, 2, 1, "", "__init__", "Constructor."], [575, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [576, 2, 1, "", "finalize", "Finalizes the model."], [577, 2, 1, "", "initialize", "Initializes the model."], [578, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsRho2PCtFromTwo": [[580, 2, 1, "", "__init__", "Constructor."], [581, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [582, 2, 1, "", "finalize", "Finalizes the model."], [583, 2, 1, "", "initialize", "Initializes the model."], [584, 2, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.vertical_profiles": [[585, 3, 1, "", "ABLLogNeutralWsProfile", "The neutral ABL wind speed log profile."], [588, 3, 1, "", "ABLLogStableWsProfile", "The stable ABL wind speed log profile."], [591, 3, 1, "", "ABLLogUnstableWsProfile", "The unstable ABL wind speed log profile."], [594, 3, 1, "", "ABLLogWsProfile", "The neutral/stable/unstable ABL wind speed log profile."], [597, 3, 1, "", "ShearedProfile", "A wind shear profile, based on a shear exponent."], [600, 3, 1, "", "UniformProfile", "A profile with uniform values."]], "foxes.models.vertical_profiles.ABLLogNeutralWsProfile": [[586, 2, 1, "", "calculate", "Run the profile calculation."], [587, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogStableWsProfile": [[589, 2, 1, "", "calculate", "Run the profile calculation."], [590, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogUnstableWsProfile": [[592, 2, 1, "", "calculate", "Run the profile calculation."], [593, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogWsProfile": [[595, 2, 1, "", "calculate", "Run the profile calculation."], [596, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ShearedProfile": [[598, 2, 1, "", "calculate", "Run the profile calculation."], [599, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.UniformProfile": [[601, 2, 1, "", "__init__", "Constructor"], [602, 2, 1, "", "calculate", "Run the profile calculation."], [603, 2, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.wake_frames": [[604, 3, 1, "", "FarmOrder", "Invokes turbine ordering as defined by the wind farm."], [611, 3, 1, "", "RotorWD", "Align the first axis for each rotor with the local normalized wind direction."], [616, 3, 1, "", "Streamlines", "Streamline following wakes"], [623, 3, 1, "", "YawedWakes", "Bend the wakes for yawed turbines."]], "foxes.models.wake_frames.FarmOrder": [[605, 2, 1, "", "__init__", "Constructor."], [606, 2, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [607, 2, 1, "", "finalize", "Finalizes the model."], [608, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [609, 2, 1, "", "get_wake_coos", "Calculate wake coordinates."], [610, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.RotorWD": [[612, 2, 1, "", "__init__", "Constructor."], [613, 2, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [614, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [615, 2, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.models.wake_frames.Streamlines": [[617, 2, 1, "", "__init__", "Constructor."], [618, 2, 1, "", "__repr__", "Return repr(self)."], [619, 2, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [620, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [621, 2, 1, "", "get_wake_coos", "Calculate wake coordinates."], [622, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.YawedWakes": [[624, 2, 1, "", "__init__", "Constructor."], [625, 2, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [626, 2, 1, "", "finalize", "Finalizes the model."], [627, 2, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [628, 2, 1, "", "get_wake_coos", "Calculate wake coordinates."], [629, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_models": [[630, 3, 1, "", "AxisymmetricWakeModel", "Abstract base class for wake models that depend on (x, r) separately."], [633, 3, 1, "", "DistSlicedWakeModel", "Abstract base class for wake models for which the x-denpendency can be separated from the yz-dependency."], [640, 3, 1, "", "GaussianWakeModel", "Abstract base class for Gaussian wake models."], [643, 3, 1, "", "TopHatWakeModel", "Abstract base class for top-hat wake models."]], "foxes.models.wake_models.AxisymmetricWakeModel": [[631, 2, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."], [632, 2, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."]], "foxes.models.wake_models.DistSlicedWakeModel": [[634, 2, 1, "", "__init__", "Constructor."], [635, 2, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [636, 2, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [637, 2, 1, "", "finalize", "Finalizes the model."], [638, 2, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [639, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_models.GaussianWakeModel": [[641, 2, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [642, 2, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.TopHatWakeModel": [[644, 2, 1, "", "__init__", "Constructor."], [645, 2, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [646, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [647, 2, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.ti": [[648, 3, 1, "", "CrespoHernandezTIWake", "The Crespo and Hernandez TI empirical correlation"], [654, 3, 1, "", "IECTIWake", "The TI wake model from IEC-64100-1-2005-8 (2005):"]], "foxes.models.wake_models.ti.CrespoHernandezTIWake": [[649, 2, 1, "", "__init__", "Constructor."], [650, 2, 1, "", "__repr__", "Return repr(self)."], [651, 2, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [652, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [653, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.ti.IECTIWake": [[655, 2, 1, "", "__init__", "Constructor."], [656, 2, 1, "", "__repr__", "Return repr(self)."], [657, 2, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [658, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [659, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind": [[660, 3, 1, "", "BastankhahWake", "The Bastankhah wake model"], [665, 3, 1, "", "JensenWake", "The Jensen wake model."], [671, 3, 1, "", "PorteAgelModel", "Common calculations for the wake model and the wake frame, such that code repetitions can be avoided."], [692, 3, 1, "", "PorteAgelWake", "The Bastankhah PorteAgel wake model"], [697, 3, 1, "", "TurbOParkWake", "The TurbOPark wake model"], [702, 3, 1, "", "TurbOParkWakeIX", "The generalized TurbOPark wake model, integrating TI over the streamline."]], "foxes.models.wake_models.wind.BastankhahWake": [[661, 2, 1, "", "__init__", "Constructor."], [662, 2, 1, "", "__repr__", "Return repr(self)."], [663, 2, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [664, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.JensenWake": [[666, 2, 1, "", "__init__", "Constructor."], [667, 2, 1, "", "__repr__", "Return repr(self)."], [668, 2, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [669, 2, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [670, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.PorteAgelModel": [[672, 1, 1, "", "AMPL_FAR", ""], [673, 1, 1, "", "AMPL_NEAR", ""], [674, 1, 1, "", "CHECK", ""], [675, 1, 1, "", "DELTA_FAR", ""], [676, 1, 1, "", "DELTA_NEAR", ""], [677, 1, 1, "", "MDATA_KEY", ""], [678, 1, 1, "", "NEAR", ""], [679, 1, 1, "", "PARS", ""], [680, 1, 1, "", "R_PC", ""], [681, 1, 1, "", "R_PC_S", ""], [682, 1, 1, "", "SIGMA_Y_FAR", ""], [683, 1, 1, "", "SIGMA_Z_FAR", ""], [684, 1, 1, "", "SP_SEL", ""], [685, 1, 1, "", "X0", ""], [686, 2, 1, "", "__init__", "Constructor."], [687, 2, 1, "", "calc_data", "Calculate common model data, store it in mdata."], [688, 2, 1, "", "clean", "Clean all data"], [689, 2, 1, "", "get_data", "Return data entry"], [690, 2, 1, "", "has_data", "Check if data exists"], [691, 4, 1, "", "pars", "Dictionary of the model parameters"]], "foxes.models.wake_models.wind.PorteAgelWake": [[693, 2, 1, "", "__init__", "Constructor."], [694, 2, 1, "", "__repr__", "Return repr(self)."], [695, 2, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [696, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWake": [[698, 2, 1, "", "__init__", "Constructor."], [699, 2, 1, "", "__repr__", "Return repr(self)."], [700, 2, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [701, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWakeIX": [[703, 2, 1, "", "__init__", "Constructor."], [704, 2, 1, "", "__repr__", "Return repr(self)."], [705, 2, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [706, 2, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_superpositions": [[707, 3, 1, "", "LinearSuperposition", "Linear supersposition of wake model results, optionally rescaled."], [711, 3, 1, "", "MaxSuperposition", "Maximum supersposition of wake model results, optionally rescaled."], [716, 3, 1, "", "ProductSuperposition", "Product wind wake superposition."], [720, 3, 1, "", "QuadraticSuperposition", "Quadratic supersposition of wake model results, optionally rescaled."], [725, 3, 1, "", "TISuperposition", "A collection of superpositions for TI."]], "foxes.models.wake_superpositions.LinearSuperposition": [[708, 2, 1, "", "__init__", "Constructor."], [709, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [710, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.MaxSuperposition": [[712, 2, 1, "", "__init__", "Constructor."], [713, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [714, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [715, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_superpositions.ProductSuperposition": [[717, 2, 1, "", "__init__", "Constructor."], [718, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [719, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.QuadraticSuperposition": [[721, 2, 1, "", "__init__", "Constructor."], [722, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [723, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [724, 2, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_superpositions.TISuperposition": [[726, 2, 1, "", "__init__", "Constructor."], [727, 2, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [728, 2, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.opt.constraints": [[864, 3, 1, "", "AreaGeometryConstraint", "Constrains turbine positions to the inside of a given area geometry."], [885, 3, 1, "", "FarmBoundaryConstraint", "Constrains turbine positions to the inside of the wind farm boundary"], [887, 3, 1, "", "MinDistConstraint", "Turbines must keep at least a minimal spatial distance."]], "foxes.opt.constraints.AreaGeometryConstraint": [[865, 2, 1, "", "__init__", "Constructor."], [866, 2, 1, "", "__str__", "Get info string"], [867, 2, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [868, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [869, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [870, 4, 1, "", "component_names", "The names of the components"], [871, 2, 1, "", "finalize", "Finalize the object."], [872, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [873, 2, 1, "", "finalize_population", "Finalization, given the final population data."], [874, 2, 1, "", "initialize", "Initialize the object."], [875, 4, 1, "", "initialized", "Flag for finished initialization"], [876, 2, 1, "", "n_components", "Returns the number of components of the function."], [877, 4, 1, "", "n_vars_float", "The number of float variables"], [878, 4, 1, "", "n_vars_int", "The number of int variables"], [879, 2, 1, "", "rename_vars_float", "Rename float variables."], [880, 2, 1, "", "rename_vars_int", "Rename integer variables."], [881, 4, 1, "", "var_names_float", "The names of the float variables"], [882, 4, 1, "", "var_names_int", "The names of the integer variables"], [883, 2, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [884, 2, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "foxes.opt.constraints.FarmBoundaryConstraint": [[886, 2, 1, "", "__init__", "Constructor."]], "foxes.opt.constraints.MinDistConstraint": [[888, 2, 1, "", "__init__", "Constructor."], [889, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [890, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [891, 2, 1, "", "initialize", "Initialize the constaint."], [892, 2, 1, "", "n_components", "Returns the number of components of the function."], [893, 2, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core": [[894, 3, 1, "", "FarmConstraint", "Abstract base class for foxes wind farm optimization constraints."], [905, 3, 1, "", "FarmObjective", "Abstract base class for foxes wind farm objective functions."], [912, 3, 1, "", "FarmOptProblem", "Abstract base class of wind farm optimization problems."], [954, 3, 1, "", "FarmVarsProblem", "Abstract base class for models that optimize farm variables."], [960, 3, 1, "", "PopStates", "Helper class for vectorized opt population calculation, via artificial states of length n_pop times n_states."]], "foxes.opt.core.FarmConstraint": [[895, 2, 1, "", "__init__", "Constructor."], [896, 2, 1, "", "add_to_layout_figure", "Add to a layout figure"], [897, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [898, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [899, 4, 1, "", "farm", "The wind farm"], [900, 2, 1, "", "n_components", "Returns the number of components of the function."], [901, 4, 1, "", "n_sel_turbines", "The numer of selected turbines"], [902, 2, 1, "", "print_models", "Prints all model names."], [903, 4, 1, "", "sel_turbines", "The list of selected turbines"], [904, 2, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core.FarmObjective": [[906, 2, 1, "", "__init__", "Constraints."], [907, 2, 1, "", "add_to_layout_figure", "Add to a layout figure"], [908, 4, 1, "", "farm", "The wind farm"], [909, 4, 1, "", "n_sel_turbines", "The numer of selected turbines"], [910, 2, 1, "", "print_models", "Prints all model names."], [911, 4, 1, "", "sel_turbines", "The list of selected turbines"]], "foxes.opt.core.FarmOptProblem": [[913, 1, 1, "", "INT_INF", ""], [914, 2, 1, "", "__init__", "Constructor."], [915, 2, 1, "", "add_constraint", "Add a constraint to the problem."], [916, 2, 1, "", "add_objective", "Add an objective to the problem."], [917, 2, 1, "", "add_to_layout_figure", "Add to a layout figure"], [918, 4, 1, "", "all_turbines", "Flag for all turbines optimization"], [919, 2, 1, "", "apply_individual", "Apply new variables to the problem."], [920, 2, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [921, 2, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [922, 2, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [923, 2, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [924, 4, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [925, 4, 1, "", "counter", "The current value of the application counter"], [926, 2, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [927, 2, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [928, 4, 1, "", "farm", "The wind farm"], [929, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [930, 2, 1, "", "finalize_population", "Finalization, given the final population data."], [931, 2, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [932, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [933, 2, 1, "", "initial_values_int", "The initial values of the integer variables."], [934, 2, 1, "", "initialize", "Initialize the object."], [935, 4, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [936, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [937, 2, 1, "", "max_values_int", "The maximal values of the integer variables."], [938, 4, 1, "", "maximize_objs", "Flags for objective maximization"], [939, 4, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [940, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [941, 2, 1, "", "min_values_int", "The minimal values of the integer variables."], [942, 4, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [943, 4, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [944, 4, 1, "", "n_sel_turbines", "The numer of selected turbines"], [945, 4, 1, "", "n_vars_float", "The number of float variables"], [946, 4, 1, "", "n_vars_int", "The number of int variables"], [947, 2, 1, "", "parse_tvar", "Parse foxes variable name and turbine index from turbine variable"], [948, 4, 1, "", "sel_turbines", "The selected turbines"], [949, 2, 1, "", "tvar", "Gets turbine variable name"], [950, 2, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [951, 2, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [952, 2, 1, "", "var_names_float", "The names of float variables."], [953, 2, 1, "", "var_names_int", "The names of integer variables."]], "foxes.opt.core.FarmVarsProblem": [[955, 2, 1, "", "initialize", "Initialize the object."], [956, 2, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [957, 2, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [958, 2, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [959, 2, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."]], "foxes.opt.core.PopStates": [[961, 2, 1, "", "__init__", "Constructor."], [962, 2, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [963, 2, 1, "", "initialize", "Initializes the model."], [964, 2, 1, "", "output_point_vars", "The variables which are being modified by the model."], [965, 2, 1, "", "size", "The total number of states."], [966, 2, 1, "", "weights", "The statistical weights of all states."]], "foxes.opt.objectives": [[967, 3, 1, "", "FarmVarObjective", "Objectives based on farm variables."], [976, 3, 1, "", "MaxFarmPower", "Maximize the mean wind farm power"], [978, 3, 1, "", "MaxNTurbines", "Maximizes the number of turrbines."], [984, 3, 1, "", "MinimalMaxTI", "Minimize the maximal turbine TI"]], "foxes.opt.objectives.FarmVarObjective": [[968, 2, 1, "", "__init__", "Constructor."], [969, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [970, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [971, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [972, 2, 1, "", "initialize", "Initialize the object."], [973, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [974, 2, 1, "", "n_components", "Returns the number of components of the function."], [975, 2, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.objectives.MaxFarmPower": [[977, 2, 1, "", "__init__", "Constructor."]], "foxes.opt.objectives.MaxNTurbines": [[979, 2, 1, "", "__init__", "Constructor."], [980, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [981, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [982, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [983, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.objectives.MinimalMaxTI": [[985, 2, 1, "", "__init__", "Constructor."]], "foxes.opt.problems": [[986, 3, 1, "", "OptFarmVars", "Optimize a selection of farm variables."]], "foxes.opt.problems.OptFarmVars": [[987, 2, 1, "", "__init__", "Constructor."], [988, 2, 1, "", "add_var", "Add a variable."], [989, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [990, 2, 1, "", "initial_values_int", "The initial values of the int variables."], [991, 2, 1, "", "initialize", "Initialize the object."], [992, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [993, 2, 1, "", "max_values_int", "The maximal values of the integer variables."], [994, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [995, 2, 1, "", "min_values_int", "The minimal values of the integer variables."], [996, 2, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [997, 2, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [998, 2, 1, "", "var_names_float", "The names of float variables."], [999, 2, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout": [[1125, 3, 1, "", "FarmLayoutOptProblem", "The turbine positioning optimization problem"], [1134, 3, 1, "", "RegGridsLayoutOptProblem", "Places turbines on several regular grids and optimizes their parameters."], [1150, 3, 1, "", "RegularLayoutOptProblem", "Places turbines on a regular grid and optimizes its parameters."]], "foxes.opt.problems.layout.FarmLayoutOptProblem": [[1126, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [1127, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1128, 2, 1, "", "initialize", "Initialize the object."], [1129, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1130, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1131, 2, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1132, 2, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1133, 2, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.RegGridsLayoutOptProblem": [[1135, 2, 1, "", "__init__", "Constraints."], [1136, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [1137, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1138, 2, 1, "", "initial_values_int", "The initial values of the int variables."], [1139, 2, 1, "", "initialize", "Initialize the object."], [1140, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1141, 2, 1, "", "max_values_int", "The maximal values of the integer variables."], [1142, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1143, 2, 1, "", "min_values_int", "The minimal values of the integer variables."], [1144, 2, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1145, 2, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1146, 2, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1147, 2, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1148, 2, 1, "", "var_names_float", "The names of float variables."], [1149, 2, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.RegularLayoutOptProblem": [[1151, 1, 1, "", "ANGLE", ""], [1152, 1, 1, "", "OFFSET_X", ""], [1153, 1, 1, "", "OFFSET_Y", ""], [1154, 1, 1, "", "SPACING_X", ""], [1155, 1, 1, "", "SPACING_Y", ""], [1156, 2, 1, "", "__init__", "Constructor."], [1157, 2, 1, "", "finalize_individual", "Finalization, given the champion data."], [1158, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1159, 2, 1, "", "initialize", "Initialize the object."], [1160, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1161, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1162, 2, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1163, 2, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1164, 2, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts": [[1081, 3, 1, "", "GeomLayout", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes)."], [1091, 3, 1, "", "GeomLayoutGridded", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes), on a fixes background point grid."], [1101, 3, 1, "", "GeomRegGrid", "A regular grid within a boundary geometry."], [1111, 3, 1, "", "GeomRegGrids", "A regular grid within a boundary geometry."]], "foxes.opt.problems.layout.geom_layouts.GeomLayout": [[1082, 2, 1, "", "__init__", "Constructor."], [1083, 2, 1, "", "apply_individual", "Apply new variables to the problem."], [1084, 2, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1085, 2, 1, "", "get_fig", "Return plotly figure axis."], [1086, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1087, 2, 1, "", "initialize", "Initialize the object."], [1088, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1089, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1090, 2, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded": [[1092, 2, 1, "", "__init__", "Constructor."], [1093, 2, 1, "", "apply_individual", "Apply new variables to the problem."], [1094, 2, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1095, 2, 1, "", "get_fig", "Return plotly figure axis."], [1096, 2, 1, "", "initial_values_int", "The initial values of the int variables."], [1097, 2, 1, "", "initialize", "Initialize the object."], [1098, 2, 1, "", "max_values_int", "The maximal values of the int variables."], [1099, 2, 1, "", "min_values_int", "The minimal values of the int variables."], [1100, 2, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrid": [[1102, 2, 1, "", "__init__", "Constructor."], [1103, 2, 1, "", "apply_individual", "Apply new variables to the problem."], [1104, 2, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1105, 2, 1, "", "get_fig", "Return plotly figure axis."], [1106, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1107, 2, 1, "", "initialize", "Initialize the object."], [1108, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1109, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1110, 2, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrids": [[1112, 2, 1, "", "__init__", "Constructor."], [1113, 2, 1, "", "apply_individual", "Apply new variables to the problem."], [1114, 2, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1115, 2, 1, "", "get_fig", "Return plotly figure axis."], [1116, 2, 1, "", "initial_values_float", "The initial values of the float variables."], [1117, 2, 1, "", "initial_values_int", "The initial values of the int variables."], [1118, 2, 1, "", "initialize", "Initialize the object."], [1119, 2, 1, "", "max_values_float", "The maximal values of the float variables."], [1120, 2, 1, "", "max_values_int", "The maximal values of the integer variables."], [1121, 2, 1, "", "min_values_float", "The minimal values of the float variables."], [1122, 2, 1, "", "min_values_int", "The minimal values of the integer variables."], [1123, 2, 1, "", "var_names_float", "The names of float variables."], [1124, 2, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1000, 3, 1, "", "Boundary", "Boundary constraint for purely geometrical layouts problems."], [1005, 3, 1, "", "CFixN", "Fixed number of turbines constraint for purely geometrical layouts problems."], [1010, 3, 1, "", "CMaxN", "Maximal number of turbines constraint for purely geometrical layouts problems."], [1015, 3, 1, "", "CMinDensity", "Minimal turbine density constraint for purely geometrical layouts problems."], [1021, 3, 1, "", "CMinN", "Minimal number of turbines constraint for purely geometrical layouts problems."], [1026, 3, 1, "", "Constraint", "Abstract base class for optimization constraints."], [1031, 3, 1, "", "MinDist", "Minimal distance constraint for purely geometrical layouts problems."], [1037, 3, 1, "", "Valid", "Validity constraint for purely geometrical layouts problems."], [1042, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.constraints.Boundary": [[1001, 2, 1, "", "__init__", "Constructor."], [1002, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1003, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1004, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CFixN": [[1006, 2, 1, "", "__init__", "Constructor."], [1007, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1008, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1009, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN": [[1011, 2, 1, "", "__init__", "Constructor."], [1012, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1013, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1014, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity": [[1016, 2, 1, "", "__init__", "Constructor."], [1017, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1018, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1019, 2, 1, "", "initialize", "Initialize the object."], [1020, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinN": [[1022, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1023, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1024, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1025, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Constraint": [[1027, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1028, 2, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [1029, 2, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [1030, 2, 1, "", "get_bounds", "Returns the bounds for all components."]], "foxes.opt.problems.layout.geom_layouts.constraints.MinDist": [[1032, 2, 1, "", "__init__", "Constructor."], [1033, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1034, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1035, 2, 1, "", "initialize", "Initialize the constaint."], [1036, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Valid": [[1038, 2, 1, "", "__init__", "Constructor."], [1039, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1040, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1041, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1043, 3, 1, "", "MaxDensity", "Maximal turbine density objective for purely geometrical layouts problems."], [1050, 3, 1, "", "MaxGridSpacing", "Maximal grid spacing objective for purely geometrical layouts problems."], [1056, 3, 1, "", "MeMiMaDist", "Mean-min-max distance objective for purely geometrical layouts problems."], [1062, 3, 1, "", "OFixN", "Fixed number of turbines objective for purely geometrical layouts problems."], [1068, 3, 1, "", "OMaxN", "Maximal number of turbines objective for purely geometrical layouts problems."], [1074, 3, 1, "", "OMinN", "Minimal number of turbines objective for purely geometrical layouts problems."], [1077, 3, 1, "", "Objective", "Abstract base class for objective functions."], [1080, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity": [[1044, 2, 1, "", "__init__", "Constructor."], [1045, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1046, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1047, 2, 1, "", "initialize", "Initialize the object."], [1048, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1049, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing": [[1051, 2, 1, "", "__init__", "Constructor."], [1052, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1053, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1054, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1055, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist": [[1057, 2, 1, "", "__init__", "Constructor."], [1058, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1059, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1060, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1061, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OFixN": [[1063, 2, 1, "", "__init__", "Constructor."], [1064, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1065, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1066, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1067, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN": [[1069, 2, 1, "", "__init__", "Constructor."], [1070, 2, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1071, 2, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1072, 2, 1, "", "maximize", "Returns flag for maximization of each component."], [1073, 2, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMinN": [[1075, 2, 1, "", "__init__", "Constructor."], [1076, 2, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.opt.problems.layout.geom_layouts.objectives.Objective": [[1078, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1079, 2, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.output": [[729, 3, 1, "", "FarmLayoutOutput", "Plot the farm layout"], [738, 3, 1, "", "FarmResultsEval", "Evaluates farm results data."], [757, 3, 1, "", "FlowPlots2D", "Class for horizontal or vertical 2D flow plots"], [765, 3, 1, "", "Output", "Base class for foxes output."], [769, 3, 1, "", "ResultsWriter", "Writes results farm data to file."], [772, 3, 1, "", "RosePlotOutput", "Class for rose plot creation"], [778, 3, 1, "", "StateTurbineMap", "Creates heat maps with turbines on the one and states on the other axis."], [781, 3, 1, "", "StatesRosePlotOutput", "Class for rose plot creation directly from states"], [783, 3, 1, "", "TurbineTypeCurves", "Creates power and ct curves for turbine types, optionally including derating/boost."]], "foxes.output.FarmLayoutOutput": [[730, 2, 1, "", "__init__", "Constructor."], [731, 2, 1, "", "get_figure", "Creates farm layout figure."], [732, 2, 1, "", "get_layout_data", "Returns wind farm layout."], [733, 2, 1, "", "get_layout_dict", "Returns wind farm layout."], [734, 2, 1, "", "write_csv", "Writes csv layout file."], [735, 2, 1, "", "write_json", "Writes xyh layout file."], [736, 2, 1, "", "write_plot", "Writes the layout plot to file."], [737, 2, 1, "", "write_xyh", "Writes xyh layout file."]], "foxes.output.FarmResultsEval": [[739, 2, 1, "", "__init__", "Constructor."], [740, 2, 1, "", "add_capacity", "Adds capacity to the farm results"], [741, 2, 1, "", "add_efficiency", "Adds efficiency to the farm results"], [742, 2, 1, "", "calc_farm_efficiency", "Calculates farm efficiency"], [743, 2, 1, "", "calc_farm_mean", "Calculates the mean over states and turbines."], [744, 2, 1, "", "calc_farm_sum", "Calculates the sum over states and turbines."], [745, 2, 1, "", "calc_farm_yield", "Calculates yield, P75 and P90 at the farm level"], [746, 2, 1, "", "calc_mean_farm_power", "Calculates the mean total farm power."], [747, 2, 1, "", "calc_states_mean", "Calculates the mean wrt states."], [748, 2, 1, "", "calc_states_std", "Calculates the standard deviation wrt states."], [749, 2, 1, "", "calc_states_sum", "Calculates the sum wrt states."], [750, 2, 1, "", "calc_turbine_mean", "Calculates the mean wrt turbines."], [751, 2, 1, "", "calc_turbine_sum", "Calculates the sum wrt turbines."], [752, 2, 1, "", "calc_turbine_yield", "Calculates the yield per turbine"], [753, 2, 1, "", "reduce_all", "Reduces states and turbine dimension by some operation"], [754, 2, 1, "", "reduce_states", "Reduces the states dimension by some operation"], [755, 2, 1, "", "reduce_turbines", "Reduces the turbine dimension by some operation"], [756, 2, 1, "", "weinsum", "Calculates Einstein sum, adding weights as last argument to the given fields."]], "foxes.output.FlowPlots2D": [[758, 2, 1, "", "__init__", "Constructor."], [759, 2, 1, "", "gen_states_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [760, 2, 1, "", "gen_states_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [761, 2, 1, "", "gen_states_fig_yz", "Generates 2D farm flow figure in a plane."], [762, 2, 1, "", "get_mean_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [763, 2, 1, "", "get_mean_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [764, 2, 1, "", "get_mean_fig_yz", "Generates 2D farm flow figure in a vertical yz-plane."]], "foxes.output.Output": [[766, 2, 1, "", "new", "Run-time output model factory."], [767, 2, 1, "", "print_models", "Prints all model names."], [768, 2, 1, "", "write", "Writes data to file via pandas."]], "foxes.output.ResultsWriter": [[770, 2, 1, "", "__init__", "Constructor."], [771, 2, 1, "", "write_csv", "Writes a csv file"]], "foxes.output.RosePlotOutput": [[773, 2, 1, "", "__init__", "Constructor."], [774, 2, 1, "", "get_data", "Get pandas DataFrame with wind rose data."], [775, 2, 1, "", "get_data_info", "Returns default description for a variable."], [776, 2, 1, "", "get_figure", "Creates px figure object"], [777, 2, 1, "", "write_figure", "Write rose plot to file"]], "foxes.output.StateTurbineMap": [[779, 2, 1, "", "__init__", "Constructor."], [780, 2, 1, "", "plot_map", "Plot the heat map for the selected variable."]], "foxes.output.StatesRosePlotOutput": [[782, 2, 1, "", "__init__", "Constructor."]], "foxes.output.TurbineTypeCurves": [[784, 2, 1, "", "__init__", "Constructor."], [785, 2, 1, "", "plot_curves", "Plot the power or ct curve."]], "foxes.utils": [[786, 3, 1, "", "DataBook", "Container class for file paths, either directly given or as static data within a package."], [794, 3, 1, "", "PandasFileHelper", "This class helps reading and writing data to files via pandas."], [814, 5, 1, "", "all_subclasses", "Searches all classes derived from some base class."], [815, 5, 1, "", "cubic_roots", "Calculate real roots of polynomials of degree 3."], [816, 5, 1, "", "delta_wd", "Calculates wd_b - wd_a."], [1165, 5, 1, "", "read_shp", "Read a shape file"], [1166, 5, 1, "", "read_shp_polygons", "Reads the polygon points from a shp file."], [1182, 5, 1, "", "show_plotly_fig", "Displays a plotly figure in a window"], [1183, 5, 1, "", "shp2csv", "Read shape file, write csv file"], [1184, 5, 1, "", "shp2geom2d", "Read shapefile into geom2d geometry"], [1187, 5, 1, "", "uv2wd", "Calculate wind direction from wind vectors."], [1188, 5, 1, "", "wd2uv", "Calculate wind vectors from wind directions in degrees."], [1189, 5, 1, "", "wd2wdvec", "Calculate wind direction vectors from wind directions in degrees."], [1190, 5, 1, "", "wdvec2wd", "Calculate wind direction from wind direction vectors."]], "foxes.utils.DataBook": [[787, 2, 1, "", "__init__", "Constructor."], [788, 2, 1, "", "add_data_package", "Add static files from a package location."], [789, 2, 1, "", "add_data_package_file", "Add a static file from a package location."], [790, 2, 1, "", "add_file", "Add a file path"], [791, 2, 1, "", "add_files", "Add file paths"], [792, 2, 1, "", "get_file_path", "Get path of a file"], [793, 2, 1, "", "toc", "Get list of contents"]], "foxes.utils.PandasFileHelper": [[795, 1, 1, "", "DATA_FILE_FORMATS", ""], [796, 1, 1, "", "DEFAULT_FORMAT_DICT", ""], [797, 1, 1, "", "DEFAULT_READING_PARAMETERS", ""], [798, 1, 1, "", "DEFAULT_WRITING_PARAMETERS", ""], [799, 2, 1, "", "read_file", "Helper for reading data according to file ending."], [800, 2, 1, "", "write_file", "Helper for writing data according to file ending."]], "foxes.utils.abl.neutral": [[801, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [802, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [803, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.sheared": [[804, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"]], "foxes.utils.abl.stable": [[805, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [806, 5, 1, "", "lgz", "Calculates the log factor for wind speed profiles."], [807, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [808, 5, 1, "", "psi", "The Psi function"], [809, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.unstable": [[810, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [811, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [812, 5, 1, "", "psi", "The Psi function"], [813, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.geom2d": [[817, 3, 1, "", "AreaGeometry", "Abstract base class for closed 2D geometries."], [824, 3, 1, "", "AreaIntersection", "The intersection of area geometries."], [826, 3, 1, "", "AreaUnion", "The union of area geometries."], [834, 3, 1, "", "Circle", "This class represents the area of a circle."], [841, 3, 1, "", "ClosedPolygon", "This class represents a closed 2D polygon."], [848, 3, 1, "", "HalfPlane", "This class represents a half plane in 2d."], [856, 3, 1, "", "InvertedAreaGeometry", "Base class for inverted geometries."]], "foxes.utils.geom2d.AreaGeometry": [[818, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [819, 2, 1, "", "inverse", "Get the inverted geometry"], [820, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [821, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [822, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [823, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.AreaIntersection": [[825, 2, 1, "", "__new__", "Constructor."]], "foxes.utils.geom2d.AreaUnion": [[827, 2, 1, "", "__init__", "Constructor."], [828, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [829, 2, 1, "", "inverse", "Get the inverted geometry"], [830, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [831, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [832, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [833, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.Circle": [[835, 2, 1, "", "__init__", "Cobnstructor."], [836, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [837, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [838, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [839, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [840, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.ClosedPolygon": [[842, 2, 1, "", "__init__", "Constructor."], [843, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [844, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [845, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [846, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [847, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.HalfPlane": [[849, 2, 1, "", "__init__", "Constructor."], [850, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [851, 2, 1, "", "inverse", "Get the inverted geometry"], [852, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [853, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [854, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [855, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.InvertedAreaGeometry": [[857, 2, 1, "", "__init__", "Constructor."], [858, 2, 1, "", "add_to_figure", "Add image to (x,y) figure."], [859, 2, 1, "", "inverse", "Get the inverted geometry"], [860, 2, 1, "", "p_max", "Returns maximal (x,y) point."], [861, 2, 1, "", "p_min", "Returns minimal (x,y) point."], [862, 2, 1, "", "points_distance", "Calculates point distances wrt boundary."], [863, 2, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.runners": [[1167, 3, 1, "", "DaskRunner", "Class for function execution via dask"], [1174, 3, 1, "", "DefaultRunner", "Class for default function execution."], [1176, 3, 1, "", "Runner", "Abstract base class for runners."]], "foxes.utils.runners.DaskRunner": [[1168, 2, 1, "", "__init__", "Constructor."], [1169, 2, 1, "", "finalize", "Finallize the runner"], [1170, 2, 1, "", "initialize", "Initialize the runner"], [1171, 2, 1, "", "is_distributed", ""], [1172, 2, 1, "", "print", "Prints if verbosity is not zero"], [1173, 2, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.DefaultRunner": [[1175, 2, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.Runner": [[1177, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1178, 2, 1, "", "finalize", "Finalize the runner"], [1179, 2, 1, "", "initialize", "Initialize the runner"], [1180, 4, 1, "", "initialized", "Initialization flag"], [1181, 2, 1, "", "run", "Runs the given function."]], "foxes.utils.two_circles": [[1185, 5, 1, "", "area", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."], [1186, 5, 1, "", "calc_area", "Calculates the intersection of two circles."]], "foxes.variables": [[317, 0, 1, "", "AMB_CAP", "Ambient capacity, equals AMB_P/P_nominal"], [318, 0, 1, "", "AMB_CT", "The ambient thrust coefficient"], [319, 0, 1, "", "AMB_P", "The ambient power, unit depends on user choice"], [320, 0, 1, "", "AMB_REWS", "Ambient rotor effective wind speed in m/s"], [321, 0, 1, "", "AMB_REWS2", "Ambient rotor effective wind speed in m/s, calculated from second moment"], [322, 0, 1, "", "AMB_REWS3", "Ambient rotor effective wind speed in m/s, calculated from third moment"], [323, 0, 1, "", "AMB_RHO", "The ambient air density in kg/m3"], [324, 0, 1, "", "AMB_T", "The ambient temperature in Kelvin"], [325, 0, 1, "", "AMB_TI", "The ambient turbulence intensity"], [326, 0, 1, "", "AMB_WD", "The ambient wind direction in degrees"], [327, 0, 1, "", "AMB_WS", "The ambient wind speed in m/s"], [328, 0, 1, "", "AMB_YAW", "The ambient absolute yaw angle of  a turbine in degrees"], [329, 0, 1, "", "AMB_YAWM", "The ambient relative yaw angle of  a turbine in degrees"], [330, 0, 1, "", "AMB_YLD", "Ambient yield in GWh/a"], [331, 0, 1, "", "CAP", "Capacity, equals P/P_nominal"], [332, 0, 1, "", "CT", "The thrust coefficient"], [333, 0, 1, "", "D", "The rotor diameter in m"], [334, 0, 1, "", "EFF", "Efficiency, equals P/AMB_P"], [335, 0, 1, "", "H", "The height over ground in m"], [336, 0, 1, "", "K", "Wake growth parameter"], [337, 0, 1, "", "KB", "KTI value for zero TI, K = KB + KTI*TI"], [338, 0, 1, "", "KTI", "Factor between K and TI, K = KB + KTI*TI"], [339, 0, 1, "", "MAX_P", "The maximal power, for derating/boost"], [340, 0, 1, "", "MOL", "The Monin-Ubukhof length in m"], [341, 0, 1, "", "ORDER", "The turbine order"], [342, 0, 1, "", "P", "The power, unit depends on user choice"], [343, 0, 1, "", "PA_ALPHA", "The alpha parameter of the PorteAgel wake model"], [344, 0, 1, "", "PA_BETA", "The beta parameter of the PorteAgel wake model"], [345, 0, 1, "", "REWS", "Rotor effective wind speed in m/s"], [346, 0, 1, "", "REWS2", "Rotor effective wind speed in m/s, calculated from second moment"], [347, 0, 1, "", "REWS3", "Rotor effective wind speed in m/s, calculated from third moment"], [348, 0, 1, "", "RHO", "The air density in kg/m3"], [349, 0, 1, "", "SHEAR", "The shear exponent"], [350, 0, 1, "", "T", "The temperature in Kelvin"], [351, 0, 1, "", "TI", "The turbulence intensity"], [352, 0, 1, "", "TXYH", "The turbine rotor centre coordinate  vector (x, y, height)"], [353, 0, 1, "", "WD", "The wind direction in degrees"], [354, 0, 1, "", "WEIGHT", "The statistical weight of a state"], [355, 0, 1, "", "WS", "The wind speed in m/s"], [356, 0, 1, "", "X", "The x coordinate in m"], [357, 0, 1, "", "XYH", "The vector (x, y, height)"], [358, 0, 1, "", "Y", "The y coordinate in"], [359, 0, 1, "", "YAW", "The absolute yaw angle of a turbine in degrees"], [360, 0, 1, "", "YAWM", "The relative yaw angle of a turbine in degrees"], [361, 0, 1, "", "YLD", "Yield in GWh/a"], [362, 0, 1, "", "Z0", "The roughness length in m"], [363, 0, 1, "", "amb2var", "Mapping from ambient variable to the corresponding waked variable"], [364, 0, 1, "", "var2amb", "Mapping from variable to the corresponding ambient variable"]]}, "objtypes": {"0": "py:data", "1": "py:attribute", "2": "py:method", "3": "py:class", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "data", "Python data"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "class", "Python class"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"attribut": [0, 12, 17, 27, 35, 40, 48, 57, 68, 75, 89, 95, 113, 371, 379, 399, 406, 422, 429, 432, 437, 444, 452, 463, 478, 486, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 555, 567, 573, 579, 600, 604, 611, 616, 623, 633, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 729, 738, 757, 769, 772, 778, 783, 786, 794, 826, 834, 841, 848, 864, 887, 912, 960, 967, 978, 1026, 1081, 1091, 1101, 1111, 1134, 1150, 1167], "public": [0, 12, 14, 17, 27, 35, 40, 47, 48, 57, 64, 68, 75, 84, 89, 93, 95, 97, 101, 106, 110, 113, 118, 123, 248, 371, 379, 390, 392, 399, 406, 417, 421, 422, 429, 432, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 729, 738, 757, 765, 769, 772, 778, 781, 783, 786, 794, 817, 824, 826, 834, 841, 848, 856, 864, 885, 887, 894, 905, 912, 954, 960, 967, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1167, 1174, 1176], "member": [0, 12, 14, 17, 27, 35, 40, 47, 48, 57, 64, 68, 75, 84, 89, 93, 95, 97, 101, 106, 110, 113, 118, 123, 248, 371, 379, 390, 392, 399, 406, 417, 421, 422, 429, 432, 437, 444, 452, 460, 463, 471, 478, 483, 486, 490, 496, 503, 507, 512, 518, 524, 529, 536, 540, 545, 549, 552, 555, 560, 562, 564, 567, 573, 579, 585, 588, 591, 594, 597, 600, 604, 611, 616, 623, 630, 633, 640, 643, 648, 654, 660, 665, 671, 692, 697, 702, 707, 711, 716, 720, 725, 729, 738, 757, 765, 769, 772, 778, 781, 783, 786, 794, 817, 824, 826, 834, 841, 848, 856, 864, 885, 887, 894, 905, 912, 954, 960, 967, 976, 978, 984, 986, 1000, 1005, 1010, 1015, 1021, 1026, 1031, 1037, 1043, 1050, 1056, 1062, 1068, 1074, 1077, 1081, 1091, 1101, 1111, 1125, 1134, 1150, 1167, 1174, 1176], "paramet": [1, 2, 3, 4, 7, 8, 10, 13, 15, 16, 18, 19, 20, 21, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 51, 52, 53, 56, 58, 59, 60, 61, 62, 63, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 86, 88, 90, 91, 92, 94, 96, 98, 100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 114, 115, 119, 120, 121, 215, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 378, 381, 382, 383, 385, 386, 387, 389, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 405, 408, 409, 410, 412, 413, 414, 416, 420, 423, 425, 426, 427, 428, 431, 434, 435, 436, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 487, 488, 489, 492, 493, 497, 500, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 519, 520, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 533, 534, 537, 538, 539, 541, 542, 543, 544, 546, 547, 548, 550, 551, 553, 554, 556, 558, 559, 561, 563, 565, 566, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 586, 589, 592, 595, 598, 601, 602, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 644, 645, 646, 647, 649, 651, 652, 653, 655, 657, 658, 659, 661, 663, 664, 666, 668, 669, 670, 686, 687, 689, 690, 693, 695, 696, 698, 700, 701, 703, 705, 706, 708, 709, 710, 712, 713, 714, 715, 717, 718, 719, 721, 722, 723, 724, 726, 727, 728, 730, 731, 734, 735, 736, 737, 739, 740, 741, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 766, 768, 770, 771, 773, 774, 775, 776, 777, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 822, 823, 825, 827, 828, 832, 833, 835, 836, 839, 840, 842, 843, 846, 847, 849, 850, 854, 855, 857, 858, 862, 863, 865, 867, 868, 869, 871, 872, 873, 874, 879, 880, 886, 888, 889, 890, 891, 895, 896, 897, 898, 906, 907, 914, 915, 916, 917, 919, 920, 921, 922, 923, 926, 927, 929, 930, 931, 934, 947, 949, 950, 951, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 968, 969, 970, 971, 972, 976, 977, 979, 980, 981, 984, 985, 987, 988, 991, 996, 997, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1023, 1024, 1026, 1028, 1029, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1051, 1052, 1053, 1057, 1058, 1059, 1063, 1064, 1065, 1069, 1070, 1071, 1075, 1080, 1082, 1083, 1084, 1085, 1087, 1092, 1093, 1094, 1095, 1097, 1102, 1103, 1104, 1105, 1107, 1112, 1113, 1114, 1115, 1118, 1126, 1128, 1131, 1132, 1135, 1136, 1139, 1144, 1145, 1146, 1147, 1156, 1157, 1159, 1162, 1163, 1165, 1166, 1168, 1173, 1175, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190], "return": [4, 5, 8, 15, 16, 20, 22, 23, 24, 25, 26, 29, 32, 33, 37, 38, 39, 43, 45, 46, 53, 54, 55, 56, 61, 63, 65, 66, 67, 71, 73, 74, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 94, 98, 99, 102, 103, 104, 105, 111, 112, 116, 117, 120, 121, 134, 215, 253, 373, 374, 375, 376, 377, 378, 382, 384, 385, 386, 388, 389, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 409, 411, 412, 413, 415, 416, 419, 420, 425, 427, 428, 442, 443, 450, 451, 458, 459, 468, 469, 470, 475, 476, 477, 480, 481, 482, 484, 485, 488, 489, 491, 493, 494, 495, 499, 500, 501, 502, 505, 506, 509, 510, 511, 514, 515, 516, 520, 522, 523, 526, 527, 528, 532, 533, 534, 538, 539, 542, 543, 544, 547, 548, 550, 551, 553, 554, 558, 559, 565, 566, 569, 571, 572, 575, 577, 578, 581, 583, 584, 586, 587, 589, 590, 592, 593, 595, 596, 598, 599, 602, 603, 606, 608, 609, 610, 613, 614, 615, 619, 620, 621, 622, 625, 627, 628, 629, 631, 632, 635, 639, 641, 642, 645, 646, 647, 651, 652, 657, 658, 663, 668, 669, 689, 690, 691, 695, 700, 705, 709, 710, 713, 714, 715, 718, 719, 722, 723, 724, 727, 728, 731, 732, 733, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 774, 775, 776, 780, 785, 792, 793, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 829, 830, 831, 832, 833, 837, 838, 839, 840, 844, 845, 846, 847, 851, 852, 853, 854, 855, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 876, 877, 878, 881, 882, 883, 884, 889, 890, 892, 893, 897, 898, 899, 900, 901, 903, 904, 908, 909, 911, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 953, 956, 957, 962, 963, 964, 965, 966, 969, 970, 971, 973, 974, 975, 980, 981, 982, 983, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1020, 1023, 1024, 1025, 1029, 1030, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049, 1052, 1053, 1054, 1055, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1067, 1070, 1071, 1072, 1073, 1076, 1079, 1080, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1149, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1173, 1175, 1180, 1181, 1184, 1185, 1186, 1187, 1188, 1189, 1190], "exampl": [134, 206, 253, 294, 296, 1042, 1080, 1205], "note": [134, 253, 1042, 1080], "see": [134, 253], "also": [134, 253], "yield": [759, 760, 761, 762, 763, 764], "rais": [1042, 1080], "api": 1191, "fox": [1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1207, 1214], "constant": 1192, "core": [1193, 1197], "input": 1195, "farm_layout": 1195, "state": [1195, 1209], "windio": 1195, "model": [1196, 1204, 1212], "farm_control": 1196, "farm_model": 1196, "partial_wak": 1196, "point_model": 1196, "rotor_model": 1196, "turbine_model": 1196, "turbine_typ": 1196, "vertical_profil": 1196, "wake_fram": 1196, "wake_model": [1196, 1204], "wake_superposit": 1196, "opt": [1197, 1198, 1199], "problem": [1197, 1198, 1199], "object": [1197, 1199], "constraint": [1197, 1199], "layout": [1198, 1199, 1209, 1211], "geom_layout": [1198, 1199], "output": 1200, "util": [1201, 1202], "abl": [1201, 1202], "geom2d": 1201, "runner": 1201, "two_circl": 1201, "neutral": 1202, "stabl": 1202, "unstabl": 1202, "shear": 1202, "variabl": 1203, "wind": [1204, 1209, 1213, 1216, 1219], "ti": 1204, "histori": 1206, "v0": 1206, "1": 1206, "0": 1206, "alpha": 1206, "2": 1206, "3": 1206, "4": 1206, "5": 1206, "6": 1206, "welcom": 1207, "licens": 1207, "content": 1207, "contribut": 1207, "acknowledg": 1207, "instal": 1208, "requir": 1208, "via": 1208, "pip": 1208, "virtual": 1208, "python": 1208, "environ": 1208, "standard": 1208, "user": 1208, "develop": 1208, "conda": 1208, "static": 1209, "data": [1209, 1213, 1218, 1219], "farm": 1209, "test_farm_67": 1209, "csv": 1209, "ambient": 1209, "wrf": 1209, "timeseri": [1209, 1218], "4464": 1209, "gz": 1209, "abl_states_6000": 1209, "timeseries_3000": 1209, "timeseries_8000": 1209, "wind_rose_bremen": 1209, "wind_rot": 1209, "nc": 1209, "power": [1209, 1215], "thrust": 1209, "curv": 1209, "dtu": 1209, "10mw": 1209, "d178d3": 1209, "h119": 1209, "iea": 1209, "15mw": 1209, "d240": 1209, "h150": 1209, "iwt": 1209, "7d5mw": 1209, "d164": 1209, "h100": 1209, "nrel": 1209, "5mw": 1209, "d126": 1209, "h90": 1209, "file": 1209, "path": 1209, "heterogen": 1210, "flow": 1210, "optim": 1211, "The": 1212, "book": 1212, "multi": 1213, "height": 1213, "overview": 1214, "how": 1214, "setup": 1214, "mask": 1215, "sector": 1216, "manag": 1216, "singl": 1217, "row": 1217, "turbin": 1217, "rose": 1219, "yaw": 1220, "rotor": 1220, "wake": 1220}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Attributes": [[0, "attributes"], [12, "attributes"], [17, "attributes"], [27, "attributes"], [35, "attributes"], [40, "attributes"], [48, "attributes"], [57, "attributes"], [68, "attributes"], [75, "attributes"], [89, "attributes"], [95, "attributes"], [113, "attributes"], [371, "attributes"], [379, "attributes"], [399, "attributes"], [406, "attributes"], [422, "attributes"], [429, "attributes"], [432, "attributes"], [437, "attributes"], [444, "attributes"], [452, "attributes"], [463, "attributes"], [478, "attributes"], [486, "attributes"], [496, "attributes"], [503, "attributes"], [507, "attributes"], [512, "attributes"], [518, "attributes"], [524, "attributes"], [529, "attributes"], [536, "attributes"], [540, "attributes"], [545, "attributes"], [555, "attributes"], [567, "attributes"], [573, "attributes"], [579, "attributes"], [600, "attributes"], [604, "attributes"], [611, "attributes"], [616, "attributes"], [623, "attributes"], [633, "attributes"], [648, "attributes"], [654, "attributes"], [660, "attributes"], [665, "attributes"], [671, "attributes"], [692, "attributes"], [697, "attributes"], [702, "attributes"], [707, "attributes"], [711, "attributes"], [716, "attributes"], [720, "attributes"], [725, "attributes"], [729, "attributes"], [738, "attributes"], [757, "attributes"], [769, "attributes"], [772, "attributes"], [778, "attributes"], [783, "attributes"], [786, "attributes"], [794, "attributes"], [826, "attributes"], [834, "attributes"], [841, "attributes"], [848, "attributes"], [864, "attributes"], [887, "attributes"], [912, "attributes"], [960, "attributes"], [967, "attributes"], [978, "attributes"], [1026, "attributes"], [1081, "attributes"], [1091, "attributes"], [1101, "attributes"], [1111, "attributes"], [1134, "attributes"], [1150, "attributes"], [1167, "attributes"]], "Public members": [[0, "public-members"], [12, "public-members"], [14, "public-members"], [17, "public-members"], [27, "public-members"], [35, "public-members"], [40, "public-members"], [47, "public-members"], [48, "public-members"], [57, "public-members"], [64, "public-members"], [68, "public-members"], [75, "public-members"], [84, "public-members"], [89, "public-members"], [93, "public-members"], [95, "public-members"], [97, "public-members"], [101, "public-members"], [106, "public-members"], [110, "public-members"], [113, "public-members"], [118, "public-members"], [123, "public-members"], [248, "public-members"], [371, "public-members"], [379, "public-members"], [390, "public-members"], [392, "public-members"], [399, "public-members"], [406, "public-members"], [417, "public-members"], [421, "public-members"], [422, "public-members"], [429, "public-members"], [432, "public-members"], [437, "public-members"], [444, "public-members"], [452, "public-members"], [460, "public-members"], [463, "public-members"], [471, "public-members"], [478, "public-members"], [483, "public-members"], [486, "public-members"], [490, "public-members"], [496, "public-members"], [503, "public-members"], [507, "public-members"], [512, "public-members"], [518, "public-members"], [524, "public-members"], [529, "public-members"], [536, "public-members"], [540, "public-members"], [545, "public-members"], [549, "public-members"], [552, "public-members"], [555, "public-members"], [560, "public-members"], [562, "public-members"], [564, "public-members"], [567, "public-members"], [573, "public-members"], [579, "public-members"], [585, "public-members"], [588, "public-members"], [591, "public-members"], [594, "public-members"], [597, "public-members"], [600, "public-members"], [604, "public-members"], [611, "public-members"], [616, "public-members"], [623, "public-members"], [630, "public-members"], [633, "public-members"], [640, "public-members"], [643, "public-members"], [648, "public-members"], [654, "public-members"], [660, "public-members"], [665, "public-members"], [671, "public-members"], [692, "public-members"], [697, "public-members"], [702, "public-members"], [707, "public-members"], [711, "public-members"], [716, "public-members"], [720, "public-members"], [725, "public-members"], [729, "public-members"], [738, "public-members"], [757, "public-members"], [765, "public-members"], [769, "public-members"], [772, "public-members"], [778, "public-members"], [781, "public-members"], [783, "public-members"], [786, "public-members"], [794, "public-members"], [817, "public-members"], [824, "public-members"], [826, "public-members"], [834, "public-members"], [841, "public-members"], [848, "public-members"], [856, "public-members"], [864, "public-members"], [885, "public-members"], [887, "public-members"], [894, "public-members"], [905, "public-members"], [912, "public-members"], [954, "public-members"], [960, "public-members"], [967, "public-members"], [976, "public-members"], [978, "public-members"], [984, "public-members"], [986, "public-members"], [1000, "public-members"], [1005, "public-members"], [1010, "public-members"], [1015, "public-members"], [1021, "public-members"], [1026, "public-members"], [1031, "public-members"], [1037, "public-members"], [1043, "public-members"], [1050, "public-members"], [1056, "public-members"], [1062, "public-members"], [1068, "public-members"], [1074, "public-members"], [1077, "public-members"], [1081, "public-members"], [1091, "public-members"], [1101, "public-members"], [1111, "public-members"], [1125, "public-members"], [1134, "public-members"], [1150, "public-members"], [1167, "public-members"], [1174, "public-members"], [1176, "public-members"]], "Parameters": [[1, "parameters"], [2, "parameters"], [3, "parameters"], [4, "parameters"], [7, "parameters"], [8, "parameters"], [10, "parameters"], [13, "parameters"], [15, "parameters"], [16, "parameters"], [18, "parameters"], [19, "parameters"], [20, "parameters"], [21, "parameters"], [23, "parameters"], [24, "parameters"], [26, "parameters"], [28, "parameters"], [29, "parameters"], [30, "parameters"], [31, "parameters"], [32, "parameters"], [33, "parameters"], [34, "parameters"], [36, "parameters"], [37, "parameters"], [38, "parameters"], [39, "parameters"], [41, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [45, "parameters"], [46, "parameters"], [51, "parameters"], [52, "parameters"], [53, "parameters"], [56, "parameters"], [58, "parameters"], [59, "parameters"], [60, "parameters"], [61, "parameters"], [62, "parameters"], [63, "parameters"], [65, "parameters"], [67, "parameters"], [69, "parameters"], [70, "parameters"], [71, "parameters"], [72, "parameters"], [73, "parameters"], [74, "parameters"], [76, "parameters"], [77, "parameters"], [79, "parameters"], [80, "parameters"], [82, "parameters"], [86, "parameters"], [88, "parameters"], [90, "parameters"], [91, "parameters"], [92, "parameters"], [94, "parameters"], [96, "parameters"], [98, "parameters"], [100, "parameters"], [102, "parameters"], [103, "parameters"], [104, "parameters"], [105, "parameters"], [107, "parameters"], [108, "parameters"], [109, "parameters"], [111, "parameters"], [112, "parameters"], [114, "parameters"], [115, "parameters"], [119, "parameters"], [120, "parameters"], [121, "parameters"], [215, "parameters"], [365, "parameters"], [366, "parameters"], [367, "parameters"], [368, "parameters"], [369, "parameters"], [370, "parameters"], [372, "parameters"], [373, "parameters"], [375, "parameters"], [376, "parameters"], [378, "parameters"], [381, "parameters"], [382, "parameters"], [383, "parameters"], [385, "parameters"], [386, "parameters"], [387, "parameters"], [389, "parameters"], [392, "parameters"], [393, "parameters"], [394, "parameters"], [395, "parameters"], [396, "parameters"], [398, "parameters"], [400, "parameters"], [401, "parameters"], [402, "parameters"], [403, "parameters"], [405, "parameters"], [408, "parameters"], [409, "parameters"], [410, "parameters"], [412, "parameters"], [413, "parameters"], [414, "parameters"], [416, "parameters"], [420, "parameters"], [423, "parameters"], [425, "parameters"], [426, "parameters"], [427, "parameters"], [428, "parameters"], [431, "parameters"], [434, "parameters"], [435, "parameters"], [436, "parameters"], [438, "parameters"], [439, "parameters"], [440, "parameters"], [441, "parameters"], [442, "parameters"], [443, "parameters"], [445, "parameters"], [447, "parameters"], [448, "parameters"], [449, "parameters"], [450, "parameters"], [451, "parameters"], [453, "parameters"], [455, "parameters"], [456, "parameters"], [457, "parameters"], [458, "parameters"], [459, "parameters"], [461, "parameters"], [462, "parameters"], [464, "parameters"], [465, "parameters"], [466, "parameters"], [467, "parameters"], [468, "parameters"], [469, "parameters"], [470, "parameters"], [472, "parameters"], [473, "parameters"], [474, "parameters"], [475, "parameters"], [476, "parameters"], [477, "parameters"], [479, "parameters"], [480, "parameters"], [481, "parameters"], [482, "parameters"], [484, "parameters"], [485, "parameters"], [487, "parameters"], [488, "parameters"], [489, "parameters"], [492, "parameters"], [493, "parameters"], [497, "parameters"], [500, "parameters"], [504, "parameters"], [505, "parameters"], [506, "parameters"], [508, "parameters"], [509, "parameters"], [510, "parameters"], [511, "parameters"], [513, "parameters"], [514, "parameters"], [515, "parameters"], [516, "parameters"], [519, "parameters"], [520, "parameters"], [521, "parameters"], [522, "parameters"], [523, "parameters"], [525, "parameters"], [526, "parameters"], [527, "parameters"], [528, "parameters"], [530, "parameters"], [531, "parameters"], [532, "parameters"], [533, "parameters"], [534, "parameters"], [537, "parameters"], [538, "parameters"], [539, "parameters"], [541, "parameters"], [542, "parameters"], [543, "parameters"], [544, "parameters"], [546, "parameters"], [547, "parameters"], [548, "parameters"], [550, "parameters"], [551, "parameters"], [553, "parameters"], [554, "parameters"], [556, "parameters"], [558, "parameters"], [559, "parameters"], [561, "parameters"], [563, "parameters"], [565, "parameters"], [566, "parameters"], [568, "parameters"], [569, "parameters"], [570, "parameters"], [571, "parameters"], [572, "parameters"], [574, "parameters"], [575, "parameters"], [576, "parameters"], [577, "parameters"], [578, "parameters"], [580, "parameters"], [581, "parameters"], [582, "parameters"], [583, "parameters"], [584, "parameters"], [586, "parameters"], [589, "parameters"], [592, "parameters"], [595, "parameters"], [598, "parameters"], [601, "parameters"], [602, "parameters"], [605, "parameters"], [606, "parameters"], [607, "parameters"], [608, "parameters"], [609, "parameters"], [610, "parameters"], [612, "parameters"], [613, "parameters"], [614, "parameters"], [615, "parameters"], [617, "parameters"], [619, "parameters"], [620, "parameters"], [621, "parameters"], [622, "parameters"], [624, "parameters"], [625, "parameters"], [626, "parameters"], [627, "parameters"], [628, "parameters"], [629, "parameters"], [631, "parameters"], [632, "parameters"], [634, "parameters"], [635, "parameters"], [636, "parameters"], [637, "parameters"], [638, "parameters"], [639, "parameters"], [641, "parameters"], [642, "parameters"], [644, "parameters"], [645, "parameters"], [646, "parameters"], [647, "parameters"], [649, "parameters"], [651, "parameters"], [652, "parameters"], [653, "parameters"], [655, "parameters"], [657, "parameters"], [658, "parameters"], [659, "parameters"], [661, "parameters"], [663, "parameters"], [664, "parameters"], [666, "parameters"], [668, "parameters"], [669, "parameters"], [670, "parameters"], [686, "parameters"], [687, "parameters"], [689, "parameters"], [690, "parameters"], [693, "parameters"], [695, "parameters"], [696, "parameters"], [698, "parameters"], [700, "parameters"], [701, "parameters"], [703, "parameters"], [705, "parameters"], [706, "parameters"], [708, "parameters"], [709, "parameters"], [710, "parameters"], [712, "parameters"], [713, "parameters"], [714, "parameters"], [715, "parameters"], [717, "parameters"], [718, "parameters"], [719, "parameters"], [721, "parameters"], [722, "parameters"], [723, "parameters"], [724, "parameters"], [726, "parameters"], [727, "parameters"], [728, "parameters"], [730, "parameters"], [731, "parameters"], [734, "parameters"], [735, "parameters"], [736, "parameters"], [737, "parameters"], [739, "parameters"], [740, "parameters"], [741, "parameters"], [743, "parameters"], [744, "parameters"], [745, "parameters"], [746, "parameters"], [747, "parameters"], [749, "parameters"], [750, "parameters"], [751, "parameters"], [752, "parameters"], [753, "parameters"], [754, "parameters"], [755, "parameters"], [756, "parameters"], [758, "parameters"], [759, "parameters"], [760, "parameters"], [761, "parameters"], [762, "parameters"], [763, "parameters"], [764, "parameters"], [766, "parameters"], [768, "parameters"], [770, "parameters"], [771, "parameters"], [773, "parameters"], [774, "parameters"], [775, "parameters"], [776, "parameters"], [777, "parameters"], [779, "parameters"], [780, "parameters"], [781, "parameters"], [782, "parameters"], [784, "parameters"], [785, "parameters"], [786, "parameters"], [787, "parameters"], [788, "parameters"], [789, "parameters"], [790, "parameters"], [791, "parameters"], [792, "parameters"], [793, "parameters"], [799, "parameters"], [800, "parameters"], [801, "parameters"], [802, "parameters"], [803, "parameters"], [804, "parameters"], [805, "parameters"], [806, "parameters"], [807, "parameters"], [808, "parameters"], [809, "parameters"], [810, "parameters"], [811, "parameters"], [812, "parameters"], [813, "parameters"], [814, "parameters"], [815, "parameters"], [816, "parameters"], [818, "parameters"], [822, "parameters"], [823, "parameters"], [825, "parameters"], [827, "parameters"], [828, "parameters"], [832, "parameters"], [833, "parameters"], [835, "parameters"], [836, "parameters"], [839, "parameters"], [840, "parameters"], [842, "parameters"], [843, "parameters"], [846, "parameters"], [847, "parameters"], [849, "parameters"], [850, "parameters"], [854, "parameters"], [855, "parameters"], [857, "parameters"], [858, "parameters"], [862, "parameters"], [863, "parameters"], [865, "parameters"], [867, "parameters"], [868, "parameters"], [869, "parameters"], [871, "parameters"], [872, "parameters"], [873, "parameters"], [874, "parameters"], [879, "parameters"], [880, "parameters"], [886, "parameters"], [888, "parameters"], [889, "parameters"], [890, "parameters"], [891, "parameters"], [895, "parameters"], [896, "parameters"], [897, "parameters"], [898, "parameters"], [906, "parameters"], [907, "parameters"], [914, "parameters"], [915, "parameters"], [916, "parameters"], [917, "parameters"], [919, "parameters"], [920, "parameters"], [921, "parameters"], [922, "parameters"], [923, "parameters"], [926, "parameters"], [927, "parameters"], [929, "parameters"], [930, "parameters"], [931, "parameters"], [934, "parameters"], [947, "parameters"], [949, "parameters"], [950, "parameters"], [951, "parameters"], [955, "parameters"], [956, "parameters"], [957, "parameters"], [958, "parameters"], [959, "parameters"], [961, "parameters"], [962, "parameters"], [963, "parameters"], [964, "parameters"], [966, "parameters"], [968, "parameters"], [969, "parameters"], [970, "parameters"], [971, "parameters"], [972, "parameters"], [976, "parameters"], [977, "parameters"], [979, "parameters"], [980, "parameters"], [981, "parameters"], [984, "parameters"], [985, "parameters"], [987, "parameters"], [988, "parameters"], [991, "parameters"], [996, "parameters"], [997, "parameters"], [1001, "parameters"], [1002, "parameters"], [1003, "parameters"], [1006, "parameters"], [1007, "parameters"], [1008, "parameters"], [1011, "parameters"], [1012, "parameters"], [1013, "parameters"], [1016, "parameters"], [1017, "parameters"], [1018, "parameters"], [1019, "parameters"], [1023, "parameters"], [1024, "parameters"], [1026, "parameters"], [1028, "parameters"], [1029, "parameters"], [1032, "parameters"], [1033, "parameters"], [1034, "parameters"], [1035, "parameters"], [1038, "parameters"], [1039, "parameters"], [1040, "parameters"], [1042, "parameters"], [1044, "parameters"], [1045, "parameters"], [1046, "parameters"], [1047, "parameters"], [1051, "parameters"], [1052, "parameters"], [1053, "parameters"], [1057, "parameters"], [1058, "parameters"], [1059, "parameters"], [1063, "parameters"], [1064, "parameters"], [1065, "parameters"], [1069, "parameters"], [1070, "parameters"], [1071, "parameters"], [1075, "parameters"], [1080, "parameters"], [1082, "parameters"], [1083, "parameters"], [1084, "parameters"], [1085, "parameters"], [1087, "parameters"], [1092, "parameters"], [1093, "parameters"], [1094, "parameters"], [1095, "parameters"], [1097, "parameters"], [1102, "parameters"], [1103, "parameters"], [1104, "parameters"], [1105, "parameters"], [1107, "parameters"], [1112, "parameters"], [1113, "parameters"], [1114, "parameters"], [1115, "parameters"], [1118, "parameters"], [1126, "parameters"], [1128, "parameters"], [1131, "parameters"], [1132, "parameters"], [1135, "parameters"], [1136, "parameters"], [1139, "parameters"], [1144, "parameters"], [1145, "parameters"], [1146, "parameters"], [1147, "parameters"], [1156, "parameters"], [1157, "parameters"], [1159, "parameters"], [1162, "parameters"], [1163, "parameters"], [1165, "parameters"], [1166, "parameters"], [1168, "parameters"], [1173, "parameters"], [1175, "parameters"], [1181, "parameters"], [1183, "parameters"], [1184, "parameters"], [1185, "parameters"], [1186, "parameters"], [1187, "parameters"], [1188, "parameters"], [1189, "parameters"], [1190, "parameters"]], "Returns": [[4, "returns"], [5, "returns"], [8, "returns"], [15, "returns"], [16, "returns"], [20, "returns"], [22, "returns"], [23, "returns"], [24, "returns"], [25, "returns"], [26, "returns"], [29, "returns"], [32, "returns"], [33, "returns"], [37, "returns"], [38, "returns"], [39, "returns"], [43, "returns"], [45, "returns"], [46, "returns"], [53, "returns"], [54, "returns"], [55, "returns"], [56, "returns"], [61, "returns"], [63, "returns"], [65, "returns"], [66, "returns"], [67, "returns"], [71, "returns"], [73, "returns"], [74, "returns"], [77, "returns"], [78, "returns"], [80, "returns"], [81, "returns"], [82, "returns"], [83, "returns"], [85, "returns"], [86, "returns"], [87, "returns"], [88, "returns"], [94, "returns"], [98, "returns"], [99, "returns"], [102, "returns"], [103, "returns"], [104, "returns"], [105, "returns"], [111, "returns"], [112, "returns"], [116, "returns"], [117, "returns"], [120, "returns"], [121, "returns"], [134, "returns"], [215, "returns"], [253, "returns"], [373, "returns"], [374, "returns"], [375, "returns"], [376, "returns"], [377, "returns"], [378, "returns"], [382, "returns"], [384, "returns"], [385, "returns"], [386, "returns"], [388, "returns"], [389, "returns"], [394, "returns"], [395, "returns"], [396, "returns"], [397, "returns"], [398, "returns"], [401, "returns"], [402, "returns"], [403, "returns"], [404, "returns"], [405, "returns"], [409, "returns"], [411, "returns"], [412, "returns"], [413, "returns"], [415, "returns"], [416, "returns"], [419, "returns"], [420, "returns"], [425, "returns"], [427, "returns"], [428, "returns"], [442, "returns"], [443, "returns"], [450, "returns"], [451, "returns"], [458, "returns"], [459, "returns"], [468, "returns"], [469, "returns"], [470, "returns"], [475, "returns"], [476, "returns"], [477, "returns"], [480, "returns"], [481, "returns"], [482, "returns"], [484, "returns"], [485, "returns"], [488, "returns"], [489, "returns"], [491, "returns"], [493, "returns"], [494, "returns"], [495, "returns"], [499, "returns"], [500, "returns"], [501, "returns"], [502, "returns"], [505, "returns"], [506, "returns"], [509, "returns"], [510, "returns"], [511, "returns"], [514, "returns"], [515, "returns"], [516, "returns"], [520, "returns"], [522, "returns"], [523, "returns"], [526, "returns"], [527, "returns"], [528, "returns"], [532, "returns"], [533, "returns"], [534, "returns"], [538, "returns"], [539, "returns"], [542, "returns"], [543, "returns"], [544, "returns"], [547, "returns"], [548, "returns"], [550, "returns"], [551, "returns"], [553, "returns"], [554, "returns"], [558, "returns"], [559, "returns"], [565, "returns"], [566, "returns"], [569, "returns"], [571, "returns"], [572, "returns"], [575, "returns"], [577, "returns"], [578, "returns"], [581, "returns"], [583, "returns"], [584, "returns"], [586, "returns"], [587, "returns"], [589, "returns"], [590, "returns"], [592, "returns"], [593, "returns"], [595, "returns"], [596, "returns"], [598, "returns"], [599, "returns"], [602, "returns"], [603, "returns"], [606, "returns"], [608, "returns"], [609, "returns"], [610, "returns"], [613, "returns"], [614, "returns"], [615, "returns"], [619, "returns"], [620, "returns"], [621, "returns"], [622, "returns"], [625, "returns"], [627, "returns"], [628, "returns"], [629, "returns"], [631, "returns"], [632, "returns"], [635, "returns"], [639, "returns"], [641, "returns"], [642, "returns"], [645, "returns"], [646, "returns"], [647, "returns"], [651, "returns"], [652, "returns"], [657, "returns"], [658, "returns"], [663, "returns"], [668, "returns"], [669, "returns"], [689, "returns"], [690, "returns"], [691, "returns"], [695, "returns"], [700, "returns"], [705, "returns"], [709, "returns"], [710, "returns"], [713, "returns"], [714, "returns"], [715, "returns"], [718, "returns"], [719, "returns"], [722, "returns"], [723, "returns"], [724, "returns"], [727, "returns"], [728, "returns"], [731, "returns"], [732, "returns"], [733, "returns"], [742, "returns"], [743, "returns"], [744, "returns"], [745, "returns"], [746, "returns"], [747, "returns"], [749, "returns"], [750, "returns"], [751, "returns"], [752, "returns"], [753, "returns"], [754, "returns"], [755, "returns"], [756, "returns"], [774, "returns"], [775, "returns"], [776, "returns"], [780, "returns"], [785, "returns"], [792, "returns"], [793, "returns"], [799, "returns"], [801, "returns"], [802, "returns"], [803, "returns"], [804, "returns"], [805, "returns"], [806, "returns"], [807, "returns"], [808, "returns"], [809, "returns"], [810, "returns"], [811, "returns"], [812, "returns"], [813, "returns"], [814, "returns"], [815, "returns"], [816, "returns"], [819, "returns"], [820, "returns"], [821, "returns"], [822, "returns"], [823, "returns"], [829, "returns"], [830, "returns"], [831, "returns"], [832, "returns"], [833, "returns"], [837, "returns"], [838, "returns"], [839, "returns"], [840, "returns"], [844, "returns"], [845, "returns"], [846, "returns"], [847, "returns"], [851, "returns"], [852, "returns"], [853, "returns"], [854, "returns"], [855, "returns"], [859, "returns"], [860, "returns"], [861, "returns"], [862, "returns"], [863, "returns"], [866, "returns"], [867, "returns"], [868, "returns"], [869, "returns"], [870, "returns"], [872, "returns"], [873, "returns"], [875, "returns"], [876, "returns"], [877, "returns"], [878, "returns"], [881, "returns"], [882, "returns"], [883, "returns"], [884, "returns"], [889, "returns"], [890, "returns"], [892, "returns"], [893, "returns"], [897, "returns"], [898, "returns"], [899, "returns"], [900, "returns"], [901, "returns"], [903, "returns"], [904, "returns"], [908, "returns"], [909, "returns"], [911, "returns"], [918, "returns"], [919, "returns"], [920, "returns"], [921, "returns"], [922, "returns"], [923, "returns"], [924, "returns"], [925, "returns"], [926, "returns"], [927, "returns"], [928, "returns"], [929, "returns"], [930, "returns"], [931, "returns"], [932, "returns"], [933, "returns"], [935, "returns"], [936, "returns"], [937, "returns"], [938, "returns"], [939, "returns"], [940, "returns"], [941, "returns"], [942, "returns"], [943, "returns"], [944, "returns"], [945, "returns"], [946, "returns"], [947, "returns"], [948, "returns"], [949, "returns"], [952, "returns"], [953, "returns"], [956, "returns"], [957, "returns"], [962, "returns"], [963, "returns"], [964, "returns"], [965, "returns"], [966, "returns"], [969, "returns"], [970, "returns"], [971, "returns"], [973, "returns"], [974, "returns"], [975, "returns"], [980, "returns"], [981, "returns"], [982, "returns"], [983, "returns"], [989, "returns"], [990, "returns"], [992, "returns"], [993, "returns"], [994, "returns"], [995, "returns"], [996, "returns"], [997, "returns"], [998, "returns"], [999, "returns"], [1002, "returns"], [1003, "returns"], [1004, "returns"], [1007, "returns"], [1008, "returns"], [1009, "returns"], [1012, "returns"], [1013, "returns"], [1014, "returns"], [1017, "returns"], [1018, "returns"], [1020, "returns"], [1023, "returns"], [1024, "returns"], [1025, "returns"], [1029, "returns"], [1030, "returns"], [1033, "returns"], [1034, "returns"], [1036, "returns"], [1039, "returns"], [1040, "returns"], [1041, "returns"], [1042, "returns"], [1045, "returns"], [1046, "returns"], [1048, "returns"], [1049, "returns"], [1052, "returns"], [1053, "returns"], [1054, "returns"], [1055, "returns"], [1058, "returns"], [1059, "returns"], [1060, "returns"], [1061, "returns"], [1064, "returns"], [1065, "returns"], [1066, "returns"], [1067, "returns"], [1070, "returns"], [1071, "returns"], [1072, "returns"], [1073, "returns"], [1076, "returns"], [1079, "returns"], [1080, "returns"], [1083, "returns"], [1084, "returns"], [1085, "returns"], [1086, "returns"], [1088, "returns"], [1089, "returns"], [1090, "returns"], [1093, "returns"], [1094, "returns"], [1095, "returns"], [1096, "returns"], [1098, "returns"], [1099, "returns"], [1100, "returns"], [1103, "returns"], [1104, "returns"], [1105, "returns"], [1106, "returns"], [1108, "returns"], [1109, "returns"], [1110, "returns"], [1113, "returns"], [1114, "returns"], [1115, "returns"], [1116, "returns"], [1117, "returns"], [1119, "returns"], [1120, "returns"], [1121, "returns"], [1122, "returns"], [1123, "returns"], [1124, "returns"], [1126, "returns"], [1127, "returns"], [1129, "returns"], [1130, "returns"], [1131, "returns"], [1132, "returns"], [1133, "returns"], [1136, "returns"], [1137, "returns"], [1138, "returns"], [1140, "returns"], [1141, "returns"], [1142, "returns"], [1143, "returns"], [1144, "returns"], [1145, "returns"], [1148, "returns"], [1149, "returns"], [1157, "returns"], [1158, "returns"], [1160, "returns"], [1161, "returns"], [1162, "returns"], [1163, "returns"], [1164, "returns"], [1165, "returns"], [1166, "returns"], [1173, "returns"], [1175, "returns"], [1180, "returns"], [1181, "returns"], [1184, "returns"], [1185, "returns"], [1186, "returns"], [1187, "returns"], [1188, "returns"], [1189, "returns"], [1190, "returns"]], "Examples": [[134, "examples"], [206, "examples"], [253, "examples"], [294, "examples"], [296, "examples"], [1042, "examples"], [1080, "examples"], [1205, "examples"]], "Notes": [[134, "notes"], [253, "notes"], [1042, "notes"], [1080, "notes"]], "See Also": [[134, "see-also"], [253, "see-also"]], "Yields": [[759, "yields"], [760, "yields"], [761, "yields"], [762, "yields"], [763, "yields"], [764, "yields"]], "Raises": [[1042, "raises"], [1080, "raises"]], "API": [[1191, "api"]], "foxes.constants": [[1192, "foxes-constants"]], "foxes.core": [[1193, "foxes-core"]], "foxes": [[1194, "foxes"]], "foxes.input": [[1195, "foxes-input"]], "foxes.input.farm_layout": [[1195, "foxes-input-farm-layout"]], "foxes.input.states": [[1195, "foxes-input-states"]], "foxes.input.windio": [[1195, "foxes-input-windio"]], "foxes.models": [[1196, "foxes-models"]], "foxes.models.farm_controllers": [[1196, "foxes-models-farm-controllers"]], "foxes.models.farm_models": [[1196, "foxes-models-farm-models"]], "foxes.models.partial_wakes": [[1196, "foxes-models-partial-wakes"]], "foxes.models.point_models": [[1196, "foxes-models-point-models"]], "foxes.models.rotor_models": [[1196, "foxes-models-rotor-models"]], "foxes.models.turbine_models": [[1196, "foxes-models-turbine-models"]], "foxes.models.turbine_types": [[1196, "foxes-models-turbine-types"]], "foxes.models.vertical_profiles": [[1196, "foxes-models-vertical-profiles"]], "foxes.models.wake_frames": [[1196, "foxes-models-wake-frames"]], "foxes.models.wake_models": [[1196, "foxes-models-wake-models"], [1204, "foxes-models-wake-models"]], "foxes.models.wake_superpositions": [[1196, "foxes-models-wake-superpositions"]], "foxes.opt": [[1197, "foxes-opt"]], "foxes.opt.core": [[1197, "foxes-opt-core"]], "foxes.opt.problems": [[1197, "foxes-opt-problems"], [1198, "foxes-opt-problems"]], "foxes.opt.objectives": [[1197, "foxes-opt-objectives"]], "foxes.opt.constraints": [[1197, "foxes-opt-constraints"]], "foxes.opt.problems.layout": [[1198, "foxes-opt-problems-layout"]], "foxes.opt.problems.layout.geom_layouts": [[1198, "foxes-opt-problems-layout-geom-layouts"], [1199, "foxes-opt-problems-layout-geom-layouts"]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1199, "foxes-opt-problems-layout-geom-layouts-objectives"]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1199, "foxes-opt-problems-layout-geom-layouts-constraints"]], "foxes.output": [[1200, "foxes-output"]], "foxes.utils": [[1201, "foxes-utils"]], "foxes.utils.abl": [[1201, "foxes-utils-abl"]], "foxes.utils.geom2d": [[1201, "foxes-utils-geom2d"]], "foxes.utils.runners": [[1201, "foxes-utils-runners"]], "foxes.utils.two_circles": [[1201, "foxes-utils-two-circles"]], "foxes.utils.abl.neutral": [[1202, "foxes-utils-abl-neutral"]], "foxes.utils.abl.stable": [[1202, "foxes-utils-abl-stable"]], "foxes.utils.abl.unstable": [[1202, "foxes-utils-abl-unstable"]], "foxes.utils.abl.sheared": [[1202, "foxes-utils-abl-sheared"]], "foxes.variables": [[1203, "foxes-variables"]], "foxes.models.wake_models.wind": [[1204, "foxes-models-wake-models-wind"]], "foxes.models.wake_models.ti": [[1204, "foxes-models-wake-models-ti"]], "History": [[1206, "history"]], "v0.1.0-alpha": [[1206, "v0-1-0-alpha"]], "v0.1.1-alpha": [[1206, "v0-1-1-alpha"]], "v0.1.2-alpha": [[1206, "v0-1-2-alpha"]], "v0.1.3-alpha": [[1206, "v0-1-3-alpha"]], "v0.1.4-alpha": [[1206, "v0-1-4-alpha"]], "v0.2.0-alpha": [[1206, "v0-2-0-alpha"]], "v0.2.1-alpha": [[1206, "v0-2-1-alpha"]], "v0.2.2-alpha": [[1206, "v0-2-2-alpha"]], "v0.2.3-alpha": [[1206, "v0-2-3-alpha"]], "v0.2.4-alpha": [[1206, "v0-2-4-alpha"]], "v0.2.5-alpha": [[1206, "v0-2-5-alpha"]], "v0.2.6-alpha": [[1206, "v0-2-6-alpha"]], "v0.3.0-alpha": [[1206, "v0-3-0-alpha"]], "v0.3.1-alpha": [[1206, "v0-3-1-alpha"]], "v0.3.2-alpha": [[1206, "v0-3-2-alpha"]], "v0.3.3-alpha": [[1206, "v0-3-3-alpha"]], "v0.3.4-alpha": [[1206, "v0-3-4-alpha"]], "v0.3.5-alpha": [[1206, "v0-3-5-alpha"]], "v0.4.0": [[1206, "v0-4-0"]], "Welcome to FOXES": [[1207, "welcome-to-foxes"]], "License": [[1207, "license"]], "Contents": [[1207, "contents"]], "Contributing": [[1207, "contributing"]], "Acknowledgements": [[1207, "acknowledgements"]], "Installation": [[1208, "installation"]], "Requirements": [[1208, "requirements"]], "Installation via pip": [[1208, "installation-via-pip"]], "Virtual Python environment": [[1208, "virtual-python-environment"], [1208, "id1"]], "Standard users": [[1208, "standard-users"], [1208, "id2"]], "Developers": [[1208, "developers"], [1208, "id3"]], "Installation via conda": [[1208, "installation-via-conda"]], "Static data": [[1209, "Static-data"]], "Wind farm layout data": [[1209, "Wind-farm-layout-data"]], "test_farm_67.csv": [[1209, "test_farm_67.csv"]], "Ambient states data": [[1209, "Ambient-states-data"]], "WRF-Timeseries-4464.csv.gz": [[1209, "WRF-Timeseries-4464.csv.gz"]], "abl_states_6000.csv.gz": [[1209, "abl_states_6000.csv.gz"]], "timeseries_3000.csv.gz": [[1209, "timeseries_3000.csv.gz"]], "timeseries_8000.csv.gz": [[1209, "timeseries_8000.csv.gz"]], "wind_rose_bremen.csv": [[1209, "wind_rose_bremen.csv"]], "wind_rotation.nc": [[1209, "wind_rotation.nc"]], "Power and thrust curves": [[1209, "Power-and-thrust-curves"]], "DTU-10MW-D178d3-H119.csv": [[1209, "DTU-10MW-D178d3-H119.csv"]], "IEA-15MW-D240-H150.csv": [[1209, "IEA-15MW-D240-H150.csv"]], "IWT-7d5MW-D164-H100.csv": [[1209, "IWT-7d5MW-D164-H100.csv"]], "NREL-5MW-D126-H90.csv": [[1209, "NREL-5MW-D126-H90.csv"]], "File paths": [[1209, "File-paths"]], "Heterogeneous flow": [[1210, "Heterogeneous-flow"]], "Layout optimization": [[1211, "Layout-optimization"]], "The model book": [[1212, "The-model-book"]], "Multi-height wind data": [[1213, "Multi-height-wind-data"]], "Overview - how to setup foxes": [[1214, "Overview---how-to-setup-foxes"]], "Power mask": [[1215, "Power-mask"]], "Wind sector management": [[1216, "Wind-sector-management"]], "Single row of turbines": [[1217, "Single-row-of-turbines"]], "Timeseries data": [[1218, "Timeseries-data"]], "Wind rose data": [[1219, "Wind-rose-data"]], "Yawed rotor wakes": [[1220, "Yawed-rotor-wakes"]]}, "indexentries": {"pep 585": [[134, "index-0"], [253, "index-0"]], "python enhancement proposals": [[134, "index-0"], [253, "index-0"]]}, "docurls": ["_core/Algorithm.html", "_core/Algorithm.__init__.html", "_core/Algorithm.finalize.html", "_core/Algorithm.finalize_model.html", "_core/Algorithm.get_models_data.html", "_core/Algorithm.idata_mem.html", "_core/Algorithm.initialize.html", "_core/Algorithm.new.html", "_core/Algorithm.new_point_data.html", "_core/Algorithm.print.html", "_core/Algorithm.update_idata.html", "_core/Algorithm.update_n_turbines.html", "_core/Data.html", "_core/Data.__init__.html", "_core/DataCalcModel.html", "_core/DataCalcModel.calculate.html", "_core/DataCalcModel.run_calculation.html", "_core/ExtendedStates.html", "_core/ExtendedStates.__init__.html", "_core/ExtendedStates.append.html", "_core/ExtendedStates.calculate.html", "_core/ExtendedStates.finalize.html", "_core/ExtendedStates.index.html", "_core/ExtendedStates.initialize.html", "_core/ExtendedStates.output_point_vars.html", "_core/ExtendedStates.size.html", "_core/ExtendedStates.weights.html", "_core/FarmController.html", "_core/FarmController.__init__.html", "_core/FarmController.calculate.html", "_core/FarmController.collect_models.html", "_core/FarmController.finalize.html", "_core/FarmController.initialize.html", "_core/FarmController.output_farm_vars.html", "_core/FarmController.set_pars.html", "_core/FarmDataModel.html", "_core/FarmDataModel.__init__.html", "_core/FarmDataModel.calculate.html", "_core/FarmDataModel.output_farm_vars.html", "_core/FarmDataModel.run_calculation.html", "_core/FarmDataModelList.html", "_core/FarmDataModelList.__init__.html", "_core/FarmDataModelList.append.html", "_core/FarmDataModelList.calculate.html", "_core/FarmDataModelList.finalize.html", "_core/FarmDataModelList.initialize.html", "_core/FarmDataModelList.output_farm_vars.html", "_core/FarmModel.html", "_core/Model.html", "_core/Model.__init__.html", "_core/Model.__repr__.html", "_core/Model.finalize.html", "_core/Model.get_data.html", "_core/Model.initialize.html", "_core/Model.initialized.html", "_core/Model.model_id.html", "_core/Model.var.html", "_core/PartialWakesModel.html", "_core/PartialWakesModel.__init__.html", "_core/PartialWakesModel.contribute_to_wake_deltas.html", "_core/PartialWakesModel.evaluate_results.html", "_core/PartialWakesModel.initialize.html", "_core/PartialWakesModel.new.html", "_core/PartialWakesModel.new_wake_deltas.html", "_core/PointDataModel.html", "_core/PointDataModel.calculate.html", "_core/PointDataModel.output_point_vars.html", "_core/PointDataModel.run_calculation.html", "_core/PointDataModelList.html", "_core/PointDataModelList.__init__.html", "_core/PointDataModelList.append.html", "_core/PointDataModelList.calculate.html", "_core/PointDataModelList.finalize.html", "_core/PointDataModelList.initialize.html", "_core/PointDataModelList.output_point_vars.html", "_core/RotorModel.html", "_core/RotorModel.__init__.html", "_core/RotorModel.calculate.html", "_core/RotorModel.design_points.html", "_core/RotorModel.eval_rpoint_results.html", "_core/RotorModel.get_rotor_points.html", "_core/RotorModel.n_rotor_points.html", "_core/RotorModel.output_farm_vars.html", "_core/RotorModel.rotor_point_weights.html", "_core/States.html", "_core/States.index.html", "_core/States.output_point_vars.html", "_core/States.size.html", "_core/States.weights.html", "_core/Turbine.html", "_core/Turbine.__init__.html", "_core/Turbine.add_model.html", "_core/Turbine.insert_model.html", "_core/TurbineModel.html", "_core/TurbineModel.calculate.html", "_core/TurbineType.html", "_core/TurbineType.__init__.html", "_core/VerticalProfile.html", "_core/VerticalProfile.calculate.html", "_core/VerticalProfile.input_vars.html", "_core/VerticalProfile.new.html", "_core/WakeFrame.html", "_core/WakeFrame.calc_centreline_integral.html", "_core/WakeFrame.calc_order.html", "_core/WakeFrame.get_centreline_points.html", "_core/WakeFrame.get_wake_coos.html", "_core/WakeModel.html", "_core/WakeModel.contribute_to_wake_deltas.html", "_core/WakeModel.finalize_wake_deltas.html", "_core/WakeModel.init_wake_deltas.html", "_core/WakeSuperposition.html", "_core/WakeSuperposition.calc_final_wake_delta.html", "_core/WakeSuperposition.calc_wakes_plus_wake.html", "_core/WindFarm.html", "_core/WindFarm.__init__.html", "_core/WindFarm.add_turbine.html", "_core/WindFarm.n_turbines.html", "_core/WindFarm.turbine_names.html", "_data/StaticData.html", "_data/StaticData.__init__.html", "_data/parse_Pct_file_name.html", "_data/parse_Pct_two_files.html", "_foxes/constants/AMB_RPOINT_RESULTS.html", "_foxes/constants/DTYPE.html", "_foxes/constants/DTYPE.T.html", "_foxes/constants/DTYPE.__abs__.html", "_foxes/constants/DTYPE.__add__.html", "_foxes/constants/DTYPE.__and__.html", "_foxes/constants/DTYPE.__array__.html", "_foxes/constants/DTYPE.__array_interface__.html", "_foxes/constants/DTYPE.__array_priority__.html", "_foxes/constants/DTYPE.__array_struct__.html", "_foxes/constants/DTYPE.__array_wrap__.html", "_foxes/constants/DTYPE.__bool__.html", "_foxes/constants/DTYPE.__class_getitem__.html", "_foxes/constants/DTYPE.__divmod__.html", "_foxes/constants/DTYPE.__eq__.html", "_foxes/constants/DTYPE.__float__.html", "_foxes/constants/DTYPE.__floordiv__.html", "_foxes/constants/DTYPE.__format__.html", "_foxes/constants/DTYPE.__ge__.html", "_foxes/constants/DTYPE.__getitem__.html", "_foxes/constants/DTYPE.__gt__.html", "_foxes/constants/DTYPE.__hash__.html", "_foxes/constants/DTYPE.__int__.html", "_foxes/constants/DTYPE.__invert__.html", "_foxes/constants/DTYPE.__le__.html", "_foxes/constants/DTYPE.__lshift__.html", "_foxes/constants/DTYPE.__lt__.html", "_foxes/constants/DTYPE.__mod__.html", "_foxes/constants/DTYPE.__mul__.html", "_foxes/constants/DTYPE.__ne__.html", "_foxes/constants/DTYPE.__neg__.html", "_foxes/constants/DTYPE.__new__.html", "_foxes/constants/DTYPE.__or__.html", "_foxes/constants/DTYPE.__pos__.html", "_foxes/constants/DTYPE.__pow__.html", "_foxes/constants/DTYPE.__radd__.html", "_foxes/constants/DTYPE.__rand__.html", "_foxes/constants/DTYPE.__rdivmod__.html", "_foxes/constants/DTYPE.__reduce__.html", "_foxes/constants/DTYPE.__repr__.html", "_foxes/constants/DTYPE.__rfloordiv__.html", "_foxes/constants/DTYPE.__rlshift__.html", "_foxes/constants/DTYPE.__rmod__.html", "_foxes/constants/DTYPE.__rmul__.html", "_foxes/constants/DTYPE.__ror__.html", "_foxes/constants/DTYPE.__rpow__.html", "_foxes/constants/DTYPE.__rrshift__.html", "_foxes/constants/DTYPE.__rshift__.html", "_foxes/constants/DTYPE.__rsub__.html", "_foxes/constants/DTYPE.__rtruediv__.html", "_foxes/constants/DTYPE.__rxor__.html", "_foxes/constants/DTYPE.__sizeof__.html", "_foxes/constants/DTYPE.__str__.html", "_foxes/constants/DTYPE.__sub__.html", "_foxes/constants/DTYPE.__truediv__.html", "_foxes/constants/DTYPE.__xor__.html", "_foxes/constants/DTYPE.all.html", "_foxes/constants/DTYPE.any.html", "_foxes/constants/DTYPE.argmax.html", "_foxes/constants/DTYPE.argmin.html", "_foxes/constants/DTYPE.argsort.html", "_foxes/constants/DTYPE.as_integer_ratio.html", "_foxes/constants/DTYPE.astype.html", "_foxes/constants/DTYPE.base.html", "_foxes/constants/DTYPE.byteswap.html", "_foxes/constants/DTYPE.choose.html", "_foxes/constants/DTYPE.clip.html", "_foxes/constants/DTYPE.compress.html", "_foxes/constants/DTYPE.conj.html", "_foxes/constants/DTYPE.conjugate.html", "_foxes/constants/DTYPE.copy.html", "_foxes/constants/DTYPE.cumprod.html", "_foxes/constants/DTYPE.cumsum.html", "_foxes/constants/DTYPE.data.html", "_foxes/constants/DTYPE.diagonal.html", "_foxes/constants/DTYPE.dtype.html", "_foxes/constants/DTYPE.dump.html", "_foxes/constants/DTYPE.dumps.html", "_foxes/constants/DTYPE.fill.html", "_foxes/constants/DTYPE.flags.html", "_foxes/constants/DTYPE.flat.html", "_foxes/constants/DTYPE.flatten.html", "_foxes/constants/DTYPE.getfield.html", "_foxes/constants/DTYPE.imag.html", "_foxes/constants/DTYPE.is_integer.html", "_foxes/constants/DTYPE.item.html", "_foxes/constants/DTYPE.itemset.html", "_foxes/constants/DTYPE.itemsize.html", "_foxes/constants/DTYPE.max.html", "_foxes/constants/DTYPE.mean.html", "_foxes/constants/DTYPE.min.html", "_foxes/constants/DTYPE.nbytes.html", "_foxes/constants/DTYPE.ndim.html", "_foxes/constants/DTYPE.newbyteorder.html", "_foxes/constants/DTYPE.nonzero.html", "_foxes/constants/DTYPE.prod.html", "_foxes/constants/DTYPE.ptp.html", "_foxes/constants/DTYPE.put.html", "_foxes/constants/DTYPE.ravel.html", "_foxes/constants/DTYPE.real.html", "_foxes/constants/DTYPE.repeat.html", "_foxes/constants/DTYPE.reshape.html", "_foxes/constants/DTYPE.resize.html", "_foxes/constants/DTYPE.round.html", "_foxes/constants/DTYPE.searchsorted.html", "_foxes/constants/DTYPE.setfield.html", "_foxes/constants/DTYPE.setflags.html", "_foxes/constants/DTYPE.shape.html", "_foxes/constants/DTYPE.size.html", "_foxes/constants/DTYPE.sort.html", "_foxes/constants/DTYPE.squeeze.html", "_foxes/constants/DTYPE.std.html", "_foxes/constants/DTYPE.strides.html", "_foxes/constants/DTYPE.sum.html", "_foxes/constants/DTYPE.swapaxes.html", "_foxes/constants/DTYPE.take.html", "_foxes/constants/DTYPE.tobytes.html", "_foxes/constants/DTYPE.tofile.html", "_foxes/constants/DTYPE.tolist.html", "_foxes/constants/DTYPE.tostring.html", "_foxes/constants/DTYPE.trace.html", "_foxes/constants/DTYPE.transpose.html", "_foxes/constants/DTYPE.var.html", "_foxes/constants/DTYPE.view.html", "_foxes/constants/FARM.html", "_foxes/constants/GW.html", "_foxes/constants/ITYPE.html", "_foxes/constants/ITYPE.__abs__.html", "_foxes/constants/ITYPE.__add__.html", "_foxes/constants/ITYPE.__and__.html", "_foxes/constants/ITYPE.__bool__.html", "_foxes/constants/ITYPE.__class_getitem__.html", "_foxes/constants/ITYPE.__divmod__.html", "_foxes/constants/ITYPE.__eq__.html", "_foxes/constants/ITYPE.__float__.html", "_foxes/constants/ITYPE.__floordiv__.html", "_foxes/constants/ITYPE.__ge__.html", "_foxes/constants/ITYPE.__gt__.html", "_foxes/constants/ITYPE.__hash__.html", "_foxes/constants/ITYPE.__index__.html", "_foxes/constants/ITYPE.__int__.html", "_foxes/constants/ITYPE.__invert__.html", "_foxes/constants/ITYPE.__le__.html", "_foxes/constants/ITYPE.__lshift__.html", "_foxes/constants/ITYPE.__lt__.html", "_foxes/constants/ITYPE.__mod__.html", "_foxes/constants/ITYPE.__mul__.html", "_foxes/constants/ITYPE.__ne__.html", "_foxes/constants/ITYPE.__neg__.html", "_foxes/constants/ITYPE.__new__.html", "_foxes/constants/ITYPE.__or__.html", "_foxes/constants/ITYPE.__pos__.html", "_foxes/constants/ITYPE.__pow__.html", "_foxes/constants/ITYPE.__radd__.html", "_foxes/constants/ITYPE.__rand__.html", "_foxes/constants/ITYPE.__rdivmod__.html", "_foxes/constants/ITYPE.__repr__.html", "_foxes/constants/ITYPE.__rfloordiv__.html", "_foxes/constants/ITYPE.__rlshift__.html", "_foxes/constants/ITYPE.__rmod__.html", "_foxes/constants/ITYPE.__rmul__.html", "_foxes/constants/ITYPE.__ror__.html", "_foxes/constants/ITYPE.__rpow__.html", "_foxes/constants/ITYPE.__rrshift__.html", "_foxes/constants/ITYPE.__rshift__.html", "_foxes/constants/ITYPE.__rsub__.html", "_foxes/constants/ITYPE.__rtruediv__.html", "_foxes/constants/ITYPE.__rxor__.html", "_foxes/constants/ITYPE.__str__.html", "_foxes/constants/ITYPE.__sub__.html", "_foxes/constants/ITYPE.__truediv__.html", "_foxes/constants/ITYPE.__xor__.html", "_foxes/constants/ITYPE.bit_count.html", "_foxes/constants/ITYPE.denominator.html", "_foxes/constants/ITYPE.is_integer.html", "_foxes/constants/ITYPE.numerator.html", "_foxes/constants/KAPPA.html", "_foxes/constants/MW.html", "_foxes/constants/POINT.html", "_foxes/constants/POINTS.html", "_foxes/constants/POP.html", "_foxes/constants/P_UNITS.html", "_foxes/constants/RPOINT.html", "_foxes/constants/RPOINTS.html", "_foxes/constants/RWEIGHTS.html", "_foxes/constants/STATE.html", "_foxes/constants/TMODELS.html", "_foxes/constants/TMODEL_SELS.html", "_foxes/constants/TNAME.html", "_foxes/constants/TURBINE.html", "_foxes/constants/TW.html", "_foxes/constants/VALID.html", "_foxes/constants/VARS.html", "_foxes/constants/W.html", "_foxes/constants/kW.html", "_foxes/variables/AMB_CAP.html", "_foxes/variables/AMB_CT.html", "_foxes/variables/AMB_P.html", "_foxes/variables/AMB_REWS.html", "_foxes/variables/AMB_REWS2.html", "_foxes/variables/AMB_REWS3.html", "_foxes/variables/AMB_RHO.html", "_foxes/variables/AMB_T.html", "_foxes/variables/AMB_TI.html", "_foxes/variables/AMB_WD.html", "_foxes/variables/AMB_WS.html", "_foxes/variables/AMB_YAW.html", "_foxes/variables/AMB_YAWM.html", "_foxes/variables/AMB_YLD.html", "_foxes/variables/CAP.html", "_foxes/variables/CT.html", "_foxes/variables/D.html", "_foxes/variables/EFF.html", "_foxes/variables/H.html", "_foxes/variables/K.html", "_foxes/variables/KB.html", "_foxes/variables/KTI.html", "_foxes/variables/MAX_P.html", "_foxes/variables/MOL.html", "_foxes/variables/ORDER.html", "_foxes/variables/P.html", "_foxes/variables/PA_ALPHA.html", "_foxes/variables/PA_BETA.html", "_foxes/variables/REWS.html", "_foxes/variables/REWS2.html", "_foxes/variables/REWS3.html", "_foxes/variables/RHO.html", "_foxes/variables/SHEAR.html", "_foxes/variables/T.html", "_foxes/variables/TI.html", "_foxes/variables/TXYH.html", "_foxes/variables/WD.html", "_foxes/variables/WEIGHT.html", "_foxes/variables/WS.html", "_foxes/variables/X.html", "_foxes/variables/XYH.html", "_foxes/variables/Y.html", "_foxes/variables/YAW.html", "_foxes/variables/YAWM.html", "_foxes/variables/YLD.html", "_foxes/variables/Z0.html", "_foxes/variables/amb2var.html", "_foxes/variables/var2amb.html", "_input/farm_layout/add_from_csv.html", "_input/farm_layout/add_from_df.html", "_input/farm_layout/add_from_file.html", "_input/farm_layout/add_from_json.html", "_input/farm_layout/add_grid.html", "_input/farm_layout/add_row.html", "_input/states/FieldDataNC.html", "_input/states/FieldDataNC.__init__.html", "_input/states/FieldDataNC.calculate.html", "_input/states/FieldDataNC.index.html", "_input/states/FieldDataNC.initialize.html", "_input/states/FieldDataNC.output_point_vars.html", "_input/states/FieldDataNC.size.html", "_input/states/FieldDataNC.weights.html", "_input/states/MultiHeightStates.html", "_input/states/MultiHeightStates.RDICT.html", "_input/states/MultiHeightStates.__init__.html", "_input/states/MultiHeightStates.calculate.html", "_input/states/MultiHeightStates.finalize.html", "_input/states/MultiHeightStates.index.html", "_input/states/MultiHeightStates.initialize.html", "_input/states/MultiHeightStates.output_point_vars.html", "_input/states/MultiHeightStates.reset.html", "_input/states/MultiHeightStates.size.html", "_input/states/MultiHeightStates.weights.html", "_input/states/MultiHeightTimeseries.html", "_input/states/MultiHeightTimeseries.RDICT.html", "_input/states/ScanWS.html", "_input/states/ScanWS.__init__.html", "_input/states/ScanWS.calculate.html", "_input/states/ScanWS.initialize.html", "_input/states/ScanWS.output_point_vars.html", "_input/states/ScanWS.size.html", "_input/states/ScanWS.weights.html", "_input/states/SingleStateStates.html", "_input/states/SingleStateStates.__init__.html", "_input/states/SingleStateStates.calculate.html", "_input/states/SingleStateStates.initialize.html", "_input/states/SingleStateStates.output_point_vars.html", "_input/states/SingleStateStates.size.html", "_input/states/SingleStateStates.weights.html", "_input/states/StatesTable.html", "_input/states/StatesTable.RDICT.html", "_input/states/StatesTable.__init__.html", "_input/states/StatesTable.calculate.html", "_input/states/StatesTable.finalize.html", "_input/states/StatesTable.index.html", "_input/states/StatesTable.initialize.html", "_input/states/StatesTable.output_point_vars.html", "_input/states/StatesTable.reset.html", "_input/states/StatesTable.size.html", "_input/states/StatesTable.weights.html", "_input/states/Timeseries.html", "_input/states/Timeseries.RDICT.html", "_input/states/create_random_abl_states.html", "_input/windio/read_case.html", "_models/farm_controllers/BasicFarmController.html", "_models/farm_models/Turbine2FarmModel.html", "_models/farm_models/Turbine2FarmModel.__init__.html", "_models/farm_models/Turbine2FarmModel.__repr__.html", "_models/farm_models/Turbine2FarmModel.calculate.html", "_models/farm_models/Turbine2FarmModel.finalize.html", "_models/farm_models/Turbine2FarmModel.initialize.html", "_models/farm_models/Turbine2FarmModel.output_farm_vars.html", "_models/model_book/Dict.html", "_models/model_book/Dict.__getitem__.html", "_models/model_book/Dict.__init__.html", "_models/model_book/ModelBook.html", "_models/model_book/ModelBook.__getitem__.html", "_models/model_book/ModelBook.__init__.html", "_models/model_book/ModelBook.finalize.html", "_models/model_book/ModelBook.print_toc.html", "_models/partial_wakes/Mapped.html", "_models/partial_wakes/Mapped.__init__.html", "_models/partial_wakes/Mapped.contribute_to_wake_deltas.html", "_models/partial_wakes/Mapped.evaluate_results.html", "_models/partial_wakes/Mapped.finalize.html", "_models/partial_wakes/Mapped.initialize.html", "_models/partial_wakes/Mapped.new_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.html", "_models/partial_wakes/PartialAxiwake.__init__.html", "_models/partial_wakes/PartialAxiwake.__repr__.html", "_models/partial_wakes/PartialAxiwake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.evaluate_results.html", "_models/partial_wakes/PartialAxiwake.finalize.html", "_models/partial_wakes/PartialAxiwake.initialize.html", "_models/partial_wakes/PartialAxiwake.new_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.html", "_models/partial_wakes/PartialDistSlicedWake.__init__.html", "_models/partial_wakes/PartialDistSlicedWake.__repr__.html", "_models/partial_wakes/PartialDistSlicedWake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.evaluate_results.html", "_models/partial_wakes/PartialDistSlicedWake.finalize.html", "_models/partial_wakes/PartialDistSlicedWake.initialize.html", "_models/partial_wakes/PartialDistSlicedWake.new_wake_deltas.html", "_models/partial_wakes/PartialGrid.html", "_models/partial_wakes/PartialGrid.__init__.html", "_models/partial_wakes/PartialGrid.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.html", "_models/partial_wakes/PartialTopHat.__init__.html", "_models/partial_wakes/PartialTopHat.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.evaluate_results.html", "_models/partial_wakes/PartialTopHat.finalize.html", "_models/partial_wakes/PartialTopHat.get_wake_points.html", "_models/partial_wakes/PartialTopHat.initialize.html", "_models/partial_wakes/PartialTopHat.new_wake_deltas.html", "_models/partial_wakes/RotorPoints.html", "_models/partial_wakes/RotorPoints.__init__.html", "_models/partial_wakes/RotorPoints.contribute_to_wake_deltas.html", "_models/partial_wakes/RotorPoints.evaluate_results.html", "_models/partial_wakes/RotorPoints.get_wake_points.html", "_models/partial_wakes/RotorPoints.initialize.html", "_models/partial_wakes/RotorPoints.new_wake_deltas.html", "_models/point_models/SetUniformData.html", "_models/point_models/SetUniformData.__init__.html", "_models/point_models/SetUniformData.calculate.html", "_models/point_models/SetUniformData.initialize.html", "_models/point_models/SetUniformData.output_point_vars.html", "_models/point_models/TKE2TI.html", "_models/point_models/TKE2TI.calculate.html", "_models/point_models/TKE2TI.output_point_vars.html", "_models/point_models/WakeDeltas.html", "_models/point_models/WakeDeltas.__init__.html", "_models/point_models/WakeDeltas.calculate.html", "_models/point_models/WakeDeltas.output_point_vars.html", "_models/rotor_models/CentreRotor.html", "_models/rotor_models/CentreRotor.design_points.html", "_models/rotor_models/CentreRotor.eval_rpoint_results.html", "_models/rotor_models/CentreRotor.get_rotor_points.html", "_models/rotor_models/CentreRotor.n_rotor_points.html", "_models/rotor_models/CentreRotor.rotor_point_weights.html", "_models/rotor_models/GridRotor.html", "_models/rotor_models/GridRotor.__init__.html", "_models/rotor_models/GridRotor.__repr__.html", "_models/rotor_models/GridRotor.design_points.html", "_models/rotor_models/GridRotor.initialize.html", "_models/rotor_models/GridRotor.n_rotor_points.html", "_models/rotor_models/GridRotor.rotor_point_weights.html", "_models/turbine_models/Calculator.html", "_models/turbine_models/Calculator.__init__.html", "_models/turbine_models/Calculator.calculate.html", "_models/turbine_models/Calculator.output_farm_vars.html", "_models/turbine_models/LookupTable.html", "_models/turbine_models/LookupTable.__init__.html", "_models/turbine_models/LookupTable.calculate.html", "_models/turbine_models/LookupTable.initialize.html", "_models/turbine_models/LookupTable.output_farm_vars.html", "_models/turbine_models/PowerMask.html", "_models/turbine_models/PowerMask.__init__.html", "_models/turbine_models/PowerMask.calculate.html", "_models/turbine_models/PowerMask.initialize.html", "_models/turbine_models/PowerMask.output_farm_vars.html", "_models/turbine_models/PowerMask.update_P_ct.html", "_models/turbine_models/RotorCentreCalc.html", "_models/turbine_models/RotorCentreCalc.__init__.html", "_models/turbine_models/RotorCentreCalc.calculate.html", "_models/turbine_models/RotorCentreCalc.finalize.html", "_models/turbine_models/RotorCentreCalc.initialize.html", "_models/turbine_models/RotorCentreCalc.output_farm_vars.html", "_models/turbine_models/SectorManagement.html", "_models/turbine_models/SectorManagement.__init__.html", "_models/turbine_models/SectorManagement.calculate.html", "_models/turbine_models/SectorManagement.initialize.html", "_models/turbine_models/SectorManagement.output_farm_vars.html", "_models/turbine_models/SetFarmVars.html", "_models/turbine_models/SetFarmVars.__init__.html", "_models/turbine_models/SetFarmVars.add_var.html", "_models/turbine_models/SetFarmVars.calculate.html", "_models/turbine_models/SetFarmVars.initialize.html", "_models/turbine_models/SetFarmVars.output_farm_vars.html", "_models/turbine_models/SetFarmVars.reset.html", "_models/turbine_models/SetXYHD.html", "_models/turbine_models/SetXYHD.__init__.html", "_models/turbine_models/SetXYHD.calculate.html", "_models/turbine_models/SetXYHD.output_farm_vars.html", "_models/turbine_models/TableFactors.html", "_models/turbine_models/TableFactors.__init__.html", "_models/turbine_models/TableFactors.calculate.html", "_models/turbine_models/TableFactors.initialize.html", "_models/turbine_models/TableFactors.output_farm_vars.html", "_models/turbine_models/Thrust2Ct.html", "_models/turbine_models/Thrust2Ct.__init__.html", "_models/turbine_models/Thrust2Ct.calculate.html", "_models/turbine_models/Thrust2Ct.output_farm_vars.html", "_models/turbine_models/YAW2YAWM.html", "_models/turbine_models/YAW2YAWM.calculate.html", "_models/turbine_models/YAW2YAWM.output_farm_vars.html", "_models/turbine_models/YAWM2YAW.html", "_models/turbine_models/YAWM2YAW.calculate.html", "_models/turbine_models/YAWM2YAW.output_farm_vars.html", "_models/turbine_models/kTI.html", "_models/turbine_models/kTI.__init__.html", "_models/turbine_models/kTI.__repr__.html", "_models/turbine_models/kTI.calculate.html", "_models/turbine_models/kTI.output_farm_vars.html", "_models/turbine_types/CpCtFile.html", "_models/turbine_types/CpCtFile.__init__.html", "_models/turbine_types/CpCtFromTwo.html", "_models/turbine_types/CpCtFromTwo.__init__.html", "_models/turbine_types/NullType.html", "_models/turbine_types/NullType.calculate.html", "_models/turbine_types/NullType.output_farm_vars.html", "_models/turbine_types/PCtFile.html", "_models/turbine_types/PCtFile.__init__.html", "_models/turbine_types/PCtFile.calculate.html", "_models/turbine_types/PCtFile.finalize.html", "_models/turbine_types/PCtFile.initialize.html", "_models/turbine_types/PCtFile.output_farm_vars.html", "_models/turbine_types/PCtFromTwo.html", "_models/turbine_types/PCtFromTwo.__init__.html", "_models/turbine_types/PCtFromTwo.calculate.html", "_models/turbine_types/PCtFromTwo.finalize.html", "_models/turbine_types/PCtFromTwo.initialize.html", "_models/turbine_types/PCtFromTwo.output_farm_vars.html", "_models/turbine_types/WsRho2PCtFromTwo.html", "_models/turbine_types/WsRho2PCtFromTwo.__init__.html", "_models/turbine_types/WsRho2PCtFromTwo.calculate.html", "_models/turbine_types/WsRho2PCtFromTwo.finalize.html", "_models/turbine_types/WsRho2PCtFromTwo.initialize.html", "_models/turbine_types/WsRho2PCtFromTwo.output_farm_vars.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.calculate.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogStableWsProfile.html", "_models/vertical_profiles/ABLLogStableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogStableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogWsProfile.html", "_models/vertical_profiles/ABLLogWsProfile.calculate.html", "_models/vertical_profiles/ABLLogWsProfile.input_vars.html", "_models/vertical_profiles/ShearedProfile.html", "_models/vertical_profiles/ShearedProfile.calculate.html", "_models/vertical_profiles/ShearedProfile.input_vars.html", "_models/vertical_profiles/UniformProfile.html", "_models/vertical_profiles/UniformProfile.__init__.html", "_models/vertical_profiles/UniformProfile.calculate.html", "_models/vertical_profiles/UniformProfile.input_vars.html", "_models/wake_frames/FarmOrder.html", "_models/wake_frames/FarmOrder.__init__.html", "_models/wake_frames/FarmOrder.calc_order.html", "_models/wake_frames/FarmOrder.finalize.html", "_models/wake_frames/FarmOrder.get_centreline_points.html", "_models/wake_frames/FarmOrder.get_wake_coos.html", "_models/wake_frames/FarmOrder.initialize.html", "_models/wake_frames/RotorWD.html", "_models/wake_frames/RotorWD.__init__.html", "_models/wake_frames/RotorWD.calc_order.html", "_models/wake_frames/RotorWD.get_centreline_points.html", "_models/wake_frames/RotorWD.get_wake_coos.html", "_models/wake_frames/Streamlines.html", "_models/wake_frames/Streamlines.__init__.html", "_models/wake_frames/Streamlines.__repr__.html", "_models/wake_frames/Streamlines.calc_order.html", "_models/wake_frames/Streamlines.get_centreline_points.html", "_models/wake_frames/Streamlines.get_wake_coos.html", "_models/wake_frames/Streamlines.initialize.html", "_models/wake_frames/YawedWakes.html", "_models/wake_frames/YawedWakes.__init__.html", "_models/wake_frames/YawedWakes.calc_order.html", "_models/wake_frames/YawedWakes.finalize.html", "_models/wake_frames/YawedWakes.get_centreline_points.html", "_models/wake_frames/YawedWakes.get_wake_coos.html", "_models/wake_frames/YawedWakes.initialize.html", "_models/wake_models/AxisymmetricWakeModel.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.html", "_models/wake_models/DistSlicedWakeModel.__init__.html", "_models/wake_models/DistSlicedWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.contribute_to_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.finalize.html", "_models/wake_models/DistSlicedWakeModel.finalize_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.initialize.html", "_models/wake_models/GaussianWakeModel.html", "_models/wake_models/GaussianWakeModel.calc_amplitude_sigma_spsel.html", "_models/wake_models/GaussianWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/TopHatWakeModel.html", "_models/wake_models/TopHatWakeModel.__init__.html", "_models/wake_models/TopHatWakeModel.calc_centreline_wake_deltas.html", "_models/wake_models/TopHatWakeModel.calc_wake_radius.html", "_models/wake_models/TopHatWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/ti/CrespoHernandezTIWake.html", "_models/wake_models/ti/CrespoHernandezTIWake.__init__.html", "_models/wake_models/ti/CrespoHernandezTIWake.__repr__.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_wake_radius.html", "_models/wake_models/ti/CrespoHernandezTIWake.init_wake_deltas.html", "_models/wake_models/ti/IECTIWake.html", "_models/wake_models/ti/IECTIWake.__init__.html", "_models/wake_models/ti/IECTIWake.__repr__.html", "_models/wake_models/ti/IECTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/IECTIWake.calc_wake_radius.html", "_models/wake_models/ti/IECTIWake.init_wake_deltas.html", "_models/wake_models/wind/BastankhahWake.html", "_models/wake_models/wind/BastankhahWake.__init__.html", "_models/wake_models/wind/BastankhahWake.__repr__.html", "_models/wake_models/wind/BastankhahWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/BastankhahWake.init_wake_deltas.html", "_models/wake_models/wind/JensenWake.html", "_models/wake_models/wind/JensenWake.__init__.html", "_models/wake_models/wind/JensenWake.__repr__.html", "_models/wake_models/wind/JensenWake.calc_centreline_wake_deltas.html", "_models/wake_models/wind/JensenWake.calc_wake_radius.html", "_models/wake_models/wind/JensenWake.init_wake_deltas.html", "_models/wake_models/wind/PorteAgelModel.html", "_models/wake_models/wind/PorteAgelModel.AMPL_FAR.html", "_models/wake_models/wind/PorteAgelModel.AMPL_NEAR.html", "_models/wake_models/wind/PorteAgelModel.CHECK.html", "_models/wake_models/wind/PorteAgelModel.DELTA_FAR.html", "_models/wake_models/wind/PorteAgelModel.DELTA_NEAR.html", "_models/wake_models/wind/PorteAgelModel.MDATA_KEY.html", "_models/wake_models/wind/PorteAgelModel.NEAR.html", "_models/wake_models/wind/PorteAgelModel.PARS.html", "_models/wake_models/wind/PorteAgelModel.R_PC.html", "_models/wake_models/wind/PorteAgelModel.R_PC_S.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Y_FAR.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Z_FAR.html", "_models/wake_models/wind/PorteAgelModel.SP_SEL.html", "_models/wake_models/wind/PorteAgelModel.X0.html", "_models/wake_models/wind/PorteAgelModel.__init__.html", "_models/wake_models/wind/PorteAgelModel.calc_data.html", "_models/wake_models/wind/PorteAgelModel.clean.html", "_models/wake_models/wind/PorteAgelModel.get_data.html", "_models/wake_models/wind/PorteAgelModel.has_data.html", "_models/wake_models/wind/PorteAgelModel.pars.html", "_models/wake_models/wind/PorteAgelWake.html", "_models/wake_models/wind/PorteAgelWake.__init__.html", "_models/wake_models/wind/PorteAgelWake.__repr__.html", "_models/wake_models/wind/PorteAgelWake.calc_wakes_spsel_x_yz.html", "_models/wake_models/wind/PorteAgelWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWake.html", "_models/wake_models/wind/TurbOParkWake.__init__.html", "_models/wake_models/wind/TurbOParkWake.__repr__.html", "_models/wake_models/wind/TurbOParkWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWakeIX.html", "_models/wake_models/wind/TurbOParkWakeIX.__init__.html", "_models/wake_models/wind/TurbOParkWakeIX.__repr__.html", "_models/wake_models/wind/TurbOParkWakeIX.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWakeIX.init_wake_deltas.html", "_models/wake_superpositions/LinearSuperposition.html", "_models/wake_superpositions/LinearSuperposition.__init__.html", "_models/wake_superpositions/LinearSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/LinearSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/MaxSuperposition.html", "_models/wake_superpositions/MaxSuperposition.__init__.html", "_models/wake_superpositions/MaxSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/MaxSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/MaxSuperposition.initialize.html", "_models/wake_superpositions/ProductSuperposition.html", "_models/wake_superpositions/ProductSuperposition.__init__.html", "_models/wake_superpositions/ProductSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/ProductSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.html", "_models/wake_superpositions/QuadraticSuperposition.__init__.html", "_models/wake_superpositions/QuadraticSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/QuadraticSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.initialize.html", "_models/wake_superpositions/TISuperposition.html", "_models/wake_superpositions/TISuperposition.__init__.html", "_models/wake_superpositions/TISuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/TISuperposition.calc_wakes_plus_wake.html", "_output/FarmLayoutOutput.html", "_output/FarmLayoutOutput.__init__.html", "_output/FarmLayoutOutput.get_figure.html", "_output/FarmLayoutOutput.get_layout_data.html", "_output/FarmLayoutOutput.get_layout_dict.html", "_output/FarmLayoutOutput.write_csv.html", "_output/FarmLayoutOutput.write_json.html", "_output/FarmLayoutOutput.write_plot.html", "_output/FarmLayoutOutput.write_xyh.html", "_output/FarmResultsEval.html", "_output/FarmResultsEval.__init__.html", "_output/FarmResultsEval.add_capacity.html", "_output/FarmResultsEval.add_efficiency.html", "_output/FarmResultsEval.calc_farm_efficiency.html", "_output/FarmResultsEval.calc_farm_mean.html", "_output/FarmResultsEval.calc_farm_sum.html", "_output/FarmResultsEval.calc_farm_yield.html", "_output/FarmResultsEval.calc_mean_farm_power.html", "_output/FarmResultsEval.calc_states_mean.html", "_output/FarmResultsEval.calc_states_std.html", "_output/FarmResultsEval.calc_states_sum.html", "_output/FarmResultsEval.calc_turbine_mean.html", "_output/FarmResultsEval.calc_turbine_sum.html", "_output/FarmResultsEval.calc_turbine_yield.html", "_output/FarmResultsEval.reduce_all.html", "_output/FarmResultsEval.reduce_states.html", "_output/FarmResultsEval.reduce_turbines.html", "_output/FarmResultsEval.weinsum.html", "_output/FlowPlots2D.html", "_output/FlowPlots2D.__init__.html", "_output/FlowPlots2D.gen_states_fig_xy.html", "_output/FlowPlots2D.gen_states_fig_xz.html", "_output/FlowPlots2D.gen_states_fig_yz.html", "_output/FlowPlots2D.get_mean_fig_xy.html", "_output/FlowPlots2D.get_mean_fig_xz.html", "_output/FlowPlots2D.get_mean_fig_yz.html", "_output/Output.html", "_output/Output.new.html", "_output/Output.print_models.html", "_output/Output.write.html", "_output/ResultsWriter.html", "_output/ResultsWriter.__init__.html", "_output/ResultsWriter.write_csv.html", "_output/RosePlotOutput.html", "_output/RosePlotOutput.__init__.html", "_output/RosePlotOutput.get_data.html", "_output/RosePlotOutput.get_data_info.html", "_output/RosePlotOutput.get_figure.html", "_output/RosePlotOutput.write_figure.html", "_output/StateTurbineMap.html", "_output/StateTurbineMap.__init__.html", "_output/StateTurbineMap.plot_map.html", "_output/StatesRosePlotOutput.html", "_output/StatesRosePlotOutput.__init__.html", "_output/TurbineTypeCurves.html", "_output/TurbineTypeCurves.__init__.html", "_output/TurbineTypeCurves.plot_curves.html", "_utils/DataBook.html", "_utils/DataBook.__init__.html", "_utils/DataBook.add_data_package.html", "_utils/DataBook.add_data_package_file.html", "_utils/DataBook.add_file.html", "_utils/DataBook.add_files.html", "_utils/DataBook.get_file_path.html", "_utils/DataBook.toc.html", "_utils/PandasFileHelper.html", "_utils/PandasFileHelper.DATA_FILE_FORMATS.html", "_utils/PandasFileHelper.DEFAULT_FORMAT_DICT.html", "_utils/PandasFileHelper.DEFAULT_READING_PARAMETERS.html", "_utils/PandasFileHelper.DEFAULT_WRITING_PARAMETERS.html", "_utils/PandasFileHelper.read_file.html", "_utils/PandasFileHelper.write_file.html", "_utils/abl/neutral/calc_ws.html", "_utils/abl/neutral/logz.html", "_utils/abl/neutral/ustar.html", "_utils/abl/sheared/calc_ws.html", "_utils/abl/stable/calc_ws.html", "_utils/abl/stable/lgz.html", "_utils/abl/stable/logz.html", "_utils/abl/stable/psi.html", "_utils/abl/stable/ustar.html", "_utils/abl/unstable/calc_ws.html", "_utils/abl/unstable/logz.html", "_utils/abl/unstable/psi.html", "_utils/abl/unstable/ustar.html", "_utils/all_subclasses.html", "_utils/cubic_roots.html", "_utils/delta_wd.html", "_utils/geom2d/AreaGeometry.html", "_utils/geom2d/AreaGeometry.add_to_figure.html", "_utils/geom2d/AreaGeometry.inverse.html", "_utils/geom2d/AreaGeometry.p_max.html", "_utils/geom2d/AreaGeometry.p_min.html", "_utils/geom2d/AreaGeometry.points_distance.html", "_utils/geom2d/AreaGeometry.points_inside.html", "_utils/geom2d/AreaIntersection.html", "_utils/geom2d/AreaIntersection.__new__.html", "_utils/geom2d/AreaUnion.html", "_utils/geom2d/AreaUnion.__init__.html", "_utils/geom2d/AreaUnion.add_to_figure.html", "_utils/geom2d/AreaUnion.inverse.html", "_utils/geom2d/AreaUnion.p_max.html", "_utils/geom2d/AreaUnion.p_min.html", "_utils/geom2d/AreaUnion.points_distance.html", "_utils/geom2d/AreaUnion.points_inside.html", "_utils/geom2d/Circle.html", "_utils/geom2d/Circle.__init__.html", "_utils/geom2d/Circle.add_to_figure.html", "_utils/geom2d/Circle.p_max.html", "_utils/geom2d/Circle.p_min.html", "_utils/geom2d/Circle.points_distance.html", "_utils/geom2d/Circle.points_inside.html", "_utils/geom2d/ClosedPolygon.html", "_utils/geom2d/ClosedPolygon.__init__.html", "_utils/geom2d/ClosedPolygon.add_to_figure.html", "_utils/geom2d/ClosedPolygon.p_max.html", "_utils/geom2d/ClosedPolygon.p_min.html", "_utils/geom2d/ClosedPolygon.points_distance.html", "_utils/geom2d/ClosedPolygon.points_inside.html", "_utils/geom2d/HalfPlane.html", "_utils/geom2d/HalfPlane.__init__.html", "_utils/geom2d/HalfPlane.add_to_figure.html", "_utils/geom2d/HalfPlane.inverse.html", "_utils/geom2d/HalfPlane.p_max.html", "_utils/geom2d/HalfPlane.p_min.html", "_utils/geom2d/HalfPlane.points_distance.html", "_utils/geom2d/HalfPlane.points_inside.html", "_utils/geom2d/InvertedAreaGeometry.html", "_utils/geom2d/InvertedAreaGeometry.__init__.html", "_utils/geom2d/InvertedAreaGeometry.add_to_figure.html", "_utils/geom2d/InvertedAreaGeometry.inverse.html", "_utils/geom2d/InvertedAreaGeometry.p_max.html", "_utils/geom2d/InvertedAreaGeometry.p_min.html", "_utils/geom2d/InvertedAreaGeometry.points_distance.html", "_utils/geom2d/InvertedAreaGeometry.points_inside.html", "_utils/opt/constraints/AreaGeometryConstraint.html", "_utils/opt/constraints/AreaGeometryConstraint.__init__.html", "_utils/opt/constraints/AreaGeometryConstraint.__str__.html", "_utils/opt/constraints/AreaGeometryConstraint.ana_deriv.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_population.html", "_utils/opt/constraints/AreaGeometryConstraint.component_names.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_population.html", "_utils/opt/constraints/AreaGeometryConstraint.initialize.html", "_utils/opt/constraints/AreaGeometryConstraint.initialized.html", "_utils/opt/constraints/AreaGeometryConstraint.n_components.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_float.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_int.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_float.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_int.html", "_utils/opt/constraints/FarmBoundaryConstraint.html", "_utils/opt/constraints/FarmBoundaryConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.html", "_utils/opt/constraints/MinDistConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.calc_individual.html", "_utils/opt/constraints/MinDistConstraint.calc_population.html", "_utils/opt/constraints/MinDistConstraint.initialize.html", "_utils/opt/constraints/MinDistConstraint.n_components.html", "_utils/opt/constraints/MinDistConstraint.vardeps_float.html", "_utils/opt/core/FarmConstraint.html", "_utils/opt/core/FarmConstraint.__init__.html", "_utils/opt/core/FarmConstraint.add_to_layout_figure.html", "_utils/opt/core/FarmConstraint.calc_individual.html", "_utils/opt/core/FarmConstraint.calc_population.html", "_utils/opt/core/FarmConstraint.farm.html", "_utils/opt/core/FarmConstraint.n_components.html", "_utils/opt/core/FarmConstraint.n_sel_turbines.html", "_utils/opt/core/FarmConstraint.print_models.html", "_utils/opt/core/FarmConstraint.sel_turbines.html", "_utils/opt/core/FarmConstraint.vardeps_float.html", "_utils/opt/core/FarmObjective.html", "_utils/opt/core/FarmObjective.__init__.html", "_utils/opt/core/FarmObjective.add_to_layout_figure.html", "_utils/opt/core/FarmObjective.farm.html", "_utils/opt/core/FarmObjective.n_sel_turbines.html", "_utils/opt/core/FarmObjective.print_models.html", "_utils/opt/core/FarmObjective.sel_turbines.html", "_utils/opt/core/FarmOptProblem.html", "_utils/opt/core/FarmOptProblem.INT_INF.html", "_utils/opt/core/FarmOptProblem.__init__.html", "_utils/opt/core/FarmOptProblem.add_constraint.html", "_utils/opt/core/FarmOptProblem.add_objective.html", "_utils/opt/core/FarmOptProblem.add_to_layout_figure.html", "_utils/opt/core/FarmOptProblem.all_turbines.html", "_utils/opt/core/FarmOptProblem.apply_individual.html", "_utils/opt/core/FarmOptProblem.apply_population.html", "_utils/opt/core/FarmOptProblem.calc_gradients.html", "_utils/opt/core/FarmOptProblem.check_constraints_individual.html", "_utils/opt/core/FarmOptProblem.check_constraints_population.html", "_utils/opt/core/FarmOptProblem.constraints_tol.html", "_utils/opt/core/FarmOptProblem.counter.html", "_utils/opt/core/FarmOptProblem.evaluate_individual.html", "_utils/opt/core/FarmOptProblem.evaluate_population.html", "_utils/opt/core/FarmOptProblem.farm.html", "_utils/opt/core/FarmOptProblem.finalize_individual.html", "_utils/opt/core/FarmOptProblem.finalize_population.html", "_utils/opt/core/FarmOptProblem.get_gradients.html", "_utils/opt/core/FarmOptProblem.initial_values_float.html", "_utils/opt/core/FarmOptProblem.initial_values_int.html", "_utils/opt/core/FarmOptProblem.initialize.html", "_utils/opt/core/FarmOptProblem.max_values_constraints.html", "_utils/opt/core/FarmOptProblem.max_values_float.html", "_utils/opt/core/FarmOptProblem.max_values_int.html", "_utils/opt/core/FarmOptProblem.maximize_objs.html", "_utils/opt/core/FarmOptProblem.min_values_constraints.html", "_utils/opt/core/FarmOptProblem.min_values_float.html", "_utils/opt/core/FarmOptProblem.min_values_int.html", "_utils/opt/core/FarmOptProblem.n_constraints.html", "_utils/opt/core/FarmOptProblem.n_objectives.html", "_utils/opt/core/FarmOptProblem.n_sel_turbines.html", "_utils/opt/core/FarmOptProblem.n_vars_float.html", "_utils/opt/core/FarmOptProblem.n_vars_int.html", "_utils/opt/core/FarmOptProblem.parse_tvar.html", "_utils/opt/core/FarmOptProblem.sel_turbines.html", "_utils/opt/core/FarmOptProblem.tvar.html", "_utils/opt/core/FarmOptProblem.update_problem_individual.html", "_utils/opt/core/FarmOptProblem.update_problem_population.html", "_utils/opt/core/FarmOptProblem.var_names_float.html", "_utils/opt/core/FarmOptProblem.var_names_int.html", "_utils/opt/core/FarmVarsProblem.html", "_utils/opt/core/FarmVarsProblem.initialize.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_individual.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_population.html", "_utils/opt/core/FarmVarsProblem.update_problem_individual.html", "_utils/opt/core/FarmVarsProblem.update_problem_population.html", "_utils/opt/core/PopStates.html", "_utils/opt/core/PopStates.__init__.html", "_utils/opt/core/PopStates.calculate.html", "_utils/opt/core/PopStates.initialize.html", "_utils/opt/core/PopStates.output_point_vars.html", "_utils/opt/core/PopStates.size.html", "_utils/opt/core/PopStates.weights.html", "_utils/opt/objectives/FarmVarObjective.html", "_utils/opt/objectives/FarmVarObjective.__init__.html", "_utils/opt/objectives/FarmVarObjective.calc_individual.html", "_utils/opt/objectives/FarmVarObjective.calc_population.html", "_utils/opt/objectives/FarmVarObjective.finalize_individual.html", "_utils/opt/objectives/FarmVarObjective.initialize.html", "_utils/opt/objectives/FarmVarObjective.maximize.html", "_utils/opt/objectives/FarmVarObjective.n_components.html", "_utils/opt/objectives/FarmVarObjective.vardeps_float.html", "_utils/opt/objectives/MaxFarmPower.html", "_utils/opt/objectives/MaxFarmPower.__init__.html", "_utils/opt/objectives/MaxNTurbines.html", "_utils/opt/objectives/MaxNTurbines.__init__.html", "_utils/opt/objectives/MaxNTurbines.calc_individual.html", "_utils/opt/objectives/MaxNTurbines.calc_population.html", "_utils/opt/objectives/MaxNTurbines.maximize.html", "_utils/opt/objectives/MaxNTurbines.n_components.html", "_utils/opt/objectives/MinimalMaxTI.html", "_utils/opt/objectives/MinimalMaxTI.__init__.html", "_utils/opt/problems/OptFarmVars.html", "_utils/opt/problems/OptFarmVars.__init__.html", "_utils/opt/problems/OptFarmVars.add_var.html", "_utils/opt/problems/OptFarmVars.initial_values_float.html", "_utils/opt/problems/OptFarmVars.initial_values_int.html", "_utils/opt/problems/OptFarmVars.initialize.html", "_utils/opt/problems/OptFarmVars.max_values_float.html", "_utils/opt/problems/OptFarmVars.max_values_int.html", "_utils/opt/problems/OptFarmVars.min_values_float.html", "_utils/opt/problems/OptFarmVars.min_values_int.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_individual.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_population.html", "_utils/opt/problems/OptFarmVars.var_names_float.html", "_utils/opt/problems/OptFarmVars.var_names_int.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.get_bounds.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintscdist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivescdist.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.var_names_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_int.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_int.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.ANGLE.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.var_names_float.html", "_utils/read_shp.html", "_utils/read_shp_polygons.html", "_utils/runners/DaskRunner.html", "_utils/runners/DaskRunner.__init__.html", "_utils/runners/DaskRunner.finalize.html", "_utils/runners/DaskRunner.initialize.html", "_utils/runners/DaskRunner.is_distributed.html", "_utils/runners/DaskRunner.print.html", "_utils/runners/DaskRunner.run.html", "_utils/runners/DefaultRunner.html", "_utils/runners/DefaultRunner.run.html", "_utils/runners/Runner.html", "_utils/runners/Runner.__init__.html", "_utils/runners/Runner.finalize.html", "_utils/runners/Runner.initialize.html", "_utils/runners/Runner.initialized.html", "_utils/runners/Runner.run.html", "_utils/show_plotly_fig.html", "_utils/shp2csv.html", "_utils/shp2geom2d.html", "_utils/two_circles/area.html", "_utils/two_circles/calc_area.html", "_utils/uv2wd.html", "_utils/wd2uv.html", "_utils/wd2wdvec.html", "_utils/wdvec2wd.html", "api.html", "api_constants.html", "api_core.html", "api_foxes.html", "api_input.html", "api_models.html", "api_opt.html", "api_opt_problems.html", "api_opt_problems_geom.html", "api_output.html", "api_utils.html", "api_utils_abl.html", "api_variables.html", "api_wake_models.html", "examples.html", "history.html", "index.html", "installation.html", "notebooks/data.html", "notebooks/heterogeneous.html", "notebooks/layout_opt.html", "notebooks/model_book.html", "notebooks/multi_height.html", "notebooks/overview.html", "notebooks/power_mask.html", "notebooks/sector_man.html", "notebooks/single_row.html", "notebooks/timeseries.html", "notebooks/wind_rose.html", "notebooks/yawed_wake.html"]})