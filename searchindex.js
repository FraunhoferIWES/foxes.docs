Search.setIndex({"titles": ["foxes.algorithms.Downwind", "foxes.algorithms.Downwind.__init__", "foxes.algorithms.Downwind.all_models", "foxes.algorithms.Downwind.calc_farm", "foxes.algorithms.Downwind.calc_points", "foxes.algorithms.Downwind.finalize", "foxes.algorithms.Downwind.get_model", "foxes.algorithms.Downwind.init_states", "foxes.algorithms.Downwind.initialize", "foxes.algorithms.Iterative", "foxes.algorithms.Iterative.__init__", "foxes.algorithms.Iterative.calc_farm", "foxes.algorithms.Iterative.get_model", "foxes.algorithms.Iterative.iterations", "foxes.algorithms.Iterative.set_urelax", "foxes.algorithms.Iterative.urelax", "foxes.algorithms.Sequential", "foxes.algorithms.Sequential.__init__", "foxes.algorithms.Sequential.__iter__", "foxes.algorithms.Sequential.__next__", "foxes.algorithms.Sequential.calc_farm", "foxes.algorithms.Sequential.calc_points", "foxes.algorithms.Sequential.counter", "foxes.algorithms.Sequential.cur_farm_results", "foxes.algorithms.Sequential.cur_point_results", "foxes.algorithms.Sequential.farm_results", "foxes.algorithms.Sequential.fdata", "foxes.algorithms.Sequential.get_model", "foxes.algorithms.Sequential.index", "foxes.algorithms.Sequential.iterating", "foxes.algorithms.Sequential.mdata", "foxes.algorithms.Sequential.pdata", "foxes.algorithms.Sequential.point_results", "foxes.algorithms.Sequential.size", "foxes.algorithms.Sequential.weight", "foxes.algorithms.downwind.models.CalcOrder", "foxes.algorithms.downwind.models.CalcOrder.calculate", "foxes.algorithms.downwind.models.CalcOrder.initialize", "foxes.algorithms.downwind.models.CalcOrder.output_farm_vars", "foxes.algorithms.downwind.models.CalcOrder.sub_models", "foxes.algorithms.downwind.models.FarmWakesCalculation", "foxes.algorithms.downwind.models.FarmWakesCalculation.__init__", "foxes.algorithms.downwind.models.FarmWakesCalculation.calculate", "foxes.algorithms.downwind.models.FarmWakesCalculation.initialize", "foxes.algorithms.downwind.models.FarmWakesCalculation.output_farm_vars", "foxes.algorithms.downwind.models.FarmWakesCalculation.sub_models", "foxes.algorithms.downwind.models.PointWakesCalculation", "foxes.algorithms.downwind.models.PointWakesCalculation.__init__", "foxes.algorithms.downwind.models.PointWakesCalculation.calculate", "foxes.algorithms.downwind.models.PointWakesCalculation.contribute_to_wake_deltas", "foxes.algorithms.downwind.models.PointWakesCalculation.initialize", "foxes.algorithms.downwind.models.PointWakesCalculation.output_point_vars", "foxes.algorithms.downwind.models.PointWakesCalculation.sub_models", "foxes.algorithms.downwind.models.SetAmbFarmResults", "foxes.algorithms.downwind.models.SetAmbFarmResults.__init__", "foxes.algorithms.downwind.models.SetAmbFarmResults.calculate", "foxes.algorithms.downwind.models.SetAmbFarmResults.output_farm_vars", "foxes.algorithms.downwind.models.SetAmbPointResults", "foxes.algorithms.downwind.models.SetAmbPointResults.__init__", "foxes.algorithms.downwind.models.SetAmbPointResults.calculate", "foxes.algorithms.downwind.models.SetAmbPointResults.initialize", "foxes.algorithms.downwind.models.SetAmbPointResults.output_point_vars", "foxes.algorithms.iterative.ConvCrit", "foxes.algorithms.iterative.ConvCrit.__init__", "foxes.algorithms.iterative.ConvCrit.check_converged", "foxes.algorithms.iterative.ConvCrit.get_deltas", "foxes.algorithms.iterative.ConvCritList", "foxes.algorithms.iterative.ConvCritList.__init__", "foxes.algorithms.iterative.ConvCritList.add_crit", "foxes.algorithms.iterative.ConvCritList.check_converged", "foxes.algorithms.iterative.ConvCritList.get_deltas", "foxes.algorithms.iterative.ConvVarDelta", "foxes.algorithms.iterative.ConvVarDelta.__init__", "foxes.algorithms.iterative.ConvVarDelta.check_converged", "foxes.algorithms.iterative.ConvVarDelta.get_deltas", "foxes.algorithms.iterative.DefaultConv", "foxes.algorithms.iterative.DefaultConv.__init__", "foxes.algorithms.iterative.models.FarmWakesCalculation", "foxes.algorithms.iterative.models.FarmWakesCalculation.__init__", "foxes.algorithms.iterative.models.FarmWakesCalculation.calculate", "foxes.algorithms.iterative.models.FarmWakesCalculation.initialize", "foxes.algorithms.iterative.models.FarmWakesCalculation.output_farm_vars", "foxes.algorithms.iterative.models.FarmWakesCalculation.sub_models", "foxes.algorithms.iterative.models.URelax", "foxes.algorithms.iterative.models.URelax.__init__", "foxes.algorithms.iterative.models.URelax.calculate", "foxes.algorithms.iterative.models.URelax.output_farm_vars", "foxes.algorithms.sequential.SequentialPlugin", "foxes.algorithms.sequential.SequentialPlugin.__init__", "foxes.algorithms.sequential.SequentialPlugin.finalize", "foxes.algorithms.sequential.SequentialPlugin.initialize", "foxes.algorithms.sequential.SequentialPlugin.update", "foxes.algorithms.sequential.models.SeqState", "foxes.algorithms.sequential.models.SeqState.__init__", "foxes.algorithms.sequential.models.SeqState.calculate", "foxes.algorithms.sequential.models.SeqState.counter", "foxes.algorithms.sequential.models.SeqState.index", "foxes.algorithms.sequential.models.SeqState.initialize", "foxes.algorithms.sequential.models.SeqState.output_point_vars", "foxes.algorithms.sequential.models.SeqState.size", "foxes.algorithms.sequential.models.SeqState.sub_models", "foxes.algorithms.sequential.models.SeqState.weights", "foxes.core.Algorithm", "foxes.core.Algorithm.__init__", "foxes.core.Algorithm.chunked", "foxes.core.Algorithm.del_model_data", "foxes.core.Algorithm.finalize", "foxes.core.Algorithm.get_model_data", "foxes.core.Algorithm.get_models_data", "foxes.core.Algorithm.get_models_idata", "foxes.core.Algorithm.idata_mem", "foxes.core.Algorithm.initialize", "foxes.core.Algorithm.new", "foxes.core.Algorithm.new_point_data", "foxes.core.Algorithm.print", "foxes.core.Algorithm.store_model_data", "foxes.core.Algorithm.update_n_turbines", "foxes.core.Data", "foxes.core.Data.__init__", "foxes.core.Data.add", "foxes.core.Data.from_points", "foxes.core.Data.n_points", "foxes.core.Data.n_states", "foxes.core.Data.n_turbines", "foxes.core.Data.states_i0", "foxes.core.DataCalcModel", "foxes.core.DataCalcModel.calculate", "foxes.core.DataCalcModel.run_calculation", "foxes.core.ExtendedStates", "foxes.core.ExtendedStates.__init__", "foxes.core.ExtendedStates.append", "foxes.core.ExtendedStates.calculate", "foxes.core.ExtendedStates.index", "foxes.core.ExtendedStates.output_point_vars", "foxes.core.ExtendedStates.size", "foxes.core.ExtendedStates.sub_models", "foxes.core.ExtendedStates.weights", "foxes.core.FarmController", "foxes.core.FarmController.__init__", "foxes.core.FarmController.calculate", "foxes.core.FarmController.collect_models", "foxes.core.FarmController.finalize", "foxes.core.FarmController.initialize", "foxes.core.FarmController.load_data", "foxes.core.FarmController.output_farm_vars", "foxes.core.FarmController.set_pars", "foxes.core.FarmController.sub_models", "foxes.core.FarmDataModel", "foxes.core.FarmDataModel.__init__", "foxes.core.FarmDataModel.calculate", "foxes.core.FarmDataModel.output_farm_vars", "foxes.core.FarmDataModel.run_calculation", "foxes.core.FarmDataModelList", "foxes.core.FarmDataModelList.__init__", "foxes.core.FarmDataModelList.append", "foxes.core.FarmDataModelList.calculate", "foxes.core.FarmDataModelList.insert", "foxes.core.FarmDataModelList.output_farm_vars", "foxes.core.FarmDataModelList.sub_models", "foxes.core.FarmModel", "foxes.core.Model", "foxes.core.Model.__init__", "foxes.core.Model.__repr__", "foxes.core.Model.data_to_store", "foxes.core.Model.finalize", "foxes.core.Model.from_data_or_store", "foxes.core.Model.get_data", "foxes.core.Model.initialize", "foxes.core.Model.initialized", "foxes.core.Model.load_data", "foxes.core.Model.model_id", "foxes.core.Model.sub_models", "foxes.core.Model.var", "foxes.core.PartialWakesModel", "foxes.core.PartialWakesModel.__init__", "foxes.core.PartialWakesModel.contribute_to_wake_deltas", "foxes.core.PartialWakesModel.evaluate_results", "foxes.core.PartialWakesModel.initialize", "foxes.core.PartialWakesModel.new", "foxes.core.PartialWakesModel.new_wake_deltas", "foxes.core.PartialWakesModel.sub_models", "foxes.core.PointDataModel", "foxes.core.PointDataModel.calculate", "foxes.core.PointDataModel.output_point_vars", "foxes.core.PointDataModel.run_calculation", "foxes.core.PointDataModelList", "foxes.core.PointDataModelList.__init__", "foxes.core.PointDataModelList.append", "foxes.core.PointDataModelList.calculate", "foxes.core.PointDataModelList.output_point_vars", "foxes.core.PointDataModelList.sub_models", "foxes.core.RotorModel", "foxes.core.RotorModel.__init__", "foxes.core.RotorModel.calculate", "foxes.core.RotorModel.design_points", "foxes.core.RotorModel.eval_rpoint_results", "foxes.core.RotorModel.get_rotor_points", "foxes.core.RotorModel.n_rotor_points", "foxes.core.RotorModel.output_farm_vars", "foxes.core.RotorModel.rotor_point_weights", "foxes.core.States", "foxes.core.States.index", "foxes.core.States.load_data", "foxes.core.States.output_point_vars", "foxes.core.States.size", "foxes.core.States.weights", "foxes.core.Turbine", "foxes.core.Turbine.__init__", "foxes.core.Turbine.add_model", "foxes.core.Turbine.insert_model", "foxes.core.TurbineModel", "foxes.core.TurbineModel.calculate", "foxes.core.TurbineType", "foxes.core.TurbineType.__init__", "foxes.core.VerticalProfile", "foxes.core.VerticalProfile.calculate", "foxes.core.VerticalProfile.input_vars", "foxes.core.VerticalProfile.new", "foxes.core.WakeFrame", "foxes.core.WakeFrame.calc_centreline_integral", "foxes.core.WakeFrame.calc_order", "foxes.core.WakeFrame.get_centreline_points", "foxes.core.WakeFrame.get_wake_coos", "foxes.core.WakeFrame.get_wake_modelling_data", "foxes.core.WakeModel", "foxes.core.WakeModel.contribute_to_wake_deltas", "foxes.core.WakeModel.finalize_wake_deltas", "foxes.core.WakeModel.init_wake_deltas", "foxes.core.WakeSuperposition", "foxes.core.WakeSuperposition.calc_final_wake_delta", "foxes.core.WakeSuperposition.calc_wakes_plus_wake", "foxes.core.WindFarm", "foxes.core.WindFarm.__init__", "foxes.core.WindFarm.add_turbine", "foxes.core.WindFarm.n_turbines", "foxes.core.WindFarm.turbine_names", "foxes.data.StaticData", "foxes.data.StaticData.__init__", "foxes.data.parse_Pct_file_name", "foxes.data.parse_Pct_two_files", "foxes.constants.AMB_RPOINT_RESULTS", "foxes.constants.DTYPE", "foxes.constants.DTYPE.T", "foxes.constants.DTYPE.__abs__", "foxes.constants.DTYPE.__add__", "foxes.constants.DTYPE.__and__", "foxes.constants.DTYPE.__array__", "foxes.constants.DTYPE.__array_interface__", "foxes.constants.DTYPE.__array_priority__", "foxes.constants.DTYPE.__array_struct__", "foxes.constants.DTYPE.__array_wrap__", "foxes.constants.DTYPE.__bool__", "foxes.constants.DTYPE.__class_getitem__", "foxes.constants.DTYPE.__divmod__", "foxes.constants.DTYPE.__eq__", "foxes.constants.DTYPE.__float__", "foxes.constants.DTYPE.__floordiv__", "foxes.constants.DTYPE.__format__", "foxes.constants.DTYPE.__ge__", "foxes.constants.DTYPE.__getitem__", "foxes.constants.DTYPE.__gt__", "foxes.constants.DTYPE.__hash__", "foxes.constants.DTYPE.__int__", "foxes.constants.DTYPE.__invert__", "foxes.constants.DTYPE.__le__", "foxes.constants.DTYPE.__lshift__", "foxes.constants.DTYPE.__lt__", "foxes.constants.DTYPE.__mod__", "foxes.constants.DTYPE.__mul__", "foxes.constants.DTYPE.__ne__", "foxes.constants.DTYPE.__neg__", "foxes.constants.DTYPE.__new__", "foxes.constants.DTYPE.__or__", "foxes.constants.DTYPE.__pos__", "foxes.constants.DTYPE.__pow__", "foxes.constants.DTYPE.__radd__", "foxes.constants.DTYPE.__rand__", "foxes.constants.DTYPE.__rdivmod__", "foxes.constants.DTYPE.__reduce__", "foxes.constants.DTYPE.__repr__", "foxes.constants.DTYPE.__rfloordiv__", "foxes.constants.DTYPE.__rlshift__", "foxes.constants.DTYPE.__rmod__", "foxes.constants.DTYPE.__rmul__", "foxes.constants.DTYPE.__ror__", "foxes.constants.DTYPE.__rpow__", "foxes.constants.DTYPE.__rrshift__", "foxes.constants.DTYPE.__rshift__", "foxes.constants.DTYPE.__rsub__", "foxes.constants.DTYPE.__rtruediv__", "foxes.constants.DTYPE.__rxor__", "foxes.constants.DTYPE.__sizeof__", "foxes.constants.DTYPE.__str__", "foxes.constants.DTYPE.__sub__", "foxes.constants.DTYPE.__truediv__", "foxes.constants.DTYPE.__xor__", "foxes.constants.DTYPE.all", "foxes.constants.DTYPE.any", "foxes.constants.DTYPE.argmax", "foxes.constants.DTYPE.argmin", "foxes.constants.DTYPE.argsort", "foxes.constants.DTYPE.as_integer_ratio", "foxes.constants.DTYPE.astype", "foxes.constants.DTYPE.base", "foxes.constants.DTYPE.byteswap", "foxes.constants.DTYPE.choose", "foxes.constants.DTYPE.clip", "foxes.constants.DTYPE.compress", "foxes.constants.DTYPE.conj", "foxes.constants.DTYPE.conjugate", "foxes.constants.DTYPE.copy", "foxes.constants.DTYPE.cumprod", "foxes.constants.DTYPE.cumsum", "foxes.constants.DTYPE.data", "foxes.constants.DTYPE.diagonal", "foxes.constants.DTYPE.dtype", "foxes.constants.DTYPE.dump", "foxes.constants.DTYPE.dumps", "foxes.constants.DTYPE.fill", "foxes.constants.DTYPE.flags", "foxes.constants.DTYPE.flat", "foxes.constants.DTYPE.flatten", "foxes.constants.DTYPE.getfield", "foxes.constants.DTYPE.imag", "foxes.constants.DTYPE.is_integer", "foxes.constants.DTYPE.item", "foxes.constants.DTYPE.itemset", "foxes.constants.DTYPE.itemsize", "foxes.constants.DTYPE.max", "foxes.constants.DTYPE.mean", "foxes.constants.DTYPE.min", "foxes.constants.DTYPE.nbytes", "foxes.constants.DTYPE.ndim", "foxes.constants.DTYPE.newbyteorder", "foxes.constants.DTYPE.nonzero", "foxes.constants.DTYPE.prod", "foxes.constants.DTYPE.ptp", "foxes.constants.DTYPE.put", "foxes.constants.DTYPE.ravel", "foxes.constants.DTYPE.real", "foxes.constants.DTYPE.repeat", "foxes.constants.DTYPE.reshape", "foxes.constants.DTYPE.resize", "foxes.constants.DTYPE.round", "foxes.constants.DTYPE.searchsorted", "foxes.constants.DTYPE.setfield", "foxes.constants.DTYPE.setflags", "foxes.constants.DTYPE.shape", "foxes.constants.DTYPE.size", "foxes.constants.DTYPE.sort", "foxes.constants.DTYPE.squeeze", "foxes.constants.DTYPE.std", "foxes.constants.DTYPE.strides", "foxes.constants.DTYPE.sum", "foxes.constants.DTYPE.swapaxes", "foxes.constants.DTYPE.take", "foxes.constants.DTYPE.tobytes", "foxes.constants.DTYPE.tofile", "foxes.constants.DTYPE.tolist", "foxes.constants.DTYPE.tostring", "foxes.constants.DTYPE.trace", "foxes.constants.DTYPE.transpose", "foxes.constants.DTYPE.var", "foxes.constants.DTYPE.view", "foxes.constants.FARM", "foxes.constants.GW", "foxes.constants.ITYPE", "foxes.constants.ITYPE.__abs__", "foxes.constants.ITYPE.__add__", "foxes.constants.ITYPE.__and__", "foxes.constants.ITYPE.__bool__", "foxes.constants.ITYPE.__class_getitem__", "foxes.constants.ITYPE.__divmod__", "foxes.constants.ITYPE.__eq__", "foxes.constants.ITYPE.__float__", "foxes.constants.ITYPE.__floordiv__", "foxes.constants.ITYPE.__ge__", "foxes.constants.ITYPE.__gt__", "foxes.constants.ITYPE.__hash__", "foxes.constants.ITYPE.__index__", "foxes.constants.ITYPE.__int__", "foxes.constants.ITYPE.__invert__", "foxes.constants.ITYPE.__le__", "foxes.constants.ITYPE.__lshift__", "foxes.constants.ITYPE.__lt__", "foxes.constants.ITYPE.__mod__", "foxes.constants.ITYPE.__mul__", "foxes.constants.ITYPE.__ne__", "foxes.constants.ITYPE.__neg__", "foxes.constants.ITYPE.__new__", "foxes.constants.ITYPE.__or__", "foxes.constants.ITYPE.__pos__", "foxes.constants.ITYPE.__pow__", "foxes.constants.ITYPE.__radd__", "foxes.constants.ITYPE.__rand__", "foxes.constants.ITYPE.__rdivmod__", "foxes.constants.ITYPE.__repr__", "foxes.constants.ITYPE.__rfloordiv__", "foxes.constants.ITYPE.__rlshift__", "foxes.constants.ITYPE.__rmod__", "foxes.constants.ITYPE.__rmul__", "foxes.constants.ITYPE.__ror__", "foxes.constants.ITYPE.__rpow__", "foxes.constants.ITYPE.__rrshift__", "foxes.constants.ITYPE.__rshift__", "foxes.constants.ITYPE.__rsub__", "foxes.constants.ITYPE.__rtruediv__", "foxes.constants.ITYPE.__rxor__", "foxes.constants.ITYPE.__str__", "foxes.constants.ITYPE.__sub__", "foxes.constants.ITYPE.__truediv__", "foxes.constants.ITYPE.__xor__", "foxes.constants.ITYPE.bit_count", "foxes.constants.ITYPE.denominator", "foxes.constants.ITYPE.is_integer", "foxes.constants.ITYPE.numerator", "foxes.constants.KAPPA", "foxes.constants.MW", "foxes.constants.POINT", "foxes.constants.POINTS", "foxes.constants.POP", "foxes.constants.P_UNITS", "foxes.constants.RPOINT", "foxes.constants.RPOINTS", "foxes.constants.RWEIGHTS", "foxes.constants.STATE", "foxes.constants.STATES_SEL", "foxes.constants.STATE_POINT", "foxes.constants.STATE_SOURCE_TURBINE", "foxes.constants.STATE_TURBINE", "foxes.constants.TMODELS", "foxes.constants.TMODEL_SELS", "foxes.constants.TNAME", "foxes.constants.TURBINE", "foxes.constants.TW", "foxes.constants.VALID", "foxes.constants.VARS", "foxes.constants.W", "foxes.constants.XYH", "foxes.constants.kW", "foxes.variables.AMB_CAP", "foxes.variables.AMB_CT", "foxes.variables.AMB_P", "foxes.variables.AMB_REWS", "foxes.variables.AMB_REWS2", "foxes.variables.AMB_REWS3", "foxes.variables.AMB_RHO", "foxes.variables.AMB_T", "foxes.variables.AMB_TI", "foxes.variables.AMB_WD", "foxes.variables.AMB_WS", "foxes.variables.AMB_YAW", "foxes.variables.AMB_YAWM", "foxes.variables.AMB_YLD", "foxes.variables.CAP", "foxes.variables.CT", "foxes.variables.D", "foxes.variables.EFF", "foxes.variables.H", "foxes.variables.K", "foxes.variables.KB", "foxes.variables.KTI", "foxes.variables.MAX_P", "foxes.variables.MOL", "foxes.variables.ORDER", "foxes.variables.P", "foxes.variables.PA_ALPHA", "foxes.variables.PA_BETA", "foxes.variables.REWS", "foxes.variables.REWS2", "foxes.variables.REWS3", "foxes.variables.RHO", "foxes.variables.SHEAR", "foxes.variables.T", "foxes.variables.TI", "foxes.variables.TXYH", "foxes.variables.WD", "foxes.variables.WEIGHT", "foxes.variables.WS", "foxes.variables.X", "foxes.variables.Y", "foxes.variables.YAW", "foxes.variables.YAWM", "foxes.variables.YLD", "foxes.variables.Z0", "foxes.variables.amb2var", "foxes.variables.var2amb", "foxes.input.farm_layout.add_from_csv", "foxes.input.farm_layout.add_from_df", "foxes.input.farm_layout.add_from_file", "foxes.input.farm_layout.add_from_json", "foxes.input.farm_layout.add_grid", "foxes.input.farm_layout.add_row", "foxes.input.states.FieldDataNC", "foxes.input.states.FieldDataNC.__init__", "foxes.input.states.FieldDataNC.calculate", "foxes.input.states.FieldDataNC.index", "foxes.input.states.FieldDataNC.load_data", "foxes.input.states.FieldDataNC.output_point_vars", "foxes.input.states.FieldDataNC.size", "foxes.input.states.FieldDataNC.weights", "foxes.input.states.MultiHeightStates", "foxes.input.states.MultiHeightStates.RDICT", "foxes.input.states.MultiHeightStates.__init__", "foxes.input.states.MultiHeightStates.calculate", "foxes.input.states.MultiHeightStates.finalize", "foxes.input.states.MultiHeightStates.index", "foxes.input.states.MultiHeightStates.load_data", "foxes.input.states.MultiHeightStates.output_point_vars", "foxes.input.states.MultiHeightStates.reset", "foxes.input.states.MultiHeightStates.size", "foxes.input.states.MultiHeightStates.weights", "foxes.input.states.MultiHeightTimeseries", "foxes.input.states.MultiHeightTimeseries.RDICT", "foxes.input.states.ScanWS", "foxes.input.states.ScanWS.__init__", "foxes.input.states.ScanWS.calculate", "foxes.input.states.ScanWS.load_data", "foxes.input.states.ScanWS.output_point_vars", "foxes.input.states.ScanWS.size", "foxes.input.states.ScanWS.weights", "foxes.input.states.SingleStateStates", "foxes.input.states.SingleStateStates.__init__", "foxes.input.states.SingleStateStates.calculate", "foxes.input.states.SingleStateStates.initialize", "foxes.input.states.SingleStateStates.output_point_vars", "foxes.input.states.SingleStateStates.size", "foxes.input.states.SingleStateStates.sub_models", "foxes.input.states.SingleStateStates.weights", "foxes.input.states.StatesTable", "foxes.input.states.StatesTable.RDICT", "foxes.input.states.StatesTable.__init__", "foxes.input.states.StatesTable.calculate", "foxes.input.states.StatesTable.finalize", "foxes.input.states.StatesTable.index", "foxes.input.states.StatesTable.initialize", "foxes.input.states.StatesTable.load_data", "foxes.input.states.StatesTable.output_point_vars", "foxes.input.states.StatesTable.reset", "foxes.input.states.StatesTable.size", "foxes.input.states.StatesTable.sub_models", "foxes.input.states.StatesTable.weights", "foxes.input.states.Timeseries", "foxes.input.states.Timeseries.RDICT", "foxes.input.states.create_random_abl_states", "foxes.input.windio.read_case", "foxes.models.farm_controllers.BasicFarmController", "foxes.models.farm_models.Turbine2FarmModel", "foxes.models.farm_models.Turbine2FarmModel.__init__", "foxes.models.farm_models.Turbine2FarmModel.__repr__", "foxes.models.farm_models.Turbine2FarmModel.calculate", "foxes.models.farm_models.Turbine2FarmModel.output_farm_vars", "foxes.models.farm_models.Turbine2FarmModel.sub_models", "foxes.models.model_book.Dict", "foxes.models.model_book.Dict.__getitem__", "foxes.models.model_book.Dict.__init__", "foxes.models.model_book.ModelBook", "foxes.models.model_book.ModelBook.__getitem__", "foxes.models.model_book.ModelBook.__init__", "foxes.models.model_book.ModelBook.finalize", "foxes.models.model_book.ModelBook.print_toc", "foxes.models.partial_wakes.Mapped", "foxes.models.partial_wakes.Mapped.__init__", "foxes.models.partial_wakes.Mapped.contribute_to_wake_deltas", "foxes.models.partial_wakes.Mapped.evaluate_results", "foxes.models.partial_wakes.Mapped.initialize", "foxes.models.partial_wakes.Mapped.new_wake_deltas", "foxes.models.partial_wakes.Mapped.sub_models", "foxes.models.partial_wakes.PartialAxiwake", "foxes.models.partial_wakes.PartialAxiwake.__init__", "foxes.models.partial_wakes.PartialAxiwake.__repr__", "foxes.models.partial_wakes.PartialAxiwake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake.evaluate_results", "foxes.models.partial_wakes.PartialAxiwake.initialize", "foxes.models.partial_wakes.PartialAxiwake.new_wake_deltas", "foxes.models.partial_wakes.PartialAxiwake.sub_models", "foxes.models.partial_wakes.PartialDistSlicedWake", "foxes.models.partial_wakes.PartialDistSlicedWake.__init__", "foxes.models.partial_wakes.PartialDistSlicedWake.__repr__", "foxes.models.partial_wakes.PartialDistSlicedWake.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake.evaluate_results", "foxes.models.partial_wakes.PartialDistSlicedWake.initialize", "foxes.models.partial_wakes.PartialDistSlicedWake.new_wake_deltas", "foxes.models.partial_wakes.PartialDistSlicedWake.sub_models", "foxes.models.partial_wakes.PartialGrid", "foxes.models.partial_wakes.PartialGrid.__init__", "foxes.models.partial_wakes.PartialGrid.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat", "foxes.models.partial_wakes.PartialTopHat.__init__", "foxes.models.partial_wakes.PartialTopHat.contribute_to_wake_deltas", "foxes.models.partial_wakes.PartialTopHat.evaluate_results", "foxes.models.partial_wakes.PartialTopHat.initialize", "foxes.models.partial_wakes.PartialTopHat.new_wake_deltas", "foxes.models.partial_wakes.PartialTopHat.sub_models", "foxes.models.partial_wakes.RotorPoints", "foxes.models.partial_wakes.RotorPoints.__init__", "foxes.models.partial_wakes.RotorPoints.contribute_to_wake_deltas", "foxes.models.partial_wakes.RotorPoints.evaluate_results", "foxes.models.partial_wakes.RotorPoints.get_wake_points", "foxes.models.partial_wakes.RotorPoints.new_wake_deltas", "foxes.models.point_models.SetUniformData", "foxes.models.point_models.SetUniformData.__init__", "foxes.models.point_models.SetUniformData.calculate", "foxes.models.point_models.SetUniformData.load_data", "foxes.models.point_models.SetUniformData.output_point_vars", "foxes.models.point_models.TKE2TI", "foxes.models.point_models.TKE2TI.calculate", "foxes.models.point_models.TKE2TI.output_point_vars", "foxes.models.point_models.WakeDeltas", "foxes.models.point_models.WakeDeltas.__init__", "foxes.models.point_models.WakeDeltas.calculate", "foxes.models.point_models.WakeDeltas.output_point_vars", "foxes.models.rotor_models.CentreRotor", "foxes.models.rotor_models.CentreRotor.design_points", "foxes.models.rotor_models.CentreRotor.eval_rpoint_results", "foxes.models.rotor_models.CentreRotor.get_rotor_points", "foxes.models.rotor_models.CentreRotor.n_rotor_points", "foxes.models.rotor_models.CentreRotor.rotor_point_weights", "foxes.models.rotor_models.GridRotor", "foxes.models.rotor_models.GridRotor.__init__", "foxes.models.rotor_models.GridRotor.__repr__", "foxes.models.rotor_models.GridRotor.design_points", "foxes.models.rotor_models.GridRotor.initialize", "foxes.models.rotor_models.GridRotor.n_rotor_points", "foxes.models.rotor_models.GridRotor.rotor_point_weights", "foxes.models.rotor_models.LevelRotor", "foxes.models.rotor_models.LevelRotor.__init__", "foxes.models.rotor_models.LevelRotor.__repr__", "foxes.models.rotor_models.LevelRotor.design_points", "foxes.models.rotor_models.LevelRotor.initialize", "foxes.models.rotor_models.LevelRotor.n_rotor_points", "foxes.models.rotor_models.LevelRotor.rotor_point_weights", "foxes.models.turbine_models.Calculator", "foxes.models.turbine_models.Calculator.__init__", "foxes.models.turbine_models.Calculator.calculate", "foxes.models.turbine_models.Calculator.output_farm_vars", "foxes.models.turbine_models.LookupTable", "foxes.models.turbine_models.LookupTable.__init__", "foxes.models.turbine_models.LookupTable.calculate", "foxes.models.turbine_models.LookupTable.load_data", "foxes.models.turbine_models.LookupTable.output_farm_vars", "foxes.models.turbine_models.PowerMask", "foxes.models.turbine_models.PowerMask.__init__", "foxes.models.turbine_models.PowerMask.calculate", "foxes.models.turbine_models.PowerMask.initialize", "foxes.models.turbine_models.PowerMask.output_farm_vars", "foxes.models.turbine_models.PowerMask.update_P_ct", "foxes.models.turbine_models.RotorCentreCalc", "foxes.models.turbine_models.RotorCentreCalc.__init__", "foxes.models.turbine_models.RotorCentreCalc.calculate", "foxes.models.turbine_models.RotorCentreCalc.initialize", "foxes.models.turbine_models.RotorCentreCalc.output_farm_vars", "foxes.models.turbine_models.RotorCentreCalc.sub_models", "foxes.models.turbine_models.SectorManagement", "foxes.models.turbine_models.SectorManagement.__init__", "foxes.models.turbine_models.SectorManagement.calculate", "foxes.models.turbine_models.SectorManagement.initialize", "foxes.models.turbine_models.SectorManagement.output_farm_vars", "foxes.models.turbine_models.SetFarmVars", "foxes.models.turbine_models.SetFarmVars.__init__", "foxes.models.turbine_models.SetFarmVars.add_var", "foxes.models.turbine_models.SetFarmVars.calculate", "foxes.models.turbine_models.SetFarmVars.load_data", "foxes.models.turbine_models.SetFarmVars.output_farm_vars", "foxes.models.turbine_models.SetFarmVars.reset", "foxes.models.turbine_models.SetXYHD", "foxes.models.turbine_models.SetXYHD.__init__", "foxes.models.turbine_models.SetXYHD.calculate", "foxes.models.turbine_models.SetXYHD.output_farm_vars", "foxes.models.turbine_models.TableFactors", "foxes.models.turbine_models.TableFactors.__init__", "foxes.models.turbine_models.TableFactors.calculate", "foxes.models.turbine_models.TableFactors.initialize", "foxes.models.turbine_models.TableFactors.output_farm_vars", "foxes.models.turbine_models.Thrust2Ct", "foxes.models.turbine_models.Thrust2Ct.__init__", "foxes.models.turbine_models.Thrust2Ct.calculate", "foxes.models.turbine_models.Thrust2Ct.output_farm_vars", "foxes.models.turbine_models.YAW2YAWM", "foxes.models.turbine_models.YAW2YAWM.calculate", "foxes.models.turbine_models.YAW2YAWM.output_farm_vars", "foxes.models.turbine_models.YAWM2YAW", "foxes.models.turbine_models.YAWM2YAW.calculate", "foxes.models.turbine_models.YAWM2YAW.output_farm_vars", "foxes.models.turbine_models.kTI", "foxes.models.turbine_models.kTI.__init__", "foxes.models.turbine_models.kTI.__repr__", "foxes.models.turbine_models.kTI.calculate", "foxes.models.turbine_models.kTI.output_farm_vars", "foxes.models.turbine_types.CpCtFile", "foxes.models.turbine_types.CpCtFile.__init__", "foxes.models.turbine_types.CpCtFromTwo", "foxes.models.turbine_types.CpCtFromTwo.__init__", "foxes.models.turbine_types.NullType", "foxes.models.turbine_types.NullType.calculate", "foxes.models.turbine_types.NullType.output_farm_vars", "foxes.models.turbine_types.PCtFile", "foxes.models.turbine_types.PCtFile.__init__", "foxes.models.turbine_types.PCtFile.calculate", "foxes.models.turbine_types.PCtFile.finalize", "foxes.models.turbine_types.PCtFile.load_data", "foxes.models.turbine_types.PCtFile.output_farm_vars", "foxes.models.turbine_types.PCtFromTwo", "foxes.models.turbine_types.PCtFromTwo.__init__", "foxes.models.turbine_types.PCtFromTwo.calculate", "foxes.models.turbine_types.PCtFromTwo.finalize", "foxes.models.turbine_types.PCtFromTwo.load_data", "foxes.models.turbine_types.PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsRho2PCtFromTwo", "foxes.models.turbine_types.WsRho2PCtFromTwo.__init__", "foxes.models.turbine_types.WsRho2PCtFromTwo.calculate", "foxes.models.turbine_types.WsRho2PCtFromTwo.finalize", "foxes.models.turbine_types.WsRho2PCtFromTwo.load_data", "foxes.models.turbine_types.WsRho2PCtFromTwo.output_farm_vars", "foxes.models.turbine_types.WsTI2PCtFromTwo", "foxes.models.turbine_types.WsTI2PCtFromTwo.__init__", "foxes.models.turbine_types.WsTI2PCtFromTwo.calculate", "foxes.models.turbine_types.WsTI2PCtFromTwo.finalize", "foxes.models.turbine_types.WsTI2PCtFromTwo.load_data", "foxes.models.turbine_types.WsTI2PCtFromTwo.output_farm_vars", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogNeutralWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogStableWsProfile", "foxes.models.vertical_profiles.ABLLogStableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogStableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogUnstableWsProfile.input_vars", "foxes.models.vertical_profiles.ABLLogWsProfile", "foxes.models.vertical_profiles.ABLLogWsProfile.calculate", "foxes.models.vertical_profiles.ABLLogWsProfile.input_vars", "foxes.models.vertical_profiles.DataProfile", "foxes.models.vertical_profiles.DataProfile.__init__", "foxes.models.vertical_profiles.DataProfile.calculate", "foxes.models.vertical_profiles.DataProfile.input_vars", "foxes.models.vertical_profiles.ShearedProfile", "foxes.models.vertical_profiles.ShearedProfile.calculate", "foxes.models.vertical_profiles.ShearedProfile.input_vars", "foxes.models.vertical_profiles.UniformProfile", "foxes.models.vertical_profiles.UniformProfile.__init__", "foxes.models.vertical_profiles.UniformProfile.calculate", "foxes.models.vertical_profiles.UniformProfile.input_vars", "foxes.models.wake_frames.FarmOrder", "foxes.models.wake_frames.FarmOrder.__init__", "foxes.models.wake_frames.FarmOrder.calc_order", "foxes.models.wake_frames.FarmOrder.get_centreline_points", "foxes.models.wake_frames.FarmOrder.get_wake_coos", "foxes.models.wake_frames.FarmOrder.sub_models", "foxes.models.wake_frames.RotorWD", "foxes.models.wake_frames.RotorWD.__init__", "foxes.models.wake_frames.RotorWD.calc_order", "foxes.models.wake_frames.RotorWD.get_centreline_points", "foxes.models.wake_frames.RotorWD.get_wake_coos", "foxes.models.wake_frames.SeqDynamicWakes", "foxes.models.wake_frames.SeqDynamicWakes.__init__", "foxes.models.wake_frames.SeqDynamicWakes.calc_order", "foxes.models.wake_frames.SeqDynamicWakes.get_centreline_points", "foxes.models.wake_frames.SeqDynamicWakes.get_wake_coos", "foxes.models.wake_frames.SeqDynamicWakes.get_wake_modelling_data", "foxes.models.wake_frames.SeqDynamicWakes.initialize", "foxes.models.wake_frames.Streamlines", "foxes.models.wake_frames.Streamlines.__init__", "foxes.models.wake_frames.Streamlines.__repr__", "foxes.models.wake_frames.Streamlines.calc_order", "foxes.models.wake_frames.Streamlines.get_centreline_points", "foxes.models.wake_frames.Streamlines.get_wake_coos", "foxes.models.wake_frames.Streamlines.initialize", "foxes.models.wake_frames.Timelines", "foxes.models.wake_frames.Timelines.__init__", "foxes.models.wake_frames.Timelines.calc_order", "foxes.models.wake_frames.Timelines.get_centreline_points", "foxes.models.wake_frames.Timelines.get_wake_coos", "foxes.models.wake_frames.Timelines.initialize", "foxes.models.wake_frames.YawedWakes", "foxes.models.wake_frames.YawedWakes.__init__", "foxes.models.wake_frames.YawedWakes.calc_order", "foxes.models.wake_frames.YawedWakes.get_centreline_points", "foxes.models.wake_frames.YawedWakes.get_wake_coos", "foxes.models.wake_frames.YawedWakes.sub_models", "foxes.models.wake_models.AxisymmetricWakeModel", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.AxisymmetricWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel", "foxes.models.wake_models.DistSlicedWakeModel.__init__", "foxes.models.wake_models.DistSlicedWakeModel.calc_wakes_spsel_x_yz", "foxes.models.wake_models.DistSlicedWakeModel.contribute_to_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.finalize_wake_deltas", "foxes.models.wake_models.DistSlicedWakeModel.initialize", "foxes.models.wake_models.DistSlicedWakeModel.sub_models", "foxes.models.wake_models.GaussianWakeModel", "foxes.models.wake_models.GaussianWakeModel.calc_amplitude_sigma_spsel", "foxes.models.wake_models.GaussianWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.TopHatWakeModel", "foxes.models.wake_models.TopHatWakeModel.__init__", "foxes.models.wake_models.TopHatWakeModel.calc_centreline_wake_deltas", "foxes.models.wake_models.TopHatWakeModel.calc_wake_radius", "foxes.models.wake_models.TopHatWakeModel.calc_wakes_spsel_x_r", "foxes.models.wake_models.induction.RHB", "foxes.models.wake_models.induction.RHB.__init__", "foxes.models.wake_models.induction.RHB.contribute_to_wake_deltas", "foxes.models.wake_models.induction.RHB.finalize_wake_deltas", "foxes.models.wake_models.induction.RHB.init_wake_deltas", "foxes.models.wake_models.ti.CrespoHernandezTIWake", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__init__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.__repr__", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.CrespoHernandezTIWake.calc_wake_radius", "foxes.models.wake_models.ti.CrespoHernandezTIWake.init_wake_deltas", "foxes.models.wake_models.ti.IECTIWake", "foxes.models.wake_models.ti.IECTIWake.__init__", "foxes.models.wake_models.ti.IECTIWake.__repr__", "foxes.models.wake_models.ti.IECTIWake.calc_centreline_wake_deltas", "foxes.models.wake_models.ti.IECTIWake.calc_wake_radius", "foxes.models.wake_models.ti.IECTIWake.init_wake_deltas", "foxes.models.wake_models.wind.BastankhahWake", "foxes.models.wake_models.wind.BastankhahWake.__init__", "foxes.models.wake_models.wind.BastankhahWake.__repr__", "foxes.models.wake_models.wind.BastankhahWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.BastankhahWake.init_wake_deltas", "foxes.models.wake_models.wind.JensenWake", "foxes.models.wake_models.wind.JensenWake.__init__", "foxes.models.wake_models.wind.JensenWake.__repr__", "foxes.models.wake_models.wind.JensenWake.calc_centreline_wake_deltas", "foxes.models.wake_models.wind.JensenWake.calc_wake_radius", "foxes.models.wake_models.wind.JensenWake.init_wake_deltas", "foxes.models.wake_models.wind.PorteAgelModel", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_FAR", "foxes.models.wake_models.wind.PorteAgelModel.AMPL_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.CHECK", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_FAR", "foxes.models.wake_models.wind.PorteAgelModel.DELTA_NEAR", "foxes.models.wake_models.wind.PorteAgelModel.MDATA_KEY", "foxes.models.wake_models.wind.PorteAgelModel.NEAR", "foxes.models.wake_models.wind.PorteAgelModel.PARS", "foxes.models.wake_models.wind.PorteAgelModel.R_PC", "foxes.models.wake_models.wind.PorteAgelModel.R_PC_S", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Y_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SIGMA_Z_FAR", "foxes.models.wake_models.wind.PorteAgelModel.SP_SEL", "foxes.models.wake_models.wind.PorteAgelModel.X0", "foxes.models.wake_models.wind.PorteAgelModel.__init__", "foxes.models.wake_models.wind.PorteAgelModel.calc_data", "foxes.models.wake_models.wind.PorteAgelModel.clean", "foxes.models.wake_models.wind.PorteAgelModel.get_data", "foxes.models.wake_models.wind.PorteAgelModel.has_data", "foxes.models.wake_models.wind.PorteAgelModel.pars", "foxes.models.wake_models.wind.PorteAgelWake", "foxes.models.wake_models.wind.PorteAgelWake.__init__", "foxes.models.wake_models.wind.PorteAgelWake.__repr__", "foxes.models.wake_models.wind.PorteAgelWake.calc_wakes_spsel_x_yz", "foxes.models.wake_models.wind.PorteAgelWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWake", "foxes.models.wake_models.wind.TurbOParkWake.__init__", "foxes.models.wake_models.wind.TurbOParkWake.__repr__", "foxes.models.wake_models.wind.TurbOParkWake.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWake.init_wake_deltas", "foxes.models.wake_models.wind.TurbOParkWakeIX", "foxes.models.wake_models.wind.TurbOParkWakeIX.__init__", "foxes.models.wake_models.wind.TurbOParkWakeIX.__repr__", "foxes.models.wake_models.wind.TurbOParkWakeIX.calc_amplitude_sigma_spsel", "foxes.models.wake_models.wind.TurbOParkWakeIX.finalize", "foxes.models.wake_models.wind.TurbOParkWakeIX.init_wake_deltas", "foxes.models.wake_superpositions.LinearSuperposition", "foxes.models.wake_superpositions.LinearSuperposition.__init__", "foxes.models.wake_superpositions.LinearSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.LinearSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.LinearSuperposition.input_farm_vars", "foxes.models.wake_superpositions.MaxSuperposition", "foxes.models.wake_superpositions.MaxSuperposition.__init__", "foxes.models.wake_superpositions.MaxSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.MaxSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.MaxSuperposition.initialize", "foxes.models.wake_superpositions.MaxSuperposition.input_farm_vars", "foxes.models.wake_superpositions.ProductSuperposition", "foxes.models.wake_superpositions.ProductSuperposition.__init__", "foxes.models.wake_superpositions.ProductSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.ProductSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition", "foxes.models.wake_superpositions.QuadraticSuperposition.__init__", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.QuadraticSuperposition.calc_wakes_plus_wake", "foxes.models.wake_superpositions.QuadraticSuperposition.initialize", "foxes.models.wake_superpositions.QuadraticSuperposition.input_farm_vars", "foxes.models.wake_superpositions.TISuperposition", "foxes.models.wake_superpositions.TISuperposition.__init__", "foxes.models.wake_superpositions.TISuperposition.calc_final_wake_delta", "foxes.models.wake_superpositions.TISuperposition.calc_wakes_plus_wake", "foxes.output.Animator", "foxes.output.Animator.__init__", "foxes.output.Animator.add_generator", "foxes.output.Animator.animate", "foxes.output.Animator.generators", "foxes.output.FarmLayoutOutput", "foxes.output.FarmLayoutOutput.__init__", "foxes.output.FarmLayoutOutput.get_figure", "foxes.output.FarmLayoutOutput.get_layout_data", "foxes.output.FarmLayoutOutput.get_layout_dict", "foxes.output.FarmLayoutOutput.write_csv", "foxes.output.FarmLayoutOutput.write_json", "foxes.output.FarmLayoutOutput.write_plot", "foxes.output.FarmLayoutOutput.write_xyh", "foxes.output.FarmResultsEval", "foxes.output.FarmResultsEval.__init__", "foxes.output.FarmResultsEval.add_capacity", "foxes.output.FarmResultsEval.add_efficiency", "foxes.output.FarmResultsEval.calc_farm_efficiency", "foxes.output.FarmResultsEval.calc_farm_mean", "foxes.output.FarmResultsEval.calc_farm_sum", "foxes.output.FarmResultsEval.calc_farm_yield", "foxes.output.FarmResultsEval.calc_mean_farm_power", "foxes.output.FarmResultsEval.calc_states_mean", "foxes.output.FarmResultsEval.calc_states_std", "foxes.output.FarmResultsEval.calc_states_sum", "foxes.output.FarmResultsEval.calc_turbine_mean", "foxes.output.FarmResultsEval.calc_turbine_sum", "foxes.output.FarmResultsEval.calc_turbine_yield", "foxes.output.FarmResultsEval.gen_stdata", "foxes.output.FarmResultsEval.reduce_all", "foxes.output.FarmResultsEval.reduce_states", "foxes.output.FarmResultsEval.reduce_turbines", "foxes.output.FarmResultsEval.weinsum", "foxes.output.FlowPlots2D", "foxes.output.FlowPlots2D.__init__", "foxes.output.FlowPlots2D.gen_states_fig_xy", "foxes.output.FlowPlots2D.gen_states_fig_xz", "foxes.output.FlowPlots2D.gen_states_fig_yz", "foxes.output.FlowPlots2D.get_mean_fig_xy", "foxes.output.FlowPlots2D.get_mean_fig_xz", "foxes.output.FlowPlots2D.get_mean_fig_yz", "foxes.output.Output", "foxes.output.Output.new", "foxes.output.Output.print_models", "foxes.output.Output.write", "foxes.output.ResultsWriter", "foxes.output.ResultsWriter.__init__", "foxes.output.ResultsWriter.write_csv", "foxes.output.RosePlotOutput", "foxes.output.RosePlotOutput.__init__", "foxes.output.RosePlotOutput.get_data", "foxes.output.RosePlotOutput.get_data_info", "foxes.output.RosePlotOutput.get_figure", "foxes.output.RosePlotOutput.write_figure", "foxes.output.SeqFlowAnimationPlugin", "foxes.output.SeqFlowAnimationPlugin.__init__", "foxes.output.SeqFlowAnimationPlugin.gen_images", "foxes.output.SeqFlowAnimationPlugin.initialize", "foxes.output.SeqFlowAnimationPlugin.update", "foxes.output.StateTurbineMap", "foxes.output.StateTurbineMap.__init__", "foxes.output.StateTurbineMap.plot_map", "foxes.output.StatesRosePlotOutput", "foxes.output.StatesRosePlotOutput.__init__", "foxes.output.TurbineTypeCurves", "foxes.output.TurbineTypeCurves.__init__", "foxes.output.TurbineTypeCurves.plot_curves", "foxes.utils.DataBook", "foxes.utils.DataBook.__init__", "foxes.utils.DataBook.add_data_package", "foxes.utils.DataBook.add_data_package_file", "foxes.utils.DataBook.add_file", "foxes.utils.DataBook.add_files", "foxes.utils.DataBook.get_file_path", "foxes.utils.DataBook.toc", "foxes.utils.PandasFileHelper", "foxes.utils.PandasFileHelper.DATA_FILE_FORMATS", "foxes.utils.PandasFileHelper.DEFAULT_FORMAT_DICT", "foxes.utils.PandasFileHelper.DEFAULT_READING_PARAMETERS", "foxes.utils.PandasFileHelper.DEFAULT_WRITING_PARAMETERS", "foxes.utils.PandasFileHelper.read_file", "foxes.utils.PandasFileHelper.write_file", "foxes.utils.abl.neutral.calc_ws", "foxes.utils.abl.neutral.logz", "foxes.utils.abl.neutral.ustar", "foxes.utils.abl.sheared.calc_ws", "foxes.utils.abl.stable.calc_ws", "foxes.utils.abl.stable.lgz", "foxes.utils.abl.stable.logz", "foxes.utils.abl.stable.psi", "foxes.utils.abl.stable.ustar", "foxes.utils.abl.unstable.calc_ws", "foxes.utils.abl.unstable.logz", "foxes.utils.abl.unstable.psi", "foxes.utils.abl.unstable.ustar", "foxes.utils.all_subclasses", "foxes.utils.cubic_roots", "foxes.utils.delta_wd", "foxes.utils.geom2d.AreaGeometry", "foxes.utils.geom2d.AreaGeometry.add_to_figure", "foxes.utils.geom2d.AreaGeometry.inverse", "foxes.utils.geom2d.AreaGeometry.p_max", "foxes.utils.geom2d.AreaGeometry.p_min", "foxes.utils.geom2d.AreaGeometry.points_distance", "foxes.utils.geom2d.AreaGeometry.points_inside", "foxes.utils.geom2d.AreaIntersection", "foxes.utils.geom2d.AreaIntersection.__new__", "foxes.utils.geom2d.AreaUnion", "foxes.utils.geom2d.AreaUnion.__init__", "foxes.utils.geom2d.AreaUnion.add_to_figure", "foxes.utils.geom2d.AreaUnion.inverse", "foxes.utils.geom2d.AreaUnion.p_max", "foxes.utils.geom2d.AreaUnion.p_min", "foxes.utils.geom2d.AreaUnion.points_distance", "foxes.utils.geom2d.AreaUnion.points_inside", "foxes.utils.geom2d.Circle", "foxes.utils.geom2d.Circle.__init__", "foxes.utils.geom2d.Circle.add_to_figure", "foxes.utils.geom2d.Circle.p_max", "foxes.utils.geom2d.Circle.p_min", "foxes.utils.geom2d.Circle.points_distance", "foxes.utils.geom2d.Circle.points_inside", "foxes.utils.geom2d.ClosedPolygon", "foxes.utils.geom2d.ClosedPolygon.__init__", "foxes.utils.geom2d.ClosedPolygon.add_to_figure", "foxes.utils.geom2d.ClosedPolygon.p_max", "foxes.utils.geom2d.ClosedPolygon.p_min", "foxes.utils.geom2d.ClosedPolygon.points_distance", "foxes.utils.geom2d.ClosedPolygon.points_inside", "foxes.utils.geom2d.HalfPlane", "foxes.utils.geom2d.HalfPlane.__init__", "foxes.utils.geom2d.HalfPlane.add_to_figure", "foxes.utils.geom2d.HalfPlane.inverse", "foxes.utils.geom2d.HalfPlane.p_max", "foxes.utils.geom2d.HalfPlane.p_min", "foxes.utils.geom2d.HalfPlane.points_distance", "foxes.utils.geom2d.HalfPlane.points_inside", "foxes.utils.geom2d.InvertedAreaGeometry", "foxes.utils.geom2d.InvertedAreaGeometry.__init__", "foxes.utils.geom2d.InvertedAreaGeometry.add_to_figure", "foxes.utils.geom2d.InvertedAreaGeometry.inverse", "foxes.utils.geom2d.InvertedAreaGeometry.p_max", "foxes.utils.geom2d.InvertedAreaGeometry.p_min", "foxes.utils.geom2d.InvertedAreaGeometry.points_distance", "foxes.utils.geom2d.InvertedAreaGeometry.points_inside", "foxes.opt.constraints.AreaGeometryConstraint", "foxes.opt.constraints.AreaGeometryConstraint.__init__", "foxes.opt.constraints.AreaGeometryConstraint.__str__", "foxes.opt.constraints.AreaGeometryConstraint.ana_deriv", "foxes.opt.constraints.AreaGeometryConstraint.calc_individual", "foxes.opt.constraints.AreaGeometryConstraint.calc_population", "foxes.opt.constraints.AreaGeometryConstraint.component_names", "foxes.opt.constraints.AreaGeometryConstraint.finalize", "foxes.opt.constraints.AreaGeometryConstraint.finalize_individual", "foxes.opt.constraints.AreaGeometryConstraint.finalize_population", "foxes.opt.constraints.AreaGeometryConstraint.initialize", "foxes.opt.constraints.AreaGeometryConstraint.initialized", "foxes.opt.constraints.AreaGeometryConstraint.n_components", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.n_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_float", "foxes.opt.constraints.AreaGeometryConstraint.rename_vars_int", "foxes.opt.constraints.AreaGeometryConstraint.var_names_float", "foxes.opt.constraints.AreaGeometryConstraint.var_names_int", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_float", "foxes.opt.constraints.AreaGeometryConstraint.vardeps_int", "foxes.opt.constraints.FarmBoundaryConstraint", "foxes.opt.constraints.FarmBoundaryConstraint.__init__", "foxes.opt.constraints.MinDistConstraint", "foxes.opt.constraints.MinDistConstraint.__init__", "foxes.opt.constraints.MinDistConstraint.calc_individual", "foxes.opt.constraints.MinDistConstraint.calc_population", "foxes.opt.constraints.MinDistConstraint.initialize", "foxes.opt.constraints.MinDistConstraint.n_components", "foxes.opt.constraints.MinDistConstraint.vardeps_float", "foxes.opt.core.FarmConstraint", "foxes.opt.core.FarmConstraint.__init__", "foxes.opt.core.FarmConstraint.add_to_layout_figure", "foxes.opt.core.FarmConstraint.calc_individual", "foxes.opt.core.FarmConstraint.calc_population", "foxes.opt.core.FarmConstraint.farm", "foxes.opt.core.FarmConstraint.n_components", "foxes.opt.core.FarmConstraint.n_sel_turbines", "foxes.opt.core.FarmConstraint.print_models", "foxes.opt.core.FarmConstraint.sel_turbines", "foxes.opt.core.FarmConstraint.vardeps_float", "foxes.opt.core.FarmObjective", "foxes.opt.core.FarmObjective.__init__", "foxes.opt.core.FarmObjective.add_to_layout_figure", "foxes.opt.core.FarmObjective.farm", "foxes.opt.core.FarmObjective.n_sel_turbines", "foxes.opt.core.FarmObjective.print_models", "foxes.opt.core.FarmObjective.sel_turbines", "foxes.opt.core.FarmOptProblem", "foxes.opt.core.FarmOptProblem.INT_INF", "foxes.opt.core.FarmOptProblem.__init__", "foxes.opt.core.FarmOptProblem.add_constraint", "foxes.opt.core.FarmOptProblem.add_objective", "foxes.opt.core.FarmOptProblem.add_to_layout_figure", "foxes.opt.core.FarmOptProblem.all_turbines", "foxes.opt.core.FarmOptProblem.apply_individual", "foxes.opt.core.FarmOptProblem.apply_population", "foxes.opt.core.FarmOptProblem.calc_gradients", "foxes.opt.core.FarmOptProblem.check_constraints_individual", "foxes.opt.core.FarmOptProblem.check_constraints_population", "foxes.opt.core.FarmOptProblem.constraints_tol", "foxes.opt.core.FarmOptProblem.counter", "foxes.opt.core.FarmOptProblem.evaluate_individual", "foxes.opt.core.FarmOptProblem.evaluate_population", "foxes.opt.core.FarmOptProblem.farm", "foxes.opt.core.FarmOptProblem.finalize_individual", "foxes.opt.core.FarmOptProblem.finalize_population", "foxes.opt.core.FarmOptProblem.get_gradients", "foxes.opt.core.FarmOptProblem.initial_values_float", "foxes.opt.core.FarmOptProblem.initial_values_int", "foxes.opt.core.FarmOptProblem.initialize", "foxes.opt.core.FarmOptProblem.max_values_constraints", "foxes.opt.core.FarmOptProblem.max_values_float", "foxes.opt.core.FarmOptProblem.max_values_int", "foxes.opt.core.FarmOptProblem.maximize_objs", "foxes.opt.core.FarmOptProblem.min_values_constraints", "foxes.opt.core.FarmOptProblem.min_values_float", "foxes.opt.core.FarmOptProblem.min_values_int", "foxes.opt.core.FarmOptProblem.n_constraints", "foxes.opt.core.FarmOptProblem.n_objectives", "foxes.opt.core.FarmOptProblem.n_sel_turbines", "foxes.opt.core.FarmOptProblem.n_vars_float", "foxes.opt.core.FarmOptProblem.n_vars_int", "foxes.opt.core.FarmOptProblem.parse_tvar", "foxes.opt.core.FarmOptProblem.prob_res_einsum_individual", "foxes.opt.core.FarmOptProblem.prob_res_einsum_population", "foxes.opt.core.FarmOptProblem.sel_turbines", "foxes.opt.core.FarmOptProblem.tvar", "foxes.opt.core.FarmOptProblem.update_problem_individual", "foxes.opt.core.FarmOptProblem.update_problem_population", "foxes.opt.core.FarmOptProblem.var_names_float", "foxes.opt.core.FarmOptProblem.var_names_int", "foxes.opt.core.FarmVarsProblem", "foxes.opt.core.FarmVarsProblem.initialize", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_individual", "foxes.opt.core.FarmVarsProblem.opt2farm_vars_population", "foxes.opt.core.FarmVarsProblem.update_problem_individual", "foxes.opt.core.FarmVarsProblem.update_problem_population", "foxes.opt.core.PopStates", "foxes.opt.core.PopStates.__init__", "foxes.opt.core.PopStates.calculate", "foxes.opt.core.PopStates.initialize", "foxes.opt.core.PopStates.load_data", "foxes.opt.core.PopStates.output_point_vars", "foxes.opt.core.PopStates.size", "foxes.opt.core.PopStates.weights", "foxes.opt.objectives.FarmVarObjective", "foxes.opt.objectives.FarmVarObjective.__init__", "foxes.opt.objectives.FarmVarObjective.calc_individual", "foxes.opt.objectives.FarmVarObjective.calc_population", "foxes.opt.objectives.FarmVarObjective.finalize_individual", "foxes.opt.objectives.FarmVarObjective.initialize", "foxes.opt.objectives.FarmVarObjective.maximize", "foxes.opt.objectives.FarmVarObjective.n_components", "foxes.opt.objectives.FarmVarObjective.vardeps_float", "foxes.opt.objectives.MaxFarmPower", "foxes.opt.objectives.MaxFarmPower.__init__", "foxes.opt.objectives.MaxNTurbines", "foxes.opt.objectives.MaxNTurbines.__init__", "foxes.opt.objectives.MaxNTurbines.calc_individual", "foxes.opt.objectives.MaxNTurbines.calc_population", "foxes.opt.objectives.MaxNTurbines.maximize", "foxes.opt.objectives.MaxNTurbines.n_components", "foxes.opt.objectives.MinimalMaxTI", "foxes.opt.objectives.MinimalMaxTI.__init__", "foxes.opt.problems.OptFarmVars", "foxes.opt.problems.OptFarmVars.__init__", "foxes.opt.problems.OptFarmVars.add_var", "foxes.opt.problems.OptFarmVars.initial_values_float", "foxes.opt.problems.OptFarmVars.initial_values_int", "foxes.opt.problems.OptFarmVars.initialize", "foxes.opt.problems.OptFarmVars.max_values_float", "foxes.opt.problems.OptFarmVars.max_values_int", "foxes.opt.problems.OptFarmVars.min_values_float", "foxes.opt.problems.OptFarmVars.min_values_int", "foxes.opt.problems.OptFarmVars.opt2farm_vars_individual", "foxes.opt.problems.OptFarmVars.opt2farm_vars_population", "foxes.opt.problems.OptFarmVars.var_names_float", "foxes.opt.problems.OptFarmVars.var_names_int", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Boundary.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CFixN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.CMinN.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.check_population", "foxes.opt.problems.layout.geom_layouts.constraints.Constraint.get_bounds", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.initialize", "foxes.opt.problems.layout.geom_layouts.constraints.MinDist.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.Valid", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.__init__", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_individual", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.calc_population", "foxes.opt.problems.layout.geom_layouts.constraints.Valid.n_components", "foxes.opt.problems.layout.geom_layouts.constraints.cdist", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OFixN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN.n_components", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.OMinN.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.Objective", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.__init__", "foxes.opt.problems.layout.geom_layouts.objectives.Objective.maximize", "foxes.opt.problems.layout.geom_layouts.objectives.cdist", "foxes.opt.problems.layout.geom_layouts.GeomLayout", "foxes.opt.problems.layout.geom_layouts.GeomLayout.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayout.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayout.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayout.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomLayout.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded.var_names_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrid.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.__init__", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.apply_population", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.get_fig", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.initialize", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.max_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.min_values_int", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_float", "foxes.opt.problems.layout.geom_layouts.GeomRegGrids.var_names_int", "foxes.opt.problems.layout.FarmLayoutOptProblem", "foxes.opt.problems.layout.FarmLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.initialize", "foxes.opt.problems.layout.FarmLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.FarmLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.FarmLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initial_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.max_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.min_values_int", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_float", "foxes.opt.problems.layout.RegGridsLayoutOptProblem.var_names_int", "foxes.opt.problems.layout.RegularLayoutOptProblem", "foxes.opt.problems.layout.RegularLayoutOptProblem.ANGLE", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.OFFSET_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_X", "foxes.opt.problems.layout.RegularLayoutOptProblem.SPACING_Y", "foxes.opt.problems.layout.RegularLayoutOptProblem.__init__", "foxes.opt.problems.layout.RegularLayoutOptProblem.finalize_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.initial_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.initialize", "foxes.opt.problems.layout.RegularLayoutOptProblem.max_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.min_values_float", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual", "foxes.opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population", "foxes.opt.problems.layout.RegularLayoutOptProblem.var_names_float", "foxes.utils.read_shp", "foxes.utils.read_shp_polygons", "foxes.utils.runners.DaskRunner", "foxes.utils.runners.DaskRunner.__init__", "foxes.utils.runners.DaskRunner.finalize", "foxes.utils.runners.DaskRunner.initialize", "foxes.utils.runners.DaskRunner.is_distributed", "foxes.utils.runners.DaskRunner.print", "foxes.utils.runners.DaskRunner.run", "foxes.utils.runners.DefaultRunner", "foxes.utils.runners.DefaultRunner.run", "foxes.utils.runners.Runner", "foxes.utils.runners.Runner.__init__", "foxes.utils.runners.Runner.finalize", "foxes.utils.runners.Runner.initialize", "foxes.utils.runners.Runner.initialized", "foxes.utils.runners.Runner.run", "foxes.utils.show_plotly_fig", "foxes.utils.shp2csv", "foxes.utils.shp2geom2d", "foxes.utils.two_circles.area", "foxes.utils.two_circles.calc_area", "foxes.utils.uv2wd", "foxes.utils.wd2uv", "foxes.utils.wd2wdvec", "foxes.utils.wdvec2wd", "API", "foxes.algorithms", "Downwind algorithm", "Iterative algorithm", "Sequential algorithm", "foxes.constants", "foxes.core", "foxes", "foxes.input", "foxes.models", "foxes.opt", "foxes.opt.problems", "foxes.opt.problems.layout.geom_layouts", "foxes.output", "foxes.utils", "foxes.utils.abl.neutral", "foxes.variables", "foxes.models.wake_models", "Citation", "Examples", "History", "Welcome to FOXES", "Installation", "Blockage modelling", "Static data", "Heterogeneous flow", "Layout optimization", "The model book", "Multi-height wind data", "Overview - how to setup foxes", "Power mask", "Wind sector management", "Single row of turbines", "Dynamic wakes", "Timeseries data", "Wind rose data", "Yawed rotor wakes"], "terms": {"class": [0, 9, 11, 16, 35, 40, 46, 53, 57, 62, 66, 71, 75, 77, 83, 87, 92, 102, 112, 117, 125, 128, 137, 147, 152, 159, 160, 173, 178, 181, 185, 191, 200, 206, 210, 212, 214, 217, 218, 224, 228, 231, 236, 493, 501, 512, 514, 521, 529, 542, 546, 547, 553, 556, 561, 562, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 690, 691, 692, 693, 696, 697, 702, 703, 708, 709, 714, 715, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 888, 893, 902, 922, 930, 931, 934, 937, 943, 948, 951, 953, 956, 964, 984, 987, 994, 996, 1004, 1011, 1018, 1026, 1034, 1055, 1057, 1064, 1075, 1082, 1091, 1101, 1126, 1127, 1132, 1140, 1149, 1151, 1157, 1159, 1164, 1173, 1174, 1178, 1179, 1183, 1184, 1188, 1189, 1194, 1199, 1204, 1205, 1210, 1211, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1301, 1307, 1312, 1323, 1332, 1340, 1347, 1349, 1364, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1381, 1388, 1391, 1397, 1400], "fox": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1366, 1367, 1368, 1382, 1383, 1384, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "algorithm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 124, 126, 127, 131, 133, 136, 139, 140, 141, 142, 143, 144, 149, 150, 151, 155, 157, 163, 164, 165, 166, 167, 169, 174, 175, 176, 177, 179, 182, 184, 188, 189, 193, 195, 196, 198, 202, 203, 205, 211, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 495, 497, 498, 500, 504, 505, 507, 508, 511, 516, 517, 518, 520, 523, 524, 525, 528, 532, 533, 535, 536, 537, 541, 545, 550, 551, 559, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 602, 603, 604, 606, 607, 610, 611, 614, 615, 622, 629, 634, 635, 638, 639, 640, 643, 644, 645, 649, 650, 651, 655, 656, 657, 661, 662, 663, 667, 668, 671, 672, 673, 676, 677, 679, 680, 682, 683, 687, 688, 694, 695, 698, 699, 700, 701, 704, 705, 706, 707, 710, 711, 712, 713, 716, 717, 718, 719, 743, 745, 746, 747, 751, 752, 753, 754, 756, 757, 758, 759, 760, 764, 765, 766, 767, 770, 771, 772, 773, 776, 777, 778, 781, 782, 785, 786, 787, 788, 791, 792, 795, 796, 797, 800, 801, 802, 806, 807, 808, 812, 813, 814, 818, 819, 823, 824, 825, 842, 850, 851, 855, 856, 860, 861, 862, 865, 866, 867, 870, 871, 872, 873, 876, 877, 880, 881, 882, 883, 886, 887, 904, 916, 922, 923, 924, 925, 926, 927, 928, 929, 943, 946, 947, 1082, 1084, 1134, 1135, 1136, 1137, 1139, 1308, 1329, 1364, 1370, 1373, 1377, 1384, 1387, 1389, 1390, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "downwind": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 1365, 1367, 1368, 1384, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "core": [0, 1, 2, 4, 6, 12, 16, 17, 21, 26, 27, 30, 31, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 64, 69, 73, 77, 79, 80, 81, 82, 83, 85, 86, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 490, 491, 492, 493, 495, 497, 498, 500, 501, 504, 505, 507, 508, 511, 514, 516, 517, 518, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 535, 536, 537, 541, 545, 546, 547, 548, 550, 551, 552, 556, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 618, 622, 625, 629, 632, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 661, 662, 663, 665, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 723, 726, 729, 732, 736, 739, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 785, 786, 787, 788, 789, 791, 792, 795, 796, 797, 798, 800, 801, 802, 806, 807, 808, 812, 813, 814, 818, 819, 823, 824, 825, 826, 842, 844, 845, 850, 851, 855, 856, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 904, 916, 951, 1034, 1057, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1151, 1159, 1199, 1250, 1254, 1264, 1274, 1284, 1298, 1307, 1308, 1323, 1329, 1364, 1366, 1367, 1368, 1371, 1372, 1373, 1375, 1376, 1381, 1384], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 428, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1046, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1072, 1075, 1076, 1077, 1080, 1082, 1084, 1087, 1089, 1090, 1104, 1117, 1121, 1122, 1123, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1381, 1382, 1384, 1385, 1386, 1400], "The": [0, 1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 241, 319, 323, 327, 331, 332, 333, 339, 348, 365, 366, 416, 417, 434, 437, 438, 439, 441, 442, 446, 447, 448, 449, 450, 451, 452, 455, 456, 458, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 553, 555, 556, 559, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 576, 577, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 841, 842, 844, 845, 847, 848, 850, 851, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1250, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1346, 1348, 1354, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1366, 1369, 1371, 1373, 1375, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "turbin": [0, 1, 3, 4, 9, 11, 16, 20, 21, 35, 46, 48, 49, 102, 116, 117, 123, 137, 138, 139, 140, 145, 159, 166, 173, 175, 176, 193, 195, 206, 207, 208, 209, 210, 211, 212, 218, 219, 220, 221, 222, 223, 225, 230, 231, 233, 234, 235, 238, 239, 428, 429, 430, 431, 432, 433, 451, 452, 464, 475, 481, 482, 487, 488, 489, 490, 491, 492, 546, 547, 548, 550, 556, 558, 561, 563, 564, 568, 571, 572, 576, 579, 580, 584, 586, 587, 589, 590, 594, 596, 597, 614, 632, 633, 634, 638, 641, 643, 649, 654, 655, 661, 665, 667, 671, 676, 679, 682, 687, 693, 694, 698, 704, 710, 716, 743, 745, 746, 747, 749, 751, 752, 753, 754, 756, 757, 758, 759, 761, 764, 765, 766, 768, 770, 771, 772, 774, 776, 777, 778, 781, 782, 785, 786, 791, 792, 795, 796, 797, 798, 800, 806, 807, 812, 813, 818, 823, 824, 842, 845, 850, 855, 860, 864, 866, 869, 871, 877, 879, 881, 887, 895, 900, 902, 904, 907, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 927, 928, 929, 936, 937, 939, 941, 942, 948, 951, 953, 955, 1034, 1035, 1055, 1057, 1058, 1064, 1065, 1071, 1073, 1075, 1076, 1079, 1081, 1082, 1084, 1088, 1114, 1117, 1120, 1121, 1126, 1140, 1141, 1149, 1150, 1151, 1157, 1158, 1159, 1161, 1174, 1178, 1179, 1183, 1184, 1188, 1189, 1194, 1205, 1216, 1235, 1236, 1241, 1247, 1254, 1255, 1264, 1265, 1274, 1275, 1298, 1307, 1323, 1329, 1365, 1366, 1367, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1380, 1383, 1384, 1385, 1387, 1388, 1389, 1390, 1392, 1393, 1394, 1395, 1397, 1398, 1399, 1400], "ar": [0, 35, 38, 40, 44, 46, 49, 51, 53, 56, 57, 61, 77, 81, 83, 86, 87, 92, 98, 102, 125, 128, 133, 137, 144, 147, 150, 152, 157, 159, 181, 183, 185, 189, 191, 192, 194, 195, 198, 200, 203, 210, 212, 218, 225, 226, 227, 228, 333, 487, 493, 498, 501, 508, 512, 514, 518, 521, 525, 529, 537, 542, 546, 547, 551, 561, 562, 568, 569, 576, 577, 585, 588, 595, 600, 604, 605, 607, 608, 611, 612, 613, 614, 618, 619, 621, 625, 626, 628, 632, 633, 635, 636, 640, 641, 645, 647, 648, 651, 653, 654, 657, 658, 663, 665, 668, 669, 670, 673, 674, 677, 678, 680, 681, 683, 684, 688, 689, 691, 693, 695, 696, 701, 702, 707, 708, 713, 714, 719, 786, 787, 798, 800, 801, 802, 808, 814, 819, 825, 851, 856, 862, 863, 867, 868, 873, 878, 883, 900, 918, 919, 920, 933, 936, 987, 993, 994, 996, 1003, 1004, 1010, 1011, 1017, 1018, 1025, 1026, 1033, 1034, 1055, 1057, 1064, 1082, 1088, 1091, 1092, 1093, 1101, 1126, 1132, 1137, 1159, 1161, 1173, 1178, 1183, 1188, 1194, 1199, 1201, 1202, 1203, 1204, 1210, 1215, 1253, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1358, 1368, 1372, 1373, 1375, 1376, 1378, 1381, 1383, 1384, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "evalu": [0, 16, 35, 46, 47, 62, 65, 66, 70, 71, 74, 75, 166, 175, 176, 179, 191, 195, 215, 218, 220, 222, 223, 225, 226, 227, 229, 230, 563, 564, 566, 568, 569, 571, 572, 574, 576, 579, 580, 582, 586, 589, 590, 592, 596, 597, 599, 612, 614, 618, 625, 721, 724, 727, 730, 734, 737, 741, 743, 745, 747, 749, 751, 753, 754, 756, 758, 759, 761, 764, 766, 768, 770, 772, 774, 776, 778, 780, 781, 782, 785, 786, 787, 791, 792, 795, 796, 797, 800, 801, 802, 806, 807, 808, 812, 813, 814, 818, 819, 823, 824, 825, 842, 850, 851, 855, 856, 860, 862, 865, 866, 870, 871, 876, 877, 880, 881, 886, 887, 902, 951, 971, 972, 974, 975, 976, 977, 980, 981, 1082, 1096, 1097, 1126, 1159, 1254, 1255, 1264, 1274, 1284, 1298, 1307, 1323, 1366, 1367, 1368, 1373, 1375, 1376, 1377, 1382, 1384, 1385, 1393, 1395, 1396, 1397, 1398], "onc": [0, 568, 1386, 1389, 1390, 1396, 1397, 1400], "order": [0, 35, 166, 218, 220, 241, 333, 366, 464, 546, 556, 708, 714, 743, 745, 749, 751, 754, 756, 761, 764, 768, 770, 774, 776, 1091, 1101, 1365, 1366, 1373, 1380, 1387, 1390, 1394, 1395, 1396, 1397], "i": [0, 9, 16, 22, 35, 36, 40, 42, 46, 48, 53, 55, 57, 59, 77, 79, 83, 85, 92, 94, 95, 102, 125, 126, 127, 128, 131, 137, 139, 143, 147, 149, 151, 152, 155, 159, 160, 166, 169, 173, 181, 182, 184, 185, 188, 191, 194, 195, 200, 202, 206, 210, 211, 212, 214, 218, 220, 223, 224, 228, 241, 252, 301, 324, 333, 366, 371, 379, 414, 487, 489, 493, 495, 497, 501, 504, 507, 512, 514, 516, 517, 521, 523, 529, 532, 536, 542, 544, 546, 547, 550, 561, 562, 568, 569, 576, 577, 584, 585, 587, 588, 594, 595, 600, 601, 602, 603, 605, 606, 608, 610, 612, 613, 614, 618, 619, 621, 625, 628, 632, 633, 634, 636, 638, 639, 641, 643, 647, 649, 653, 655, 658, 661, 662, 665, 667, 669, 671, 674, 676, 678, 679, 681, 682, 684, 687, 689, 691, 693, 694, 696, 697, 698, 700, 702, 703, 704, 706, 708, 710, 712, 714, 715, 716, 718, 720, 723, 726, 729, 732, 736, 739, 743, 745, 749, 751, 754, 756, 759, 761, 764, 768, 770, 774, 776, 780, 781, 782, 783, 785, 790, 791, 792, 793, 795, 797, 798, 803, 806, 809, 810, 812, 815, 818, 820, 823, 826, 847, 850, 852, 855, 857, 860, 863, 868, 874, 878, 884, 909, 930, 935, 950, 955, 992, 993, 1002, 1003, 1009, 1010, 1016, 1017, 1024, 1025, 1032, 1033, 1082, 1101, 1112, 1113, 1122, 1123, 1126, 1130, 1131, 1132, 1134, 1136, 1140, 1159, 1215, 1253, 1254, 1264, 1274, 1284, 1298, 1307, 1319, 1320, 1323, 1340, 1345, 1368, 1373, 1374, 1380, 1381, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "calcul": [0, 3, 4, 9, 11, 16, 17, 19, 20, 21, 35, 36, 37, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 59, 60, 61, 64, 69, 73, 77, 79, 80, 81, 83, 85, 86, 92, 94, 97, 98, 101, 102, 117, 118, 125, 126, 127, 128, 131, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 155, 157, 159, 164, 167, 169, 175, 176, 177, 179, 181, 182, 184, 185, 188, 189, 191, 192, 193, 195, 196, 198, 200, 202, 203, 205, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 444, 445, 469, 470, 493, 495, 497, 498, 500, 501, 504, 505, 507, 508, 511, 512, 514, 516, 517, 518, 520, 521, 523, 524, 525, 528, 529, 532, 533, 535, 536, 537, 541, 542, 546, 547, 550, 551, 559, 563, 564, 565, 566, 568, 571, 572, 573, 574, 579, 580, 581, 582, 586, 589, 590, 591, 592, 594, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 618, 619, 622, 625, 626, 629, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 661, 662, 663, 665, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 749, 751, 752, 753, 754, 756, 757, 758, 760, 761, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 776, 777, 778, 780, 781, 782, 783, 785, 786, 787, 788, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 823, 824, 825, 826, 842, 847, 850, 851, 852, 855, 856, 857, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 893, 894, 902, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 921, 922, 923, 937, 938, 952, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 983, 985, 986, 987, 992, 994, 996, 1002, 1004, 1009, 1011, 1016, 1018, 1024, 1026, 1032, 1034, 1037, 1038, 1039, 1055, 1057, 1059, 1060, 1064, 1067, 1068, 1075, 1082, 1091, 1101, 1118, 1119, 1122, 1123, 1126, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1139, 1140, 1142, 1143, 1149, 1151, 1153, 1154, 1157, 1159, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1204, 1206, 1207, 1210, 1212, 1213, 1215, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1253, 1254, 1264, 1274, 1284, 1298, 1307, 1319, 1320, 1323, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1373, 1374, 1377, 1378, 1379, 1380, 1381, 1384, 1385, 1387, 1389, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400], "provid": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 143, 147, 152, 159, 160, 166, 169, 173, 181, 185, 191, 200, 202, 210, 212, 214, 218, 224, 228, 493, 497, 501, 507, 512, 514, 517, 521, 529, 536, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 603, 605, 608, 612, 618, 625, 632, 636, 639, 641, 647, 653, 658, 662, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 700, 702, 706, 708, 712, 714, 718, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 788, 790, 793, 798, 803, 809, 815, 820, 847, 852, 857, 863, 868, 872, 874, 878, 882, 884, 930, 950, 955, 1132, 1136, 1371, 1373, 1384, 1388, 1389, 1390, 1391, 1392, 1393, 1396, 1398], "turbineord": [0, 556], "object": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 108, 109, 113, 120, 125, 128, 137, 143, 147, 152, 159, 160, 163, 165, 166, 169, 170, 173, 175, 176, 181, 185, 191, 200, 202, 210, 212, 214, 218, 224, 228, 241, 271, 291, 333, 366, 389, 493, 497, 501, 507, 512, 514, 517, 521, 529, 536, 542, 545, 546, 547, 561, 563, 564, 568, 571, 572, 576, 579, 580, 584, 586, 587, 589, 590, 594, 596, 597, 600, 603, 605, 608, 612, 618, 625, 632, 636, 639, 641, 647, 653, 658, 662, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 700, 702, 706, 708, 712, 714, 718, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 788, 790, 793, 798, 803, 809, 815, 820, 847, 852, 857, 863, 868, 872, 874, 878, 882, 884, 888, 889, 895, 917, 924, 925, 926, 927, 928, 929, 937, 941, 951, 988, 998, 1006, 1013, 1020, 1028, 1034, 1041, 1044, 1055, 1057, 1064, 1075, 1076, 1082, 1085, 1086, 1091, 1096, 1097, 1099, 1100, 1101, 1104, 1108, 1113, 1118, 1119, 1126, 1127, 1132, 1136, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1164, 1173, 1178, 1183, 1188, 1192, 1194, 1199, 1204, 1210, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1260, 1264, 1270, 1274, 1280, 1284, 1291, 1298, 1299, 1301, 1307, 1309, 1312, 1323, 1330, 1332, 1357, 1371, 1373, 1375, 1388, 1389, 1390, 1391, 1394, 1395, 1396, 1398, 1399, 1400], "state": [0, 1, 2, 3, 4, 7, 9, 11, 16, 17, 20, 21, 48, 49, 92, 93, 96, 99, 101, 102, 103, 113, 117, 122, 124, 128, 129, 132, 134, 136, 139, 166, 175, 176, 191, 193, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 219, 221, 222, 223, 225, 230, 425, 426, 427, 428, 429, 477, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 563, 564, 571, 572, 579, 580, 586, 589, 590, 596, 597, 600, 601, 612, 614, 632, 633, 634, 638, 643, 649, 655, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 746, 747, 752, 753, 757, 758, 759, 765, 766, 768, 771, 772, 777, 778, 781, 782, 785, 786, 791, 792, 795, 796, 797, 800, 806, 807, 812, 813, 818, 823, 824, 842, 845, 850, 855, 860, 866, 871, 877, 881, 887, 893, 894, 895, 902, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 925, 926, 927, 928, 929, 948, 951, 952, 1129, 1132, 1133, 1138, 1139, 1141, 1150, 1158, 1161, 1170, 1305, 1318, 1336, 1365, 1368, 1369, 1370, 1373, 1374, 1377, 1380, 1384, 1385, 1387, 1389, 1390, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "ambient": [0, 1, 3, 4, 16, 17, 20, 21, 53, 57, 176, 191, 192, 193, 195, 200, 226, 229, 240, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 485, 486, 493, 564, 572, 580, 590, 597, 608, 609, 612, 614, 618, 619, 625, 626, 787, 801, 803, 804, 864, 865, 869, 870, 876, 879, 880, 884, 885, 886, 902, 904, 910, 916, 1366, 1369, 1372, 1373, 1380, 1384, 1385, 1387, 1392, 1393, 1394, 1396, 1397, 1398, 1399], "wake_model": [0, 1, 46, 47, 173, 174, 219, 556, 561, 562, 568, 569, 576, 577, 584, 585, 587, 588, 594, 595, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 1387, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "list": [0, 1, 2, 4, 9, 16, 17, 21, 35, 38, 39, 40, 44, 45, 46, 47, 49, 51, 52, 53, 56, 57, 58, 61, 66, 67, 71, 72, 77, 81, 82, 83, 86, 92, 96, 98, 100, 102, 117, 118, 125, 127, 128, 129, 130, 132, 133, 135, 137, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 171, 173, 174, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 200, 201, 203, 206, 207, 208, 209, 210, 212, 214, 216, 218, 219, 224, 228, 231, 233, 235, 236, 366, 379, 487, 491, 492, 493, 494, 496, 498, 501, 503, 506, 508, 509, 512, 514, 518, 521, 525, 527, 529, 531, 534, 537, 538, 540, 542, 546, 547, 551, 552, 560, 561, 562, 567, 568, 569, 575, 576, 577, 583, 584, 585, 587, 588, 593, 594, 595, 600, 601, 604, 605, 607, 608, 609, 611, 612, 618, 619, 625, 626, 632, 633, 635, 636, 637, 640, 641, 645, 647, 651, 652, 653, 654, 657, 658, 663, 665, 668, 669, 670, 673, 674, 677, 678, 680, 681, 683, 684, 688, 689, 691, 693, 695, 696, 701, 702, 707, 708, 713, 714, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 735, 736, 738, 739, 742, 743, 748, 749, 754, 761, 768, 774, 779, 780, 783, 789, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 864, 867, 868, 869, 873, 874, 878, 879, 883, 884, 888, 890, 892, 904, 907, 908, 911, 913, 914, 915, 917, 936, 939, 941, 942, 955, 956, 958, 961, 963, 964, 984, 995, 996, 997, 1034, 1035, 1037, 1038, 1039, 1040, 1051, 1052, 1055, 1057, 1058, 1059, 1060, 1064, 1065, 1067, 1068, 1073, 1075, 1076, 1081, 1084, 1091, 1101, 1118, 1119, 1120, 1124, 1125, 1127, 1132, 1137, 1140, 1141, 1142, 1143, 1149, 1150, 1151, 1153, 1154, 1157, 1158, 1161, 1171, 1172, 1175, 1176, 1180, 1181, 1185, 1186, 1190, 1191, 1196, 1197, 1206, 1207, 1212, 1213, 1215, 1218, 1219, 1225, 1226, 1231, 1232, 1237, 1238, 1243, 1244, 1253, 1263, 1273, 1283, 1296, 1297, 1306, 1321, 1322, 1337, 1339, 1364, 1367, 1368, 1370, 1371, 1372, 1377, 1384, 1387, 1388, 1391, 1394], "wakemodel": [0, 46, 47, 49, 173, 174, 219, 224, 225, 226, 227, 556, 562, 569, 577, 585, 588, 595, 783, 798, 1370, 1381], "wake": [0, 1, 3, 4, 20, 21, 35, 40, 46, 47, 48, 49, 77, 166, 173, 174, 175, 176, 178, 179, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 459, 466, 467, 485, 556, 561, 562, 563, 564, 566, 568, 569, 571, 572, 574, 576, 577, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 608, 684, 743, 744, 746, 747, 749, 752, 753, 754, 757, 758, 759, 761, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 841, 842, 845, 847, 848, 850, 851, 852, 853, 855, 856, 857, 858, 860, 862, 863, 864, 865, 866, 868, 870, 871, 874, 875, 876, 877, 878, 880, 881, 884, 885, 886, 887, 1254, 1264, 1366, 1367, 1370, 1373, 1375, 1376, 1380, 1381, 1383, 1384, 1385, 1387, 1389, 1393, 1394, 1396, 1398, 1399], "model": [0, 1, 2, 3, 4, 6, 9, 12, 16, 17, 20, 21, 27, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 115, 117, 125, 126, 127, 128, 129, 130, 131, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 430, 431, 466, 467, 487, 493, 495, 497, 498, 501, 504, 505, 507, 508, 512, 514, 516, 517, 518, 521, 523, 524, 525, 527, 529, 532, 533, 535, 536, 537, 540, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 893, 902, 922, 930, 931, 932, 934, 937, 948, 951, 953, 954, 955, 1034, 1055, 1057, 1064, 1072, 1075, 1080, 1126, 1127, 1132, 1134, 1135, 1136, 1137, 1140, 1149, 1151, 1157, 1161, 1364, 1369, 1370, 1371, 1374, 1378, 1380, 1383, 1384, 1385, 1388, 1389, 1390, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "appli": [0, 1, 49, 83, 225, 226, 227, 229, 230, 786, 787, 800, 801, 802, 808, 814, 819, 825, 851, 856, 862, 865, 866, 870, 871, 876, 877, 880, 881, 886, 887, 909, 1082, 1089, 1090, 1126, 1159, 1161, 1215, 1253, 1254, 1256, 1257, 1264, 1266, 1267, 1274, 1276, 1277, 1284, 1286, 1287, 1298, 1307, 1323, 1366, 1367, 1373, 1384, 1387, 1390, 1397, 1400], "all": [0, 1, 2, 3, 4, 9, 16, 20, 21, 35, 36, 39, 40, 42, 45, 46, 48, 52, 53, 55, 57, 59, 77, 79, 82, 83, 85, 92, 94, 100, 101, 102, 125, 126, 128, 131, 135, 136, 137, 139, 143, 146, 147, 149, 152, 155, 158, 159, 160, 169, 171, 173, 174, 180, 181, 182, 185, 188, 190, 191, 195, 200, 202, 205, 210, 211, 212, 214, 218, 220, 224, 228, 229, 231, 235, 241, 296, 333, 366, 493, 494, 495, 497, 500, 501, 504, 507, 511, 512, 514, 516, 517, 520, 521, 523, 527, 528, 529, 532, 536, 540, 541, 542, 546, 547, 550, 552, 556, 561, 567, 568, 575, 576, 583, 584, 587, 593, 594, 598, 600, 602, 603, 605, 606, 608, 610, 612, 614, 618, 625, 632, 633, 634, 636, 638, 639, 641, 643, 647, 649, 652, 653, 655, 658, 661, 662, 664, 665, 667, 669, 671, 674, 676, 678, 679, 681, 682, 684, 687, 689, 691, 693, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 723, 726, 729, 732, 736, 739, 743, 745, 748, 749, 751, 754, 756, 761, 764, 768, 770, 774, 776, 779, 780, 783, 788, 789, 790, 793, 798, 803, 809, 815, 820, 826, 843, 847, 852, 857, 863, 865, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 893, 895, 902, 921, 922, 930, 932, 934, 936, 937, 939, 941, 942, 948, 951, 953, 984, 1034, 1037, 1038, 1039, 1053, 1054, 1055, 1057, 1059, 1060, 1063, 1064, 1067, 1068, 1072, 1074, 1075, 1080, 1082, 1084, 1088, 1091, 1097, 1101, 1112, 1113, 1126, 1132, 1134, 1136, 1139, 1140, 1141, 1142, 1143, 1148, 1149, 1150, 1151, 1153, 1154, 1157, 1158, 1159, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1203, 1204, 1206, 1207, 1210, 1212, 1213, 1215, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1253, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1339, 1359, 1364, 1370, 1371, 1372, 1373, 1378, 1384, 1386, 1388, 1389, 1390, 1391, 1392, 1393, 1396, 1397, 1399], "rotor_model": [0, 1, 556, 568, 569, 576, 577, 585, 587, 588, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 1387, 1389, 1390, 1391, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "rotormodel": [0, 191, 192, 193, 194, 195, 196, 197, 198, 199, 556, 568, 569, 576, 577, 585, 587, 588, 612, 618, 625, 1370, 1373], "rotor": [0, 1, 137, 139, 147, 148, 173, 191, 193, 194, 195, 196, 197, 199, 206, 207, 212, 213, 240, 422, 423, 424, 443, 444, 445, 456, 468, 469, 470, 475, 487, 556, 568, 569, 576, 577, 584, 585, 587, 588, 594, 598, 612, 613, 614, 615, 616, 617, 618, 621, 623, 624, 625, 626, 628, 630, 631, 647, 648, 659, 665, 666, 749, 874, 893, 894, 895, 1034, 1035, 1161, 1174, 1369, 1370, 1373, 1380, 1383, 1384, 1385, 1387, 1390, 1393, 1397, 1398], "wake_fram": [0, 1, 173, 174, 556, 562, 568, 569, 577, 584, 585, 587, 588, 594, 595, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 1387, 1389, 1390, 1391, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "wakefram": [0, 173, 174, 218, 219, 220, 221, 222, 223, 556, 562, 569, 577, 585, 588, 595, 743, 744, 749, 754, 761, 768, 774, 775, 1370, 1373], "frame": [0, 1, 35, 173, 174, 194, 218, 219, 221, 222, 225, 501, 556, 562, 569, 577, 585, 588, 595, 600, 601, 613, 621, 628, 743, 744, 746, 747, 752, 753, 757, 758, 765, 766, 771, 772, 774, 775, 777, 778, 786, 800, 826, 1338, 1366, 1370, 1373, 1381, 1384, 1387, 1389, 1393, 1397, 1400], "partial_wakes_model": [0, 1, 1387, 1389, 1390, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "partialwakesmodel": [0, 173, 174, 175, 176, 177, 178, 179, 180, 561, 568, 576, 587, 594, 1370, 1373], "partial": [0, 1, 173, 178, 556, 561, 562, 568, 576, 584, 587, 594, 780, 783, 1370, 1373, 1381, 1387, 1393, 1397], "farm_control": [0, 1, 546, 556, 1391], "farmcontrol": [0, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 546, 556, 1370, 1373], "farm": [0, 1, 3, 4, 9, 11, 16, 17, 20, 21, 23, 25, 26, 36, 40, 42, 48, 49, 53, 55, 59, 64, 69, 73, 77, 79, 85, 91, 94, 102, 103, 116, 131, 137, 139, 140, 147, 149, 152, 155, 159, 166, 173, 175, 176, 179, 182, 188, 191, 193, 195, 196, 206, 207, 211, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 364, 487, 488, 489, 490, 491, 492, 495, 504, 516, 523, 532, 545, 546, 547, 550, 556, 561, 563, 564, 566, 568, 571, 572, 574, 576, 579, 580, 582, 584, 586, 587, 589, 590, 592, 594, 596, 597, 598, 599, 602, 606, 610, 614, 615, 632, 633, 634, 638, 643, 649, 655, 658, 661, 665, 667, 671, 676, 679, 682, 685, 687, 694, 698, 704, 710, 716, 743, 745, 746, 747, 751, 752, 753, 756, 757, 758, 759, 764, 765, 766, 770, 771, 772, 774, 775, 776, 777, 778, 781, 782, 785, 786, 787, 791, 792, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 812, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 842, 847, 848, 850, 851, 855, 856, 860, 862, 865, 866, 870, 871, 876, 877, 880, 881, 886, 887, 893, 894, 895, 896, 897, 902, 903, 904, 905, 906, 909, 910, 922, 923, 924, 925, 926, 927, 928, 929, 934, 935, 937, 938, 939, 941, 942, 947, 948, 949, 952, 1034, 1055, 1057, 1064, 1069, 1075, 1078, 1082, 1098, 1122, 1123, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1140, 1149, 1151, 1157, 1159, 1161, 1169, 1170, 1254, 1264, 1274, 1284, 1298, 1304, 1305, 1307, 1317, 1318, 1319, 1320, 1323, 1335, 1336, 1364, 1365, 1366, 1367, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1377, 1382, 1384, 1385, 1387, 1389, 1390, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "control": [0, 1, 546, 556, 1373, 1387, 1397], "n_state": [0, 4, 16, 17, 21, 36, 42, 48, 49, 55, 59, 79, 85, 94, 101, 113, 117, 120, 122, 131, 136, 137, 139, 149, 155, 166, 175, 176, 182, 188, 193, 195, 196, 205, 206, 207, 208, 209, 211, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 495, 500, 504, 511, 516, 520, 523, 528, 532, 541, 544, 550, 563, 564, 571, 572, 579, 580, 586, 589, 590, 596, 597, 598, 602, 606, 610, 614, 615, 632, 633, 634, 638, 643, 649, 655, 660, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 745, 746, 747, 751, 752, 753, 756, 757, 758, 759, 764, 765, 766, 770, 771, 772, 776, 777, 778, 781, 782, 785, 786, 787, 791, 792, 795, 796, 797, 800, 801, 802, 806, 807, 808, 812, 813, 814, 818, 819, 823, 824, 825, 842, 845, 850, 851, 855, 856, 860, 862, 865, 866, 870, 871, 876, 877, 880, 881, 886, 887, 1082, 1084, 1126, 1128, 1129, 1132, 1134, 1139, 1159, 1169, 1170, 1298, 1304, 1305, 1307, 1317, 1318, 1323, 1335, 1336, 1372, 1374, 1387, 1396, 1397], "int": [0, 1, 9, 10, 13, 22, 28, 33, 37, 43, 50, 60, 64, 69, 73, 80, 95, 97, 99, 102, 103, 114, 121, 122, 123, 124, 134, 141, 142, 143, 156, 164, 167, 169, 170, 175, 176, 177, 193, 195, 197, 202, 204, 206, 207, 209, 233, 234, 241, 262, 366, 380, 412, 487, 489, 490, 491, 492, 494, 497, 499, 501, 503, 505, 507, 509, 510, 517, 519, 524, 526, 529, 531, 533, 535, 536, 538, 539, 559, 563, 564, 565, 568, 569, 571, 572, 573, 577, 579, 580, 581, 585, 586, 589, 590, 591, 596, 597, 603, 614, 616, 618, 619, 622, 623, 625, 626, 629, 630, 639, 644, 650, 656, 662, 672, 699, 700, 705, 706, 711, 712, 717, 718, 733, 760, 761, 762, 767, 773, 788, 861, 872, 882, 891, 893, 894, 895, 900, 904, 905, 916, 917, 924, 925, 926, 927, 928, 929, 936, 939, 941, 942, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1067, 1068, 1070, 1071, 1073, 1075, 1076, 1079, 1081, 1082, 1084, 1085, 1086, 1091, 1092, 1093, 1095, 1099, 1100, 1101, 1103, 1104, 1107, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1121, 1126, 1127, 1129, 1132, 1133, 1135, 1136, 1138, 1140, 1142, 1143, 1144, 1145, 1147, 1149, 1151, 1153, 1154, 1156, 1157, 1159, 1161, 1163, 1164, 1166, 1168, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1216, 1218, 1219, 1220, 1222, 1223, 1225, 1226, 1228, 1229, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1243, 1244, 1246, 1247, 1250, 1254, 1255, 1260, 1264, 1265, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1280, 1284, 1285, 1290, 1291, 1293, 1295, 1297, 1298, 1299, 1301, 1305, 1307, 1308, 1309, 1311, 1312, 1314, 1316, 1318, 1322, 1323, 1330, 1332, 1336, 1339, 1340, 1341, 1356, 1360, 1361, 1362, 1363, 1369, 1388], "number": [0, 9, 10, 13, 16, 33, 92, 99, 102, 116, 117, 121, 122, 123, 128, 134, 191, 197, 200, 204, 231, 234, 241, 252, 301, 324, 332, 348, 366, 371, 412, 414, 492, 493, 499, 501, 510, 512, 514, 519, 521, 526, 529, 539, 542, 568, 569, 612, 616, 618, 619, 623, 625, 626, 630, 669, 775, 794, 804, 810, 815, 816, 821, 826, 841, 848, 852, 853, 857, 858, 863, 864, 868, 869, 878, 879, 895, 900, 924, 925, 926, 927, 928, 929, 939, 941, 942, 1034, 1046, 1047, 1048, 1055, 1057, 1062, 1064, 1070, 1075, 1082, 1112, 1113, 1115, 1116, 1126, 1129, 1132, 1138, 1140, 1147, 1149, 1151, 1156, 1157, 1159, 1170, 1173, 1174, 1177, 1178, 1179, 1182, 1183, 1184, 1187, 1188, 1193, 1194, 1198, 1199, 1204, 1205, 1209, 1210, 1214, 1215, 1216, 1222, 1223, 1228, 1229, 1234, 1235, 1236, 1240, 1241, 1246, 1247, 1250, 1253, 1254, 1255, 1264, 1265, 1274, 1275, 1284, 1285, 1298, 1305, 1307, 1308, 1318, 1323, 1336, 1341, 1374, 1376, 1382, 1390, 1391, 1393], "classmethod": [0, 6, 9, 12, 16, 27, 102, 112, 117, 120, 173, 178, 214, 217, 561, 568, 576, 584, 587, 594, 641, 646, 720, 723, 726, 729, 732, 736, 739, 893, 902, 922, 930, 931, 932, 933, 934, 937, 940, 948, 951, 953, 964, 969, 970, 1034, 1055, 1057, 1064, 1072, 1075, 1080, 1082, 1117, 1121, 1126, 1140, 1149, 1151, 1157, 1159, 1298, 1307, 1323, 1340, 1344], "get_model": [0, 6, 9, 12, 16, 27], "name": [0, 3, 4, 6, 9, 12, 16, 17, 20, 21, 27, 35, 38, 39, 40, 44, 45, 46, 49, 51, 52, 53, 56, 57, 61, 62, 63, 66, 67, 71, 72, 77, 81, 83, 86, 92, 98, 100, 102, 110, 112, 117, 118, 119, 120, 125, 128, 133, 135, 137, 138, 144, 145, 146, 147, 150, 152, 157, 158, 159, 160, 163, 165, 172, 173, 178, 179, 180, 181, 183, 185, 189, 190, 191, 193, 198, 200, 203, 206, 207, 210, 212, 213, 214, 216, 217, 218, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 238, 239, 432, 487, 490, 491, 492, 493, 494, 498, 501, 503, 508, 512, 514, 518, 521, 522, 525, 527, 529, 531, 537, 540, 542, 544, 546, 547, 551, 552, 553, 555, 556, 560, 561, 562, 566, 567, 568, 574, 576, 582, 583, 584, 587, 592, 593, 594, 599, 600, 601, 604, 605, 607, 608, 611, 612, 618, 619, 625, 626, 632, 635, 636, 637, 640, 641, 645, 647, 648, 651, 652, 653, 654, 657, 658, 660, 663, 665, 668, 669, 673, 674, 675, 677, 678, 680, 681, 683, 684, 685, 688, 689, 690, 691, 692, 693, 695, 696, 697, 701, 702, 703, 707, 708, 709, 713, 714, 715, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 735, 736, 738, 739, 742, 743, 748, 749, 754, 761, 768, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 792, 793, 794, 795, 797, 798, 800, 801, 802, 803, 804, 806, 808, 809, 810, 812, 814, 815, 816, 819, 820, 821, 823, 825, 826, 847, 848, 850, 851, 852, 853, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 883, 884, 886, 887, 893, 895, 902, 917, 918, 919, 920, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 939, 940, 941, 942, 948, 951, 953, 955, 956, 959, 962, 1034, 1035, 1040, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1058, 1064, 1065, 1072, 1075, 1076, 1080, 1082, 1084, 1117, 1121, 1124, 1125, 1126, 1127, 1128, 1129, 1132, 1137, 1140, 1141, 1149, 1150, 1151, 1152, 1157, 1158, 1159, 1161, 1169, 1170, 1171, 1172, 1173, 1174, 1178, 1179, 1183, 1184, 1188, 1189, 1194, 1195, 1199, 1204, 1205, 1210, 1211, 1216, 1217, 1223, 1224, 1229, 1230, 1235, 1236, 1241, 1242, 1247, 1248, 1250, 1251, 1254, 1263, 1264, 1273, 1274, 1283, 1284, 1296, 1297, 1298, 1304, 1305, 1306, 1307, 1308, 1317, 1318, 1321, 1322, 1323, 1329, 1335, 1336, 1337, 1339, 1369, 1371, 1378, 1384, 1386, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1398], "get": [0, 6, 9, 12, 16, 26, 27, 30, 31, 35, 40, 46, 53, 57, 62, 65, 66, 70, 71, 74, 75, 77, 83, 92, 102, 107, 117, 124, 125, 128, 137, 147, 152, 159, 160, 165, 173, 181, 185, 191, 200, 210, 212, 214, 218, 221, 224, 228, 236, 241, 315, 366, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 598, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 746, 749, 752, 754, 757, 761, 765, 768, 771, 774, 777, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 937, 939, 951, 956, 962, 963, 987, 989, 994, 996, 999, 1004, 1011, 1018, 1021, 1026, 1029, 1034, 1036, 1053, 1054, 1055, 1057, 1063, 1064, 1074, 1075, 1082, 1094, 1105, 1109, 1121, 1126, 1132, 1140, 1148, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1384, 1388], "specif": [0, 6, 9, 12, 16, 27, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 172, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 333, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132, 1366, 1367, 1368, 1378, 1398], "mbook": [0, 1, 16, 17, 102, 103, 545, 951, 952, 953, 954, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "constructor": [0, 1, 9, 10, 16, 17, 35, 40, 41, 46, 47, 53, 54, 57, 58, 62, 63, 66, 67, 71, 72, 75, 76, 77, 78, 83, 84, 87, 88, 92, 93, 102, 103, 112, 117, 118, 125, 128, 129, 137, 138, 147, 148, 152, 153, 159, 160, 161, 173, 174, 181, 185, 186, 191, 192, 200, 206, 207, 210, 212, 213, 214, 218, 224, 228, 231, 232, 236, 237, 493, 494, 501, 503, 512, 514, 515, 521, 522, 529, 531, 542, 546, 547, 548, 553, 555, 556, 558, 561, 562, 568, 569, 576, 577, 584, 585, 587, 588, 594, 595, 600, 601, 605, 608, 609, 612, 618, 619, 625, 626, 632, 633, 636, 637, 641, 642, 647, 648, 653, 654, 658, 659, 665, 666, 669, 670, 674, 675, 678, 681, 684, 685, 689, 690, 691, 692, 693, 696, 697, 702, 703, 708, 709, 714, 715, 720, 723, 726, 729, 732, 733, 736, 739, 740, 743, 744, 749, 750, 754, 755, 761, 762, 768, 769, 774, 775, 780, 783, 784, 790, 793, 794, 798, 799, 803, 804, 809, 810, 815, 816, 820, 821, 826, 841, 847, 848, 852, 853, 857, 858, 863, 864, 868, 869, 874, 875, 878, 879, 884, 885, 888, 889, 893, 894, 902, 903, 922, 923, 934, 935, 937, 938, 943, 944, 948, 949, 951, 952, 953, 954, 956, 957, 994, 995, 996, 997, 1011, 1012, 1018, 1019, 1026, 1027, 1034, 1035, 1055, 1056, 1057, 1058, 1064, 1065, 1082, 1084, 1126, 1132, 1133, 1140, 1141, 1149, 1150, 1151, 1152, 1157, 1158, 1159, 1160, 1173, 1174, 1178, 1179, 1183, 1184, 1188, 1189, 1204, 1205, 1210, 1211, 1216, 1217, 1223, 1224, 1229, 1230, 1235, 1236, 1241, 1242, 1247, 1248, 1254, 1255, 1264, 1265, 1274, 1275, 1284, 1285, 1298, 1323, 1329, 1340, 1341, 1391, 1398], "init_st": [0, 7, 9, 16], "initi": [0, 7, 8, 9, 16, 18, 35, 37, 40, 43, 46, 50, 53, 57, 60, 77, 80, 83, 87, 90, 92, 97, 102, 111, 118, 120, 125, 127, 128, 137, 142, 145, 147, 152, 159, 160, 167, 168, 173, 177, 179, 181, 185, 191, 200, 210, 212, 214, 218, 224, 227, 228, 493, 494, 501, 512, 514, 521, 524, 529, 535, 542, 546, 547, 561, 565, 566, 568, 573, 574, 576, 581, 582, 584, 587, 591, 592, 594, 599, 600, 605, 608, 612, 618, 622, 625, 629, 632, 636, 641, 644, 647, 650, 653, 656, 658, 665, 669, 672, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 760, 761, 767, 768, 773, 774, 780, 783, 788, 790, 793, 798, 802, 803, 808, 809, 814, 815, 819, 820, 825, 826, 847, 851, 852, 856, 857, 862, 863, 868, 872, 874, 878, 882, 884, 943, 946, 1034, 1044, 1045, 1055, 1057, 1061, 1064, 1075, 1082, 1102, 1103, 1104, 1126, 1127, 1132, 1135, 1140, 1145, 1149, 1151, 1157, 1159, 1161, 1162, 1163, 1164, 1173, 1178, 1183, 1188, 1192, 1194, 1195, 1199, 1200, 1204, 1208, 1210, 1216, 1220, 1223, 1229, 1235, 1241, 1247, 1250, 1251, 1254, 1259, 1260, 1264, 1269, 1270, 1274, 1279, 1280, 1284, 1289, 1290, 1291, 1298, 1300, 1301, 1307, 1310, 1311, 1312, 1323, 1331, 1332, 1340, 1343, 1347, 1349, 1350, 1352, 1353, 1384, 1387, 1390, 1392, 1397], "need": [0, 7, 9, 16, 166, 214, 216, 223, 720, 722, 723, 725, 726, 728, 729, 731, 732, 735, 736, 738, 739, 742, 759, 863, 867, 868, 873, 878, 883, 1384, 1387, 1390, 1392, 1394, 1395, 1399], "all_model": [0, 2, 9, 16], "with_stat": [0, 2, 9, 16], "true": [0, 2, 3, 4, 9, 11, 16, 29, 64, 69, 73, 166, 168, 195, 219, 236, 241, 324, 366, 414, 490, 494, 544, 614, 618, 619, 625, 626, 665, 666, 845, 858, 917, 924, 925, 926, 927, 928, 929, 956, 962, 992, 993, 1002, 1003, 1004, 1006, 1009, 1010, 1011, 1013, 1016, 1017, 1018, 1020, 1024, 1025, 1032, 1033, 1045, 1088, 1151, 1152, 1258, 1268, 1278, 1288, 1339, 1341, 1389, 1390, 1392, 1394, 1397, 1398, 1399], "return": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 162, 173, 181, 185, 191, 200, 210, 212, 214, 218, 223, 224, 228, 241, 244, 245, 246, 250, 253, 254, 256, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 301, 324, 366, 368, 369, 372, 373, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 493, 501, 512, 514, 521, 529, 542, 546, 547, 549, 561, 568, 570, 576, 578, 584, 587, 594, 600, 605, 608, 612, 618, 620, 625, 627, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 686, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 759, 761, 763, 768, 774, 780, 783, 790, 793, 798, 803, 805, 809, 811, 815, 817, 820, 822, 826, 847, 849, 852, 854, 857, 859, 863, 868, 874, 878, 884, 893, 912, 917, 924, 925, 926, 927, 928, 929, 937, 951, 987, 994, 996, 1004, 1011, 1018, 1026, 1034, 1055, 1057, 1064, 1075, 1132, 1140, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1201, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1384, 1396], "calc_farm": [0, 3, 9, 11, 16, 20, 1082, 1084, 1387, 1389, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "calc_paramet": [0, 3, 4, 20, 21], "persist": [0, 3, 20], "final": [0, 3, 4, 5, 9, 11, 16, 20, 21, 35, 40, 46, 53, 57, 77, 83, 87, 89, 92, 102, 106, 125, 128, 137, 141, 145, 147, 152, 159, 160, 164, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 226, 228, 229, 493, 501, 505, 512, 514, 521, 529, 533, 542, 546, 547, 556, 559, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 699, 702, 705, 708, 711, 714, 717, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 787, 790, 793, 798, 801, 803, 809, 815, 820, 826, 847, 852, 857, 861, 863, 864, 865, 868, 870, 874, 875, 876, 878, 880, 884, 886, 943, 1034, 1041, 1042, 1043, 1055, 1057, 1064, 1075, 1082, 1099, 1100, 1126, 1132, 1140, 1144, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1299, 1307, 1309, 1323, 1330, 1340, 1342, 1347, 1349, 1351, 1384, 1390, 1395, 1397, 1399], "data": [0, 1, 3, 4, 9, 11, 16, 20, 21, 26, 30, 31, 35, 36, 40, 42, 46, 48, 49, 53, 55, 57, 59, 77, 79, 83, 85, 87, 89, 90, 91, 92, 94, 97, 102, 103, 105, 107, 108, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 137, 139, 143, 147, 149, 151, 152, 155, 159, 160, 163, 165, 166, 167, 169, 173, 175, 176, 179, 181, 182, 184, 185, 188, 191, 193, 195, 196, 200, 202, 206, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 237, 238, 239, 241, 313, 315, 333, 366, 487, 488, 489, 490, 493, 494, 495, 497, 501, 503, 504, 507, 512, 514, 516, 517, 521, 522, 523, 529, 531, 532, 536, 542, 544, 546, 547, 550, 561, 563, 564, 566, 568, 571, 572, 574, 576, 579, 580, 582, 584, 586, 587, 589, 590, 592, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 608, 610, 612, 614, 615, 618, 625, 632, 634, 636, 637, 638, 639, 641, 643, 646, 647, 649, 653, 654, 655, 658, 660, 661, 662, 665, 666, 667, 669, 670, 671, 674, 676, 678, 679, 681, 682, 684, 685, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 700, 702, 703, 704, 706, 708, 709, 710, 712, 714, 715, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 741, 743, 745, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 764, 765, 766, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 785, 786, 787, 788, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 812, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 842, 843, 844, 845, 847, 848, 850, 851, 852, 855, 856, 857, 860, 862, 863, 865, 866, 868, 870, 871, 872, 874, 876, 877, 878, 880, 881, 882, 884, 886, 887, 893, 894, 902, 907, 908, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 922, 930, 933, 934, 935, 936, 937, 939, 941, 942, 943, 946, 947, 948, 951, 953, 956, 957, 963, 964, 969, 970, 973, 979, 983, 1034, 1042, 1043, 1055, 1057, 1064, 1075, 1082, 1099, 1100, 1122, 1123, 1126, 1130, 1131, 1132, 1134, 1136, 1140, 1144, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1299, 1307, 1309, 1319, 1320, 1323, 1330, 1338, 1366, 1367, 1369, 1370, 1371, 1372, 1373, 1377, 1378, 1379, 1380, 1383, 1384, 1385, 1387, 1389, 1390, 1393, 1394, 1395, 1396, 1397, 1400], "calc_point": [0, 4, 9, 16, 21, 924, 925, 926, 927, 928, 929, 1387, 1396], "farm_result": [0, 3, 4, 9, 11, 16, 20, 21, 25, 893, 894, 902, 903, 922, 923, 934, 935, 948, 949, 1387, 1389, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "point": [0, 1, 4, 9, 14, 16, 17, 21, 24, 31, 32, 46, 48, 49, 57, 58, 59, 91, 94, 102, 113, 117, 120, 121, 128, 129, 131, 166, 175, 176, 179, 181, 182, 185, 188, 191, 193, 194, 195, 196, 197, 199, 218, 221, 222, 223, 225, 226, 227, 229, 230, 240, 241, 301, 324, 418, 419, 422, 423, 424, 427, 491, 492, 495, 504, 516, 523, 532, 556, 563, 564, 566, 568, 569, 571, 572, 574, 579, 580, 582, 586, 589, 590, 592, 594, 596, 597, 598, 599, 602, 606, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 623, 624, 625, 626, 628, 630, 631, 743, 746, 747, 749, 752, 753, 754, 755, 757, 758, 759, 761, 762, 765, 766, 768, 769, 771, 772, 774, 777, 778, 781, 782, 785, 786, 787, 791, 792, 795, 796, 797, 800, 801, 802, 806, 807, 808, 812, 813, 814, 818, 819, 823, 824, 825, 842, 850, 851, 855, 856, 860, 862, 865, 866, 870, 871, 876, 877, 880, 881, 886, 887, 922, 923, 924, 925, 926, 937, 938, 939, 941, 942, 947, 951, 952, 987, 990, 991, 992, 993, 994, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1030, 1031, 1032, 1033, 1082, 1084, 1134, 1215, 1253, 1254, 1255, 1258, 1264, 1265, 1268, 1274, 1275, 1278, 1284, 1285, 1288, 1308, 1339, 1358, 1359, 1365, 1366, 1369, 1370, 1373, 1376, 1378, 1384, 1387, 1388, 1389, 1390, 1392, 1393, 1395, 1396, 1397, 1398, 1399], "var": [0, 4, 9, 16, 21, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 127, 128, 137, 147, 152, 159, 160, 172, 173, 176, 181, 185, 191, 200, 210, 212, 214, 216, 218, 224, 228, 241, 362, 366, 436, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 564, 568, 572, 576, 580, 584, 587, 590, 594, 597, 600, 605, 608, 609, 612, 618, 625, 632, 636, 641, 647, 648, 653, 658, 660, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 722, 723, 725, 726, 728, 729, 731, 732, 735, 736, 738, 739, 742, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 864, 868, 869, 874, 878, 879, 884, 902, 907, 908, 911, 912, 913, 914, 915, 921, 922, 924, 925, 926, 927, 928, 929, 937, 939, 941, 942, 951, 1034, 1037, 1055, 1057, 1064, 1075, 1082, 1101, 1117, 1121, 1126, 1127, 1128, 1129, 1132, 1140, 1149, 1151, 1157, 1159, 1169, 1170, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1215, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1253, 1298, 1304, 1305, 1307, 1317, 1318, 1323, 1335, 1336, 1369], "none": [0, 1, 4, 9, 10, 16, 17, 21, 35, 40, 46, 47, 48, 53, 57, 58, 62, 63, 64, 66, 67, 69, 71, 72, 73, 77, 78, 83, 87, 91, 92, 96, 102, 103, 108, 113, 117, 124, 125, 127, 128, 132, 137, 139, 147, 152, 159, 160, 165, 166, 173, 174, 176, 181, 185, 188, 191, 193, 195, 200, 201, 206, 207, 208, 209, 210, 212, 213, 214, 218, 219, 223, 224, 228, 231, 232, 241, 274, 285, 366, 392, 402, 487, 489, 491, 492, 493, 494, 496, 501, 503, 506, 509, 512, 514, 515, 521, 522, 529, 531, 534, 538, 542, 546, 547, 553, 555, 556, 558, 560, 561, 562, 564, 568, 569, 572, 576, 577, 580, 584, 585, 587, 588, 590, 594, 595, 597, 600, 605, 608, 612, 614, 618, 625, 632, 636, 641, 647, 653, 654, 658, 665, 669, 674, 678, 681, 684, 685, 689, 691, 693, 696, 697, 702, 703, 708, 709, 714, 715, 720, 723, 726, 729, 732, 733, 736, 739, 743, 749, 754, 755, 759, 761, 768, 769, 774, 775, 780, 783, 790, 793, 798, 803, 804, 809, 815, 816, 820, 821, 847, 848, 852, 857, 863, 864, 868, 869, 874, 875, 878, 879, 884, 888, 889, 893, 894, 895, 898, 899, 900, 901, 902, 904, 909, 916, 917, 922, 923, 924, 925, 926, 927, 928, 929, 934, 935, 936, 937, 939, 941, 942, 943, 944, 947, 948, 950, 951, 952, 953, 955, 956, 957, 962, 985, 1004, 1006, 1011, 1013, 1018, 1020, 1034, 1035, 1037, 1038, 1039, 1055, 1057, 1058, 1059, 1060, 1064, 1065, 1067, 1068, 1075, 1076, 1082, 1084, 1085, 1086, 1091, 1101, 1126, 1132, 1140, 1141, 1142, 1143, 1149, 1150, 1151, 1153, 1154, 1157, 1158, 1159, 1161, 1173, 1174, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1204, 1205, 1206, 1207, 1210, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1251, 1253, 1254, 1255, 1258, 1264, 1265, 1268, 1274, 1275, 1278, 1284, 1285, 1288, 1298, 1307, 1308, 1323, 1339, 1340, 1341, 1378, 1387, 1389, 1391, 1392, 1396, 1397, 1400], "vars_to_amb": [0, 4, 9, 21, 57, 58], "given": [0, 4, 9, 16, 21, 206, 207, 218, 221, 333, 514, 632, 658, 685, 708, 714, 743, 746, 749, 752, 754, 757, 761, 765, 768, 771, 774, 775, 777, 803, 804, 815, 816, 820, 821, 847, 848, 902, 904, 909, 916, 921, 956, 962, 971, 974, 975, 980, 1034, 1042, 1043, 1055, 1057, 1064, 1075, 1082, 1092, 1093, 1099, 1100, 1126, 1140, 1144, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1201, 1202, 1204, 1210, 1215, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1253, 1254, 1264, 1274, 1284, 1298, 1299, 1307, 1309, 1323, 1330, 1340, 1346, 1347, 1348, 1349, 1354, 1372, 1373, 1374, 1378, 1379, 1384, 1395], "set": [0, 4, 9, 14, 16, 21, 92, 93, 125, 137, 145, 206, 207, 212, 544, 546, 600, 658, 665, 895, 1373, 1384, 1386, 1388, 1394, 1395, 1398, 1399, 1400], "clear_mem": [0, 5, 9, 16, 102, 106, 1397], "fals": [0, 3, 4, 5, 9, 16, 17, 35, 40, 46, 53, 57, 77, 83, 92, 97, 102, 106, 115, 117, 124, 125, 128, 137, 147, 148, 152, 159, 160, 165, 166, 167, 173, 181, 185, 191, 193, 195, 200, 210, 212, 214, 218, 224, 228, 241, 324, 487, 493, 494, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 609, 612, 614, 618, 625, 632, 636, 641, 647, 653, 658, 659, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 804, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 893, 894, 895, 902, 904, 910, 916, 924, 925, 926, 927, 928, 929, 934, 936, 939, 941, 942, 987, 988, 992, 994, 996, 998, 1002, 1004, 1009, 1011, 1016, 1018, 1024, 1026, 1028, 1032, 1035, 1082, 1091, 1096, 1097, 1101, 1126, 1132, 1159, 1161, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1339, 1357, 1378, 1384, 1389], "print": [0, 9, 16, 102, 114, 556, 560, 893, 895, 902, 922, 930, 932, 934, 937, 948, 951, 953, 1034, 1055, 1057, 1064, 1072, 1075, 1080, 1140, 1149, 1151, 1157, 1340, 1345, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1396, 1397, 1398, 1399, 1400], "arg": [0, 9, 10, 16, 17, 20, 102, 112, 114, 488, 489, 553, 555, 912, 1159, 1160, 1199, 1200, 1340, 1345, 1346, 1347, 1348, 1349, 1354, 1357, 1372, 1378], "vlim": [0, 9, 16, 102, 114], "1": [0, 1, 9, 16, 83, 84, 102, 114, 194, 195, 231, 233, 241, 252, 301, 320, 324, 366, 371, 412, 413, 414, 421, 487, 489, 490, 491, 492, 494, 544, 613, 614, 621, 628, 689, 690, 692, 697, 703, 708, 709, 715, 803, 809, 853, 888, 891, 893, 895, 902, 904, 905, 926, 929, 936, 955, 985, 1042, 1043, 1082, 1099, 1104, 1126, 1127, 1141, 1144, 1159, 1164, 1188, 1189, 1215, 1216, 1217, 1229, 1230, 1253, 1254, 1260, 1264, 1270, 1274, 1280, 1284, 1291, 1298, 1299, 1301, 1307, 1308, 1309, 1312, 1323, 1330, 1332, 1341, 1356, 1358, 1359, 1360, 1361, 1362, 1363, 1369, 1378, 1381, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "kwarg": [0, 9, 10, 11, 16, 17, 20, 102, 112, 114, 173, 178, 214, 217, 241, 271, 366, 389, 488, 489, 553, 555, 561, 568, 576, 577, 584, 585, 587, 594, 632, 633, 637, 720, 723, 726, 729, 732, 736, 739, 888, 891, 893, 895, 900, 902, 909, 922, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 936, 937, 948, 950, 951, 953, 955, 964, 969, 970, 1034, 1035, 1055, 1056, 1057, 1058, 1064, 1065, 1066, 1075, 1076, 1077, 1082, 1084, 1087, 1126, 1127, 1140, 1141, 1149, 1150, 1151, 1152, 1157, 1158, 1159, 1160, 1164, 1174, 1178, 1179, 1183, 1184, 1189, 1194, 1195, 1199, 1200, 1205, 1210, 1211, 1215, 1253, 1298, 1301, 1307, 1308, 1312, 1323, 1329, 1332, 1338, 1339, 1340, 1345, 1346, 1347, 1348, 1349, 1354, 1357, 1378], "function": [0, 9, 16, 36, 42, 48, 55, 59, 79, 85, 94, 102, 114, 125, 126, 127, 131, 139, 149, 151, 152, 155, 175, 176, 182, 184, 185, 188, 195, 211, 220, 495, 501, 503, 504, 509, 516, 523, 529, 531, 532, 538, 550, 563, 564, 571, 572, 579, 580, 586, 589, 590, 596, 597, 602, 606, 610, 614, 632, 633, 634, 638, 643, 649, 655, 661, 667, 671, 676, 679, 682, 684, 687, 694, 698, 704, 710, 716, 745, 751, 756, 764, 770, 776, 924, 925, 926, 927, 928, 929, 930, 933, 975, 978, 980, 982, 985, 1034, 1046, 1053, 1054, 1055, 1057, 1062, 1063, 1064, 1070, 1074, 1075, 1076, 1082, 1091, 1096, 1097, 1099, 1100, 1101, 1112, 1113, 1122, 1123, 1126, 1130, 1131, 1134, 1140, 1141, 1147, 1148, 1149, 1150, 1151, 1152, 1156, 1157, 1158, 1159, 1173, 1177, 1178, 1182, 1183, 1187, 1188, 1193, 1194, 1198, 1199, 1204, 1209, 1210, 1214, 1215, 1216, 1222, 1223, 1228, 1229, 1234, 1235, 1240, 1241, 1246, 1247, 1250, 1253, 1254, 1264, 1274, 1284, 1298, 1299, 1307, 1309, 1319, 1320, 1323, 1330, 1340, 1346, 1347, 1348, 1349, 1354, 1358, 1364, 1370, 1371, 1372, 1373, 1374, 1377, 1378, 1379, 1384, 1388, 1390, 1391, 1399], "base": [0, 9, 11, 16, 35, 36, 40, 42, 46, 48, 53, 55, 57, 59, 62, 77, 79, 83, 85, 87, 89, 90, 91, 92, 94, 102, 114, 125, 126, 128, 129, 131, 137, 139, 140, 147, 149, 152, 155, 159, 160, 170, 173, 181, 182, 185, 188, 191, 200, 210, 211, 212, 214, 218, 220, 224, 228, 241, 303, 366, 487, 491, 492, 493, 495, 501, 504, 512, 514, 516, 521, 523, 529, 532, 542, 546, 547, 550, 561, 568, 576, 584, 587, 594, 600, 602, 605, 606, 608, 610, 612, 618, 625, 632, 634, 636, 638, 641, 643, 647, 649, 653, 655, 658, 661, 665, 667, 669, 671, 674, 676, 678, 679, 681, 682, 684, 687, 689, 691, 693, 694, 696, 698, 702, 704, 708, 710, 714, 716, 720, 723, 726, 729, 732, 736, 739, 743, 745, 749, 751, 754, 756, 761, 764, 768, 770, 774, 776, 780, 783, 790, 793, 798, 803, 809, 810, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 930, 943, 946, 947, 956, 973, 979, 983, 984, 987, 1026, 1064, 1075, 1082, 1091, 1126, 1132, 1134, 1140, 1174, 1179, 1184, 1189, 1199, 1205, 1211, 1250, 1349, 1364, 1367, 1368, 1370, 1373, 1374, 1377, 1378, 1379, 1381, 1384, 1386, 1392, 1393, 1395, 1397, 1398, 1399, 1400], "verbos": [0, 1, 9, 16, 35, 37, 40, 43, 46, 50, 53, 57, 60, 62, 64, 66, 69, 71, 73, 75, 77, 80, 83, 92, 97, 102, 103, 114, 125, 128, 137, 141, 142, 143, 147, 152, 159, 160, 164, 167, 169, 173, 177, 181, 185, 191, 200, 202, 210, 212, 214, 218, 224, 228, 231, 233, 487, 489, 490, 491, 492, 493, 494, 497, 501, 505, 507, 509, 512, 514, 517, 521, 524, 529, 533, 535, 536, 538, 542, 546, 547, 556, 559, 561, 565, 568, 573, 576, 581, 584, 587, 591, 594, 600, 603, 605, 608, 612, 618, 622, 625, 629, 632, 636, 639, 641, 644, 647, 650, 653, 656, 658, 662, 665, 669, 672, 674, 678, 681, 684, 689, 691, 693, 696, 699, 700, 702, 705, 706, 708, 711, 712, 714, 717, 718, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 760, 761, 767, 768, 773, 774, 780, 783, 788, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 861, 863, 868, 872, 874, 878, 882, 884, 888, 891, 902, 904, 905, 924, 925, 926, 927, 928, 929, 936, 1034, 1041, 1042, 1043, 1044, 1055, 1057, 1061, 1064, 1075, 1082, 1085, 1086, 1091, 1092, 1093, 1099, 1100, 1101, 1104, 1126, 1127, 1132, 1135, 1136, 1140, 1144, 1145, 1149, 1151, 1157, 1159, 1164, 1173, 1178, 1183, 1188, 1192, 1194, 1199, 1201, 1202, 1204, 1208, 1210, 1216, 1220, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1260, 1264, 1270, 1274, 1280, 1284, 1291, 1298, 1299, 1301, 1307, 1309, 1312, 1323, 1330, 1332, 1340, 1341, 1345, 1356, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "chunk": [0, 1, 3, 4, 9, 16, 17, 20, 21, 35, 36, 40, 42, 46, 48, 53, 55, 57, 59, 77, 79, 83, 85, 92, 94, 102, 103, 104, 117, 124, 125, 126, 128, 131, 137, 139, 143, 147, 149, 152, 155, 159, 160, 169, 173, 181, 182, 185, 188, 191, 200, 202, 210, 211, 212, 214, 218, 220, 224, 228, 493, 495, 497, 501, 504, 507, 512, 514, 516, 517, 521, 523, 529, 532, 536, 542, 546, 547, 550, 561, 568, 576, 584, 587, 594, 600, 602, 603, 605, 606, 608, 610, 612, 618, 625, 632, 634, 636, 638, 639, 641, 643, 647, 649, 653, 655, 658, 661, 662, 665, 667, 669, 671, 674, 676, 678, 679, 681, 682, 684, 687, 689, 691, 693, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 723, 726, 729, 732, 736, 739, 743, 745, 749, 751, 754, 756, 761, 764, 768, 770, 774, 776, 780, 783, 788, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 872, 874, 878, 882, 884, 1132, 1134, 1136, 1365, 1368, 1384, 1387, 1389, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "d": [0, 9, 16, 26, 30, 31, 102, 104, 206, 207, 212, 213, 238, 239, 241, 320, 366, 456, 693, 803, 804, 893, 894, 1034, 1035, 1057, 1058, 1173, 1174, 1215, 1253, 1254, 1255, 1258, 1264, 1265, 1268, 1274, 1275, 1278, 1284, 1285, 1288, 1358, 1359, 1378, 1380, 1387, 1390, 1397], "properti": [0, 9, 13, 15, 16, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 46, 53, 57, 77, 83, 92, 95, 102, 110, 117, 121, 122, 123, 125, 128, 137, 147, 152, 159, 160, 168, 170, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 231, 234, 235, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 846, 847, 852, 857, 863, 868, 874, 878, 884, 888, 892, 1034, 1040, 1045, 1047, 1048, 1051, 1052, 1055, 1057, 1064, 1069, 1071, 1073, 1075, 1078, 1079, 1081, 1082, 1088, 1094, 1095, 1098, 1105, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1120, 1126, 1132, 1140, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1340, 1347, 1349, 1353], "idata_mem": [0, 9, 16, 102, 110], "current": [0, 9, 13, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 64, 69, 73, 87, 90, 91, 92, 95, 102, 110, 333, 943, 946, 947, 1082, 1095, 1126, 1159, 1298, 1307, 1323, 1373, 1393, 1395], "idata": [0, 5, 9, 16, 102, 106, 108, 109, 110, 115, 143, 169, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136, 1384], "memori": [0, 3, 4, 5, 9, 16, 20, 21, 102, 106, 107, 110, 143, 169, 202, 241, 291, 366, 493, 494, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136, 1215, 1253, 1384, 1398], "store_model_data": [0, 9, 16, 102, 115], "forc": [0, 3, 4, 9, 16, 20, 21, 53, 83, 92, 97, 102, 115, 125, 128, 147, 152, 159, 160, 167, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 333, 493, 501, 512, 514, 547, 600, 605, 608, 612, 632, 636, 658, 665, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 774, 798, 826, 863, 874, 884, 1373, 1386], "store": [0, 4, 9, 16, 21, 35, 40, 46, 53, 57, 77, 83, 92, 102, 105, 115, 118, 120, 125, 128, 137, 138, 143, 147, 152, 159, 160, 163, 165, 169, 173, 181, 185, 191, 193, 200, 202, 210, 212, 214, 218, 224, 228, 493, 497, 501, 507, 512, 514, 517, 521, 529, 536, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 603, 605, 608, 612, 618, 625, 632, 636, 639, 641, 647, 653, 658, 662, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 700, 702, 706, 708, 712, 714, 718, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 788, 790, 793, 798, 803, 809, 815, 820, 826, 842, 847, 852, 857, 863, 868, 872, 874, 878, 882, 884, 1132, 1136, 1215, 1253, 1391], "get_model_data": [0, 9, 16, 102, 107], "from": [0, 9, 16, 35, 40, 46, 47, 49, 53, 57, 77, 83, 92, 102, 107, 108, 117, 120, 125, 128, 129, 137, 147, 152, 159, 160, 163, 165, 166, 173, 174, 175, 181, 185, 191, 193, 196, 200, 210, 212, 214, 218, 219, 223, 224, 228, 236, 237, 238, 239, 241, 246, 250, 252, 333, 366, 371, 444, 445, 469, 470, 485, 486, 489, 490, 493, 494, 501, 503, 512, 514, 521, 529, 531, 542, 544, 546, 547, 561, 562, 563, 568, 569, 571, 576, 577, 579, 584, 585, 586, 587, 588, 589, 594, 595, 596, 600, 601, 605, 608, 612, 615, 618, 625, 632, 636, 637, 641, 647, 653, 654, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 744, 749, 754, 755, 759, 761, 768, 769, 774, 775, 780, 783, 788, 790, 793, 798, 803, 804, 809, 815, 820, 826, 847, 852, 853, 857, 863, 868, 872, 874, 878, 882, 884, 888, 893, 894, 927, 928, 929, 933, 939, 941, 942, 951, 955, 956, 957, 958, 959, 984, 1082, 1085, 1086, 1117, 1126, 1132, 1159, 1215, 1253, 1298, 1307, 1323, 1339, 1360, 1361, 1362, 1363, 1371, 1372, 1373, 1377, 1378, 1380, 1381, 1384, 1386, 1387, 1389, 1390, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1400], "del_model_data": [0, 9, 16, 102, 105], "remov": [0, 9, 16, 102, 105, 658, 664, 1384, 1386, 1394], "update_n_turbin": [0, 9, 16, 102, 116], "reset": [0, 9, 16, 102, 116, 501, 509, 512, 529, 538, 542, 658, 664, 1392, 1394], "accord": [0, 9, 16, 102, 116, 173, 176, 489, 561, 564, 568, 572, 576, 580, 584, 587, 590, 594, 597, 625, 626, 729, 964, 969, 970, 1391, 1395], "self": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 116, 125, 128, 137, 143, 147, 152, 159, 160, 162, 166, 169, 173, 181, 185, 191, 200, 202, 210, 212, 214, 218, 224, 228, 241, 243, 244, 245, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 493, 497, 501, 507, 512, 514, 517, 521, 529, 536, 542, 546, 547, 549, 561, 568, 570, 576, 578, 584, 587, 594, 600, 603, 605, 608, 612, 618, 619, 620, 625, 627, 632, 636, 639, 641, 647, 653, 658, 662, 665, 669, 674, 678, 681, 684, 686, 689, 691, 693, 696, 700, 702, 706, 708, 712, 714, 718, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 763, 768, 774, 780, 783, 788, 790, 793, 798, 803, 805, 809, 811, 815, 817, 820, 822, 826, 847, 849, 852, 854, 857, 859, 863, 868, 872, 874, 878, 882, 884, 900, 1107, 1111, 1132, 1136, 1166, 1168, 1194, 1195, 1199, 1200, 1250, 1251, 1258, 1268, 1278, 1288, 1293, 1295, 1314, 1316, 1347, 1349, 1350], "get_models_idata": [0, 9, 16, 102, 109], "get_models_data": [0, 9, 16, 102, 108], "creat": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 108, 113, 117, 120, 125, 128, 137, 143, 147, 152, 159, 160, 169, 172, 173, 175, 176, 179, 181, 185, 191, 200, 202, 210, 212, 214, 218, 224, 228, 241, 271, 366, 389, 493, 497, 501, 507, 512, 514, 517, 521, 529, 536, 542, 544, 546, 547, 561, 563, 564, 566, 568, 571, 572, 574, 576, 579, 580, 582, 584, 586, 587, 589, 590, 592, 594, 596, 597, 599, 600, 603, 605, 608, 612, 618, 625, 632, 636, 639, 641, 647, 653, 658, 662, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 700, 702, 706, 708, 712, 714, 718, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 888, 891, 893, 895, 937, 941, 943, 948, 951, 953, 1132, 1136, 1161, 1372, 1377, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "xarrai": [0, 3, 4, 9, 11, 16, 17, 20, 21, 23, 24, 25, 32, 35, 40, 46, 53, 57, 64, 69, 73, 77, 83, 91, 92, 102, 108, 113, 117, 118, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 200, 210, 212, 493, 494, 501, 512, 514, 521, 529, 542, 546, 547, 600, 605, 608, 612, 618, 625, 632, 636, 637, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 893, 894, 902, 903, 922, 923, 935, 938, 947, 948, 949, 952, 1132, 1370, 1384, 1387, 1390, 1396, 1397], "input": [0, 9, 16, 102, 108, 126, 127, 151, 184, 214, 215, 216, 366, 412, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 632, 633, 636, 637, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 741, 742, 867, 873, 883, 1215, 1253, 1356, 1364, 1373, 1380, 1384, 1387, 1388, 1389, 1390, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "new_point_data": [0, 9, 16, 102, 113], "states_indic": [0, 9, 16, 102, 113], "contain": [0, 9, 16, 102, 113, 117, 118, 120, 556, 956, 958, 959, 1101, 1339, 1370, 1371, 1372, 1373, 1374, 1378, 1389, 1390, 1391, 1393, 1394, 1396, 1398], "onli": [0, 9, 16, 102, 113, 219, 252, 371, 487, 568, 743, 790, 791, 793, 796, 803, 807, 809, 813, 815, 818, 820, 824, 852, 855, 857, 858, 860, 939, 941, 942, 985, 1091, 1215, 1253, 1384, 1386, 1388, 1391, 1396, 1397, 1398, 1400], "new": [0, 9, 16, 102, 112, 173, 178, 179, 214, 217, 230, 241, 252, 271, 324, 333, 366, 371, 389, 414, 561, 566, 568, 574, 576, 582, 584, 587, 592, 594, 599, 720, 723, 726, 729, 732, 736, 739, 866, 871, 877, 881, 887, 893, 902, 922, 930, 931, 934, 937, 948, 951, 953, 1049, 1050, 1082, 1089, 1090, 1126, 1159, 1254, 1256, 1257, 1264, 1266, 1267, 1274, 1276, 1277, 1284, 1286, 1287, 1298, 1307, 1323, 1384, 1386, 1390, 1391], "algo_typ": [0, 9, 16, 102, 112], "run": [0, 1, 9, 16, 19, 29, 35, 40, 46, 53, 57, 77, 83, 92, 102, 103, 112, 125, 128, 137, 139, 147, 148, 152, 159, 160, 163, 173, 178, 181, 185, 191, 200, 210, 212, 214, 215, 217, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 659, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 721, 723, 724, 726, 727, 729, 730, 732, 734, 736, 737, 739, 741, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 867, 868, 873, 874, 878, 883, 884, 893, 902, 922, 930, 931, 934, 937, 948, 951, 953, 1082, 1084, 1122, 1123, 1130, 1131, 1132, 1308, 1319, 1320, 1340, 1341, 1346, 1347, 1348, 1349, 1354, 1370, 1373, 1374, 1384, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1398, 1399], "time": [0, 9, 16, 102, 112, 173, 178, 214, 217, 494, 561, 568, 576, 584, 587, 594, 720, 723, 726, 729, 732, 736, 739, 893, 902, 916, 922, 930, 931, 934, 937, 948, 951, 953, 1132, 1215, 1253, 1374, 1384, 1386, 1388, 1389, 1392, 1393, 1394, 1397, 1398, 1399], "factori": [0, 9, 16, 102, 112, 173, 178, 214, 217, 561, 568, 576, 584, 587, 594, 720, 723, 726, 729, 732, 736, 739, 893, 902, 922, 930, 931, 934, 937, 948, 951, 953], "__repr__": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 162, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 241, 279, 366, 396, 493, 501, 512, 514, 521, 529, 542, 546, 547, 549, 561, 568, 570, 576, 578, 584, 587, 594, 600, 605, 608, 612, 618, 620, 625, 627, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 686, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 763, 768, 774, 780, 783, 790, 793, 798, 803, 805, 809, 811, 815, 817, 820, 822, 826, 847, 849, 852, 854, 857, 859, 863, 868, 874, 878, 884, 1132], "repr": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 162, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 241, 279, 366, 396, 493, 501, 512, 514, 521, 529, 542, 546, 547, 549, 561, 568, 570, 576, 578, 584, 587, 594, 600, 605, 608, 612, 618, 620, 625, 627, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 686, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 763, 768, 774, 780, 783, 790, 793, 798, 803, 805, 809, 811, 815, 817, 820, 822, 826, 847, 849, 852, 854, 857, 859, 863, 868, 874, 878, 884, 1132], "model_id": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 170, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132], "uniqu": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 170, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132], "id": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 170, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 487, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132, 1385], "type": [0, 9, 16, 35, 40, 46, 53, 57, 71, 72, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 170, 173, 181, 185, 191, 200, 206, 207, 210, 212, 214, 218, 224, 228, 241, 252, 271, 333, 366, 371, 389, 493, 501, 512, 514, 521, 529, 542, 546, 547, 556, 558, 560, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 788, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 872, 874, 878, 882, 884, 953, 955, 1132, 1161, 1194, 1195, 1199, 1200, 1215, 1250, 1251, 1253, 1347, 1349, 1350, 1369, 1370, 1373, 1377, 1384, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1396, 1397, 1398, 1400], "v": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 172, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132, 1215, 1253, 1360, 1361], "variabl": [0, 3, 4, 9, 11, 14, 16, 20, 21, 35, 36, 38, 40, 42, 44, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 59, 61, 71, 72, 77, 79, 81, 83, 84, 85, 86, 92, 94, 98, 102, 125, 126, 127, 128, 131, 133, 137, 139, 144, 147, 149, 150, 151, 152, 155, 157, 159, 160, 166, 172, 173, 179, 181, 182, 183, 184, 185, 188, 189, 191, 192, 193, 195, 198, 200, 203, 210, 211, 212, 214, 216, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 493, 494, 495, 498, 501, 503, 504, 508, 512, 514, 516, 518, 521, 522, 523, 525, 529, 531, 532, 537, 542, 544, 546, 547, 550, 551, 561, 566, 568, 574, 576, 582, 584, 587, 592, 594, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 618, 619, 625, 626, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 645, 647, 648, 649, 651, 653, 654, 655, 657, 658, 660, 661, 663, 664, 665, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 707, 708, 709, 710, 713, 714, 715, 716, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 733, 735, 736, 738, 739, 740, 742, 743, 749, 750, 754, 759, 761, 768, 774, 775, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 793, 794, 795, 797, 798, 800, 801, 802, 803, 804, 806, 808, 809, 810, 812, 814, 815, 816, 819, 820, 821, 823, 825, 826, 847, 848, 850, 851, 852, 853, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 886, 887, 895, 902, 907, 908, 911, 913, 914, 915, 917, 918, 919, 920, 921, 924, 925, 926, 927, 928, 929, 933, 934, 936, 937, 939, 940, 941, 942, 948, 950, 951, 953, 955, 1034, 1037, 1038, 1039, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1059, 1060, 1063, 1064, 1067, 1068, 1074, 1075, 1082, 1085, 1086, 1089, 1090, 1091, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1115, 1116, 1117, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1137, 1140, 1141, 1142, 1143, 1144, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1157, 1158, 1159, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1204, 1206, 1207, 1210, 1212, 1213, 1215, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1253, 1254, 1256, 1257, 1259, 1261, 1262, 1263, 1264, 1266, 1267, 1269, 1271, 1272, 1273, 1274, 1276, 1277, 1279, 1281, 1282, 1283, 1284, 1286, 1287, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1364, 1367, 1369, 1372, 1373, 1374, 1375, 1384, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "flag": [0, 2, 3, 4, 9, 11, 16, 17, 20, 21, 29, 35, 40, 46, 53, 57, 64, 69, 73, 77, 83, 92, 102, 125, 128, 137, 139, 147, 148, 152, 159, 160, 168, 173, 181, 185, 191, 200, 210, 212, 214, 218, 219, 224, 228, 241, 319, 366, 490, 493, 494, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 619, 625, 626, 632, 636, 641, 647, 653, 658, 659, 665, 666, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 804, 809, 815, 820, 826, 847, 852, 857, 858, 863, 868, 874, 878, 884, 893, 894, 895, 904, 910, 916, 917, 924, 925, 926, 927, 928, 929, 939, 941, 942, 962, 992, 1002, 1009, 1016, 1024, 1032, 1034, 1045, 1055, 1057, 1064, 1075, 1082, 1088, 1091, 1096, 1097, 1101, 1108, 1126, 1132, 1140, 1146, 1149, 1151, 1155, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1221, 1223, 1227, 1229, 1233, 1235, 1239, 1241, 1245, 1247, 1249, 1250, 1252, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1340, 1341, 1347, 1349, 1353, 1386, 1390], "sub_model": [0, 9, 16, 35, 39, 40, 45, 46, 52, 53, 57, 77, 82, 83, 92, 100, 102, 125, 128, 135, 137, 146, 147, 152, 158, 159, 160, 171, 173, 180, 181, 185, 190, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 527, 529, 540, 542, 546, 547, 552, 561, 567, 568, 575, 576, 583, 584, 587, 593, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 652, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 748, 749, 754, 761, 768, 774, 779, 780, 783, 789, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132, 1384], "sub": [0, 9, 16, 35, 39, 40, 45, 46, 52, 53, 57, 77, 82, 83, 92, 100, 102, 125, 128, 135, 137, 146, 147, 152, 158, 159, 160, 171, 173, 180, 181, 185, 190, 191, 200, 210, 212, 214, 218, 224, 228, 333, 493, 501, 512, 514, 521, 527, 529, 540, 542, 546, 547, 552, 561, 567, 568, 575, 576, 583, 584, 587, 593, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 652, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 748, 749, 754, 761, 768, 774, 779, 780, 783, 789, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1127, 1132, 1161, 1374, 1384, 1390], "load_data": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 143, 147, 152, 159, 160, 169, 173, 181, 185, 191, 200, 202, 210, 212, 214, 218, 224, 228, 493, 497, 501, 507, 512, 514, 517, 521, 529, 536, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 603, 605, 608, 612, 618, 625, 632, 636, 639, 641, 647, 653, 658, 662, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 700, 702, 706, 708, 712, 714, 718, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132, 1136, 1384], "algo": [0, 9, 16, 35, 36, 37, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 59, 60, 61, 62, 64, 66, 69, 71, 73, 75, 77, 79, 80, 81, 83, 85, 86, 87, 89, 90, 91, 92, 94, 97, 98, 101, 102, 117, 124, 125, 126, 127, 128, 131, 133, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 155, 157, 159, 160, 163, 164, 165, 166, 167, 169, 173, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 191, 193, 195, 196, 198, 200, 202, 203, 205, 210, 211, 212, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 493, 495, 497, 498, 500, 501, 504, 505, 507, 508, 509, 511, 512, 514, 516, 517, 518, 520, 521, 523, 524, 525, 528, 529, 532, 533, 535, 536, 537, 538, 541, 542, 545, 546, 547, 550, 551, 556, 559, 561, 563, 564, 565, 566, 568, 571, 572, 573, 574, 576, 579, 580, 581, 582, 584, 586, 587, 589, 590, 591, 592, 594, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 618, 622, 625, 629, 632, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 647, 649, 650, 651, 653, 655, 656, 657, 658, 661, 662, 663, 665, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 723, 726, 729, 732, 736, 739, 743, 745, 746, 747, 749, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 776, 777, 778, 780, 781, 782, 783, 785, 786, 787, 788, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 806, 807, 808, 809, 812, 813, 814, 815, 818, 819, 820, 823, 824, 825, 826, 842, 847, 850, 851, 852, 855, 856, 857, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 902, 904, 916, 922, 923, 943, 946, 947, 1082, 1084, 1122, 1123, 1126, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1139, 1159, 1298, 1307, 1308, 1319, 1320, 1323, 1329, 1387, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "0": [0, 1, 9, 16, 35, 37, 40, 43, 46, 50, 53, 57, 60, 62, 64, 66, 69, 71, 73, 75, 77, 80, 83, 84, 92, 97, 102, 103, 125, 128, 137, 141, 142, 143, 147, 152, 159, 160, 164, 167, 169, 173, 177, 181, 185, 191, 194, 200, 202, 210, 212, 214, 218, 224, 228, 233, 241, 246, 251, 301, 324, 366, 370, 416, 421, 487, 489, 490, 491, 492, 493, 497, 501, 502, 505, 507, 509, 512, 513, 514, 517, 521, 524, 529, 530, 533, 535, 536, 538, 542, 543, 544, 546, 547, 556, 559, 561, 565, 568, 573, 576, 581, 584, 587, 591, 594, 600, 603, 605, 608, 612, 613, 618, 621, 622, 625, 628, 629, 632, 636, 639, 641, 642, 644, 647, 650, 653, 654, 656, 658, 662, 665, 669, 672, 674, 678, 681, 684, 689, 691, 693, 696, 697, 699, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 760, 761, 762, 767, 768, 769, 773, 774, 775, 780, 783, 788, 790, 793, 794, 798, 799, 803, 804, 809, 810, 815, 816, 820, 821, 826, 841, 847, 848, 852, 853, 857, 858, 861, 863, 868, 872, 874, 878, 882, 884, 891, 895, 904, 905, 922, 924, 925, 926, 927, 928, 929, 936, 955, 971, 973, 975, 979, 980, 983, 985, 1034, 1041, 1042, 1043, 1044, 1055, 1057, 1061, 1064, 1075, 1082, 1085, 1086, 1091, 1092, 1093, 1099, 1100, 1101, 1104, 1126, 1127, 1132, 1135, 1136, 1140, 1141, 1144, 1145, 1149, 1151, 1157, 1159, 1164, 1173, 1178, 1183, 1188, 1192, 1194, 1199, 1201, 1202, 1204, 1208, 1210, 1215, 1216, 1220, 1223, 1229, 1230, 1235, 1241, 1247, 1250, 1253, 1254, 1260, 1264, 1270, 1274, 1280, 1284, 1291, 1298, 1299, 1301, 1307, 1309, 1312, 1323, 1330, 1332, 1340, 1341, 1356, 1361, 1362, 1369, 1378, 1379, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "load": [0, 3, 4, 9, 16, 20, 21, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 143, 147, 152, 159, 160, 169, 173, 181, 185, 191, 200, 202, 210, 212, 214, 218, 224, 228, 493, 494, 497, 501, 507, 512, 514, 517, 521, 529, 536, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 603, 605, 608, 612, 618, 625, 632, 636, 639, 641, 647, 653, 658, 662, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 700, 702, 706, 708, 712, 714, 718, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 788, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 872, 874, 878, 882, 884, 1132, 1136, 1384, 1385, 1389], "subject": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 143, 147, 152, 159, 160, 169, 173, 181, 185, 191, 200, 202, 210, 212, 214, 218, 224, 228, 493, 497, 501, 507, 512, 514, 517, 521, 529, 536, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 603, 605, 608, 612, 618, 625, 632, 636, 639, 641, 647, 653, 658, 662, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 700, 702, 706, 708, 712, 714, 718, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1088, 1132, 1136], "get_data": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 166, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 844, 847, 852, 857, 863, 868, 874, 878, 884, 937, 939, 951, 1132], "target": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 166, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 847, 852, 857, 863, 868, 874, 878, 884, 1132, 1395], "lookup": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 166, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 637, 641, 642, 647, 653, 658, 665, 669, 674, 675, 678, 681, 684, 689, 691, 693, 696, 697, 702, 703, 708, 709, 714, 715, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 847, 852, 857, 863, 868, 874, 878, 884, 916, 1132, 1373, 1384], "smfp": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 166, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 847, 852, 857, 863, 868, 874, 878, 884, 1132], "mdata": [0, 9, 16, 30, 35, 36, 40, 42, 46, 48, 49, 53, 55, 57, 59, 77, 79, 83, 85, 92, 94, 102, 125, 128, 131, 137, 139, 143, 147, 149, 152, 155, 159, 160, 163, 165, 166, 169, 173, 175, 176, 179, 181, 182, 185, 188, 191, 193, 195, 196, 200, 202, 210, 211, 212, 214, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 493, 495, 497, 501, 504, 507, 512, 514, 516, 517, 521, 523, 529, 532, 536, 542, 546, 547, 550, 561, 563, 564, 566, 568, 571, 572, 574, 576, 579, 580, 582, 584, 586, 587, 589, 590, 592, 594, 596, 597, 598, 599, 600, 602, 603, 605, 606, 608, 610, 612, 614, 615, 618, 625, 632, 634, 636, 638, 639, 641, 643, 647, 649, 653, 655, 658, 661, 662, 665, 667, 669, 671, 674, 676, 678, 679, 681, 682, 684, 687, 689, 691, 693, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 723, 726, 729, 732, 736, 739, 743, 745, 746, 747, 749, 751, 752, 753, 754, 756, 757, 758, 761, 764, 765, 766, 768, 770, 771, 772, 774, 776, 777, 778, 780, 781, 782, 783, 785, 786, 787, 788, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 806, 807, 808, 809, 812, 813, 814, 815, 818, 819, 820, 823, 824, 825, 826, 842, 843, 844, 845, 847, 850, 851, 852, 855, 856, 857, 860, 862, 863, 865, 866, 868, 870, 871, 872, 874, 876, 877, 878, 880, 881, 882, 884, 886, 887, 1132, 1134, 1136], "getter": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 166, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 847, 852, 857, 863, 868, 874, 878, 884, 1132], "entri": [0, 9, 14, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 108, 109, 115, 117, 119, 125, 128, 137, 143, 147, 152, 159, 160, 166, 169, 173, 181, 185, 191, 200, 202, 206, 210, 212, 214, 218, 224, 228, 493, 497, 501, 507, 512, 514, 517, 521, 529, 536, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 603, 605, 608, 612, 618, 625, 632, 636, 639, 641, 647, 653, 658, 662, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 700, 702, 706, 708, 712, 714, 718, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 788, 790, 793, 798, 803, 809, 815, 820, 826, 844, 847, 852, 857, 863, 868, 872, 874, 878, 882, 884, 933, 970, 1132, 1136, 1215, 1253, 1372, 1384, 1388, 1395], "data_to_stor": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 163, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132], "add": [0, 9, 16, 35, 40, 46, 53, 57, 66, 68, 77, 83, 92, 102, 117, 119, 125, 128, 130, 137, 147, 152, 154, 159, 160, 163, 173, 181, 185, 187, 191, 199, 200, 206, 208, 210, 212, 214, 218, 224, 227, 228, 230, 231, 233, 236, 487, 488, 489, 490, 491, 492, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 617, 618, 624, 625, 631, 632, 636, 641, 647, 653, 658, 660, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 802, 803, 808, 809, 814, 815, 819, 820, 825, 826, 847, 851, 852, 856, 857, 862, 863, 866, 868, 871, 874, 877, 878, 881, 884, 887, 888, 890, 895, 902, 904, 905, 924, 925, 926, 927, 928, 929, 956, 958, 959, 960, 961, 987, 988, 994, 996, 998, 1004, 1006, 1011, 1013, 1018, 1020, 1026, 1028, 1034, 1055, 1057, 1064, 1066, 1075, 1077, 1082, 1085, 1086, 1087, 1126, 1132, 1140, 1149, 1151, 1157, 1159, 1161, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1372, 1390, 1391, 1394, 1395, 1396, 1397, 1398], "local": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 163, 165, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 804, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132, 1373, 1385, 1386, 1388, 1390, 1393, 1398], "intend": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 163, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 902, 917, 1132], "iter": [0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 29, 33, 35, 40, 46, 53, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 102, 125, 128, 137, 147, 152, 159, 160, 163, 166, 173, 181, 185, 191, 200, 210, 212, 214, 218, 223, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 759, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 943, 946, 947, 1132, 1365, 1368, 1377, 1384, 1387, 1397], "from_data_or_stor": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 165, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132], "ret_dim": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 165, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132], "safe": [0, 9, 16, 35, 40, 46, 53, 57, 77, 83, 92, 102, 125, 128, 137, 147, 152, 159, 160, 165, 173, 181, 185, 191, 200, 210, 212, 214, 218, 224, 228, 493, 501, 512, 514, 521, 529, 542, 546, 547, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 1132], "centr": [1, 194, 475, 612, 613, 621, 628, 647, 754, 755, 761, 762, 768, 769, 793, 795, 803, 806, 809, 812, 820, 823, 1004, 1005, 1018, 1019, 1358, 1359, 1373, 1378, 1380, 1384, 1387, 1388, 1390, 1391, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "rotor_wd": [1, 1387, 1390, 1391, 1392, 1394, 1395, 1398, 1399], "auto": [1, 1387, 1389, 1390, 1391, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "basic_ctrl": [1, 1387, 1391, 1397], "10000": [1, 17, 1387], "1000": [1, 102, 103, 421, 641, 642, 916, 1369, 1387, 1389, 1390, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "dbook": [1, 102, 103, 489, 1388], "modelbook": [1, 17, 102, 103, 545, 556, 557, 558, 559, 560, 951, 953, 954, 1371, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "book": [1, 17, 102, 103, 206, 207, 237, 489, 545, 783, 784, 794, 804, 810, 816, 821, 848, 853, 858, 951, 953, 954, 955, 956, 957, 1383, 1385, 1387, 1388, 1389, 1390, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399], "windfarm": [1, 17, 102, 103, 231, 232, 233, 234, 235, 487, 488, 489, 490, 491, 492, 545, 893, 894, 1034, 1057, 1069, 1078, 1098, 1371, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "wind": [1, 17, 71, 72, 102, 103, 137, 140, 200, 206, 207, 231, 232, 233, 234, 364, 432, 433, 443, 444, 445, 449, 450, 468, 469, 470, 476, 478, 487, 488, 489, 490, 491, 492, 501, 514, 515, 521, 522, 545, 546, 641, 642, 674, 675, 690, 692, 696, 697, 702, 703, 708, 709, 714, 715, 720, 723, 726, 729, 736, 743, 749, 750, 798, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 874, 893, 894, 896, 897, 910, 924, 925, 926, 927, 928, 929, 937, 939, 941, 942, 951, 955, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 983, 986, 1034, 1055, 1057, 1064, 1069, 1075, 1078, 1082, 1098, 1126, 1140, 1149, 1151, 1157, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1360, 1361, 1362, 1363, 1364, 1369, 1371, 1372, 1373, 1374, 1375, 1378, 1379, 1380, 1383, 1384, 1385, 1387, 1389, 1390, 1391, 1393, 1394, 1396, 1397, 1398, 1400], "str": [1, 3, 4, 6, 12, 14, 16, 17, 20, 21, 27, 36, 38, 42, 44, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 59, 61, 62, 63, 67, 71, 72, 79, 81, 85, 86, 94, 98, 112, 117, 118, 119, 120, 126, 127, 131, 133, 137, 139, 144, 145, 149, 150, 151, 155, 157, 160, 163, 165, 166, 172, 176, 178, 179, 182, 183, 184, 188, 189, 191, 192, 193, 195, 198, 203, 206, 207, 211, 212, 213, 216, 217, 219, 223, 225, 226, 227, 229, 230, 231, 232, 235, 238, 239, 241, 292, 333, 366, 408, 421, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 501, 503, 504, 508, 516, 518, 521, 522, 523, 525, 529, 531, 532, 537, 540, 544, 545, 550, 551, 553, 555, 556, 558, 560, 561, 562, 564, 566, 572, 574, 580, 582, 590, 592, 597, 599, 600, 601, 602, 604, 606, 607, 608, 609, 610, 611, 614, 619, 626, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 645, 649, 651, 653, 654, 655, 657, 658, 660, 661, 663, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 685, 687, 688, 690, 692, 694, 695, 696, 697, 698, 701, 702, 703, 704, 707, 708, 709, 710, 713, 714, 715, 716, 719, 722, 725, 728, 731, 733, 735, 738, 742, 749, 750, 759, 774, 775, 781, 782, 783, 784, 785, 786, 787, 792, 794, 795, 797, 800, 801, 802, 803, 804, 806, 808, 809, 810, 812, 814, 815, 816, 819, 820, 821, 823, 825, 844, 847, 848, 850, 851, 853, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 895, 898, 899, 900, 901, 907, 908, 911, 913, 914, 915, 917, 918, 919, 920, 921, 924, 925, 926, 927, 928, 929, 936, 939, 940, 941, 942, 943, 944, 950, 955, 956, 958, 959, 960, 961, 962, 963, 964, 969, 970, 988, 998, 1006, 1013, 1020, 1028, 1035, 1036, 1040, 1049, 1050, 1051, 1052, 1056, 1057, 1058, 1065, 1076, 1084, 1085, 1086, 1101, 1117, 1121, 1124, 1125, 1127, 1134, 1137, 1140, 1141, 1149, 1150, 1152, 1157, 1158, 1161, 1171, 1172, 1174, 1179, 1184, 1189, 1205, 1211, 1215, 1217, 1224, 1230, 1236, 1242, 1248, 1253, 1258, 1263, 1268, 1273, 1278, 1283, 1288, 1296, 1297, 1306, 1308, 1321, 1322, 1329, 1337, 1338, 1339, 1340, 1341, 1356, 1357, 1369, 1384, 1391], "Will": 1, "look": [1, 783, 784, 794, 804, 810, 816, 821, 848, 853, 858, 916, 1388, 1390, 1393, 1395, 1399], "up": [1, 783, 784, 794, 804, 810, 816, 821, 848, 853, 858, 916], "dict": [1, 3, 4, 10, 11, 14, 15, 16, 17, 20, 21, 36, 42, 46, 47, 48, 49, 55, 59, 65, 70, 71, 72, 74, 79, 83, 84, 85, 94, 102, 103, 108, 109, 110, 112, 114, 115, 117, 118, 120, 126, 127, 131, 137, 138, 139, 143, 145, 149, 151, 155, 169, 176, 179, 182, 184, 188, 193, 195, 202, 211, 215, 219, 225, 226, 227, 238, 239, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 501, 503, 504, 507, 516, 517, 521, 522, 523, 529, 531, 532, 536, 544, 545, 550, 553, 554, 555, 556, 561, 562, 564, 566, 572, 574, 577, 580, 582, 585, 590, 592, 597, 599, 600, 601, 602, 603, 606, 610, 614, 633, 634, 636, 637, 638, 639, 643, 647, 648, 649, 654, 655, 661, 662, 667, 670, 671, 676, 679, 682, 687, 690, 692, 694, 696, 697, 698, 700, 702, 703, 704, 706, 708, 709, 710, 712, 714, 715, 716, 718, 721, 724, 727, 730, 732, 733, 734, 737, 741, 754, 755, 761, 762, 768, 769, 781, 782, 783, 784, 785, 786, 787, 788, 792, 794, 795, 797, 800, 801, 802, 804, 806, 808, 810, 812, 814, 816, 819, 821, 823, 825, 846, 848, 850, 851, 853, 856, 857, 858, 862, 863, 864, 868, 869, 872, 874, 875, 878, 879, 882, 891, 895, 897, 907, 908, 909, 918, 919, 920, 924, 925, 926, 927, 928, 929, 933, 936, 941, 942, 943, 944, 950, 955, 956, 964, 969, 970, 988, 998, 1006, 1013, 1020, 1028, 1035, 1049, 1050, 1056, 1058, 1065, 1076, 1082, 1084, 1085, 1086, 1127, 1128, 1129, 1134, 1136, 1140, 1141, 1149, 1150, 1152, 1157, 1158, 1160, 1164, 1169, 1170, 1174, 1179, 1184, 1189, 1205, 1211, 1215, 1253, 1258, 1268, 1278, 1288, 1301, 1304, 1305, 1308, 1312, 1317, 1318, 1329, 1332, 1335, 1336, 1338, 1339, 1340, 1341, 1346, 1348, 1354, 1356, 1357, 1370, 1378, 1389, 1390, 1395, 1397], "choic": [1, 102, 103, 206, 213, 442, 465, 884, 885, 895, 918, 919, 920, 1161, 1340, 1341, 1380, 1393, 1396, 1397, 1398, 1399, 1400], "parallel": [1, 35, 40, 46, 53, 57, 77, 83, 92, 102, 103, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 200, 210, 212, 493, 501, 512, 514, 521, 529, 542, 546, 547, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 1132, 1215, 1253, 1341, 1384, 1385, 1390, 1393, 1398, 1399], "dask": [1, 3, 4, 20, 21, 102, 103, 125, 1340, 1341, 1378, 1384, 1385, 1387, 1397, 1398], "e": [1, 102, 103, 125, 166, 544, 600, 601, 641, 642, 678, 681, 933, 970, 1082, 1112, 1113, 1126, 1159, 1215, 1253, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1339, 1357, 1371, 1373, 1384, 1385, 1386, 1389, 1390, 1391, 1392, 1393, 1400], "g": [1, 102, 103, 166, 641, 642, 798, 933, 970, 1215, 1253, 1339, 1357, 1371, 1373, 1384, 1385, 1387, 1389, 1392, 1396, 1400], "databook": [1, 102, 103, 236, 237, 489, 956, 957, 958, 959, 960, 961, 962, 963, 1371, 1378], "option": [1, 4, 10, 11, 17, 21, 47, 48, 58, 62, 63, 67, 72, 78, 91, 103, 108, 109, 112, 113, 114, 124, 126, 127, 129, 139, 151, 155, 165, 166, 173, 174, 176, 184, 188, 193, 195, 206, 207, 208, 209, 213, 219, 223, 231, 237, 333, 487, 488, 489, 490, 491, 492, 493, 494, 501, 503, 509, 512, 515, 522, 529, 531, 538, 542, 544, 550, 555, 558, 560, 562, 564, 569, 572, 577, 580, 585, 588, 590, 595, 597, 614, 619, 626, 633, 637, 654, 670, 685, 690, 692, 696, 697, 702, 703, 708, 709, 714, 715, 733, 754, 755, 759, 768, 769, 775, 804, 815, 816, 820, 821, 858, 863, 864, 868, 869, 875, 878, 879, 889, 891, 894, 895, 904, 909, 916, 917, 922, 923, 924, 925, 926, 927, 928, 929, 935, 936, 939, 941, 942, 944, 947, 950, 951, 953, 955, 956, 957, 969, 970, 988, 992, 998, 1002, 1006, 1009, 1013, 1016, 1020, 1024, 1028, 1032, 1035, 1038, 1039, 1056, 1058, 1059, 1060, 1065, 1067, 1068, 1076, 1084, 1085, 1086, 1091, 1096, 1097, 1101, 1127, 1141, 1142, 1143, 1149, 1150, 1152, 1153, 1154, 1157, 1158, 1160, 1161, 1164, 1174, 1175, 1176, 1179, 1180, 1181, 1184, 1185, 1186, 1189, 1190, 1191, 1196, 1197, 1205, 1206, 1207, 1211, 1212, 1213, 1215, 1217, 1218, 1219, 1225, 1226, 1231, 1232, 1237, 1238, 1243, 1244, 1253, 1255, 1258, 1265, 1268, 1275, 1278, 1285, 1288, 1301, 1308, 1312, 1329, 1332, 1338, 1339, 1340, 1341, 1357, 1373, 1377, 1384, 1386, 1390, 1392, 1393, 1395, 1398, 1399], "default": [1, 46, 47, 48, 75, 96, 102, 103, 108, 109, 132, 201, 219, 241, 333, 366, 489, 496, 501, 506, 529, 534, 558, 562, 568, 569, 576, 577, 585, 587, 588, 595, 637, 685, 775, 826, 841, 848, 898, 899, 900, 901, 904, 916, 937, 940, 951, 964, 1101, 1215, 1253, 1339, 1347, 1367, 1369, 1378, 1384, 1386, 1388, 1389, 1390, 1391, 1392, 1394, 1396, 1397, 1398, 1400], "level": [1, 37, 43, 50, 60, 64, 69, 73, 80, 97, 102, 103, 141, 142, 143, 159, 164, 167, 169, 177, 202, 487, 489, 490, 491, 492, 494, 497, 505, 507, 509, 517, 524, 533, 535, 536, 538, 559, 565, 573, 581, 591, 603, 622, 625, 626, 629, 639, 644, 650, 656, 662, 672, 699, 700, 705, 706, 711, 712, 717, 718, 760, 767, 773, 788, 861, 872, 882, 891, 902, 904, 905, 909, 924, 925, 926, 927, 928, 929, 936, 1041, 1042, 1043, 1044, 1061, 1085, 1086, 1091, 1092, 1093, 1099, 1100, 1101, 1104, 1127, 1135, 1136, 1144, 1145, 1159, 1161, 1164, 1192, 1201, 1202, 1208, 1220, 1260, 1270, 1280, 1291, 1299, 1301, 1309, 1312, 1330, 1332, 1340, 1341, 1356, 1364, 1370, 1371, 1373, 1384, 1387], "mean": [1, 4, 21, 102, 103, 141, 228, 241, 329, 366, 895, 902, 907, 910, 911, 914, 918, 919, 920, 939, 941, 942, 1140, 1141, 1149, 1150, 1158, 1215, 1229, 1230, 1253, 1374, 1376, 1384, 1390, 1392, 1398, 1399], "silent": [1, 37, 43, 50, 60, 64, 69, 73, 80, 97, 102, 103, 141, 142, 143, 164, 167, 169, 177, 202, 233, 487, 489, 490, 491, 492, 497, 507, 509, 517, 524, 535, 536, 538, 559, 565, 573, 581, 591, 603, 622, 629, 639, 644, 650, 656, 662, 672, 700, 706, 712, 718, 760, 767, 773, 788, 861, 872, 882, 891, 904, 905, 936, 1041, 1042, 1043, 1044, 1061, 1085, 1086, 1091, 1092, 1093, 1099, 1100, 1101, 1104, 1127, 1135, 1136, 1144, 1145, 1164, 1192, 1201, 1202, 1208, 1220, 1260, 1270, 1280, 1291, 1299, 1301, 1309, 1312, 1330, 1332, 1340, 1341, 1356], "bool": [2, 3, 4, 5, 11, 16, 17, 20, 21, 29, 64, 69, 73, 97, 106, 115, 124, 137, 139, 147, 148, 165, 166, 167, 168, 193, 195, 208, 209, 211, 219, 230, 241, 324, 366, 414, 487, 490, 493, 494, 544, 608, 609, 614, 618, 619, 625, 626, 634, 638, 643, 649, 655, 659, 661, 665, 666, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 781, 782, 785, 791, 792, 795, 797, 803, 804, 806, 812, 818, 823, 845, 850, 855, 857, 858, 860, 866, 871, 877, 881, 887, 893, 894, 895, 904, 910, 916, 917, 924, 925, 926, 927, 928, 929, 936, 939, 941, 942, 962, 988, 992, 998, 1002, 1006, 1009, 1013, 1016, 1020, 1024, 1028, 1032, 1034, 1035, 1045, 1053, 1054, 1063, 1074, 1088, 1091, 1096, 1097, 1101, 1140, 1141, 1146, 1148, 1150, 1151, 1152, 1155, 1158, 1161, 1221, 1227, 1233, 1239, 1245, 1249, 1252, 1254, 1255, 1258, 1268, 1278, 1288, 1339, 1340, 1341, 1353, 1357, 1387, 1397], "includ": [2, 48, 128, 788, 872, 882, 953, 958, 1377, 1384, 1386, 1388, 1390, 1399, 1400], "mdl": 2, "chunked_result": [3, 4, 20, 21], "kei": [3, 4, 16, 17, 20, 21, 36, 42, 48, 49, 55, 59, 71, 72, 79, 85, 94, 110, 117, 118, 120, 126, 131, 139, 149, 155, 166, 176, 179, 182, 188, 193, 195, 211, 223, 225, 226, 227, 241, 259, 366, 421, 495, 504, 516, 521, 522, 523, 529, 531, 532, 544, 550, 553, 554, 556, 557, 561, 562, 564, 566, 572, 574, 580, 582, 590, 592, 597, 599, 602, 606, 610, 614, 634, 638, 643, 647, 648, 649, 655, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 759, 781, 782, 783, 784, 785, 786, 787, 792, 794, 795, 797, 800, 801, 802, 804, 806, 808, 810, 812, 814, 816, 819, 821, 823, 825, 826, 844, 848, 850, 851, 853, 856, 858, 862, 863, 864, 869, 874, 875, 879, 918, 919, 920, 933, 936, 956, 963, 964, 968, 1049, 1050, 1085, 1086, 1127, 1128, 1129, 1134, 1140, 1161, 1169, 1170, 1304, 1305, 1317, 1318, 1335, 1336, 1339, 1369, 1391], "valu": [3, 4, 14, 16, 17, 20, 21, 36, 42, 48, 49, 55, 59, 71, 72, 79, 85, 94, 110, 126, 131, 139, 149, 155, 176, 179, 182, 188, 193, 195, 211, 218, 221, 225, 226, 227, 241, 244, 245, 253, 254, 256, 258, 260, 264, 265, 266, 267, 268, 269, 272, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 319, 324, 333, 366, 368, 369, 372, 373, 375, 376, 377, 382, 383, 384, 385, 386, 387, 390, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 421, 460, 493, 494, 495, 501, 503, 504, 514, 515, 516, 521, 522, 523, 529, 531, 532, 544, 550, 556, 561, 562, 564, 566, 572, 574, 580, 582, 590, 592, 597, 599, 602, 606, 608, 609, 610, 614, 634, 637, 638, 641, 643, 647, 648, 649, 655, 661, 667, 671, 676, 679, 682, 685, 687, 694, 698, 704, 708, 710, 714, 716, 729, 732, 733, 739, 740, 743, 746, 749, 752, 754, 755, 757, 761, 765, 768, 769, 771, 774, 775, 777, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 794, 795, 796, 797, 800, 801, 802, 804, 806, 807, 808, 810, 812, 813, 814, 815, 816, 818, 819, 821, 823, 824, 825, 826, 841, 842, 845, 848, 850, 851, 852, 853, 855, 856, 857, 858, 860, 862, 863, 864, 869, 874, 875, 879, 904, 909, 916, 918, 919, 920, 921, 924, 925, 926, 927, 928, 929, 936, 939, 941, 942, 955, 956, 975, 978, 980, 982, 1034, 1037, 1038, 1039, 1042, 1043, 1049, 1050, 1055, 1057, 1059, 1060, 1064, 1067, 1068, 1075, 1082, 1085, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1122, 1123, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1140, 1142, 1143, 1144, 1149, 1151, 1153, 1154, 1157, 1159, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1201, 1202, 1204, 1206, 1207, 1210, 1212, 1213, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1254, 1256, 1257, 1259, 1261, 1262, 1264, 1266, 1267, 1269, 1271, 1272, 1274, 1276, 1277, 1279, 1281, 1282, 1284, 1286, 1287, 1289, 1290, 1292, 1293, 1294, 1295, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1323, 1330, 1331, 1333, 1334, 1335, 1336, 1339, 1346, 1348, 1354, 1369, 1373, 1380, 1384, 1389, 1394, 1395, 1400], "switch": [3, 4, 20, 21, 193, 924, 925, 926, 927, 928, 929, 1140, 1141, 1150, 1158, 1384, 1395], "after": [3, 4, 11, 20, 21, 129, 195, 228, 229, 487, 614, 641, 863, 865, 868, 870, 874, 876, 878, 880, 884, 886, 924, 925, 927, 928, 929, 1390, 1394], "instead": [3, 4, 20, 21, 124, 165, 487, 493, 494, 501, 503, 529, 531, 803, 804, 815, 936, 939, 941, 942, 1082, 1091, 1126, 1159, 1215, 1253, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1384, 1386, 1392, 1397, 1399, 1400], "result": [3, 4, 9, 11, 16, 20, 21, 23, 24, 25, 32, 36, 42, 48, 53, 55, 57, 59, 62, 64, 66, 69, 71, 73, 75, 79, 85, 91, 94, 126, 127, 131, 139, 149, 151, 155, 176, 182, 184, 188, 191, 193, 195, 211, 215, 219, 226, 228, 229, 240, 333, 495, 504, 516, 523, 532, 550, 564, 568, 572, 580, 590, 597, 602, 606, 608, 609, 610, 612, 614, 618, 625, 634, 638, 643, 649, 655, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 721, 724, 727, 730, 734, 737, 741, 743, 787, 793, 795, 801, 803, 806, 809, 812, 820, 823, 863, 865, 868, 870, 876, 878, 880, 886, 893, 894, 895, 902, 903, 904, 905, 907, 908, 909, 911, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 934, 935, 937, 938, 939, 941, 942, 947, 948, 949, 952, 1038, 1039, 1042, 1043, 1059, 1060, 1067, 1068, 1082, 1089, 1090, 1092, 1093, 1096, 1097, 1099, 1100, 1118, 1119, 1126, 1134, 1142, 1143, 1144, 1153, 1154, 1159, 1175, 1176, 1180, 1181, 1185, 1186, 1190, 1191, 1196, 1197, 1201, 1202, 1206, 1207, 1212, 1213, 1215, 1218, 1219, 1225, 1226, 1231, 1232, 1237, 1238, 1243, 1244, 1253, 1254, 1256, 1257, 1264, 1266, 1267, 1274, 1276, 1277, 1284, 1286, 1287, 1298, 1299, 1307, 1309, 1323, 1330, 1346, 1348, 1354, 1365, 1366, 1369, 1373, 1377, 1380, 1384, 1387, 1390, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400], "dataset": [3, 4, 9, 11, 17, 20, 21, 23, 24, 25, 32, 64, 69, 73, 91, 108, 113, 125, 127, 151, 184, 493, 494, 893, 894, 902, 903, 922, 923, 935, 938, 947, 948, 949, 952, 1370, 1384, 1387, 1390, 1396, 1397], "have": [3, 4, 11, 20, 21, 195, 614, 632, 633, 1215, 1253, 1359, 1373, 1384, 1386, 1390, 1392, 1393, 1394, 1395, 1396, 1399], "dimens": [3, 4, 11, 20, 21, 113, 117, 118, 119, 120, 127, 165, 166, 195, 241, 332, 347, 352, 366, 427, 429, 614, 902, 918, 919, 920, 1362, 1369, 1373, 1387, 1388, 1390, 1396, 1397, 1400], "point_model": [4, 21, 128, 129, 556, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 1391], "persist_mdata": [4, 21], "persist_pdata": 4, "numpi": [4, 16, 17, 21, 34, 36, 42, 48, 49, 55, 59, 79, 85, 94, 101, 113, 117, 126, 131, 136, 137, 139, 149, 155, 165, 166, 175, 176, 182, 188, 193, 194, 195, 196, 199, 205, 206, 207, 208, 209, 211, 215, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 241, 252, 257, 366, 371, 491, 492, 495, 500, 504, 511, 516, 520, 523, 528, 532, 541, 550, 563, 564, 571, 572, 579, 580, 586, 589, 590, 596, 597, 598, 602, 606, 610, 613, 614, 615, 617, 621, 624, 628, 631, 632, 633, 634, 638, 643, 649, 655, 660, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 721, 724, 727, 730, 732, 733, 734, 737, 741, 745, 746, 747, 751, 752, 753, 756, 757, 758, 759, 764, 765, 766, 770, 771, 772, 776, 777, 778, 781, 782, 785, 786, 787, 791, 792, 795, 796, 797, 800, 801, 802, 806, 807, 808, 812, 813, 814, 818, 819, 823, 824, 825, 842, 844, 845, 850, 851, 855, 856, 860, 862, 865, 866, 870, 871, 876, 877, 880, 881, 886, 887, 896, 951, 985, 986, 990, 991, 992, 993, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1037, 1053, 1054, 1063, 1074, 1082, 1084, 1091, 1094, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1118, 1119, 1128, 1129, 1134, 1139, 1148, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1215, 1253, 1258, 1259, 1261, 1262, 1268, 1269, 1271, 1272, 1278, 1279, 1281, 1282, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1300, 1302, 1303, 1304, 1305, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1331, 1333, 1334, 1335, 1336, 1358, 1359, 1360, 1361, 1362, 1363, 1369, 1387, 1389, 1390, 1394, 1396, 1397, 1400], "ndarrai": [4, 16, 17, 21, 34, 36, 42, 48, 49, 55, 59, 79, 85, 94, 101, 113, 119, 120, 126, 131, 136, 137, 139, 149, 155, 165, 166, 175, 176, 182, 188, 193, 194, 195, 196, 199, 205, 206, 207, 208, 209, 211, 215, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 242, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 321, 322, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 491, 492, 495, 500, 504, 511, 516, 520, 523, 528, 532, 541, 550, 563, 564, 571, 572, 579, 580, 586, 589, 590, 596, 597, 598, 602, 606, 610, 613, 614, 615, 617, 621, 624, 628, 631, 632, 633, 634, 638, 643, 649, 655, 660, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 721, 724, 727, 730, 732, 733, 734, 737, 741, 745, 746, 747, 751, 752, 753, 756, 757, 758, 759, 764, 765, 766, 770, 771, 772, 776, 777, 778, 781, 782, 785, 786, 787, 791, 792, 795, 796, 797, 800, 801, 802, 806, 807, 808, 812, 813, 814, 818, 819, 823, 824, 825, 842, 844, 845, 850, 851, 855, 856, 860, 862, 865, 866, 870, 871, 876, 877, 880, 881, 886, 887, 896, 921, 951, 985, 986, 990, 991, 992, 993, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1037, 1053, 1054, 1063, 1074, 1082, 1084, 1091, 1094, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1118, 1119, 1128, 1129, 1134, 1139, 1148, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1215, 1253, 1258, 1259, 1261, 1262, 1268, 1269, 1271, 1272, 1278, 1279, 1281, 1282, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1300, 1302, 1303, 1304, 1305, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1331, 1333, 1334, 1335, 1336, 1339, 1358, 1359, 1360, 1361, 1362, 1363, 1387, 1397, 1400], "interest": [4, 16, 17, 21, 46, 47, 955, 1366, 1373, 1393, 1396, 1397], "shape": [4, 16, 17, 21, 34, 36, 42, 48, 49, 55, 59, 79, 85, 94, 101, 113, 120, 131, 136, 137, 139, 149, 155, 166, 175, 176, 182, 188, 193, 194, 195, 196, 199, 205, 206, 207, 208, 209, 211, 215, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 241, 347, 366, 491, 492, 495, 500, 504, 511, 516, 520, 523, 528, 532, 541, 550, 563, 564, 571, 572, 579, 580, 586, 589, 590, 596, 597, 598, 602, 606, 610, 613, 614, 615, 617, 621, 624, 628, 631, 632, 633, 634, 638, 643, 649, 655, 660, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 721, 724, 727, 730, 732, 734, 737, 741, 745, 746, 747, 751, 752, 753, 756, 757, 758, 759, 764, 765, 766, 770, 771, 772, 776, 777, 778, 781, 782, 785, 786, 787, 791, 792, 795, 796, 797, 800, 801, 802, 806, 807, 808, 812, 813, 814, 818, 819, 823, 824, 825, 842, 845, 850, 851, 855, 856, 860, 862, 865, 866, 870, 871, 876, 877, 880, 881, 886, 887, 896, 951, 985, 986, 990, 991, 992, 993, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1037, 1038, 1039, 1042, 1043, 1053, 1054, 1059, 1060, 1063, 1067, 1068, 1074, 1082, 1084, 1089, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1122, 1123, 1128, 1129, 1130, 1131, 1134, 1139, 1142, 1143, 1144, 1146, 1148, 1153, 1154, 1155, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1175, 1176, 1180, 1181, 1185, 1186, 1190, 1191, 1196, 1197, 1201, 1202, 1203, 1206, 1207, 1212, 1213, 1218, 1219, 1221, 1225, 1226, 1227, 1231, 1232, 1233, 1237, 1238, 1239, 1243, 1244, 1245, 1249, 1252, 1256, 1257, 1258, 1259, 1261, 1262, 1266, 1267, 1268, 1269, 1271, 1272, 1276, 1277, 1278, 1279, 1281, 1282, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1299, 1300, 1302, 1303, 1304, 1305, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1330, 1331, 1333, 1334, 1335, 1336, 1338, 1339, 1356, 1359, 1360, 1361, 1362, 1363, 1378, 1384, 1396, 1400], "n_point": [4, 16, 17, 21, 48, 49, 59, 94, 113, 117, 120, 121, 131, 176, 182, 188, 194, 219, 221, 222, 225, 226, 227, 229, 230, 495, 504, 516, 523, 532, 564, 572, 580, 590, 597, 598, 602, 606, 610, 613, 621, 628, 746, 747, 752, 753, 757, 758, 765, 766, 771, 772, 777, 778, 781, 782, 785, 786, 787, 791, 792, 795, 796, 797, 800, 801, 802, 806, 807, 808, 812, 813, 814, 818, 819, 823, 824, 825, 842, 845, 850, 851, 855, 856, 860, 862, 865, 866, 870, 871, 876, 877, 880, 881, 886, 887, 992, 993, 1002, 1003, 1009, 1010, 1012, 1016, 1017, 1024, 1025, 1032, 1033, 1082, 1084, 1134, 1258, 1268, 1278, 1288, 1339, 1387, 1396], "3": [4, 16, 17, 21, 113, 120, 193, 194, 196, 221, 222, 225, 252, 324, 371, 598, 605, 613, 615, 621, 628, 746, 747, 752, 753, 757, 758, 765, 766, 771, 772, 777, 778, 786, 800, 896, 951, 985, 1082, 1084, 1215, 1253, 1373, 1378, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "should": [4, 21, 36, 42, 48, 55, 59, 79, 85, 94, 126, 131, 139, 143, 149, 155, 169, 182, 188, 202, 211, 220, 493, 494, 495, 497, 504, 507, 516, 517, 523, 532, 536, 550, 561, 602, 603, 606, 610, 634, 638, 639, 643, 649, 655, 661, 662, 667, 671, 676, 679, 682, 687, 694, 698, 700, 704, 706, 710, 712, 716, 718, 745, 751, 756, 764, 770, 776, 788, 872, 874, 882, 1134, 1136, 1215, 1253, 1359, 1386, 1387, 1389, 1390, 1394, 1395, 1398, 1399, 1400], "kept": [4, 21, 1384], "output": [4, 21, 36, 38, 42, 44, 48, 51, 55, 56, 57, 58, 59, 61, 79, 81, 85, 86, 94, 98, 126, 127, 131, 133, 139, 144, 149, 150, 151, 155, 157, 166, 182, 183, 184, 188, 189, 198, 203, 211, 233, 493, 494, 495, 498, 501, 503, 504, 508, 516, 518, 521, 522, 523, 525, 529, 531, 532, 537, 550, 551, 602, 604, 606, 607, 610, 611, 632, 633, 634, 635, 636, 637, 638, 640, 643, 645, 649, 651, 655, 657, 661, 663, 667, 668, 671, 673, 676, 677, 679, 680, 682, 683, 687, 688, 694, 695, 698, 701, 704, 707, 710, 713, 716, 719, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 1134, 1137, 1215, 1253, 1356, 1364, 1384, 1387, 1388, 1389, 1390, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "which": [4, 21, 35, 38, 40, 44, 46, 49, 51, 53, 56, 57, 61, 77, 81, 83, 86, 92, 98, 102, 128, 133, 137, 144, 147, 150, 152, 157, 159, 176, 181, 183, 185, 189, 191, 198, 200, 203, 210, 212, 218, 225, 226, 227, 229, 230, 493, 498, 501, 503, 508, 512, 514, 518, 521, 525, 529, 537, 542, 546, 547, 551, 564, 572, 580, 590, 597, 600, 604, 605, 607, 608, 611, 612, 618, 625, 632, 635, 636, 640, 641, 645, 647, 651, 653, 654, 657, 658, 663, 665, 668, 669, 670, 673, 674, 677, 678, 680, 681, 683, 684, 688, 689, 691, 693, 695, 696, 697, 701, 702, 703, 707, 708, 713, 714, 715, 719, 743, 744, 774, 775, 781, 782, 783, 785, 786, 787, 791, 792, 795, 797, 800, 801, 802, 806, 808, 812, 814, 818, 819, 823, 825, 850, 851, 855, 856, 860, 862, 863, 865, 866, 867, 868, 870, 871, 873, 876, 877, 878, 880, 881, 883, 886, 887, 895, 898, 899, 900, 901, 917, 927, 928, 929, 951, 1091, 1101, 1132, 1137, 1140, 1141, 1150, 1158, 1161, 1215, 1253, 1360, 1363, 1370, 1373, 1381, 1385, 1389, 1390, 1393, 1396, 1397, 1398, 1399, 1400], "pointdatamodel": [4, 21, 46, 57, 129, 130, 181, 182, 183, 184, 185, 186, 187, 200, 556, 600, 605, 608, 1366, 1370, 1373], "addit": [4, 17, 21, 112, 127, 151, 184, 219, 487, 488, 493, 494, 521, 522, 545, 577, 585, 633, 637, 690, 692, 697, 703, 709, 715, 732, 733, 857, 858, 936, 943, 944, 950, 955, 1035, 1056, 1058, 1065, 1076, 1082, 1084, 1127, 1141, 1149, 1150, 1152, 1157, 1158, 1164, 1301, 1308, 1312, 1329, 1332, 1338, 1339, 1356, 1384, 1395, 1398, 1399], "execut": [4, 21, 36, 42, 48, 55, 59, 79, 85, 94, 126, 129, 131, 139, 149, 155, 182, 188, 211, 220, 495, 504, 516, 523, 532, 550, 602, 606, 610, 634, 638, 643, 649, 655, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 745, 751, 756, 764, 770, 776, 1134, 1340, 1347, 1373, 1378, 1386], "persist_fdata": [4, 21], "point_result": [4, 16, 21, 32, 1387, 1396], "clear": [5, 106, 1393], "max_it": [9, 10], "maxim": [9, 10, 462, 618, 619, 641, 761, 762, 768, 769, 775, 794, 804, 810, 815, 816, 821, 826, 841, 848, 852, 853, 857, 858, 955, 987, 990, 994, 996, 1000, 1004, 1007, 1011, 1014, 1018, 1022, 1026, 1030, 1075, 1082, 1105, 1106, 1107, 1108, 1126, 1140, 1141, 1146, 1149, 1150, 1151, 1155, 1157, 1158, 1159, 1165, 1166, 1183, 1184, 1216, 1221, 1223, 1227, 1229, 1233, 1235, 1239, 1241, 1245, 1247, 1249, 1250, 1252, 1254, 1261, 1264, 1271, 1274, 1275, 1281, 1284, 1285, 1292, 1293, 1298, 1302, 1307, 1308, 1313, 1314, 1323, 1333, 1373, 1374, 1376, 1380, 1384, 1390, 1394], "conv_crit": [9, 10], "convcrit": [9, 10, 62, 63, 64, 65, 66, 67, 68, 71, 1367], "converg": [9, 10, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 75, 1365, 1367, 1384, 1387, 1397], "criteria": [9, 10, 62, 63, 64, 66, 67, 69, 71, 72, 73, 75, 1367], "prev_farm_result": 9, "previou": [9, 64, 69, 73, 166, 223, 228, 230, 759, 863, 866, 868, 871, 874, 877, 878, 881, 884, 887, 1397], "set_urelax": [9, 14], "entry_point": [9, 14], "urel": [9, 14, 83, 84], "under": [9, 14, 15, 77, 78, 83, 84, 137, 138, 143, 152, 169, 185, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136, 1367, 1381, 1384, 1385, 1388, 1389, 1391, 1394, 1400], "relax": [9, 14, 15, 77, 78, 83, 84, 1367, 1384], "paramet": [9, 15, 16, 46, 125, 137, 152, 185, 459, 466, 467, 493, 501, 529, 544, 546, 547, 561, 684, 696, 702, 708, 714, 732, 754, 761, 768, 774, 803, 809, 815, 820, 826, 846, 847, 852, 857, 943, 964, 1082, 1307, 1323, 1373, 1375, 1380, 1384, 1390, 1393, 1396, 1398, 1399], "urelax": [9, 15, 77, 78, 83, 84, 85, 86, 1367], "tupl": [10, 17, 112, 114, 117, 118, 119, 120, 126, 127, 151, 165, 184, 241, 347, 352, 366, 488, 489, 544, 555, 561, 562, 791, 818, 855, 860, 895, 917, 921, 924, 925, 926, 927, 928, 929, 950, 955, 1160, 1346, 1348, 1354, 1357], "argument": [10, 11, 17, 114, 127, 151, 184, 545, 555, 633, 891, 895, 902, 921, 950, 955, 1160, 1215, 1253, 1258, 1268, 1278, 1288, 1340, 1341, 1346, 1348, 1354, 1357, 1384, 1388, 1394, 1398, 1399], "keyword": [10, 114, 1160, 1346, 1348, 1354, 1357], "first": [14, 64, 69, 73, 117, 124, 128, 166, 239, 708, 714, 749, 939, 941, 942, 1373, 1386, 1387, 1390, 1392, 1398, 1399, 1400], "pre_rotor": [14, 35, 137, 139, 147, 148, 159, 210, 546, 658, 659, 678, 681, 1127, 1161], "post_rotor": [14, 1127], "pre_wak": 14, "last": [14, 902, 921, 985, 1386], "urlx": 15, "util": [15, 163, 165, 231, 236, 556, 922, 923, 943, 944, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1254, 1255, 1264, 1265, 1274, 1275, 1284, 1285, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1371, 1384, 1387, 1390, 1397, 1398, 1399], "sequenti": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 754, 943, 946, 947, 1365, 1377, 1384], "A": [16, 66, 92, 113, 152, 155, 159, 185, 188, 236, 237, 241, 252, 320, 366, 371, 514, 521, 553, 693, 732, 736, 739, 798, 852, 853, 857, 858, 884, 890, 916, 956, 957, 1215, 1253, 1254, 1264, 1274, 1284, 1367, 1368, 1370, 1371, 1372, 1373, 1376, 1378, 1388, 1389, 1391], "without": [16, 137, 546, 798, 921, 1368, 1373, 1387, 1390, 1394, 1396, 1397], "thi": [16, 35, 36, 40, 42, 46, 48, 53, 55, 57, 59, 77, 79, 85, 94, 126, 127, 131, 139, 147, 148, 149, 151, 155, 176, 182, 184, 188, 193, 195, 211, 220, 224, 225, 236, 252, 371, 495, 504, 516, 523, 532, 550, 561, 564, 572, 580, 590, 597, 602, 606, 608, 610, 614, 634, 638, 641, 643, 649, 655, 659, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 729, 743, 745, 751, 756, 764, 770, 775, 776, 780, 783, 786, 788, 790, 793, 794, 798, 800, 803, 804, 809, 810, 815, 816, 820, 821, 826, 841, 847, 848, 852, 853, 857, 858, 872, 874, 882, 902, 924, 925, 926, 927, 928, 929, 930, 964, 985, 1004, 1011, 1018, 1034, 1035, 1101, 1122, 1123, 1130, 1131, 1134, 1161, 1215, 1253, 1254, 1264, 1274, 1284, 1307, 1319, 1320, 1366, 1367, 1368, 1371, 1372, 1373, 1374, 1378, 1384, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "us": [16, 117, 127, 152, 185, 228, 366, 379, 487, 561, 576, 605, 641, 743, 775, 780, 783, 803, 804, 815, 826, 841, 848, 895, 902, 917, 936, 1034, 1035, 1037, 1082, 1106, 1107, 1110, 1111, 1122, 1123, 1126, 1130, 1131, 1159, 1165, 1166, 1167, 1168, 1215, 1253, 1261, 1262, 1281, 1282, 1292, 1293, 1294, 1295, 1298, 1302, 1303, 1307, 1313, 1314, 1315, 1316, 1319, 1320, 1323, 1333, 1334, 1368, 1372, 1373, 1374, 1384, 1386, 1387, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400], "simul": [16, 1368, 1384, 1385, 1388, 1393], "environ": [16, 1368, 1384], "do": [16, 166, 1215, 1253, 1368, 1373, 1384, 1390, 1392, 1397, 1398, 1399], "support": [16, 964, 1215, 1253, 1368, 1384, 1385, 1386, 1393], "multi": [16, 512, 783, 1368, 1372, 1383, 1384, 1385], "comput": [16, 36, 42, 48, 55, 59, 79, 85, 94, 126, 131, 139, 149, 155, 173, 182, 188, 211, 218, 220, 223, 228, 366, 412, 495, 504, 516, 523, 532, 550, 602, 606, 610, 634, 638, 643, 649, 655, 661, 667, 671, 676, 679, 682, 687, 693, 694, 698, 704, 710, 716, 743, 745, 749, 751, 754, 756, 759, 761, 764, 768, 770, 774, 776, 847, 951, 1134, 1215, 1253, 1365, 1368, 1373, 1384, 1393, 1397, 1400], "like": [16, 1368, 1388, 1393, 1395], "fmu": [16, 1368], "calc_par": [16, 17, 35, 40, 46, 53, 57, 77, 83, 92, 127, 128, 137, 145, 147, 151, 152, 159, 181, 184, 185, 191, 200, 210, 212, 493, 501, 512, 514, 521, 529, 542, 546, 547, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 1132], "states0": [16, 223, 759], "origin": [16, 92, 93, 230, 241, 301, 866, 871, 877, 881, 887, 1027, 1129, 1132, 1133, 1170, 1215, 1253, 1305, 1318, 1336, 1385, 1397], "plugin": [16, 17, 87, 943, 1368, 1377], "sequentialiterplugin": [16, 17], "updat": [16, 17, 87, 91, 173, 176, 230, 561, 564, 568, 572, 576, 580, 584, 587, 590, 594, 597, 641, 866, 871, 877, 881, 887, 943, 947, 1082, 1122, 1123, 1126, 1130, 1131, 1159, 1298, 1307, 1319, 1320, 1323, 1368, 1384, 1390, 1400], "everi": [16, 17, 625, 626, 1386], "__iter__": [16, 18], "__next__": [16, 19], "step": [16, 19, 33, 219, 241, 352, 366, 491, 492, 618, 619, 625, 626, 761, 762, 857, 858, 916, 955, 1384, 1387, 1388, 1389, 1391, 1392, 1393, 1397, 1399], "next": [16, 19, 1387, 1390, 1392, 1394, 1396, 1398, 1399], "size": [16, 33, 92, 99, 117, 128, 134, 195, 200, 204, 219, 241, 291, 348, 366, 493, 499, 501, 510, 512, 514, 519, 521, 526, 529, 539, 542, 614, 761, 762, 857, 858, 895, 900, 955, 1132, 1133, 1138, 1389, 1390, 1398], "total": [16, 33, 92, 99, 128, 134, 200, 204, 228, 234, 493, 499, 501, 510, 512, 514, 519, 521, 526, 529, 539, 542, 902, 910, 1082, 1112, 1113, 1126, 1132, 1138, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1384, 1390], "counter": [16, 22, 92, 95, 117, 124, 1082, 1095, 1126, 1159, 1298, 1307, 1323], "index": [16, 22, 28, 48, 49, 92, 95, 96, 124, 128, 132, 152, 156, 166, 175, 176, 200, 201, 206, 207, 209, 219, 221, 222, 223, 225, 230, 366, 379, 487, 493, 496, 501, 503, 506, 509, 512, 514, 521, 529, 531, 534, 538, 542, 563, 564, 571, 572, 579, 580, 586, 589, 590, 596, 597, 654, 746, 747, 752, 753, 757, 758, 759, 765, 766, 771, 772, 777, 778, 781, 782, 785, 786, 791, 792, 795, 796, 797, 800, 806, 807, 812, 813, 818, 823, 824, 842, 845, 850, 855, 860, 866, 871, 877, 881, 887, 893, 894, 895, 924, 925, 926, 927, 928, 929, 1037, 1082, 1117, 1121, 1126, 1132, 1159, 1298, 1307, 1323, 1358, 1384, 1388, 1394, 1395, 1398, 1400], "weight": [16, 34, 92, 101, 128, 136, 191, 193, 195, 199, 200, 205, 424, 477, 493, 494, 500, 501, 511, 512, 514, 520, 521, 528, 529, 541, 542, 544, 568, 587, 612, 614, 617, 618, 619, 624, 625, 626, 631, 902, 921, 927, 928, 929, 1118, 1119, 1132, 1139, 1215, 1230, 1253, 1369, 1373, 1380, 1384, 1387, 1388, 1390, 1395, 1396, 1397, 1399], "arrai": [16, 34, 36, 42, 48, 55, 59, 79, 85, 94, 126, 131, 139, 149, 155, 166, 182, 188, 206, 207, 211, 220, 241, 242, 246, 247, 248, 249, 250, 257, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 322, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 366, 495, 504, 516, 523, 532, 550, 602, 606, 610, 632, 633, 634, 638, 643, 649, 655, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 745, 751, 756, 764, 770, 776, 788, 872, 882, 921, 985, 986, 1037, 1038, 1039, 1042, 1043, 1059, 1060, 1067, 1068, 1089, 1090, 1091, 1092, 1093, 1096, 1097, 1099, 1100, 1101, 1122, 1123, 1130, 1131, 1134, 1142, 1143, 1144, 1146, 1153, 1154, 1155, 1175, 1176, 1180, 1181, 1185, 1186, 1190, 1191, 1196, 1197, 1201, 1202, 1203, 1206, 1207, 1212, 1213, 1215, 1218, 1219, 1221, 1225, 1226, 1227, 1231, 1232, 1233, 1237, 1238, 1239, 1243, 1244, 1245, 1249, 1252, 1253, 1256, 1257, 1258, 1266, 1267, 1268, 1276, 1277, 1278, 1286, 1287, 1288, 1299, 1309, 1319, 1320, 1330, 1339, 1360, 1361, 1362, 1363, 1387, 1389, 1390, 1397, 1400], "fdata": [16, 26, 35, 36, 40, 42, 46, 48, 49, 53, 55, 57, 59, 77, 79, 83, 85, 92, 94, 128, 131, 137, 139, 147, 149, 152, 155, 159, 163, 165, 166, 173, 175, 176, 179, 181, 182, 185, 188, 191, 193, 195, 196, 200, 210, 211, 212, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 493, 495, 501, 504, 512, 514, 516, 521, 523, 529, 532, 542, 546, 547, 550, 561, 563, 564, 566, 568, 571, 572, 574, 576, 579, 580, 582, 584, 586, 587, 589, 590, 592, 594, 596, 597, 598, 599, 600, 602, 605, 606, 608, 610, 612, 614, 615, 618, 625, 632, 634, 636, 638, 641, 643, 647, 649, 653, 655, 658, 661, 665, 667, 669, 671, 674, 676, 678, 679, 681, 682, 684, 687, 689, 691, 693, 694, 696, 698, 702, 704, 708, 710, 714, 716, 743, 745, 746, 747, 749, 751, 752, 753, 754, 756, 757, 758, 759, 761, 764, 765, 766, 768, 770, 771, 772, 774, 776, 777, 778, 780, 781, 782, 783, 785, 786, 787, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 806, 807, 808, 809, 812, 813, 814, 815, 818, 819, 820, 823, 824, 825, 826, 842, 847, 850, 851, 852, 855, 856, 857, 860, 862, 863, 865, 866, 868, 870, 871, 874, 876, 877, 878, 880, 881, 884, 886, 887, 1132, 1134], "pdata": [16, 31, 46, 48, 49, 57, 59, 92, 94, 117, 120, 128, 131, 163, 165, 166, 173, 175, 176, 179, 181, 182, 185, 188, 200, 218, 222, 223, 224, 225, 226, 227, 228, 229, 230, 493, 495, 501, 504, 512, 514, 516, 521, 523, 529, 532, 542, 561, 563, 564, 566, 568, 571, 572, 574, 576, 579, 580, 582, 584, 586, 587, 589, 590, 592, 594, 596, 597, 599, 600, 602, 605, 606, 608, 610, 743, 747, 749, 753, 754, 758, 759, 761, 766, 768, 772, 774, 778, 780, 781, 782, 783, 785, 786, 787, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 806, 807, 808, 809, 812, 813, 814, 815, 818, 819, 820, 823, 824, 825, 826, 842, 847, 850, 851, 852, 855, 856, 857, 860, 862, 863, 865, 866, 868, 870, 871, 874, 876, 877, 878, 880, 881, 884, 886, 887, 1132, 1134], "overal": [16, 25, 32], "cur_farm_result": [16, 23], "cur_point_result": [16, 24], "indx": 28, "itr": 29, "": [33, 35, 40, 46, 53, 57, 77, 83, 92, 108, 109, 117, 118, 125, 127, 128, 137, 147, 151, 152, 159, 166, 181, 184, 185, 191, 200, 210, 212, 241, 333, 366, 443, 444, 445, 450, 468, 469, 470, 478, 493, 494, 501, 512, 514, 521, 529, 542, 546, 547, 576, 577, 585, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 921, 924, 925, 926, 927, 928, 929, 985, 1084, 1091, 1101, 1132, 1308, 1329, 1380, 1384, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "w": [34, 166, 213, 421, 437, 478, 485, 486, 501, 521, 522, 605, 689, 690, 692, 696, 697, 702, 703, 708, 714, 964, 966, 968, 971, 974, 975, 980, 1215, 1253, 1361, 1362, 1369, 1373, 1378, 1380, 1384, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "n_turbin": [34, 36, 42, 55, 79, 85, 101, 117, 123, 136, 137, 139, 149, 155, 193, 195, 196, 205, 211, 220, 231, 234, 492, 500, 511, 520, 528, 541, 550, 614, 615, 632, 633, 634, 638, 643, 649, 655, 660, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 745, 751, 756, 764, 770, 776, 896, 1139, 1173, 1174, 1204, 1205, 1254, 1255, 1264, 1265, 1274, 1275, 1387, 1390, 1392, 1394, 1395, 1396, 1397], "calcord": [35, 36, 37, 38, 39, 1366, 1387, 1397], "farmdatamodel": [35, 40, 53, 77, 83, 137, 147, 148, 149, 150, 151, 152, 153, 154, 156, 159, 191, 210, 1366, 1367, 1370], "via": [35, 40, 46, 53, 57, 77, 83, 92, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 200, 210, 212, 487, 488, 493, 494, 501, 503, 509, 512, 514, 521, 529, 531, 538, 542, 546, 547, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 893, 902, 922, 930, 933, 934, 937, 948, 951, 953, 964, 1091, 1101, 1132, 1340, 1366, 1371, 1372, 1374, 1378, 1384, 1385, 1390, 1393, 1394, 1398, 1400], "output_farm_var": [35, 38, 40, 44, 53, 56, 77, 81, 83, 86, 137, 144, 147, 150, 152, 157, 159, 191, 198, 210, 212, 546, 547, 551, 612, 618, 625, 632, 635, 636, 640, 641, 645, 647, 651, 653, 657, 658, 663, 665, 668, 669, 673, 674, 677, 678, 680, 681, 683, 684, 688, 689, 691, 693, 695, 696, 701, 702, 707, 708, 713, 714, 719], "being": [35, 38, 40, 44, 46, 49, 51, 53, 56, 57, 61, 77, 81, 83, 86, 92, 98, 128, 133, 137, 144, 147, 150, 152, 157, 159, 181, 183, 185, 189, 191, 198, 200, 203, 210, 212, 225, 226, 493, 498, 501, 508, 512, 514, 518, 521, 525, 529, 537, 542, 546, 547, 551, 600, 604, 605, 607, 608, 611, 612, 618, 625, 632, 635, 636, 640, 641, 645, 647, 651, 653, 657, 658, 663, 665, 668, 669, 673, 674, 677, 678, 680, 681, 683, 684, 688, 689, 691, 693, 695, 696, 701, 702, 707, 708, 713, 714, 719, 786, 787, 800, 801, 1101, 1132, 1137, 1215, 1253], "modifi": [35, 38, 40, 44, 46, 49, 51, 53, 56, 57, 61, 77, 81, 83, 86, 92, 98, 128, 133, 137, 144, 147, 150, 152, 157, 159, 173, 175, 176, 181, 183, 185, 189, 191, 195, 198, 200, 203, 210, 212, 225, 226, 493, 498, 501, 508, 512, 514, 518, 521, 525, 529, 537, 542, 546, 547, 551, 561, 563, 564, 568, 571, 572, 576, 579, 580, 584, 586, 587, 589, 590, 594, 596, 597, 600, 604, 605, 607, 608, 611, 612, 614, 618, 625, 632, 635, 636, 640, 641, 645, 647, 651, 653, 657, 658, 663, 665, 668, 669, 673, 674, 677, 678, 680, 681, 683, 684, 688, 689, 691, 693, 695, 696, 701, 702, 707, 708, 713, 714, 719, 786, 787, 800, 801, 1132, 1137, 1370], "main": [35, 36, 40, 42, 46, 48, 53, 55, 57, 59, 77, 79, 83, 85, 92, 94, 125, 126, 128, 131, 137, 139, 147, 149, 152, 155, 159, 181, 182, 185, 188, 200, 210, 211, 212, 493, 495, 501, 504, 512, 514, 516, 521, 523, 529, 532, 542, 546, 547, 550, 600, 602, 605, 606, 608, 610, 632, 634, 636, 638, 641, 643, 647, 649, 653, 655, 658, 661, 665, 667, 669, 671, 674, 676, 678, 679, 681, 682, 684, 687, 689, 691, 693, 694, 696, 698, 702, 704, 708, 710, 714, 716, 1132, 1134, 1386, 1388], "run_calcul": [35, 40, 46, 53, 57, 77, 83, 92, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 200, 210, 212, 493, 501, 512, 514, 521, 529, 542, 546, 547, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 1132], "out_var": [35, 40, 46, 53, 57, 77, 83, 92, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 200, 210, 212, 493, 501, 512, 514, 521, 529, 542, 546, 547, 600, 605, 608, 612, 618, 625, 632, 633, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 1132], "start": [35, 40, 46, 53, 57, 77, 83, 92, 125, 127, 128, 129, 137, 147, 151, 152, 159, 181, 184, 185, 191, 200, 210, 212, 237, 241, 313, 366, 487, 493, 501, 512, 514, 521, 529, 542, 546, 547, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 743, 744, 774, 775, 939, 941, 942, 956, 957, 1132, 1384, 1388, 1394, 1396, 1400], "apply_ufunc": [35, 40, 46, 53, 57, 77, 83, 92, 117, 118, 125, 127, 128, 137, 147, 151, 152, 159, 181, 184, 185, 191, 200, 210, 212, 493, 501, 512, 514, 521, 529, 542, 546, 547, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 1132], "singl": [36, 42, 48, 55, 59, 79, 85, 92, 94, 117, 126, 131, 139, 149, 155, 182, 188, 211, 220, 492, 495, 504, 516, 521, 523, 532, 550, 602, 606, 610, 612, 634, 638, 643, 649, 655, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 745, 751, 756, 764, 770, 776, 939, 941, 942, 1034, 1038, 1055, 1057, 1059, 1064, 1067, 1075, 1082, 1096, 1126, 1134, 1140, 1142, 1149, 1151, 1153, 1157, 1159, 1173, 1175, 1178, 1180, 1183, 1185, 1188, 1190, 1194, 1196, 1199, 1204, 1206, 1210, 1212, 1216, 1218, 1223, 1225, 1229, 1231, 1235, 1237, 1241, 1243, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1365, 1366, 1368, 1372, 1383, 1384, 1385, 1387, 1388, 1392, 1393, 1397], "output_var": [38, 44, 51, 56, 61, 81, 86, 98, 133, 144, 150, 157, 183, 189, 198, 203, 493, 494, 498, 501, 503, 508, 512, 518, 525, 529, 531, 537, 542, 551, 600, 601, 604, 607, 611, 635, 636, 637, 640, 645, 651, 657, 663, 668, 669, 670, 673, 677, 680, 683, 688, 695, 701, 707, 713, 719, 1137, 1388, 1389, 1390, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "smdl": [39, 45, 52, 82, 100, 135, 146, 158, 171, 180, 190, 527, 540, 552, 567, 575, 583, 593, 652, 748, 779, 789], "farmwakescalcul": [40, 41, 42, 43, 44, 45, 77, 78, 79, 80, 81, 82, 1366, 1367, 1387, 1397], "effect": [40, 46, 77, 173, 191, 193, 443, 444, 445, 468, 469, 470, 587, 612, 618, 625, 798, 1366, 1367, 1373, 1375, 1376, 1380, 1384, 1387, 1393, 1394, 1395, 1399, 1400], "pointwakescalcul": [46, 47, 48, 49, 50, 51, 52, 1366], "point_var": [46, 47, 57, 58], "emodel": [46, 47], "pointdatamodellist": [46, 47, 128, 185, 186, 187, 188, 189, 190, 1370], "extra": [46, 47, 924, 925, 926, 927, 928, 929, 1215, 1253], "emodels_cpar": [46, 47], "output_point_var": [46, 51, 57, 61, 92, 98, 128, 133, 181, 183, 185, 189, 200, 203, 493, 498, 501, 508, 512, 514, 518, 521, 525, 529, 537, 542, 600, 604, 605, 607, 608, 611, 1132, 1137], "contribute_to_wake_delta": [46, 49, 173, 175, 176, 224, 225, 561, 563, 564, 568, 571, 572, 576, 579, 580, 584, 586, 587, 589, 590, 594, 596, 597, 780, 783, 786, 790, 793, 798, 800, 803, 809, 815, 820, 847, 852, 857], "contribut": [46, 49, 173, 175, 224, 225, 228, 229, 561, 563, 568, 571, 576, 579, 584, 586, 587, 589, 594, 596, 780, 783, 786, 790, 793, 798, 800, 803, 809, 815, 820, 847, 852, 857, 863, 865, 868, 870, 874, 876, 878, 880, 884, 886, 1387], "delta": [46, 49, 62, 65, 66, 70, 71, 74, 75, 173, 175, 176, 179, 224, 225, 226, 227, 228, 229, 230, 561, 563, 564, 566, 568, 571, 572, 574, 576, 579, 580, 582, 584, 586, 587, 589, 590, 592, 594, 596, 597, 599, 608, 609, 678, 681, 754, 755, 768, 769, 780, 781, 782, 783, 785, 786, 787, 790, 792, 793, 795, 797, 798, 800, 801, 802, 803, 806, 808, 809, 812, 814, 815, 819, 820, 823, 825, 847, 850, 851, 852, 856, 857, 862, 863, 864, 865, 866, 868, 870, 871, 874, 875, 876, 877, 878, 880, 881, 884, 885, 886, 887, 895, 916, 986, 1189, 1217, 1373, 1384, 1387, 1393, 1397], "states_source_turbin": [46, 48, 49, 166, 175, 218, 219, 221, 222, 223, 225, 230, 563, 571, 579, 586, 589, 596, 743, 746, 747, 749, 752, 753, 754, 757, 758, 759, 761, 765, 766, 768, 771, 772, 774, 777, 778, 781, 782, 785, 786, 791, 792, 795, 796, 797, 800, 806, 807, 812, 813, 818, 823, 824, 826, 842, 845, 850, 855, 860, 866, 871, 877, 881, 887], "For": [48, 49, 125, 166, 175, 176, 206, 207, 219, 221, 222, 223, 225, 230, 544, 563, 564, 571, 572, 579, 580, 586, 589, 590, 596, 597, 641, 746, 747, 752, 753, 757, 758, 759, 765, 766, 771, 772, 777, 778, 781, 782, 785, 786, 791, 792, 795, 796, 797, 800, 803, 806, 807, 812, 813, 818, 823, 824, 842, 845, 850, 855, 860, 866, 871, 877, 881, 887, 955, 1215, 1253, 1386, 1387, 1388, 1390, 1392, 1393, 1394, 1396, 1397, 1398, 1400], "each": [48, 49, 87, 125, 137, 155, 166, 175, 176, 188, 206, 207, 219, 221, 222, 223, 225, 230, 241, 352, 366, 544, 563, 564, 571, 572, 579, 580, 586, 589, 590, 596, 597, 708, 714, 746, 747, 749, 752, 753, 757, 758, 759, 765, 766, 771, 772, 777, 778, 781, 782, 785, 786, 791, 792, 795, 796, 797, 800, 806, 807, 812, 813, 818, 823, 824, 842, 845, 850, 855, 860, 866, 871, 877, 881, 887, 904, 924, 955, 1075, 1140, 1146, 1149, 1151, 1155, 1157, 1215, 1216, 1221, 1223, 1227, 1229, 1233, 1235, 1239, 1241, 1245, 1247, 1249, 1250, 1252, 1253, 1368, 1373, 1387, 1388, 1390, 1393, 1394, 1396, 1397, 1398, 1399, 1400], "one": [48, 49, 152, 155, 166, 175, 176, 185, 188, 193, 195, 199, 219, 221, 222, 223, 225, 230, 241, 327, 366, 561, 562, 563, 564, 568, 569, 571, 572, 576, 577, 579, 580, 584, 585, 586, 587, 588, 589, 590, 595, 596, 597, 614, 617, 618, 619, 624, 631, 746, 747, 752, 753, 757, 758, 759, 765, 766, 771, 772, 777, 778, 781, 782, 785, 786, 791, 792, 795, 796, 797, 800, 806, 807, 812, 813, 818, 823, 824, 842, 845, 850, 855, 860, 866, 871, 877, 881, 887, 948, 955, 985, 1215, 1253, 1359, 1373, 1377, 1384, 1388, 1392, 1399, 1400], "caus": [48, 49, 166, 175, 219, 221, 222, 223, 225, 230, 563, 571, 579, 586, 589, 596, 746, 747, 752, 753, 757, 758, 759, 765, 766, 771, 772, 777, 778, 781, 782, 785, 786, 791, 792, 795, 796, 797, 800, 806, 807, 812, 813, 818, 823, 824, 842, 845, 850, 855, 860, 866, 871, 877, 881, 887, 1384], "wmodel": 49, "wdelta": [49, 230, 781, 782, 785, 792, 797, 850, 866, 871, 877, 881, 887], "ob": [49, 225, 226, 786, 787, 800, 801], "fly": [49, 225, 226, 227, 786, 787, 800, 801, 802, 808, 814, 819, 825, 851, 856, 862], "setambfarmresult": [53, 54, 55, 56, 1366, 1387, 1397], "copi": [53, 57, 58, 195, 241, 310, 366, 614, 1366], "setambpointresult": [57, 58, 59, 60, 61, 1366], "pvar": 57, "treat": [57, 58, 921], "abstract": [62, 64, 65, 102, 125, 126, 147, 149, 150, 159, 173, 175, 176, 179, 181, 182, 183, 191, 194, 197, 199, 200, 204, 205, 210, 211, 212, 214, 215, 216, 218, 220, 222, 224, 225, 227, 228, 229, 230, 780, 781, 783, 785, 790, 791, 793, 795, 796, 987, 990, 991, 992, 993, 994, 1064, 1070, 1075, 1082, 1126, 1128, 1129, 1199, 1250, 1252, 1349, 1354, 1364, 1367, 1370, 1374, 1378, 1381, 1384], "check_converg": [62, 64, 66, 69, 71, 73, 75], "prev_result": [62, 64, 66, 69, 71, 73, 75], "check": [62, 64, 66, 69, 71, 73, 75, 826, 829, 845, 962, 1034, 1055, 1057, 1064, 1082, 1092, 1093, 1126, 1151, 1152, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1201, 1202, 1204, 1210, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1358, 1384, 1387, 1390, 1397, 1398], "get_delta": [62, 65, 66, 70, 71, 74, 75], "most": [62, 65, 66, 70, 71, 74, 75, 1387, 1400], "recent": [62, 65, 66, 70, 71, 74, 75], "convcritlist": [66, 67, 68, 69, 70, 1367], "crit": [66, 67, 68], "add_crit": [66, 68], "criterion": [66, 68], "convvardelta": [71, 72, 73, 74, 75, 1367], "requir": [71, 102, 124, 127, 218, 223, 561, 743, 749, 754, 759, 761, 768, 774, 788, 872, 882, 1367, 1384, 1385, 1388, 1389, 1390, 1391, 1393, 1398, 1400], "select": [71, 83, 112, 137, 139, 173, 174, 178, 206, 207, 208, 209, 210, 211, 217, 230, 426, 431, 494, 501, 503, 509, 512, 529, 531, 538, 542, 547, 560, 632, 633, 634, 638, 643, 649, 655, 661, 667, 671, 676, 679, 682, 687, 694, 698, 704, 710, 716, 781, 782, 785, 791, 792, 795, 797, 806, 812, 818, 823, 850, 855, 860, 866, 871, 877, 881, 887, 931, 948, 950, 1034, 1035, 1037, 1038, 1039, 1055, 1057, 1058, 1059, 1060, 1064, 1065, 1067, 1068, 1071, 1073, 1075, 1076, 1079, 1081, 1082, 1084, 1091, 1101, 1114, 1120, 1126, 1140, 1142, 1143, 1149, 1151, 1153, 1154, 1157, 1159, 1161, 1175, 1176, 1180, 1181, 1185, 1186, 1190, 1191, 1196, 1197, 1206, 1207, 1212, 1213, 1218, 1219, 1225, 1226, 1231, 1232, 1237, 1238, 1243, 1244, 1298, 1307, 1323, 1364, 1367, 1369, 1370, 1371, 1373, 1375, 1384, 1389, 1390, 1391, 1392, 1393, 1396, 1398], "limit": [71, 72, 114, 775, 794, 804, 810, 815, 816, 821, 826, 841, 848, 852, 853, 857, 858, 863, 864, 874, 875, 1384], "float": [71, 72, 206, 207, 212, 213, 219, 241, 255, 301, 324, 366, 374, 501, 503, 514, 515, 521, 522, 641, 642, 685, 690, 692, 696, 697, 702, 703, 709, 714, 715, 732, 733, 739, 740, 754, 755, 761, 762, 768, 769, 774, 775, 794, 803, 804, 809, 810, 815, 816, 820, 821, 826, 841, 847, 848, 852, 853, 857, 858, 863, 864, 874, 875, 893, 894, 895, 904, 906, 909, 910, 916, 924, 925, 926, 927, 928, 929, 939, 941, 942, 955, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 1004, 1005, 1034, 1035, 1037, 1038, 1039, 1042, 1043, 1047, 1049, 1051, 1053, 1055, 1057, 1058, 1059, 1060, 1063, 1064, 1067, 1068, 1074, 1075, 1082, 1089, 1090, 1091, 1096, 1097, 1099, 1100, 1101, 1102, 1106, 1110, 1115, 1122, 1123, 1124, 1126, 1128, 1129, 1130, 1131, 1140, 1141, 1142, 1143, 1144, 1148, 1149, 1150, 1151, 1153, 1154, 1157, 1158, 1159, 1161, 1162, 1165, 1167, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1189, 1190, 1191, 1194, 1196, 1197, 1199, 1204, 1205, 1206, 1207, 1210, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1223, 1225, 1226, 1229, 1230, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1253, 1254, 1255, 1256, 1257, 1259, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1274, 1275, 1276, 1277, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1292, 1294, 1296, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1313, 1315, 1317, 1318, 1319, 1320, 1321, 1323, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1358, 1361, 1362, 1369, 1388, 1390], "wd_var": [71, 72, 937, 939, 941, 942, 951], "direct": [71, 72, 200, 449, 476, 514, 515, 521, 522, 618, 619, 625, 626, 749, 750, 924, 925, 926, 927, 928, 929, 939, 941, 942, 986, 1018, 1019, 1360, 1361, 1362, 1363, 1365, 1366, 1371, 1373, 1378, 1380, 1384, 1387, 1388, 1389, 1392, 1393, 1395, 1396, 1398, 1399, 1400], "unit": [71, 72, 212, 213, 365, 417, 421, 434, 437, 439, 442, 465, 641, 642, 803, 804, 909, 916, 1057, 1058, 1215, 1253, 1369, 1380, 1388], "deg": [71, 72, 1388], "defaultconv": [75, 76, 1367, 1387, 1397], "dure": [83, 92, 117, 118, 127, 143, 169, 202, 493, 494, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 943, 1136, 1367, 1368, 1377, 1384, 1390, 1391, 1397, 1398], "factor": [83, 84, 421, 461, 641, 642, 669, 670, 803, 804, 815, 816, 852, 853, 857, 858, 972, 976, 977, 981, 1140, 1141, 1150, 1158, 1189, 1217, 1369, 1373, 1379, 1380, 1384, 1400], "bewteen": [83, 84], "sequentialplugin": [87, 88, 89, 90, 91, 943, 1368, 1377], "sequeti": [87, 89, 90, 91, 946, 947], "intial": [87, 90, 943, 946], "fre": [87, 91, 893, 943, 947], "pre": [87, 91, 137, 139, 943, 947, 1386, 1394, 1397], "latest": [91, 947, 1082, 1122, 1123, 1126, 1130, 1131, 1159, 1298, 1307, 1319, 1320, 1323, 1386], "seqstat": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 1368], "just": [92, 1368, 1384, 1394], "serv": [92, 166, 223, 759, 1368, 1388], "structur": [92, 576, 708, 714, 1368, 1373, 1384, 1392, 1398], "placehold": [92, 1368], "statist": [92, 101, 128, 136, 200, 205, 477, 493, 500, 501, 511, 512, 514, 520, 521, 528, 529, 541, 542, 1132, 1139, 1380, 1388, 1399], "indic": [96, 113, 132, 193, 195, 201, 491, 492, 496, 506, 534, 614, 895, 936, 1091, 1120], "array_lik": [96, 113, 117, 118, 127, 132, 201, 206, 207, 491, 496, 506, 515, 534, 544, 1215, 1253], "label": [96, 132, 201, 206, 207, 496, 506, 534, 924, 925, 926, 927, 928, 929, 955, 1387, 1388, 1395, 1398], "integ": [96, 132, 201, 241, 301, 319, 366, 379, 496, 506, 534, 1034, 1037, 1038, 1039, 1042, 1043, 1050, 1052, 1055, 1057, 1059, 1060, 1064, 1067, 1068, 1075, 1082, 1089, 1090, 1091, 1096, 1097, 1099, 1100, 1101, 1103, 1107, 1111, 1122, 1123, 1125, 1126, 1128, 1129, 1130, 1131, 1140, 1142, 1143, 1144, 1149, 1151, 1153, 1154, 1157, 1159, 1166, 1168, 1169, 1170, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1204, 1206, 1207, 1210, 1212, 1213, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1254, 1256, 1257, 1266, 1267, 1274, 1276, 1277, 1284, 1286, 1287, 1293, 1295, 1298, 1299, 1304, 1305, 1307, 1309, 1314, 1316, 1317, 1318, 1319, 1320, 1323, 1330, 1335, 1336], "overwrit": [97, 115, 167, 206, 207], "exist": [97, 115, 167, 654, 826, 845, 962, 1203, 1393, 1396, 1400], "collect": [102, 252, 371, 884, 917, 924, 925, 926, 927, 928, 929, 1215, 1253, 1373, 1393, 1396], "meant": 102, "call": [102, 125, 127, 137, 151, 152, 184, 185, 641, 1082, 1091, 1122, 1123, 1126, 1130, 1131, 1159, 1215, 1253, 1254, 1264, 1274, 1284, 1298, 1307, 1319, 1320, 1323, 1370, 1373, 1384, 1386, 1393, 1394, 1396, 1397, 1400], "top": [102, 587, 793, 1364, 1371, 1373, 1381, 1400], "code": [102, 333, 826, 1381, 1384, 1385, 1386], "ha": [108, 109, 115, 143, 168, 169, 202, 497, 507, 517, 536, 560, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1045, 1136, 1307, 1361, 1362, 1365, 1367, 1384, 1385, 1389, 1392, 1394, 1395, 1397, 1398], "exactli": [108, 109, 115, 143, 169, 202, 241, 301, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136], "two": [108, 109, 115, 143, 169, 202, 491, 497, 507, 517, 536, 603, 639, 662, 669, 691, 700, 706, 708, 712, 714, 718, 788, 872, 882, 985, 1136, 1215, 1253, 1358, 1359, 1373, 1377, 1378, 1384, 1389, 1390, 1393, 1394, 1395, 1398, 1400], "data_var": [108, 109, 115, 143, 169, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136], "name_str": [108, 109, 115, 143, 169, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136], "dim_tupl": [108, 109, 115, 143, 169, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136], "data_ndarrai": [108, 109, 115, 143, 169, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136], "coord": [108, 109, 115, 143, 169, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136, 1215, 1253], "dim_name_str": [108, 109, 115, 143, 169, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136], "dim_arrai": [108, 109, 115, 143, 169, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136], "take": [108, 109, 174, 241, 355, 366, 927, 928, 929], "deriv": [112, 178, 217, 931, 984, 1034, 1037, 1055, 1057, 1064, 1075, 1091, 1101, 1140, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1378], "model_book": [117, 553, 554, 555, 556, 557, 558, 559, 560, 1370, 1371, 1378], "meta": [117, 1370, 1387, 1397], "usual": [117, 1393], "dim": [117, 118, 119, 120, 165, 166, 241, 246, 366], "same": [117, 118, 120, 215, 721, 724, 727, 730, 734, 737, 741, 909, 986, 1161, 1215, 1253, 1359, 1384, 1398, 1400], "subset": [117, 118, 120, 159, 494, 501, 503, 509, 529, 531, 538, 556, 560, 1370, 1373, 1384, 1391], "loop_dim": [117, 118, 125, 127], "loop": [117, 118, 127, 985, 1384, 1397], "states_i0": [117, 124], "from_point": [117, 120], "__getitem__": [117, 241, 259, 366, 553, 554, 556, 557], "x": [117, 194, 218, 219, 221, 438, 475, 479, 487, 491, 493, 494, 553, 554, 568, 613, 618, 621, 628, 665, 666, 743, 746, 749, 752, 754, 757, 761, 765, 768, 771, 774, 777, 780, 781, 782, 783, 785, 790, 791, 792, 793, 795, 796, 797, 803, 806, 807, 809, 812, 813, 815, 818, 820, 823, 824, 826, 842, 845, 850, 852, 855, 857, 860, 895, 896, 924, 925, 926, 927, 928, 929, 955, 985, 987, 988, 990, 991, 994, 996, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1018, 1020, 1022, 1023, 1026, 1028, 1030, 1031, 1215, 1253, 1362, 1363, 1373, 1380, 1381, 1385, 1387, 1388, 1389, 1390, 1392, 1396, 1397, 1398, 1399, 1400], "y": [117, 194, 438, 475, 480, 487, 491, 493, 494, 553, 554, 613, 621, 628, 665, 666, 895, 896, 924, 925, 926, 927, 928, 929, 955, 987, 988, 990, 991, 994, 996, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1018, 1020, 1022, 1023, 1026, 1028, 1030, 1031, 1215, 1253, 1362, 1363, 1380, 1387, 1388, 1389, 1390, 1396, 1397, 1398], "np": [119, 120, 166, 252, 301, 324, 371, 412, 414, 916, 921, 985, 1037, 1038, 1039, 1042, 1043, 1059, 1060, 1067, 1068, 1089, 1090, 1091, 1092, 1093, 1096, 1097, 1099, 1100, 1101, 1122, 1123, 1130, 1131, 1142, 1143, 1144, 1146, 1153, 1154, 1155, 1175, 1176, 1180, 1181, 1185, 1186, 1190, 1191, 1196, 1197, 1201, 1202, 1203, 1206, 1207, 1212, 1213, 1215, 1218, 1219, 1221, 1225, 1226, 1227, 1231, 1232, 1233, 1237, 1238, 1239, 1243, 1244, 1245, 1249, 1252, 1253, 1256, 1257, 1266, 1267, 1276, 1277, 1286, 1287, 1299, 1309, 1319, 1320, 1330, 1339, 1387, 1389, 1390, 1394, 1396, 1397, 1400], "correspond": [124, 175, 241, 242, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 321, 322, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 366, 485, 486, 563, 571, 579, 586, 589, 596, 641, 1360, 1363, 1380, 1386, 1391, 1392, 1395], "datacalcmodel": [125, 126, 127, 147, 181, 1370, 1384], "thei": [125, 193, 206, 207, 218, 227, 802, 808, 814, 819, 825, 851, 856, 862, 1373, 1381, 1384, 1388, 1389, 1390, 1391, 1393, 1398], "depend": [125, 195, 442, 465, 561, 568, 600, 601, 614, 625, 697, 703, 708, 709, 714, 715, 780, 783, 790, 791, 793, 796, 803, 807, 809, 813, 815, 818, 820, 824, 852, 855, 857, 860, 1034, 1053, 1054, 1055, 1057, 1063, 1064, 1074, 1075, 1140, 1141, 1148, 1149, 1150, 1151, 1157, 1158, 1161, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1373, 1380, 1381, 1384, 1386, 1389, 1392, 1393, 1398, 1400], "individu": [125, 206, 212, 708, 714, 798, 1034, 1038, 1039, 1055, 1057, 1059, 1060, 1064, 1067, 1068, 1075, 1082, 1092, 1096, 1097, 1126, 1140, 1142, 1143, 1149, 1151, 1153, 1154, 1157, 1159, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1201, 1204, 1206, 1207, 1210, 1212, 1213, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1371, 1373, 1387, 1390, 1393], "out_core_var": 127, "initial_result": 127, "typic": [127, 151, 184, 200, 1101], "fc": [127, 166, 1151, 1152, 1387, 1389, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "extendedst": [128, 129, 130, 131, 132, 133, 134, 135, 136, 1370, 1384], "extend": [128, 1367, 1368, 1370, 1382, 1385], "pmodel": 128, "append": [128, 130, 152, 154, 185, 187], "analys": [137, 1370], "handl": [137, 1370, 1384], "turbine_typ": [137, 556, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 953, 955, 1387, 1388, 1391, 1395, 1396, 1398], "turbinetyp": [137, 212, 213, 556, 693, 696, 697, 702, 703, 708, 709, 714, 715, 1370, 1373], "turbine_model_nam": 137, "found": [137, 165, 962, 1372, 1374, 1391, 1396, 1398], "turbine_model_sel": 137, "n_model": 137, "pre_rotor_model": 137, "farmdatamodellist": [137, 152, 153, 154, 155, 156, 157, 158, 1370], "post_rotor_model": 137, "par": [137, 138, 546, 826, 834, 846, 943, 944], "respecitv": 137, "set_par": [137, 145, 546], "model_nam": [137, 145, 546], "init_par": [137, 145, 546], "final_par": [137, 145, 546], "collect_model": [137, 140, 546], "analyz": [137, 140, 546], "gather": [137, 140, 546], "st_sel": [137, 139, 210, 211, 212, 546, 632, 633, 634, 636, 638, 641, 643, 647, 649, 653, 655, 658, 661, 665, 667, 669, 671, 674, 676, 678, 679, 681, 682, 684, 687, 689, 691, 693, 694, 696, 698, 702, 704, 708, 710, 714, 716], "respect": [138, 491, 625, 626, 1215, 1253, 1388, 1398, 1399, 1400], "post": [139, 1385, 1387, 1393, 1397], "Such": [143, 169, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 1136, 1388], "reason": [143, 169, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136], "here": [143, 169, 202, 497, 507, 517, 536, 603, 639, 662, 700, 706, 712, 718, 774, 775, 803, 804, 815, 816, 820, 821, 847, 848, 1136, 1371, 1372, 1374, 1384, 1385, 1387, 1388, 1390, 1392, 1394, 1395, 1396, 1398, 1399, 1400], "automat": [143, 169, 191, 192, 193, 202, 497, 507, 517, 536, 603, 619, 626, 639, 662, 700, 706, 712, 718, 895, 916, 924, 925, 926, 927, 928, 929, 1136, 1215, 1253, 1384, 1398], "part": [143, 169, 202, 241, 323, 339, 366, 497, 507, 517, 536, 560, 568, 603, 639, 662, 700, 706, 712, 718, 788, 872, 882, 1136, 1388, 1390, 1392, 1393, 1395], "befor": [147, 148, 226, 487, 659, 787, 801, 924, 925, 927, 928, 929, 1122, 1123, 1130, 1131, 1151, 1152, 1161, 1319, 1320, 1390], "By": [152, 185, 1101, 1400], "togeth": [152, 185, 1400], "common": [152, 185, 774, 826, 842, 847, 1215, 1253, 1381], "insert": [152, 156, 206, 209, 1361, 1362], "farmmodel": [159, 547, 556, 1370, 1373], "oper": [159, 229, 865, 870, 876, 880, 886, 902, 918, 919, 920, 1370, 1394], "contrast": [159, 985, 1370], "turbinemodel": [159, 208, 209, 210, 211, 212, 547, 548, 556, 632, 633, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 1370, 1373], "allow": [159, 544, 1370, 1384, 1390, 1397], "applic": [159, 1038, 1039, 1042, 1043, 1059, 1060, 1067, 1068, 1082, 1089, 1090, 1095, 1099, 1100, 1126, 1142, 1143, 1144, 1153, 1154, 1159, 1175, 1176, 1180, 1181, 1185, 1186, 1190, 1191, 1196, 1197, 1206, 1207, 1212, 1213, 1218, 1219, 1225, 1226, 1231, 1232, 1237, 1238, 1243, 1244, 1256, 1257, 1266, 1267, 1276, 1277, 1286, 1287, 1298, 1299, 1307, 1309, 1323, 1330, 1370, 1384, 1385, 1390], "error": [165, 166, 236, 493, 809, 956, 962, 1398], "upcast": 166, "accept_non": 166, "accept_nan": 166, "identifi": [166, 240, 364, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 1364, 1369, 1384, 1397], "state_turbin": [166, 429, 1369], "state_point": [166, 427, 1369], "combin": [166, 884, 885, 1400], "m": [166, 443, 444, 445, 450, 456, 458, 463, 468, 469, 470, 478, 479, 484, 494, 501, 708, 714, 761, 762, 924, 925, 926, 927, 928, 929, 1057, 1058, 1215, 1253, 1380, 1386, 1387, 1388, 1389, 1392, 1396, 1397, 1398, 1399], "f": [166, 632, 633, 985, 1215, 1253, 1387, 1392, 1394, 1398, 1399, 1400], "p": [166, 454, 457, 465, 485, 486, 641, 696, 697, 703, 709, 715, 933, 955, 964, 966, 1215, 1253, 1380, 1384, 1385, 1387, 1388, 1389, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "scalar": [166, 241, 242, 246, 250, 257, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 320, 321, 322, 323, 325, 326, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 366, 600, 601, 1215, 1253], "data_prio": 166, "search": [166, 493, 494, 501, 503, 556, 560, 685, 774, 775, 803, 804, 815, 816, 820, 821, 847, 848, 984, 1378, 1384, 1391, 1392, 1396, 1398], "throw": 166, "an": [166, 206, 366, 379, 618, 619, 743, 809, 888, 924, 925, 926, 927, 928, 929, 985, 1082, 1086, 1126, 1159, 1215, 1253, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1365, 1371, 1372, 1377, 1387, 1389, 1395, 1398, 1400], "nan": [166, 241, 301, 493, 494, 544, 921, 985, 1037, 1384, 1394], "been": [168, 1045, 1365, 1367, 1384, 1385], "quantiti": [173, 191, 1393], "new_wake_delta": [173, 175, 176, 179, 561, 563, 564, 566, 568, 571, 572, 574, 576, 579, 580, 582, 584, 586, 587, 589, 590, 592, 594, 596, 597, 599], "fill": [173, 176, 179, 236, 241, 318, 366, 493, 561, 564, 566, 568, 572, 574, 576, 580, 582, 584, 587, 590, 592, 594, 597, 599, 988, 998, 1006, 1013, 1020, 1028, 1371], "zero": [173, 179, 460, 561, 566, 568, 574, 576, 582, 584, 587, 592, 594, 599, 685, 781, 782, 785, 791, 792, 795, 797, 806, 812, 818, 823, 850, 855, 860, 939, 941, 942, 1215, 1253, 1340, 1345, 1380, 1387, 1396], "specifi": [173, 175, 241, 246, 366, 561, 563, 568, 571, 576, 579, 584, 586, 587, 589, 594, 596, 654, 1373, 1384, 1390, 1398], "evaluate_result": [173, 176, 561, 564, 568, 572, 576, 580, 584, 587, 590, 594, 597], "pwake_typ": [173, 178, 561, 568, 576, 584, 587, 594], "wake_delta": [175, 176, 179, 224, 225, 226, 227, 229, 230, 561, 563, 564, 566, 568, 571, 572, 574, 576, 579, 580, 582, 584, 586, 587, 589, 590, 592, 594, 596, 597, 599, 780, 783, 786, 787, 790, 793, 798, 800, 801, 802, 803, 808, 809, 814, 815, 819, 820, 825, 847, 851, 852, 856, 857, 862, 865, 866, 870, 871, 876, 877, 880, 881, 886, 887], "ani": [175, 176, 179, 241, 252, 297, 333, 366, 371, 563, 564, 566, 571, 572, 574, 579, 580, 582, 586, 589, 590, 592, 596, 597, 599, 693, 891, 986, 1038, 1039, 1042, 1043, 1059, 1060, 1067, 1068, 1089, 1090, 1099, 1100, 1142, 1143, 1144, 1153, 1154, 1175, 1176, 1180, 1181, 1185, 1186, 1190, 1191, 1196, 1197, 1206, 1207, 1212, 1213, 1218, 1219, 1225, 1226, 1231, 1232, 1237, 1238, 1243, 1244, 1256, 1257, 1266, 1267, 1276, 1277, 1286, 1287, 1299, 1309, 1330, 1346, 1348, 1354, 1360, 1361, 1362, 1363, 1373, 1386, 1389, 1393, 1397, 1398, 1400], "states_turbin": [176, 193, 195, 564, 572, 580, 590, 597, 614], "amb_r": [176, 564, 572, 580, 590, 597], "place": [176, 564, 572, 580, 590, 597, 924, 925, 926, 1161, 1307, 1323, 1375, 1389, 1390, 1394], "calc_var": [191, 192, 612, 618, 619, 625, 626, 647, 648], "Their": [191, 192, 619, 626], "ad": [191, 192, 227, 228, 229, 619, 626, 637, 802, 808, 814, 819, 825, 851, 856, 862, 863, 865, 868, 870, 874, 876, 878, 880, 884, 886, 902, 921, 1101, 1161, 1372, 1384, 1386, 1387, 1390, 1391, 1395, 1396, 1398, 1399, 1400], "n_rotor_point": [191, 197, 612, 616, 618, 623, 625, 630], "rotor_point_weight": [191, 199, 612, 617, 618, 624, 625, 631], "design_point": [191, 194, 612, 613, 618, 621, 625, 628], "design": [191, 194, 196, 612, 613, 615, 618, 621, 625, 628], "get_rotor_point": [191, 196, 612, 615, 618, 625], "eval_rpoint_result": [191, 195, 612, 614, 618, 625], "rpoint_result": [191, 195, 612, 614, 618, 625], "rpoint": [191, 193, 422, 423, 598, 612, 618, 625, 1369], "store_rpoint": 193, "store_rweight": 193, "store_amb_r": 193, "n_rpoint": [193, 195, 196, 197, 199, 614, 615, 616, 617, 623, 624, 630, 631], "reult": 193, "come": [193, 1388, 1395, 1398], "per": [193, 195, 428, 501, 614, 618, 619, 625, 626, 780, 902, 911, 913, 914, 915, 916, 919, 920, 1307, 1341, 1369, 1372, 1395], "formul": [194, 613, 621, 628, 1395], "plane": [194, 613, 621, 628, 922, 924, 925, 926, 927, 928, 929, 1018, 1378], "z": [194, 613, 621, 628, 732, 733, 924, 925, 926, 927, 928, 929], "coordin": [194, 218, 219, 221, 222, 225, 475, 479, 480, 493, 494, 613, 621, 628, 743, 746, 747, 749, 752, 753, 754, 757, 758, 761, 765, 766, 768, 771, 772, 774, 777, 778, 786, 800, 893, 894, 924, 925, 926, 927, 928, 929, 1140, 1215, 1253, 1258, 1268, 1278, 1288, 1339, 1380, 1387, 1388, 1389, 1390, 1393, 1396, 1397], "radiu": [194, 613, 621, 628, 793, 796, 803, 807, 809, 813, 815, 820, 824, 1004, 1005, 1034, 1035, 1358, 1359], "n_rotor_axi": [194, 613, 621, 628], "n_rotor_sid": [194, 613, 621, 628], "n_rotor_up": [194, 613, 621, 628], "dpoint": [194, 613, 621, 628], "copy_to_ambi": [195, 614], "either": [195, 501, 503, 529, 531, 600, 601, 614, 669, 670, 943, 944, 956, 1057, 1058, 1161, 1378, 1380, 1395, 1397], "In": [195, 614, 815, 985, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "latter": [195, 568, 614, 1339, 1384, 1390, 1394, 1395, 1398, 1400], "case": [195, 493, 545, 614, 916, 939, 941, 942, 950, 955, 962, 1372, 1384, 1390, 1394, 1395, 1396, 1397, 1398, 1400], "expect": [195, 238, 239, 614, 654, 669, 1389, 1392], "els": [195, 614, 939, 941, 942], "If": [195, 614, 685, 774, 775, 803, 804, 815, 816, 820, 821, 847, 848, 864, 869, 879, 936, 939, 941, 942, 985, 1127, 1215, 1253, 1339, 1394, 1398], "describ": [200, 1372, 1386, 1388, 1389, 1396], "meteorolog": [200, 1393], "speed": [200, 443, 444, 445, 450, 468, 469, 470, 478, 501, 514, 515, 521, 522, 641, 642, 674, 675, 690, 692, 696, 697, 702, 703, 708, 709, 714, 715, 720, 723, 726, 729, 874, 955, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 983, 1361, 1362, 1372, 1373, 1379, 1380, 1387, 1388, 1389, 1390, 1392, 1393, 1395, 1396, 1398, 1399, 1400], "turbul": [200, 448, 474, 714, 852, 853, 1373, 1380, 1381, 1384, 1389, 1392, 1393, 1398, 1399, 1400], "intens": [200, 448, 474, 714, 1373, 1380, 1381, 1384, 1389, 1393, 1398, 1399, 1400], "air": [200, 446, 471, 514, 515, 521, 522, 690, 692, 696, 697, 702, 703, 708, 714, 715, 955, 1373, 1380, 1384, 1389, 1392], "densiti": [200, 446, 471, 514, 515, 521, 522, 690, 692, 708, 955, 1188, 1189, 1216, 1373, 1376, 1380, 1384, 1389, 1392], "mere": 206, "defin": [206, 743, 1215, 1253, 1254, 1264, 1373, 1376, 1380, 1390, 1393, 1394, 1395, 1397, 1400], "basic": [206, 238, 239, 546, 568, 665, 1371, 1373, 1390, 1392], "xy": [206, 207, 922, 924, 927, 1254, 1258, 1264, 1268, 1274, 1278, 1284, 1288, 1384, 1389, 1397, 1400], "ground": [206, 207, 458, 1380], "posit": [206, 207, 209, 241, 301, 1034, 1055, 1298, 1374, 1375, 1384, 1394], "2": [206, 207, 324, 414, 491, 492, 544, 561, 562, 605, 781, 782, 785, 792, 796, 797, 807, 813, 815, 824, 850, 852, 857, 895, 985, 990, 991, 992, 993, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1215, 1253, 1258, 1268, 1278, 1288, 1339, 1358, 1359, 1373, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "appear": [206, 207, 809, 1390, 1392, 1394, 1398, 1400], "mstates_sel": 206, "boolean": [206, 207, 632, 633, 1092, 1093, 1108, 1201, 1202, 1215, 1253, 1258, 1268, 1278, 1288], "diamet": [206, 207, 212, 213, 456, 487, 625, 626, 665, 666, 803, 893, 894, 895, 1174, 1254, 1255, 1258, 1264, 1265, 1268, 1274, 1275, 1278, 1284, 1285, 1288, 1373, 1380, 1384, 1390, 1393], "h": [206, 207, 212, 213, 238, 239, 458, 494, 693, 896, 1380, 1387, 1388, 1389, 1392, 1396, 1397], "hub": [206, 207, 212, 213, 487, 1373, 1384, 1392, 1393, 1396], "height": [206, 207, 212, 213, 214, 215, 438, 458, 475, 487, 493, 494, 501, 503, 512, 625, 626, 665, 666, 720, 721, 723, 724, 726, 727, 729, 730, 732, 734, 736, 737, 739, 741, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 1372, 1373, 1379, 1380, 1383, 1384, 1385, 1388, 1389, 1393, 1396], "turbine_model": [206, 207, 487, 547, 548, 556, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "add_model": [206, 208], "states_sel": [206, 208, 209, 426, 501, 503, 509, 512, 529, 531, 538, 542, 1369], "insert_model": [206, 209], "models_state_sel": 207, "can": [212, 333, 576, 600, 783, 826, 1091, 1161, 1215, 1253, 1371, 1372, 1373, 1374, 1381, 1384, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "overwritten": 212, "p_nomin": [212, 213, 440, 454, 693, 916, 1380, 1384], "nomin": [212, 213, 904, 1394], "power": [212, 213, 421, 442, 462, 465, 558, 641, 642, 689, 691, 696, 697, 702, 703, 708, 709, 714, 715, 902, 904, 909, 910, 916, 953, 955, 1149, 1369, 1373, 1374, 1377, 1380, 1383, 1384, 1385, 1390, 1392, 1393, 1395, 1398, 1399, 1400], "kw": [212, 213, 421, 439, 641, 642, 693, 916, 1369], "p_unit": [212, 213, 421, 693, 1369, 1384], "mw": [213, 238, 239, 417, 421, 1369, 1388, 1392, 1394, 1398, 1399], "gw": [213, 365, 421, 1369, 1385], "verticalprofil": [214, 215, 216, 217, 521, 522, 529, 531, 720, 723, 726, 729, 732, 736, 739, 1370, 1373], "vertic": [214, 625, 626, 922, 925, 928, 929, 1370, 1373, 1377, 1384, 1392, 1400], "profil": [214, 215, 216, 217, 521, 522, 531, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 972, 976, 977, 981, 1370, 1373, 1379, 1384, 1388, 1392], "input_var": [214, 216, 636, 637, 720, 722, 723, 725, 726, 728, 729, 731, 732, 735, 736, 738, 739, 742, 867, 873, 883], "profile_typ": [214, 217, 720, 723, 726, 729, 732, 736, 739], "translat": [218, 1126, 1128, 1129, 1159, 1169, 1170, 1298, 1304, 1305, 1307, 1317, 1318, 1323, 1335, 1336, 1393, 1400], "global": [218, 1388], "also": [218, 333, 895, 1384, 1385, 1388, 1390, 1393, 1394, 1395, 1398, 1400], "respons": [218, 1373, 1393, 1395], "calc_ord": [218, 220, 743, 745, 749, 751, 754, 756, 761, 764, 768, 770, 774, 776], "get_wake_coo": [218, 222, 743, 747, 749, 753, 754, 758, 761, 766, 768, 772, 774, 778], "get_wake_modelling_data": [218, 223, 743, 749, 754, 759, 761, 768, 774], "get_centreline_point": [218, 221, 743, 746, 749, 752, 754, 757, 761, 765, 768, 771, 774, 777], "along": [218, 219, 221, 618, 619, 625, 626, 743, 746, 749, 752, 754, 757, 761, 765, 768, 771, 774, 777, 1373, 1384, 1387, 1393, 1396, 1400], "centrelin": [218, 219, 221, 743, 746, 749, 752, 754, 757, 761, 765, 768, 771, 774, 777, 857, 858, 1384, 1393], "calc_centreline_integr": [218, 219, 743, 749, 754, 761, 768, 774], "integr": [218, 219, 241, 324, 366, 414, 618, 619, 625, 626, 743, 749, 754, 761, 768, 774, 857, 858, 1381, 1384], "dx": [219, 857, 858, 1391], "self_wak": [219, 857, 858], "ipar": [219, 503, 670, 857, 858], "upper": [219, 625, 1203, 1373, 1397], "bound": [219, 493, 1034, 1055, 1057, 1064, 1173, 1178, 1183, 1188, 1194, 1199, 1203, 1204, 1210, 1384], "consid": [219, 857, 858, 1091, 1101, 1384, 1398], "interpol": [219, 493, 494, 503, 636, 637, 670, 689, 691, 696, 702, 708, 709, 714, 715, 732, 733, 754, 755, 761, 762, 768, 769, 1373, 1384], "n_var": [219, 1101], "wake_coo": [222, 225, 747, 753, 758, 766, 772, 778, 786, 800], "creation": [223, 558, 759, 937, 951, 1364, 1377, 1399], "init_wake_delta": [224, 227, 780, 783, 790, 793, 798, 802, 803, 808, 809, 814, 815, 819, 820, 825, 847, 851, 852, 856, 857, 862], "storag": [224, 227, 761, 762, 780, 783, 790, 793, 798, 802, 803, 808, 809, 814, 815, 819, 820, 825, 847, 851, 852, 856, 857, 862], "finalize_wake_delta": [224, 226, 780, 783, 787, 790, 793, 798, 801, 803, 809, 815, 820, 847, 852, 857], "amb_result": [224, 226, 229, 780, 783, 787, 790, 793, 798, 801, 803, 809, 815, 820, 847, 852, 857, 865, 870, 876, 880, 886], "afterward": [226, 787, 801], "wakesuperposit": [228, 229, 230, 556, 783, 863, 868, 874, 878, 884, 1370, 1373], "superposit": [228, 556, 780, 783, 784, 790, 793, 794, 798, 803, 804, 809, 810, 815, 816, 820, 821, 847, 848, 852, 853, 857, 858, 874, 884, 1370, 1373, 1384, 1391, 1393, 1399], "note": [228, 933, 1307, 1373, 1386, 1388, 1389, 1390, 1392, 1395, 1396, 1399, 1400], "matter": [228, 1394], "other": [228, 514, 948, 1082, 1122, 1123, 1126, 1130, 1131, 1159, 1298, 1307, 1319, 1320, 1323, 1372, 1377, 1384, 1386, 1389, 1391, 1393, 1394, 1395, 1400], "calc_wakes_plus_wak": [228, 230, 863, 866, 868, 871, 874, 877, 878, 881, 884, 887], "calc_final_wake_delta": [228, 229, 863, 865, 868, 870, 874, 876, 878, 880, 884, 886], "final_wake_delta": [229, 865, 870, 876, 880, 886], "simpl": [229, 865, 870, 876, 880, 886, 1384, 1389, 1394, 1396, 1400], "plu": [229, 865, 870, 876, 880, 886, 1339, 1357], "sel_sp": [230, 866, 871, 877, 881, 887], "wake_model_result": [230, 866, 871, 877, 881, 887], "n_sel_sp": [230, 866, 871, 877, 881, 887], "boundari": [231, 232, 895, 987, 988, 992, 994, 996, 998, 1002, 1004, 1006, 1009, 1011, 1013, 1016, 1018, 1020, 1024, 1026, 1028, 1032, 1034, 1035, 1055, 1056, 1173, 1174, 1175, 1176, 1177, 1254, 1255, 1258, 1264, 1265, 1268, 1274, 1275, 1278, 1284, 1285, 1288, 1374, 1376, 1388, 1390], "geom2d": [231, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1254, 1255, 1264, 1265, 1274, 1275, 1284, 1285, 1357, 1390], "areageometri": [231, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1004, 1011, 1018, 1026, 1027, 1034, 1035, 1254, 1255, 1264, 1265, 1274, 1275, 1284, 1285, 1357, 1378], "wind_farm": [231, 232], "add_turbin": [231, 233, 487, 1400], "turbine_nam": [231, 235, 934, 936], "staticdata": [236, 237, 1371, 1388], "static": [236, 690, 692, 696, 697, 702, 703, 708, 709, 714, 715, 956, 958, 959, 994, 995, 1371, 1378, 1384, 1385, 1387, 1389, 1390, 1392, 1395, 1396, 1397, 1398, 1399], "directori": [236, 1371], "add_data_packag": [236, 956, 958], "context": [236, 956, 958, 959, 960, 961, 962, 963, 1387, 1390, 1397], "packag": [236, 956, 958, 959, 1364, 1371, 1372, 1373, 1374, 1378, 1381, 1384, 1385, 1386, 1388, 1390, 1391, 1393, 1396, 1400], "file_sfx": [236, 956, 958], "file": [236, 238, 239, 487, 488, 489, 490, 493, 494, 501, 503, 529, 531, 545, 558, 600, 601, 637, 653, 654, 669, 670, 689, 690, 691, 692, 696, 697, 702, 703, 708, 709, 714, 715, 788, 809, 872, 882, 893, 898, 899, 900, 901, 902, 922, 930, 933, 934, 936, 937, 942, 948, 951, 953, 956, 958, 959, 960, 961, 962, 964, 969, 970, 1338, 1339, 1356, 1371, 1372, 1373, 1377, 1378, 1384, 1385, 1386, 1389, 1390, 1392, 1395, 1396, 1397, 1398, 1399], "locat": [236, 612, 917, 956, 958, 959, 1361, 1362, 1386, 1388, 1395, 1400], "add_data_package_fil": [236, 956, 959], "file_nam": [236, 238, 937, 942, 951, 956, 959, 962, 1371], "add_fil": [236, 956, 960, 961], "file_path": [236, 489, 490, 893, 898, 899, 900, 901, 902, 922, 930, 933, 934, 936, 937, 948, 951, 953, 956, 960, 961, 964, 969, 970, 1372], "path": [236, 238, 239, 489, 490, 501, 503, 529, 531, 545, 558, 653, 654, 669, 670, 690, 692, 696, 697, 702, 703, 708, 709, 714, 715, 933, 936, 942, 956, 960, 961, 962, 969, 970, 1011, 1338, 1339, 1356, 1378, 1385, 1387, 1397, 1398], "get_file_path": [236, 956, 962, 1388], "check_raw": [236, 956, 962], "toc": [236, 956, 963, 1388], "content": [236, 556, 560, 956, 963, 1398], "data_book": [237, 956, 957], "parse_pct_file_nam": [238, 1371], "pars": [238, 239, 493, 494, 1082, 1117, 1126, 1159, 1298, 1307, 1323, 1371], "format": [238, 239, 493, 494, 501, 897, 933, 964, 970, 1372, 1388, 1389], "csv": [238, 239, 487, 488, 501, 893, 898, 934, 936, 964, 965, 967, 968, 1356, 1372, 1378, 1384, 1387, 1390, 1392, 1395, 1396, 1397, 1398, 1399], "pathlib": [238, 239, 956, 962, 1388], "parsed_data": [238, 239], "parse_pct_two_fil": [239, 1371], "file_name_a": [239, 1371], "file_name_b": [239, 1371], "second": [239, 444, 469, 1380], "constant": [240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 815, 971, 973, 975, 979, 980, 983, 1364, 1380, 1384, 1387, 1389, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "amb_rpoint_result": [240, 1369], "amb_rpoint_r": [240, 1369], "dtype": [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 1369, 1390], "__hash__": [241, 261, 366, 378], "hash": [241, 261, 366, 378], "__str__": [241, 292, 366, 408, 1034, 1036, 1055, 1057, 1064, 1075, 1082, 1126, 1140, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "__lt__": [241, 266, 366, 384], "__le__": [241, 264, 366, 382], "__eq__": [241, 254, 366, 373], "__ne__": [241, 269, 366, 387], "__gt__": [241, 260, 366, 377], "__ge__": [241, 258, 366, 376], "__add__": [241, 244, 366, 368], "__radd__": [241, 275, 366, 393], "__sub__": [241, 293, 366, 409], "__rsub__": [241, 288, 366, 405], "__mul__": [241, 268, 366, 386], "__rmul__": [241, 283, 366, 400], "__mod__": [241, 267, 366, 385], "__rmod__": [241, 282, 366, 399], "__divmod__": [241, 253, 366, 372], "divmod": [241, 253, 277, 366, 372, 395], "__rdivmod__": [241, 277, 366, 395], "__pow__": [241, 274, 366, 392], "mod": [241, 274, 285, 366, 392, 402], "pow": [241, 274, 285, 366, 392, 402], "__rpow__": [241, 285, 366, 402], "__neg__": [241, 270, 366, 388], "__pos__": [241, 273, 366, 391], "__abs__": [241, 243, 366, 367], "ab": [241, 243, 366, 367], "__bool__": [241, 251, 366, 370], "__int__": [241, 262, 366, 380], "__float__": [241, 255, 366, 374], "__floordiv__": [241, 256, 366, 375], "__rfloordiv__": [241, 280, 366, 397], "__truediv__": [241, 294, 366, 410], "__rtruediv__": [241, 289, 366, 406], "see": [241, 242, 271, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 321, 322, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 366, 389, 1194, 1195, 1199, 1200, 1215, 1250, 1251, 1253, 1347, 1349, 1350, 1384, 1386, 1390, 1392, 1393, 1399], "help": [241, 271, 366, 389, 964, 1194, 1195, 1199, 1200, 1250, 1251, 1347, 1349, 1350, 1378], "accur": [241, 271, 366, 389, 1194, 1195, 1199, 1200, 1250, 1251, 1347, 1349, 1350], "signatur": [241, 271, 366, 389, 1194, 1195, 1199, 1200, 1250, 1251, 1347, 1349, 1350], "as_integer_ratio": [241, 301], "pair": [241, 301, 1215, 1253], "whose": [241, 301, 1374, 1388], "ratio": [241, 301], "equal": [241, 301, 440, 454, 457, 1380], "denomin": [241, 301, 366, 413], "rais": [241, 301, 493, 962], "overflowerror": [241, 301], "infin": [241, 301], "valueerror": [241, 301, 1215, 1253], "is_integ": [241, 324, 366, 414], "finit": [241, 324, 366, 414], "otherwis": [241, 324, 962, 1392], "item": [241, 252, 325, 366, 371], "parametr": [241, 252, 366, 371], "wrapper": [241, 252, 366, 371, 547, 1373], "around": [241, 252, 366, 371, 1387], "__invert__": [241, 263, 366, 381], "__lshift__": [241, 265, 366, 383], "__rlshift__": [241, 281, 366, 398], "__rshift__": [241, 287, 366, 404], "__rrshift__": [241, 286, 366, 403], "__and__": [241, 245, 366, 369], "__rand__": [241, 276, 366, 394], "__xor__": [241, 295, 366, 411], "__rxor__": [241, 290, 366, 407], "__or__": [241, 272, 366, 390], "__ror__": [241, 284, 366, 401], "tolist": [241, 358, 366], "method": [241, 252, 296, 297, 298, 299, 300, 302, 304, 305, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 321, 322, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 366, 371, 489, 637, 884, 885, 969, 970], "ident": [241, 242, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 321, 322, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 366, 1389, 1400], "attribut": [241, 242, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 321, 322, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 366, 1388], "itemset": [241, 326, 366], "tobyt": [241, 356, 366], "tofil": [241, 357, 366], "tostr": [241, 359, 366], "byteswap": [241, 304, 366], "astyp": [241, 302, 366], "getfield": [241, 322, 366], "setfield": [241, 345, 366], "resiz": [241, 342, 366], "__array__": [241, 246, 366], "sc": [241, 246, 250, 366], "__array_wrap__": [241, 250, 366], "obj": [241, 250, 366, 1096, 1097, 1099, 1100, 1299, 1309, 1330], "__sizeof__": [241, 291, 366], "byte": [241, 291, 327, 331, 333, 352, 366], "__reduce__": [241, 278, 366], "helper": [241, 278, 366, 930, 964, 969, 970, 1132, 1364, 1374, 1378], "pickl": [241, 278, 366], "dump": [241, 316, 317, 366], "transpos": [241, 361, 366], "put": [241, 337, 366], "repeat": [241, 340, 366, 1161], "choos": [241, 305, 366, 1215, 1253, 1386, 1387, 1392, 1394, 1399], "sort": [241, 349, 366], "argsort": [241, 300, 366], "searchsort": [241, 344, 366], "argmax": [241, 298, 366], "argmin": [241, 299, 366], "reshap": [241, 341, 366], "squeez": [241, 350, 366], "view": [241, 320, 363, 366], "swapax": [241, 354, 366], "max": [241, 328, 366, 544, 654, 884, 885, 895, 918, 919, 920, 924, 925, 926, 927, 928, 929, 1140, 1141, 1150, 1158, 1159, 1161, 1203, 1229, 1230, 1376, 1384, 1391, 1395], "min": [241, 330, 366, 544, 654, 895, 918, 919, 920, 924, 925, 926, 927, 928, 929, 1140, 1141, 1150, 1158, 1159, 1161, 1203, 1229, 1230, 1376, 1384, 1395, 1397], "ptp": [241, 336, 366], "trace": [241, 360, 366, 1397], "diagon": [241, 314, 366], "clip": [241, 306, 366], "conj": [241, 308, 366], "conjug": [241, 309, 366], "nonzero": [241, 334, 366], "std": [241, 351, 366], "sum": [241, 353, 366, 895, 902, 908, 913, 915, 918, 919, 920, 921, 1082, 1112, 1113, 1118, 1119, 1126, 1140, 1141, 1150, 1158, 1159, 1215, 1253, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1384, 1398], "cumsum": [241, 312, 366], "prod": [241, 335, 366], "cumprod": [241, 311, 366], "compress": [241, 307, 366], "flatten": [241, 321, 366], "ravel": [241, 338, 366], "round": [241, 343, 366], "__format__": [241, 257, 366], "formatt": [241, 257, 366], "setflag": [241, 346, 366], "newbyteord": [241, 333, 366], "new_ord": [241, 333, 366], "differ": [241, 333, 366, 561, 576, 584, 1373, 1381, 1384, 1388, 1389, 1395], "ndim": [241, 332, 366], "stride": [241, 352, 366], "pointer": [241, 313, 366], "items": [241, 327, 366], "length": [241, 327, 331, 366, 463, 484, 491, 544, 561, 562, 761, 762, 768, 769, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 1132, 1374, 1380, 1384, 1388], "element": [241, 327, 348, 366, 618, 619, 625, 626, 1215, 1253], "gentyp": [241, 348, 366], "nbyte": [241, 331, 366], "descriptor": [241, 315, 366], "real": [241, 339, 366, 985, 1378], "imag": [241, 323, 366, 895, 917, 924, 925, 926, 927, 928, 929, 987, 988, 994, 996, 998, 1004, 1006, 1011, 1013, 1018, 1020, 1026, 1028], "imaginari": [241, 323, 366], "flat": [241, 320, 366], "t": [241, 242, 366, 473, 485, 486, 487, 674, 675, 754, 755, 768, 769, 921, 964, 966, 1215, 1253, 1380], "__array_interface__": [241, 247, 366], "protocol": [241, 247, 249, 366], "python": [241, 247, 252, 366, 371, 1215, 1253, 1384, 1385, 1393], "side": [241, 247, 366, 921], "__array_struct__": [241, 249, 366], "struct": [241, 249, 366], "__array_priority__": [241, 248, 366], "prioriti": [241, 248, 366], "pleas": [242, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 321, 322, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 1382, 1385], "version": [252, 324, 371, 414, 1215, 1253, 1384, 1386], "22": [252, 324, 371, 414, 1388, 1390, 1394, 1398], "alia": [252, 371], "genericalia": [252, 371], "import": [252, 371, 1215, 1253, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "signedinteg": [252, 366, 371, 1369], "avail": [252, 371, 1373, 1381, 1383, 1386, 1388, 1398], "9": [252, 371, 1215, 1253, 1384, 1386, 1387, 1388, 1390, 1391, 1394, 1395, 1396, 1397, 1398, 1400], "later": [252, 371, 1390, 1394, 1397, 1398], "pep": [252, 371], "585": [252, 371], "hint": [252, 371], "gener": [252, 371, 743, 857, 888, 890, 892, 902, 917, 922, 924, 925, 926, 927, 928, 929, 1043, 1100, 1375, 1377, 1381, 1384, 1388, 1390], "standard": [252, 371, 902, 912, 1215, 1253, 1384, 1396], "doubl": [301, 324, 1384], "10": [301, 774, 803, 815, 826, 847, 852, 857, 1382, 1384, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "25": [301, 804, 815, 816, 852, 853, 857, 858, 1387, 1388, 1390, 1392, 1394, 1396, 1397, 1398], "4": [301, 803, 1215, 1253, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "chang": [333, 653, 654, 1373, 1384, 1385, 1386, 1388, 1392], "made": 333, "field": [333, 874, 902, 921, 1387, 1389, 1393, 1396, 1399, 1400], "follow": [333, 501, 761, 809, 1215, 1253, 1373, 1383, 1384, 1387, 1388, 1389, 1390, 1392, 1393, 1394, 1395, 1397, 1398, 1399, 1400], "swap": 333, "opposit": 333, "endian": 333, "littl": 333, "big": 333, "nativ": 333, "ignor": 333, "abov": [333, 925, 926, 928, 929, 1385, 1386, 1390, 1394, 1395, 1398, 1400], "new_dtyp": 333, "giga": [365, 1369], "watt": [365, 417, 421, 434, 437, 439, 916, 1369], "ityp": [366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 1369], "__index__": [366, 379], "convert": [366, 379, 1215, 1253, 1339, 1396], "suitabl": [366, 379], "bit_count": [366, 412], "bit": [366, 412], "absolut": [366, 412, 451, 481, 678, 681, 1373, 1380, 1384, 1400], "analog": [366, 412], "builtin": [366, 412], "popcount": [366, 412], "c": [366, 412, 1215, 1253, 1386, 1400], "numer": [366, 415, 732, 1034, 1055, 1057, 1064, 1071, 1075, 1079, 1082, 1114, 1126, 1140, 1149, 1151, 1157, 1159, 1298, 1307, 1323, 1373], "itself": [366, 415], "int64": [412, 414, 1387, 1390, 1396], "127": [412, 1398], "7": [412, 1215, 1253, 1384, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "uint32": 414, "5": [414, 803, 853, 1215, 1253, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "kappa": [416, 971, 973, 975, 979, 980, 983, 1369, 1379], "41": [416, 971, 973, 975, 979, 980, 983, 1369, 1379, 1387, 1390, 1397], "van": [416, 971, 973, 975, 979, 980, 983, 1369], "karman": [416, 971, 973, 975, 979, 980, 983, 1369], "mega": [417, 1369], "pop": [420, 1091, 1101, 1129, 1170, 1305, 1318, 1336, 1369], "popul": [420, 1034, 1039, 1043, 1055, 1057, 1060, 1064, 1068, 1075, 1082, 1090, 1091, 1093, 1097, 1100, 1101, 1126, 1132, 1133, 1140, 1143, 1149, 1151, 1154, 1157, 1159, 1173, 1176, 1178, 1181, 1183, 1186, 1188, 1191, 1194, 1197, 1199, 1202, 1204, 1207, 1210, 1213, 1216, 1219, 1223, 1226, 1229, 1232, 1235, 1238, 1241, 1244, 1247, 1250, 1254, 1257, 1264, 1267, 1274, 1277, 1284, 1287, 1298, 1307, 1323, 1369, 1374, 1388, 1390], "1000000000": [421, 1369], "1000000": [421, 1369], "tw": [421, 434, 1369], "1000000000000": [421, 1369], "rel": [421, 452, 482, 1369, 1380], "rotor_point": [422, 423, 1369, 1391], "rweight": [424, 1369], "rotor_weight": [424, 1369], "state_source_turbin": [428, 1369], "tmodel": [430, 1369, 1387, 1397], "tmodel_sel": [431, 1369, 1387, 1397], "tname": [432, 1369, 1387, 1390, 1395, 1396], "terra": [434, 1369], "valid": [435, 696, 697, 702, 703, 714, 715, 815, 1151, 1152, 1210, 1211, 1212, 1213, 1214, 1254, 1255, 1258, 1264, 1268, 1274, 1278, 1284, 1288, 1369, 1376, 1385, 1398], "xyh": [438, 893, 899, 901, 1380], "vector": [438, 475, 491, 492, 924, 925, 926, 1018, 1019, 1091, 1101, 1132, 1215, 1253, 1360, 1361, 1362, 1363, 1374, 1378, 1380, 1385, 1390, 1397, 1398, 1399], "kilo": [439, 1369], "amb_cap": [440, 485, 486, 964, 966, 1380, 1398], "capac": [440, 454, 902, 904, 1380, 1384, 1398], "amb_p": [440, 442, 457, 485, 486, 964, 966, 1380, 1387, 1389, 1390, 1394, 1396, 1397, 1398], "amb_ct": [441, 485, 486, 964, 966, 1380, 1387, 1390, 1396, 1397], "thrust": [441, 455, 674, 675, 1373, 1380, 1384, 1385, 1393, 1394, 1400], "coeffici": [441, 455, 985, 1118, 1119, 1380, 1393, 1394], "user": [442, 465, 1215, 1253, 1364, 1372, 1380, 1384, 1393], "amb_rew": [443, 485, 486, 951, 952, 964, 966, 1380, 1387, 1389, 1390, 1394, 1396, 1397, 1398], "amb_rews2": [444, 485, 486, 964, 966, 1380, 1387, 1390, 1396, 1397], "moment": [444, 445, 469, 470, 1380], "amb_rews3": [445, 485, 486, 964, 966, 1380, 1387, 1390, 1396, 1397], "third": [445, 470, 1380], "amb_rho": [446, 485, 486, 964, 966, 1380, 1387, 1390, 1396, 1397], "kg": [446, 471, 1380], "m3": [446, 471, 1380], "amb_t": [447, 485, 486, 964, 966, 1380], "temperatur": [447, 473, 1380], "kelvin": [447, 473, 1380], "amb_ti": [448, 485, 486, 964, 966, 1380, 1387, 1391, 1396, 1397], "amb_wd": [449, 485, 486, 654, 937, 939, 941, 942, 951, 964, 966, 1380, 1387, 1396, 1397], "degre": [449, 451, 452, 476, 481, 482, 939, 941, 942, 985, 1361, 1362, 1378, 1380, 1387, 1400], "amb_w": [450, 485, 486, 964, 966, 1380, 1388, 1390, 1392, 1395, 1396, 1398, 1399], "amb_yaw": [451, 485, 486, 1380, 1387, 1397], "yaw": [451, 452, 481, 482, 485, 486, 678, 681, 697, 703, 709, 715, 774, 847, 1373, 1380, 1383, 1384, 1385, 1387, 1390, 1391, 1396, 1397], "angl": [451, 452, 481, 482, 809, 810, 842, 1323, 1324, 1380, 1389, 1397, 1400], "amb_yawm": [452, 485, 486, 1380], "amb_yld": [453, 485, 486, 964, 966, 1380, 1398], "yield": [453, 483, 888, 890, 892, 902, 909, 916, 1377, 1380, 1382, 1384, 1385, 1392, 1393, 1398, 1399], "gwh": [453, 483, 916, 1380, 1392, 1398, 1399], "cap": [454, 485, 486, 964, 966, 1380, 1398], "ct": [455, 485, 486, 558, 641, 674, 675, 689, 691, 692, 696, 697, 702, 703, 708, 709, 714, 715, 775, 794, 795, 796, 803, 804, 806, 807, 810, 812, 813, 815, 816, 821, 823, 824, 826, 841, 848, 852, 853, 857, 858, 953, 955, 964, 966, 1373, 1377, 1380, 1384, 1387, 1388, 1394, 1396, 1397, 1400], "eff": [457, 906, 964, 966, 1380, 1398], "effici": [457, 902, 905, 906, 1215, 1253, 1380, 1384, 1392, 1394, 1398, 1399], "over": [458, 857, 902, 907, 908, 939, 941, 942, 985, 1215, 1253, 1380, 1381, 1384, 1390, 1399], "k": [459, 460, 461, 684, 685, 774, 775, 803, 804, 809, 810, 815, 816, 820, 821, 842, 847, 848, 1373, 1380, 1384, 1387, 1391, 1397, 1398, 1399], "growth": [459, 774, 775, 803, 804, 809, 810, 815, 816, 820, 821, 847, 848, 852, 853, 857, 858, 1380, 1384, 1399], "kb": [460, 461, 684, 685, 1380, 1384], "kti": [460, 461, 684, 685, 686, 687, 688, 1373, 1380, 1384, 1391, 1398], "ti": [460, 461, 474, 485, 486, 514, 515, 521, 522, 605, 684, 685, 714, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 857, 858, 884, 955, 964, 966, 1157, 1373, 1374, 1380, 1384, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "between": [461, 625, 1205, 1215, 1253, 1254, 1255, 1264, 1265, 1274, 1275, 1284, 1285, 1308, 1358, 1359, 1373, 1380, 1389, 1390, 1392], "max_p": [462, 641, 646, 1380, 1394, 1395], "maxp": [462, 1380, 1394, 1395], "derat": [462, 641, 953, 1377, 1380, 1384, 1394, 1395], "boost": [462, 641, 953, 1377, 1380, 1384, 1394, 1395], "mol": [463, 544, 729, 978, 979, 982, 983, 1379, 1380, 1388], "monin": [463, 978, 979, 982, 983, 1380, 1388], "ubukhof": [463, 1380], "pa_alpha": [466, 1380], "alpha": [466, 774, 775, 826, 841, 847, 848, 1380, 1387, 1390], "porteagel": [466, 467, 847, 1380, 1381, 1384], "pa_beta": [467, 1380], "beta": [467, 774, 775, 826, 841, 848, 1380], "rew": [468, 485, 486, 625, 964, 966, 1373, 1380, 1384, 1387, 1389, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "rews2": [469, 485, 486, 674, 675, 697, 703, 709, 715, 964, 966, 1380, 1387, 1397], "rews3": [470, 485, 486, 641, 642, 646, 697, 703, 709, 715, 964, 966, 1380, 1387, 1397], "rho": [471, 485, 486, 514, 515, 521, 522, 689, 690, 692, 696, 697, 702, 703, 714, 715, 955, 964, 966, 1380, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "shear": [472, 736, 974, 1373, 1378, 1380, 1384], "expon": [472, 697, 703, 709, 715, 736, 974, 1373, 1380, 1384, 1400], "txyh": [475, 1380], "wd": [476, 485, 486, 514, 515, 521, 522, 654, 749, 750, 964, 966, 1360, 1361, 1362, 1363, 1378, 1380, 1384, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "yawm": [482, 485, 486, 678, 681, 774, 842, 847, 1373, 1380, 1400], "yld": [483, 485, 486, 964, 966, 1380, 1398], "z0": [484, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 1379, 1380, 1388], "rough": [484, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 1380], "amb2var": [485, 1380], "map": [485, 486, 493, 494, 501, 503, 529, 531, 544, 561, 562, 563, 564, 565, 566, 567, 600, 601, 636, 637, 654, 933, 948, 950, 1049, 1050, 1085, 1086, 1373, 1377, 1380, 1384, 1387, 1391, 1392, 1395, 1397], "var2amb": [486, 1380], "farm_layout": [487, 488, 489, 490, 491, 492, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399], "add_from_csv": [487, 488, 1372], "data_sourc": [487, 488, 493, 494, 501, 503, 512, 529, 531, 542, 600, 601, 636, 637, 653, 654, 669, 670, 689, 690, 696, 697, 732, 733, 1372, 1388, 1389, 1390, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "col_index": 487, "col_nam": 487, "col_x": 487, "col_i": 487, "col_h": 487, "col_d": 487, "col_id": 487, "cols_models_pr": 487, "cols_models_post": 487, "turbine_base_nam": 487, "turbine_id": 487, "turbine_base_name_count_shift": 487, "turbine_paramet": [487, 490, 491, 492], "panda": [487, 488, 501, 503, 509, 529, 531, 538, 544, 600, 601, 636, 637, 653, 654, 669, 670, 689, 690, 691, 692, 696, 697, 702, 703, 708, 709, 714, 715, 733, 893, 902, 909, 911, 913, 914, 915, 916, 919, 920, 922, 930, 933, 934, 935, 937, 939, 948, 951, 953, 964, 969, 970, 1372, 1373, 1378, 1384, 1394, 1395, 1396, 1398, 1400], "datafram": [487, 488, 501, 503, 529, 531, 544, 600, 601, 636, 637, 653, 654, 669, 670, 689, 690, 691, 692, 696, 697, 702, 703, 708, 709, 714, 715, 733, 909, 911, 913, 914, 915, 916, 919, 920, 933, 934, 935, 937, 939, 941, 942, 951, 969, 970, 1372, 1373, 1384, 1394, 1395, 1396, 1398, 1400], "column": [487, 501, 503, 529, 531, 544, 600, 601, 636, 637, 654, 669, 670, 690, 692, 696, 697, 702, 703, 708, 714, 733, 933, 936, 964, 970, 985, 1215, 1253, 1339, 1388, 1392, 1394, 1395, 1397, 1398], "enter": 487, "forward": [487, 489, 490, 491, 492, 550, 895, 900, 924, 925, 926, 927, 928, 929, 933, 969, 970], "add_from_df": [488, 1372, 1384], "add_from_fil": [489, 1372, 1388, 1398], "infer": [489, 490, 1396], "suffix": [489, 493, 494], "add_from_json": [490, 1372], "set_farm_nam": 490, "turbim": [490, 1372], "json": [490, 897, 1372], "add_grid": [491, 1372, 1387, 1389, 1397, 1399], "xy_bas": [491, 492, 1372, 1387, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1399], "step_vector": [491, 1372, 1387, 1389, 1397, 1399], "regular": [491, 493, 618, 625, 1274, 1284, 1307, 1323, 1372, 1373, 1375, 1376, 1384, 1387, 1397, 1399], "grid": [491, 493, 576, 584, 618, 1189, 1217, 1223, 1264, 1265, 1274, 1284, 1285, 1307, 1308, 1323, 1372, 1373, 1375, 1376, 1384, 1387, 1389, 1399], "add_row": [492, 1372, 1390, 1392, 1394, 1395, 1396], "xy_step": [492, 1372, 1390, 1392, 1394, 1395, 1396], "row": [492, 669, 670, 1215, 1253, 1284, 1285, 1307, 1308, 1372, 1383, 1385, 1387, 1392, 1394, 1397, 1398], "fielddatanc": [493, 494, 495, 496, 497, 498, 499, 500, 1372, 1384, 1389], "heterogen": [493, 1372, 1383, 1385, 1392], "horizont": [493, 922, 924, 927, 1372, 1377, 1384, 1388, 1389, 1392, 1396], "netcdf": [493, 1372, 1389], "pattern": [493, 494, 1384, 1394], "end": [493, 494, 921, 958, 964, 969, 970], "nc": [493, 494, 964, 965, 967, 968, 1384, 1389], "One": [493, 494, 1389], "mani": [493, 494, 1384, 1385], "ovar": [493, 501, 529, 600, 669], "var2ncvar": [493, 494, 1389], "fixed_var": [493, 494, 501, 503, 529, 531, 542, 1388, 1389, 1390, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "uniform": [493, 494, 501, 503, 521, 529, 531, 600, 601, 685, 739, 768, 1159, 1161, 1372, 1373, 1384, 1387, 1388, 1396, 1397, 1398, 1400], "read": [493, 494, 501, 503, 529, 531, 545, 601, 637, 654, 670, 690, 692, 696, 697, 702, 703, 708, 709, 714, 715, 964, 969, 1338, 1339, 1356, 1357, 1372, 1378, 1384, 1387, 1389, 1397, 1398], "states_coord": [493, 494, 1389], "x_coord": [493, 494, 1389], "y_coord": [493, 494, 1389], "h_coord": [493, 494, 1389], "pre_load": [493, 494, 1389], "weight_ncvar": [493, 494], "bounds_error": [493, 1389], "exceed": [493, 544], "fill_valu": 493, "time_format": [493, 494, 1389], "datetim": [493, 494], "string": [493, 494, 560, 931, 933, 941, 942, 1034, 1036, 1055, 1057, 1064, 1075, 1082, 1126, 1140, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1215, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1253, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "interp_nan": [493, 494], "linearli": [493, 494, 798], "interpn_par": [493, 494], "scipi": [493, 494, 503, 670, 708, 709, 714, 715, 1215, 1253], "interpn": [493, 494, 670, 708, 709, 714, 715], "utmx": [494, 1389], "utmi": [494, 1389], "d_": 494, "sel": [494, 1159, 1161], "isel": 494, "xr": 494, "multiheightst": [501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 1372, 1384], "multipl": [501, 780, 1372, 1373, 1384, 1385, 1395], "taken": [501, 1396], "exampl": [501, 955, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "50": [501, 544, 1387, 1388, 1390, 1391, 1392, 1395, 1399], "60": [501, 1390, 1397], "100": [501, 646, 761, 762, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "var2col": [501, 503, 529, 531, 542, 544, 600, 601, 1388, 1390, 1392, 1395, 1397, 1398, 1399], "fix": [501, 503, 514, 529, 531, 1178, 1235, 1264, 1372, 1376, 1384, 1387], "pd_read_par": [501, 503, 531, 601, 733], "slice": [501, 503, 509, 529, 531, 538, 576, 1373, 1396], "rang": [501, 503, 509, 529, 531, 538, 653, 654, 1373, 1384, 1394, 1395, 1400], "states_loc": [501, 503, 509, 512, 529, 531, 538, 542, 1392], "loc": [501, 503, 509, 529, 531, 538, 1394, 1395], "rdict": [501, 502, 512, 513, 529, 530, 542, 543], "index_col": [501, 502, 512, 513, 529, 530, 542, 543], "interp1d": 503, "multiheighttimeseri": [512, 513, 1372, 1384, 1388, 1392], "timeseri": [512, 542, 543, 754, 755, 768, 769, 916, 1372, 1373, 1383, 1384, 1385, 1392, 1397], "parse_d": [512, 513, 542, 543], "scanw": [514, 515, 516, 517, 518, 519, 520, 1372], "ws_list": [514, 515], "singlestatest": [521, 522, 523, 524, 525, 526, 527, 528, 1372, 1384, 1387, 1396], "profdict": [521, 529], "profdata": [521, 522], "statest": [529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 1372, 1388, 1390, 1394, 1395, 1399, 1400], "readabl": [529, 1372, 1395, 1398], "rpar": [529, 696], "create_random_abl_st": [544, 1372], "cols_minmax": 544, "mol_abs_rang": 544, "5000": [544, 1390, 1394, 1397, 1398], "normal": [544, 608, 609, 749, 895, 1215, 1253, 1373, 1388, 1394, 1399], "random": [544, 1372, 1388], "abl": [544, 720, 723, 726, 729, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 1372, 1373, 1384], "neutral": [544, 720, 729, 971, 972, 973, 1373, 1378], "stratif": 544, "windio": [545, 1384], "read_cas": [545, 1372], "case_yaml": [545, 1372], "site_par": [545, 1372], "farm_par": 545, "ana_par": 545, "yaml": [545, 1372, 1384], "read_sit": 545, "read_farm": 545, "read_analys": 545, "basicfarmcontrol": [546, 1373, 1387, 1391, 1397], "condit": [546, 653, 1034, 1035, 1358, 1373, 1384, 1387, 1390, 1393, 1395, 1396, 1400], "farm_model": [547, 548, 549, 550, 551, 552, 556, 1391], "turbine2farmmodel": [547, 548, 549, 550, 551, 552, 1373, 1391], "promot": [547, 1373], "simpli": [547, 608, 1373, 1386, 1388, 1391, 1395, 1399], "init": [550, 958, 959, 1127, 1159, 1161, 1164, 1301, 1312, 1332], "slightli": [553, 1378, 1395], "enhanc": [553, 1378], "dictionari": [553, 555, 788, 826, 846, 872, 882, 933, 970, 1378], "pass": [555, 1215, 1253, 1399], "kind": [556, 1371, 1389, 1400], "turbine_ord": 556, "partial_wak": [556, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 1391], "partialwakemodel": 556, "wake_superposit": [556, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 1391], "pct_file": [556, 558], "print_toc": [556, 560, 1391], "curv": [558, 689, 690, 692, 696, 702, 703, 708, 709, 714, 715, 953, 955, 1373, 1377, 1384, 1385, 1394], "more": [561, 1215, 1253, 1384, 1395, 1398], "than": [561, 874, 1398], "invok": [561, 641, 743, 798, 1373, 1384, 1385, 1386, 1387, 1390, 1398, 1399, 1400], "wname2pwak": [561, 562], "wtype2pwak": [561, 562], "ones": [562, 569, 577, 585, 588, 595, 985], "partialaxiwak": [568, 569, 570, 571, 572, 573, 574, 575, 780, 1373, 1387, 1391, 1397], "axial": [568, 1373], "idea": [568, 874, 1384, 1394], "radial": [568, 569, 781, 792, 796, 797, 807, 813, 824], "n": [568, 569, 576, 577, 584, 585, 618, 619, 625, 626, 924, 925, 926, 1018, 1019, 1047, 1048, 1115, 1116, 1178, 1179, 1183, 1184, 1194, 1195, 1215, 1235, 1236, 1253, 1373, 1384, 1386, 1388, 1391, 1396, 1397, 1398, 1400], "radii": [568, 795, 796, 806, 807, 812, 813, 823, 824, 1358, 1378], "cover": 568, "disc": [568, 587, 1034, 1035, 1393], "overlap": [568, 587, 618, 619], "circl": [568, 587, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1254, 1255, 1258, 1264, 1265, 1268, 1274, 1275, 1278, 1284, 1285, 1288, 1358, 1359, 1378, 1390], "area": [568, 618, 619, 988, 994, 996, 998, 1004, 1006, 1013, 1020, 1028, 1034, 1035, 1339, 1358, 1359, 1374, 1378, 1384, 1390], "partialdistslicedwak": [576, 577, 578, 579, 580, 581, 582, 583, 584, 783, 1373, 1391], "distanc": [576, 803, 804, 987, 988, 992, 994, 996, 998, 1002, 1004, 1006, 1009, 1011, 1013, 1016, 1018, 1020, 1024, 1026, 1028, 1032, 1057, 1058, 1204, 1205, 1215, 1217, 1229, 1230, 1253, 1254, 1255, 1264, 1265, 1274, 1275, 1284, 1285, 1308, 1358, 1359, 1373, 1374, 1376, 1378, 1390, 1400], "make": [576, 1355, 1358, 1373, 1374, 1386, 1390, 1398], "optin": [576, 1339], "done": [576, 1045, 1397], "grotor": 576, "gridrotor": [576, 577, 585, 618, 619, 620, 621, 622, 623, 624, 1373, 1391], "partialgrid": [584, 585, 586, 1373, 1391], "mai": [584, 641, 1373, 1389, 1400], "partialtophat": [587, 588, 589, 590, 591, 592, 593, 1373, 1391], "hat": [587, 793, 1373, 1381, 1400], "rotorpoint": [594, 595, 596, 597, 598, 599, 1373, 1387, 1391], "directli": [594, 951, 956, 1082, 1091, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1371, 1373, 1377, 1378, 1381, 1395], "get_wake_point": [594, 598], "setuniformdata": [600, 601, 602, 603, 604, 1373, 1384], "both": [600, 601, 790, 791, 815, 818, 852, 855, 857, 860, 1307, 1394, 1398, 1399], "assum": [600, 601, 1358, 1397], "Or": [600, 601], "independ": [600, 601, 1392], "written": [600, 601, 936, 1385], "tke2ti": [605, 606, 607, 1373, 1384, 1391], "tke": [605, 1373, 1384, 1388, 1392, 1393], "sqrt": [605, 1215, 1253, 1373], "wakedelta": [608, 609, 610, 611, 1373], "subtract": [608, 1373, 1390], "divid": [608, 609, 924, 925, 926, 927, 928, 929], "centrerotor": [612, 613, 614, 615, 616, 617, 1373, 1387, 1391, 1397], "compos": [618, 625, 1373], "possibli": [618, 1373], "kick": [618, 1373], "out": [618, 1215, 1253, 1373, 1395, 1397, 1400], "outsid": [618, 1373, 1389], "reduc": [618, 619, 625, 626, 902, 918, 919, 920, 1384], "reduct": [618, 619], "actual": [618, 619, 1082, 1091, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1384, 1386, 1392, 1394, 1396], "repres": [618, 619, 669, 708, 714, 896, 1004, 1011, 1018, 1373, 1378, 1388, 1399, 1400], "circ": [618, 619], "recalcul": [618, 619], "accordingli": [618, 619], "nint": [618, 619, 625, 626], "200": [618, 619, 625, 626, 1387, 1388, 1390, 1392, 1394, 1400], "levelrotor": [625, 626, 627, 628, 629, 630, 631, 1373, 1384, 1391], "lower": [625, 863, 864, 874, 875, 917, 1203, 1373, 1384, 1397], "blade": [625, 1373], "tip": [625, 1373], "in_var": [632, 633], "vairabl": [632, 633], "func": [632, 633, 1082, 1091, 1101, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1340, 1346, 1347, 1348, 1349, 1354], "in0": [632, 633], "in1": [632, 633], "stsel": [632, 633], "out0": [632, 633], "ou1": [632, 633], "where": [632, 633, 896, 1215, 1253, 1361, 1362, 1390, 1392, 1393, 1395, 1400], "inx": [632, 633], "outi": [632, 633], "lookupt": [636, 637, 638, 639, 640, 1373, 1384], "tabl": [636, 637, 669, 1373, 1384, 1394, 1395], "varmap": [636, 637, 1034, 1049, 1050, 1055, 1057, 1064, 1075, 1140, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250], "pd_file_read_par": [637, 654, 670, 690, 697], "xr_interp_arg": 637, "powermask": [641, 642, 643, 644, 645, 646, 1373, 1384, 1391, 1394], "below": [641, 925, 926, 928, 929, 1384, 1386], "rate": 641, "higher": [641, 863, 864, 874, 875, 1384], "introduc": [641, 1381, 1384], "so": [641, 985, 1384, 1393, 1394, 1396, 1397], "wise": [641, 669, 670, 1215, 1253, 1384], "var_ws_p": [641, 642, 697, 703, 709, 715], "factor_p": [641, 642, 646], "update_p_ct": [641, 646], "rated_p": [641, 646], "var_w": 646, "p_lim": 646, "rotorcentrecalc": [647, 648, 649, 650, 651, 652, 1373, 1384, 1391], "sectormanag": [653, 654, 655, 656, 657, 1373, 1384, 1395], "range_var": [653, 654, 1395], "target_var": [653, 654, 1395], "col_tind": 654, "col_tnam": [654, 1395], "colmap": [654, 1395], "var_period": 654, "360": 654, "within": [654, 956, 1254, 1255, 1264, 1265, 1274, 1275, 1284, 1285, 1358, 1374, 1376, 1378, 1384, 1386, 1390, 1393], "period": 654, "setfarmvar": [658, 659, 660, 661, 662, 663, 664, 1373, 1384, 1394, 1400], "add_var": [658, 660, 1159, 1161, 1394, 1400], "setxyhd": [665, 666, 667, 668, 1373, 1387, 1397], "set_xi": [665, 666], "set_h": [665, 666], "set_d": [665, 666], "tablefactor": [669, 670, 671, 672, 673, 1373, 1384], "multipli": [669, 670, 803, 804, 815, 816, 852, 853, 857, 858, 1373, 1384], "dimension": [669, 1215, 1253, 1373, 1377, 1384], "col_var": [669, 670, 732, 733], "row_var": [669, 670], "onto": [669, 670], "thrust2ct": [674, 675, 676, 677, 1373, 1384, 1391], "thrust_var": [674, 675], "wsct": [674, 696, 702, 708, 714], "var_ws_ct": [674, 675, 697, 703, 709, 715], "yaw2yawm": [678, 679, 680, 1373, 1384, 1391, 1400], "yawm2yaw": [681, 682, 683, 1373, 1384, 1391, 1400], "linear": [684, 863, 884, 885, 1373, 1391, 1397, 1399], "ti_var": [684, 685, 857, 858], "k_var": [684, 685, 774, 775, 803, 804, 809, 810, 815, 816, 820, 821, 847, 848], "ti_val": [684, 685], "cpctfile": [689, 690, 1373, 1384], "pctfile": [689, 690, 696, 697, 698, 699, 700, 701, 1373, 1387, 1388, 1391, 1395, 1396, 1397, 1398], "cp": [689, 690, 691, 692, 1373, 1384], "col_w": [689, 690, 696, 697, 702], "col_cp": [689, 690, 692], "225": [689, 690, 692, 708, 955, 1387, 1388, 1389, 1390, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "paramer": 690, "cpctfromtwo": [691, 692, 1373, 1384], "pctfromtwo": [691, 692, 702, 703, 704, 705, 706, 707, 1373], "data_source_cp": [691, 692], "data_source_ct": [691, 692, 702, 703, 708, 709, 714, 715], "col_ws_cp_fil": 692, "pd_file_read_pars_cp": 692, "pd_file_read_pars_ct": [692, 703, 709, 715], "nulltyp": [693, 694, 695, 1373, 1384, 1391], "doe": [693, 1254, 1264, 1274, 1284, 1373, 1392, 1394, 1397], "col_p": [696, 697, 702, 703], "col_ct": [696, 697, 702, 703], "densitii": [696, 697, 702, 703, 714, 715], "correct": [696, 697, 702, 703, 714, 715, 743, 803, 804, 809, 874, 1373, 1384, 1393, 1394, 1396], "wsp": [696, 702, 708, 714], "p_ct": [697, 703, 708, 709, 715], "p_p": [697, 703, 709, 715, 1400], "88": [697, 703, 709, 715, 1388, 1390, 1398, 1400], "source_p": [702, 708, 714], "source_ct": [702, 708, 714], "rpars_p": [702, 708, 714], "rpars_ct": [702, 708, 714], "data_source_p": [702, 703, 708, 709, 714, 715], "col_ws_p_fil": [702, 703], "col_ws_ct_fil": 703, "pd_file_read_pars_p": [703, 709, 715], "wsrho2pctfromtwo": [708, 709, 710, 711, 712, 713, 1373], "950": [708, 1390], "975": 708, "275": 708, "subsequ": [708, 714, 1393], "neccessarili": [708, 714, 1373, 1398], "ipars_p": [708, 714], "ipars_ct": [708, 714], "interpn_pars_p": [709, 715], "interpn_pars_ct": [709, 715], "wsti2pctfromtwo": [714, 715, 716, 717, 718, 719, 1373, 1384], "05": [714, 955, 1199, 1200, 1387, 1388, 1390, 1392, 1394, 1395, 1397, 1399, 1400], "06": [714, 1387, 1388, 1390, 1392, 1397, 1398], "07": [714, 774, 775, 826, 841, 848, 1387, 1388, 1389, 1391, 1397], "vertical_profil": [720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742], "abllogneutralwsprofil": [720, 721, 722, 1373], "log": [720, 723, 726, 729, 972, 976, 977, 981, 1373, 1379], "abllogstablewsprofil": [723, 724, 725, 1373], "stabl": [723, 729, 975, 976, 977, 978, 979, 1373, 1378, 1386], "abllogunstablewsprofil": [726, 727, 728, 1373], "unstabl": [726, 729, 980, 981, 982, 983, 1373, 1378], "abllogwsprofil": [729, 730, 731, 1373, 1388], "pick": [729, 1387], "dataprofil": [732, 733, 734, 735, 1373, 1384], "data_z": 732, "n_z": 732, "data_v": 732, "interp_par": [732, 733], "col_z": [732, 733], "read_csv": 733, "shearedprofil": [736, 737, 738, 1373, 1384], "uniformprofil": [739, 740, 741, 742, 1373], "farmord": [743, 744, 745, 746, 747, 748, 1373, 1391], "warn": 743, "test": [743, 987, 993, 994, 996, 1003, 1004, 1010, 1011, 1017, 1018, 1025, 1026, 1033, 1384, 1388], "purpos": [743, 1388, 1390, 1396], "give": [743, 1384, 1398], "when": [743, 1384, 1387, 1388, 1389, 1390, 1394, 1398], "base_fram": [743, 744, 774, 775], "rotorwd1": [743, 744], "rotorwd": [743, 744, 749, 750, 751, 752, 753, 775, 1373, 1387, 1391], "align": [749, 1373], "axi": [749, 895, 924, 925, 926, 927, 928, 929, 940, 948, 950, 955, 988, 998, 1006, 1013, 1020, 1028, 1066, 1077, 1087, 1215, 1253, 1254, 1258, 1264, 1268, 1274, 1278, 1284, 1288, 1360, 1361, 1362, 1363, 1373, 1377, 1378, 1396, 1400], "var_wd": [749, 750], "seqdynamicwak": [754, 755, 756, 757, 758, 759, 760, 1391], "dynam": [754, 768, 1373, 1383, 1385], "cl_ipar": [754, 755, 761, 762, 768, 769], "line": [754, 755, 761, 762, 768, 769, 793, 795, 803, 806, 809, 812, 820, 823, 988, 998, 1006, 1013, 1020, 1028, 1384, 1386, 1387, 1396], "dt_min": [754, 755, 768, 769, 1397], "minut": [754, 755, 768, 769, 1388, 1392, 1397], "streamlin": [761, 762, 763, 764, 765, 766, 767, 857, 1373, 1381, 1384, 1389, 1391, 1393], "n_delstor": [761, 762], "increas": [761, 762, 1381], "max_length": [761, 762], "100000": [761, 762, 1394], "timelin": [768, 769, 770, 771, 772, 773, 1373, 1384, 1391, 1397], "spatial": [768, 1057, 1215, 1253, 1373, 1374, 1384, 1388, 1397], "max_wake_length": [768, 769], "20000": [768, 769], "yawedwak": [774, 775, 776, 777, 778, 779, 1373, 1384, 1391], "bend": [774, 1373, 1384, 1400], "bastankhah": [774, 815, 826, 847, 1381, 1384, 1400], "port": [774, 826, 847, 1400], "agel": [774, 826, 847, 1400], "2016": [774, 826, 847, 1384], "http": [774, 798, 803, 809, 815, 826, 847, 852, 857, 874, 985, 1355, 1358, 1382, 1384, 1385, 1386, 1398], "doi": [774, 803, 815, 826, 847, 1382], "org": [774, 803, 815, 826, 847, 852, 857, 874, 1382], "1017": [774, 826, 847], "jfm": [774, 826, 847], "595": [774, 826, 847], "porteagelmodel": [774, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 1381], "misalign": [774, 847, 1400], "ct_max": [774, 775, 793, 794, 798, 799, 804, 809, 810, 815, 816, 820, 821, 826, 841, 847, 848, 852, 853, 857, 858], "9999": [774, 775, 793, 794, 798, 799, 804, 809, 810, 816, 820, 821, 826, 841, 847, 848, 853, 858], "58": [774, 775, 826, 841, 847, 848, 1388, 1390, 1397], "beyond": [775, 794, 804, 810, 815, 816, 821, 826, 841, 848, 852, 853, 857, 858], "determin": [775, 826, 841, 848, 916, 1384, 1393], "onset": [775, 826, 841, 848], "far": [775, 826, 841, 848, 1384], "region": [775, 826, 841, 848], "axisymmetricwakemodel": [780, 781, 782, 790, 793, 1381], "distslicedwakemodel": [780, 783, 784, 785, 786, 787, 788, 789, 847, 1381], "r": [780, 781, 790, 791, 792, 793, 796, 797, 803, 807, 809, 813, 815, 818, 820, 824, 852, 855, 857, 860, 1381], "separ": [780, 783, 1381, 1384, 1393], "abil": [780, 783], "calc_wakes_spsel_x_r": [780, 781, 790, 792, 793, 797, 803, 809, 815, 820, 852, 857], "calc_wakes_spsel_x_yz": [780, 782, 783, 785, 790, 793, 803, 809, 815, 820, 847, 850, 852, 857], "n_r_per_x": [781, 792, 796, 797, 807, 813, 824], "n_sp_sel": [781, 782, 785, 791, 792, 795, 797, 806, 812, 818, 823, 850, 855, 860], "sp_sel": [781, 782, 785, 791, 792, 795, 797, 806, 812, 818, 823, 826, 839, 850, 855, 860], "non": [781, 782, 785, 791, 792, 795, 797, 806, 812, 818, 823, 850, 855, 860, 1129, 1170, 1203, 1215, 1253, 1305, 1318, 1336, 1384, 1385, 1386], "yz": [782, 783, 785, 850, 922, 929, 943, 944, 1381, 1384], "n_yz_per_x": [782, 785, 850], "denpend": [783, 1381], "superp": 783, "gaussianwakemodel": [790, 791, 792, 815, 852, 857, 1381], "gaussian": [790, 1381], "calc_amplitude_sigma_spsel": [790, 791, 815, 818, 852, 855, 857, 860], "amplitud": [790, 791, 815, 818, 852, 855, 857, 860], "sigma": [790, 791, 815, 818, 852, 855, 857, 860, 1384], "amsi": [791, 818, 855, 860], "tophatwakemodel": [793, 794, 795, 796, 797, 803, 809, 820, 1381], "calc_wake_radiu": [793, 796, 803, 807, 809, 813, 820, 824], "calc_centreline_wake_delta": [793, 795, 803, 806, 809, 812, 820, 823], "wake_r": [795, 796, 806, 807, 812, 813, 823, 824], "cl_del": [795, 806, 812, 823], "varlu": [795, 806, 812, 823], "induct": [798, 799, 800, 801, 802, 1373, 1384, 1387], "rhb": [798, 799, 800, 801, 802, 1381, 1384, 1387, 1391], "rankin": [798, 1381, 1384, 1387], "half": [798, 939, 941, 942, 1018, 1378, 1381, 1384, 1387], "bodi": [798, 1381, 1384, 1387], "superpos": 798, "ref": 798, "b": [798, 1215, 1253, 1385], "gribben": 798, "hawk": 798, "potenti": 798, "flow": [798, 922, 924, 925, 926, 927, 928, 929, 943, 1377, 1383, 1384, 1385, 1387, 1392, 1393, 1396, 1397], "blockag": [798, 1381, 1383, 1384, 1385], "techinc": 798, "paper": [798, 1382], "frazer": 798, "nash": 798, "consult": 798, "2019": [798, 809, 810], "www": 798, "fnc": 798, "co": [798, 1400], "uk": 798, "media": 798, "o5eosxa": 798, "pdf": [798, 809, 852, 857, 874], "crespohernandeztiwak": [803, 804, 805, 806, 807, 808, 1381, 1384, 1391], "crespo": [803, 1381], "hernandez": [803, 1381], "empir": [803, 1381], "correl": [803, 1215, 1253, 1381], "1016": [803, 815], "0167": 803, "6105": 803, "95": [803, 1387, 1388, 1390, 1399], "00033": 803, "we": [803, 1215, 1253, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "eqn": 803, "17": [803, 1388, 1390, 1394, 1399], "15": [803, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1398, 1399], "1088": [803, 852, 857], "1742": [803, 852, 857], "6596": [803, 852, 857], "625": 803, "012039": 803, "a_near": [803, 804], "a_far": [803, 804], "e1": [803, 804], "e2": [803, 804], "e3": [803, 804], "use_ambti": [803, 804], "sbeta_factor": [803, 804, 815, 816, 852, 853, 857, 858], "sbeta": [803, 804, 815, 816, 852, 853, 857, 858], "near_wake_d": [803, 804], "362": 804, "73": [804, 1387, 1390], "83": [804, 1215, 1253, 1390, 1399], "0325": 804, "32": [804, 1390, 1397], "iectiwak": [809, 810, 811, 812, 813, 814, 1381, 1391], "iec": [809, 1381], "64100": [809, 1381], "2005": [809, 1381], "8": [809, 853, 874, 893, 895, 900, 1381, 1382, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "orbit": 809, "dtu": [809, 1387, 1397], "dk": 809, "3750291": 809, "2009_31": 809, "v2": 809, "volluk": 809, "implement": [809, 1390, 1393], "document": [809, 1215, 1253, 1374, 1384], "frandsen": [809, 852, 853, 1384], "opening_angl": [809, 810], "open": [809, 810, 1382, 1384], "21": [809, 810, 1387, 1388, 1390, 1394], "6": [809, 810, 1215, 1253, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "iec_typ": 810, "bastankhahwak": [815, 816, 817, 818, 819, 1381, 1387, 1391, 1397], "j": [815, 1215, 1253], "renen": 815, "2014": 815, "01": [815, 1387, 1388, 1390, 1391, 1392, 1397, 1398], "002": 815, "modif": 815, "fit": 815, "better": 815, "jensenwak": [820, 821, 822, 823, 824, 825, 1381, 1391], "jensen": [820, 1215, 1253, 1381, 1391], "repetit": [826, 1381], "avoid": [826, 1215, 1253, 1381, 1400], "mdata_kei": [826, 832], "x0": [826, 840], "NEAR": [826, 833], "r_pc": [826, 835], "r_pc_": [826, 836], "ampl_near": [826, 828], "delta_near": [826, 831], "ampl_far": [826, 827], "sigma_y_far": [826, 837], "sigma_z_far": [826, 838], "delta_far": [826, 830], "calc_data": [826, 842], "has_data": [826, 845], "clean": [826, 843], "gamma": [842, 1400], "radiant": [842, 1400], "porteagelwak": [847, 848, 849, 850, 851, 1381, 1391], "turboparkwak": [852, 853, 854, 855, 856, 1381, 1384, 1391], "turbopark": [852, 857, 1381, 1384], "iopscienc": [852, 857], "iop": [852, 857], "articl": [852, 857, 1382], "2265": [852, 857], "022063": [852, 857], "c1": [852, 853, 1229, 1230], "c2": [852, 853, 1229, 1230], "turboparkwakeix": [857, 858, 859, 860, 861, 862, 1381, 1391], "own": [857, 858, 1396], "linearsuperposit": [863, 864, 865, 866, 867, 1373, 1384, 1391], "supersposit": [863, 868, 878, 1373], "rescal": [863, 868, 874, 878, 1373], "scale": [863, 864, 868, 869, 878, 879, 1140, 1141, 1150, 1158, 1229, 1230, 1387, 1389, 1397], "rule": [863, 864, 868, 869, 878, 879, 1140, 1141, 1150, 1158, 1384, 1395, 1400], "lim_low": [863, 864, 874, 875], "lim_high": [863, 864, 874, 875], "svar": [863, 864, 868, 869, 878, 879], "vafriabl": [863, 864], "input_farm_var": [863, 867, 868, 873, 878, 883], "source_turbin": [864, 869, 879], "source_turbine_amb": [864, 869, 879], "source_turbine_": [864, 869, 879], "maxsuperposit": [868, 869, 870, 871, 872, 873, 1373, 1391], "maximum": [868, 924, 925, 926, 927, 928, 929, 1215, 1253, 1373, 1384, 1399], "productsuperposit": [874, 875, 876, 877, 1373, 1384, 1391], "product": [874, 1215, 1253, 1373, 1391], "dimensionless": 874, "deficit": [874, 1381, 1393, 1398, 1399, 1400], "rather": 874, "equival": [874, 1393, 1398, 1400], "arxiv": 874, "2010": 874, "03873": 874, "equat": [874, 1384], "quadraticsuperposit": [878, 879, 880, 881, 882, 883, 1373, 1391], "quadrat": [878, 884, 885, 1373, 1391], "tisuperposit": [884, 885, 886, 887, 1373, 1391], "ti_superp": [884, 885], "power_n": [884, 885], "superp_to_amb": [884, 885], "anim": [888, 889, 890, 891, 892, 902, 917, 924, 925, 926, 927, 928, 929, 943, 1377, 1384, 1397], "artist": [888, 890, 892, 917, 1377, 1384], "fig": [888, 889, 890, 892, 895, 902, 917, 924, 925, 926, 927, 928, 929, 941, 1355, 1378, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "pyplot": [888, 889, 891, 895, 950, 955, 988, 998, 1006, 1013, 1020, 1028, 1066, 1077, 1087, 1258, 1268, 1278, 1288, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "figur": [888, 889, 893, 895, 917, 922, 924, 925, 926, 927, 928, 929, 937, 941, 942, 951, 987, 988, 994, 996, 998, 1004, 1006, 1011, 1013, 1018, 1020, 1026, 1028, 1034, 1055, 1057, 1064, 1066, 1075, 1077, 1082, 1087, 1126, 1140, 1149, 1151, 1157, 1159, 1254, 1258, 1264, 1268, 1274, 1278, 1284, 1288, 1298, 1307, 1323, 1355, 1378, 1384, 1390, 1392, 1396, 1398], "add_gener": [888, 890, 1397], "gen": [888, 890, 892], "verbostii": 891, "artistanim": 891, "farmlayoutoutput": [893, 894, 895, 896, 897, 898, 899, 900, 901, 1377, 1384, 1387, 1388, 1390, 1392, 1395, 1398, 1399], "plot": [893, 895, 898, 899, 900, 901, 922, 924, 925, 926, 927, 928, 929, 937, 941, 942, 943, 944, 948, 950, 951, 953, 955, 988, 998, 1006, 1013, 1020, 1028, 1258, 1268, 1278, 1288, 1355, 1377, 1384, 1387, 1389, 1390, 1394, 1395, 1396, 1398, 1399, 1400], "layout": [893, 895, 896, 897, 898, 899, 900, 901, 941, 942, 1034, 1055, 1057, 1064, 1066, 1075, 1077, 1082, 1087, 1126, 1140, 1149, 1151, 1157, 1159, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1374, 1377, 1383, 1384, 1385, 1397, 1398], "from_r": [893, 894], "results_st": [893, 894], "from_result": [893, 894], "get_layout_data": [893, 896], "get_layout_dict": [893, 897], "get_figur": [893, 895, 900, 937, 941, 951, 1387, 1388, 1390, 1392, 1395, 1398, 1399], "color_bi": [893, 895, 1392, 1398, 1399], "fontsiz": [893, 895, 900], "figsiz": [893, 895, 902, 917, 924, 925, 926, 927, 928, 929, 948, 950, 955, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399], "annot": [893, 895, 1392, 1398, 1399], "write_plot": [893, 900], "write": [893, 898, 899, 900, 901, 902, 922, 930, 933, 934, 936, 937, 942, 948, 951, 953, 964, 970, 1356, 1377, 1378, 1384], "write_xyh": [893, 901], "write_csv": [893, 898, 934, 936], "write_json": [893, 899], "format_col2var": [893, 902, 922, 930, 933, 934, 937, 948, 951, 953], "print_model": [893, 902, 922, 930, 932, 934, 937, 948, 951, 953, 1034, 1055, 1057, 1064, 1072, 1075, 1080, 1140, 1149, 1151, 1157], "model_typ": [893, 902, 922, 930, 931, 934, 937, 948, 951, 953], "titl": [895, 924, 925, 926, 927, 928, 929, 940, 941, 942, 948, 950, 953, 955, 1254, 1258, 1264, 1268, 1274, 1278, 1284, 1288, 1382, 1388, 1392, 1394, 1395, 1397, 1398, 1399], "ax": [895, 902, 917, 924, 925, 926, 927, 928, 929, 948, 950, 955, 987, 988, 994, 996, 998, 1004, 1006, 1011, 1013, 1018, 1020, 1026, 1028, 1034, 1055, 1057, 1064, 1066, 1075, 1077, 1082, 1087, 1126, 1140, 1149, 1151, 1157, 1159, 1254, 1258, 1264, 1268, 1274, 1278, 1284, 1288, 1298, 1307, 1323, 1387, 1388, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399], "normalize_d": 895, "ret_im": [895, 917, 924, 925, 926, 927, 928, 929, 1397], "barg": [895, 1258, 1268, 1278, 1288], "anno_delx": 895, "anno_d": 895, "scatter": [895, 917, 1384], "color": [895, 924, 925, 926, 927, 928, 929, 988, 998, 1006, 1013, 1020, 1028, 1384, 1398], "mean_rew": [895, 1392, 1398, 1399], "etc": [895, 1390, 1392], "wrt": [895, 902, 911, 912, 913, 914, 915, 987, 992, 994, 996, 1002, 1004, 1009, 1011, 1016, 1018, 1024, 1026, 1032, 1091, 1101], "plt": [895, 917, 924, 925, 926, 927, 928, 929, 950, 955, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "No": 895, "matplotlib": [895, 917, 924, 925, 926, 927, 928, 929, 988, 998, 1006, 1011, 1013, 1020, 1028, 1066, 1077, 1087, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "im": [895, 917, 924, 925, 926, 927, 928, 929], "pathcollect": [895, 917], "farmresultsev": [902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 1377, 1384, 1392, 1394, 1397, 1398, 1399], "farm_calc": 902, "weinsum": [902, 921], "rh": [902, 921], "einstein": [902, 921, 1384], "reduce_st": [902, 919, 1398], "vars_op": [902, 919, 920], "some": [902, 918, 919, 920, 984, 1215, 1253, 1378, 1390, 1393, 1394, 1400], "reduce_turbin": [902, 920], "reduce_al": [902, 918], "states_op": [902, 918], "turbines_op": [902, 918], "calc_states_mean": [902, 911], "calc_states_sum": [902, 913], "calc_states_std": [902, 912], "deviat": [902, 912], "calc_turbine_mean": [902, 914], "calc_turbine_sum": [902, 915], "calc_farm_mean": [902, 907], "calc_farm_sum": [902, 908], "calc_mean_farm_pow": [902, 910, 1392, 1394, 1398, 1399], "calc_turbine_yield": [902, 909, 916, 1398], "annual": [902, 916, 1392, 1398, 1399], "add_capac": [902, 904, 1398], "p_nom": [902, 904], "calc_farm_yield": [902, 909, 1392, 1399], "turbine_yield": [902, 909], "power_uncert": [902, 909], "p75": [902, 909, 1384], "p90": [902, 909, 1384], "add_effici": [902, 905, 1398, 1399], "calc_farm_effici": [902, 906, 1392, 1398, 1399], "gen_stdata": [902, 917, 1397], "fulli": [907, 908, 918, 1254, 1255, 1264, 1265, 1274, 1275, 1284, 1285, 1385], "contract": [907, 908, 918, 1140, 1141, 1150, 1158], "uncertainti": 909, "trigger": 909, "farm_yield": 909, "_type_": 912, "_description_": 912, "hour": 916, "delta_t": 916, "p_unit_w": 916, "retur": 916, "durat": 916, "datetime64": [916, 1397], "seri": [916, 1384, 1393, 1398], "legloc": [917, 1397], "right": [917, 921, 926], "legend": [917, 940, 941, 942, 1387], "It": [921, 1385, 1386, 1389, 1392, 1394, 1395], "about": [921, 1390, 1394], "hand": 921, "einsum": [921, 1082, 1118, 1119, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "express": [921, 1203], "convent": [921, 985, 1215, 1253], "mention": [921, 1388, 1392], "obligatori": 921, "flowplots2d": [922, 923, 924, 925, 926, 927, 928, 929, 1377, 1384, 1387, 1389, 1390, 1392, 1396, 1397, 1399, 1400], "2d": [922, 924, 925, 926, 927, 928, 929, 943, 987, 1011, 1018, 1377, 1378, 1399], "runner": [922, 923, 943, 944, 1082, 1084, 1126, 1298, 1308, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1384, 1387, 1390, 1397, 1398, 1399], "get_mean_fig_xi": [922, 927, 1390, 1399], "resolut": [922, 924, 925, 926, 927, 928, 929, 1387, 1389, 1390, 1392, 1396, 1397, 1399, 1400], "xmin": [922, 924, 925, 927, 928, 1387, 1389, 1390, 1392, 1400], "ymin": [922, 924, 926, 927, 929, 1387, 1389, 1390, 1400], "get_mean_fig_xz": [922, 928], "x_direct": [922, 925, 926, 928, 929, 1392], "270": [922, 925, 926, 928, 929, 1387, 1388, 1392, 1394, 1396, 1400], "xz": [922, 925, 928, 943, 944, 1384], "get_mean_fig_yz": [922, 929], "gen_states_fig_xi": [922, 924, 1387, 1389, 1396, 1397, 1400], "gen_states_fig_xz": [922, 925, 1392], "gen_states_fig_yz": [922, 926, 1400], "xmax": [924, 925, 927, 928, 1387, 1389, 1390, 1392, 1397, 1400], "ymax": [924, 926, 927, 929, 1387, 1389, 1390, 1397, 1400], "xlabel": [924, 925, 927, 928], "ylabel": [924, 926, 927, 929], "xspace": [924, 925, 927, 928, 1387], "500": [924, 925, 926, 927, 928, 929, 1229, 1230, 1387, 1388, 1389, 1390, 1391, 1392, 1395, 1397, 1399], "yspace": [924, 926, 927, 929, 1387], "vmin": [924, 925, 926, 927, 928, 929, 1394], "vmax": [924, 925, 926, 927, 928, 929, 1387, 1394], "normalize_xi": [924, 927], "normalize_var": [924, 925, 926, 927, 928, 929], "vlabel": [924, 925, 926, 927, 928, 929], "add_bar": [924, 925, 926, 927, 928, 929], "cmap": [924, 925, 926, 927, 928, 929, 941, 942, 1394], "quiver_n": [924, 925, 926, 1387, 1389, 1397], "quiver_par": [924, 925, 926, 1387, 1389, 1397], "ret_stat": [924, 925, 926, 927, 928, 929], "space": [924, 925, 926, 927, 928, 929, 1189, 1215, 1217, 1223, 1253, 1264, 1265, 1307, 1323, 1329, 1376, 1384], "contourf": [924, 925, 926, 927, 928, 929], "pure": [924, 925, 926, 927, 928, 929, 1173, 1178, 1183, 1188, 1194, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1254, 1264, 1375, 1376, 1384], "minimum": [924, 925, 926, 927, 928, 929], "bar": [924, 925, 926, 927, 928, 929, 1215, 1253, 1258, 1268, 1278, 1288, 1340, 1341, 1399], "colormap": [924, 925, 926, 927, 928, 929], "th": [924, 925, 926, 1215, 1253, 1384], "quiver": [924, 925, 926], "usag": [924, 925, 926, 927, 928, 929, 1384], "si": [924, 925, 926, 927, 928, 929], "quadmesh": [924, 925, 926, 927, 928, 929], "quadcontourset": [924, 925, 926, 927, 928, 929], "zmin": [925, 926, 928, 929, 1392, 1400], "zmax": [925, 926, 928, 929, 1392, 1400], "zlabel": [925, 926, 928, 929], "zspace": [925, 926, 928, 929], "normalize_x": [925, 928], "normalize_z": [925, 926, 928, 929], "north": [925, 926, 928, 929, 1395], "ech": [925, 926], "normalize_i": [926, 929], "left": [926, 1397], "weight_turbin": [927, 928, 929], "job": 930, "handi": 930, "format_dict": [933, 964, 970], "underli": [933, 1034, 1035, 1038, 1055, 1056, 1057, 1058, 1059, 1064, 1065, 1067, 1075, 1076, 1140, 1141, 1142, 1149, 1150, 1151, 1152, 1153, 1157, 1158, 1173, 1174, 1175, 1178, 1179, 1180, 1183, 1184, 1185, 1188, 1189, 1190, 1194, 1196, 1199, 1204, 1205, 1206, 1210, 1211, 1212, 1216, 1217, 1218, 1223, 1224, 1225, 1229, 1230, 1231, 1235, 1236, 1237, 1241, 1242, 1243, 1247, 1248, 1250], "flappi": [933, 964, 968, 1384, 1385], "fv": [933, 955, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "4f": [933, 964, 966, 970], "resultswrit": [934, 935, 936, 1377, 1384], "roseplotoutput": [937, 938, 939, 940, 941, 942, 951, 1377, 1384, 1395], "rose": [937, 939, 941, 942, 951, 1377, 1383, 1384, 1385, 1388, 1390, 1395, 1398], "get_data_info": [937, 940, 951], "dname": [937, 940, 951], "descript": [937, 940, 951, 1364, 1365, 1372, 1373, 1374, 1381], "sector": [937, 939, 941, 942, 951, 1383, 1384, 1385, 1393, 1398], "var_bin": [937, 939, 941, 942, 951], "px": [937, 941, 942, 951], "write_figur": [937, 942, 951], "start0": [939, 941, 942], "bin": [939, 941, 942, 1384, 1386, 1388, 1398, 1399], "seper": [939, 941, 942], "relev": [939, 941, 942, 1373, 1381], "minu": [939, 941, 942], "width": [939, 941, 942, 1384], "pd": [939, 941, 942, 1394, 1395, 1400], "long": [940, 1384], "text": 940, "turbo": [941, 942], "layout_dict": [941, 942], "title_dict": [941, 942], "ret_data": [941, 942], "seqflowanimationplugin": [943, 944, 945, 946, 947, 1377], "orient": [943, 944, 1395], "yx": [943, 944], "gen_imag": [943, 945], "stateturbinemap": [948, 949, 950, 1377, 1384, 1394], "heat": [948, 950, 1377, 1384], "plot_map": [948, 950, 1394], "subplot": [950, 955, 1387, 1388, 1390, 1394, 1396, 1397, 1398, 1399], "pcolormesh": 950, "statesroseplotoutput": [951, 952, 1377, 1384, 1388, 1390, 1392, 1395, 1398, 1399], "ws_var": [951, 952], "turbinetypecurv": [953, 954, 955, 1377, 1384, 1388, 1394], "plot_curv": [953, 955, 1388, 1394], "p_max": [953, 955, 987, 990, 994, 996, 1000, 1004, 1007, 1011, 1014, 1018, 1022, 1026, 1030, 1390, 1394], "x_label": 955, "y_label": 955, "ws_min": [955, 1395], "ws_max": [955, 1395], "30": [955, 1387, 1388, 1390, 1397, 1398, 1399, 1400], "ws_step": 955, "pmax_arg": 955, "mask": [955, 1383, 1384, 1385, 1395], "labl": 955, "minim": [955, 987, 991, 994, 996, 1001, 1004, 1008, 1011, 1015, 1018, 1023, 1026, 1031, 1057, 1058, 1082, 1109, 1110, 1111, 1126, 1140, 1141, 1150, 1157, 1158, 1159, 1167, 1168, 1188, 1189, 1194, 1204, 1205, 1217, 1247, 1254, 1255, 1262, 1264, 1265, 1272, 1274, 1275, 1282, 1284, 1285, 1294, 1295, 1298, 1303, 1307, 1308, 1315, 1316, 1323, 1329, 1334, 1374, 1376, 1390], "dbase": 956, "must": [958, 959, 1057, 1374, 1389], "py": 959, "file_man": 959, "keyerror": 962, "pandasfilehelp": [964, 965, 966, 967, 968, 969, 970, 1378], "default_reading_paramet": [964, 967], "default_writing_paramet": [964, 968], "data_file_format": [964, 965], "export": 964, "default_format_dict": [964, 966], "bz2": [964, 965, 967, 968], "gz": [964, 965, 967, 968, 1384, 1392, 1397, 1398, 1399], "zip": [964, 965, 967, 968], "h5": [964, 965, 967, 968], "mode": [964, 968], "5f": [964, 966], "6f": [964, 966], "3f": [964, 966], "read_fil": [964, 969, 1338, 1356], "write_fil": [964, 970], "calc_w": [971, 974, 975, 980, 1379], "ustar": [971, 973, 975, 979, 980, 983, 1379], "friction": [971, 973, 975, 979, 980, 983, 1379], "veloc": [971, 973, 975, 979, 980, 983, 1379], "logz": [972, 977, 981, 1379], "lz": [972, 976, 977, 981], "ws_ref": [973, 979, 983, 1379], "h_ref": [973, 979, 983, 1379], "refer": [973, 974, 979, 983, 1215, 1253, 1355, 1379, 1388, 1400], "height0": [974, 1379], "ws0": [974, 1379], "psi": [975, 978, 980, 982, 1379], "lgz": [976, 1379], "obukhov": [978, 979, 982, 983, 1388], "all_subclass": [984, 1378], "cl": [984, 994, 995, 1378], "cubic_root": [985, 1378, 1384], "a0": [985, 1378], "a1": [985, 1378], "a2": [985, 1378], "a3": [985, 1378], "root": [985, 1378], "polynomi": [985, 1378], "work": [985, 1384, 1386, 1389, 1397, 1399], "fast": [985, 1385], "you": [985, 1215, 1253, 1386, 1391, 1392, 1393, 1396, 1398, 1400], "spare": 985, "yourself": [985, 1388], "them": [985, 1215, 1253, 1389, 1399], "github": [985, 1383, 1384, 1385, 1386], "com": [985, 1355, 1358, 1384, 1385, 1386], "opencv": 985, "blob": 985, "master": 985, "modul": [985, 1384], "calib3d": 985, "src": 985, "polynom_solv": 985, "cpp": 985, "n_a0": 985, "delta_wd": [986, 1378], "wd_a": [986, 1378], "wd_b": [986, 1378], "close": [987, 1011, 1378, 1389, 1397], "geometri": [987, 989, 993, 994, 995, 996, 997, 999, 1003, 1004, 1010, 1011, 1017, 1018, 1021, 1025, 1026, 1027, 1029, 1033, 1034, 1035, 1254, 1255, 1264, 1265, 1274, 1275, 1284, 1285, 1339, 1357, 1374, 1376, 1378, 1390], "p_min": [987, 990, 991, 994, 996, 1000, 1001, 1004, 1007, 1008, 1011, 1014, 1015, 1018, 1022, 1023, 1026, 1030, 1031, 1390], "points_dist": [987, 992, 994, 996, 1002, 1004, 1009, 1011, 1016, 1018, 1024, 1026, 1032], "return_nearest": [987, 992, 994, 996, 1002, 1004, 1009, 1011, 1016, 1018, 1024, 1026, 1032], "points_insid": [987, 993, 994, 996, 1003, 1004, 1010, 1011, 1017, 1018, 1025, 1026, 1033], "insid": [987, 993, 994, 996, 1003, 1004, 1010, 1011, 1017, 1018, 1019, 1025, 1026, 1033, 1034, 1035, 1055, 1374, 1389], "add_to_figur": [987, 988, 994, 996, 998, 1004, 1006, 1011, 1013, 1018, 1020, 1026, 1028, 1390], "show_boundari": [987, 988, 994, 996, 998, 1004, 1006, 1011, 1013, 1018, 1020, 1026, 1028], "invers": [987, 989, 994, 996, 999, 1004, 1011, 1018, 1021, 1026, 1029, 1215, 1253, 1400], "invert": [987, 989, 994, 996, 999, 1004, 1011, 1018, 1021, 1026, 1029, 1378], "fill_mod": [988, 998, 1004, 1006, 1011, 1013, 1018, 1020, 1028, 1390], "inside_slategrai": [988, 998, 1028], "pars_boundari": [988, 998, 1006, 1013, 1020, 1028], "pars_dist": [988, 998, 1006, 1013, 1020, 1028, 1390], "dist": [988, 992, 998, 1002, 1006, 1009, 1013, 1016, 1020, 1024, 1028, 1032, 1058, 1215, 1253], "dist_insid": [988, 998, 1006, 1013, 1020, 1028, 1390], "dist_outsid": [988, 998, 1006, 1013, 1020, 1028, 1390], "inside_": [988, 998, 1006, 1013, 1020, 1028], "outside_": [988, 998, 1006, 1013, 1020, 1028], "command": [988, 998, 1006, 1013, 1020, 1028, 1386], "invertedareageometri": [989, 999, 1021, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1378], "probe": [992, 993, 1002, 1003, 1009, 1010, 1016, 1017, 1024, 1025, 1032, 1033, 1082, 1084], "nearest": [992, 1002, 1009, 1016, 1024, 1032], "bundari": [992, 1002, 1009, 1016, 1024, 1032], "smallest": [992, 1002, 1009, 1016, 1024, 1032], "p_nearest": [992, 1002, 1009, 1016, 1024, 1032], "areaintersect": [994, 995, 1378], "intersect": [994, 1358, 1359, 1378], "areaunion": [996, 997, 998, 999, 1000, 1001, 1002, 1003, 1378], "union": [996, 1378], "cobnstructor": [1004, 1005], "closedpolygon": [1011, 1012, 1013, 1014, 1015, 1016, 1017, 1378, 1390], "polygon": [1011, 1012, 1339, 1378, 1390], "poli": 1011, "halfplan": [1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1378], "orthogon": 1018, "opt": [1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1364, 1384, 1390], "constraint": [1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1075, 1076, 1082, 1085, 1091, 1092, 1093, 1094, 1096, 1097, 1099, 1100, 1101, 1105, 1109, 1112, 1126, 1159, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1224, 1230, 1236, 1242, 1248, 1254, 1264, 1274, 1284, 1298, 1299, 1307, 1308, 1309, 1323, 1330, 1375, 1390], "areageometryconstraint": [1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1374], "farmconstraint": [1034, 1057, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1374], "constrain": [1034, 1055, 1374], "sel_turbin": [1034, 1035, 1055, 1057, 1058, 1064, 1065, 1073, 1075, 1076, 1081, 1082, 1084, 1120, 1126, 1140, 1149, 1151, 1157, 1159, 1298, 1307, 1323], "disc_insid": [1034, 1035], "ensur": [1034, 1035], "full": [1034, 1035, 1384, 1388, 1392], "problem": [1034, 1035, 1038, 1039, 1042, 1043, 1055, 1056, 1057, 1058, 1059, 1060, 1064, 1065, 1067, 1068, 1075, 1076, 1082, 1084, 1085, 1086, 1089, 1090, 1091, 1096, 1097, 1099, 1100, 1101, 1118, 1119, 1126, 1140, 1141, 1142, 1143, 1144, 1149, 1150, 1151, 1152, 1153, 1154, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1384, 1390, 1398], "n_compon": [1034, 1042, 1043, 1046, 1053, 1054, 1055, 1057, 1062, 1063, 1064, 1070, 1074, 1075, 1091, 1092, 1093, 1100, 1101, 1140, 1144, 1146, 1147, 1148, 1149, 1151, 1155, 1156, 1157, 1173, 1177, 1178, 1182, 1183, 1187, 1188, 1193, 1194, 1198, 1199, 1201, 1202, 1203, 1204, 1209, 1210, 1214, 1216, 1221, 1222, 1223, 1227, 1228, 1229, 1233, 1234, 1235, 1239, 1240, 1241, 1245, 1246, 1247, 1249, 1250, 1252], "compon": [1034, 1037, 1038, 1039, 1040, 1042, 1043, 1046, 1053, 1054, 1055, 1057, 1059, 1060, 1062, 1063, 1064, 1067, 1068, 1070, 1074, 1075, 1082, 1091, 1101, 1112, 1113, 1126, 1140, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1151, 1153, 1154, 1155, 1156, 1157, 1159, 1173, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1190, 1191, 1193, 1194, 1196, 1197, 1198, 1199, 1203, 1204, 1206, 1207, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1221, 1222, 1223, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1252, 1253, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1360, 1361, 1363, 1390], "vardeps_float": [1034, 1053, 1055, 1057, 1063, 1064, 1074, 1075, 1140, 1148, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250], "calc_individu": [1034, 1038, 1055, 1057, 1059, 1064, 1067, 1075, 1140, 1142, 1149, 1151, 1153, 1157, 1173, 1175, 1178, 1180, 1183, 1185, 1188, 1190, 1194, 1196, 1199, 1204, 1206, 1210, 1212, 1216, 1218, 1223, 1225, 1229, 1231, 1235, 1237, 1241, 1243, 1247, 1250], "vars_int": [1034, 1037, 1038, 1039, 1042, 1043, 1055, 1057, 1059, 1060, 1064, 1067, 1068, 1075, 1082, 1089, 1090, 1091, 1096, 1097, 1099, 1100, 1101, 1122, 1123, 1126, 1128, 1129, 1130, 1131, 1140, 1142, 1143, 1144, 1149, 1151, 1153, 1154, 1157, 1159, 1169, 1170, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1204, 1206, 1207, 1210, 1212, 1213, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1254, 1256, 1257, 1264, 1266, 1267, 1274, 1276, 1277, 1284, 1286, 1287, 1298, 1299, 1304, 1305, 1307, 1309, 1317, 1318, 1319, 1320, 1323, 1330, 1335, 1336], "vars_float": [1034, 1037, 1038, 1039, 1042, 1043, 1055, 1057, 1059, 1060, 1064, 1067, 1068, 1075, 1082, 1089, 1090, 1091, 1096, 1097, 1099, 1100, 1101, 1122, 1123, 1126, 1128, 1129, 1130, 1131, 1140, 1142, 1143, 1144, 1149, 1151, 1153, 1154, 1157, 1159, 1169, 1170, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1204, 1206, 1207, 1210, 1212, 1213, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1254, 1256, 1257, 1264, 1266, 1267, 1274, 1276, 1277, 1284, 1286, 1287, 1298, 1299, 1304, 1305, 1307, 1309, 1317, 1318, 1319, 1320, 1323, 1330, 1335, 1336], "problem_result": [1034, 1038, 1039, 1042, 1043, 1055, 1057, 1059, 1060, 1064, 1067, 1068, 1075, 1089, 1090, 1099, 1100, 1140, 1142, 1143, 1144, 1149, 1151, 1153, 1154, 1157, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1204, 1206, 1207, 1210, 1212, 1213, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1256, 1257, 1266, 1267, 1276, 1277, 1286, 1287, 1299, 1309, 1330, 1390], "calc_popul": [1034, 1039, 1055, 1057, 1060, 1064, 1068, 1075, 1140, 1143, 1149, 1151, 1154, 1157, 1173, 1176, 1178, 1181, 1183, 1186, 1188, 1191, 1194, 1197, 1199, 1204, 1207, 1210, 1213, 1216, 1219, 1223, 1226, 1229, 1232, 1235, 1238, 1241, 1244, 1247, 1250], "n_sel_turbin": [1034, 1055, 1057, 1064, 1071, 1075, 1079, 1082, 1114, 1126, 1128, 1129, 1140, 1149, 1151, 1157, 1159, 1169, 1170, 1298, 1304, 1305, 1307, 1317, 1318, 1323, 1335, 1336], "add_to_layout_figur": [1034, 1055, 1057, 1064, 1066, 1075, 1077, 1082, 1087, 1126, 1140, 1149, 1151, 1157, 1159, 1298, 1307, 1323], "get_bound": [1034, 1055, 1057, 1064, 1173, 1178, 1183, 1188, 1194, 1199, 1203, 1204, 1210], "check_individu": [1034, 1055, 1057, 1064, 1173, 1178, 1183, 1188, 1194, 1199, 1201, 1204, 1210], "constraint_valu": [1034, 1055, 1057, 1064, 1082, 1092, 1093, 1126, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1201, 1202, 1204, 1210, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "fullfil": [1034, 1055, 1057, 1064, 1082, 1092, 1093, 1126, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1201, 1202, 1204, 1210, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "check_popul": [1034, 1055, 1057, 1064, 1173, 1178, 1183, 1188, 1194, 1199, 1202, 1204, 1210], "component_nam": [1034, 1040, 1055, 1057, 1064, 1075, 1140, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250], "var_names_int": [1034, 1052, 1055, 1057, 1064, 1075, 1082, 1125, 1126, 1140, 1149, 1151, 1157, 1159, 1172, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1273, 1274, 1284, 1297, 1298, 1307, 1322, 1323], "n_vars_int": [1034, 1037, 1038, 1039, 1042, 1043, 1048, 1054, 1055, 1057, 1059, 1060, 1064, 1067, 1068, 1075, 1082, 1089, 1090, 1091, 1096, 1097, 1099, 1100, 1101, 1103, 1107, 1111, 1116, 1122, 1123, 1126, 1128, 1129, 1130, 1131, 1140, 1142, 1143, 1144, 1149, 1151, 1153, 1154, 1157, 1159, 1163, 1166, 1168, 1169, 1170, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1204, 1206, 1207, 1210, 1212, 1213, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1251, 1254, 1256, 1257, 1264, 1266, 1267, 1269, 1271, 1272, 1274, 1276, 1277, 1284, 1286, 1287, 1290, 1293, 1295, 1298, 1299, 1304, 1305, 1307, 1309, 1311, 1314, 1316, 1317, 1318, 1319, 1320, 1323, 1330, 1335, 1336, 1390], "var_names_float": [1034, 1051, 1055, 1057, 1064, 1075, 1082, 1124, 1126, 1140, 1149, 1151, 1157, 1159, 1171, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1263, 1264, 1274, 1283, 1284, 1296, 1298, 1306, 1307, 1321, 1323, 1337], "n_vars_float": [1034, 1037, 1038, 1039, 1042, 1043, 1047, 1053, 1055, 1057, 1059, 1060, 1063, 1064, 1067, 1068, 1074, 1075, 1082, 1089, 1090, 1091, 1096, 1097, 1099, 1100, 1101, 1102, 1106, 1110, 1115, 1122, 1123, 1126, 1128, 1129, 1130, 1131, 1140, 1142, 1143, 1144, 1148, 1149, 1151, 1153, 1154, 1157, 1159, 1162, 1165, 1167, 1169, 1170, 1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1199, 1204, 1206, 1207, 1210, 1212, 1213, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247, 1250, 1251, 1254, 1256, 1257, 1259, 1261, 1262, 1264, 1266, 1267, 1274, 1276, 1277, 1279, 1281, 1282, 1284, 1286, 1287, 1289, 1292, 1294, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1307, 1309, 1310, 1313, 1315, 1317, 1318, 1319, 1320, 1323, 1330, 1331, 1333, 1334, 1335, 1336, 1390], "vardeps_int": [1034, 1054, 1055, 1057, 1064, 1075, 1140, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250], "rename_vars_int": [1034, 1050, 1055, 1057, 1064, 1075, 1140, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250], "renam": [1034, 1049, 1050, 1055, 1057, 1064, 1075, 1140, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1384], "rename_vars_float": [1034, 1049, 1055, 1057, 1064, 1075, 1140, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250], "finalize_individu": [1034, 1042, 1055, 1057, 1064, 1075, 1082, 1099, 1126, 1140, 1144, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1299, 1307, 1309, 1323, 1330], "champion": [1034, 1042, 1055, 1057, 1064, 1075, 1082, 1099, 1126, 1140, 1144, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1299, 1307, 1309, 1323, 1330], "finalize_popul": [1034, 1043, 1055, 1057, 1064, 1075, 1082, 1100, 1126, 1140, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "ana_deriv": [1034, 1037, 1055, 1057, 1064, 1075, 1140, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250], "analyt": [1034, 1037, 1055, 1057, 1064, 1075, 1091, 1140, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250], "possibl": [1034, 1037, 1055, 1057, 1064, 1075, 1140, 1149, 1151, 1157, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1215, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1253, 1395], "info": [1034, 1036, 1055, 1057, 1064, 1075, 1082, 1126, 1140, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "finish": [1034, 1045, 1055, 1057, 1064, 1075, 1082, 1126, 1140, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1390], "farmoptproblem": [1035, 1056, 1058, 1065, 1076, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1141, 1149, 1150, 1152, 1157, 1158, 1174, 1179, 1184, 1189, 1205, 1211, 1217, 1224, 1230, 1236, 1242, 1248, 1374, 1384], "optim": [1035, 1042, 1056, 1058, 1064, 1065, 1076, 1082, 1084, 1088, 1099, 1122, 1123, 1126, 1128, 1129, 1130, 1131, 1141, 1144, 1149, 1150, 1152, 1157, 1158, 1159, 1169, 1170, 1174, 1179, 1184, 1189, 1199, 1205, 1211, 1215, 1217, 1224, 1230, 1236, 1242, 1248, 1253, 1254, 1264, 1274, 1284, 1298, 1299, 1304, 1305, 1307, 1309, 1317, 1318, 1319, 1320, 1323, 1330, 1335, 1336, 1364, 1374, 1375, 1376, 1382, 1383, 1384, 1385], "iwopi": [1035, 1058, 1065, 1076, 1082, 1084, 1085, 1086, 1091, 1101, 1199, 1250, 1254, 1264, 1274, 1284, 1374, 1376, 1385, 1390], "cannot": 1037, "differenti": [1037, 1091, 1101], "n_sel_compon": [1037, 1038, 1039, 1059, 1060, 1067, 1068, 1142, 1143, 1153, 1154, 1175, 1176, 1180, 1181, 1185, 1186, 1190, 1191, 1196, 1197, 1206, 1207, 1212, 1213, 1218, 1219, 1225, 1226, 1231, 1232, 1237, 1238, 1243, 1244], "n_pop": [1039, 1043, 1060, 1068, 1090, 1093, 1097, 1100, 1123, 1129, 1131, 1132, 1133, 1143, 1154, 1170, 1176, 1181, 1186, 1191, 1197, 1202, 1207, 1213, 1219, 1226, 1232, 1238, 1244, 1257, 1267, 1277, 1287, 1305, 1318, 1320, 1336, 1374], "old": [1049, 1050], "dep": [1053, 1054, 1063, 1074, 1140, 1141, 1148, 1150, 1158], "farmboundaryconstraint": [1055, 1056, 1374, 1390], "mindistconstraint": [1057, 1058, 1059, 1060, 1061, 1062, 1063, 1374, 1390], "keep": [1057, 1374, 1386], "least": [1057, 1215, 1253, 1374], "min_dist": [1057, 1058, 1204, 1205, 1216, 1217, 1254, 1255, 1264, 1265, 1274, 1275, 1284, 1285, 1307, 1308, 1390], "min_dist_unit": [1057, 1058, 1390], "constaint": [1057, 1061, 1204, 1208], "geom_layout": [1064, 1075, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1374], "farmobject": [1075, 1076, 1077, 1078, 1079, 1080, 1081, 1140, 1141, 1150, 1151, 1152, 1158, 1374], "calc_farm_arg": [1082, 1084], "all_turbin": [1082, 1088, 1126, 1159, 1298, 1307, 1323], "tvar": [1082, 1121, 1126, 1159, 1298, 1307, 1323], "turbine_i": [1082, 1117, 1121, 1126, 1159, 1298, 1307, 1323], "parse_tvar": [1082, 1117, 1126, 1159, 1298, 1307, 1323], "tvr": [1082, 1117, 1126, 1159, 1298, 1307, 1323], "update_problem_individu": [1082, 1122, 1126, 1130, 1159, 1298, 1307, 1319, 1323], "update_problem_popul": [1082, 1123, 1126, 1131, 1159, 1298, 1307, 1320, 1323], "apply_individu": [1082, 1089, 1126, 1159, 1254, 1256, 1264, 1266, 1274, 1276, 1284, 1286, 1298, 1307, 1323], "apply_popul": [1082, 1090, 1126, 1159, 1254, 1257, 1264, 1267, 1274, 1277, 1284, 1287, 1298, 1307, 1323], "whole": [1082, 1090, 1126, 1159, 1254, 1257, 1264, 1267, 1274, 1277, 1284, 1287, 1298, 1307, 1323, 1384], "int_inf": [1082, 1083, 1107, 1111, 1126, 1159, 1166, 1168, 1254, 1264, 1274, 1284, 1293, 1295, 1298, 1307, 1314, 1316, 1323], "999999": [1082, 1083, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "initial_values_int": [1082, 1103, 1126, 1159, 1163, 1254, 1264, 1269, 1274, 1284, 1290, 1298, 1307, 1311, 1323], "min_values_int": [1082, 1111, 1126, 1159, 1168, 1254, 1264, 1272, 1274, 1284, 1295, 1298, 1307, 1316, 1323], "max_values_int": [1082, 1107, 1126, 1159, 1166, 1254, 1264, 1271, 1274, 1284, 1293, 1298, 1307, 1314, 1323], "initial_values_float": [1082, 1102, 1126, 1159, 1162, 1254, 1259, 1264, 1274, 1279, 1284, 1289, 1298, 1300, 1307, 1310, 1323, 1331], "min_values_float": [1082, 1110, 1126, 1159, 1167, 1254, 1262, 1264, 1274, 1282, 1284, 1294, 1298, 1303, 1307, 1315, 1323, 1334], "max_values_float": [1082, 1106, 1126, 1159, 1165, 1254, 1261, 1264, 1274, 1281, 1284, 1292, 1298, 1302, 1307, 1313, 1323, 1333], "add_object": [1082, 1086, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1390], "varmap_int": [1082, 1085, 1086, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "varmap_float": [1082, 1085, 1086, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "add_constraint": [1082, 1085, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1390], "min_values_constraint": [1082, 1109, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "max_values_constraint": [1082, 1105, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "constraints_tol": [1082, 1094, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "toler": [1082, 1094, 1126, 1159, 1199, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "n_object": [1082, 1096, 1097, 1099, 1108, 1113, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1299, 1307, 1309, 1323, 1330, 1390], "n_constraint": [1082, 1094, 1096, 1097, 1099, 1100, 1105, 1109, 1112, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1299, 1307, 1309, 1323, 1330, 1390], "calc_gradi": [1082, 1091, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "ivar": [1082, 1091, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "gradient": [1082, 1091, 1101, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "get_gradi": [1082, 1091, 1101, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "obtain": [1082, 1101, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1388, 1392, 1399], "link": [1082, 1101, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1385, 1390, 1398], "maximize_obj": [1082, 1108, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "evaluate_individu": [1082, 1096, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "ret_prob_r": [1082, 1096, 1097, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "evaluate_popul": [1082, 1097, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "check_constraints_individu": [1082, 1092, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "check_constraints_popul": [1082, 1093, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "prob_res_einsum_individu": [1082, 1118, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "prob_res_list": [1082, 1118, 1119, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "coeff": [1082, 1118, 1119, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "prob_res_einsum_popul": [1082, 1119, 1126, 1159, 1254, 1264, 1274, 1284, 1298, 1307, 1323], "fvar": 1091, "vr": 1091, "overload": [1091, 1367, 1368, 1384], "optfunctionlist": [1091, 1101], "n_vr": 1091, "ctol": 1094, "addition": [1096, 1097], "con": [1096, 1097, 1099, 1100, 1299, 1309, 1330], "prob_r": [1096, 1097, 1118, 1119], "were": [1101, 1384, 1393, 1399, 1400], "previous": 1101, "cf": [1101, 1395], "problemdefaultfunc": 1101, "cma": 1105, "inf": [1106, 1110, 1165, 1167, 1203, 1261, 1262, 1281, 1282, 1292, 1294, 1302, 1303, 1313, 1315, 1333, 1334], "unbound": [1106, 1107, 1110, 1111, 1165, 1166, 1167, 1168, 1261, 1262, 1281, 1282, 1292, 1293, 1294, 1295, 1302, 1303, 1313, 1314, 1315, 1316, 1333, 1334], "cmi": 1109, "n_con": 1112, "n_obj": 1113, "farmvarsproblem": [1126, 1127, 1128, 1129, 1130, 1131, 1159, 1160, 1298, 1307, 1308, 1323, 1329, 1374, 1375, 1384], "pre_rotor_var": [1126, 1127], "post_rotor_var": [1126, 1127], "opt2farm_vars_individu": [1126, 1128, 1159, 1169, 1298, 1304, 1307, 1317, 1323, 1335], "opt2farm_vars_popul": [1126, 1129, 1159, 1170, 1298, 1305, 1307, 1318, 1323, 1336], "super": [1127, 1164, 1301, 1312, 1332], "farm_var": [1128, 1129, 1169, 1170, 1304, 1305, 1317, 1318, 1335, 1336], "popstat": [1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1374], "artifici": [1132, 1374], "farmvarobject": [1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1157, 1374], "contract_st": [1140, 1141, 1150, 1158], "contract_turbin": [1141, 1150, 1158], "maxfarmpow": [1149, 1150, 1374, 1390], "maximize_pow": [1149, 1150, 1390], "maxnturbin": [1151, 1152, 1153, 1154, 1155, 1156, 1374], "turrbin": [1151, 1374], "check_valid": [1151, 1152], "count": [1151, 1152, 1384], "max_n_turbin": [1151, 1152], "minimalmaxti": [1157, 1158, 1374], "minimize_ti": [1157, 1158], "optfarmvar": [1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1375], "typ": [1159, 1161], "model_kei": 1161, "geometr": [1173, 1174, 1178, 1179, 1183, 1184, 1188, 1189, 1194, 1204, 1205, 1210, 1211, 1216, 1217, 1223, 1224, 1229, 1230, 1235, 1236, 1241, 1242, 1247, 1248, 1254, 1264, 1375, 1376, 1384], "cmpnt": [1173, 1175, 1176, 1178, 1180, 1181, 1183, 1185, 1186, 1188, 1190, 1191, 1194, 1196, 1197, 1204, 1206, 1207, 1210, 1212, 1213, 1216, 1218, 1219, 1223, 1225, 1226, 1229, 1231, 1232, 1235, 1237, 1238, 1241, 1243, 1244, 1247], "additio": [1174, 1179, 1184, 1189, 1205, 1211], "cfixn": [1178, 1179, 1180, 1181, 1182, 1376], "cmaxn": [1183, 1184, 1185, 1186, 1187, 1376], "cmindens": [1188, 1189, 1190, 1191, 1192, 1193, 1376], "min_valu": [1188, 1189], "dfactor": [1188, 1189, 1216, 1217], "min_dens": [1188, 1189], "cminn": [1194, 1195, 1196, 1197, 1198, 1376], "optfunct": [1199, 1250], "tol": [1199, 1200], "violat": 1199, "1e": [1199, 1200, 1390], "mindist": [1204, 1205, 1206, 1207, 1208, 1209, 1376], "cdist": [1215, 1253], "xa": [1215, 1253], "xb": [1215, 1253], "metric": [1215, 1253], "euclidean": [1215, 1253], "m_a": [1215, 1253], "observ": [1215, 1253], "m_b": [1215, 1253], "callabl": [1215, 1253], "braycurti": [1215, 1253], "canberra": [1215, 1253], "chebyshev": [1215, 1253], "cityblock": [1215, 1253], "cosin": [1215, 1253], "dice": [1215, 1253], "ham": [1215, 1253], "jaccard": [1215, 1253], "jensenshannon": [1215, 1253], "kulczynski1": [1215, 1253], "mahalanobi": [1215, 1253], "match": [1215, 1253], "minkowski": [1215, 1253], "rogerstanimoto": [1215, 1253], "russellrao": [1215, 1253], "seuclidean": [1215, 1253], "sokalmichen": [1215, 1253], "sokalsneath": [1215, 1253], "sqeuclidean": [1215, 1253], "yule": [1215, 1253], "norm": [1215, 1253], "unweight": [1215, 1253], "varianc": [1215, 1253], "vstack": [1215, 1253], "ddof": [1215, 1253], "vi": [1215, 1253], "covari": [1215, 1253], "matrix": [1215, 1253], "inv": [1215, 1253], "cov": [1215, 1253], "u": [1215, 1253, 1360, 1361, 1390], "ij": [1215, 1253], "except": [1215, 1253], "thrown": [1215, 1253], "arrang": [1215, 1253], "_p": [1215, 1253], "quasi": [1215, 1253], "citi": [1215, 1253], "block": [1215, 1253, 1390], "manhattan": [1215, 1253], "u_i": [1215, 1253], "v_i": [1215, 1253], "x_i": [1215, 1253], "squar": [1215, 1253], "_2": [1215, 1253], "frac": [1215, 1253], "cdot": [1215, 1253], "its": [1215, 1253, 1323, 1375, 1385, 1393, 1396], "dot": [1215, 1253], "proport": [1215, 1253], "those": [1215, 1253, 1393], "disagre": [1215, 1253], "To": [1215, 1253], "save": [1215, 1253, 1398], "shannon": [1215, 1253], "probabl": [1215, 1253], "q": [1215, 1253], "pointwis": [1215, 1253], "kullback": [1215, 1253], "leibler": [1215, 1253], "diverg": [1215, 1253], "precis": [1215, 1253], "max_i": [1215, 1253], "sum_i": [1215, 1253], "brai": [1215, 1253], "curti": [1215, 1253], "synonym": [1215, 1253], "kulczynski": [1215, 1253], "roger": [1215, 1253], "tanimoto": [1215, 1253], "russel": [1215, 1253], "rao": [1215, 1253], "sokal": [1215, 1253], "michen": [1215, 1253], "sneath": [1215, 1253], "suppli": [1215, 1253], "ariti": [1215, 1253], "could": [1215, 1253, 1384, 1393, 1395, 1396, 1399], "dm": [1215, 1253], "lambda": [1215, 1253], "librari": [1215, 1253, 1390, 1396], "would": [1215, 1253], "ineffici": [1215, 1253], "syntax": [1215, 1253], "find": [1215, 1253, 1384], "four": [1215, 1253, 1389], "35": [1215, 1253, 1387, 1388, 1390, 1397], "0456": [1215, 1253], "85": [1215, 1253, 1390, 1397], "2672": [1215, 1253], "1174": [1215, 1253], "89": [1215, 1253, 1390, 1394, 1397], "9711": [1215, 1253], "9728": [1215, 1253], "9422": [1215, 1253], "36": [1215, 1253, 1387, 1388, 1390, 1399], "1667": [1215, 1253], "86": [1215, 1253, 1382, 1390, 1392, 1398], "7833": [1215, 1253], "7044": [1215, 1253], "6172": [1215, 1253], "8856": [1215, 1253], "0893": [1215, 1253], "3561": [1215, 1253], "8477": [1215, 1253], "corner": [1215, 1253, 1389], "cube": [1215, 1253], "maxdens": [1216, 1217, 1218, 1219, 1220, 1221, 1222, 1376], "max_dens": [1216, 1217], "maxgridspac": [1223, 1224, 1225, 1226, 1227, 1228, 1376], "max_dxdi": [1223, 1224], "memimadist": [1229, 1230, 1231, 1232, 1233, 1234, 1376], "c3": [1229, 1230], "mimamean": [1229, 1230], "diff": 1230, "ofixn": [1235, 1236, 1237, 1238, 1239, 1240, 1376], "omaxn": [1241, 1242, 1243, 1244, 1245, 1246, 1247, 1376], "maxn": [1241, 1242], "ominn": [1247, 1248, 1249, 1376], "vnames_int": 1251, "vnames_float": 1251, "cname": 1251, "geomlayout": [1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1376, 1384], "involv": [1254, 1264, 1274, 1284, 1384], "calc_valid": [1254, 1255], "get_fig": [1254, 1258, 1264, 1268, 1274, 1278, 1284, 1288], "plotli": [1254, 1258, 1264, 1268, 1274, 1278, 1284, 1288, 1355, 1378, 1384], "true_circl": [1258, 1268, 1278, 1288], "ndarari": [1258, 1268, 1278, 1288], "draw": [1258, 1268, 1278, 1288], "geomlayoutgrid": [1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1376, 1384], "background": [1264, 1265, 1376, 1384, 1389, 1390, 1393], "grid_spac": [1264, 1265], "geomreggrid": [1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1376, 1384], "max_dist": [1274, 1275, 1284, 1285, 1308], "n_grid": [1284, 1285, 1307, 1308], "n_max": [1284, 1285], "n_row_max": [1284, 1285, 1308], "farmlayoutoptproblem": [1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1375, 1390], "reggridslayoutoptproblem": [1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1375], "sever": [1307, 1375, 1384], "mix": 1307, "min_spac": [1307, 1323, 1329], "max_n_row": 1307, "regularlayoutoptproblem": [1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1375, 1384], "spacing_x": [1323, 1327], "spacing_i": [1323, 1328], "offset_x": [1323, 1325], "offset_i": [1323, 1326], "read_shp": [1338, 1339, 1378, 1384], "fname": [1338, 1339, 1378], "shp": [1338, 1339, 1356, 1378], "geopanda": [1338, 1339, 1356], "geodatafram": 1338, "wsg84": 1338, "read_shp_polygon": [1339, 1357, 1378, 1384], "name_col": 1339, "geom_col": 1339, "to_utm": 1339, "ret_utm_zon": [1339, 1357, 1378], "extract": 1339, "utm": [1339, 1357], "zone": [1339, 1357, 1387], "letter": [1339, 1357], "32u": [1339, 1357], "point_dict_exterior": 1339, "point_dict_interior": 1339, "utm_zone_str": [1339, 1357], "utem": [1339, 1357], "daskrunn": [1340, 1341, 1342, 1343, 1344, 1345, 1346, 1378, 1384, 1387, 1389, 1390, 1397, 1398, 1399], "schedul": [1340, 1341, 1384, 1390, 1398], "progress_bar": [1340, 1341, 1384], "show": [1340, 1341, 1384, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1398, 1399, 1400], "progress": [1340, 1341, 1398, 1399], "cluster_arg": [1340, 1341], "explicit": [1340, 1341, 1384, 1389], "cluster": [1340, 1341, 1384, 1385, 1390, 1398, 1399], "setup": [1340, 1341, 1383, 1384, 1385, 1387, 1390, 1392, 1394, 1395, 1396, 1399, 1400], "client_arg": [1340, 1341], "client": [1340, 1341], "n_worker": [1340, 1341], "is_distribut": [1340, 1344], "threads_per_work": 1341, "process": [1341, 1393], "worker": [1341, 1398], "thread": [1341, 1398], "defaultrunn": [1347, 1348, 1378, 1384], "show_plotly_fig": [1355, 1378, 1384], "displai": [1355, 1378, 1398, 1399], "window": [1355, 1378, 1384], "stackoverflow": 1355, "question": [1355, 1390], "53570384": 1355, "how": [1355, 1383, 1384, 1385, 1387, 1394, 1398, 1399], "standalon": 1355, "shp2csv": [1356, 1378, 1384], "ifil": [1356, 1378], "ofil": [1356, 1378], "in_kwarg": [1356, 1378], "out_kwarg": [1356, 1378], "inam": 1356, "onam": 1356, "to_csv": 1356, "shp2geom2d": [1357, 1378], "shapefil": [1357, 1378], "geom": 1357, "tool": [1357, 1398], "two_circl": [1358, 1359], "r1": [1358, 1359, 1378], "r2": [1358, 1359, 1378], "sure": [1358, 1386, 1390, 1398], "These": [1358, 1373, 1389, 1390, 1392, 1397, 1400], "diego": 1358, "assencio": 1358, "8d6ca3d82151bad815f78addf9b5c1c6": 1358, "calc_area": [1359, 1378], "broadcast": [1359, 1361, 1362], "anoth": [1359, 1399, 1400], "uv2wd": [1360, 1378], "uv": [1360, 1361, 1378], "wd2uv": [1361, 1378], "against": [1361, 1362], "wd2wdvec": [1362, 1378], "wdvec": [1362, 1363, 1378], "wdvec2wd": [1363, 1378], "shortcut": 1364, "concret": [1364, 1373, 1381], "manag": [1365, 1383, 1384, 1385, 1393], "sweep": [1365, 1366], "until": [1365, 1367, 1384], "reach": [1365, 1367, 1371, 1384, 1387, 1397], "uns": 1365, "access": 1371, "atmospher": [1372, 1373, 1385, 1388], "interfac": [1372, 1384, 1390], "propag": [1373, 1384, 1393, 1397], "due": [1373, 1384, 1395], "ie": 1373, "machin": 1373, "net": 1373, "intern": [1374, 1385], "extern": 1374, "classif": 1381, "cite": 1382, "joss": 1382, "softwar": [1382, 1385, 1388], "bibtex": 1382, "schmidt2023": 1382, "author": [1382, 1388], "jona": [1382, 1387, 1389, 1397], "schmidt": 1382, "luka": 1382, "vollmer": 1382, "martin": 1382, "d\u00f6renk\u00e4mper": 1382, "bernhard": 1382, "stoevesandt": 1382, "21105": 1382, "05464": 1382, "url": 1382, "year": 1382, "2023": [1382, 1388, 1397], "publish": [1382, 1384], "journal": 1382, "volum": 1382, "page": 1382, "5464": 1382, "jupyt": 1383, "notebook": [1383, 1384, 1393], "folder": [1383, 1384], "repositori": [1383, 1385], "overview": [1383, 1384, 1385, 1396], "releas": [1384, 1386], "readi": [1384, 1391, 1396, 1397, 1400], "transfer": [1384, 1400], "fraunhof": [1384, 1385, 1390], "iw": [1384, 1385, 1388, 1390], "hous": 1384, "predecessor": [1384, 1385], "yet": 1384, "enjoi": 1384, "await": 1384, "comment": 1384, "issu": [1384, 1385], "thank": 1384, "changelog": 1384, "fraunhoferiw": [1384, 1385, 1386], "commit": [1384, 1385], "style": 1384, "black": 1384, "small": [1384, 1388], "discov": 1384, "flake8": 1384, "now": [1384, 1387, 1389, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1399, 1400], "pytest": 1384, "unittest": 1384, "workflow": 1384, "docu": 1384, "io": 1384, "doc": [1384, 1398], "html": [1384, 1397], "miss": 1384, "wind_rot": [1384, 1389], "manifest": 1384, "orst": 1384, "pctsinglefil": 1384, "iecti2019": 1384, "iecti2005": 1384, "concept": [1384, 1397], "instal": [1384, 1385], "pip": [1384, 1385], "capabl": [1384, 1385], "As": [1384, 1386, 1387, 1400], "pcttwofil": 1384, "windroseoutput": 1384, "histogram": 1384, "ambientwindroseoutput": 1384, "improv": 1384, "browser": 1384, "featur": [1384, 1395], "wind_ros": 1384, "layout_single_st": 1384, "layout_wind_ros": 1384, "layout_opt": [1384, 1390], "ipynb": 1384, "demonstr": [1384, 1388, 1390, 1394, 1396, 1399, 1400], "wrf": [1384, 1392, 1393], "ambientroseplotoutput": 1384, "multi_height": 1384, "bug": 1384, "veer": 1384, "power_mask": 1384, "solv": [1384, 1390], "cubic": 1384, "forgotten": 1384, "api": [1384, 1385, 1398], "hotfix": 1384, "wsrho2pcttwofil": 1384, "sector_manag": 1384, "sector_man": 1384, "col_model": 1384, "offset": 1384, "compare_wak": 1384, "compar": [1384, 1394, 1395], "yawed_wak": 1384, "simplifi": 1384, "accept": 1384, "replac": [1384, 1386], "intuit": 1384, "turboparkix": 1384, "summar": 1384, "bracket": 1384, "eq": 1384, "wrong": 1384, "layout_regular_grid": 1384, "geom_reggrid": 1384, "affect": [1384, 1394], "geopandas_help": 1384, "interior": 1384, "11": [1384, 1386, 1387, 1388, 1390, 1394, 1397, 1398, 1400], "cleaner": 1384, "treatment": 1384, "slimmer": 1384, "distribut": [1384, 1388, 1390, 1398], "move": [1384, 1390], "irrespect": 1384, "restart": 1384, "complet": [1384, 1387, 1388, 1391, 1392, 1395, 1397, 1398, 1399], "incomplet": 1384, "slurm": 1384, "queue": 1384, "system": [1384, 1386, 1388, 1393, 1396, 1398], "timeseries_slurm": 1384, "hpc": 1384, "apigen": 1384, "through": [1384, 1385], "outer": 1384, "consist": [1384, 1388, 1394, 1395, 1396, 1399], "timeseries_100": [1384, 1397], "short": [1384, 1388], "timestep": 1384, "vari": [1384, 1388, 1392], "chosen": 1384, "slow": 1384, "down": [1384, 1398], "prevent": 1384, "shown": [1384, 1388], "exclud": 1384, "signal": [1384, 1397], "consider": 1384, "contour": 1384, "autom": 1384, "pypi": 1384, "drop": 1384, "netcdf4": 1384, "keep_model": 1384, "mostli": 1384, "address": [1384, 1398], "explicitli": 1384, "flow_plots_2d": 1384, "classic": 1384, "induction_rhb": 1384, "modular": 1385, "steer": 1385, "construct": 1385, "analysi": 1385, "studi": 1385, "comparison": 1385, "complex": [1385, 1398], "chain": 1385, "perform": 1385, "ow": 1385, "remot": 1385, "enabl": 1385, "well": [1385, 1388, 1390, 1400], "tracker": 1385, "report": 1385, "mit": 1385, "citat": 1385, "conda": 1385, "histori": 1385, "fork": [1385, 1386], "branch": [1385, 1386], "git": [1385, 1386, 1387, 1389, 1397], "checkout": 1385, "new_branch": 1385, "your": [1385, 1386, 1396], "am": [1385, 1397], "awesom": 1385, "messag": 1385, "push": 1385, "pull": 1385, "request": 1385, "develop": 1385, "flapfoam": 1385, "public": [1385, 1400], "publicli": 1385, "fund": 1385, "research": 1385, "project": 1385, "particular": [1385, 1398], "feder": 1385, "ministri": 1385, "econom": 1385, "affair": 1385, "climat": 1385, "action": [1385, 1393], "bmwk": 1385, "roject": 1385, "smart": 1385, "grant": 1385, "0325851b": 1385, "0325397b": 1385, "03ee3008a": 1385, "educ": 1385, "bmbf": 1385, "framework": 1385, "h2digit": 1385, "03sf0635": 1385, "furthermor": [1385, 1394], "horizon": 1385, "europ": 1385, "energi": [1385, 1392, 1393], "101084205": 1385, "venv": 1386, "conveni": [1386, 1396], "prefer": 1386, "python3": 1386, "Then": 1386, "activ": 1386, "leav": 1386, "deactiv": 1386, "altern": 1386, "decid": 1386, "dev": 1386, "egg": 1386, "clone": 1386, "cd": 1386, "whenev": 1386, "concern": 1386, "recommend": [1386, 1389], "strongli": 1386, "libmamba": 1386, "solver": [1386, 1390], "forg": 1386, "config": 1386, "channel": 1386, "necessari": [1386, 1397], "while": 1386, "again": [1386, 1390, 1394], "build": 1386, "inlin": [1387, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "20": [1387, 1388, 1389, 1390, 1391, 1392, 1394, 1395, 1398, 1399], "800": [1387, 1390, 1396, 1397], "400": [1387, 1390], "dtu10mw": [1387, 1388, 1391, 1397], "04": [1387, 1388, 1390, 1391, 1397], "bastankhah_linear_lim_k004": [1387, 1391], "4000": [1387, 1389, 1390, 1395, 1399], "notic": [1387, 1390, 1394, 1395, 1397, 1398, 1400], "among": 1387, "39": [1387, 1388, 1389, 1390, 1396, 1397, 1398], "basic_ctrl_pr": [1387, 1397], "power_ct_curv": [1387, 1397], "home": [1387, 1389, 1397], "10mw": [1387, 1397], "d178d3": [1387, 1397], "h119": [1387, 1397], "basic_ctrl_postr": [1387, 1397], "linear_lim": [1387, 1391], "rotorpoints1": 1387, "partialaxiwake10": [1387, 1397], "48": [1387, 1390], "partialwk": [1387, 1397], "sp": [1387, 1391, 1397], "setxyhd_t2f": [1387, 1397], "calc_yaw_centrerotor1": [1387, 1397], "urelax_ct": [1387, 1397], "iterative_calc": [1387, 1397], "oder": [1387, 1397], "00": [1387, 1388, 1390, 1392, 1397, 1398], "02": [1387, 1388, 1390, 1391, 1397], "03": [1387, 1388, 1390, 1396, 1397, 1398], "101": 1387, "91": [1387, 1390, 1399], "lt": [1387, 1388, 1390, 1396, 1397], "gt": [1387, 1388, 1390, 1396, 1397], "u7": [1387, 1397], "float64": [1387, 1390, 1396, 1397], "chunksiz": [1387, 1397], "205": [1387, 1397, 1398], "92": [1387, 1388, 1390], "103": [1387, 1397, 1398, 1399], "212": [1387, 1390], "09": [1387, 1388, 1397, 1398], "255e": 1387, "lim": [1387, 1397], "000e": [1387, 1397], "fail": [1387, 1397], "ok": [1387, 1397], "379e": 1387, "43": [1387, 1390], "206": [1387, 1397], "31": [1387, 1388, 1389, 1390, 1392, 1397, 1398], "314e": 1387, "330e": 1387, "59": [1387, 1390], "208": [1387, 1389, 1390, 1397], "28": [1387, 1390], "071e": 1387, "206e": 1387, "102": [1387, 1394, 1397], "77": [1387, 1390, 1397], "284": 1387, "193e": 1387, "979e": 1387, "69": [1387, 1390, 1397], "216": [1387, 1388, 1390, 1399], "08": [1387, 1397], "805e": 1387, "997e": 1387, "211": [1387, 1390], "138e": 1387, "565e": 1387, "63": [1387, 1390, 1398], "204": [1387, 1397], "65": [1387, 1388, 1390, 1398, 1399], "236e": 1387, "270e": 1387, "209": [1387, 1388, 1390], "90": [1387, 1388, 1390, 1392], "168e": 1387, "358e": 1387, "12": [1387, 1388, 1390, 1394, 1396, 1397, 1399, 1400], "126e": 1387, "291e": 1387, "49": [1387, 1388, 1389, 1390], "314": [1387, 1388], "61": [1387, 1390], "203e": 1387, "202e": 1387, "18": [1387, 1388, 1390, 1394, 1397], "220": [1387, 1388], "672e": 1387, "290e": 1387, "53": [1387, 1390, 1397], "713e": 1387, "286e": 1387, "13": [1387, 1388, 1390, 1392, 1394, 1397], "51": [1387, 1388, 1390], "534e": 1387, "714e": 1387, "14": [1387, 1388, 1390, 1394, 1398], "356e": 1387, "926e": 1387, "814": 1387, "731e": 1387, "4e": [1387, 1396], "65e": 1387, "05e": 1387, "40": [1387, 1390, 1397], "45": [1387, 1390, 1398], "46": [1387, 1388, 1390], "44": [1387, 1389, 1390], "47": [1387, 1389, 1390, 1397], "u3": 1387, "t0": [1387, 1388, 1390, 1394, 1395, 1396, 1398, 1400], "t1": [1387, 1388, 1390, 1394, 1395, 1396, 1398, 1400], "t2": [1387, 1388, 1390, 1394, 1396, 1398], "t3": [1387, 1388, 1390, 1394, 1396, 1398], "t44": 1387, "t45": 1387, "t46": 1387, "t47": 1387, "visual": [1387, 1390, 1392, 1394, 1395, 1396, 1397, 1398], "south": [1387, 1395], "westerli": [1387, 1395], "o": [1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400], "300": [1387, 1388, 1390, 1394, 1400], "front": 1387, "clearli": [1387, 1400], "visibl": 1387, "merg": 1387, "2000": [1387, 1390, 1395], "straight": 1387, "linspac": [1387, 1396], "xlist": 1387, "set_ylabel": [1387, 1396], "set_xlabel": [1387, 1396], "often": [1388, 1393], "terminologi": [1388, 1393, 1396], "three": [1388, 1400], "67": [1388, 1390, 1397, 1398], "randomli": 1388, "101872": [1388, 1398], "70": [1388, 1389, 1390, 1395, 1397, 1398], "1004753": [1388, 1398], "57": [1388, 1390, 1398], "103659": [1388, 1398], "97": [1388, 1390, 1398], "1002993": [1388, 1398], "29": [1388, 1390, 1398], "100780": [1388, 1398], "1000779": [1388, 1398], "100290": [1388, 1398], "42": [1388, 1390, 1398], "1004330": [1388, 1398], "t4": [1388, 1390, 1394, 1396], "103005": 1388, "1003540": 1388, "t5": [1388, 1390], "100102": 1388, "1004849": 1388, "55": [1388, 1390], "t6": [1388, 1390], "104162": 1388, "1001061": 1388, "mesoscal": 1388, "75": [1388, 1389, 1390, 1392, 1397, 1398], "2009": [1388, 1392], "37214": [1388, 1392], "42685": [1388, 1392], "28838": [1388, 1392], "23": [1388, 1390, 1392, 1397, 1398], "27767": [1388, 1392], "36368": [1388, 1392], "30095": [1388, 1392], "At": 1388, "150": [1388, 1390, 1392, 1398, 1399], "250": [1388, 1390, 1392, 1395, 1400], "16": [1388, 1390, 1392, 1394, 1395, 1398, 1399], "svg": [1388, 1390, 1392, 1395, 1398, 1399], "binnd": 1388, "layer": 1388, "64": [1388, 1390, 1398], "253": 1388, "032": 1388, "542331196166035e": 1388, "207": [1388, 1397], "145": 1388, "0001230528308906": 1388, "116": 1388, "0001563449299843": 1388, "72": [1388, 1389, 1390, 1394, 1397], "048": 1388, "618827331554488e": 1388, "302": 1388, "027": 1388, "694": 1388, "98695302482496e": 1388, "3000": [1388, 1390, 1394, 1400], "2018": 1388, "24": [1388, 1390, 1394, 1397, 1398], "172": 1388, "27": [1388, 1390], "184": 1388, "52": [1388, 1390], "198": 1388, "34": [1388, 1390], "93": [1388, 1390], "19": [1388, 1390, 1394, 1398], "78": [1388, 1390, 1397, 1399], "217": 1388, "223": 1388, "26": [1388, 1389, 1390, 1397, 1398], "68": [1388, 1390, 1397], "227": 1388, "8000": [1388, 1396, 1398], "2017": [1388, 1398], "62": [1388, 1390, 1397, 1398], "244": [1388, 1398], "0504": [1388, 1398], "99": [1388, 1390, 1395, 1398], "243": [1388, 1398], "0514": [1388, 1398], "0522": [1388, 1398], "33": [1388, 1390, 1398], "241": [1388, 1398], "0523": [1388, 1398], "0518": 1388, "242": 1388, "0513": 1388, "269": 1388, "836": 1388, "344": 1388, "268": 1388, "532": 1388, "267": 1388, "406": 1388, "265": 1388, "981": 1388, "coars": [1388, 1390, 1399], "site": [1388, 1390], "bremen": [1388, 1390, 1395], "germani": [1388, 1390], "00158": [1388, 1390, 1399], "00244": [1388, 1390, 1399], "00319": [1388, 1390, 1399], "00367": 1388, "00042": [1388, 1390, 1399], "veri": [1388, 1389, 1390, 1398], "inhomogen": 1388, "long_nam": 1388, "rotat": 1388, "subtitl": 1388, "date": 1388, "2021": 1388, "2500": [1388, 1389, 1390], "180": 1388, "120": 1388, "dtu10": 1388, "iea15": 1388, "iea15mw": [1388, 1391], "iwt7": [1388, 1391], "nrel5": [1388, 1394, 1396, 1398], "nrel5mw": [1388, 1389, 1390, 1391, 1392, 1394, 1396, 1398, 1399, 1400], "nstate": 1388, "ncurv": 1388, "pctcurv": 1388, "categori": 1388, "relative_to": 1388, "parent": 1388, "posixpath": 1388, "printout": [1388, 1396], "feel": 1388, "invit": 1388, "best": [1389, 1390, 1395], "wai": 1389, "similar": 1389, "claim": 1389, "associ": 1389, "netcfd": 1389, "back": 1389, "our": [1389, 1390, 1391, 1392, 1394, 1395, 1399, 1400], "let": [1389, 1390, 1392, 1394, 1395, 1397, 1398, 1399, 1400], "domain": 1389, "rectangl": 1389, "realiz": [1389, 1400], "instanc": [1389, 1397], "streamlines_100": [1389, 1391], "grid16": [1389, 1391], "jensen_linear_k007": [1389, 1391, 1396], "implicit": [1389, 1390, 1398, 1400], "fr": [1389, 1392, 1394, 1396, 1398], "to_datafram": [1389, 1392, 1394, 1396, 1397, 1398, 1400], "scale_unit": [1389, 1397], "201": 1389, "158092": 1389, "491089": 1389, "1474": 1389, "211367": 1389, "044994": 1389, "673386": 1389, "1580": 1389, "523022": 1389, "214": [1389, 1390], "523994": 1389, "960601": 1389, "1748": 1389, "171047": 1389, "218": 1389, "242345": 1389, "867297": 1389, "1127": 1389, "597810": 1389, "222": 1389, "297880": 1389, "283373": 1389, "1352": 1389, "715530": 1389, "899315": 1389, "731909": 1389, "808657": 1389, "1614": 1389, "607085": 1389, "1101": 1389, "211997": 1389, "236": 1389, "751304": 1389, "932726": 1389, "1156": 1389, "958672": 1389, "237": 1389, "139685": 1389, "375640": 1389, "142662": 1389, "1406": 1389, "547918": 1389, "801": 1389, "751505": 1389, "484049": 1389, "818854": 1389, "381124": 1389, "1665": 1389, "347000": 1389, "908": 1389, "970303": 1389, "311353": 1389, "703701": 1389, "746596": 1389, "1054": 1389, "871543": 1389, "653": 1389, "807377": 1389, "259090": 1389, "995899": 1389, "857833": 1389, "1185": 1389, "898485": 1389, "690": 1389, "639688": 1389, "676969": 1389, "357075": 1389, "1396": 1389, "122949": 1389, "537113": 1389, "352448": 1389, "521": 1389, "748653": 1389, "447853": 1389, "960030": 1389, "917024": 1389, "724": 1389, "421405": 1389, "710": 1389, "071241": 1389, "815208": 1389, "580130": 1389, "998": 1389, "581195": 1389, "462887": 1389, "352662": 1389, "621921": 1389, "552147": 1389, "960214": 1389, "363478": 1389, "184792": 1389, "580285": 1389, "552663": 1389, "task": 1390, "detail": [1390, 1393, 1398], "pymoo": 1390, "nice": 1390, "genet": 1390, "optimizer_pymoo": 1390, "gm": 1390, "tackl": 1390, "wind_rose_bremen": [1390, 1395, 1399], "0036700002": [1390, 1399], "1200": 1390, "900": [1390, 1397, 1399], "1500": 1390, "700": 1390, "wish": [1390, 1398, 1399, 1400], "t7": 1390, "t8": 1390, "t9": 1390, "shortli": 1390, "begin": 1390, "bastankhah_linear_k002": [1390, 1391, 1392, 1394, 1395], "n_obj_cmptn": 1390, "n_con_cmptn": 1390, "impli": 1390, "ga": 1390, "form": [1390, 1398], "n_max_gen": 1390, "pop_siz": 1390, "problem_par": 1390, "algo_par": 1390, "seed": 1390, "setup_par": 1390, "term_par": 1390, "ftol": 1390, "xtol": 1390, "print_info": 1390, "sampl": 1390, "float_random": 1390, "floatrandomsampl": 1390, "termin": 1390, "defaultsingleobjectivetermin": 1390, "001": 1390, "n_gen": 1390, "n_eval": 1390, "cv_min": 1390, "cv_avg": 1390, "f_avg": 1390, "f_min": 1390, "257950e": 1390, "094916e": 1390, "180418e": 1390, "141625e": 1390, "279782e": 1390, "157184e": 1390, "404513e": 1390, "577682e": 1390, "579169e": 1390, "703733e": 1390, "350": 1390, "531147e": 1390, "050876e": 1390, "000000e": 1390, "605222e": 1390, "588240e": 1390, "450": 1390, "103920e": 1390, "527620e": 1390, "582192e": 1390, "550": 1390, "732673e": 1390, "600": [1390, 1392, 1394, 1395], "832754e": 1390, "586968e": 1390, "591846e": 1390, "650": 1390, "055741e": 1390, "588486e": 1390, "604179e": 1390, "8416979966": 1390, "586179e": 1390, "750": [1390, 1400], "0056020975": 1390, "586244e": 1390, "592827e": 1390, "609887e": 1390, "850": 1390, "597835e": 1390, "616432e": 1390, "601994e": 1390, "619099e": 1390, "608318e": 1390, "637494e": 1390, "615190e": 1390, "645683e": 1390, "1050": 1390, "622881e": 1390, "646187e": 1390, "1100": 1390, "631506e": 1390, "653047e": 1390, "1150": 1390, "640921e": 1390, "655091e": 1390, "648388e": 1390, "657861e": 1390, "1250": 1390, "651988e": 1390, "663615e": 1390, "1300": 1390, "655195e": 1390, "1350": 1390, "658165e": 1390, "667660e": 1390, "1400": 1390, "660791e": 1390, "671652e": 1390, "1450": 1390, "663724e": 1390, "676832e": 1390, "667884e": 1390, "679974e": 1390, "1550": 1390, "672357e": 1390, "685551e": 1390, "1600": 1390, "676653e": 1390, "688468e": 1390, "1650": 1390, "681032e": 1390, "688999e": 1390, "1700": 1390, "684254e": 1390, "692540e": 1390, "1750": 1390, "686841e": 1390, "1800": 1390, "689011e": 1390, "693343e": 1390, "37": [1390, 1397], "1850": 1390, "690736e": 1390, "700848e": 1390, "38": 1390, "1900": 1390, "692806e": 1390, "701437e": 1390, "1950": 1390, "695244e": 1390, "702613e": 1390, "698077e": 1390, "714461e": 1390, "2050": 1390, "701772e": 1390, "2100": 1390, "705495e": 1390, "716273e": 1390, "2150": 1390, "709527e": 1390, "720787e": 1390, "2200": 1390, "712644e": 1390, "721430e": 1390, "2250": 1390, "715937e": 1390, "722818e": 1390, "2300": 1390, "719261e": 1390, "726242e": 1390, "2350": 1390, "721874e": 1390, "728699e": 1390, "2400": 1390, "724323e": 1390, "729085e": 1390, "2450": 1390, "726669e": 1390, "731540e": 1390, "729169e": 1390, "736498e": 1390, "2550": 1390, "731473e": 1390, "2600": 1390, "733755e": 1390, "739439e": 1390, "2650": 1390, "736553e": 1390, "741091e": 1390, "54": [1390, 1398], "2700": 1390, "737859e": 1390, "2750": 1390, "739620e": 1390, "746115e": 1390, "56": 1390, "2800": 1390, "741132e": 1390, "2850": 1390, "742407e": 1390, "2900": 1390, "743667e": 1390, "2950": 1390, "744499e": 1390, "747450e": 1390, "745637e": 1390, "749378e": 1390, "3050": 1390, "746819e": 1390, "750740e": 1390, "3100": 1390, "748079e": 1390, "751545e": 1390, "3150": 1390, "749500e": 1390, "752455e": 1390, "3200": 1390, "750617e": 1390, "3250": 1390, "751276e": 1390, "752688e": 1390, "66": [1390, 1398], "3300": 1390, "751675e": 1390, "753603e": 1390, "3350": 1390, "752037e": 1390, "753628e": 1390, "3400": 1390, "752668e": 1390, "754781e": 1390, "3450": 1390, "753223e": 1390, "755507e": 1390, "3500": 1390, "753940e": 1390, "755627e": 1390, "71": [1390, 1394], "3550": 1390, "754475e": 1390, "756641e": 1390, "3600": 1390, "754917e": 1390, "756729e": 1390, "3650": 1390, "755482e": 1390, "756732e": 1390, "74": 1390, "3700": 1390, "755880e": 1390, "756858e": 1390, "3750": 1390, "756292e": 1390, "757238e": 1390, "76": 1390, "3800": 1390, "756666e": 1390, "757649e": 1390, "3850": 1390, "756985e": 1390, "757750e": 1390, "3900": 1390, "757224e": 1390, "757984e": 1390, "79": [1390, 1396, 1397], "3950": 1390, "757503e": 1390, "758511e": 1390, "80": [1390, 1397, 1399], "757798e": 1390, "759081e": 1390, "81": [1390, 1399], "4050": 1390, "758090e": 1390, "82": 1390, "4100": 1390, "758474e": 1390, "759855e": 1390, "4150": 1390, "758746e": 1390, "759968e": 1390, "84": [1390, 1392, 1397], "4200": 1390, "758965e": 1390, "4250": 1390, "759223e": 1390, "4300": 1390, "759449e": 1390, "87": [1390, 1397, 1398], "4350": 1390, "759646e": 1390, "759971e": 1390, "4400": 1390, "759774e": 1390, "760032e": 1390, "4450": 1390, "759883e": 1390, "760064e": 1390, "4500": 1390, "759951e": 1390, "760100e": 1390, "4550": 1390, "760006e": 1390, "760142e": 1390, "4600": 1390, "760062e": 1390, "760593e": 1390, "4650": 1390, "760121e": 1390, "760978e": 1390, "94": 1390, "4700": 1390, "760182e": 1390, "4750": 1390, "760257e": 1390, "96": [1390, 1397], "4800": 1390, "760395e": 1390, "760997e": 1390, "4850": 1390, "760607e": 1390, "761020e": 1390, "98": [1390, 1392, 1397], "4900": 1390, "760797e": 1390, "761706e": 1390, "4950": 1390, "760918e": 1390, "761763e": 1390, "761054e": 1390, "success": 1390, "28808": 1390, "815290012986": 1390, "x_0000": 1390, "484848e": 1390, "y_0000": 1390, "387982e": 1390, "x_0001": 1390, "999400e": 1390, "y_0001": 1390, "193226e": 1390, "x_0002": 1390, "743332e": 1390, "y_0002": 1390, "853013e": 1390, "x_0003": 1390, "161273e": 1390, "y_0003": 1390, "356752e": 1390, "x_0004": 1390, "010384e": 1390, "y_0004": 1390, "495968e": 1390, "x_0005": 1390, "992900e": 1390, "y_0005": 1390, "499577e": 1390, "x_0006": 1390, "970308e": 1390, "y_0006": 1390, "893921e": 1390, "x_0007": 1390, "136647e": 1390, "y_0007": 1390, "198557e": 1390, "x_0008": 1390, "942851e": 1390, "y_0008": 1390, "147376e": 1390, "x_0009": 1390, "992843e": 1390, "y_0009": 1390, "559152e": 1390, "880882e": 1390, "boundary_0000": 1390, "409687e": 1390, "boundary_0001": 1390, "001485e": 1390, "boundary_0002": 1390, "boundary_0003": 1390, "212439e": 1390, "boundary_0004": 1390, "038416e": 1390, "boundary_0005": 1390, "227091e": 1390, "boundary_0006": 1390, "boundary_0007": 1390, "boundary_0008": 1390, "714927e": 1390, "boundary_0009": 1390, "156536e": 1390, "dist_0_1": 1390, "053034e": 1390, "dist_0_2": 1390, "133692e": 1390, "dist_0_3": 1390, "512186e": 1390, "dist_0_4": 1390, "063629e": 1390, "dist_0_5": 1390, "032833e": 1390, "dist_0_6": 1390, "912219e": 1390, "dist_0_7": 1390, "174197e": 1390, "dist_0_8": 1390, "235491e": 1390, "dist_0_9": 1390, "389174e": 1390, "dist_1_2": 1390, "810253e": 1390, "dist_1_3": 1390, "227849e": 1390, "dist_1_4": 1390, "346207e": 1390, "dist_1_5": 1390, "282549e": 1390, "dist_1_6": 1390, "644388e": 1390, "dist_1_7": 1390, "015225e": 1390, "dist_1_8": 1390, "760754e": 1390, "dist_1_9": 1390, "459327e": 1390, "dist_2_3": 1390, "734121e": 1390, "dist_2_4": 1390, "000907e": 1390, "dist_2_5": 1390, "035690e": 1390, "dist_2_6": 1390, "547630e": 1390, "dist_2_7": 1390, "612574e": 1390, "dist_2_8": 1390, "428297e": 1390, "dist_2_9": 1390, "480372e": 1390, "dist_3_4": 1390, "383697e": 1390, "dist_3_5": 1390, "427543e": 1390, "dist_3_6": 1390, "533256e": 1390, "dist_3_7": 1390, "217365e": 1390, "dist_3_8": 1390, "085619e": 1390, "dist_3_9": 1390, "184343e": 1390, "dist_4_5": 1390, "462646e": 1390, "dist_4_6": 1390, "321302e": 1390, "dist_4_7": 1390, "301324e": 1390, "dist_4_8": 1390, "519941e": 1390, "dist_4_9": 1390, "401477e": 1390, "dist_5_6": 1390, "244685e": 1390, "dist_5_7": 1390, "910567e": 1390, "dist_5_8": 1390, "002368e": 1390, "dist_5_9": 1390, "916621e": 1390, "dist_6_7": 1390, "304425e": 1390, "dist_6_8": 1390, "924854e": 1390, "dist_6_9": 1390, "010247e": 1390, "dist_7_8": 1390, "429886e": 1390, "dist_7_9": 1390, "403714e": 1390, "dist_8_9": 1390, "394927e": 1390, "210": [1390, 1397], "213": 1390, "215": 1390, "995": 1390, "081": 1390, "109": 1390, "5e": 1390, "448": 1390, "999": 1390, "743": 1390, "6137": 1390, "994": 1390, "338": 1390, "419": 1390, "685": 1390, "147e": 1390, "755": 1390, "00013": 1390, "u2": [1390, 1396, 1397], "dpar": 1390, "zorder": 1390, "outside_whit": 1390, "anyth": 1390, "organ": 1391, "farm_pmask": 1391, "pmask": [1391, 1394, 1395], "farm_hubh_data": 1391, "hubh_data": 1391, "farm_kti": 1391, "farm_kti_02": 1391, "kti_02": [1391, 1398], "farm_kti_04": 1391, "kti_04": 1391, "farm_kti_05": 1391, "kti_05": [1391, 1399, 1400], "farm_kti_amb": 1391, "kti_amb": 1391, "farm_kti_amb_02": 1391, "kti_amb_02": 1391, "farm_kti_amb_04": 1391, "kti_amb_04": 1391, "farm_kti_amb_05": 1391, "kti_amb_05": 1391, "farm_thrust2ct": 1391, "farm_yaw2yawm": 1391, "farm_yawm2yaw": 1391, "axiwake10": 1391, "axiwake2": 1391, "axiwake20": 1391, "axiwake3": 1391, "axiwake4": 1391, "axiwake5": 1391, "axiwake6": 1391, "axiwake7": 1391, "axiwake8": 1391, "axiwake9": 1391, "distslic": 1391, "distsliced100": 1391, "distsliced16": 1391, "distsliced25": 1391, "distsliced36": 1391, "distsliced4": 1391, "distsliced400": 1391, "distsliced49": 1391, "distsliced64": 1391, "distsliced81": 1391, "distsliced9": 1391, "grid100": 1391, "grid25": 1391, "grid36": 1391, "grid4": 1391, "grid400": 1391, "grid49": 1391, "grid64": 1391, "grid81": 1391, "grid9": [1391, 1392], "top_hat": 1391, "level10": 1391, "level2": 1391, "level20": 1391, "level3": 1391, "level4": 1391, "level5": 1391, "level6": 1391, "level7": 1391, "level8": 1391, "level9": 1391, "5mw": [1391, 1395, 1396, 1398], "null_typ": 1391, "rotor_wd_farmo": 1391, "seq_dyn_wak": 1391, "seq_dyn_wakes_10min": 1391, "seq_dyn_wakes_10": 1391, "seq_dyn_wakes_1min": 1391, "seq_dyn_wakes_1": 1391, "seq_dyn_wakes_30min": 1391, "seq_dyn_wakes_30": 1391, "streamlines_1": 1391, "streamlines_10": 1391, "streamlines_100_farmo": 1391, "streamlines_100_yaw": 1391, "streamlines_10_farmo": 1391, "streamlines_10_yaw": 1391, "streamlines_1_farmo": 1391, "streamlines_1_yaw": 1391, "streamlines_5": 1391, "streamlines_50": 1391, "streamlines_500": 1391, "streamlines_500_farmo": 1391, "streamlines_500_yaw": 1391, "streamlines_50_farmo": 1391, "streamlines_50_yaw": 1391, "streamlines_5_farmo": 1391, "streamlines_5_yaw": 1391, "timelines_10min": 1391, "timelines_10": [1391, 1397], "timelines_1km": 1391, "timelines_1min": 1391, "timelines_1": 1391, "timelines_30min": 1391, "timelines_30": 1391, "bastankhah0_linear": 1391, "bastankhah0_linear_amb": 1391, "linear_amb": 1391, "bastankhah0_linear_amb_k002": 1391, "bastankhah0_linear_amb_k004": 1391, "bastankhah0_linear_k002": 1391, "bastankhah0_linear_k004": 1391, "bastankhah0_linear_lim": 1391, "bastankhah0_linear_lim_k002": 1391, "bastankhah0_linear_lim_k004": 1391, "bastankhah0_max": 1391, "bastankhah0_max_amb": 1391, "max_amb": 1391, "bastankhah0_max_amb_k002": 1391, "bastankhah0_max_amb_k004": 1391, "bastankhah0_max_k002": 1391, "bastankhah0_max_k004": 1391, "bastankhah0_product": 1391, "bastankhah0_product_k002": 1391, "bastankhah0_product_k004": 1391, "bastankhah0_product_lim": 1391, "product_lim": 1391, "bastankhah0_product_lim_k002": 1391, "bastankhah0_product_lim_k004": 1391, "bastankhah0_quadrat": 1391, "bastankhah0_quadratic_amb": 1391, "quadratic_amb": 1391, "bastankhah0_quadratic_amb_k002": 1391, "bastankhah0_quadratic_amb_k004": 1391, "bastankhah0_quadratic_k002": 1391, "bastankhah0_quadratic_k004": 1391, "bastankhah_linear": [1391, 1399], "bastankhah_linear_amb": 1391, "bastankhah_linear_amb_k002": 1391, "bastankhah_linear_amb_k004": 1391, "bastankhah_linear_k004": [1391, 1397], "bastankhah_linear_lim": 1391, "bastankhah_linear_lim_k002": 1391, "bastankhah_max": 1391, "bastankhah_max_amb": 1391, "bastankhah_max_amb_k002": 1391, "bastankhah_max_amb_k004": 1391, "bastankhah_max_k002": 1391, "bastankhah_max_k004": 1391, "bastankhah_product": 1391, "bastankhah_product_k002": 1391, "bastankhah_product_k004": 1391, "bastankhah_product_lim": 1391, "bastankhah_product_lim_k002": 1391, "bastankhah_product_lim_k004": 1391, "bastankhah_quadrat": [1391, 1398], "bastankhah_quadratic_amb": 1391, "bastankhah_quadratic_amb_k002": 1391, "bastankhah_quadratic_amb_k004": 1391, "bastankhah_quadratic_k002": 1391, "bastankhah_quadratic_k004": 1391, "crespohernandez_ambti_cub": 1391, "ti_cub": 1391, "crespohernandez_ambti_linear": 1391, "ti_linear": 1391, "crespohernandez_ambti_max": 1391, "ti_max": 1391, "crespohernandez_ambti_quadrat": 1391, "ti_quadrat": 1391, "crespohernandez_ambti_quart": 1391, "ti_quart": 1391, "crespohernandez_cub": 1391, "crespohernandez_cubic_k002": 1391, "crespohernandez_linear": 1391, "crespohernandez_linear_k002": 1391, "crespohernandez_max": [1391, 1398, 1399, 1400], "crespohernandez_max_k002": 1391, "crespohernandez_quadrat": 1391, "crespohernandez_quadratic_k002": 1391, "crespohernandez_quart": 1391, "crespohernandez_quartic_k002": 1391, "iecti2005_cub": 1391, "19076020221856677": 1391, "iecti2005_linear": 1391, "iecti2005_max": 1391, "iecti2005_quadrat": 1391, "iecti2005_quart": 1391, "iecti2019_cub": 1391, "iecti2019_linear": 1391, "iecti2019_max": 1391, "iecti2019_quadrat": 1391, "iecti2019_quart": 1391, "jensen_linear": 1391, "jensen_linear_amb": 1391, "jensen_linear_amb_k002": 1391, "jensen_linear_amb_k004": 1391, "jensen_linear_amb_k007": 1391, "jensen_linear_amb_k0075": 1391, "075": 1391, "jensen_linear_k002": 1391, "jensen_linear_k004": 1391, "jensen_linear_k0075": 1391, "jensen_linear_lim": 1391, "jensen_linear_lim_k002": 1391, "jensen_linear_lim_k004": 1391, "jensen_linear_lim_k007": 1391, "jensen_linear_lim_k0075": 1391, "jensen_max": 1391, "jensen_max_amb": 1391, "jensen_max_amb_k002": 1391, "jensen_max_amb_k004": 1391, "jensen_max_amb_k007": 1391, "jensen_max_amb_k0075": 1391, "jensen_max_k002": 1391, "jensen_max_k004": 1391, "jensen_max_k007": 1391, "jensen_max_k0075": 1391, "jensen_product": 1391, "jensen_product_k002": 1391, "jensen_product_k004": 1391, "jensen_product_k007": 1391, "jensen_product_k0075": 1391, "jensen_product_lim": 1391, "jensen_product_lim_k002": 1391, "jensen_product_lim_k004": 1391, "jensen_product_lim_k007": 1391, "jensen_product_lim_k0075": 1391, "jensen_quadrat": 1391, "jensen_quadratic_amb": 1391, "jensen_quadratic_amb_k002": 1391, "jensen_quadratic_amb_k004": 1391, "jensen_quadratic_amb_k007": 1391, "jensen_quadratic_amb_k0075": 1391, "jensen_quadratic_k002": 1391, "jensen_quadratic_k004": 1391, "jensen_quadratic_k007": 1391, "jensen_quadratic_k0075": 1391, "porteagel_linear": [1391, 1400], "porteagel_linear_amb": 1391, "porteagel_linear_amb_k002": 1391, "porteagel_linear_amb_k004": 1391, "porteagel_linear_k002": 1391, "porteagel_linear_k004": 1391, "porteagel_linear_lim": 1391, "porteagel_linear_lim_k002": 1391, "porteagel_linear_lim_k004": 1391, "porteagel_max": 1391, "porteagel_max_amb": 1391, "porteagel_max_amb_k002": 1391, "porteagel_max_amb_k004": 1391, "porteagel_max_k002": 1391, "porteagel_max_k004": 1391, "porteagel_product": 1391, "porteagel_product_k002": 1391, "porteagel_product_k004": 1391, "porteagel_product_lim": 1391, "porteagel_product_lim_k002": 1391, "porteagel_product_lim_k004": 1391, "porteagel_quadrat": 1391, "porteagel_quadratic_amb": 1391, "porteagel_quadratic_amb_k002": 1391, "porteagel_quadratic_amb_k004": 1391, "porteagel_quadratic_k002": 1391, "porteagel_quadratic_k004": 1391, "turboparkix_linear_a002_dx001": 1391, "turboparkix_linear_a002_dx1": 1391, "turboparkix_linear_a002_dx10": 1391, "turboparkix_linear_a002_dx100": 1391, "turboparkix_linear_a002_dx5": 1391, "turboparkix_linear_a002_dx50": 1391, "turboparkix_linear_a004_dx001": 1391, "turboparkix_linear_a004_dx1": 1391, "turboparkix_linear_a004_dx10": 1391, "turboparkix_linear_a004_dx100": 1391, "turboparkix_linear_a004_dx5": 1391, "turboparkix_linear_a004_dx50": 1391, "turboparkix_linear_amb_a002_dx001": 1391, "turboparkix_linear_amb_a002_dx1": 1391, "turboparkix_linear_amb_a002_dx10": 1391, "turboparkix_linear_amb_a002_dx100": 1391, "turboparkix_linear_amb_a002_dx5": 1391, "turboparkix_linear_amb_a002_dx50": 1391, "turboparkix_linear_amb_a004_dx001": 1391, "turboparkix_linear_amb_a004_dx1": 1391, "turboparkix_linear_amb_a004_dx10": 1391, "turboparkix_linear_amb_a004_dx100": 1391, "turboparkix_linear_amb_a004_dx5": 1391, "turboparkix_linear_amb_a004_dx50": 1391, "turboparkix_linear_lim_a002_dx001": 1391, "turboparkix_linear_lim_a002_dx1": 1391, "turboparkix_linear_lim_a002_dx10": 1391, "turboparkix_linear_lim_a002_dx100": 1391, "turboparkix_linear_lim_a002_dx5": 1391, "turboparkix_linear_lim_a002_dx50": 1391, "turboparkix_linear_lim_a004_dx001": 1391, "turboparkix_linear_lim_a004_dx1": 1391, "turboparkix_linear_lim_a004_dx10": 1391, "turboparkix_linear_lim_a004_dx100": 1391, "turboparkix_linear_lim_a004_dx5": 1391, "turboparkix_linear_lim_a004_dx50": 1391, "turboparkix_max_a002_dx001": 1391, "turboparkix_max_a002_dx1": 1391, "turboparkix_max_a002_dx10": 1391, "turboparkix_max_a002_dx100": 1391, "turboparkix_max_a002_dx5": 1391, "turboparkix_max_a002_dx50": 1391, "turboparkix_max_a004_dx001": 1391, "turboparkix_max_a004_dx1": 1391, "turboparkix_max_a004_dx10": 1391, "turboparkix_max_a004_dx100": 1391, "turboparkix_max_a004_dx5": 1391, "turboparkix_max_a004_dx50": 1391, "turboparkix_max_amb_a002_dx001": 1391, "turboparkix_max_amb_a002_dx1": 1391, "turboparkix_max_amb_a002_dx10": 1391, "turboparkix_max_amb_a002_dx100": 1391, "turboparkix_max_amb_a002_dx5": 1391, "turboparkix_max_amb_a002_dx50": 1391, "turboparkix_max_amb_a004_dx001": 1391, "turboparkix_max_amb_a004_dx1": 1391, "turboparkix_max_amb_a004_dx10": 1391, "turboparkix_max_amb_a004_dx100": 1391, "turboparkix_max_amb_a004_dx5": 1391, "turboparkix_max_amb_a004_dx50": 1391, "turboparkix_product_a002_dx001": 1391, "turboparkix_product_a002_dx1": 1391, "turboparkix_product_a002_dx10": 1391, "turboparkix_product_a002_dx100": 1391, "turboparkix_product_a002_dx5": 1391, "turboparkix_product_a002_dx50": 1391, "turboparkix_product_a004_dx001": 1391, "turboparkix_product_a004_dx1": 1391, "turboparkix_product_a004_dx10": 1391, "turboparkix_product_a004_dx100": 1391, "turboparkix_product_a004_dx5": 1391, "turboparkix_product_a004_dx50": 1391, "turboparkix_product_lim_a002_dx001": 1391, "turboparkix_product_lim_a002_dx1": 1391, "turboparkix_product_lim_a002_dx10": 1391, "turboparkix_product_lim_a002_dx100": 1391, "turboparkix_product_lim_a002_dx5": 1391, "turboparkix_product_lim_a002_dx50": 1391, "turboparkix_product_lim_a004_dx001": 1391, "turboparkix_product_lim_a004_dx1": 1391, "turboparkix_product_lim_a004_dx10": 1391, "turboparkix_product_lim_a004_dx100": 1391, "turboparkix_product_lim_a004_dx5": 1391, "turboparkix_product_lim_a004_dx50": 1391, "turboparkix_quadratic_a002_dx001": 1391, "turboparkix_quadratic_a002_dx1": 1391, "turboparkix_quadratic_a002_dx10": 1391, "turboparkix_quadratic_a002_dx100": 1391, "turboparkix_quadratic_a002_dx5": 1391, "turboparkix_quadratic_a002_dx50": 1391, "turboparkix_quadratic_a004_dx001": 1391, "turboparkix_quadratic_a004_dx1": 1391, "turboparkix_quadratic_a004_dx10": 1391, "turboparkix_quadratic_a004_dx100": 1391, "turboparkix_quadratic_a004_dx5": 1391, "turboparkix_quadratic_a004_dx50": 1391, "turboparkix_quadratic_amb_a002_dx001": 1391, "turboparkix_quadratic_amb_a002_dx1": 1391, "turboparkix_quadratic_amb_a002_dx10": 1391, "turboparkix_quadratic_amb_a002_dx100": 1391, "turboparkix_quadratic_amb_a002_dx5": 1391, "turboparkix_quadratic_amb_a002_dx50": 1391, "turboparkix_quadratic_amb_a004_dx001": 1391, "turboparkix_quadratic_amb_a004_dx1": 1391, "turboparkix_quadratic_amb_a004_dx10": 1391, "turboparkix_quadratic_amb_a004_dx100": 1391, "turboparkix_quadratic_amb_a004_dx5": 1391, "turboparkix_quadratic_amb_a004_dx50": 1391, "turbopark_linear_a002": 1391, "turbopark_linear_a004": 1391, "turbopark_linear_amb_a002": 1391, "turbopark_linear_amb_a004": 1391, "turbopark_linear_lim_a002": 1391, "turbopark_linear_lim_a004": 1391, "turbopark_max_a002": 1391, "turbopark_max_a004": 1391, "turbopark_max_amb_a002": 1391, "turbopark_max_amb_a004": 1391, "turbopark_product_a002": 1391, "turbopark_product_a004": 1391, "turbopark_product_lim_a002": 1391, "turbopark_product_lim_a004": 1391, "turbopark_quadratic_a002": 1391, "turbopark_quadratic_a004": 1391, "turbopark_quadratic_amb_a002": 1391, "turbopark_quadratic_amb_a004": 1391, "my_jensen": 1391, "042": 1391, "jensenwake45": 1391, "freshli": 1391, "similarli": [1391, 1394, 1400], "section": [1391, 1393, 1396, 1398, 1400], "explor": 1392, "download": 1392, "newa": 1392, "websit": 1392, "4464": 1392, "stamp": 1392, "mark": 1392, "month": 1392, "kinet": [1392, 1393], "assumpt": 1392, "variat": 1392, "neglect": 1392, "inflow": [1392, 1398], "manual": 1392, "alreadi": [1392, 1396], "howev": [1392, 1400], "neither": [1392, 1394], "goal": 1392, "certain": 1392, "approxim": 1392, "west": [1392, 1395, 1400], "undo": 1392, "earlier": 1392, "p0": [1392, 1394, 1398, 1399], "nfarm": [1392, 1394, 1396, 1397, 1398, 1399, 1400], "1f": [1392, 1394, 1398, 1399], "2f": [1392, 1394, 1398, 1399], "340": [1392, 1395], "14377": 1392, "593022": 1392, "1533": 1392, "584614": 1392, "83636": 1392, "192504": 1392, "1299": 1392, "635898": 1392, "299802": 1392, "1362": 1392, "286874": 1392, "538688": 1392, "1501": 1392, "771092": 1392, "226181": 1392, "1940": 1392, "207249": 1392, "532676": 1392, "4041": 1392, "896723": 1392, "22320": 1392, "131": 1392, "reflect": [1393, 1397, 1400], "script": 1393, "inform": [1393, 1396, 1398], "arbitrari": 1393, "becom": 1393, "reli": 1393, "averag": 1393, "stem": 1393, "henc": [1393, 1394, 1395, 1398], "approach": 1393, "might": 1393, "sdata": [1394, 1400], "exce": 1394, "nor": 1394, "pmax_": 1394, "s_": 1394, "pmax_4": 1394, "6000": [1394, 1395], "pmax_2": 1394, "pmax_0": 1394, "pmax_1": 1394, "pmax_3": 1394, "set_pmax": 1394, "thought": 1394, "sinc": [1394, 1397], "od": 1394, "somewher": 1394, "present": 1394, "influenc": 1394, "o1": 1394, "000000": [1394, 1396, 1397, 1398, 1400], "100622": 1394, "403": 1394, "460668": 1394, "230759": 1394, "160101": 1394, "836726": 1394, "448432": 1394, "024826": 1394, "1771": 1394, "969501": 1394, "727": 1394, "422438": 1394, "109672": 1394, "440": 1394, "497551": 1394, "664896": 1394, "328": 1394, "099527": 1394, "346418": 1394, "256": 1394, "059846": 1394, "4562": 1394, "500000": 1394, "218395": 1394, "1934": 1394, "349917": 1394, "026105": 1394, "1202": 1394, "442515": 1394, "419438": 1394, "926": 1394, "179190": 1394, "069268": 1394, "768": 1394, "743105": 1394, "740422": 1394, "265493": 1394, "610241": 1394, "4829": 1394, "480538": 1394, "737726": 1394, "305147": 1394, "704317": 1394, "538785": 1394, "001123": 1394, "463783": 1394, "027022": 1394, "922952": 1394, "572237": 1394, "549852": 1394, "200276": 1394, "124457": 1394, "856675": 1394, "753726": 1394, "552823": 1394, "501976": 1394, "340518": 1394, "re": [1394, 1397], "o0": 1394, "edgecolor": 1394, "white": 1394, "ylorrd": 1394, "nanmax": 1394, "ylgn": 1394, "produc": [1394, 1398], "off": 1395, "persu": 1395, "east": 1395, "wd_min": 1395, "wd_max": 1395, "170": 1395, "191": 1395, "290": 1395, "110": 1395, "correspons": 1395, "fulfil": 1395, "ttype": 1395, "nrel": [1395, 1396, 1398], "d126": [1395, 1396, 1398], "h90": [1395, 1396, 1398], "sector_rul": 1395, "rews_min": 1395, "rews_max": 1395, "wa": [1395, 1397], "5001": 1395, "7000": 1395, "high": 1395, "summari": 1396, "skip": 1396, "ask": 1396, "519e": 1396, "6e": 1396, "2e": 1396, "easili": 1396, "2518": 1396, "600000": 1396, "790000": 1396, "633459": 1396, "1557": 1396, "076947": 1396, "803665": 1396, "176627": 1396, "1290": 1396, "332498": 1396, "808234": 1396, "955794": 1396, "1167": 1396, "325199": 1396, "812210": 1396, "821354": 1396, "1106": 1396, "880886": 1396, "818932": 1396, "15000": 1396, "npoint": 1396, "916": 1396, "principl": 1397, "backward": 1397, "trajectori": 1397, "hit": [1397, 1400], "fall": 1397, "cross": [1397, 1400], "commun": 1397, "inlcud": 1397, "rcparam": 1397, "jshtml": 1397, "timeseries_var": 1397, "07t12": 1397, "timeseries_data": 1397, "324e": 1397, "933e": 1397, "104": 1397, "966e": 1397, "483e": 1397, "242e": 1397, "152": 1397, "208e": 1397, "104e": 1397, "552e": 1397, "760e": 1397, "311": [1397, 1399], "880e": 1397, "308": 1397, "940e": 1397, "700e": 1397, "behaviour": 1397, "farm_df": [1397, 1400], "1532": 1397, "700000": [1397, 1398], "063574": 1397, "845": 1397, "738040": 1397, "693421": 1397, "640": 1397, "016335": 1397, "gridspec_kw": 1397, "height_ratio": 1397, "anom": 1397, "panel": 1397, "013": 1397, "fun": [1397, 1398], "partialaxiwake12": 1397, "setxyhd1": 1397, "setxyhd1_t2f": 1397, "calc_yaw_centrerotor2": 1397, "calcorder1": 1397, "setambfarmresults1": 1397, "urelax12_ct": 1397, "farmwakescalculation12": 1397, "309": 1397, "342": 1397, "desir": [1398, 1400], "timeseries_8000": 1398, "test_farm_67": 1398, "further": 1398, "alwai": 1398, "598951": 1398, "307949": 1398, "067607": 1398, "522240": 1398, "728003": 1398, "299": 1398, "208883": 1398, "4868": 1398, "2712": 1398, "819583": 1398, "435150": 1398, "4752": 1398, "878044": 1398, "750000": 1398, "607321": 1398, "4828": 1398, "202797": 1398, "769528": 1398, "3234": 1398, "107125": 1398, "536000": 1398, "turbine_result": 1398, "nresult": 1398, "3067": 1398, "723397": 1398, "2778": 1398, "987770": 1398, "613545": 1398, "555798": 1398, "825445": 1398, "873257": 1398, "2531": 1398, "065918": 1398, "506213": 1398, "713413": 1398, "2702": 1398, "820210": 1398, "540564": 1398, "780747": 1398, "2739": 1398, "058250": 1398, "547812": 1398, "805992": 1398, "2593": 1398, "172270": 1398, "518634": 1398, "737070": 1398, "2625": 1398, "796799": 1398, "525159": 1398, "748704": 1398, "2591": 1398, "950988": 1398, "518390": 1398, "731988": 1398, "2864": 1398, "102273": 1398, "572820": 1398, "860799": 1398, "2571": 1398, "260829": 1398, "514252": 1398, "726062": 1398, "2633": 1398, "819847": 1398, "526764": 1398, "755245": 1398, "343933": 1398, "172137": 1398, "676705": 1398, "994150": 1398, "716189": 1398, "001980": 1398, "705491": 1398, "089536": 1398, "524245": 1398, "072262": 1398, "177": 1398, "1558": 1398, "seen": 1398, "mean_eff": [1398, 1399], "faster": 1398, "overhead": 1398, "But": 1398, "extrem": 1398, "realli": 1398, "dai": 1398, "nmean": 1398, "launch": 1398, "localclust": 1398, "bdfdca89": 1398, "tcp": 1398, "38639": 1398, "gib": 1398, "dashboard": 1398, "8787": 1398, "statu": 1398, "shut": 1398, "runtim": 1398, "localhost": 1398, "plenti": 1398, "relat": 1399, "686": 1399, "perfectli": 1399, "fine": 1399, "aim": 1400, "set_yawm": 1400, "want": 1400, "sensit": 1400, "continu": 1400, "downstream": 1400, "frontal": 1400, "146549": 1400, "042770": 1400, "240": 1400, "corect": 1400, "fact": 1400, "p_": 1400, "crespohernandez": 1400, "even": 1400, "though": 1400}, "objects": {"foxes.algorithms": [[0, 0, 1, "", "Downwind", "The downwind algorithm."], [9, 0, 1, "", "Iterative", "Iterative calculation of farm data."], [16, 0, 1, "", "Sequential", "A sequential calculation of states without chunking."]], "foxes.algorithms.Downwind": [[1, 1, 1, "", "__init__", "Constructor."], [2, 1, 1, "", "all_models", "Return all models"], [3, 1, 1, "", "calc_farm", "Calculate farm data."], [4, 1, 1, "", "calc_points", "Calculate data at a given set of points."], [5, 1, 1, "", "finalize", "Finalizes the algorithm."], [6, 1, 1, "", "get_model", "Get the algorithm specific model"], [7, 1, 1, "", "init_states", "Initialize states, if needed."], [8, 1, 1, "", "initialize", "Initializes the algorithm."]], "foxes.algorithms.Iterative": [[10, 1, 1, "", "__init__", "Constructor."], [11, 1, 1, "", "calc_farm", "Calculate farm data."], [12, 1, 1, "", "get_model", "Get the algorithm specific model"], [13, 2, 1, "", "iterations", "The current iteration number"], [14, 1, 1, "", "set_urelax", "Sets under-relaxation parameters."], [15, 2, 1, "", "urelax", "Returns the under-relaxation parameters"]], "foxes.algorithms.Sequential": [[17, 1, 1, "", "__init__", "Constructor."], [18, 1, 1, "", "__iter__", "Initialize the iterator"], [19, 1, 1, "", "__next__", "Run calculation for current step, then iterate to next"], [20, 1, 1, "", "calc_farm", "Calculate farm data."], [21, 1, 1, "", "calc_points", "Calculate data at a given set of points."], [22, 2, 1, "", "counter", "The current index counter"], [23, 2, 1, "", "cur_farm_results", "The current farm results"], [24, 2, 1, "", "cur_point_results", "The current point results"], [25, 2, 1, "", "farm_results", "The overall farm results"], [26, 2, 1, "", "fdata", "Get the current farm data"], [27, 1, 1, "", "get_model", "Get the algorithm specific model"], [28, 2, 1, "", "index", "The current index"], [29, 2, 1, "", "iterating", "Flag for running iteration"], [30, 2, 1, "", "mdata", "Get the current model data"], [31, 2, 1, "", "pdata", "Get the current point data"], [32, 2, 1, "", "point_results", "The overall point results"], [33, 2, 1, "", "size", "The total number of iteration steps"], [34, 2, 1, "", "weight", "The current weight array"]], "foxes.algorithms.downwind.models": [[35, 0, 1, "", "CalcOrder", "This model calculates the turbine evaluation order, via wake frames."], [40, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."], [46, 0, 1, "", "PointWakesCalculation", "This model calculates wake effects at points of interest."], [53, 0, 1, "", "SetAmbFarmResults", "This model copies farm data results to ambient results."], [57, 0, 1, "", "SetAmbPointResults", "This model copies point results to ambient results."]], "foxes.algorithms.downwind.models.CalcOrder": [[36, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [37, 1, 1, "", "initialize", "Initializes the model."], [38, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [39, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.algorithms.downwind.models.FarmWakesCalculation": [[41, 1, 1, "", "__init__", "Constructor."], [42, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [43, 1, 1, "", "initialize", "Initializes the model."], [44, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [45, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.algorithms.downwind.models.PointWakesCalculation": [[47, 1, 1, "", "__init__", "Constructor."], [48, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [49, 1, 1, "", "contribute_to_wake_deltas", "Contribute to wake deltas from source turbines"], [50, 1, 1, "", "initialize", "Initializes the model."], [51, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [52, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.algorithms.downwind.models.SetAmbFarmResults": [[54, 1, 1, "", "__init__", "Constructor."], [55, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [56, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.downwind.models.SetAmbPointResults": [[58, 1, 1, "", "__init__", "Constructor."], [59, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [60, 1, 1, "", "initialize", "Initializes the model."], [61, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.algorithms.iterative": [[62, 0, 1, "", "ConvCrit", "Abstract base class for convergence criteria"], [66, 0, 1, "", "ConvCritList", "A list of convergence criteria"], [71, 0, 1, "", "ConvVarDelta", "Requires convergence of a selection of variables."], [75, 0, 1, "", "DefaultConv", "Default convergence criteria."]], "foxes.algorithms.iterative.ConvCrit": [[63, 1, 1, "", "__init__", "Constructor."], [64, 1, 1, "", "check_converged", "Check convergence criteria."], [65, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvCritList": [[67, 1, 1, "", "__init__", "Constructor."], [68, 1, 1, "", "add_crit", "Add a convergence criterion"], [69, 1, 1, "", "check_converged", "Check convergence criteria."], [70, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.ConvVarDelta": [[72, 1, 1, "", "__init__", "Constructor."], [73, 1, 1, "", "check_converged", "Check convergence criteria."], [74, 1, 1, "", "get_deltas", "Get the most recent evaluation deltas."]], "foxes.algorithms.iterative.DefaultConv": [[76, 1, 1, "", "__init__", "Constructor."]], "foxes.algorithms.iterative.models": [[77, 0, 1, "", "FarmWakesCalculation", "This model calculates wakes effects on farm data."], [83, 0, 1, "", "URelax", "Apply under-relaxation to selected variables during iterations."]], "foxes.algorithms.iterative.models.FarmWakesCalculation": [[78, 1, 1, "", "__init__", "Constructor."], [79, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [80, 1, 1, "", "initialize", "Initializes the model."], [81, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [82, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.algorithms.iterative.models.URelax": [[84, 1, 1, "", "__init__", "Constructor."], [85, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [86, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.algorithms.sequential": [[87, 0, 1, "", "SequentialPlugin", "Base class for plugins that are updated with each sequential iteration"]], "foxes.algorithms.sequential.SequentialPlugin": [[88, 1, 1, "", "__init__", "Constructor."], [89, 1, 1, "", "finalize", "Finalize data based on the final iterator"], [90, 1, 1, "", "initialize", "Initialize data based on the intial iterator"], [91, 1, 1, "", "update", "Updates data based on current iteration"]], "foxes.algorithms.sequential.models": [[92, 0, 1, "", "SeqState", "A single state during sequential iteration, just serving as a structural placeholder"]], "foxes.algorithms.sequential.models.SeqState": [[93, 1, 1, "", "__init__", "Constructor."], [94, 1, 1, "", "calculate", "The main model calculation."], [95, 2, 1, "", "counter", "The current index counter"], [96, 1, 1, "", "index", "The index list"], [97, 1, 1, "", "initialize", "Initializes the model."], [98, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [99, 1, 1, "", "size", "The total number of states."], [100, 1, 1, "", "sub_models", "List of all sub-models"], [101, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.constants": [[240, 3, 1, "", "AMB_RPOINT_RESULTS", "Identified for ambient rotor point results"], [241, 4, 1, "", "DTYPE", "Default data type for floats"], [364, 3, 1, "", "FARM", "Wind farm identifier"], [365, 3, 1, "", "GW", "The unit giga watt"], [366, 4, 1, "", "ITYPE", "Default data type for int"], [416, 3, 1, "", "KAPPA", "The Van-Karman constant"], [417, 3, 1, "", "MW", "The unit mega watt"], [418, 3, 1, "", "POINT", "Point identifier"], [419, 3, 1, "", "POINTS", "Points identifier"], [420, 3, 1, "", "POP", "Population identifier"], [421, 3, 1, "", "P_UNITS", "Power unit factors relative to watts, key: unit str, value: factor"], [422, 3, 1, "", "RPOINT", "Rotor point identifier"], [423, 3, 1, "", "RPOINTS", "Rotor points identifier"], [424, 3, 1, "", "RWEIGHTS", "Rotor point weights identifier"], [425, 3, 1, "", "STATE", "States identifier"], [426, 3, 1, "", "STATES_SEL", "Identifier for states selection"], [427, 3, 1, "", "STATE_POINT", "Identifier for state-point dimensions"], [428, 3, 1, "", "STATE_SOURCE_TURBINE", "Identifier for the source turbines per state"], [429, 3, 1, "", "STATE_TURBINE", "Identifier for state-turbine dimensions"], [430, 3, 1, "", "TMODELS", "Turbine models identifier"], [431, 3, 1, "", "TMODEL_SELS", "Selected turbine models identifier"], [432, 3, 1, "", "TNAME", "Wind turbine name identifier"], [433, 3, 1, "", "TURBINE", "Wind turbine identifier"], [434, 3, 1, "", "TW", "The unit terra watt"], [435, 3, 1, "", "VALID", "Validity identifier"], [436, 3, 1, "", "VARS", "Variables identifier"], [437, 3, 1, "", "W", "The unit watt"], [438, 3, 1, "", "XYH", "The vector (x, y, height)"], [439, 3, 1, "", "kW", "The unit kilo watt"]], "foxes.constants.DTYPE": [[242, 4, 1, "", "T", "Scalar attribute identical to the corresponding array attribute."], [243, 1, 1, "", "__abs__", "abs(self)"], [244, 1, 1, "", "__add__", "Return self+value."], [245, 1, 1, "", "__and__", "Return self&value."], [246, 1, 1, "", "__array__", "sc.__array__(dtype) return 0-dim array from scalar with specified dtype"], [247, 4, 1, "", "__array_interface__", "Array protocol: Python side"], [248, 4, 1, "", "__array_priority__", "Array priority."], [249, 4, 1, "", "__array_struct__", "Array protocol: struct"], [250, 1, 1, "", "__array_wrap__", "sc.__array_wrap__(obj) return scalar from array"], [251, 1, 1, "", "__bool__", "self != 0"], [252, 1, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [253, 1, 1, "", "__divmod__", "Return divmod(self, value)."], [254, 1, 1, "", "__eq__", "Return self==value."], [255, 1, 1, "", "__float__", "float(self)"], [256, 1, 1, "", "__floordiv__", "Return self//value."], [257, 1, 1, "", "__format__", "NumPy array scalar formatter"], [258, 1, 1, "", "__ge__", "Return self>=value."], [259, 1, 1, "", "__getitem__", "Return self[key]."], [260, 1, 1, "", "__gt__", "Return self>value."], [261, 1, 1, "", "__hash__", "Return hash(self)."], [262, 1, 1, "", "__int__", "int(self)"], [263, 1, 1, "", "__invert__", "~self"], [264, 1, 1, "", "__le__", "Return self<=value."], [265, 1, 1, "", "__lshift__", "Return self<<value."], [266, 1, 1, "", "__lt__", "Return self<value."], [267, 1, 1, "", "__mod__", "Return self%value."], [268, 1, 1, "", "__mul__", "Return self*value."], [269, 1, 1, "", "__ne__", "Return self!=value."], [270, 1, 1, "", "__neg__", "-self"], [271, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [272, 1, 1, "", "__or__", "Return self|value."], [273, 1, 1, "", "__pos__", "+self"], [274, 1, 1, "", "__pow__", "Return pow(self, value, mod)."], [275, 1, 1, "", "__radd__", "Return value+self."], [276, 1, 1, "", "__rand__", "Return value&self."], [277, 1, 1, "", "__rdivmod__", "Return divmod(value, self)."], [278, 1, 1, "", "__reduce__", "Helper for pickle."], [279, 1, 1, "", "__repr__", "Return repr(self)."], [280, 1, 1, "", "__rfloordiv__", "Return value//self."], [281, 1, 1, "", "__rlshift__", "Return value<<self."], [282, 1, 1, "", "__rmod__", "Return value%self."], [283, 1, 1, "", "__rmul__", "Return value*self."], [284, 1, 1, "", "__ror__", "Return value|self."], [285, 1, 1, "", "__rpow__", "Return pow(value, self, mod)."], [286, 1, 1, "", "__rrshift__", "Return value>>self."], [287, 1, 1, "", "__rshift__", "Return self>>value."], [288, 1, 1, "", "__rsub__", "Return value-self."], [289, 1, 1, "", "__rtruediv__", "Return value/self."], [290, 1, 1, "", "__rxor__", "Return value^self."], [291, 1, 1, "", "__sizeof__", "Size of object in memory, in bytes."], [292, 1, 1, "", "__str__", "Return str(self)."], [293, 1, 1, "", "__sub__", "Return self-value."], [294, 1, 1, "", "__truediv__", "Return self/value."], [295, 1, 1, "", "__xor__", "Return self^value."], [296, 1, 1, "", "all", "Scalar method identical to the corresponding array attribute."], [297, 1, 1, "", "any", "Scalar method identical to the corresponding array attribute."], [298, 1, 1, "", "argmax", "Scalar method identical to the corresponding array attribute."], [299, 1, 1, "", "argmin", "Scalar method identical to the corresponding array attribute."], [300, 1, 1, "", "argsort", "Scalar method identical to the corresponding array attribute."], [301, 1, 1, "", "as_integer_ratio", "Return a pair of integers, whose ratio is exactly equal to the original floating point number, and with a positive denominator. Raise OverflowError on infinities and a ValueError on NaNs."], [302, 1, 1, "", "astype", "Scalar method identical to the corresponding array attribute."], [303, 4, 1, "", "base", "Scalar attribute identical to the corresponding array attribute."], [304, 1, 1, "", "byteswap", "Scalar method identical to the corresponding array attribute."], [305, 1, 1, "", "choose", "Scalar method identical to the corresponding array attribute."], [306, 1, 1, "", "clip", "Scalar method identical to the corresponding array attribute."], [307, 1, 1, "", "compress", "Scalar method identical to the corresponding array attribute."], [308, 1, 1, "", "conj", ""], [309, 1, 1, "", "conjugate", "Scalar method identical to the corresponding array attribute."], [310, 1, 1, "", "copy", "Scalar method identical to the corresponding array attribute."], [311, 1, 1, "", "cumprod", "Scalar method identical to the corresponding array attribute."], [312, 1, 1, "", "cumsum", "Scalar method identical to the corresponding array attribute."], [313, 4, 1, "", "data", "Pointer to start of data."], [314, 1, 1, "", "diagonal", "Scalar method identical to the corresponding array attribute."], [315, 4, 1, "", "dtype", "Get array data-descriptor."], [316, 1, 1, "", "dump", "Scalar method identical to the corresponding array attribute."], [317, 1, 1, "", "dumps", "Scalar method identical to the corresponding array attribute."], [318, 1, 1, "", "fill", "Scalar method identical to the corresponding array attribute."], [319, 4, 1, "", "flags", "The integer value of flags."], [320, 4, 1, "", "flat", "A 1-D view of the scalar."], [321, 1, 1, "", "flatten", "Scalar method identical to the corresponding array attribute."], [322, 1, 1, "", "getfield", "Scalar method identical to the corresponding array attribute."], [323, 4, 1, "", "imag", "The imaginary part of the scalar."], [324, 1, 1, "", "is_integer", "Return True if the floating point number is finite with integral value, and False otherwise."], [325, 1, 1, "", "item", "Scalar method identical to the corresponding array attribute."], [326, 1, 1, "", "itemset", "Scalar method identical to the corresponding array attribute."], [327, 4, 1, "", "itemsize", "The length of one element in bytes."], [328, 1, 1, "", "max", "Scalar method identical to the corresponding array attribute."], [329, 1, 1, "", "mean", "Scalar method identical to the corresponding array attribute."], [330, 1, 1, "", "min", "Scalar method identical to the corresponding array attribute."], [331, 4, 1, "", "nbytes", "The length of the scalar in bytes."], [332, 4, 1, "", "ndim", "The number of array dimensions."], [333, 1, 1, "", "newbyteorder", "Return a new dtype with a different byte order."], [334, 1, 1, "", "nonzero", "Scalar method identical to the corresponding array attribute."], [335, 1, 1, "", "prod", "Scalar method identical to the corresponding array attribute."], [336, 1, 1, "", "ptp", "Scalar method identical to the corresponding array attribute."], [337, 1, 1, "", "put", "Scalar method identical to the corresponding array attribute."], [338, 1, 1, "", "ravel", "Scalar method identical to the corresponding array attribute."], [339, 4, 1, "", "real", "The real part of the scalar."], [340, 1, 1, "", "repeat", "Scalar method identical to the corresponding array attribute."], [341, 1, 1, "", "reshape", "Scalar method identical to the corresponding array attribute."], [342, 1, 1, "", "resize", "Scalar method identical to the corresponding array attribute."], [343, 1, 1, "", "round", "Scalar method identical to the corresponding array attribute."], [344, 1, 1, "", "searchsorted", "Scalar method identical to the corresponding array attribute."], [345, 1, 1, "", "setfield", "Scalar method identical to the corresponding array attribute."], [346, 1, 1, "", "setflags", "Scalar method identical to the corresponding array attribute."], [347, 4, 1, "", "shape", "Tuple of array dimensions."], [348, 4, 1, "", "size", "The number of elements in the gentype."], [349, 1, 1, "", "sort", "Scalar method identical to the corresponding array attribute."], [350, 1, 1, "", "squeeze", "Scalar method identical to the corresponding array attribute."], [351, 1, 1, "", "std", "Scalar method identical to the corresponding array attribute."], [352, 4, 1, "", "strides", "Tuple of bytes steps in each dimension."], [353, 1, 1, "", "sum", "Scalar method identical to the corresponding array attribute."], [354, 1, 1, "", "swapaxes", "Scalar method identical to the corresponding array attribute."], [355, 1, 1, "", "take", "Scalar method identical to the corresponding array attribute."], [356, 1, 1, "", "tobytes", ""], [357, 1, 1, "", "tofile", "Scalar method identical to the corresponding array attribute."], [358, 1, 1, "", "tolist", "Scalar method identical to the corresponding array attribute."], [359, 1, 1, "", "tostring", "Scalar method identical to the corresponding array attribute."], [360, 1, 1, "", "trace", "Scalar method identical to the corresponding array attribute."], [361, 1, 1, "", "transpose", "Scalar method identical to the corresponding array attribute."], [362, 1, 1, "", "var", "Scalar method identical to the corresponding array attribute."], [363, 1, 1, "", "view", "Scalar method identical to the corresponding array attribute."]], "foxes.constants.ITYPE": [[367, 1, 1, "", "__abs__", "abs(self)"], [368, 1, 1, "", "__add__", "Return self+value."], [369, 1, 1, "", "__and__", "Return self&value."], [370, 1, 1, "", "__bool__", "self != 0"], [371, 1, 1, "", "__class_getitem__", "Return a parametrized wrapper around the ~numpy.number type."], [372, 1, 1, "", "__divmod__", "Return divmod(self, value)."], [373, 1, 1, "", "__eq__", "Return self==value."], [374, 1, 1, "", "__float__", "float(self)"], [375, 1, 1, "", "__floordiv__", "Return self//value."], [376, 1, 1, "", "__ge__", "Return self>=value."], [377, 1, 1, "", "__gt__", "Return self>value."], [378, 1, 1, "", "__hash__", "Return hash(self)."], [379, 1, 1, "", "__index__", "Return self converted to an integer, if self is suitable for use as an index into a list."], [380, 1, 1, "", "__int__", "int(self)"], [381, 1, 1, "", "__invert__", "~self"], [382, 1, 1, "", "__le__", "Return self<=value."], [383, 1, 1, "", "__lshift__", "Return self<<value."], [384, 1, 1, "", "__lt__", "Return self<value."], [385, 1, 1, "", "__mod__", "Return self%value."], [386, 1, 1, "", "__mul__", "Return self*value."], [387, 1, 1, "", "__ne__", "Return self!=value."], [388, 1, 1, "", "__neg__", "-self"], [389, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [390, 1, 1, "", "__or__", "Return self|value."], [391, 1, 1, "", "__pos__", "+self"], [392, 1, 1, "", "__pow__", "Return pow(self, value, mod)."], [393, 1, 1, "", "__radd__", "Return value+self."], [394, 1, 1, "", "__rand__", "Return value&self."], [395, 1, 1, "", "__rdivmod__", "Return divmod(value, self)."], [396, 1, 1, "", "__repr__", "Return repr(self)."], [397, 1, 1, "", "__rfloordiv__", "Return value//self."], [398, 1, 1, "", "__rlshift__", "Return value<<self."], [399, 1, 1, "", "__rmod__", "Return value%self."], [400, 1, 1, "", "__rmul__", "Return value*self."], [401, 1, 1, "", "__ror__", "Return value|self."], [402, 1, 1, "", "__rpow__", "Return pow(value, self, mod)."], [403, 1, 1, "", "__rrshift__", "Return value>>self."], [404, 1, 1, "", "__rshift__", "Return self>>value."], [405, 1, 1, "", "__rsub__", "Return value-self."], [406, 1, 1, "", "__rtruediv__", "Return value/self."], [407, 1, 1, "", "__rxor__", "Return value^self."], [408, 1, 1, "", "__str__", "Return str(self)."], [409, 1, 1, "", "__sub__", "Return self-value."], [410, 1, 1, "", "__truediv__", "Return self/value."], [411, 1, 1, "", "__xor__", "Return self^value."], [412, 1, 1, "", "bit_count", "Computes the number of 1-bits in the absolute value of the input. Analogous to the builtin int.bit_count or popcount in C++."], [413, 4, 1, "", "denominator", "denominator of value (1)"], [414, 1, 1, "", "is_integer", "Return True if the number is finite with integral value."], [415, 4, 1, "", "numerator", "numerator of value (the value itself)"]], "foxes.core": [[102, 0, 1, "", "Algorithm", "Abstract base class for algorithms."], [117, 0, 1, "", "Data", "Container for data and meta data."], [125, 0, 1, "", "DataCalcModel", "Abstract base class for models with that run calculation on xarray Dataset data."], [128, 0, 1, "", "ExtendedStates", "States extended by point data models."], [137, 0, 1, "", "FarmController", "Analyses selected turbine models and handles their call."], [147, 0, 1, "", "FarmDataModel", "Abstract base class for models that modify farm data."], [152, 0, 1, "", "FarmDataModelList", "A list of farm data models."], [159, 0, 1, "", "FarmModel", "A FarmDataModel that operates on the farm level (in contrast to a TurbineModel, which allows application to a subset of turbines)."], [160, 0, 1, "", "Model", "Base class for all models."], [173, 0, 1, "", "PartialWakesModel", "Abstract base class for partial wakes models."], [181, 0, 1, "", "PointDataModel", "Abstract base class for models that modify point based data."], [185, 0, 1, "", "PointDataModelList", "A list of point data models."], [191, 0, 1, "", "RotorModel", "Abstract base class of rotor models."], [200, 0, 1, "", "States", "Abstract base class for states."], [206, 0, 1, "", "Turbine", "An individual wind turbine."], [210, 0, 1, "", "TurbineModel", "Abstract base class for turbine models."], [212, 0, 1, "", "TurbineType", "Abstract base class for turbine type models."], [214, 0, 1, "", "VerticalProfile", "Abstract base class for vertical profiles."], [218, 0, 1, "", "WakeFrame", "Abstract base class for wake frames."], [224, 0, 1, "", "WakeModel", "Abstract base class for wake models."], [228, 0, 1, "", "WakeSuperposition", "Abstract base class for wake superposition models."], [231, 0, 1, "", "WindFarm", "The wind farm."]], "foxes.core.Algorithm": [[103, 1, 1, "", "__init__", "Constructor."], [104, 1, 1, "", "chunked", ""], [105, 1, 1, "", "del_model_data", "Remove stored model data"], [106, 1, 1, "", "finalize", "Finalizes the algorithm."], [107, 1, 1, "", "get_model_data", "Gets model data from memory"], [108, 1, 1, "", "get_models_data", "Creates xarray from model input data."], [109, 1, 1, "", "get_models_idata", "Returns idata object of models"], [110, 2, 1, "", "idata_mem", "The current idata memory"], [111, 1, 1, "", "initialize", "Initializes the algorithm."], [112, 1, 1, "", "new", "Run-time algorithm factory."], [113, 1, 1, "", "new_point_data", "Creates a point data xarray object, containing only points."], [114, 1, 1, "", "print", "Print function, based on verbosity."], [115, 1, 1, "", "store_model_data", "Store model data"], [116, 1, 1, "", "update_n_turbines", "Reset the number of turbines, according to self.farm"]], "foxes.core.Data": [[118, 1, 1, "", "__init__", "Constructor."], [119, 1, 1, "", "add", "Add data entry"], [120, 1, 1, "", "from_points", "Create from points"], [121, 2, 1, "", "n_points", "The number of points"], [122, 2, 1, "", "n_states", "The number of states"], [123, 2, 1, "", "n_turbines", "The number of turbines"], [124, 1, 1, "", "states_i0", "Get the state counter for first state in chunk"]], "foxes.core.DataCalcModel": [[126, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [127, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.ExtendedStates": [[129, 1, 1, "", "__init__", "Constructor."], [130, 1, 1, "", "append", "Add a model to the list"], [131, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [132, 1, 1, "", "index", "The index list"], [133, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [134, 1, 1, "", "size", "The total number of states."], [135, 1, 1, "", "sub_models", "List of all sub-models"], [136, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.FarmController": [[138, 1, 1, "", "__init__", "Constructor."], [139, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [140, 1, 1, "", "collect_models", "Analyze and gather turbine models, based on the turbines of the wind farm."], [141, 1, 1, "", "finalize", "Finalizes the model."], [142, 1, 1, "", "initialize", "Initializes the model."], [143, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [144, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [145, 1, 1, "", "set_pars", "Set parameters for a turbine model"], [146, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.core.FarmDataModel": [[148, 1, 1, "", "__init__", "Constructor."], [149, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [150, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [151, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.FarmDataModelList": [[153, 1, 1, "", "__init__", "Constructor."], [154, 1, 1, "", "append", "Add a model to the list"], [155, 1, 1, "", "calculate", "The main model calculation."], [156, 1, 1, "", "insert", "Insert a model into the list"], [157, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [158, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.core.Model": [[161, 1, 1, "", "__init__", "Constructor."], [162, 1, 1, "", "__repr__", "Return repr(self)."], [163, 1, 1, "", "data_to_store", "Adds data from mdata to the local store, intended for iterative runs."], [164, 1, 1, "", "finalize", "Finalizes the model."], [165, 1, 1, "", "from_data_or_store", "Get data from mdata or local store"], [166, 1, 1, "", "get_data", "Getter for a data entry in the model object or provided data sources"], [167, 1, 1, "", "initialize", "Initializes the model."], [168, 2, 1, "", "initialized", "Initialization flag."], [169, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [170, 2, 1, "", "model_id", "Unique id based on the model type."], [171, 1, 1, "", "sub_models", "List of all sub-models"], [172, 1, 1, "", "var", "Creates a model specific variable name."]], "foxes.core.PartialWakesModel": [[174, 1, 1, "", "__init__", "Constructor."], [175, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [176, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [177, 1, 1, "", "initialize", "Initializes the model."], [178, 1, 1, "", "new", "Run-time partial wakes factory."], [179, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."], [180, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.core.PointDataModel": [[182, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [183, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [184, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes.core.PointDataModelList": [[186, 1, 1, "", "__init__", "Constructor."], [187, 1, 1, "", "append", "Add a model to the list"], [188, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [189, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [190, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.core.RotorModel": [[192, 1, 1, "", "__init__", "Constructor."], [193, 1, 1, "", "calculate", "Calculate ambient rotor effective results."], [194, 1, 1, "", "design_points", "The rotor model design points."], [195, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [196, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [197, 1, 1, "", "n_rotor_points", "The number of rotor points"], [198, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [199, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.core.States": [[201, 1, 1, "", "index", "The index list"], [202, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [203, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [204, 1, 1, "", "size", "The total number of states."], [205, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.core.Turbine": [[207, 1, 1, "", "__init__", "Constructor."], [208, 1, 1, "", "add_model", "Add a turbine model to the list."], [209, 1, 1, "", "insert_model", "Insert a turbine model into the list of models."]], "foxes.core.TurbineModel": [[211, 1, 1, "", "calculate", "The main model calculation."]], "foxes.core.TurbineType": [[213, 1, 1, "", "__init__", "Constructor."]], "foxes.core.VerticalProfile": [[215, 1, 1, "", "calculate", "Run the profile calculation."], [216, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."], [217, 1, 1, "", "new", "Run-time profile factory."]], "foxes.core.WakeFrame": [[219, 1, 1, "", "calc_centreline_integral", "Integrates variables along the centreline."], [220, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [221, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [222, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [223, 1, 1, "", "get_wake_modelling_data", "Return data that is required for computing the wake from source turbines to evaluation points."]], "foxes.core.WakeModel": [[225, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [226, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [227, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.core.WakeSuperposition": [[229, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [230, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.core.WindFarm": [[232, 1, 1, "", "__init__", "Constructor."], [233, 1, 1, "", "add_turbine", "Add a wind turbine to the list."], [234, 2, 1, "", "n_turbines", "The number of turbines in the wind farm"], [235, 2, 1, "", "turbine_names", "The list of names of all turbines"]], "foxes.data": [[236, 0, 1, "", "StaticData", "A DataBook filled with static data from this directory."], [238, 5, 1, "", "parse_Pct_file_name", "Parse basic turbine data from file name"], [239, 5, 1, "", "parse_Pct_two_files", "Parse basic turbine data from file names"]], "foxes.data.StaticData": [[237, 1, 1, "", "__init__", "Constructor."]], "foxes.input.farm_layout": [[487, 5, 1, "", "add_from_csv", "Add turbines to wind farm via csv input file."], [488, 5, 1, "", "add_from_df", "Add turbines to wind farm via pandas DataFrame."], [489, 5, 1, "", "add_from_file", "Add turbines from file."], [490, 5, 1, "", "add_from_json", "Add turbimes from a json file."], [491, 5, 1, "", "add_grid", "Add a regular grid of turbines."], [492, 5, 1, "", "add_row", "Add a single row of turbines."]], "foxes.input.states": [[493, 0, 1, "", "FieldDataNC", "Heterogeneous ambient states on a regular horizontal grid in NetCDF format."], [501, 0, 1, "", "MultiHeightStates", "States with multiple heights data per entry."], [512, 0, 1, "", "MultiHeightTimeseries", "Multi-height timeseries states data."], [514, 0, 1, "", "ScanWS", "A given list of wind speeds, all other variables are fixed."], [521, 0, 1, "", "SingleStateStates", "A single uniform state."], [529, 0, 1, "", "StatesTable", "States from a pandas.DataFrame or a pandas readable file."], [542, 0, 1, "", "Timeseries", "Timeseries states data."], [544, 5, 1, "", "create_random_abl_states", "Create random abl states."]], "foxes.input.states.FieldDataNC": [[494, 1, 1, "", "__init__", "Constructor."], [495, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [496, 1, 1, "", "index", "The index list"], [497, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [498, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [499, 1, 1, "", "size", "The total number of states."], [500, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightStates": [[502, 4, 1, "", "RDICT", ""], [503, 1, 1, "", "__init__", "Constructor."], [504, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [505, 1, 1, "", "finalize", "Finalizes the model."], [506, 1, 1, "", "index", "The index list"], [507, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [508, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [509, 1, 1, "", "reset", "Reset the states, optionally select states"], [510, 1, 1, "", "size", "The total number of states."], [511, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.MultiHeightTimeseries": [[513, 4, 1, "", "RDICT", ""]], "foxes.input.states.ScanWS": [[515, 1, 1, "", "__init__", "Constructor."], [516, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [517, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [518, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [519, 1, 1, "", "size", "The total number of states."], [520, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.SingleStateStates": [[522, 1, 1, "", "__init__", "Constructor."], [523, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [524, 1, 1, "", "initialize", "Initializes the model."], [525, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [526, 1, 1, "", "size", "The total number of states."], [527, 1, 1, "", "sub_models", "List of all sub-models"], [528, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.StatesTable": [[530, 4, 1, "", "RDICT", ""], [531, 1, 1, "", "__init__", "Constructor."], [532, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [533, 1, 1, "", "finalize", "Finalizes the model."], [534, 1, 1, "", "index", "The index list"], [535, 1, 1, "", "initialize", "Initializes the model."], [536, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [537, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [538, 1, 1, "", "reset", "Reset the states, optionally select states"], [539, 1, 1, "", "size", "The total number of states."], [540, 1, 1, "", "sub_models", "List of all sub-models"], [541, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.input.states.Timeseries": [[543, 4, 1, "", "RDICT", ""]], "foxes.input.windio": [[545, 5, 1, "", "read_case", "Reads a WindIO case"]], "foxes.models.farm_controllers": [[546, 0, 1, "", "BasicFarmController", "The basic farm controller, running all turbine models in their order, without conditions."]], "foxes.models.farm_models": [[547, 0, 1, "", "Turbine2FarmModel", "Wrapper that promotes turbine models into farm models, simply by selecting all turbines."]], "foxes.models.farm_models.Turbine2FarmModel": [[548, 1, 1, "", "__init__", "Constructor."], [549, 1, 1, "", "__repr__", "Return repr(self)."], [550, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [551, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [552, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.model_book": [[553, 0, 1, "", "Dict", "A slightly enhanced dictionary."], [556, 0, 1, "", "ModelBook", "Container for all kinds of models."]], "foxes.models.model_book.Dict": [[554, 1, 1, "", "__getitem__", "x.__getitem__(y) <==> x[y]"], [555, 1, 1, "", "__init__", "Constructor."]], "foxes.models.model_book.ModelBook": [[557, 1, 1, "", "__getitem__", ""], [558, 1, 1, "", "__init__", "Constructor."], [559, 1, 1, "", "finalize", "Finalizes the model."], [560, 1, 1, "", "print_toc", "Print the contents."]], "foxes.models.partial_wakes": [[561, 0, 1, "", "Mapped", "Partial wake models depending on the wake model (type)."], [568, 0, 1, "", "PartialAxiwake", "Partial wake calculation for axial wake models."], [576, 0, 1, "", "PartialDistSlicedWake", "Partial wakes for distance sliced wake models, making use of their structure."], [584, 0, 1, "", "PartialGrid", "Partial wakes on a grid rotor that may differ from the one in the algorithm."], [587, 0, 1, "", "PartialTopHat", "Partial wakes for top-hat models."], [594, 0, 1, "", "RotorPoints", "Partial wakes calculation directly by the rotor model."]], "foxes.models.partial_wakes.Mapped": [[562, 1, 1, "", "__init__", "Constructor."], [563, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [564, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [565, 1, 1, "", "initialize", "Initializes the model."], [566, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."], [567, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.partial_wakes.PartialAxiwake": [[569, 1, 1, "", "__init__", "Constructor."], [570, 1, 1, "", "__repr__", "Return repr(self)."], [571, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [572, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [573, 1, 1, "", "initialize", "Initializes the model."], [574, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."], [575, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.partial_wakes.PartialDistSlicedWake": [[577, 1, 1, "", "__init__", "Constructor."], [578, 1, 1, "", "__repr__", "Return repr(self)."], [579, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [580, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [581, 1, 1, "", "initialize", "Initializes the model."], [582, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."], [583, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.partial_wakes.PartialGrid": [[585, 1, 1, "", "__init__", "Constructor."], [586, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."]], "foxes.models.partial_wakes.PartialTopHat": [[588, 1, 1, "", "__init__", "Constructor."], [589, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [590, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [591, 1, 1, "", "initialize", "Initializes the model."], [592, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."], [593, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.partial_wakes.RotorPoints": [[595, 1, 1, "", "__init__", "Constructor."], [596, 1, 1, "", "contribute_to_wake_deltas", "Modifies wake deltas by contributions from the specified wake source turbines."], [597, 1, 1, "", "evaluate_results", "Updates the farm data according to the wake deltas."], [598, 1, 1, "", "get_wake_points", "Get the wake calculation points."], [599, 1, 1, "", "new_wake_deltas", "Creates new initial wake deltas, filled with zeros."]], "foxes.models.point_models": [[600, 0, 1, "", "SetUniformData", "Set uniform data (can be state dependent)"], [605, 0, 1, "", "TKE2TI", "Calculates TI from TKE, using TI = sqrt( 3/2 * TKE) / WS"], [608, 0, 1, "", "WakeDeltas", "This point model simply subtracts ambient results from waked results."]], "foxes.models.point_models.SetUniformData": [[601, 1, 1, "", "__init__", "Constructor."], [602, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [603, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [604, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.TKE2TI": [[606, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [607, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.point_models.WakeDeltas": [[609, 1, 1, "", "__init__", "Constructor."], [610, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [611, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."]], "foxes.models.rotor_models": [[612, 0, 1, "", "CentreRotor", "The centre rotor model."], [618, 0, 1, "", "GridRotor", "The weighted regular grid rotor model, composed maximally of n x n points, possibly kicking out the outside points."], [625, 0, 1, "", "LevelRotor", "The weighted regular rotor level model, composed of of n points between lower and upper blade tip. Calculates a height-dependent REWS"]], "foxes.models.rotor_models.CentreRotor": [[613, 1, 1, "", "design_points", "The rotor model design points."], [614, 1, 1, "", "eval_rpoint_results", "Evaluate rotor point results."], [615, 1, 1, "", "get_rotor_points", "Calculates rotor points from design points."], [616, 1, 1, "", "n_rotor_points", "The number of rotor points"], [617, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.GridRotor": [[619, 1, 1, "", "__init__", "Constructor."], [620, 1, 1, "", "__repr__", "Return repr(self)."], [621, 1, 1, "", "design_points", "The rotor model design points."], [622, 1, 1, "", "initialize", "Initializes the model."], [623, 1, 1, "", "n_rotor_points", "The number of rotor points"], [624, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.rotor_models.LevelRotor": [[626, 1, 1, "", "__init__", "Constructor."], [627, 1, 1, "", "__repr__", "Return repr(self)."], [628, 1, 1, "", "design_points", "The rotor model design points."], [629, 1, 1, "", "initialize", "Initializes the model."], [630, 1, 1, "", "n_rotor_points", "The number of rotor points"], [631, 1, 1, "", "rotor_point_weights", "The weights of the rotor points"]], "foxes.models.turbine_models": [[632, 0, 1, "", "Calculator", "Calculates variables based on given functions."], [636, 0, 1, "", "LookupTable", "Calculates the data by interpolation of lookup-table data"], [641, 0, 1, "", "PowerMask", "Invokes a maximal power value."], [647, 0, 1, "", "RotorCentreCalc", "Calculates data at the rotor centre"], [653, 0, 1, "", "SectorManagement", "Changes variables based on variable range conditions."], [658, 0, 1, "", "SetFarmVars", "Set farm data variables to given data."], [665, 0, 1, "", "SetXYHD", "Sets basic turbine data, from turbine object to farm data."], [669, 0, 1, "", "TableFactors", "Multiplies variables by factors from a two dimensional table."], [674, 0, 1, "", "Thrust2Ct", "Calculates ct from thrust force data."], [678, 0, 1, "", "YAW2YAWM", "Calculates delta yaw (i.e. YAWM) from absolute yaw (i.e. YAW)"], [681, 0, 1, "", "YAWM2YAW", "Calculates absolute yaw (i.e. YAWM) from delta yaw (i.e. YAWM)"], [684, 0, 1, "", "kTI", "Calculates the wake model parameter k as a linear function of TI."]], "foxes.models.turbine_models.Calculator": [[633, 1, 1, "", "__init__", "Constructor."], [634, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [635, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.LookupTable": [[637, 1, 1, "", "__init__", "Constructor."], [638, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [639, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [640, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.PowerMask": [[642, 1, 1, "", "__init__", "Constructor."], [643, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [644, 1, 1, "", "initialize", "Initializes the model."], [645, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [646, 1, 1, "", "update_P_ct", ""]], "foxes.models.turbine_models.RotorCentreCalc": [[648, 1, 1, "", "__init__", "Constructor."], [649, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [650, 1, 1, "", "initialize", "Initializes the model."], [651, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [652, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.turbine_models.SectorManagement": [[654, 1, 1, "", "__init__", "Constructor."], [655, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [656, 1, 1, "", "initialize", "Initializes the model."], [657, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.SetFarmVars": [[659, 1, 1, "", "__init__", "Constructor."], [660, 1, 1, "", "add_var", "Add data for a variable."], [661, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [662, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [663, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."], [664, 1, 1, "", "reset", "Remove all variables."]], "foxes.models.turbine_models.SetXYHD": [[666, 1, 1, "", "__init__", "Constructor."], [667, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [668, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.TableFactors": [[670, 1, 1, "", "__init__", "Constructor."], [671, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [672, 1, 1, "", "initialize", "Initializes the model."], [673, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.Thrust2Ct": [[675, 1, 1, "", "__init__", "Constructor."], [676, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [677, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAW2YAWM": [[679, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [680, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.YAWM2YAW": [[682, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [683, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_models.kTI": [[685, 1, 1, "", "__init__", "Constructor."], [686, 1, 1, "", "__repr__", "Return repr(self)."], [687, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [688, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types": [[689, 0, 1, "", "CpCtFile", "Calculate power and ct by interpolating from cp-ct-curve data file (or pandas DataFrame)."], [691, 0, 1, "", "CpCtFromTwo", "Calculate power and ct by interpolating cp and ct from two files (or two pandas DataFrames)."], [693, 0, 1, "", "NullType", "A turbine type that does not compute any data."], [696, 0, 1, "", "PCtFile", "Calculate power and ct by interpolating from power-ct-curve data file (or pandas DataFrame)."], [702, 0, 1, "", "PCtFromTwo", "Calculate power and ct by interpolating from power curve and ct curve data files."], [708, 0, 1, "", "WsRho2PCtFromTwo", "Calculate air density dependent power and ct values, as given by two individual files."], [714, 0, 1, "", "WsTI2PCtFromTwo", "Calculate turbulent intensity dependent power and ct values, as given by two individual files."]], "foxes.models.turbine_types.CpCtFile": [[690, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.CpCtFromTwo": [[692, 1, 1, "", "__init__", "Constructor."]], "foxes.models.turbine_types.NullType": [[694, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [695, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFile": [[697, 1, 1, "", "__init__", "Constructor."], [698, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [699, 1, 1, "", "finalize", "Finalizes the model."], [700, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [701, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.PCtFromTwo": [[703, 1, 1, "", "__init__", "Constructor."], [704, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [705, 1, 1, "", "finalize", "Finalizes the model."], [706, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [707, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsRho2PCtFromTwo": [[709, 1, 1, "", "__init__", "Constructor."], [710, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [711, 1, 1, "", "finalize", "Finalizes the model."], [712, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [713, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.turbine_types.WsTI2PCtFromTwo": [[715, 1, 1, "", "__init__", "Constructor."], [716, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [717, 1, 1, "", "finalize", "Finalizes the model."], [718, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [719, 1, 1, "", "output_farm_vars", "The variables which are being modified by the model."]], "foxes.models.vertical_profiles": [[720, 0, 1, "", "ABLLogNeutralWsProfile", "The neutral ABL wind speed log profile."], [723, 0, 1, "", "ABLLogStableWsProfile", "The stable ABL wind speed log profile."], [726, 0, 1, "", "ABLLogUnstableWsProfile", "The unstable ABL wind speed log profile."], [729, 0, 1, "", "ABLLogWsProfile", "The neutral/stable/unstable ABL wind speed log profile."], [732, 0, 1, "", "DataProfile", "A profile based on numerical data."], [736, 0, 1, "", "ShearedProfile", "A wind shear profile, based on a shear exponent."], [739, 0, 1, "", "UniformProfile", "A profile with uniform values."]], "foxes.models.vertical_profiles.ABLLogNeutralWsProfile": [[721, 1, 1, "", "calculate", "Run the profile calculation."], [722, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogStableWsProfile": [[724, 1, 1, "", "calculate", "Run the profile calculation."], [725, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogUnstableWsProfile": [[727, 1, 1, "", "calculate", "Run the profile calculation."], [728, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ABLLogWsProfile": [[730, 1, 1, "", "calculate", "Run the profile calculation."], [731, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.DataProfile": [[733, 1, 1, "", "__init__", "Constructor"], [734, 1, 1, "", "calculate", "Run the profile calculation."], [735, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.ShearedProfile": [[737, 1, 1, "", "calculate", "Run the profile calculation."], [738, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.vertical_profiles.UniformProfile": [[740, 1, 1, "", "__init__", "Constructor"], [741, 1, 1, "", "calculate", "Run the profile calculation."], [742, 1, 1, "", "input_vars", "The input variables needed for the profile calculation."]], "foxes.models.wake_frames": [[743, 0, 1, "", "FarmOrder", "Invokes turbine ordering as defined by the wind farm."], [749, 0, 1, "", "RotorWD", "Align the first axis for each rotor with the local normalized wind direction."], [754, 0, 1, "", "SeqDynamicWakes", "Dynamic wakes for the sequential algorithm."], [761, 0, 1, "", "Streamlines", "Streamline following wakes"], [768, 0, 1, "", "Timelines", "Dynamic wakes for spatially uniform timeseries states."], [774, 0, 1, "", "YawedWakes", "Bend the wakes for yawed turbines."]], "foxes.models.wake_frames.FarmOrder": [[744, 1, 1, "", "__init__", "Constructor."], [745, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [746, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [747, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [748, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_frames.RotorWD": [[750, 1, 1, "", "__init__", "Constructor."], [751, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [752, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [753, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."]], "foxes.models.wake_frames.SeqDynamicWakes": [[755, 1, 1, "", "__init__", "Constructor."], [756, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [757, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [758, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [759, 1, 1, "", "get_wake_modelling_data", "Return data that is required for computing the wake from source turbines to evaluation points."], [760, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.Streamlines": [[762, 1, 1, "", "__init__", "Constructor."], [763, 1, 1, "", "__repr__", "Return repr(self)."], [764, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [765, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [766, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [767, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.Timelines": [[769, 1, 1, "", "__init__", "Constructor."], [770, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [771, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [772, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [773, 1, 1, "", "initialize", "Initializes the model."]], "foxes.models.wake_frames.YawedWakes": [[775, 1, 1, "", "__init__", "Constructor."], [776, 1, 1, "", "calc_order", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [777, 1, 1, "", "get_centreline_points", "Gets the points along the centreline for given values of x."], [778, 1, 1, "", "get_wake_coos", "Calculate wake coordinates."], [779, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models": [[780, 0, 1, "", "AxisymmetricWakeModel", "Abstract base class for wake models that depend on (x, r) separately."], [783, 0, 1, "", "DistSlicedWakeModel", "Abstract base class for wake models for which the x-denpendency can be separated from the yz-dependency."], [790, 0, 1, "", "GaussianWakeModel", "Abstract base class for Gaussian wake models."], [793, 0, 1, "", "TopHatWakeModel", "Abstract base class for top-hat wake models."]], "foxes.models.wake_models.AxisymmetricWakeModel": [[781, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."], [782, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."]], "foxes.models.wake_models.DistSlicedWakeModel": [[784, 1, 1, "", "__init__", "Constructor."], [785, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [786, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [787, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [788, 1, 1, "", "initialize", "Initializes the model."], [789, 1, 1, "", "sub_models", "List of all sub-models"]], "foxes.models.wake_models.GaussianWakeModel": [[791, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [792, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.TopHatWakeModel": [[794, 1, 1, "", "__init__", "Constructor."], [795, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [796, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [797, 1, 1, "", "calc_wakes_spsel_x_r", "Calculate wake deltas."]], "foxes.models.wake_models.induction": [[798, 0, 1, "", "RHB", "The Rankine half body induction wake model"]], "foxes.models.wake_models.induction.RHB": [[799, 1, 1, "", "__init__", "Constructor."], [800, 1, 1, "", "contribute_to_wake_deltas", "Calculate the contribution to the wake deltas by this wake model."], [801, 1, 1, "", "finalize_wake_deltas", "Finalize the wake calculation."], [802, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.ti": [[803, 0, 1, "", "CrespoHernandezTIWake", "The Crespo and Hernandez TI empirical correlation"], [809, 0, 1, "", "IECTIWake", "The TI wake model from IEC-64100-1-2005-8 (2005):"]], "foxes.models.wake_models.ti.CrespoHernandezTIWake": [[804, 1, 1, "", "__init__", "Constructor."], [805, 1, 1, "", "__repr__", "Return repr(self)."], [806, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [807, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [808, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.ti.IECTIWake": [[810, 1, 1, "", "__init__", "Constructor."], [811, 1, 1, "", "__repr__", "Return repr(self)."], [812, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [813, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [814, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind": [[815, 0, 1, "", "BastankhahWake", "The Bastankhah wake model"], [820, 0, 1, "", "JensenWake", "The Jensen wake model."], [826, 0, 1, "", "PorteAgelModel", "Common calculations for the wake model and the wake frame, such that code repetitions can be avoided."], [847, 0, 1, "", "PorteAgelWake", "The Bastankhah PorteAgel wake model"], [852, 0, 1, "", "TurbOParkWake", "The TurbOPark wake model"], [857, 0, 1, "", "TurbOParkWakeIX", "The generalized TurbOPark wake model, integrating TI over the streamline."]], "foxes.models.wake_models.wind.BastankhahWake": [[816, 1, 1, "", "__init__", "Constructor."], [817, 1, 1, "", "__repr__", "Return repr(self)."], [818, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [819, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.JensenWake": [[821, 1, 1, "", "__init__", "Constructor."], [822, 1, 1, "", "__repr__", "Return repr(self)."], [823, 1, 1, "", "calc_centreline_wake_deltas", "Calculate centre line results of wake deltas."], [824, 1, 1, "", "calc_wake_radius", "Calculate the wake radius, depending on x only (not r)."], [825, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.PorteAgelModel": [[827, 4, 1, "", "AMPL_FAR", ""], [828, 4, 1, "", "AMPL_NEAR", ""], [829, 4, 1, "", "CHECK", ""], [830, 4, 1, "", "DELTA_FAR", ""], [831, 4, 1, "", "DELTA_NEAR", ""], [832, 4, 1, "", "MDATA_KEY", ""], [833, 4, 1, "", "NEAR", ""], [834, 4, 1, "", "PARS", ""], [835, 4, 1, "", "R_PC", ""], [836, 4, 1, "", "R_PC_S", ""], [837, 4, 1, "", "SIGMA_Y_FAR", ""], [838, 4, 1, "", "SIGMA_Z_FAR", ""], [839, 4, 1, "", "SP_SEL", ""], [840, 4, 1, "", "X0", ""], [841, 1, 1, "", "__init__", "Constructor."], [842, 1, 1, "", "calc_data", "Calculate common model data, store it in mdata."], [843, 1, 1, "", "clean", "Clean all data"], [844, 1, 1, "", "get_data", "Return data entry"], [845, 1, 1, "", "has_data", "Check if data exists"], [846, 2, 1, "", "pars", "Dictionary of the model parameters"]], "foxes.models.wake_models.wind.PorteAgelWake": [[848, 1, 1, "", "__init__", "Constructor."], [849, 1, 1, "", "__repr__", "Return repr(self)."], [850, 1, 1, "", "calc_wakes_spsel_x_yz", "Calculate wake deltas."], [851, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWake": [[853, 1, 1, "", "__init__", "Constructor."], [854, 1, 1, "", "__repr__", "Return repr(self)."], [855, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [856, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_models.wind.TurbOParkWakeIX": [[858, 1, 1, "", "__init__", "Constructor."], [859, 1, 1, "", "__repr__", "Return repr(self)."], [860, 1, 1, "", "calc_amplitude_sigma_spsel", "Calculate the amplitude and the sigma, both depend only on x (not on r)."], [861, 1, 1, "", "finalize", "Finalizes the model."], [862, 1, 1, "", "init_wake_deltas", "Initialize wake delta storage."]], "foxes.models.wake_superpositions": [[863, 0, 1, "", "LinearSuperposition", "Linear supersposition of wake model results, optionally rescaled."], [868, 0, 1, "", "MaxSuperposition", "Maximum supersposition of wake model results, optionally rescaled."], [874, 0, 1, "", "ProductSuperposition", "Product wind wake superposition."], [878, 0, 1, "", "QuadraticSuperposition", "Quadratic supersposition of wake model results, optionally rescaled."], [884, 0, 1, "", "TISuperposition", "A collection of superpositions for TI."]], "foxes.models.wake_superpositions.LinearSuperposition": [[864, 1, 1, "", "__init__", "Constructor."], [865, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [866, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [867, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.MaxSuperposition": [[869, 1, 1, "", "__init__", "Constructor."], [870, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [871, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [872, 1, 1, "", "initialize", "Initializes the model."], [873, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.ProductSuperposition": [[875, 1, 1, "", "__init__", "Constructor."], [876, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [877, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.models.wake_superpositions.QuadraticSuperposition": [[879, 1, 1, "", "__init__", "Constructor."], [880, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [881, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."], [882, 1, 1, "", "initialize", "Initializes the model."], [883, 1, 1, "", "input_farm_vars", "The variables which are needed for running the model."]], "foxes.models.wake_superpositions.TISuperposition": [[885, 1, 1, "", "__init__", "Constructor."], [886, 1, 1, "", "calc_final_wake_delta", "Calculate the final wake delta after adding all contributions."], [887, 1, 1, "", "calc_wakes_plus_wake", "Add a wake delta to previous wake deltas."]], "foxes.opt.constraints": [[1034, 0, 1, "", "AreaGeometryConstraint", "Constrains turbine positions to the inside of a given area geometry."], [1055, 0, 1, "", "FarmBoundaryConstraint", "Constrains turbine positions to the inside of the wind farm boundary"], [1057, 0, 1, "", "MinDistConstraint", "Turbines must keep at least a minimal spatial distance."]], "foxes.opt.constraints.AreaGeometryConstraint": [[1035, 1, 1, "", "__init__", "Constructor."], [1036, 1, 1, "", "__str__", "Get info string"], [1037, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [1038, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1039, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1040, 2, 1, "", "component_names", "The names of the components"], [1041, 1, 1, "", "finalize", "Finalize the object."], [1042, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1043, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [1044, 1, 1, "", "initialize", "Initialize the object."], [1045, 2, 1, "", "initialized", "Flag for finished initialization"], [1046, 1, 1, "", "n_components", "Returns the number of components of the function."], [1047, 2, 1, "", "n_vars_float", "The number of float variables"], [1048, 2, 1, "", "n_vars_int", "The number of int variables"], [1049, 1, 1, "", "rename_vars_float", "Rename float variables."], [1050, 1, 1, "", "rename_vars_int", "Rename integer variables."], [1051, 2, 1, "", "var_names_float", "The names of the float variables"], [1052, 2, 1, "", "var_names_int", "The names of the integer variables"], [1053, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [1054, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "foxes.opt.constraints.FarmBoundaryConstraint": [[1056, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.constraints.MinDistConstraint": [[1058, 1, 1, "", "__init__", "Constructor."], [1059, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1060, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1061, 1, 1, "", "initialize", "Initialize the constaint."], [1062, 1, 1, "", "n_components", "Returns the number of components of the function."], [1063, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core": [[1064, 0, 1, "", "FarmConstraint", "Abstract base class for foxes wind farm optimization constraints."], [1075, 0, 1, "", "FarmObjective", "Abstract base class for foxes wind farm objective functions."], [1082, 0, 1, "", "FarmOptProblem", "Abstract base class of wind farm optimization problems."], [1126, 0, 1, "", "FarmVarsProblem", "Abstract base class for models that optimize farm variables."], [1132, 0, 1, "", "PopStates", "Helper class for vectorized opt population calculation, via artificial states of length n_pop times n_states."]], "foxes.opt.core.FarmConstraint": [[1065, 1, 1, "", "__init__", "Constructor."], [1066, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1067, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1068, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1069, 2, 1, "", "farm", "The wind farm"], [1070, 1, 1, "", "n_components", "Returns the number of components of the function."], [1071, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1072, 1, 1, "", "print_models", "Prints all model names."], [1073, 2, 1, "", "sel_turbines", "The list of selected turbines"], [1074, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.core.FarmObjective": [[1076, 1, 1, "", "__init__", "Constraints."], [1077, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1078, 2, 1, "", "farm", "The wind farm"], [1079, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1080, 1, 1, "", "print_models", "Prints all model names."], [1081, 2, 1, "", "sel_turbines", "The list of selected turbines"]], "foxes.opt.core.FarmOptProblem": [[1083, 4, 1, "", "INT_INF", ""], [1084, 1, 1, "", "__init__", "Constructor."], [1085, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [1086, 1, 1, "", "add_objective", "Add an objective to the problem."], [1087, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [1088, 2, 1, "", "all_turbines", "Flag for all turbines optimization"], [1089, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1090, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1091, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [1092, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [1093, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [1094, 2, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [1095, 2, 1, "", "counter", "The current value of the application counter"], [1096, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [1097, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [1098, 2, 1, "", "farm", "The wind farm"], [1099, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1100, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [1101, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [1102, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1103, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [1104, 1, 1, "", "initialize", "Initialize the object."], [1105, 2, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [1106, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1107, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1108, 2, 1, "", "maximize_objs", "Flags for objective maximization"], [1109, 2, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [1110, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1111, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1112, 2, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [1113, 2, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [1114, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [1115, 2, 1, "", "n_vars_float", "The number of float variables"], [1116, 2, 1, "", "n_vars_int", "The number of int variables"], [1117, 1, 1, "", "parse_tvar", "Parse foxes variable name and turbine index from turbine variable"], [1118, 1, 1, "", "prob_res_einsum_individual", "Calculate the einsum of problem results"], [1119, 1, 1, "", "prob_res_einsum_population", "Calculate the einsum of problem results"], [1120, 2, 1, "", "sel_turbines", "The selected turbines"], [1121, 1, 1, "", "tvar", "Gets turbine variable name"], [1122, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1123, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1124, 1, 1, "", "var_names_float", "The names of float variables."], [1125, 1, 1, "", "var_names_int", "The names of integer variables."]], "foxes.opt.core.FarmVarsProblem": [[1127, 1, 1, "", "initialize", "Initialize the object."], [1128, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1129, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1130, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1131, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."]], "foxes.opt.core.PopStates": [[1133, 1, 1, "", "__init__", "Constructor."], [1134, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [1135, 1, 1, "", "initialize", "Initializes the model."], [1136, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [1137, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [1138, 1, 1, "", "size", "The total number of states."], [1139, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes.opt.objectives": [[1140, 0, 1, "", "FarmVarObjective", "Objectives based on farm variables."], [1149, 0, 1, "", "MaxFarmPower", "Maximize the mean wind farm power"], [1151, 0, 1, "", "MaxNTurbines", "Maximizes the number of turrbines."], [1157, 0, 1, "", "MinimalMaxTI", "Minimize the maximal turbine TI"]], "foxes.opt.objectives.FarmVarObjective": [[1141, 1, 1, "", "__init__", "Constructor."], [1142, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1143, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1144, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1145, 1, 1, "", "initialize", "Initialize the object."], [1146, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1147, 1, 1, "", "n_components", "Returns the number of components of the function."], [1148, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes.opt.objectives.MaxFarmPower": [[1150, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.objectives.MaxNTurbines": [[1152, 1, 1, "", "__init__", "Constructor."], [1153, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1154, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1155, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1156, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.objectives.MinimalMaxTI": [[1158, 1, 1, "", "__init__", "Constructor."]], "foxes.opt.problems": [[1159, 0, 1, "", "OptFarmVars", "Optimize a selection of farm variables."]], "foxes.opt.problems.OptFarmVars": [[1160, 1, 1, "", "__init__", "Constructor."], [1161, 1, 1, "", "add_var", "Add a variable."], [1162, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1163, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1164, 1, 1, "", "initialize", "Initialize the object."], [1165, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1166, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1167, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1168, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1169, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1170, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1171, 1, 1, "", "var_names_float", "The names of float variables."], [1172, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout": [[1298, 0, 1, "", "FarmLayoutOptProblem", "The turbine positioning optimization problem"], [1307, 0, 1, "", "RegGridsLayoutOptProblem", "Places turbines on several regular grids and optimizes their parameters."], [1323, 0, 1, "", "RegularLayoutOptProblem", "Places turbines on a regular grid and optimizes its parameters."]], "foxes.opt.problems.layout.FarmLayoutOptProblem": [[1299, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1300, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1301, 1, 1, "", "initialize", "Initialize the object."], [1302, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1303, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1304, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1305, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1306, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.RegGridsLayoutOptProblem": [[1308, 1, 1, "", "__init__", "Constraints."], [1309, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1310, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1311, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1312, 1, 1, "", "initialize", "Initialize the object."], [1313, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1314, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1315, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1316, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1317, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1318, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1319, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [1320, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [1321, 1, 1, "", "var_names_float", "The names of float variables."], [1322, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.RegularLayoutOptProblem": [[1324, 4, 1, "", "ANGLE", ""], [1325, 4, 1, "", "OFFSET_X", ""], [1326, 4, 1, "", "OFFSET_Y", ""], [1327, 4, 1, "", "SPACING_X", ""], [1328, 4, 1, "", "SPACING_Y", ""], [1329, 1, 1, "", "__init__", "Constructor."], [1330, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [1331, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1332, 1, 1, "", "initialize", "Initialize the object."], [1333, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1334, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1335, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [1336, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [1337, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts": [[1254, 0, 1, "", "GeomLayout", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes)."], [1264, 0, 1, "", "GeomLayoutGridded", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes), on a fixes background point grid."], [1274, 0, 1, "", "GeomRegGrid", "A regular grid within a boundary geometry."], [1284, 0, 1, "", "GeomRegGrids", "A regular grid within a boundary geometry."]], "foxes.opt.problems.layout.geom_layouts.GeomLayout": [[1255, 1, 1, "", "__init__", "Constructor."], [1256, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1257, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1258, 1, 1, "", "get_fig", "Return plotly figure axis."], [1259, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1260, 1, 1, "", "initialize", "Initialize the object."], [1261, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1262, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1263, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomLayoutGridded": [[1265, 1, 1, "", "__init__", "Constructor."], [1266, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1267, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1268, 1, 1, "", "get_fig", "Return plotly figure axis."], [1269, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1270, 1, 1, "", "initialize", "Initialize the object."], [1271, 1, 1, "", "max_values_int", "The maximal values of the int variables."], [1272, 1, 1, "", "min_values_int", "The minimal values of the int variables."], [1273, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrid": [[1275, 1, 1, "", "__init__", "Constructor."], [1276, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1277, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1278, 1, 1, "", "get_fig", "Return plotly figure axis."], [1279, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1280, 1, 1, "", "initialize", "Initialize the object."], [1281, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1282, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1283, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes.opt.problems.layout.geom_layouts.GeomRegGrids": [[1285, 1, 1, "", "__init__", "Constructor."], [1286, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [1287, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [1288, 1, 1, "", "get_fig", "Return plotly figure axis."], [1289, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [1290, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [1291, 1, 1, "", "initialize", "Initialize the object."], [1292, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [1293, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [1294, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [1295, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [1296, 1, 1, "", "var_names_float", "The names of float variables."], [1297, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1173, 0, 1, "", "Boundary", "Boundary constraint for purely geometrical layouts problems."], [1178, 0, 1, "", "CFixN", "Fixed number of turbines constraint for purely geometrical layouts problems."], [1183, 0, 1, "", "CMaxN", "Maximal number of turbines constraint for purely geometrical layouts problems."], [1188, 0, 1, "", "CMinDensity", "Minimal turbine density constraint for purely geometrical layouts problems."], [1194, 0, 1, "", "CMinN", "Minimal number of turbines constraint for purely geometrical layouts problems."], [1199, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [1204, 0, 1, "", "MinDist", "Minimal distance constraint for purely geometrical layouts problems."], [1210, 0, 1, "", "Valid", "Validity constraint for purely geometrical layouts problems."], [1215, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.constraints.Boundary": [[1174, 1, 1, "", "__init__", "Constructor."], [1175, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1176, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1177, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CFixN": [[1179, 1, 1, "", "__init__", "Constructor."], [1180, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1181, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1182, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMaxN": [[1184, 1, 1, "", "__init__", "Constructor."], [1185, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1186, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1187, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinDensity": [[1189, 1, 1, "", "__init__", "Constructor."], [1190, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1191, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1192, 1, 1, "", "initialize", "Initialize the object."], [1193, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.CMinN": [[1195, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1196, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1197, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1198, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Constraint": [[1200, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1201, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [1202, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [1203, 1, 1, "", "get_bounds", "Returns the bounds for all components."]], "foxes.opt.problems.layout.geom_layouts.constraints.MinDist": [[1205, 1, 1, "", "__init__", "Constructor."], [1206, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1207, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1208, 1, 1, "", "initialize", "Initialize the constaint."], [1209, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.constraints.Valid": [[1211, 1, 1, "", "__init__", "Constructor."], [1212, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1213, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1214, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1216, 0, 1, "", "MaxDensity", "Maximal turbine density objective for purely geometrical layouts problems."], [1223, 0, 1, "", "MaxGridSpacing", "Maximal grid spacing objective for purely geometrical layouts problems."], [1229, 0, 1, "", "MeMiMaDist", "Mean-min-max distance objective for purely geometrical layouts problems."], [1235, 0, 1, "", "OFixN", "Fixed number of turbines objective for purely geometrical layouts problems."], [1241, 0, 1, "", "OMaxN", "Maximal number of turbines objective for purely geometrical layouts problems."], [1247, 0, 1, "", "OMinN", "Minimal number of turbines objective for purely geometrical layouts problems."], [1250, 0, 1, "", "Objective", "Abstract base class for objective functions."], [1253, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxDensity": [[1217, 1, 1, "", "__init__", "Constructor."], [1218, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1219, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1220, 1, 1, "", "initialize", "Initialize the object."], [1221, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1222, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MaxGridSpacing": [[1224, 1, 1, "", "__init__", "Constructor."], [1225, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1226, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1227, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1228, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.MeMiMaDist": [[1230, 1, 1, "", "__init__", "Constructor."], [1231, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1232, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1233, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1234, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OFixN": [[1236, 1, 1, "", "__init__", "Constructor."], [1237, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1238, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1239, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1240, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMaxN": [[1242, 1, 1, "", "__init__", "Constructor."], [1243, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [1244, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [1245, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [1246, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes.opt.problems.layout.geom_layouts.objectives.OMinN": [[1248, 1, 1, "", "__init__", "Constructor."], [1249, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.opt.problems.layout.geom_layouts.objectives.Objective": [[1251, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1252, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes.output": [[888, 0, 1, "", "Animator", "Creates an animation from generators that yield lists of artists."], [893, 0, 1, "", "FarmLayoutOutput", "Plot the farm layout"], [902, 0, 1, "", "FarmResultsEval", "Evaluates farm results data."], [922, 0, 1, "", "FlowPlots2D", "Class for horizontal or vertical 2D flow plots"], [930, 0, 1, "", "Output", "Base class for foxes output."], [934, 0, 1, "", "ResultsWriter", "Writes results farm data to file."], [937, 0, 1, "", "RosePlotOutput", "Class for rose plot creation"], [943, 0, 1, "", "SeqFlowAnimationPlugin", "Plugin for creating data for a 2D flow animation during sequential iterations"], [948, 0, 1, "", "StateTurbineMap", "Creates heat maps with turbines on the one and states on the other axis."], [951, 0, 1, "", "StatesRosePlotOutput", "Class for rose plot creation directly from states"], [953, 0, 1, "", "TurbineTypeCurves", "Creates power and ct curves for turbine types, optionally including derating/boost."]], "foxes.output.Animator": [[889, 1, 1, "", "__init__", "Constructor."], [890, 1, 1, "", "add_generator", "Add a generator."], [891, 1, 1, "", "animate", "Create the animation"], [892, 2, 1, "", "generators", "The artist generators"]], "foxes.output.FarmLayoutOutput": [[894, 1, 1, "", "__init__", "Constructor."], [895, 1, 1, "", "get_figure", "Creates farm layout figure."], [896, 1, 1, "", "get_layout_data", "Returns wind farm layout."], [897, 1, 1, "", "get_layout_dict", "Returns wind farm layout."], [898, 1, 1, "", "write_csv", "Writes csv layout file."], [899, 1, 1, "", "write_json", "Writes xyh layout file."], [900, 1, 1, "", "write_plot", "Writes the layout plot to file."], [901, 1, 1, "", "write_xyh", "Writes xyh layout file."]], "foxes.output.FarmResultsEval": [[903, 1, 1, "", "__init__", "Constructor."], [904, 1, 1, "", "add_capacity", "Adds capacity to the farm results"], [905, 1, 1, "", "add_efficiency", "Adds efficiency to the farm results"], [906, 1, 1, "", "calc_farm_efficiency", "Calculates farm efficiency"], [907, 1, 1, "", "calc_farm_mean", "Calculates the mean over states and turbines."], [908, 1, 1, "", "calc_farm_sum", "Calculates the sum over states and turbines."], [909, 1, 1, "", "calc_farm_yield", "Calculates yield, P75 and P90 at the farm level"], [910, 1, 1, "", "calc_mean_farm_power", "Calculates the mean total farm power."], [911, 1, 1, "", "calc_states_mean", "Calculates the mean wrt states."], [912, 1, 1, "", "calc_states_std", "Calculates the standard deviation wrt states."], [913, 1, 1, "", "calc_states_sum", "Calculates the sum wrt states."], [914, 1, 1, "", "calc_turbine_mean", "Calculates the mean wrt turbines."], [915, 1, 1, "", "calc_turbine_sum", "Calculates the sum wrt turbines."], [916, 1, 1, "", "calc_turbine_yield", "Calculates the yield per turbine"], [917, 1, 1, "", "gen_stdata", "Generates state-turbine data, intended to be used in animations"], [918, 1, 1, "", "reduce_all", "Reduces states and turbine dimension by some operation"], [919, 1, 1, "", "reduce_states", "Reduces the states dimension by some operation"], [920, 1, 1, "", "reduce_turbines", "Reduces the turbine dimension by some operation"], [921, 1, 1, "", "weinsum", "Calculates Einstein sum, adding weights as last argument to the given fields."]], "foxes.output.FlowPlots2D": [[923, 1, 1, "", "__init__", "Constructor."], [924, 1, 1, "", "gen_states_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [925, 1, 1, "", "gen_states_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [926, 1, 1, "", "gen_states_fig_yz", "Generates 2D farm flow figure in a plane."], [927, 1, 1, "", "get_mean_fig_xy", "Generates 2D farm flow figure in a horizontal xy-plane."], [928, 1, 1, "", "get_mean_fig_xz", "Generates 2D farm flow figure in a vertical xz-plane."], [929, 1, 1, "", "get_mean_fig_yz", "Generates 2D farm flow figure in a vertical yz-plane."]], "foxes.output.Output": [[931, 1, 1, "", "new", "Run-time output model factory."], [932, 1, 1, "", "print_models", "Prints all model names."], [933, 1, 1, "", "write", "Writes data to file via pandas."]], "foxes.output.ResultsWriter": [[935, 1, 1, "", "__init__", "Constructor."], [936, 1, 1, "", "write_csv", "Writes a csv file"]], "foxes.output.RosePlotOutput": [[938, 1, 1, "", "__init__", "Constructor."], [939, 1, 1, "", "get_data", "Get pandas DataFrame with wind rose data."], [940, 1, 1, "", "get_data_info", "Returns default description for a variable."], [941, 1, 1, "", "get_figure", "Creates px figure object"], [942, 1, 1, "", "write_figure", "Write rose plot to file"]], "foxes.output.SeqFlowAnimationPlugin": [[944, 1, 1, "", "__init__", "Constructor."], [945, 1, 1, "", "gen_images", ""], [946, 1, 1, "", "initialize", "Initialize data based on the intial iterator"], [947, 1, 1, "", "update", "Updates data based on current iteration"]], "foxes.output.StateTurbineMap": [[949, 1, 1, "", "__init__", "Constructor."], [950, 1, 1, "", "plot_map", "Plot the heat map for the selected variable."]], "foxes.output.StatesRosePlotOutput": [[952, 1, 1, "", "__init__", "Constructor."]], "foxes.output.TurbineTypeCurves": [[954, 1, 1, "", "__init__", "Constructor."], [955, 1, 1, "", "plot_curves", "Plot the power or ct curve."]], "foxes.utils": [[956, 0, 1, "", "DataBook", "Container class for file paths, either directly given or as static data within a package."], [964, 0, 1, "", "PandasFileHelper", "This class helps reading and writing data to files via pandas."], [984, 5, 1, "", "all_subclasses", "Searches all classes derived from some base class."], [985, 5, 1, "", "cubic_roots", "Calculate real roots of polynomials of degree 3."], [986, 5, 1, "", "delta_wd", "Calculates wd_b - wd_a."], [1338, 5, 1, "", "read_shp", "Read a shape file"], [1339, 5, 1, "", "read_shp_polygons", "Reads the polygon points from a shp file."], [1355, 5, 1, "", "show_plotly_fig", "Displays a plotly figure in a window"], [1356, 5, 1, "", "shp2csv", "Read shape file, write csv file"], [1357, 5, 1, "", "shp2geom2d", "Read shapefile into geom2d geometry"], [1360, 5, 1, "", "uv2wd", "Calculate wind direction from wind vectors."], [1361, 5, 1, "", "wd2uv", "Calculate wind vectors from wind directions in degrees."], [1362, 5, 1, "", "wd2wdvec", "Calculate wind direction vectors from wind directions in degrees."], [1363, 5, 1, "", "wdvec2wd", "Calculate wind direction from wind direction vectors."]], "foxes.utils.DataBook": [[957, 1, 1, "", "__init__", "Constructor."], [958, 1, 1, "", "add_data_package", "Add static files from a package location."], [959, 1, 1, "", "add_data_package_file", "Add a static file from a package location."], [960, 1, 1, "", "add_file", "Add a file path"], [961, 1, 1, "", "add_files", "Add file paths"], [962, 1, 1, "", "get_file_path", "Get path of a file"], [963, 1, 1, "", "toc", "Get list of contents"]], "foxes.utils.PandasFileHelper": [[965, 4, 1, "", "DATA_FILE_FORMATS", ""], [966, 4, 1, "", "DEFAULT_FORMAT_DICT", ""], [967, 4, 1, "", "DEFAULT_READING_PARAMETERS", ""], [968, 4, 1, "", "DEFAULT_WRITING_PARAMETERS", ""], [969, 1, 1, "", "read_file", "Helper for reading data according to file ending."], [970, 1, 1, "", "write_file", "Helper for writing data according to file ending."]], "foxes.utils.abl.neutral": [[971, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [972, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [973, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.sheared": [[974, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"]], "foxes.utils.abl.stable": [[975, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [976, 5, 1, "", "lgz", "Calculates the log factor for wind speed profiles."], [977, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [978, 5, 1, "", "psi", "The Psi function"], [979, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.abl.unstable": [[980, 5, 1, "", "calc_ws", "Calculate wind speeds at given height"], [981, 5, 1, "", "logz", "Calculates the log factor for wind speed profiles."], [982, 5, 1, "", "psi", "The Psi function"], [983, 5, 1, "", "ustar", "Calculates the friction velocity, based on reference data."]], "foxes.utils.geom2d": [[987, 0, 1, "", "AreaGeometry", "Abstract base class for closed 2D geometries."], [994, 0, 1, "", "AreaIntersection", "The intersection of area geometries."], [996, 0, 1, "", "AreaUnion", "The union of area geometries."], [1004, 0, 1, "", "Circle", "This class represents the area of a circle."], [1011, 0, 1, "", "ClosedPolygon", "This class represents a closed 2D polygon."], [1018, 0, 1, "", "HalfPlane", "This class represents a half plane in 2d."], [1026, 0, 1, "", "InvertedAreaGeometry", "Base class for inverted geometries."]], "foxes.utils.geom2d.AreaGeometry": [[988, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [989, 1, 1, "", "inverse", "Get the inverted geometry"], [990, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [991, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [992, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [993, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.AreaIntersection": [[995, 1, 1, "", "__new__", "Constructor."]], "foxes.utils.geom2d.AreaUnion": [[997, 1, 1, "", "__init__", "Constructor."], [998, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [999, 1, 1, "", "inverse", "Get the inverted geometry"], [1000, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [1001, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [1002, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1003, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.Circle": [[1005, 1, 1, "", "__init__", "Cobnstructor."], [1006, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1007, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [1008, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [1009, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1010, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.ClosedPolygon": [[1012, 1, 1, "", "__init__", "Constructor."], [1013, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1014, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [1015, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [1016, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1017, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.HalfPlane": [[1019, 1, 1, "", "__init__", "Constructor."], [1020, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1021, 1, 1, "", "inverse", "Get the inverted geometry"], [1022, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [1023, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [1024, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1025, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.geom2d.InvertedAreaGeometry": [[1027, 1, 1, "", "__init__", "Constructor."], [1028, 1, 1, "", "add_to_figure", "Add image to (x,y) figure."], [1029, 1, 1, "", "inverse", "Get the inverted geometry"], [1030, 1, 1, "", "p_max", "Returns maximal (x,y) point."], [1031, 1, 1, "", "p_min", "Returns minimal (x,y) point."], [1032, 1, 1, "", "points_distance", "Calculates point distances wrt boundary."], [1033, 1, 1, "", "points_inside", "Tests if points are inside the geometry."]], "foxes.utils.runners": [[1340, 0, 1, "", "DaskRunner", "Class for function execution via dask"], [1347, 0, 1, "", "DefaultRunner", "Class for default function execution."], [1349, 0, 1, "", "Runner", "Abstract base class for runners."]], "foxes.utils.runners.DaskRunner": [[1341, 1, 1, "", "__init__", "Constructor."], [1342, 1, 1, "", "finalize", "Finallize the runner"], [1343, 1, 1, "", "initialize", "Initialize the runner"], [1344, 1, 1, "", "is_distributed", ""], [1345, 1, 1, "", "print", "Prints if verbosity is not zero"], [1346, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.DefaultRunner": [[1348, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.runners.Runner": [[1350, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [1351, 1, 1, "", "finalize", "Finalize the runner"], [1352, 1, 1, "", "initialize", "Initialize the runner"], [1353, 2, 1, "", "initialized", "Initialization flag"], [1354, 1, 1, "", "run", "Runs the given function."]], "foxes.utils.two_circles": [[1358, 5, 1, "", "area", "Calculates the intersection of two circles with radii r1, r2 and a centre point distance d."], [1359, 5, 1, "", "calc_area", "Calculates the intersection of two circles."]], "foxes.variables": [[440, 3, 1, "", "AMB_CAP", "Ambient capacity, equals AMB_P/P_nominal"], [441, 3, 1, "", "AMB_CT", "The ambient thrust coefficient"], [442, 3, 1, "", "AMB_P", "The ambient power, unit depends on user choice"], [443, 3, 1, "", "AMB_REWS", "Ambient rotor effective wind speed in m/s"], [444, 3, 1, "", "AMB_REWS2", "Ambient rotor effective wind speed in m/s, calculated from second moment"], [445, 3, 1, "", "AMB_REWS3", "Ambient rotor effective wind speed in m/s, calculated from third moment"], [446, 3, 1, "", "AMB_RHO", "The ambient air density in kg/m3"], [447, 3, 1, "", "AMB_T", "The ambient temperature in Kelvin"], [448, 3, 1, "", "AMB_TI", "The ambient turbulence intensity"], [449, 3, 1, "", "AMB_WD", "The ambient wind direction in degrees"], [450, 3, 1, "", "AMB_WS", "The ambient wind speed in m/s"], [451, 3, 1, "", "AMB_YAW", "The ambient absolute yaw angle of  a turbine in degrees"], [452, 3, 1, "", "AMB_YAWM", "The ambient relative yaw angle of  a turbine in degrees"], [453, 3, 1, "", "AMB_YLD", "Ambient yield in GWh/a"], [454, 3, 1, "", "CAP", "Capacity, equals P/P_nominal"], [455, 3, 1, "", "CT", "The thrust coefficient"], [456, 3, 1, "", "D", "The rotor diameter in m"], [457, 3, 1, "", "EFF", "Efficiency, equals P/AMB_P"], [458, 3, 1, "", "H", "The height over ground in m"], [459, 3, 1, "", "K", "Wake growth parameter"], [460, 3, 1, "", "KB", "KTI value for zero TI, K = KB + KTI*TI"], [461, 3, 1, "", "KTI", "Factor between K and TI, K = KB + KTI*TI"], [462, 3, 1, "", "MAX_P", "The maximal power, for derating/boost"], [463, 3, 1, "", "MOL", "The Monin-Ubukhof length in m"], [464, 3, 1, "", "ORDER", "The turbine order"], [465, 3, 1, "", "P", "The power, unit depends on user choice"], [466, 3, 1, "", "PA_ALPHA", "The alpha parameter of the PorteAgel wake model"], [467, 3, 1, "", "PA_BETA", "The beta parameter of the PorteAgel wake model"], [468, 3, 1, "", "REWS", "Rotor effective wind speed in m/s"], [469, 3, 1, "", "REWS2", "Rotor effective wind speed in m/s, calculated from second moment"], [470, 3, 1, "", "REWS3", "Rotor effective wind speed in m/s, calculated from third moment"], [471, 3, 1, "", "RHO", "The air density in kg/m3"], [472, 3, 1, "", "SHEAR", "The shear exponent"], [473, 3, 1, "", "T", "The temperature in Kelvin"], [474, 3, 1, "", "TI", "The turbulence intensity"], [475, 3, 1, "", "TXYH", "The turbine rotor centre coordinate  vector (x, y, height)"], [476, 3, 1, "", "WD", "The wind direction in degrees"], [477, 3, 1, "", "WEIGHT", "The statistical weight of a state"], [478, 3, 1, "", "WS", "The wind speed in m/s"], [479, 3, 1, "", "X", "The x coordinate in m"], [480, 3, 1, "", "Y", "The y coordinate in"], [481, 3, 1, "", "YAW", "The absolute yaw angle of a turbine in degrees"], [482, 3, 1, "", "YAWM", "The relative yaw angle of a turbine in degrees"], [483, 3, 1, "", "YLD", "Yield in GWh/a"], [484, 3, 1, "", "Z0", "The roughness length in m"], [485, 3, 1, "", "amb2var", "Mapping from ambient variable to the corresponding waked variable"], [486, 3, 1, "", "var2amb", "Mapping from variable to the corresponding ambient variable"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:data", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"public": [0, 9, 16, 35, 40, 46, 53, 57, 62, 66, 71, 75, 77, 83, 87, 92, 102, 117, 125, 128, 137, 147, 152, 159, 160, 173, 181, 185, 191, 200, 206, 210, 212, 214, 218, 224, 228, 231, 236, 241, 366, 493, 501, 512, 514, 521, 529, 542, 546, 547, 553, 556, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 888, 893, 902, 922, 930, 934, 937, 943, 948, 951, 953, 956, 964, 987, 994, 996, 1004, 1011, 1018, 1026, 1034, 1055, 1057, 1064, 1075, 1082, 1126, 1132, 1140, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1340, 1347, 1349], "member": [0, 9, 16, 35, 40, 46, 53, 57, 62, 66, 71, 75, 77, 83, 87, 92, 102, 117, 125, 128, 137, 147, 152, 159, 160, 173, 181, 185, 191, 200, 206, 210, 212, 214, 218, 224, 228, 231, 236, 241, 366, 493, 501, 512, 514, 521, 529, 542, 546, 547, 553, 556, 561, 568, 576, 584, 587, 594, 600, 605, 608, 612, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 678, 681, 684, 689, 691, 693, 696, 702, 708, 714, 720, 723, 726, 729, 732, 736, 739, 743, 749, 754, 761, 768, 774, 780, 783, 790, 793, 798, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 888, 893, 902, 922, 930, 934, 937, 943, 948, 951, 953, 956, 964, 987, 994, 996, 1004, 1011, 1018, 1026, 1034, 1055, 1057, 1064, 1075, 1082, 1126, 1132, 1140, 1149, 1151, 1157, 1159, 1173, 1178, 1183, 1188, 1194, 1199, 1204, 1210, 1216, 1223, 1229, 1235, 1241, 1247, 1250, 1254, 1264, 1274, 1284, 1298, 1307, 1323, 1340, 1347, 1349], "paramet": [1, 2, 3, 4, 5, 6, 10, 11, 12, 14, 17, 20, 21, 27, 36, 37, 38, 42, 43, 44, 47, 48, 49, 50, 51, 55, 56, 58, 59, 60, 61, 63, 64, 67, 68, 69, 72, 73, 78, 79, 80, 81, 84, 85, 86, 87, 89, 90, 91, 92, 94, 97, 98, 101, 103, 105, 106, 107, 108, 112, 113, 114, 115, 118, 119, 120, 124, 126, 127, 129, 130, 131, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 163, 164, 165, 166, 167, 169, 172, 174, 175, 176, 177, 178, 179, 182, 184, 186, 187, 188, 189, 192, 193, 195, 196, 198, 202, 203, 205, 207, 208, 209, 211, 213, 215, 217, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 232, 233, 237, 238, 239, 333, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 500, 503, 504, 505, 507, 508, 509, 511, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 528, 531, 532, 533, 535, 536, 537, 538, 541, 545, 548, 550, 551, 555, 558, 559, 560, 562, 563, 564, 565, 566, 569, 571, 572, 573, 574, 577, 579, 580, 581, 582, 585, 586, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 609, 610, 611, 614, 615, 619, 622, 626, 629, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 645, 648, 649, 650, 651, 654, 655, 656, 657, 659, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 687, 688, 690, 692, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 721, 724, 727, 730, 733, 734, 737, 740, 741, 744, 745, 746, 747, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 762, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 781, 782, 784, 785, 786, 787, 788, 791, 792, 794, 795, 796, 797, 800, 801, 802, 804, 806, 807, 808, 810, 812, 813, 814, 816, 818, 819, 821, 823, 824, 825, 841, 842, 844, 845, 848, 850, 851, 853, 855, 856, 858, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 891, 894, 895, 898, 899, 900, 901, 903, 904, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 931, 933, 935, 936, 938, 939, 940, 941, 942, 944, 946, 947, 949, 950, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 992, 993, 995, 997, 998, 1002, 1003, 1005, 1006, 1009, 1010, 1012, 1013, 1016, 1017, 1019, 1020, 1024, 1025, 1027, 1028, 1032, 1033, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1049, 1050, 1056, 1058, 1059, 1060, 1061, 1065, 1066, 1067, 1068, 1076, 1077, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1096, 1097, 1099, 1100, 1101, 1104, 1117, 1118, 1119, 1121, 1122, 1123, 1127, 1128, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1139, 1141, 1142, 1143, 1144, 1145, 1149, 1150, 1152, 1153, 1154, 1157, 1158, 1160, 1161, 1164, 1169, 1170, 1174, 1175, 1176, 1179, 1180, 1181, 1184, 1185, 1186, 1189, 1190, 1191, 1192, 1196, 1197, 1199, 1201, 1202, 1205, 1206, 1207, 1208, 1211, 1212, 1213, 1215, 1217, 1218, 1219, 1220, 1224, 1225, 1226, 1230, 1231, 1232, 1236, 1237, 1238, 1242, 1243, 1244, 1248, 1253, 1255, 1256, 1257, 1258, 1260, 1265, 1266, 1267, 1268, 1270, 1275, 1276, 1277, 1278, 1280, 1285, 1286, 1287, 1288, 1291, 1299, 1301, 1304, 1305, 1308, 1309, 1312, 1317, 1318, 1319, 1320, 1329, 1330, 1332, 1335, 1336, 1338, 1339, 1341, 1346, 1348, 1354, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363], "return": [2, 3, 4, 6, 11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 42, 44, 45, 48, 51, 52, 55, 56, 59, 61, 64, 65, 69, 70, 73, 74, 79, 81, 82, 85, 86, 94, 95, 96, 98, 99, 100, 101, 108, 109, 110, 113, 120, 121, 122, 123, 124, 126, 127, 131, 132, 133, 134, 135, 136, 139, 143, 144, 146, 149, 150, 151, 155, 157, 158, 165, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 188, 189, 190, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 211, 215, 216, 219, 220, 221, 222, 229, 230, 234, 235, 238, 239, 252, 333, 371, 495, 496, 497, 498, 499, 500, 504, 506, 507, 508, 510, 511, 516, 517, 518, 519, 520, 523, 525, 526, 527, 528, 532, 534, 536, 537, 539, 540, 541, 544, 545, 550, 551, 552, 566, 567, 574, 575, 582, 583, 592, 593, 598, 599, 602, 603, 604, 606, 607, 610, 611, 613, 615, 616, 617, 621, 623, 624, 628, 630, 631, 634, 635, 638, 639, 640, 643, 645, 649, 651, 652, 655, 657, 661, 662, 663, 667, 668, 671, 673, 676, 677, 679, 680, 682, 683, 687, 688, 694, 695, 698, 700, 701, 704, 706, 707, 710, 712, 713, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 734, 735, 737, 738, 741, 742, 745, 746, 747, 748, 751, 752, 753, 756, 757, 758, 764, 765, 766, 770, 771, 772, 776, 777, 778, 779, 781, 782, 785, 788, 789, 791, 792, 795, 796, 797, 806, 807, 812, 813, 818, 823, 824, 844, 845, 846, 850, 855, 860, 865, 866, 867, 870, 871, 872, 873, 876, 877, 880, 881, 882, 883, 886, 887, 891, 892, 895, 896, 897, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 919, 920, 921, 939, 940, 941, 942, 950, 955, 962, 963, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 991, 992, 993, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1014, 1015, 1016, 1017, 1021, 1022, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1059, 1060, 1062, 1063, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1078, 1079, 1081, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1134, 1136, 1137, 1138, 1139, 1142, 1143, 1144, 1146, 1147, 1148, 1153, 1154, 1155, 1156, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1175, 1176, 1177, 1180, 1181, 1182, 1185, 1186, 1187, 1190, 1191, 1193, 1196, 1197, 1198, 1202, 1203, 1206, 1207, 1209, 1212, 1213, 1214, 1215, 1218, 1219, 1221, 1222, 1225, 1226, 1227, 1228, 1231, 1232, 1233, 1234, 1237, 1238, 1239, 1240, 1243, 1244, 1245, 1246, 1249, 1252, 1253, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1299, 1300, 1302, 1303, 1304, 1305, 1306, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1321, 1322, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1346, 1348, 1353, 1354, 1357, 1358, 1359, 1360, 1361, 1362, 1363], "attribut": [9, 16, 46, 53, 57, 62, 66, 71, 77, 83, 93, 102, 117, 128, 137, 147, 152, 160, 173, 185, 191, 206, 212, 231, 493, 501, 521, 529, 547, 553, 556, 561, 568, 576, 587, 600, 608, 618, 625, 632, 636, 641, 647, 653, 658, 665, 669, 674, 684, 696, 702, 708, 714, 732, 739, 743, 749, 754, 761, 768, 774, 783, 803, 809, 815, 820, 826, 847, 852, 857, 863, 868, 874, 878, 884, 888, 893, 902, 922, 934, 943, 948, 953, 956, 964, 996, 1004, 1011, 1018, 1034, 1057, 1082, 1132, 1140, 1151, 1199, 1254, 1264, 1274, 1284, 1307, 1323, 1340], "exampl": [252, 324, 371, 412, 414, 1215, 1253, 1383], "note": [252, 371, 1215, 1253], "see": [252, 371], "also": [252, 371], "yield": [917, 924, 925, 926, 927, 928, 929], "rais": [1215, 1253], "api": 1364, "fox": [1365, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1385, 1393], "algorithm": [1365, 1366, 1367, 1368], "downwind": 1366, "model": [1366, 1367, 1368, 1373, 1381, 1387, 1391], "iter": 1367, "sequenti": 1368, "constant": 1369, "core": [1370, 1374], "input": 1372, "farm_layout": 1372, "state": [1372, 1388], "windio": 1372, "farm_control": 1373, "farm_model": 1373, "partial_wak": 1373, "point_model": 1373, "rotor_model": 1373, "turbine_model": 1373, "turbine_typ": 1373, "vertical_profil": 1373, "wake_fram": 1373, "wake_model": [1373, 1381], "wake_superposit": 1373, "opt": [1374, 1375, 1376], "problem": [1374, 1375, 1376], "object": [1374, 1376], "constraint": [1374, 1376], "layout": [1375, 1376, 1388, 1390], "geom_layout": [1375, 1376], "output": 1377, "flow_plots_2d": 1377, "util": [1378, 1379], "abl": [1378, 1379], "geom2d": 1378, "runner": 1378, "two_circl": 1378, "neutral": 1379, "stabl": 1379, "unstabl": 1379, "shear": 1379, "variabl": 1380, "wind": [1381, 1388, 1392, 1395, 1399], "ti": 1381, "induct": 1381, "citat": 1382, "histori": 1384, "v0": 1384, "1": 1384, "0": 1384, "alpha": 1384, "2": 1384, "3": 1384, "4": 1384, "5": 1384, "6": 1384, "welcom": 1385, "licens": 1385, "content": 1385, "contribut": 1385, "acknowledg": 1385, "instal": 1386, "requir": 1386, "via": 1386, "pip": 1386, "virtual": 1386, "python": 1386, "environ": 1386, "standard": 1386, "user": 1386, "develop": 1386, "conda": 1386, "prepar": 1386, "blockag": 1387, "static": 1388, "data": [1388, 1392, 1398, 1399], "farm": 1388, "test_farm_67": 1388, "csv": 1388, "ambient": 1388, "wrf": 1388, "timeseri": [1388, 1398], "4464": 1388, "gz": 1388, "abl_states_6000": 1388, "timeseries_3000": 1388, "timeseries_8000": 1388, "timeseries_100": 1388, "wind_rose_bremen": 1388, "wind_rot": 1388, "nc": 1388, "power": [1388, 1394], "thrust": 1388, "curv": 1388, "dtu": 1388, "10mw": 1388, "d178d3": 1388, "h119": 1388, "iea": 1388, "15mw": 1388, "d240": 1388, "h150": 1388, "iwt": 1388, "7d5mw": 1388, "d164": 1388, "h100": 1388, "nrel": 1388, "5mw": 1388, "d126": 1388, "h90": 1388, "file": 1388, "path": 1388, "heterogen": 1389, "flow": 1389, "optim": 1390, "The": 1391, "book": 1391, "multi": 1392, "height": 1392, "overview": 1393, "how": 1393, "setup": 1393, "mask": 1394, "sector": 1395, "manag": 1395, "singl": 1396, "row": 1396, "turbin": 1396, "dynam": 1397, "wake": [1397, 1400], "rose": 1399, "yaw": 1400, "rotor": 1400}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Public members": [[0, "public-members"], [9, "public-members"], [16, "public-members"], [35, "public-members"], [40, "public-members"], [46, "public-members"], [53, "public-members"], [57, "public-members"], [62, "public-members"], [66, "public-members"], [71, "public-members"], [75, "public-members"], [77, "public-members"], [83, "public-members"], [87, "public-members"], [92, "public-members"], [102, "public-members"], [117, "public-members"], [125, "public-members"], [128, "public-members"], [137, "public-members"], [147, "public-members"], [152, "public-members"], [159, "public-members"], [160, "public-members"], [173, "public-members"], [181, "public-members"], [185, "public-members"], [191, "public-members"], [200, "public-members"], [206, "public-members"], [210, "public-members"], [212, "public-members"], [214, "public-members"], [218, "public-members"], [224, "public-members"], [228, "public-members"], [231, "public-members"], [236, "public-members"], [241, "public-members"], [366, "public-members"], [493, "public-members"], [501, "public-members"], [512, "public-members"], [514, "public-members"], [521, "public-members"], [529, "public-members"], [542, "public-members"], [546, "public-members"], [547, "public-members"], [553, "public-members"], [556, "public-members"], [561, "public-members"], [568, "public-members"], [576, "public-members"], [584, "public-members"], [587, "public-members"], [594, "public-members"], [600, "public-members"], [605, "public-members"], [608, "public-members"], [612, "public-members"], [618, "public-members"], [625, "public-members"], [632, "public-members"], [636, "public-members"], [641, "public-members"], [647, "public-members"], [653, "public-members"], [658, "public-members"], [665, "public-members"], [669, "public-members"], [674, "public-members"], [678, "public-members"], [681, "public-members"], [684, "public-members"], [689, "public-members"], [691, "public-members"], [693, "public-members"], [696, "public-members"], [702, "public-members"], [708, "public-members"], [714, "public-members"], [720, "public-members"], [723, "public-members"], [726, "public-members"], [729, "public-members"], [732, "public-members"], [736, "public-members"], [739, "public-members"], [743, "public-members"], [749, "public-members"], [754, "public-members"], [761, "public-members"], [768, "public-members"], [774, "public-members"], [780, "public-members"], [783, "public-members"], [790, "public-members"], [793, "public-members"], [798, "public-members"], [803, "public-members"], [809, "public-members"], [815, "public-members"], [820, "public-members"], [826, "public-members"], [847, "public-members"], [852, "public-members"], [857, "public-members"], [863, "public-members"], [868, "public-members"], [874, "public-members"], [878, "public-members"], [884, "public-members"], [888, "public-members"], [893, "public-members"], [902, "public-members"], [922, "public-members"], [930, "public-members"], [934, "public-members"], [937, "public-members"], [943, "public-members"], [948, "public-members"], [951, "public-members"], [953, "public-members"], [956, "public-members"], [964, "public-members"], [987, "public-members"], [994, "public-members"], [996, "public-members"], [1004, "public-members"], [1011, "public-members"], [1018, "public-members"], [1026, "public-members"], [1034, "public-members"], [1055, "public-members"], [1057, "public-members"], [1064, "public-members"], [1075, "public-members"], [1082, "public-members"], [1126, "public-members"], [1132, "public-members"], [1140, "public-members"], [1149, "public-members"], [1151, "public-members"], [1157, "public-members"], [1159, "public-members"], [1173, "public-members"], [1178, "public-members"], [1183, "public-members"], [1188, "public-members"], [1194, "public-members"], [1199, "public-members"], [1204, "public-members"], [1210, "public-members"], [1216, "public-members"], [1223, "public-members"], [1229, "public-members"], [1235, "public-members"], [1241, "public-members"], [1247, "public-members"], [1250, "public-members"], [1254, "public-members"], [1264, "public-members"], [1274, "public-members"], [1284, "public-members"], [1298, "public-members"], [1307, "public-members"], [1323, "public-members"], [1340, "public-members"], [1347, "public-members"], [1349, "public-members"]], "Parameters": [[1, "parameters"], [2, "parameters"], [3, "parameters"], [4, "parameters"], [5, "parameters"], [6, "parameters"], [10, "parameters"], [11, "parameters"], [12, "parameters"], [14, "parameters"], [17, "parameters"], [20, "parameters"], [21, "parameters"], [27, "parameters"], [36, "parameters"], [37, "parameters"], [38, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [47, "parameters"], [48, "parameters"], [49, "parameters"], [50, "parameters"], [51, "parameters"], [55, "parameters"], [56, "parameters"], [58, "parameters"], [59, "parameters"], [60, "parameters"], [61, "parameters"], [63, "parameters"], [64, "parameters"], [67, "parameters"], [68, "parameters"], [69, "parameters"], [72, "parameters"], [73, "parameters"], [78, "parameters"], [79, "parameters"], [80, "parameters"], [81, "parameters"], [84, "parameters"], [85, "parameters"], [86, "parameters"], [87, "parameters"], [89, "parameters"], [90, "parameters"], [91, "parameters"], [92, "parameters"], [94, "parameters"], [97, "parameters"], [98, "parameters"], [101, "parameters"], [103, "parameters"], [105, "parameters"], [106, "parameters"], [107, "parameters"], [108, "parameters"], [112, "parameters"], [113, "parameters"], [114, "parameters"], [115, "parameters"], [118, "parameters"], [119, "parameters"], [120, "parameters"], [124, "parameters"], [126, "parameters"], [127, "parameters"], [129, "parameters"], [130, "parameters"], [131, "parameters"], [133, "parameters"], [136, "parameters"], [138, "parameters"], [139, "parameters"], [140, "parameters"], [141, "parameters"], [142, "parameters"], [143, "parameters"], [144, "parameters"], [145, "parameters"], [148, "parameters"], [149, "parameters"], [150, "parameters"], [151, "parameters"], [153, "parameters"], [154, "parameters"], [155, "parameters"], [156, "parameters"], [157, "parameters"], [163, "parameters"], [164, "parameters"], [165, "parameters"], [166, "parameters"], [167, "parameters"], [169, "parameters"], [172, "parameters"], [174, "parameters"], [175, "parameters"], [176, "parameters"], [177, "parameters"], [178, "parameters"], [179, "parameters"], [182, "parameters"], [184, "parameters"], [186, "parameters"], [187, "parameters"], [188, "parameters"], [189, "parameters"], [192, "parameters"], [193, "parameters"], [195, "parameters"], [196, "parameters"], [198, "parameters"], [202, "parameters"], [203, "parameters"], [205, "parameters"], [207, "parameters"], [208, "parameters"], [209, "parameters"], [211, "parameters"], [213, "parameters"], [215, "parameters"], [217, "parameters"], [219, "parameters"], [220, "parameters"], [221, "parameters"], [222, "parameters"], [223, "parameters"], [225, "parameters"], [226, "parameters"], [227, "parameters"], [229, "parameters"], [230, "parameters"], [232, "parameters"], [233, "parameters"], [237, "parameters"], [238, "parameters"], [239, "parameters"], [333, "parameters"], [487, "parameters"], [488, "parameters"], [489, "parameters"], [490, "parameters"], [491, "parameters"], [492, "parameters"], [494, "parameters"], [495, "parameters"], [497, "parameters"], [498, "parameters"], [500, "parameters"], [503, "parameters"], [504, "parameters"], [505, "parameters"], [507, "parameters"], [508, "parameters"], [509, "parameters"], [511, "parameters"], [514, "parameters"], [515, "parameters"], [516, "parameters"], [517, "parameters"], [518, "parameters"], [520, "parameters"], [522, "parameters"], [523, "parameters"], [524, "parameters"], [525, "parameters"], [528, "parameters"], [531, "parameters"], [532, "parameters"], [533, "parameters"], [535, "parameters"], [536, "parameters"], [537, "parameters"], [538, "parameters"], [541, "parameters"], [545, "parameters"], [548, "parameters"], [550, "parameters"], [551, "parameters"], [555, "parameters"], [558, "parameters"], [559, "parameters"], [560, "parameters"], [562, "parameters"], [563, "parameters"], [564, "parameters"], [565, "parameters"], [566, "parameters"], [569, "parameters"], [571, "parameters"], [572, "parameters"], [573, "parameters"], [574, "parameters"], [577, "parameters"], [579, "parameters"], [580, "parameters"], [581, "parameters"], [582, "parameters"], [585, "parameters"], [586, "parameters"], [588, "parameters"], [589, "parameters"], [590, "parameters"], [591, "parameters"], [592, "parameters"], [595, "parameters"], [596, "parameters"], [597, "parameters"], [598, "parameters"], [599, "parameters"], [601, "parameters"], [602, "parameters"], [603, "parameters"], [604, "parameters"], [606, "parameters"], [607, "parameters"], [609, "parameters"], [610, "parameters"], [611, "parameters"], [614, "parameters"], [615, "parameters"], [619, "parameters"], [622, "parameters"], [626, "parameters"], [629, "parameters"], [633, "parameters"], [634, "parameters"], [635, "parameters"], [637, "parameters"], [638, "parameters"], [639, "parameters"], [640, "parameters"], [642, "parameters"], [643, "parameters"], [644, "parameters"], [645, "parameters"], [648, "parameters"], [649, "parameters"], [650, "parameters"], [651, "parameters"], [654, "parameters"], [655, "parameters"], [656, "parameters"], [657, "parameters"], [659, "parameters"], [660, "parameters"], [661, "parameters"], [662, "parameters"], [663, "parameters"], [666, "parameters"], [667, "parameters"], [668, "parameters"], [670, "parameters"], [671, "parameters"], [672, "parameters"], [673, "parameters"], [675, "parameters"], [676, "parameters"], [677, "parameters"], [679, "parameters"], [680, "parameters"], [682, "parameters"], [683, "parameters"], [685, "parameters"], [687, "parameters"], [688, "parameters"], [690, "parameters"], [692, "parameters"], [694, "parameters"], [695, "parameters"], [697, "parameters"], [698, "parameters"], [699, "parameters"], [700, "parameters"], [701, "parameters"], [703, "parameters"], [704, "parameters"], [705, "parameters"], [706, "parameters"], [707, "parameters"], [709, "parameters"], [710, "parameters"], [711, "parameters"], [712, "parameters"], [713, "parameters"], [715, "parameters"], [716, "parameters"], [717, "parameters"], [718, "parameters"], [719, "parameters"], [721, "parameters"], [724, "parameters"], [727, "parameters"], [730, "parameters"], [733, "parameters"], [734, "parameters"], [737, "parameters"], [740, "parameters"], [741, "parameters"], [744, "parameters"], [745, "parameters"], [746, "parameters"], [747, "parameters"], [750, "parameters"], [751, "parameters"], [752, "parameters"], [753, "parameters"], [755, "parameters"], [756, "parameters"], [757, "parameters"], [758, "parameters"], [759, "parameters"], [760, "parameters"], [762, "parameters"], [764, "parameters"], [765, "parameters"], [766, "parameters"], [767, "parameters"], [769, "parameters"], [770, "parameters"], [771, "parameters"], [772, "parameters"], [773, "parameters"], [775, "parameters"], [776, "parameters"], [777, "parameters"], [778, "parameters"], [781, "parameters"], [782, "parameters"], [784, "parameters"], [785, "parameters"], [786, "parameters"], [787, "parameters"], [788, "parameters"], [791, "parameters"], [792, "parameters"], [794, "parameters"], [795, "parameters"], [796, "parameters"], [797, "parameters"], [800, "parameters"], [801, "parameters"], [802, "parameters"], [804, "parameters"], [806, "parameters"], [807, "parameters"], [808, "parameters"], [810, "parameters"], [812, "parameters"], [813, "parameters"], [814, "parameters"], [816, "parameters"], [818, "parameters"], [819, "parameters"], [821, "parameters"], [823, "parameters"], [824, "parameters"], [825, "parameters"], [841, "parameters"], [842, "parameters"], [844, "parameters"], [845, "parameters"], [848, "parameters"], [850, "parameters"], [851, "parameters"], [853, "parameters"], [855, "parameters"], [856, "parameters"], [858, "parameters"], [860, "parameters"], [861, "parameters"], [862, "parameters"], [864, "parameters"], [865, "parameters"], [866, "parameters"], [867, "parameters"], [869, "parameters"], [870, "parameters"], [871, "parameters"], [872, "parameters"], [873, "parameters"], [875, "parameters"], [876, "parameters"], [877, "parameters"], [879, "parameters"], [880, "parameters"], [881, "parameters"], [882, "parameters"], [883, "parameters"], [885, "parameters"], [886, "parameters"], [887, "parameters"], [889, "parameters"], [890, "parameters"], [891, "parameters"], [894, "parameters"], [895, "parameters"], [898, "parameters"], [899, "parameters"], [900, "parameters"], [901, "parameters"], [903, "parameters"], [904, "parameters"], [905, "parameters"], [907, "parameters"], [908, "parameters"], [909, "parameters"], [910, "parameters"], [911, "parameters"], [913, "parameters"], [914, "parameters"], [915, "parameters"], [916, "parameters"], [917, "parameters"], [918, "parameters"], [919, "parameters"], [920, "parameters"], [921, "parameters"], [923, "parameters"], [924, "parameters"], [925, "parameters"], [926, "parameters"], [927, "parameters"], [928, "parameters"], [929, "parameters"], [931, "parameters"], [933, "parameters"], [935, "parameters"], [936, "parameters"], [938, "parameters"], [939, "parameters"], [940, "parameters"], [941, "parameters"], [942, "parameters"], [944, "parameters"], [946, "parameters"], [947, "parameters"], [949, "parameters"], [950, "parameters"], [952, "parameters"], [954, "parameters"], [955, "parameters"], [956, "parameters"], [957, "parameters"], [958, "parameters"], [959, "parameters"], [960, "parameters"], [961, "parameters"], [962, "parameters"], [963, "parameters"], [969, "parameters"], [970, "parameters"], [971, "parameters"], [972, "parameters"], [973, "parameters"], [974, "parameters"], [975, "parameters"], [976, "parameters"], [977, "parameters"], [978, "parameters"], [979, "parameters"], [980, "parameters"], [981, "parameters"], [982, "parameters"], [983, "parameters"], [984, "parameters"], [985, "parameters"], [986, "parameters"], [988, "parameters"], [992, "parameters"], [993, "parameters"], [995, "parameters"], [997, "parameters"], [998, "parameters"], [1002, "parameters"], [1003, "parameters"], [1005, "parameters"], [1006, "parameters"], [1009, "parameters"], [1010, "parameters"], [1012, "parameters"], [1013, "parameters"], [1016, "parameters"], [1017, "parameters"], [1019, "parameters"], [1020, "parameters"], [1024, "parameters"], [1025, "parameters"], [1027, "parameters"], [1028, "parameters"], [1032, "parameters"], [1033, "parameters"], [1035, "parameters"], [1037, "parameters"], [1038, "parameters"], [1039, "parameters"], [1041, "parameters"], [1042, "parameters"], [1043, "parameters"], [1044, "parameters"], [1049, "parameters"], [1050, "parameters"], [1056, "parameters"], [1058, "parameters"], [1059, "parameters"], [1060, "parameters"], [1061, "parameters"], [1065, "parameters"], [1066, "parameters"], [1067, "parameters"], [1068, "parameters"], [1076, "parameters"], [1077, "parameters"], [1084, "parameters"], [1085, "parameters"], [1086, "parameters"], [1087, "parameters"], [1089, "parameters"], [1090, "parameters"], [1091, "parameters"], [1092, "parameters"], [1093, "parameters"], [1096, "parameters"], [1097, "parameters"], [1099, "parameters"], [1100, "parameters"], [1101, "parameters"], [1104, "parameters"], [1117, "parameters"], [1118, "parameters"], [1119, "parameters"], [1121, "parameters"], [1122, "parameters"], [1123, "parameters"], [1127, "parameters"], [1128, "parameters"], [1129, "parameters"], [1130, "parameters"], [1131, "parameters"], [1133, "parameters"], [1134, "parameters"], [1135, "parameters"], [1136, "parameters"], [1137, "parameters"], [1139, "parameters"], [1141, "parameters"], [1142, "parameters"], [1143, "parameters"], [1144, "parameters"], [1145, "parameters"], [1149, "parameters"], [1150, "parameters"], [1152, "parameters"], [1153, "parameters"], [1154, "parameters"], [1157, "parameters"], [1158, "parameters"], [1160, "parameters"], [1161, "parameters"], [1164, "parameters"], [1169, "parameters"], [1170, "parameters"], [1174, "parameters"], [1175, "parameters"], [1176, "parameters"], [1179, "parameters"], [1180, "parameters"], [1181, "parameters"], [1184, "parameters"], [1185, "parameters"], [1186, "parameters"], [1189, "parameters"], [1190, "parameters"], [1191, "parameters"], [1192, "parameters"], [1196, "parameters"], [1197, "parameters"], [1199, "parameters"], [1201, "parameters"], [1202, "parameters"], [1205, "parameters"], [1206, "parameters"], [1207, "parameters"], [1208, "parameters"], [1211, "parameters"], [1212, "parameters"], [1213, "parameters"], [1215, "parameters"], [1217, "parameters"], [1218, "parameters"], [1219, "parameters"], [1220, "parameters"], [1224, "parameters"], [1225, "parameters"], [1226, "parameters"], [1230, "parameters"], [1231, "parameters"], [1232, "parameters"], [1236, "parameters"], [1237, "parameters"], [1238, "parameters"], [1242, "parameters"], [1243, "parameters"], [1244, "parameters"], [1248, "parameters"], [1253, "parameters"], [1255, "parameters"], [1256, "parameters"], [1257, "parameters"], [1258, "parameters"], [1260, "parameters"], [1265, "parameters"], [1266, "parameters"], [1267, "parameters"], [1268, "parameters"], [1270, "parameters"], [1275, "parameters"], [1276, "parameters"], [1277, "parameters"], [1278, "parameters"], [1280, "parameters"], [1285, "parameters"], [1286, "parameters"], [1287, "parameters"], [1288, "parameters"], [1291, "parameters"], [1299, "parameters"], [1301, "parameters"], [1304, "parameters"], [1305, "parameters"], [1308, "parameters"], [1309, "parameters"], [1312, "parameters"], [1317, "parameters"], [1318, "parameters"], [1319, "parameters"], [1320, "parameters"], [1329, "parameters"], [1330, "parameters"], [1332, "parameters"], [1335, "parameters"], [1336, "parameters"], [1338, "parameters"], [1339, "parameters"], [1341, "parameters"], [1346, "parameters"], [1348, "parameters"], [1354, "parameters"], [1356, "parameters"], [1357, "parameters"], [1358, "parameters"], [1359, "parameters"], [1360, "parameters"], [1361, "parameters"], [1362, "parameters"], [1363, "parameters"]], "Returns": [[2, "returns"], [3, "returns"], [4, "returns"], [6, "returns"], [11, "returns"], [12, "returns"], [13, "returns"], [15, "returns"], [20, "returns"], [21, "returns"], [22, "returns"], [23, "returns"], [24, "returns"], [25, "returns"], [26, "returns"], [27, "returns"], [28, "returns"], [29, "returns"], [30, "returns"], [31, "returns"], [32, "returns"], [33, "returns"], [34, "returns"], [36, "returns"], [38, "returns"], [39, "returns"], [42, "returns"], [44, "returns"], [45, "returns"], [48, "returns"], [51, "returns"], [52, "returns"], [55, "returns"], [56, "returns"], [59, "returns"], [61, "returns"], [64, "returns"], [65, "returns"], [69, "returns"], [70, "returns"], [73, "returns"], [74, "returns"], [79, "returns"], [81, "returns"], [82, "returns"], [85, "returns"], [86, "returns"], [94, "returns"], [95, "returns"], [96, "returns"], [98, "returns"], [99, "returns"], [100, "returns"], [101, "returns"], [108, "returns"], [109, "returns"], [110, "returns"], [113, "returns"], [120, "returns"], [121, "returns"], [122, "returns"], [123, "returns"], [124, "returns"], [126, "returns"], [127, "returns"], [131, "returns"], [132, "returns"], [133, "returns"], [134, "returns"], [135, "returns"], [136, "returns"], [139, "returns"], [143, "returns"], [144, "returns"], [146, "returns"], [149, "returns"], [150, "returns"], [151, "returns"], [155, "returns"], [157, "returns"], [158, "returns"], [165, "returns"], [168, "returns"], [169, "returns"], [170, "returns"], [171, "returns"], [172, "returns"], [179, "returns"], [180, "returns"], [182, "returns"], [183, "returns"], [184, "returns"], [188, "returns"], [189, "returns"], [190, "returns"], [193, "returns"], [194, "returns"], [196, "returns"], [197, "returns"], [198, "returns"], [199, "returns"], [201, "returns"], [202, "returns"], [203, "returns"], [204, "returns"], [205, "returns"], [211, "returns"], [215, "returns"], [216, "returns"], [219, "returns"], [220, "returns"], [221, "returns"], [222, "returns"], [229, "returns"], [230, "returns"], [234, "returns"], [235, "returns"], [238, "returns"], [239, "returns"], [252, "returns"], [333, "returns"], [371, "returns"], [495, "returns"], [496, "returns"], [497, "returns"], [498, "returns"], [499, "returns"], [500, "returns"], [504, "returns"], [506, "returns"], [507, "returns"], [508, "returns"], [510, "returns"], [511, "returns"], [516, "returns"], [517, "returns"], [518, "returns"], [519, "returns"], [520, "returns"], [523, "returns"], [525, "returns"], [526, "returns"], [527, "returns"], [528, "returns"], [532, "returns"], [534, "returns"], [536, "returns"], [537, "returns"], [539, "returns"], [540, "returns"], [541, "returns"], [544, "returns"], [545, "returns"], [550, "returns"], [551, "returns"], [552, "returns"], [566, "returns"], [567, "returns"], [574, "returns"], [575, "returns"], [582, "returns"], [583, "returns"], [592, "returns"], [593, "returns"], [598, "returns"], [599, "returns"], [602, "returns"], [603, "returns"], [604, "returns"], [606, "returns"], [607, "returns"], [610, "returns"], [611, "returns"], [613, "returns"], [615, "returns"], [616, "returns"], [617, "returns"], [621, "returns"], [623, "returns"], [624, "returns"], [628, "returns"], [630, "returns"], [631, "returns"], [634, "returns"], [635, "returns"], [638, "returns"], [639, "returns"], [640, "returns"], [643, "returns"], [645, "returns"], [649, "returns"], [651, "returns"], [652, "returns"], [655, "returns"], [657, "returns"], [661, "returns"], [662, "returns"], [663, "returns"], [667, "returns"], [668, "returns"], [671, "returns"], [673, "returns"], [676, "returns"], [677, "returns"], [679, "returns"], [680, "returns"], [682, "returns"], [683, "returns"], [687, "returns"], [688, "returns"], [694, "returns"], [695, "returns"], [698, "returns"], [700, "returns"], [701, "returns"], [704, "returns"], [706, "returns"], [707, "returns"], [710, "returns"], [712, "returns"], [713, "returns"], [716, "returns"], [718, "returns"], [719, "returns"], [721, "returns"], [722, "returns"], [724, "returns"], [725, "returns"], [727, "returns"], [728, "returns"], [730, "returns"], [731, "returns"], [734, "returns"], [735, "returns"], [737, "returns"], [738, "returns"], [741, "returns"], [742, "returns"], [745, "returns"], [746, "returns"], [747, "returns"], [748, "returns"], [751, "returns"], [752, "returns"], [753, "returns"], [756, "returns"], [757, "returns"], [758, "returns"], [764, "returns"], [765, "returns"], [766, "returns"], [770, "returns"], [771, "returns"], [772, "returns"], [776, "returns"], [777, "returns"], [778, "returns"], [779, "returns"], [781, "returns"], [782, "returns"], [785, "returns"], [788, "returns"], [789, "returns"], [791, "returns"], [792, "returns"], [795, "returns"], [796, "returns"], [797, "returns"], [806, "returns"], [807, "returns"], [812, "returns"], [813, "returns"], [818, "returns"], [823, "returns"], [824, "returns"], [844, "returns"], [845, "returns"], [846, "returns"], [850, "returns"], [855, "returns"], [860, "returns"], [865, "returns"], [866, "returns"], [867, "returns"], [870, "returns"], [871, "returns"], [872, "returns"], [873, "returns"], [876, "returns"], [877, "returns"], [880, "returns"], [881, "returns"], [882, "returns"], [883, "returns"], [886, "returns"], [887, "returns"], [891, "returns"], [892, "returns"], [895, "returns"], [896, "returns"], [897, "returns"], [906, "returns"], [907, "returns"], [908, "returns"], [909, "returns"], [910, "returns"], [911, "returns"], [913, "returns"], [914, "returns"], [915, "returns"], [916, "returns"], [918, "returns"], [919, "returns"], [920, "returns"], [921, "returns"], [939, "returns"], [940, "returns"], [941, "returns"], [942, "returns"], [950, "returns"], [955, "returns"], [962, "returns"], [963, "returns"], [969, "returns"], [971, "returns"], [972, "returns"], [973, "returns"], [974, "returns"], [975, "returns"], [976, "returns"], [977, "returns"], [978, "returns"], [979, "returns"], [980, "returns"], [981, "returns"], [982, "returns"], [983, "returns"], [984, "returns"], [985, "returns"], [986, "returns"], [989, "returns"], [990, "returns"], [991, "returns"], [992, "returns"], [993, "returns"], [999, "returns"], [1000, "returns"], [1001, "returns"], [1002, "returns"], [1003, "returns"], [1007, "returns"], [1008, "returns"], [1009, "returns"], [1010, "returns"], [1014, "returns"], [1015, "returns"], [1016, "returns"], [1017, "returns"], [1021, "returns"], [1022, "returns"], [1023, "returns"], [1024, "returns"], [1025, "returns"], [1029, "returns"], [1030, "returns"], [1031, "returns"], [1032, "returns"], [1033, "returns"], [1036, "returns"], [1037, "returns"], [1038, "returns"], [1039, "returns"], [1040, "returns"], [1042, "returns"], [1043, "returns"], [1045, "returns"], [1046, "returns"], [1047, "returns"], [1048, "returns"], [1051, "returns"], [1052, "returns"], [1053, "returns"], [1054, "returns"], [1059, "returns"], [1060, "returns"], [1062, "returns"], [1063, "returns"], [1067, "returns"], [1068, "returns"], [1069, "returns"], [1070, "returns"], [1071, "returns"], [1073, "returns"], [1074, "returns"], [1078, "returns"], [1079, "returns"], [1081, "returns"], [1088, "returns"], [1089, "returns"], [1090, "returns"], [1091, "returns"], [1092, "returns"], [1093, "returns"], [1094, "returns"], [1095, "returns"], [1096, "returns"], [1097, "returns"], [1098, "returns"], [1099, "returns"], [1100, "returns"], [1101, "returns"], [1102, "returns"], [1103, "returns"], [1105, "returns"], [1106, "returns"], [1107, "returns"], [1108, "returns"], [1109, "returns"], [1110, "returns"], [1111, "returns"], [1112, "returns"], [1113, "returns"], [1114, "returns"], [1115, "returns"], [1116, "returns"], [1117, "returns"], [1118, "returns"], [1119, "returns"], [1120, "returns"], [1121, "returns"], [1124, "returns"], [1125, "returns"], [1128, "returns"], [1129, "returns"], [1134, "returns"], [1136, "returns"], [1137, "returns"], [1138, "returns"], [1139, "returns"], [1142, "returns"], [1143, "returns"], [1144, "returns"], [1146, "returns"], [1147, "returns"], [1148, "returns"], [1153, "returns"], [1154, "returns"], [1155, "returns"], [1156, "returns"], [1162, "returns"], [1163, "returns"], [1165, "returns"], [1166, "returns"], [1167, "returns"], [1168, "returns"], [1169, "returns"], [1170, "returns"], [1171, "returns"], [1172, "returns"], [1175, "returns"], [1176, "returns"], [1177, "returns"], [1180, "returns"], [1181, "returns"], [1182, "returns"], [1185, "returns"], [1186, "returns"], [1187, "returns"], [1190, "returns"], [1191, "returns"], [1193, "returns"], [1196, "returns"], [1197, "returns"], [1198, "returns"], [1202, "returns"], [1203, "returns"], [1206, "returns"], [1207, "returns"], [1209, "returns"], [1212, "returns"], [1213, "returns"], [1214, "returns"], [1215, "returns"], [1218, "returns"], [1219, "returns"], [1221, "returns"], [1222, "returns"], [1225, "returns"], [1226, "returns"], [1227, "returns"], [1228, "returns"], [1231, "returns"], [1232, "returns"], [1233, "returns"], [1234, "returns"], [1237, "returns"], [1238, "returns"], [1239, "returns"], [1240, "returns"], [1243, "returns"], [1244, "returns"], [1245, "returns"], [1246, "returns"], [1249, "returns"], [1252, "returns"], [1253, "returns"], [1256, "returns"], [1257, "returns"], [1258, "returns"], [1259, "returns"], [1261, "returns"], [1262, "returns"], [1263, "returns"], [1266, "returns"], [1267, "returns"], [1268, "returns"], [1269, "returns"], [1271, "returns"], [1272, "returns"], [1273, "returns"], [1276, "returns"], [1277, "returns"], [1278, "returns"], [1279, "returns"], [1281, "returns"], [1282, "returns"], [1283, "returns"], [1286, "returns"], [1287, "returns"], [1288, "returns"], [1289, "returns"], [1290, "returns"], [1292, "returns"], [1293, "returns"], [1294, "returns"], [1295, "returns"], [1296, "returns"], [1297, "returns"], [1299, "returns"], [1300, "returns"], [1302, "returns"], [1303, "returns"], [1304, "returns"], [1305, "returns"], [1306, "returns"], [1309, "returns"], [1310, "returns"], [1311, "returns"], [1313, "returns"], [1314, "returns"], [1315, "returns"], [1316, "returns"], [1317, "returns"], [1318, "returns"], [1321, "returns"], [1322, "returns"], [1330, "returns"], [1331, "returns"], [1333, "returns"], [1334, "returns"], [1335, "returns"], [1336, "returns"], [1337, "returns"], [1338, "returns"], [1339, "returns"], [1346, "returns"], [1348, "returns"], [1353, "returns"], [1354, "returns"], [1357, "returns"], [1358, "returns"], [1359, "returns"], [1360, "returns"], [1361, "returns"], [1362, "returns"], [1363, "returns"]], "Attributes": [[9, "attributes"], [16, "attributes"], [46, "attributes"], [53, "attributes"], [57, "attributes"], [62, "attributes"], [66, "attributes"], [71, "attributes"], [77, "attributes"], [83, "attributes"], [93, "attributes"], [102, "attributes"], [117, "attributes"], [128, "attributes"], [137, "attributes"], [147, "attributes"], [152, "attributes"], [160, "attributes"], [173, "attributes"], [185, "attributes"], [191, "attributes"], [206, "attributes"], [212, "attributes"], [231, "attributes"], [493, "attributes"], [501, "attributes"], [521, "attributes"], [529, "attributes"], [547, "attributes"], [553, "attributes"], [556, "attributes"], [561, "attributes"], [568, "attributes"], [576, "attributes"], [587, "attributes"], [600, "attributes"], [608, "attributes"], [618, "attributes"], [625, "attributes"], [632, "attributes"], [636, "attributes"], [641, "attributes"], [647, "attributes"], [653, "attributes"], [658, "attributes"], [665, "attributes"], [669, "attributes"], [674, "attributes"], [684, "attributes"], [696, "attributes"], [702, "attributes"], [708, "attributes"], [714, "attributes"], [732, "attributes"], [739, "attributes"], [743, "attributes"], [749, "attributes"], [754, "attributes"], [761, "attributes"], [768, "attributes"], [774, "attributes"], [783, "attributes"], [803, "attributes"], [809, "attributes"], [815, "attributes"], [820, "attributes"], [826, "attributes"], [847, "attributes"], [852, "attributes"], [857, "attributes"], [863, "attributes"], [868, "attributes"], [874, "attributes"], [878, "attributes"], [884, "attributes"], [888, "attributes"], [893, "attributes"], [902, "attributes"], [922, "attributes"], [934, "attributes"], [943, "attributes"], [948, "attributes"], [953, "attributes"], [956, "attributes"], [964, "attributes"], [996, "attributes"], [1004, "attributes"], [1011, "attributes"], [1018, "attributes"], [1034, "attributes"], [1057, "attributes"], [1082, "attributes"], [1132, "attributes"], [1140, "attributes"], [1151, "attributes"], [1199, "attributes"], [1254, "attributes"], [1264, "attributes"], [1274, "attributes"], [1284, "attributes"], [1307, "attributes"], [1323, "attributes"], [1340, "attributes"]], "Examples": [[252, "examples"], [324, "examples"], [371, "examples"], [412, "examples"], [414, "examples"], [1215, "examples"], [1253, "examples"], [1383, "examples"]], "Notes": [[252, "notes"], [371, "notes"], [1215, "notes"], [1253, "notes"]], "See Also": [[252, "see-also"], [371, "see-also"]], "Yields": [[917, "yields"], [924, "yields"], [925, "yields"], [926, "yields"], [927, "yields"], [928, "yields"], [929, "yields"]], "Raises": [[1215, "raises"], [1253, "raises"]], "API": [[1364, "api"]], "foxes.algorithms": [[1365, "foxes-algorithms"]], "Downwind algorithm": [[1366, "downwind-algorithm"]], "Downwind algorithm models": [[1366, "downwind-algorithm-models"]], "Iterative algorithm": [[1367, "iterative-algorithm"]], "Iterative algorithm models": [[1367, "iterative-algorithm-models"]], "Sequential algorithm": [[1368, "sequential-algorithm"]], "Sequential algorithm models": [[1368, "sequential-algorithm-models"]], "foxes.constants": [[1369, "foxes-constants"]], "foxes.core": [[1370, "foxes-core"]], "foxes": [[1371, "foxes"]], "foxes.input": [[1372, "foxes-input"]], "foxes.input.farm_layout": [[1372, "foxes-input-farm-layout"]], "foxes.input.states": [[1372, "foxes-input-states"]], "foxes.input.windio": [[1372, "foxes-input-windio"]], "foxes.models": [[1373, "foxes-models"]], "foxes.models.farm_controllers": [[1373, "foxes-models-farm-controllers"]], "foxes.models.farm_models": [[1373, "foxes-models-farm-models"]], "foxes.models.partial_wakes": [[1373, "foxes-models-partial-wakes"]], "foxes.models.point_models": [[1373, "foxes-models-point-models"]], "foxes.models.rotor_models": [[1373, "foxes-models-rotor-models"]], "foxes.models.turbine_models": [[1373, "foxes-models-turbine-models"]], "foxes.models.turbine_types": [[1373, "foxes-models-turbine-types"]], "foxes.models.vertical_profiles": [[1373, "foxes-models-vertical-profiles"]], "foxes.models.wake_frames": [[1373, "foxes-models-wake-frames"]], "foxes.models.wake_models": [[1373, "foxes-models-wake-models"], [1381, "foxes-models-wake-models"]], "foxes.models.wake_superpositions": [[1373, "foxes-models-wake-superpositions"]], "foxes.opt": [[1374, "foxes-opt"]], "foxes.opt.core": [[1374, "foxes-opt-core"]], "foxes.opt.problems": [[1374, "foxes-opt-problems"], [1375, "foxes-opt-problems"]], "foxes.opt.objectives": [[1374, "foxes-opt-objectives"]], "foxes.opt.constraints": [[1374, "foxes-opt-constraints"]], "foxes.opt.problems.layout": [[1375, "foxes-opt-problems-layout"]], "foxes.opt.problems.layout.geom_layouts": [[1375, "foxes-opt-problems-layout-geom-layouts"], [1376, "foxes-opt-problems-layout-geom-layouts"]], "foxes.opt.problems.layout.geom_layouts.objectives": [[1376, "foxes-opt-problems-layout-geom-layouts-objectives"]], "foxes.opt.problems.layout.geom_layouts.constraints": [[1376, "foxes-opt-problems-layout-geom-layouts-constraints"]], "foxes.output": [[1377, "foxes-output"]], "foxes.output.flow_plots_2d": [[1377, "foxes-output-flow-plots-2d"]], "foxes.utils": [[1378, "foxes-utils"]], "foxes.utils.abl": [[1378, "foxes-utils-abl"]], "foxes.utils.geom2d": [[1378, "foxes-utils-geom2d"]], "foxes.utils.runners": [[1378, "foxes-utils-runners"]], "foxes.utils.two_circles": [[1378, "foxes-utils-two-circles"]], "foxes.utils.abl.neutral": [[1379, "foxes-utils-abl-neutral"]], "foxes.utils.abl.stable": [[1379, "foxes-utils-abl-stable"]], "foxes.utils.abl.unstable": [[1379, "foxes-utils-abl-unstable"]], "foxes.utils.abl.sheared": [[1379, "foxes-utils-abl-sheared"]], "foxes.variables": [[1380, "foxes-variables"]], "foxes.models.wake_models.wind": [[1381, "foxes-models-wake-models-wind"]], "foxes.models.wake_models.ti": [[1381, "foxes-models-wake-models-ti"]], "foxes.models.wake_models.induction": [[1381, "foxes-models-wake-models-induction"]], "Citation": [[1382, "citation"]], "History": [[1384, "history"]], "v0.1.0-alpha": [[1384, "v0-1-0-alpha"]], "v0.1.1-alpha": [[1384, "v0-1-1-alpha"]], "v0.1.2-alpha": [[1384, "v0-1-2-alpha"]], "v0.1.3-alpha": [[1384, "v0-1-3-alpha"]], "v0.1.4-alpha": [[1384, "v0-1-4-alpha"]], "v0.2.0-alpha": [[1384, "v0-2-0-alpha"]], "v0.2.1-alpha": [[1384, "v0-2-1-alpha"]], "v0.2.2-alpha": [[1384, "v0-2-2-alpha"]], "v0.2.3-alpha": [[1384, "v0-2-3-alpha"]], "v0.2.4-alpha": [[1384, "v0-2-4-alpha"]], "v0.2.5-alpha": [[1384, "v0-2-5-alpha"]], "v0.2.6-alpha": [[1384, "v0-2-6-alpha"]], "v0.3.0-alpha": [[1384, "v0-3-0-alpha"]], "v0.3.1-alpha": [[1384, "v0-3-1-alpha"]], "v0.3.2-alpha": [[1384, "v0-3-2-alpha"]], "v0.3.3-alpha": [[1384, "v0-3-3-alpha"]], "v0.3.4-alpha": [[1384, "v0-3-4-alpha"]], "v0.3.5-alpha": [[1384, "v0-3-5-alpha"]], "v0.4.0": [[1384, "v0-4-0"]], "v0.4.1": [[1384, "v0-4-1"]], "v0.4.2": [[1384, "v0-4-2"]], "v0.4.3": [[1384, "v0-4-3"]], "v0.4.4": [[1384, "v0-4-4"]], "v0.4.5": [[1384, "v0-4-5"]], "v0.5": [[1384, "v0-5"]], "Welcome to FOXES": [[1385, "welcome-to-foxes"]], "License": [[1385, "license"]], "Contents": [[1385, "contents"]], "Contributing": [[1385, "contributing"]], "Acknowledgements": [[1385, "acknowledgements"]], "Installation": [[1386, "installation"]], "Requirements": [[1386, "requirements"]], "Installation via pip": [[1386, "installation-via-pip"]], "Virtual Python environment": [[1386, "virtual-python-environment"], [1386, "id1"]], "Standard users": [[1386, "standard-users"], [1386, "id2"]], "Developers": [[1386, "developers"], [1386, "id3"]], "Installation via conda": [[1386, "installation-via-conda"]], "Preparation": [[1386, "preparation"]], "Blockage modelling": [[1387, "Blockage-modelling"]], "Static data": [[1388, "Static-data"]], "Wind farm layout data": [[1388, "Wind-farm-layout-data"]], "test_farm_67.csv": [[1388, "test_farm_67.csv"]], "Ambient states data": [[1388, "Ambient-states-data"]], "WRF-Timeseries-4464.csv.gz": [[1388, "WRF-Timeseries-4464.csv.gz"]], "abl_states_6000.csv.gz": [[1388, "abl_states_6000.csv.gz"]], "timeseries_3000.csv.gz": [[1388, "timeseries_3000.csv.gz"]], "timeseries_8000.csv.gz": [[1388, "timeseries_8000.csv.gz"]], "timeseries_100.csv.gz": [[1388, "timeseries_100.csv.gz"]], "wind_rose_bremen.csv": [[1388, "wind_rose_bremen.csv"]], "wind_rotation.nc": [[1388, "wind_rotation.nc"]], "Power and thrust curves": [[1388, "Power-and-thrust-curves"]], "DTU-10MW-D178d3-H119.csv": [[1388, "DTU-10MW-D178d3-H119.csv"]], "IEA-15MW-D240-H150.csv": [[1388, "IEA-15MW-D240-H150.csv"]], "IWT-7d5MW-D164-H100.csv": [[1388, "IWT-7d5MW-D164-H100.csv"]], "NREL-5MW-D126-H90.csv": [[1388, "NREL-5MW-D126-H90.csv"]], "File paths": [[1388, "File-paths"]], "Heterogeneous flow": [[1389, "Heterogeneous-flow"]], "Layout optimization": [[1390, "Layout-optimization"]], "The model book": [[1391, "The-model-book"]], "Multi-height wind data": [[1392, "Multi-height-wind-data"]], "Overview - how to setup foxes": [[1393, "Overview---how-to-setup-foxes"]], "Power mask": [[1394, "Power-mask"]], "Wind sector management": [[1395, "Wind-sector-management"]], "Single row of turbines": [[1396, "Single-row-of-turbines"]], "Dynamic wakes": [[1397, "Dynamic-wakes"]], "Timeseries data": [[1398, "Timeseries-data"]], "Wind rose data": [[1399, "Wind-rose-data"]], "Yawed rotor wakes": [[1400, "Yawed-rotor-wakes"]]}, "indexentries": {"pep 585": [[252, "index-0"], [371, "index-0"]], "python enhancement proposals": [[252, "index-0"], [371, "index-0"]]}, "docurls": ["_algorithms/Downwind.html", "_algorithms/Downwind.__init__.html", "_algorithms/Downwind.all_models.html", "_algorithms/Downwind.calc_farm.html", "_algorithms/Downwind.calc_points.html", "_algorithms/Downwind.finalize.html", "_algorithms/Downwind.get_model.html", "_algorithms/Downwind.init_states.html", "_algorithms/Downwind.initialize.html", "_algorithms/Iterative.html", "_algorithms/Iterative.__init__.html", "_algorithms/Iterative.calc_farm.html", "_algorithms/Iterative.get_model.html", "_algorithms/Iterative.iterations.html", "_algorithms/Iterative.set_urelax.html", "_algorithms/Iterative.urelax.html", "_algorithms/Sequential.html", "_algorithms/Sequential.__init__.html", "_algorithms/Sequential.__iter__.html", "_algorithms/Sequential.__next__.html", "_algorithms/Sequential.calc_farm.html", "_algorithms/Sequential.calc_points.html", "_algorithms/Sequential.counter.html", "_algorithms/Sequential.cur_farm_results.html", "_algorithms/Sequential.cur_point_results.html", "_algorithms/Sequential.farm_results.html", "_algorithms/Sequential.fdata.html", "_algorithms/Sequential.get_model.html", "_algorithms/Sequential.index.html", "_algorithms/Sequential.iterating.html", "_algorithms/Sequential.mdata.html", "_algorithms/Sequential.pdata.html", "_algorithms/Sequential.point_results.html", "_algorithms/Sequential.size.html", "_algorithms/Sequential.weight.html", "_algorithms/downwind/models/CalcOrder.html", "_algorithms/downwind/models/CalcOrder.calculate.html", "_algorithms/downwind/models/CalcOrder.initialize.html", "_algorithms/downwind/models/CalcOrder.output_farm_vars.html", "_algorithms/downwind/models/CalcOrder.sub_models.html", "_algorithms/downwind/models/FarmWakesCalculation.html", "_algorithms/downwind/models/FarmWakesCalculation.__init__.html", "_algorithms/downwind/models/FarmWakesCalculation.calculate.html", "_algorithms/downwind/models/FarmWakesCalculation.initialize.html", "_algorithms/downwind/models/FarmWakesCalculation.output_farm_vars.html", "_algorithms/downwind/models/FarmWakesCalculation.sub_models.html", "_algorithms/downwind/models/PointWakesCalculation.html", "_algorithms/downwind/models/PointWakesCalculation.__init__.html", "_algorithms/downwind/models/PointWakesCalculation.calculate.html", "_algorithms/downwind/models/PointWakesCalculation.contribute_to_wake_deltas.html", "_algorithms/downwind/models/PointWakesCalculation.initialize.html", "_algorithms/downwind/models/PointWakesCalculation.output_point_vars.html", "_algorithms/downwind/models/PointWakesCalculation.sub_models.html", "_algorithms/downwind/models/SetAmbFarmResults.html", "_algorithms/downwind/models/SetAmbFarmResults.__init__.html", "_algorithms/downwind/models/SetAmbFarmResults.calculate.html", "_algorithms/downwind/models/SetAmbFarmResults.output_farm_vars.html", "_algorithms/downwind/models/SetAmbPointResults.html", "_algorithms/downwind/models/SetAmbPointResults.__init__.html", "_algorithms/downwind/models/SetAmbPointResults.calculate.html", "_algorithms/downwind/models/SetAmbPointResults.initialize.html", "_algorithms/downwind/models/SetAmbPointResults.output_point_vars.html", "_algorithms/iterative/ConvCrit.html", "_algorithms/iterative/ConvCrit.__init__.html", "_algorithms/iterative/ConvCrit.check_converged.html", "_algorithms/iterative/ConvCrit.get_deltas.html", "_algorithms/iterative/ConvCritList.html", "_algorithms/iterative/ConvCritList.__init__.html", "_algorithms/iterative/ConvCritList.add_crit.html", "_algorithms/iterative/ConvCritList.check_converged.html", "_algorithms/iterative/ConvCritList.get_deltas.html", "_algorithms/iterative/ConvVarDelta.html", "_algorithms/iterative/ConvVarDelta.__init__.html", "_algorithms/iterative/ConvVarDelta.check_converged.html", "_algorithms/iterative/ConvVarDelta.get_deltas.html", "_algorithms/iterative/DefaultConv.html", "_algorithms/iterative/DefaultConv.__init__.html", "_algorithms/iterative/models/FarmWakesCalculation.html", "_algorithms/iterative/models/FarmWakesCalculation.__init__.html", "_algorithms/iterative/models/FarmWakesCalculation.calculate.html", "_algorithms/iterative/models/FarmWakesCalculation.initialize.html", "_algorithms/iterative/models/FarmWakesCalculation.output_farm_vars.html", "_algorithms/iterative/models/FarmWakesCalculation.sub_models.html", "_algorithms/iterative/models/URelax.html", "_algorithms/iterative/models/URelax.__init__.html", "_algorithms/iterative/models/URelax.calculate.html", "_algorithms/iterative/models/URelax.output_farm_vars.html", "_algorithms/sequential/SequentialPlugin.html", "_algorithms/sequential/SequentialPlugin.__init__.html", "_algorithms/sequential/SequentialPlugin.finalize.html", "_algorithms/sequential/SequentialPlugin.initialize.html", "_algorithms/sequential/SequentialPlugin.update.html", "_algorithms/sequential/models/SeqState.html", "_algorithms/sequential/models/SeqState.__init__.html", "_algorithms/sequential/models/SeqState.calculate.html", "_algorithms/sequential/models/SeqState.counter.html", "_algorithms/sequential/models/SeqState.index.html", "_algorithms/sequential/models/SeqState.initialize.html", "_algorithms/sequential/models/SeqState.output_point_vars.html", "_algorithms/sequential/models/SeqState.size.html", "_algorithms/sequential/models/SeqState.sub_models.html", "_algorithms/sequential/models/SeqState.weights.html", "_core/Algorithm.html", "_core/Algorithm.__init__.html", "_core/Algorithm.chunked.html", "_core/Algorithm.del_model_data.html", "_core/Algorithm.finalize.html", "_core/Algorithm.get_model_data.html", "_core/Algorithm.get_models_data.html", "_core/Algorithm.get_models_idata.html", "_core/Algorithm.idata_mem.html", "_core/Algorithm.initialize.html", "_core/Algorithm.new.html", "_core/Algorithm.new_point_data.html", "_core/Algorithm.print.html", "_core/Algorithm.store_model_data.html", "_core/Algorithm.update_n_turbines.html", "_core/Data.html", "_core/Data.__init__.html", "_core/Data.add.html", "_core/Data.from_points.html", "_core/Data.n_points.html", "_core/Data.n_states.html", "_core/Data.n_turbines.html", "_core/Data.states_i0.html", "_core/DataCalcModel.html", "_core/DataCalcModel.calculate.html", "_core/DataCalcModel.run_calculation.html", "_core/ExtendedStates.html", "_core/ExtendedStates.__init__.html", "_core/ExtendedStates.append.html", "_core/ExtendedStates.calculate.html", "_core/ExtendedStates.index.html", "_core/ExtendedStates.output_point_vars.html", "_core/ExtendedStates.size.html", "_core/ExtendedStates.sub_models.html", "_core/ExtendedStates.weights.html", "_core/FarmController.html", "_core/FarmController.__init__.html", "_core/FarmController.calculate.html", "_core/FarmController.collect_models.html", "_core/FarmController.finalize.html", "_core/FarmController.initialize.html", "_core/FarmController.load_data.html", "_core/FarmController.output_farm_vars.html", "_core/FarmController.set_pars.html", "_core/FarmController.sub_models.html", "_core/FarmDataModel.html", "_core/FarmDataModel.__init__.html", "_core/FarmDataModel.calculate.html", "_core/FarmDataModel.output_farm_vars.html", "_core/FarmDataModel.run_calculation.html", "_core/FarmDataModelList.html", "_core/FarmDataModelList.__init__.html", "_core/FarmDataModelList.append.html", "_core/FarmDataModelList.calculate.html", "_core/FarmDataModelList.insert.html", "_core/FarmDataModelList.output_farm_vars.html", "_core/FarmDataModelList.sub_models.html", "_core/FarmModel.html", "_core/Model.html", "_core/Model.__init__.html", "_core/Model.__repr__.html", "_core/Model.data_to_store.html", "_core/Model.finalize.html", "_core/Model.from_data_or_store.html", "_core/Model.get_data.html", "_core/Model.initialize.html", "_core/Model.initialized.html", "_core/Model.load_data.html", "_core/Model.model_id.html", "_core/Model.sub_models.html", "_core/Model.var.html", "_core/PartialWakesModel.html", "_core/PartialWakesModel.__init__.html", "_core/PartialWakesModel.contribute_to_wake_deltas.html", "_core/PartialWakesModel.evaluate_results.html", "_core/PartialWakesModel.initialize.html", "_core/PartialWakesModel.new.html", "_core/PartialWakesModel.new_wake_deltas.html", "_core/PartialWakesModel.sub_models.html", "_core/PointDataModel.html", "_core/PointDataModel.calculate.html", "_core/PointDataModel.output_point_vars.html", "_core/PointDataModel.run_calculation.html", "_core/PointDataModelList.html", "_core/PointDataModelList.__init__.html", "_core/PointDataModelList.append.html", "_core/PointDataModelList.calculate.html", "_core/PointDataModelList.output_point_vars.html", "_core/PointDataModelList.sub_models.html", "_core/RotorModel.html", "_core/RotorModel.__init__.html", "_core/RotorModel.calculate.html", "_core/RotorModel.design_points.html", "_core/RotorModel.eval_rpoint_results.html", "_core/RotorModel.get_rotor_points.html", "_core/RotorModel.n_rotor_points.html", "_core/RotorModel.output_farm_vars.html", "_core/RotorModel.rotor_point_weights.html", "_core/States.html", "_core/States.index.html", "_core/States.load_data.html", "_core/States.output_point_vars.html", "_core/States.size.html", "_core/States.weights.html", "_core/Turbine.html", "_core/Turbine.__init__.html", "_core/Turbine.add_model.html", "_core/Turbine.insert_model.html", "_core/TurbineModel.html", "_core/TurbineModel.calculate.html", "_core/TurbineType.html", "_core/TurbineType.__init__.html", "_core/VerticalProfile.html", "_core/VerticalProfile.calculate.html", "_core/VerticalProfile.input_vars.html", "_core/VerticalProfile.new.html", "_core/WakeFrame.html", "_core/WakeFrame.calc_centreline_integral.html", "_core/WakeFrame.calc_order.html", "_core/WakeFrame.get_centreline_points.html", "_core/WakeFrame.get_wake_coos.html", "_core/WakeFrame.get_wake_modelling_data.html", "_core/WakeModel.html", "_core/WakeModel.contribute_to_wake_deltas.html", "_core/WakeModel.finalize_wake_deltas.html", "_core/WakeModel.init_wake_deltas.html", "_core/WakeSuperposition.html", "_core/WakeSuperposition.calc_final_wake_delta.html", "_core/WakeSuperposition.calc_wakes_plus_wake.html", "_core/WindFarm.html", "_core/WindFarm.__init__.html", "_core/WindFarm.add_turbine.html", "_core/WindFarm.n_turbines.html", "_core/WindFarm.turbine_names.html", "_data/StaticData.html", "_data/StaticData.__init__.html", "_data/parse_Pct_file_name.html", "_data/parse_Pct_two_files.html", "_foxes/constants/AMB_RPOINT_RESULTS.html", "_foxes/constants/DTYPE.html", "_foxes/constants/DTYPE.T.html", "_foxes/constants/DTYPE.__abs__.html", "_foxes/constants/DTYPE.__add__.html", "_foxes/constants/DTYPE.__and__.html", "_foxes/constants/DTYPE.__array__.html", "_foxes/constants/DTYPE.__array_interface__.html", "_foxes/constants/DTYPE.__array_priority__.html", "_foxes/constants/DTYPE.__array_struct__.html", "_foxes/constants/DTYPE.__array_wrap__.html", "_foxes/constants/DTYPE.__bool__.html", "_foxes/constants/DTYPE.__class_getitem__.html", "_foxes/constants/DTYPE.__divmod__.html", "_foxes/constants/DTYPE.__eq__.html", "_foxes/constants/DTYPE.__float__.html", "_foxes/constants/DTYPE.__floordiv__.html", "_foxes/constants/DTYPE.__format__.html", "_foxes/constants/DTYPE.__ge__.html", "_foxes/constants/DTYPE.__getitem__.html", "_foxes/constants/DTYPE.__gt__.html", "_foxes/constants/DTYPE.__hash__.html", "_foxes/constants/DTYPE.__int__.html", "_foxes/constants/DTYPE.__invert__.html", "_foxes/constants/DTYPE.__le__.html", "_foxes/constants/DTYPE.__lshift__.html", "_foxes/constants/DTYPE.__lt__.html", "_foxes/constants/DTYPE.__mod__.html", "_foxes/constants/DTYPE.__mul__.html", "_foxes/constants/DTYPE.__ne__.html", "_foxes/constants/DTYPE.__neg__.html", "_foxes/constants/DTYPE.__new__.html", "_foxes/constants/DTYPE.__or__.html", "_foxes/constants/DTYPE.__pos__.html", "_foxes/constants/DTYPE.__pow__.html", "_foxes/constants/DTYPE.__radd__.html", "_foxes/constants/DTYPE.__rand__.html", "_foxes/constants/DTYPE.__rdivmod__.html", "_foxes/constants/DTYPE.__reduce__.html", "_foxes/constants/DTYPE.__repr__.html", "_foxes/constants/DTYPE.__rfloordiv__.html", "_foxes/constants/DTYPE.__rlshift__.html", "_foxes/constants/DTYPE.__rmod__.html", "_foxes/constants/DTYPE.__rmul__.html", "_foxes/constants/DTYPE.__ror__.html", "_foxes/constants/DTYPE.__rpow__.html", "_foxes/constants/DTYPE.__rrshift__.html", "_foxes/constants/DTYPE.__rshift__.html", "_foxes/constants/DTYPE.__rsub__.html", "_foxes/constants/DTYPE.__rtruediv__.html", "_foxes/constants/DTYPE.__rxor__.html", "_foxes/constants/DTYPE.__sizeof__.html", "_foxes/constants/DTYPE.__str__.html", "_foxes/constants/DTYPE.__sub__.html", "_foxes/constants/DTYPE.__truediv__.html", "_foxes/constants/DTYPE.__xor__.html", "_foxes/constants/DTYPE.all.html", "_foxes/constants/DTYPE.any.html", "_foxes/constants/DTYPE.argmax.html", "_foxes/constants/DTYPE.argmin.html", "_foxes/constants/DTYPE.argsort.html", "_foxes/constants/DTYPE.as_integer_ratio.html", "_foxes/constants/DTYPE.astype.html", "_foxes/constants/DTYPE.base.html", "_foxes/constants/DTYPE.byteswap.html", "_foxes/constants/DTYPE.choose.html", "_foxes/constants/DTYPE.clip.html", "_foxes/constants/DTYPE.compress.html", "_foxes/constants/DTYPE.conj.html", "_foxes/constants/DTYPE.conjugate.html", "_foxes/constants/DTYPE.copy.html", "_foxes/constants/DTYPE.cumprod.html", "_foxes/constants/DTYPE.cumsum.html", "_foxes/constants/DTYPE.data.html", "_foxes/constants/DTYPE.diagonal.html", "_foxes/constants/DTYPE.dtype.html", "_foxes/constants/DTYPE.dump.html", "_foxes/constants/DTYPE.dumps.html", "_foxes/constants/DTYPE.fill.html", "_foxes/constants/DTYPE.flags.html", "_foxes/constants/DTYPE.flat.html", "_foxes/constants/DTYPE.flatten.html", "_foxes/constants/DTYPE.getfield.html", "_foxes/constants/DTYPE.imag.html", "_foxes/constants/DTYPE.is_integer.html", "_foxes/constants/DTYPE.item.html", "_foxes/constants/DTYPE.itemset.html", "_foxes/constants/DTYPE.itemsize.html", "_foxes/constants/DTYPE.max.html", "_foxes/constants/DTYPE.mean.html", "_foxes/constants/DTYPE.min.html", "_foxes/constants/DTYPE.nbytes.html", "_foxes/constants/DTYPE.ndim.html", "_foxes/constants/DTYPE.newbyteorder.html", "_foxes/constants/DTYPE.nonzero.html", "_foxes/constants/DTYPE.prod.html", "_foxes/constants/DTYPE.ptp.html", "_foxes/constants/DTYPE.put.html", "_foxes/constants/DTYPE.ravel.html", "_foxes/constants/DTYPE.real.html", "_foxes/constants/DTYPE.repeat.html", "_foxes/constants/DTYPE.reshape.html", "_foxes/constants/DTYPE.resize.html", "_foxes/constants/DTYPE.round.html", "_foxes/constants/DTYPE.searchsorted.html", "_foxes/constants/DTYPE.setfield.html", "_foxes/constants/DTYPE.setflags.html", "_foxes/constants/DTYPE.shape.html", "_foxes/constants/DTYPE.size.html", "_foxes/constants/DTYPE.sort.html", "_foxes/constants/DTYPE.squeeze.html", "_foxes/constants/DTYPE.std.html", "_foxes/constants/DTYPE.strides.html", "_foxes/constants/DTYPE.sum.html", "_foxes/constants/DTYPE.swapaxes.html", "_foxes/constants/DTYPE.take.html", "_foxes/constants/DTYPE.tobytes.html", "_foxes/constants/DTYPE.tofile.html", "_foxes/constants/DTYPE.tolist.html", "_foxes/constants/DTYPE.tostring.html", "_foxes/constants/DTYPE.trace.html", "_foxes/constants/DTYPE.transpose.html", "_foxes/constants/DTYPE.var.html", "_foxes/constants/DTYPE.view.html", "_foxes/constants/FARM.html", "_foxes/constants/GW.html", "_foxes/constants/ITYPE.html", "_foxes/constants/ITYPE.__abs__.html", "_foxes/constants/ITYPE.__add__.html", "_foxes/constants/ITYPE.__and__.html", "_foxes/constants/ITYPE.__bool__.html", "_foxes/constants/ITYPE.__class_getitem__.html", "_foxes/constants/ITYPE.__divmod__.html", "_foxes/constants/ITYPE.__eq__.html", "_foxes/constants/ITYPE.__float__.html", "_foxes/constants/ITYPE.__floordiv__.html", "_foxes/constants/ITYPE.__ge__.html", "_foxes/constants/ITYPE.__gt__.html", "_foxes/constants/ITYPE.__hash__.html", "_foxes/constants/ITYPE.__index__.html", "_foxes/constants/ITYPE.__int__.html", "_foxes/constants/ITYPE.__invert__.html", "_foxes/constants/ITYPE.__le__.html", "_foxes/constants/ITYPE.__lshift__.html", "_foxes/constants/ITYPE.__lt__.html", "_foxes/constants/ITYPE.__mod__.html", "_foxes/constants/ITYPE.__mul__.html", "_foxes/constants/ITYPE.__ne__.html", "_foxes/constants/ITYPE.__neg__.html", "_foxes/constants/ITYPE.__new__.html", "_foxes/constants/ITYPE.__or__.html", "_foxes/constants/ITYPE.__pos__.html", "_foxes/constants/ITYPE.__pow__.html", "_foxes/constants/ITYPE.__radd__.html", "_foxes/constants/ITYPE.__rand__.html", "_foxes/constants/ITYPE.__rdivmod__.html", "_foxes/constants/ITYPE.__repr__.html", "_foxes/constants/ITYPE.__rfloordiv__.html", "_foxes/constants/ITYPE.__rlshift__.html", "_foxes/constants/ITYPE.__rmod__.html", "_foxes/constants/ITYPE.__rmul__.html", "_foxes/constants/ITYPE.__ror__.html", "_foxes/constants/ITYPE.__rpow__.html", "_foxes/constants/ITYPE.__rrshift__.html", "_foxes/constants/ITYPE.__rshift__.html", "_foxes/constants/ITYPE.__rsub__.html", "_foxes/constants/ITYPE.__rtruediv__.html", "_foxes/constants/ITYPE.__rxor__.html", "_foxes/constants/ITYPE.__str__.html", "_foxes/constants/ITYPE.__sub__.html", "_foxes/constants/ITYPE.__truediv__.html", "_foxes/constants/ITYPE.__xor__.html", "_foxes/constants/ITYPE.bit_count.html", "_foxes/constants/ITYPE.denominator.html", "_foxes/constants/ITYPE.is_integer.html", "_foxes/constants/ITYPE.numerator.html", "_foxes/constants/KAPPA.html", "_foxes/constants/MW.html", "_foxes/constants/POINT.html", "_foxes/constants/POINTS.html", "_foxes/constants/POP.html", "_foxes/constants/P_UNITS.html", "_foxes/constants/RPOINT.html", "_foxes/constants/RPOINTS.html", "_foxes/constants/RWEIGHTS.html", "_foxes/constants/STATE.html", "_foxes/constants/STATES_SEL.html", "_foxes/constants/STATE_POINT.html", "_foxes/constants/STATE_SOURCE_TURBINE.html", "_foxes/constants/STATE_TURBINE.html", "_foxes/constants/TMODELS.html", "_foxes/constants/TMODEL_SELS.html", "_foxes/constants/TNAME.html", "_foxes/constants/TURBINE.html", "_foxes/constants/TW.html", "_foxes/constants/VALID.html", "_foxes/constants/VARS.html", "_foxes/constants/W.html", "_foxes/constants/XYH.html", "_foxes/constants/kW.html", "_foxes/variables/AMB_CAP.html", "_foxes/variables/AMB_CT.html", "_foxes/variables/AMB_P.html", "_foxes/variables/AMB_REWS.html", "_foxes/variables/AMB_REWS2.html", "_foxes/variables/AMB_REWS3.html", "_foxes/variables/AMB_RHO.html", "_foxes/variables/AMB_T.html", "_foxes/variables/AMB_TI.html", "_foxes/variables/AMB_WD.html", "_foxes/variables/AMB_WS.html", "_foxes/variables/AMB_YAW.html", "_foxes/variables/AMB_YAWM.html", "_foxes/variables/AMB_YLD.html", "_foxes/variables/CAP.html", "_foxes/variables/CT.html", "_foxes/variables/D.html", "_foxes/variables/EFF.html", "_foxes/variables/H.html", "_foxes/variables/K.html", "_foxes/variables/KB.html", "_foxes/variables/KTI.html", "_foxes/variables/MAX_P.html", "_foxes/variables/MOL.html", "_foxes/variables/ORDER.html", "_foxes/variables/P.html", "_foxes/variables/PA_ALPHA.html", "_foxes/variables/PA_BETA.html", "_foxes/variables/REWS.html", "_foxes/variables/REWS2.html", "_foxes/variables/REWS3.html", "_foxes/variables/RHO.html", "_foxes/variables/SHEAR.html", "_foxes/variables/T.html", "_foxes/variables/TI.html", "_foxes/variables/TXYH.html", "_foxes/variables/WD.html", "_foxes/variables/WEIGHT.html", "_foxes/variables/WS.html", "_foxes/variables/X.html", "_foxes/variables/Y.html", "_foxes/variables/YAW.html", "_foxes/variables/YAWM.html", "_foxes/variables/YLD.html", "_foxes/variables/Z0.html", "_foxes/variables/amb2var.html", "_foxes/variables/var2amb.html", "_input/farm_layout/add_from_csv.html", "_input/farm_layout/add_from_df.html", "_input/farm_layout/add_from_file.html", "_input/farm_layout/add_from_json.html", "_input/farm_layout/add_grid.html", "_input/farm_layout/add_row.html", "_input/states/FieldDataNC.html", "_input/states/FieldDataNC.__init__.html", "_input/states/FieldDataNC.calculate.html", "_input/states/FieldDataNC.index.html", "_input/states/FieldDataNC.load_data.html", "_input/states/FieldDataNC.output_point_vars.html", "_input/states/FieldDataNC.size.html", "_input/states/FieldDataNC.weights.html", "_input/states/MultiHeightStates.html", "_input/states/MultiHeightStates.RDICT.html", "_input/states/MultiHeightStates.__init__.html", "_input/states/MultiHeightStates.calculate.html", "_input/states/MultiHeightStates.finalize.html", "_input/states/MultiHeightStates.index.html", "_input/states/MultiHeightStates.load_data.html", "_input/states/MultiHeightStates.output_point_vars.html", "_input/states/MultiHeightStates.reset.html", "_input/states/MultiHeightStates.size.html", "_input/states/MultiHeightStates.weights.html", "_input/states/MultiHeightTimeseries.html", "_input/states/MultiHeightTimeseries.RDICT.html", "_input/states/ScanWS.html", "_input/states/ScanWS.__init__.html", "_input/states/ScanWS.calculate.html", "_input/states/ScanWS.load_data.html", "_input/states/ScanWS.output_point_vars.html", "_input/states/ScanWS.size.html", "_input/states/ScanWS.weights.html", "_input/states/SingleStateStates.html", "_input/states/SingleStateStates.__init__.html", "_input/states/SingleStateStates.calculate.html", "_input/states/SingleStateStates.initialize.html", "_input/states/SingleStateStates.output_point_vars.html", "_input/states/SingleStateStates.size.html", "_input/states/SingleStateStates.sub_models.html", "_input/states/SingleStateStates.weights.html", "_input/states/StatesTable.html", "_input/states/StatesTable.RDICT.html", "_input/states/StatesTable.__init__.html", "_input/states/StatesTable.calculate.html", "_input/states/StatesTable.finalize.html", "_input/states/StatesTable.index.html", "_input/states/StatesTable.initialize.html", "_input/states/StatesTable.load_data.html", "_input/states/StatesTable.output_point_vars.html", "_input/states/StatesTable.reset.html", "_input/states/StatesTable.size.html", "_input/states/StatesTable.sub_models.html", "_input/states/StatesTable.weights.html", "_input/states/Timeseries.html", "_input/states/Timeseries.RDICT.html", "_input/states/create_random_abl_states.html", "_input/windio/read_case.html", "_models/farm_controllers/BasicFarmController.html", "_models/farm_models/Turbine2FarmModel.html", "_models/farm_models/Turbine2FarmModel.__init__.html", "_models/farm_models/Turbine2FarmModel.__repr__.html", "_models/farm_models/Turbine2FarmModel.calculate.html", "_models/farm_models/Turbine2FarmModel.output_farm_vars.html", "_models/farm_models/Turbine2FarmModel.sub_models.html", "_models/model_book/Dict.html", "_models/model_book/Dict.__getitem__.html", "_models/model_book/Dict.__init__.html", "_models/model_book/ModelBook.html", "_models/model_book/ModelBook.__getitem__.html", "_models/model_book/ModelBook.__init__.html", "_models/model_book/ModelBook.finalize.html", "_models/model_book/ModelBook.print_toc.html", "_models/partial_wakes/Mapped.html", "_models/partial_wakes/Mapped.__init__.html", "_models/partial_wakes/Mapped.contribute_to_wake_deltas.html", "_models/partial_wakes/Mapped.evaluate_results.html", "_models/partial_wakes/Mapped.initialize.html", "_models/partial_wakes/Mapped.new_wake_deltas.html", "_models/partial_wakes/Mapped.sub_models.html", "_models/partial_wakes/PartialAxiwake.html", "_models/partial_wakes/PartialAxiwake.__init__.html", "_models/partial_wakes/PartialAxiwake.__repr__.html", "_models/partial_wakes/PartialAxiwake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.evaluate_results.html", "_models/partial_wakes/PartialAxiwake.initialize.html", "_models/partial_wakes/PartialAxiwake.new_wake_deltas.html", "_models/partial_wakes/PartialAxiwake.sub_models.html", "_models/partial_wakes/PartialDistSlicedWake.html", "_models/partial_wakes/PartialDistSlicedWake.__init__.html", "_models/partial_wakes/PartialDistSlicedWake.__repr__.html", "_models/partial_wakes/PartialDistSlicedWake.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.evaluate_results.html", "_models/partial_wakes/PartialDistSlicedWake.initialize.html", "_models/partial_wakes/PartialDistSlicedWake.new_wake_deltas.html", "_models/partial_wakes/PartialDistSlicedWake.sub_models.html", "_models/partial_wakes/PartialGrid.html", "_models/partial_wakes/PartialGrid.__init__.html", "_models/partial_wakes/PartialGrid.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.html", "_models/partial_wakes/PartialTopHat.__init__.html", "_models/partial_wakes/PartialTopHat.contribute_to_wake_deltas.html", "_models/partial_wakes/PartialTopHat.evaluate_results.html", "_models/partial_wakes/PartialTopHat.initialize.html", "_models/partial_wakes/PartialTopHat.new_wake_deltas.html", "_models/partial_wakes/PartialTopHat.sub_models.html", "_models/partial_wakes/RotorPoints.html", "_models/partial_wakes/RotorPoints.__init__.html", "_models/partial_wakes/RotorPoints.contribute_to_wake_deltas.html", "_models/partial_wakes/RotorPoints.evaluate_results.html", "_models/partial_wakes/RotorPoints.get_wake_points.html", "_models/partial_wakes/RotorPoints.new_wake_deltas.html", "_models/point_models/SetUniformData.html", "_models/point_models/SetUniformData.__init__.html", "_models/point_models/SetUniformData.calculate.html", "_models/point_models/SetUniformData.load_data.html", "_models/point_models/SetUniformData.output_point_vars.html", "_models/point_models/TKE2TI.html", "_models/point_models/TKE2TI.calculate.html", "_models/point_models/TKE2TI.output_point_vars.html", "_models/point_models/WakeDeltas.html", "_models/point_models/WakeDeltas.__init__.html", "_models/point_models/WakeDeltas.calculate.html", "_models/point_models/WakeDeltas.output_point_vars.html", "_models/rotor_models/CentreRotor.html", "_models/rotor_models/CentreRotor.design_points.html", "_models/rotor_models/CentreRotor.eval_rpoint_results.html", "_models/rotor_models/CentreRotor.get_rotor_points.html", "_models/rotor_models/CentreRotor.n_rotor_points.html", "_models/rotor_models/CentreRotor.rotor_point_weights.html", "_models/rotor_models/GridRotor.html", "_models/rotor_models/GridRotor.__init__.html", "_models/rotor_models/GridRotor.__repr__.html", "_models/rotor_models/GridRotor.design_points.html", "_models/rotor_models/GridRotor.initialize.html", "_models/rotor_models/GridRotor.n_rotor_points.html", "_models/rotor_models/GridRotor.rotor_point_weights.html", "_models/rotor_models/LevelRotor.html", "_models/rotor_models/LevelRotor.__init__.html", "_models/rotor_models/LevelRotor.__repr__.html", "_models/rotor_models/LevelRotor.design_points.html", "_models/rotor_models/LevelRotor.initialize.html", "_models/rotor_models/LevelRotor.n_rotor_points.html", "_models/rotor_models/LevelRotor.rotor_point_weights.html", "_models/turbine_models/Calculator.html", "_models/turbine_models/Calculator.__init__.html", "_models/turbine_models/Calculator.calculate.html", "_models/turbine_models/Calculator.output_farm_vars.html", "_models/turbine_models/LookupTable.html", "_models/turbine_models/LookupTable.__init__.html", "_models/turbine_models/LookupTable.calculate.html", "_models/turbine_models/LookupTable.load_data.html", "_models/turbine_models/LookupTable.output_farm_vars.html", "_models/turbine_models/PowerMask.html", "_models/turbine_models/PowerMask.__init__.html", "_models/turbine_models/PowerMask.calculate.html", "_models/turbine_models/PowerMask.initialize.html", "_models/turbine_models/PowerMask.output_farm_vars.html", "_models/turbine_models/PowerMask.update_P_ct.html", "_models/turbine_models/RotorCentreCalc.html", "_models/turbine_models/RotorCentreCalc.__init__.html", "_models/turbine_models/RotorCentreCalc.calculate.html", "_models/turbine_models/RotorCentreCalc.initialize.html", "_models/turbine_models/RotorCentreCalc.output_farm_vars.html", "_models/turbine_models/RotorCentreCalc.sub_models.html", "_models/turbine_models/SectorManagement.html", "_models/turbine_models/SectorManagement.__init__.html", "_models/turbine_models/SectorManagement.calculate.html", "_models/turbine_models/SectorManagement.initialize.html", "_models/turbine_models/SectorManagement.output_farm_vars.html", "_models/turbine_models/SetFarmVars.html", "_models/turbine_models/SetFarmVars.__init__.html", "_models/turbine_models/SetFarmVars.add_var.html", "_models/turbine_models/SetFarmVars.calculate.html", "_models/turbine_models/SetFarmVars.load_data.html", "_models/turbine_models/SetFarmVars.output_farm_vars.html", "_models/turbine_models/SetFarmVars.reset.html", "_models/turbine_models/SetXYHD.html", "_models/turbine_models/SetXYHD.__init__.html", "_models/turbine_models/SetXYHD.calculate.html", "_models/turbine_models/SetXYHD.output_farm_vars.html", "_models/turbine_models/TableFactors.html", "_models/turbine_models/TableFactors.__init__.html", "_models/turbine_models/TableFactors.calculate.html", "_models/turbine_models/TableFactors.initialize.html", "_models/turbine_models/TableFactors.output_farm_vars.html", "_models/turbine_models/Thrust2Ct.html", "_models/turbine_models/Thrust2Ct.__init__.html", "_models/turbine_models/Thrust2Ct.calculate.html", "_models/turbine_models/Thrust2Ct.output_farm_vars.html", "_models/turbine_models/YAW2YAWM.html", "_models/turbine_models/YAW2YAWM.calculate.html", "_models/turbine_models/YAW2YAWM.output_farm_vars.html", "_models/turbine_models/YAWM2YAW.html", "_models/turbine_models/YAWM2YAW.calculate.html", "_models/turbine_models/YAWM2YAW.output_farm_vars.html", "_models/turbine_models/kTI.html", "_models/turbine_models/kTI.__init__.html", "_models/turbine_models/kTI.__repr__.html", "_models/turbine_models/kTI.calculate.html", "_models/turbine_models/kTI.output_farm_vars.html", "_models/turbine_types/CpCtFile.html", "_models/turbine_types/CpCtFile.__init__.html", "_models/turbine_types/CpCtFromTwo.html", "_models/turbine_types/CpCtFromTwo.__init__.html", "_models/turbine_types/NullType.html", "_models/turbine_types/NullType.calculate.html", "_models/turbine_types/NullType.output_farm_vars.html", "_models/turbine_types/PCtFile.html", "_models/turbine_types/PCtFile.__init__.html", "_models/turbine_types/PCtFile.calculate.html", "_models/turbine_types/PCtFile.finalize.html", "_models/turbine_types/PCtFile.load_data.html", "_models/turbine_types/PCtFile.output_farm_vars.html", "_models/turbine_types/PCtFromTwo.html", "_models/turbine_types/PCtFromTwo.__init__.html", "_models/turbine_types/PCtFromTwo.calculate.html", "_models/turbine_types/PCtFromTwo.finalize.html", "_models/turbine_types/PCtFromTwo.load_data.html", "_models/turbine_types/PCtFromTwo.output_farm_vars.html", "_models/turbine_types/WsRho2PCtFromTwo.html", "_models/turbine_types/WsRho2PCtFromTwo.__init__.html", "_models/turbine_types/WsRho2PCtFromTwo.calculate.html", "_models/turbine_types/WsRho2PCtFromTwo.finalize.html", "_models/turbine_types/WsRho2PCtFromTwo.load_data.html", "_models/turbine_types/WsRho2PCtFromTwo.output_farm_vars.html", "_models/turbine_types/WsTI2PCtFromTwo.html", "_models/turbine_types/WsTI2PCtFromTwo.__init__.html", "_models/turbine_types/WsTI2PCtFromTwo.calculate.html", "_models/turbine_types/WsTI2PCtFromTwo.finalize.html", "_models/turbine_types/WsTI2PCtFromTwo.load_data.html", "_models/turbine_types/WsTI2PCtFromTwo.output_farm_vars.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.calculate.html", "_models/vertical_profiles/ABLLogNeutralWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogStableWsProfile.html", "_models/vertical_profiles/ABLLogStableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogStableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.calculate.html", "_models/vertical_profiles/ABLLogUnstableWsProfile.input_vars.html", "_models/vertical_profiles/ABLLogWsProfile.html", "_models/vertical_profiles/ABLLogWsProfile.calculate.html", "_models/vertical_profiles/ABLLogWsProfile.input_vars.html", "_models/vertical_profiles/DataProfile.html", "_models/vertical_profiles/DataProfile.__init__.html", "_models/vertical_profiles/DataProfile.calculate.html", "_models/vertical_profiles/DataProfile.input_vars.html", "_models/vertical_profiles/ShearedProfile.html", "_models/vertical_profiles/ShearedProfile.calculate.html", "_models/vertical_profiles/ShearedProfile.input_vars.html", "_models/vertical_profiles/UniformProfile.html", "_models/vertical_profiles/UniformProfile.__init__.html", "_models/vertical_profiles/UniformProfile.calculate.html", "_models/vertical_profiles/UniformProfile.input_vars.html", "_models/wake_frames/FarmOrder.html", "_models/wake_frames/FarmOrder.__init__.html", "_models/wake_frames/FarmOrder.calc_order.html", "_models/wake_frames/FarmOrder.get_centreline_points.html", "_models/wake_frames/FarmOrder.get_wake_coos.html", "_models/wake_frames/FarmOrder.sub_models.html", "_models/wake_frames/RotorWD.html", "_models/wake_frames/RotorWD.__init__.html", "_models/wake_frames/RotorWD.calc_order.html", "_models/wake_frames/RotorWD.get_centreline_points.html", "_models/wake_frames/RotorWD.get_wake_coos.html", "_models/wake_frames/SeqDynamicWakes.html", "_models/wake_frames/SeqDynamicWakes.__init__.html", "_models/wake_frames/SeqDynamicWakes.calc_order.html", "_models/wake_frames/SeqDynamicWakes.get_centreline_points.html", "_models/wake_frames/SeqDynamicWakes.get_wake_coos.html", "_models/wake_frames/SeqDynamicWakes.get_wake_modelling_data.html", "_models/wake_frames/SeqDynamicWakes.initialize.html", "_models/wake_frames/Streamlines.html", "_models/wake_frames/Streamlines.__init__.html", "_models/wake_frames/Streamlines.__repr__.html", "_models/wake_frames/Streamlines.calc_order.html", "_models/wake_frames/Streamlines.get_centreline_points.html", "_models/wake_frames/Streamlines.get_wake_coos.html", "_models/wake_frames/Streamlines.initialize.html", "_models/wake_frames/Timelines.html", "_models/wake_frames/Timelines.__init__.html", "_models/wake_frames/Timelines.calc_order.html", "_models/wake_frames/Timelines.get_centreline_points.html", "_models/wake_frames/Timelines.get_wake_coos.html", "_models/wake_frames/Timelines.initialize.html", "_models/wake_frames/YawedWakes.html", "_models/wake_frames/YawedWakes.__init__.html", "_models/wake_frames/YawedWakes.calc_order.html", "_models/wake_frames/YawedWakes.get_centreline_points.html", "_models/wake_frames/YawedWakes.get_wake_coos.html", "_models/wake_frames/YawedWakes.sub_models.html", "_models/wake_models/AxisymmetricWakeModel.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/AxisymmetricWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.html", "_models/wake_models/DistSlicedWakeModel.__init__.html", "_models/wake_models/DistSlicedWakeModel.calc_wakes_spsel_x_yz.html", "_models/wake_models/DistSlicedWakeModel.contribute_to_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.finalize_wake_deltas.html", "_models/wake_models/DistSlicedWakeModel.initialize.html", "_models/wake_models/DistSlicedWakeModel.sub_models.html", "_models/wake_models/GaussianWakeModel.html", "_models/wake_models/GaussianWakeModel.calc_amplitude_sigma_spsel.html", "_models/wake_models/GaussianWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/TopHatWakeModel.html", "_models/wake_models/TopHatWakeModel.__init__.html", "_models/wake_models/TopHatWakeModel.calc_centreline_wake_deltas.html", "_models/wake_models/TopHatWakeModel.calc_wake_radius.html", "_models/wake_models/TopHatWakeModel.calc_wakes_spsel_x_r.html", "_models/wake_models/induction/RHB.html", "_models/wake_models/induction/RHB.__init__.html", "_models/wake_models/induction/RHB.contribute_to_wake_deltas.html", "_models/wake_models/induction/RHB.finalize_wake_deltas.html", "_models/wake_models/induction/RHB.init_wake_deltas.html", "_models/wake_models/ti/CrespoHernandezTIWake.html", "_models/wake_models/ti/CrespoHernandezTIWake.__init__.html", "_models/wake_models/ti/CrespoHernandezTIWake.__repr__.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/CrespoHernandezTIWake.calc_wake_radius.html", "_models/wake_models/ti/CrespoHernandezTIWake.init_wake_deltas.html", "_models/wake_models/ti/IECTIWake.html", "_models/wake_models/ti/IECTIWake.__init__.html", "_models/wake_models/ti/IECTIWake.__repr__.html", "_models/wake_models/ti/IECTIWake.calc_centreline_wake_deltas.html", "_models/wake_models/ti/IECTIWake.calc_wake_radius.html", "_models/wake_models/ti/IECTIWake.init_wake_deltas.html", "_models/wake_models/wind/BastankhahWake.html", "_models/wake_models/wind/BastankhahWake.__init__.html", "_models/wake_models/wind/BastankhahWake.__repr__.html", "_models/wake_models/wind/BastankhahWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/BastankhahWake.init_wake_deltas.html", "_models/wake_models/wind/JensenWake.html", "_models/wake_models/wind/JensenWake.__init__.html", "_models/wake_models/wind/JensenWake.__repr__.html", "_models/wake_models/wind/JensenWake.calc_centreline_wake_deltas.html", "_models/wake_models/wind/JensenWake.calc_wake_radius.html", "_models/wake_models/wind/JensenWake.init_wake_deltas.html", "_models/wake_models/wind/PorteAgelModel.html", "_models/wake_models/wind/PorteAgelModel.AMPL_FAR.html", "_models/wake_models/wind/PorteAgelModel.AMPL_NEAR.html", "_models/wake_models/wind/PorteAgelModel.CHECK.html", "_models/wake_models/wind/PorteAgelModel.DELTA_FAR.html", "_models/wake_models/wind/PorteAgelModel.DELTA_NEAR.html", "_models/wake_models/wind/PorteAgelModel.MDATA_KEY.html", "_models/wake_models/wind/PorteAgelModel.NEAR.html", "_models/wake_models/wind/PorteAgelModel.PARS.html", "_models/wake_models/wind/PorteAgelModel.R_PC.html", "_models/wake_models/wind/PorteAgelModel.R_PC_S.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Y_FAR.html", "_models/wake_models/wind/PorteAgelModel.SIGMA_Z_FAR.html", "_models/wake_models/wind/PorteAgelModel.SP_SEL.html", "_models/wake_models/wind/PorteAgelModel.X0.html", "_models/wake_models/wind/PorteAgelModel.__init__.html", "_models/wake_models/wind/PorteAgelModel.calc_data.html", "_models/wake_models/wind/PorteAgelModel.clean.html", "_models/wake_models/wind/PorteAgelModel.get_data.html", "_models/wake_models/wind/PorteAgelModel.has_data.html", "_models/wake_models/wind/PorteAgelModel.pars.html", "_models/wake_models/wind/PorteAgelWake.html", "_models/wake_models/wind/PorteAgelWake.__init__.html", "_models/wake_models/wind/PorteAgelWake.__repr__.html", "_models/wake_models/wind/PorteAgelWake.calc_wakes_spsel_x_yz.html", "_models/wake_models/wind/PorteAgelWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWake.html", "_models/wake_models/wind/TurbOParkWake.__init__.html", "_models/wake_models/wind/TurbOParkWake.__repr__.html", "_models/wake_models/wind/TurbOParkWake.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWake.init_wake_deltas.html", "_models/wake_models/wind/TurbOParkWakeIX.html", "_models/wake_models/wind/TurbOParkWakeIX.__init__.html", "_models/wake_models/wind/TurbOParkWakeIX.__repr__.html", "_models/wake_models/wind/TurbOParkWakeIX.calc_amplitude_sigma_spsel.html", "_models/wake_models/wind/TurbOParkWakeIX.finalize.html", "_models/wake_models/wind/TurbOParkWakeIX.init_wake_deltas.html", "_models/wake_superpositions/LinearSuperposition.html", "_models/wake_superpositions/LinearSuperposition.__init__.html", "_models/wake_superpositions/LinearSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/LinearSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/LinearSuperposition.input_farm_vars.html", "_models/wake_superpositions/MaxSuperposition.html", "_models/wake_superpositions/MaxSuperposition.__init__.html", "_models/wake_superpositions/MaxSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/MaxSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/MaxSuperposition.initialize.html", "_models/wake_superpositions/MaxSuperposition.input_farm_vars.html", "_models/wake_superpositions/ProductSuperposition.html", "_models/wake_superpositions/ProductSuperposition.__init__.html", "_models/wake_superpositions/ProductSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/ProductSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.html", "_models/wake_superpositions/QuadraticSuperposition.__init__.html", "_models/wake_superpositions/QuadraticSuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/QuadraticSuperposition.calc_wakes_plus_wake.html", "_models/wake_superpositions/QuadraticSuperposition.initialize.html", "_models/wake_superpositions/QuadraticSuperposition.input_farm_vars.html", "_models/wake_superpositions/TISuperposition.html", "_models/wake_superpositions/TISuperposition.__init__.html", "_models/wake_superpositions/TISuperposition.calc_final_wake_delta.html", "_models/wake_superpositions/TISuperposition.calc_wakes_plus_wake.html", "_output/Animator.html", "_output/Animator.__init__.html", "_output/Animator.add_generator.html", "_output/Animator.animate.html", "_output/Animator.generators.html", "_output/FarmLayoutOutput.html", "_output/FarmLayoutOutput.__init__.html", "_output/FarmLayoutOutput.get_figure.html", "_output/FarmLayoutOutput.get_layout_data.html", "_output/FarmLayoutOutput.get_layout_dict.html", "_output/FarmLayoutOutput.write_csv.html", "_output/FarmLayoutOutput.write_json.html", "_output/FarmLayoutOutput.write_plot.html", "_output/FarmLayoutOutput.write_xyh.html", "_output/FarmResultsEval.html", "_output/FarmResultsEval.__init__.html", "_output/FarmResultsEval.add_capacity.html", "_output/FarmResultsEval.add_efficiency.html", "_output/FarmResultsEval.calc_farm_efficiency.html", "_output/FarmResultsEval.calc_farm_mean.html", "_output/FarmResultsEval.calc_farm_sum.html", "_output/FarmResultsEval.calc_farm_yield.html", "_output/FarmResultsEval.calc_mean_farm_power.html", "_output/FarmResultsEval.calc_states_mean.html", "_output/FarmResultsEval.calc_states_std.html", "_output/FarmResultsEval.calc_states_sum.html", "_output/FarmResultsEval.calc_turbine_mean.html", "_output/FarmResultsEval.calc_turbine_sum.html", "_output/FarmResultsEval.calc_turbine_yield.html", "_output/FarmResultsEval.gen_stdata.html", "_output/FarmResultsEval.reduce_all.html", "_output/FarmResultsEval.reduce_states.html", "_output/FarmResultsEval.reduce_turbines.html", "_output/FarmResultsEval.weinsum.html", "_output/FlowPlots2D.html", "_output/FlowPlots2D.__init__.html", "_output/FlowPlots2D.gen_states_fig_xy.html", "_output/FlowPlots2D.gen_states_fig_xz.html", "_output/FlowPlots2D.gen_states_fig_yz.html", "_output/FlowPlots2D.get_mean_fig_xy.html", "_output/FlowPlots2D.get_mean_fig_xz.html", "_output/FlowPlots2D.get_mean_fig_yz.html", "_output/Output.html", "_output/Output.new.html", "_output/Output.print_models.html", "_output/Output.write.html", "_output/ResultsWriter.html", "_output/ResultsWriter.__init__.html", "_output/ResultsWriter.write_csv.html", "_output/RosePlotOutput.html", "_output/RosePlotOutput.__init__.html", "_output/RosePlotOutput.get_data.html", "_output/RosePlotOutput.get_data_info.html", "_output/RosePlotOutput.get_figure.html", "_output/RosePlotOutput.write_figure.html", "_output/SeqFlowAnimationPlugin.html", "_output/SeqFlowAnimationPlugin.__init__.html", "_output/SeqFlowAnimationPlugin.gen_images.html", "_output/SeqFlowAnimationPlugin.initialize.html", "_output/SeqFlowAnimationPlugin.update.html", "_output/StateTurbineMap.html", "_output/StateTurbineMap.__init__.html", "_output/StateTurbineMap.plot_map.html", "_output/StatesRosePlotOutput.html", "_output/StatesRosePlotOutput.__init__.html", "_output/TurbineTypeCurves.html", "_output/TurbineTypeCurves.__init__.html", "_output/TurbineTypeCurves.plot_curves.html", "_utils/DataBook.html", "_utils/DataBook.__init__.html", "_utils/DataBook.add_data_package.html", "_utils/DataBook.add_data_package_file.html", "_utils/DataBook.add_file.html", "_utils/DataBook.add_files.html", "_utils/DataBook.get_file_path.html", "_utils/DataBook.toc.html", "_utils/PandasFileHelper.html", "_utils/PandasFileHelper.DATA_FILE_FORMATS.html", "_utils/PandasFileHelper.DEFAULT_FORMAT_DICT.html", "_utils/PandasFileHelper.DEFAULT_READING_PARAMETERS.html", "_utils/PandasFileHelper.DEFAULT_WRITING_PARAMETERS.html", "_utils/PandasFileHelper.read_file.html", "_utils/PandasFileHelper.write_file.html", "_utils/abl/neutral/calc_ws.html", "_utils/abl/neutral/logz.html", "_utils/abl/neutral/ustar.html", "_utils/abl/sheared/calc_ws.html", "_utils/abl/stable/calc_ws.html", "_utils/abl/stable/lgz.html", "_utils/abl/stable/logz.html", "_utils/abl/stable/psi.html", "_utils/abl/stable/ustar.html", "_utils/abl/unstable/calc_ws.html", "_utils/abl/unstable/logz.html", "_utils/abl/unstable/psi.html", "_utils/abl/unstable/ustar.html", "_utils/all_subclasses.html", "_utils/cubic_roots.html", "_utils/delta_wd.html", "_utils/geom2d/AreaGeometry.html", "_utils/geom2d/AreaGeometry.add_to_figure.html", "_utils/geom2d/AreaGeometry.inverse.html", "_utils/geom2d/AreaGeometry.p_max.html", "_utils/geom2d/AreaGeometry.p_min.html", "_utils/geom2d/AreaGeometry.points_distance.html", "_utils/geom2d/AreaGeometry.points_inside.html", "_utils/geom2d/AreaIntersection.html", "_utils/geom2d/AreaIntersection.__new__.html", "_utils/geom2d/AreaUnion.html", "_utils/geom2d/AreaUnion.__init__.html", "_utils/geom2d/AreaUnion.add_to_figure.html", "_utils/geom2d/AreaUnion.inverse.html", "_utils/geom2d/AreaUnion.p_max.html", "_utils/geom2d/AreaUnion.p_min.html", "_utils/geom2d/AreaUnion.points_distance.html", "_utils/geom2d/AreaUnion.points_inside.html", "_utils/geom2d/Circle.html", "_utils/geom2d/Circle.__init__.html", "_utils/geom2d/Circle.add_to_figure.html", "_utils/geom2d/Circle.p_max.html", "_utils/geom2d/Circle.p_min.html", "_utils/geom2d/Circle.points_distance.html", "_utils/geom2d/Circle.points_inside.html", "_utils/geom2d/ClosedPolygon.html", "_utils/geom2d/ClosedPolygon.__init__.html", "_utils/geom2d/ClosedPolygon.add_to_figure.html", "_utils/geom2d/ClosedPolygon.p_max.html", "_utils/geom2d/ClosedPolygon.p_min.html", "_utils/geom2d/ClosedPolygon.points_distance.html", "_utils/geom2d/ClosedPolygon.points_inside.html", "_utils/geom2d/HalfPlane.html", "_utils/geom2d/HalfPlane.__init__.html", "_utils/geom2d/HalfPlane.add_to_figure.html", "_utils/geom2d/HalfPlane.inverse.html", "_utils/geom2d/HalfPlane.p_max.html", "_utils/geom2d/HalfPlane.p_min.html", "_utils/geom2d/HalfPlane.points_distance.html", "_utils/geom2d/HalfPlane.points_inside.html", "_utils/geom2d/InvertedAreaGeometry.html", "_utils/geom2d/InvertedAreaGeometry.__init__.html", "_utils/geom2d/InvertedAreaGeometry.add_to_figure.html", "_utils/geom2d/InvertedAreaGeometry.inverse.html", "_utils/geom2d/InvertedAreaGeometry.p_max.html", "_utils/geom2d/InvertedAreaGeometry.p_min.html", "_utils/geom2d/InvertedAreaGeometry.points_distance.html", "_utils/geom2d/InvertedAreaGeometry.points_inside.html", "_utils/opt/constraints/AreaGeometryConstraint.html", "_utils/opt/constraints/AreaGeometryConstraint.__init__.html", "_utils/opt/constraints/AreaGeometryConstraint.__str__.html", "_utils/opt/constraints/AreaGeometryConstraint.ana_deriv.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.calc_population.html", "_utils/opt/constraints/AreaGeometryConstraint.component_names.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_individual.html", "_utils/opt/constraints/AreaGeometryConstraint.finalize_population.html", "_utils/opt/constraints/AreaGeometryConstraint.initialize.html", "_utils/opt/constraints/AreaGeometryConstraint.initialized.html", "_utils/opt/constraints/AreaGeometryConstraint.n_components.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.n_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_float.html", "_utils/opt/constraints/AreaGeometryConstraint.rename_vars_int.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_float.html", "_utils/opt/constraints/AreaGeometryConstraint.var_names_int.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_float.html", "_utils/opt/constraints/AreaGeometryConstraint.vardeps_int.html", "_utils/opt/constraints/FarmBoundaryConstraint.html", "_utils/opt/constraints/FarmBoundaryConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.html", "_utils/opt/constraints/MinDistConstraint.__init__.html", "_utils/opt/constraints/MinDistConstraint.calc_individual.html", "_utils/opt/constraints/MinDistConstraint.calc_population.html", "_utils/opt/constraints/MinDistConstraint.initialize.html", "_utils/opt/constraints/MinDistConstraint.n_components.html", "_utils/opt/constraints/MinDistConstraint.vardeps_float.html", "_utils/opt/core/FarmConstraint.html", "_utils/opt/core/FarmConstraint.__init__.html", "_utils/opt/core/FarmConstraint.add_to_layout_figure.html", "_utils/opt/core/FarmConstraint.calc_individual.html", "_utils/opt/core/FarmConstraint.calc_population.html", "_utils/opt/core/FarmConstraint.farm.html", "_utils/opt/core/FarmConstraint.n_components.html", "_utils/opt/core/FarmConstraint.n_sel_turbines.html", "_utils/opt/core/FarmConstraint.print_models.html", "_utils/opt/core/FarmConstraint.sel_turbines.html", "_utils/opt/core/FarmConstraint.vardeps_float.html", "_utils/opt/core/FarmObjective.html", "_utils/opt/core/FarmObjective.__init__.html", "_utils/opt/core/FarmObjective.add_to_layout_figure.html", "_utils/opt/core/FarmObjective.farm.html", "_utils/opt/core/FarmObjective.n_sel_turbines.html", "_utils/opt/core/FarmObjective.print_models.html", "_utils/opt/core/FarmObjective.sel_turbines.html", "_utils/opt/core/FarmOptProblem.html", "_utils/opt/core/FarmOptProblem.INT_INF.html", "_utils/opt/core/FarmOptProblem.__init__.html", "_utils/opt/core/FarmOptProblem.add_constraint.html", "_utils/opt/core/FarmOptProblem.add_objective.html", "_utils/opt/core/FarmOptProblem.add_to_layout_figure.html", "_utils/opt/core/FarmOptProblem.all_turbines.html", "_utils/opt/core/FarmOptProblem.apply_individual.html", "_utils/opt/core/FarmOptProblem.apply_population.html", "_utils/opt/core/FarmOptProblem.calc_gradients.html", "_utils/opt/core/FarmOptProblem.check_constraints_individual.html", "_utils/opt/core/FarmOptProblem.check_constraints_population.html", "_utils/opt/core/FarmOptProblem.constraints_tol.html", "_utils/opt/core/FarmOptProblem.counter.html", "_utils/opt/core/FarmOptProblem.evaluate_individual.html", "_utils/opt/core/FarmOptProblem.evaluate_population.html", "_utils/opt/core/FarmOptProblem.farm.html", "_utils/opt/core/FarmOptProblem.finalize_individual.html", "_utils/opt/core/FarmOptProblem.finalize_population.html", "_utils/opt/core/FarmOptProblem.get_gradients.html", "_utils/opt/core/FarmOptProblem.initial_values_float.html", "_utils/opt/core/FarmOptProblem.initial_values_int.html", "_utils/opt/core/FarmOptProblem.initialize.html", "_utils/opt/core/FarmOptProblem.max_values_constraints.html", "_utils/opt/core/FarmOptProblem.max_values_float.html", "_utils/opt/core/FarmOptProblem.max_values_int.html", "_utils/opt/core/FarmOptProblem.maximize_objs.html", "_utils/opt/core/FarmOptProblem.min_values_constraints.html", "_utils/opt/core/FarmOptProblem.min_values_float.html", "_utils/opt/core/FarmOptProblem.min_values_int.html", "_utils/opt/core/FarmOptProblem.n_constraints.html", "_utils/opt/core/FarmOptProblem.n_objectives.html", "_utils/opt/core/FarmOptProblem.n_sel_turbines.html", "_utils/opt/core/FarmOptProblem.n_vars_float.html", "_utils/opt/core/FarmOptProblem.n_vars_int.html", "_utils/opt/core/FarmOptProblem.parse_tvar.html", "_utils/opt/core/FarmOptProblem.prob_res_einsum_individual.html", "_utils/opt/core/FarmOptProblem.prob_res_einsum_population.html", "_utils/opt/core/FarmOptProblem.sel_turbines.html", "_utils/opt/core/FarmOptProblem.tvar.html", "_utils/opt/core/FarmOptProblem.update_problem_individual.html", "_utils/opt/core/FarmOptProblem.update_problem_population.html", "_utils/opt/core/FarmOptProblem.var_names_float.html", "_utils/opt/core/FarmOptProblem.var_names_int.html", "_utils/opt/core/FarmVarsProblem.html", "_utils/opt/core/FarmVarsProblem.initialize.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_individual.html", "_utils/opt/core/FarmVarsProblem.opt2farm_vars_population.html", "_utils/opt/core/FarmVarsProblem.update_problem_individual.html", "_utils/opt/core/FarmVarsProblem.update_problem_population.html", "_utils/opt/core/PopStates.html", "_utils/opt/core/PopStates.__init__.html", "_utils/opt/core/PopStates.calculate.html", "_utils/opt/core/PopStates.initialize.html", "_utils/opt/core/PopStates.load_data.html", "_utils/opt/core/PopStates.output_point_vars.html", "_utils/opt/core/PopStates.size.html", "_utils/opt/core/PopStates.weights.html", "_utils/opt/objectives/FarmVarObjective.html", "_utils/opt/objectives/FarmVarObjective.__init__.html", "_utils/opt/objectives/FarmVarObjective.calc_individual.html", "_utils/opt/objectives/FarmVarObjective.calc_population.html", "_utils/opt/objectives/FarmVarObjective.finalize_individual.html", "_utils/opt/objectives/FarmVarObjective.initialize.html", "_utils/opt/objectives/FarmVarObjective.maximize.html", "_utils/opt/objectives/FarmVarObjective.n_components.html", "_utils/opt/objectives/FarmVarObjective.vardeps_float.html", "_utils/opt/objectives/MaxFarmPower.html", "_utils/opt/objectives/MaxFarmPower.__init__.html", "_utils/opt/objectives/MaxNTurbines.html", "_utils/opt/objectives/MaxNTurbines.__init__.html", "_utils/opt/objectives/MaxNTurbines.calc_individual.html", "_utils/opt/objectives/MaxNTurbines.calc_population.html", "_utils/opt/objectives/MaxNTurbines.maximize.html", "_utils/opt/objectives/MaxNTurbines.n_components.html", "_utils/opt/objectives/MinimalMaxTI.html", "_utils/opt/objectives/MinimalMaxTI.__init__.html", "_utils/opt/problems/OptFarmVars.html", "_utils/opt/problems/OptFarmVars.__init__.html", "_utils/opt/problems/OptFarmVars.add_var.html", "_utils/opt/problems/OptFarmVars.initial_values_float.html", "_utils/opt/problems/OptFarmVars.initial_values_int.html", "_utils/opt/problems/OptFarmVars.initialize.html", "_utils/opt/problems/OptFarmVars.max_values_float.html", "_utils/opt/problems/OptFarmVars.max_values_int.html", "_utils/opt/problems/OptFarmVars.min_values_float.html", "_utils/opt/problems/OptFarmVars.min_values_int.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_individual.html", "_utils/opt/problems/OptFarmVars.opt2farm_vars_population.html", "_utils/opt/problems/OptFarmVars.var_names_float.html", "_utils/opt/problems/OptFarmVars.var_names_int.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsBoundary.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsCMinN.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.check_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsConstraint.get_bounds.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.initialize.html", "_utils/opt/problems/layout/geom_layouts/constraintsMinDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.__init__.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.calc_population.html", "_utils/opt/problems/layout/geom_layouts/constraintsValid.n_components.html", "_utils/opt/problems/layout/geom_layouts/constraintscdist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.initialize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxDensity.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMaxGridSpacing.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesMeMiMaDist.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOFixN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_individual.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.calc_population.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMaxN.n_components.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesOMinN.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.__init__.html", "_utils/opt/problems/layout/geom_layouts/objectivesObjective.maximize.html", "_utils/opt/problems/layout/geom_layouts/objectivescdist.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayout.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomLayoutGridded.var_names_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrid.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.__init__.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_individual.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.apply_population.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.get_fig.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initial_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.initialize.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.max_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.min_values_int.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_float.html", "_utils/opt/problems/layout/geom_layoutsGeomRegGrids.var_names_int.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutFarmLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initial_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.max_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.min_values_int.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_individual.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.update_problem_population.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_float.html", "_utils/opt/problems/layoutRegGridsLayoutOptProblem.var_names_int.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.ANGLE.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.OFFSET_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_X.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.SPACING_Y.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.__init__.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.finalize_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initial_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.initialize.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.max_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.min_values_float.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_individual.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_population.html", "_utils/opt/problems/layoutRegularLayoutOptProblem.var_names_float.html", "_utils/read_shp.html", "_utils/read_shp_polygons.html", "_utils/runners/DaskRunner.html", "_utils/runners/DaskRunner.__init__.html", "_utils/runners/DaskRunner.finalize.html", "_utils/runners/DaskRunner.initialize.html", "_utils/runners/DaskRunner.is_distributed.html", "_utils/runners/DaskRunner.print.html", "_utils/runners/DaskRunner.run.html", "_utils/runners/DefaultRunner.html", "_utils/runners/DefaultRunner.run.html", "_utils/runners/Runner.html", "_utils/runners/Runner.__init__.html", "_utils/runners/Runner.finalize.html", "_utils/runners/Runner.initialize.html", "_utils/runners/Runner.initialized.html", "_utils/runners/Runner.run.html", "_utils/show_plotly_fig.html", "_utils/shp2csv.html", "_utils/shp2geom2d.html", "_utils/two_circles/area.html", "_utils/two_circles/calc_area.html", "_utils/uv2wd.html", "_utils/wd2uv.html", "_utils/wd2wdvec.html", "_utils/wdvec2wd.html", "api.html", "api_algorithms.html", "api_algorithms_downwind.html", "api_algorithms_iterative.html", "api_algorithms_sequential.html", "api_constants.html", "api_core.html", "api_foxes.html", "api_input.html", "api_models.html", "api_opt.html", "api_opt_problems.html", "api_opt_problems_geom.html", "api_output.html", "api_utils.html", "api_utils_abl.html", "api_variables.html", "api_wake_models.html", "citation.html", "examples.html", "history.html", "index.html", "installation.html", "notebooks/blockage.html", "notebooks/data.html", "notebooks/heterogeneous.html", "notebooks/layout_opt.html", "notebooks/model_book.html", "notebooks/multi_height.html", "notebooks/overview.html", "notebooks/power_mask.html", "notebooks/sector_man.html", "notebooks/single_row.html", "notebooks/timelines.html", "notebooks/timeseries.html", "notebooks/wind_rose.html", "notebooks/yawed_wake.html"]})